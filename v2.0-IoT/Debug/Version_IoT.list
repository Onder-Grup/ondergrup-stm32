
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb10  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800ccf4  0800ccf4  0001ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc8  0800dcc8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcc8  0800dcc8  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcc8  0800dcc8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcc8  0800dcc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800ddcc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800ddcc  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167f5  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c8  00000000  00000000  0003695d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c266  00000000  00000000  000585d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee50  00000000  00000000  00074836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000520c  00000000  00000000  00113688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ccdc 	.word	0x0800ccdc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ccdc 	.word	0x0800ccdc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fbb6 	bl	80099c0 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa2e 	bl	80086b8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b70      	ldr	r3, [pc, #448]	; (8000744 <eepromKontrol+0x510>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <eepromKontrol+0x510>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <eepromKontrol+0x514>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b6c      	ldr	r3, [pc, #432]	; (8000748 <eepromKontrol+0x514>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b6b      	ldr	r3, [pc, #428]	; (800074c <eepromKontrol+0x518>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b69      	ldr	r3, [pc, #420]	; (800074c <eepromKontrol+0x518>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b69      	ldr	r3, [pc, #420]	; (8000750 <eepromKontrol+0x51c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <eepromKontrol+0x51c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b66      	ldr	r3, [pc, #408]	; (8000754 <eepromKontrol+0x520>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b64      	ldr	r3, [pc, #400]	; (8000754 <eepromKontrol+0x520>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b64      	ldr	r3, [pc, #400]	; (8000758 <eepromKontrol+0x524>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b62      	ldr	r3, [pc, #392]	; (8000758 <eepromKontrol+0x524>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b61      	ldr	r3, [pc, #388]	; (800075c <eepromKontrol+0x528>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <eepromKontrol+0x528>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <eepromKontrol+0x52c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <eepromKontrol+0x52c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <eepromKontrol+0x530>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <eepromKontrol+0x530>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <eepromKontrol+0x534>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <eepromKontrol+0x534>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b57      	ldr	r3, [pc, #348]	; (800076c <eepromKontrol+0x538>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b55      	ldr	r3, [pc, #340]	; (800076c <eepromKontrol+0x538>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <eepromKontrol+0x53c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <eepromKontrol+0x53c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b52      	ldr	r3, [pc, #328]	; (8000774 <eepromKontrol+0x540>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b50      	ldr	r3, [pc, #320]	; (8000774 <eepromKontrol+0x540>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b50      	ldr	r3, [pc, #320]	; (8000778 <eepromKontrol+0x544>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <eepromKontrol+0x544>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <eepromKontrol+0x548>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <eepromKontrol+0x548>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b4b      	ldr	r3, [pc, #300]	; (8000780 <eepromKontrol+0x54c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b49      	ldr	r3, [pc, #292]	; (8000780 <eepromKontrol+0x54c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <eepromKontrol+0x550>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b46      	ldr	r3, [pc, #280]	; (8000784 <eepromKontrol+0x550>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b46      	ldr	r3, [pc, #280]	; (8000788 <eepromKontrol+0x554>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <eepromKontrol+0x554>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <eepromKontrol+0x558>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b41      	ldr	r3, [pc, #260]	; (800078c <eepromKontrol+0x558>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b41      	ldr	r3, [pc, #260]	; (8000790 <eepromKontrol+0x55c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <eepromKontrol+0x55c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <eepromKontrol+0x560>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <eepromKontrol+0x560>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <eepromKontrol+0x564>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <eepromKontrol+0x564>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 50, 12, machineIDInt, 12, 3000);
 80006b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	230c      	movs	r3, #12
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <eepromKontrol+0x568>)
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	230c      	movs	r3, #12
 80006c4:	2232      	movs	r2, #50	; 0x32
 80006c6:	21a0      	movs	r1, #160	; 0xa0
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <eepromKontrol+0x56c>)
 80006ca:	f009 f979 	bl	80099c0 <HAL_I2C_Mem_Read>
	HAL_Delay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f007 fff1 	bl	80086b8 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 62, 20, wifiSSIDInt, 20, 3000);
 80006d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	2314      	movs	r3, #20
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <eepromKontrol+0x570>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2314      	movs	r3, #20
 80006e6:	223e      	movs	r2, #62	; 0x3e
 80006e8:	21a0      	movs	r1, #160	; 0xa0
 80006ea:	482d      	ldr	r0, [pc, #180]	; (80007a0 <eepromKontrol+0x56c>)
 80006ec:	f009 f968 	bl	80099c0 <HAL_I2C_Mem_Read>
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f007 ffe0 	bl	80086b8 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 83, 20, wifiPassInt, 20, 3000);
 80006f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	2314      	movs	r3, #20
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <eepromKontrol+0x574>)
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2314      	movs	r3, #20
 8000708:	2253      	movs	r2, #83	; 0x53
 800070a:	21a0      	movs	r1, #160	; 0xa0
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <eepromKontrol+0x56c>)
 800070e:	f009 f957 	bl	80099c0 <HAL_I2C_Mem_Read>
	HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f007 ffcf 	bl	80086b8 <HAL_Delay>
	//memcpy(machineIDInt, &eepromData[idStartPos], 12);
	//memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
	//memcpy(wifiPassInt, &eepromData[passStartPos], 20);
	HAL_Delay(200);
 800071a:	20c8      	movs	r0, #200	; 0xc8
 800071c:	f007 ffcc 	bl	80086b8 <HAL_Delay>
	convertArrays(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f843 	bl	80007ac <convertArrays>
	HAL_Delay(50);
 8000726:	2032      	movs	r0, #50	; 0x32
 8000728:	f007 ffc6 	bl	80086b8 <HAL_Delay>
	convertArrays(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 f83d 	bl	80007ac <convertArrays>
	HAL_Delay(50);
 8000732:	2032      	movs	r0, #50	; 0x32
 8000734:	f007 ffc0 	bl	80086b8 <HAL_Delay>
	convertArrays(3);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f837 	bl	80007ac <convertArrays>
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000239 	.word	0x20000239
 8000748:	2000022a 	.word	0x2000022a
 800074c:	2000023a 	.word	0x2000023a
 8000750:	2000022b 	.word	0x2000022b
 8000754:	2000022d 	.word	0x2000022d
 8000758:	2000023b 	.word	0x2000023b
 800075c:	2000022e 	.word	0x2000022e
 8000760:	2000022f 	.word	0x2000022f
 8000764:	20000230 	.word	0x20000230
 8000768:	20000231 	.word	0x20000231
 800076c:	20000232 	.word	0x20000232
 8000770:	20000233 	.word	0x20000233
 8000774:	20000234 	.word	0x20000234
 8000778:	20000235 	.word	0x20000235
 800077c:	20000236 	.word	0x20000236
 8000780:	20000237 	.word	0x20000237
 8000784:	20000238 	.word	0x20000238
 8000788:	2000023c 	.word	0x2000023c
 800078c:	2000023e 	.word	0x2000023e
 8000790:	20000240 	.word	0x20000240
 8000794:	20000241 	.word	0x20000241
 8000798:	2000023f 	.word	0x2000023f
 800079c:	200001c4 	.word	0x200001c4
 80007a0:	200003a8 	.word	0x200003a8
 80007a4:	200001d0 	.word	0x200001d0
 80007a8:	200001e4 	.word	0x200001e4

080007ac <convertArrays>:

void convertArrays(int state) {
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d115      	bne.n	80007e6 <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	e00e      	b.n	80007de <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <convertArrays+0xac>)
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <convertArrays+0xb0>)
 80007cc:	5c99      	ldrb	r1, [r3, r2]
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <convertArrays+0xb4>)
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	4413      	add	r3, r2
 80007d4:	460a      	mov	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	3301      	adds	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	2b0b      	cmp	r3, #11
 80007e2:	dded      	ble.n	80007c0 <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 80007e4:	e033      	b.n	800084e <convertArrays+0xa2>
	} else if(state == 2) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d118      	bne.n	800081e <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 80007ec:	2314      	movs	r3, #20
 80007ee:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	e00e      	b.n	8000814 <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <convertArrays+0xb8>)
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <convertArrays+0xbc>)
 8000802:	5c99      	ldrb	r1, [r3, r2]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <convertArrays+0xc0>)
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	4413      	add	r3, r2
 800080a:	460a      	mov	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbec      	blt.n	80007f6 <convertArrays+0x4a>
}
 800081c:	e017      	b.n	800084e <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 800081e:	2314      	movs	r3, #20
 8000820:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e00e      	b.n	8000846 <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 8000828:	4a11      	ldr	r2, [pc, #68]	; (8000870 <convertArrays+0xc4>)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <convertArrays+0xbc>)
 8000834:	5c99      	ldrb	r1, [r3, r2]
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <convertArrays+0xc8>)
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4413      	add	r3, r2
 800083c:	460a      	mov	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3301      	adds	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	429a      	cmp	r2, r3
 800084c:	dbec      	blt.n	8000828 <convertArrays+0x7c>
}
 800084e:	bf00      	nop
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200001c4 	.word	0x200001c4
 800085c:	20000010 	.word	0x20000010
 8000860:	20000190 	.word	0x20000190
 8000864:	200001d0 	.word	0x200001d0
 8000868:	2000001c 	.word	0x2000001c
 800086c:	2000019c 	.word	0x2000019c
 8000870:	200001e4 	.word	0x200001e4
 8000874:	200001b0 	.word	0x200001b0

08000878 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b0c6      	sub	sp, #280	; 0x118
 800087c:	af02      	add	r7, sp, #8
 800087e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000886:	6018      	str	r0, [r3, #0]
 8000888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000890:	6019      	str	r1, [r3, #0]
 8000892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000896:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800089a:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 800089c:	4a31      	ldr	r2, [pc, #196]	; (8000964 <sendMachineData+0xec>)
 800089e:	4932      	ldr	r1, [pc, #200]	; (8000968 <sendMachineData+0xf0>)
 80008a0:	4832      	ldr	r0, [pc, #200]	; (800096c <sendMachineData+0xf4>)
 80008a2:	f00b fdbb 	bl	800c41c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a6:	4831      	ldr	r0, [pc, #196]	; (800096c <sendMachineData+0xf4>)
 80008a8:	f7ff fcbc 	bl	8000224 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008b8:	492c      	ldr	r1, [pc, #176]	; (800096c <sendMachineData+0xf4>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	f00a ffc8 	bl	800b850 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008c0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008c4:	f007 fef8 	bl	80086b8 <HAL_Delay>

	sprintf(local_txA,
 80008c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008d4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80008d8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008dc:	4924      	ldr	r1, [pc, #144]	; (8000970 <sendMachineData+0xf8>)
 80008de:	9100      	str	r1, [sp, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	4923      	ldr	r1, [pc, #140]	; (8000974 <sendMachineData+0xfc>)
 80008e6:	f00b fd99 	bl	800c41c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc98 	bl	8000224 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000902:	491d      	ldr	r1, [pc, #116]	; (8000978 <sendMachineData+0x100>)
 8000904:	4618      	mov	r0, r3
 8000906:	f00b fd89 	bl	800c41c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc88 	bl	8000224 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0110 	add.w	r1, r7, #16
 800091c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	f00a ff93 	bl	800b850 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800092a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800092e:	f007 fec3 	bl	80086b8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000932:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc74 	bl	8000224 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	f00a ff7f 	bl	800b850 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000952:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000956:	f007 feaf 	bl	80086b8 <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	0800cd44 	.word	0x0800cd44
 8000968:	0800cd54 	.word	0x0800cd54
 800096c:	20000284 	.word	0x20000284
 8000970:	0800cdd0 	.word	0x0800cdd0
 8000974:	0800cd74 	.word	0x0800cd74
 8000978:	0800cde4 	.word	0x0800cde4

0800097c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af04      	add	r7, sp, #16
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <hata2EEPROM+0xa4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <hata2EEPROM+0xa8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4413      	add	r3, r2
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <hata2EEPROM+0xac>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800099a:	f000 f92b 	bl	8000bf4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800099e:	e000      	b.n	80009a2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e012      	b.n	80009ce <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <hata2EEPROM+0xa8>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <hata2EEPROM+0xac>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d107      	bne.n	80009c8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <hata2EEPROM+0xa8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	4919      	ldr	r1, [pc, #100]	; (8000a28 <hata2EEPROM+0xac>)
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	54ca      	strb	r2, [r1, r3]
					break;
 80009c6:	e007      	b.n	80009d8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <hata2EEPROM+0xa4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbe7      	blt.n	80009a8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <hata2EEPROM+0xa8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b299      	uxth	r1, r3
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <hata2EEPROM+0xa4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b298      	uxth	r0, r3
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <hata2EEPROM+0xa8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <hata2EEPROM+0xac>)
 80009ea:	4413      	add	r3, r2
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <hata2EEPROM+0xa4>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	b292      	uxth	r2, r2
 80009f2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80009f6:	9402      	str	r4, [sp, #8]
 80009f8:	9201      	str	r2, [sp, #4]
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4603      	mov	r3, r0
 80009fe:	460a      	mov	r2, r1
 8000a00:	21a0      	movs	r1, #160	; 0xa0
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <hata2EEPROM+0xb0>)
 8000a04:	f008 fee2 	bl	80097cc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0c:	f007 fe54 	bl	80086b8 <HAL_Delay>
	eepromKontrol(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fc0f 	bl	8000234 <eepromKontrol>
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000098 	.word	0x20000098
 8000a24:	2000009c 	.word	0x2000009c
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	200003a8 	.word	0x200003a8

08000a30 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d11d      	bne.n	8000a7c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a48:	4a61      	ldr	r2, [pc, #388]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f007 f8dd 	bl	8007c0c <lcd_print>
 8000a52:	e008      	b.n	8000a66 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d104      	bne.n	8000a66 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a5c:	4a5d      	ldr	r2, [pc, #372]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2001      	movs	r0, #1
 8000a62:	f007 f8d3 	bl	8007c0c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a66:	4a5c      	ldr	r2, [pc, #368]	; (8000bd8 <hataKoduLcdGoster+0x1a8>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f007 f8ce 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a70:	4a5a      	ldr	r2, [pc, #360]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000a72:	2107      	movs	r1, #7
 8000a74:	2002      	movs	r0, #2
 8000a76:	f007 f8c9 	bl	8007c0c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a7a:	e0a3      	b.n	8000bc4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d11d      	bne.n	8000abe <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d105      	bne.n	8000a96 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a8a:	4a51      	ldr	r2, [pc, #324]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f007 f8bc 	bl	8007c0c <lcd_print>
 8000a94:	e008      	b.n	8000aa8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a96:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d104      	bne.n	8000aa8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a9e:	4a4d      	ldr	r2, [pc, #308]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f007 f8b2 	bl	8007c0c <lcd_print>
		lcd_print(2, 2, "2");
 8000aa8:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <hataKoduLcdGoster+0x1b0>)
 8000aaa:	2102      	movs	r1, #2
 8000aac:	2002      	movs	r0, #2
 8000aae:	f007 f8ad 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000ab4:	2107      	movs	r1, #7
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f007 f8a8 	bl	8007c0c <lcd_print>
}
 8000abc:	e082      	b.n	8000bc4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d11d      	bne.n	8000b00 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000acc:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f007 f89b 	bl	8007c0c <lcd_print>
 8000ad6:	e008      	b.n	8000aea <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d104      	bne.n	8000aea <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ae0:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f007 f891 	bl	8007c0c <lcd_print>
		lcd_print(2, 3, "3");
 8000aea:	4a3e      	ldr	r2, [pc, #248]	; (8000be4 <hataKoduLcdGoster+0x1b4>)
 8000aec:	2103      	movs	r1, #3
 8000aee:	2002      	movs	r0, #2
 8000af0:	f007 f88c 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000af4:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000af6:	2107      	movs	r1, #7
 8000af8:	2002      	movs	r0, #2
 8000afa:	f007 f887 	bl	8007c0c <lcd_print>
}
 8000afe:	e061      	b.n	8000bc4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d11d      	bne.n	8000b42 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b0e:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	2001      	movs	r0, #1
 8000b14:	f007 f87a 	bl	8007c0c <lcd_print>
 8000b18:	e008      	b.n	8000b2c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d104      	bne.n	8000b2c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b22:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	2001      	movs	r0, #1
 8000b28:	f007 f870 	bl	8007c0c <lcd_print>
		lcd_print(2, 4, "4");
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <hataKoduLcdGoster+0x1b8>)
 8000b2e:	2104      	movs	r1, #4
 8000b30:	2002      	movs	r0, #2
 8000b32:	f007 f86b 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000b38:	2107      	movs	r1, #7
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f007 f866 	bl	8007c0c <lcd_print>
}
 8000b40:	e040      	b.n	8000bc4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d11d      	bne.n	8000b84 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2001      	movs	r0, #1
 8000b56:	f007 f859 	bl	8007c0c <lcd_print>
 8000b5a:	e008      	b.n	8000b6e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d104      	bne.n	8000b6e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f007 f84f 	bl	8007c0c <lcd_print>
		lcd_print(2, 5, "5");
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <hataKoduLcdGoster+0x1bc>)
 8000b70:	2105      	movs	r1, #5
 8000b72:	2002      	movs	r0, #2
 8000b74:	f007 f84a 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f007 f845 	bl	8007c0c <lcd_print>
}
 8000b82:	e01f      	b.n	8000bc4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d11c      	bne.n	8000bc4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d105      	bne.n	8000b9e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <hataKoduLcdGoster+0x1a0>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2001      	movs	r0, #1
 8000b98:	f007 f838 	bl	8007c0c <lcd_print>
 8000b9c:	e008      	b.n	8000bb0 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <hataKoduLcdGoster+0x19c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d104      	bne.n	8000bb0 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <hataKoduLcdGoster+0x1a4>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2001      	movs	r0, #1
 8000bac:	f007 f82e 	bl	8007c0c <lcd_print>
		lcd_print(2, 6, "6");
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <hataKoduLcdGoster+0x1c0>)
 8000bb2:	2106      	movs	r1, #6
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f007 f829 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <hataKoduLcdGoster+0x1ac>)
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f007 f824 	bl	8007c0c <lcd_print>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000241 	.word	0x20000241
 8000bd0:	0800ce70 	.word	0x0800ce70
 8000bd4:	0800ce80 	.word	0x0800ce80
 8000bd8:	0800ce90 	.word	0x0800ce90
 8000bdc:	0800ce94 	.word	0x0800ce94
 8000be0:	0800cea0 	.word	0x0800cea0
 8000be4:	0800cea4 	.word	0x0800cea4
 8000be8:	0800cea8 	.word	0x0800cea8
 8000bec:	0800ceac 	.word	0x0800ceac
 8000bf0:	0800ceb0 	.word	0x0800ceb0

08000bf4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	e009      	b.n	8000c14 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <eepromDataFillWithEmpty+0x38>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <eepromDataFillWithEmpty+0x3c>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <eepromDataFillWithEmpty+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbf0      	blt.n	8000c00 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000070 	.word	0x20000070
 8000c30:	20000118 	.word	0x20000118
 8000c34:	20000098 	.word	0x20000098

08000c38 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c4a:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <i2cTest+0x154>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <i2cTest+0x154>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0201 	bic.w	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c5a:	484c      	ldr	r0, [pc, #304]	; (8000d8c <i2cTest+0x154>)
 8000c5c:	f008 fc88 	bl	8009570 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c60:	23c0      	movs	r3, #192	; 0xc0
 8000c62:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c64:	2311      	movs	r3, #17
 8000c66:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4846      	ldr	r0, [pc, #280]	; (8000d90 <i2cTest+0x158>)
 8000c76:	f008 f88f 	bl	8008d98 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4844      	ldr	r0, [pc, #272]	; (8000d90 <i2cTest+0x158>)
 8000c80:	f008 fb01 	bl	8009286 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	4841      	ldr	r0, [pc, #260]	; (8000d90 <i2cTest+0x158>)
 8000c8a:	f008 fafc 	bl	8009286 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c8e:	200a      	movs	r0, #10
 8000c90:	f007 fd12 	bl	80086b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c94:	bf00      	nop
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	483d      	ldr	r0, [pc, #244]	; (8000d90 <i2cTest+0x158>)
 8000c9a:	f008 fadd 	bl	8009258 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d006      	beq.n	8000cb2 <i2cTest+0x7a>
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	483a      	ldr	r0, [pc, #232]	; (8000d90 <i2cTest+0x158>)
 8000ca8:	f008 fad6 	bl	8009258 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d1f1      	bne.n	8000c96 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	4836      	ldr	r0, [pc, #216]	; (8000d90 <i2cTest+0x158>)
 8000cb8:	f008 fae5 	bl	8009286 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f007 fcfb 	bl	80086b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cc2:	bf00      	nop
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	4832      	ldr	r0, [pc, #200]	; (8000d90 <i2cTest+0x158>)
 8000cc8:	f008 fac6 	bl	8009258 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d0f8      	beq.n	8000cc4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	482e      	ldr	r0, [pc, #184]	; (8000d90 <i2cTest+0x158>)
 8000cd8:	f008 fad5 	bl	8009286 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f007 fceb 	bl	80086b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ce2:	bf00      	nop
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	482a      	ldr	r0, [pc, #168]	; (8000d90 <i2cTest+0x158>)
 8000ce8:	f008 fab6 	bl	8009258 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d0f8      	beq.n	8000ce4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4826      	ldr	r0, [pc, #152]	; (8000d90 <i2cTest+0x158>)
 8000cf8:	f008 fac5 	bl	8009286 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f007 fcdb 	bl	80086b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d02:	bf00      	nop
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4822      	ldr	r0, [pc, #136]	; (8000d90 <i2cTest+0x158>)
 8000d08:	f008 faa6 	bl	8009258 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d1f8      	bne.n	8000d04 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	481e      	ldr	r0, [pc, #120]	; (8000d90 <i2cTest+0x158>)
 8000d18:	f008 fab5 	bl	8009286 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f007 fccb 	bl	80086b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d22:	bf00      	nop
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	481a      	ldr	r0, [pc, #104]	; (8000d90 <i2cTest+0x158>)
 8000d28:	f008 fa96 	bl	8009258 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d1f8      	bne.n	8000d24 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d32:	23c0      	movs	r3, #192	; 0xc0
 8000d34:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d36:	2312      	movs	r3, #18
 8000d38:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <i2cTest+0x158>)
 8000d48:	f008 f826 	bl	8008d98 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <i2cTest+0x154>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <i2cTest+0x154>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d5a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <i2cTest+0x154>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <i2cTest+0x154>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d6a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <i2cTest+0x154>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <i2cTest+0x154>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <i2cTest+0x154>)
 8000d7e:	f008 fab3 	bl	80092e8 <HAL_I2C_Init>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200003a8 	.word	0x200003a8
 8000d90:	40010c00 	.word	0x40010c00

08000d94 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d9e:	20c8      	movs	r0, #200	; 0xc8
 8000da0:	f007 fc8a 	bl	80086b8 <HAL_Delay>
	lcd_clear();
 8000da4:	f006 ff5e 	bl	8007c64 <lcd_clear>
	if(type == 1 && page == 0) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d143      	bne.n	8000e36 <printTemplate+0xa2>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d140      	bne.n	8000e36 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000db4:	4a9d      	ldr	r2, [pc, #628]	; (800102c <printTemplate+0x298>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 ff27 	bl	8007c0c <lcd_print>
		lcd_print(2, 3, "0");
 8000dbe:	4a9c      	ldr	r2, [pc, #624]	; (8001030 <printTemplate+0x29c>)
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f006 ff22 	bl	8007c0c <lcd_print>
		lcd_print(2, 4, "1");
 8000dc8:	4a9a      	ldr	r2, [pc, #616]	; (8001034 <printTemplate+0x2a0>)
 8000dca:	2104      	movs	r1, #4
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f006 ff1d 	bl	8007c0c <lcd_print>
		lcd_print(2, 5, "2");
 8000dd2:	4a99      	ldr	r2, [pc, #612]	; (8001038 <printTemplate+0x2a4>)
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f006 ff18 	bl	8007c0c <lcd_print>
		lcd_print(2, 6, "3");
 8000ddc:	4a97      	ldr	r2, [pc, #604]	; (800103c <printTemplate+0x2a8>)
 8000dde:	2106      	movs	r1, #6
 8000de0:	2002      	movs	r0, #2
 8000de2:	f006 ff13 	bl	8007c0c <lcd_print>
		lcd_print(2, 7, "4");
 8000de6:	4a96      	ldr	r2, [pc, #600]	; (8001040 <printTemplate+0x2ac>)
 8000de8:	2107      	movs	r1, #7
 8000dea:	2002      	movs	r0, #2
 8000dec:	f006 ff0e 	bl	8007c0c <lcd_print>
		lcd_print(2, 10, "5");
 8000df0:	4a94      	ldr	r2, [pc, #592]	; (8001044 <printTemplate+0x2b0>)
 8000df2:	210a      	movs	r1, #10
 8000df4:	2002      	movs	r0, #2
 8000df6:	f006 ff09 	bl	8007c0c <lcd_print>
		lcd_print(2, 11, "6");
 8000dfa:	4a93      	ldr	r2, [pc, #588]	; (8001048 <printTemplate+0x2b4>)
 8000dfc:	210b      	movs	r1, #11
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f006 ff04 	bl	8007c0c <lcd_print>
		lcd_print(2, 12, "7");
 8000e04:	4a91      	ldr	r2, [pc, #580]	; (800104c <printTemplate+0x2b8>)
 8000e06:	210c      	movs	r1, #12
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f006 feff 	bl	8007c0c <lcd_print>
		lcd_print(2, 13, "8");
 8000e0e:	4a90      	ldr	r2, [pc, #576]	; (8001050 <printTemplate+0x2bc>)
 8000e10:	210d      	movs	r1, #13
 8000e12:	2002      	movs	r0, #2
 8000e14:	f006 fefa 	bl	8007c0c <lcd_print>
		lcd_print(2, 14, "9");
 8000e18:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <printTemplate+0x2c0>)
 8000e1a:	210e      	movs	r1, #14
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f006 fef5 	bl	8007c0c <lcd_print>
		lcd_print(1, 5, machineID);
 8000e22:	4a8d      	ldr	r2, [pc, #564]	; (8001058 <printTemplate+0x2c4>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2001      	movs	r0, #1
 8000e28:	f006 fef0 	bl	8007c0c <lcd_print>
		lcd_gotoxy(2, 3);
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f006 fecd 	bl	8007bce <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e34:	e0f5      	b.n	8001022 <printTemplate+0x28e>
	} else if(type == 2) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d178      	bne.n	8000f2e <printTemplate+0x19a>
		if(page == 1) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d114      	bne.n	8000e6c <printTemplate+0xd8>
			lcd_clear();
 8000e42:	f006 ff0f 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f007 fc36 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e4c:	4a83      	ldr	r2, [pc, #524]	; (800105c <printTemplate+0x2c8>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2001      	movs	r0, #1
 8000e52:	f006 fedb 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e56:	4a82      	ldr	r2, [pc, #520]	; (8001060 <printTemplate+0x2cc>)
 8000e58:	2107      	movs	r1, #7
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f006 fed6 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e60:	4a80      	ldr	r2, [pc, #512]	; (8001064 <printTemplate+0x2d0>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	2002      	movs	r0, #2
 8000e66:	f006 fed1 	bl	8007c0c <lcd_print>
}
 8000e6a:	e0da      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 2) {
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d114      	bne.n	8000e9c <printTemplate+0x108>
			lcd_clear();
 8000e72:	f006 fef7 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f007 fc1e 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e7c:	4a77      	ldr	r2, [pc, #476]	; (800105c <printTemplate+0x2c8>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f006 fec3 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e86:	4a76      	ldr	r2, [pc, #472]	; (8001060 <printTemplate+0x2cc>)
 8000e88:	2107      	movs	r1, #7
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f006 febe 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e90:	4a75      	ldr	r2, [pc, #468]	; (8001068 <printTemplate+0x2d4>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	2002      	movs	r0, #2
 8000e96:	f006 feb9 	bl	8007c0c <lcd_print>
}
 8000e9a:	e0c2      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 3) {
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d114      	bne.n	8000ecc <printTemplate+0x138>
			lcd_clear();
 8000ea2:	f006 fedf 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f007 fc06 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eac:	4a6b      	ldr	r2, [pc, #428]	; (800105c <printTemplate+0x2c8>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f006 feab 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eb6:	4a6a      	ldr	r2, [pc, #424]	; (8001060 <printTemplate+0x2cc>)
 8000eb8:	2107      	movs	r1, #7
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f006 fea6 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ec0:	4a6a      	ldr	r2, [pc, #424]	; (800106c <printTemplate+0x2d8>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f006 fea1 	bl	8007c0c <lcd_print>
}
 8000eca:	e0aa      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 4) {
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d114      	bne.n	8000efc <printTemplate+0x168>
			lcd_clear();
 8000ed2:	f006 fec7 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000ed6:	2064      	movs	r0, #100	; 0x64
 8000ed8:	f007 fbee 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000edc:	4a5f      	ldr	r2, [pc, #380]	; (800105c <printTemplate+0x2c8>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 fe93 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ee6:	4a5e      	ldr	r2, [pc, #376]	; (8001060 <printTemplate+0x2cc>)
 8000ee8:	2107      	movs	r1, #7
 8000eea:	2001      	movs	r0, #1
 8000eec:	f006 fe8e 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ef0:	4a5f      	ldr	r2, [pc, #380]	; (8001070 <printTemplate+0x2dc>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f006 fe89 	bl	8007c0c <lcd_print>
}
 8000efa:	e092      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 5) {
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	f040 808f 	bne.w	8001022 <printTemplate+0x28e>
			lcd_clear();
 8000f04:	f006 feae 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000f08:	2064      	movs	r0, #100	; 0x64
 8000f0a:	f007 fbd5 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f0e:	4a53      	ldr	r2, [pc, #332]	; (800105c <printTemplate+0x2c8>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 fe7a 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f18:	4a51      	ldr	r2, [pc, #324]	; (8001060 <printTemplate+0x2cc>)
 8000f1a:	2107      	movs	r1, #7
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f006 fe75 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f22:	4a54      	ldr	r2, [pc, #336]	; (8001074 <printTemplate+0x2e0>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 fe70 	bl	8007c0c <lcd_print>
}
 8000f2c:	e079      	b.n	8001022 <printTemplate+0x28e>
	} else if(type == 3) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d176      	bne.n	8001022 <printTemplate+0x28e>
		if(page == 1) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d114      	bne.n	8000f64 <printTemplate+0x1d0>
			lcd_clear();
 8000f3a:	f006 fe93 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f007 fbba 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <printTemplate+0x2e4>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f006 fe5f 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f4e:	4a4b      	ldr	r2, [pc, #300]	; (800107c <printTemplate+0x2e8>)
 8000f50:	2107      	movs	r1, #7
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fe5a 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f58:	4a42      	ldr	r2, [pc, #264]	; (8001064 <printTemplate+0x2d0>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fe55 	bl	8007c0c <lcd_print>
}
 8000f62:	e05e      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d114      	bne.n	8000f94 <printTemplate+0x200>
			lcd_clear();
 8000f6a:	f006 fe7b 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f007 fba2 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f74:	4a40      	ldr	r2, [pc, #256]	; (8001078 <printTemplate+0x2e4>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f006 fe47 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f7e:	4a3f      	ldr	r2, [pc, #252]	; (800107c <printTemplate+0x2e8>)
 8000f80:	2107      	movs	r1, #7
 8000f82:	2001      	movs	r0, #1
 8000f84:	f006 fe42 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f88:	4a37      	ldr	r2, [pc, #220]	; (8001068 <printTemplate+0x2d4>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f006 fe3d 	bl	8007c0c <lcd_print>
}
 8000f92:	e046      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d114      	bne.n	8000fc4 <printTemplate+0x230>
			lcd_clear();
 8000f9a:	f006 fe63 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f007 fb8a 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fa4:	4a34      	ldr	r2, [pc, #208]	; (8001078 <printTemplate+0x2e4>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f006 fe2f 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <printTemplate+0x2e8>)
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f006 fe2a 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fb8:	4a2c      	ldr	r2, [pc, #176]	; (800106c <printTemplate+0x2d8>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f006 fe25 	bl	8007c0c <lcd_print>
}
 8000fc2:	e02e      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 4) {
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d114      	bne.n	8000ff4 <printTemplate+0x260>
			lcd_clear();
 8000fca:	f006 fe4b 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f007 fb72 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fd4:	4a28      	ldr	r2, [pc, #160]	; (8001078 <printTemplate+0x2e4>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f006 fe17 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <printTemplate+0x2e8>)
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f006 fe12 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <printTemplate+0x2dc>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2002      	movs	r0, #2
 8000fee:	f006 fe0d 	bl	8007c0c <lcd_print>
}
 8000ff2:	e016      	b.n	8001022 <printTemplate+0x28e>
		} else if(page == 5) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d113      	bne.n	8001022 <printTemplate+0x28e>
			lcd_clear();
 8000ffa:	f006 fe33 	bl	8007c64 <lcd_clear>
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f007 fb5a 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <printTemplate+0x2e4>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fdff 	bl	8007c0c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <printTemplate+0x2e8>)
 8001010:	2107      	movs	r1, #7
 8001012:	2001      	movs	r0, #1
 8001014:	f006 fdfa 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <printTemplate+0x2e0>)
 800101a:	2101      	movs	r1, #1
 800101c:	2002      	movs	r0, #2
 800101e:	f006 fdf5 	bl	8007c0c <lcd_print>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	0800ceb4 	.word	0x0800ceb4
 8001030:	0800cebc 	.word	0x0800cebc
 8001034:	0800cec0 	.word	0x0800cec0
 8001038:	0800cec4 	.word	0x0800cec4
 800103c:	0800cec8 	.word	0x0800cec8
 8001040:	0800cecc 	.word	0x0800cecc
 8001044:	0800ced0 	.word	0x0800ced0
 8001048:	0800ced4 	.word	0x0800ced4
 800104c:	0800ced8 	.word	0x0800ced8
 8001050:	0800cedc 	.word	0x0800cedc
 8001054:	0800cee0 	.word	0x0800cee0
 8001058:	20000190 	.word	0x20000190
 800105c:	0800cee4 	.word	0x0800cee4
 8001060:	2000019c 	.word	0x2000019c
 8001064:	0800ceec 	.word	0x0800ceec
 8001068:	0800cf00 	.word	0x0800cf00
 800106c:	0800cf14 	.word	0x0800cf14
 8001070:	0800cf28 	.word	0x0800cf28
 8001074:	0800cf3c 	.word	0x0800cf3c
 8001078:	0800cf50 	.word	0x0800cf50
 800107c:	200001b0 	.word	0x200001b0

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	; (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010b2:	2101      	movs	r1, #1
 80010b4:	488e      	ldr	r0, [pc, #568]	; (80012f0 <menu+0x244>)
 80010b6:	f008 f8cf 	bl	8009258 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 808e 	bne.w	80011de <menu+0x132>
 80010c2:	4b8c      	ldr	r3, [pc, #560]	; (80012f4 <menu+0x248>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8086 	beq.w	80011de <menu+0x132>
		menuSayac = menuSayac+1;
 80010d2:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <menu+0x24c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b87      	ldr	r3, [pc, #540]	; (80012f8 <menu+0x24c>)
 80010dc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80010de:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <menu+0x24c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b24      	cmp	r3, #36	; 0x24
 80010e4:	d102      	bne.n	80010ec <menu+0x40>
			menuSayac = 1;
 80010e6:	4b84      	ldr	r3, [pc, #528]	; (80012f8 <menu+0x24c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80010ec:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <menu+0x24c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b12      	cmp	r3, #18
 80010f2:	d106      	bne.n	8001102 <menu+0x56>
 80010f4:	4b81      	ldr	r3, [pc, #516]	; (80012fc <menu+0x250>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <menu+0x56>
			menuSayac = 21;
 80010fc:	4b7e      	ldr	r3, [pc, #504]	; (80012f8 <menu+0x24c>)
 80010fe:	2215      	movs	r2, #21
 8001100:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <menu+0x24c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d106      	bne.n	8001118 <menu+0x6c>
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <menu+0x254>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <menu+0x6c>
			menuSayac = 16;
 8001112:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <menu+0x24c>)
 8001114:	2210      	movs	r2, #16
 8001116:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001118:	4b77      	ldr	r3, [pc, #476]	; (80012f8 <menu+0x24c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b0d      	cmp	r3, #13
 800111e:	d106      	bne.n	800112e <menu+0x82>
 8001120:	4b77      	ldr	r3, [pc, #476]	; (8001300 <menu+0x254>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <menu+0x82>
			menuSayac = 16;
 8001128:	4b73      	ldr	r3, [pc, #460]	; (80012f8 <menu+0x24c>)
 800112a:	2210      	movs	r2, #16
 800112c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <menu+0x24c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b09      	cmp	r3, #9
 8001134:	d106      	bne.n	8001144 <menu+0x98>
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <menu+0x254>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d102      	bne.n	8001144 <menu+0x98>
			menuSayac = 13;
 800113e:	4b6e      	ldr	r3, [pc, #440]	; (80012f8 <menu+0x24c>)
 8001140:	220d      	movs	r2, #13
 8001142:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001144:	4b6c      	ldr	r3, [pc, #432]	; (80012f8 <menu+0x24c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d10a      	bne.n	8001162 <menu+0xb6>
 800114c:	4b6d      	ldr	r3, [pc, #436]	; (8001304 <menu+0x258>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d003      	beq.n	800115c <menu+0xb0>
 8001154:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <menu+0x258>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d102      	bne.n	8001162 <menu+0xb6>
			menuSayac = 11;
 800115c:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <menu+0x24c>)
 800115e:	220b      	movs	r2, #11
 8001160:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <menu+0x24c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b0c      	cmp	r3, #12
 8001168:	d10e      	bne.n	8001188 <menu+0xdc>
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <menu+0x25c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d003      	beq.n	800117a <menu+0xce>
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <menu+0x25c>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d106      	bne.n	8001188 <menu+0xdc>
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <menu+0x254>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <menu+0xdc>
			menuSayac = 16;
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <menu+0x24c>)
 8001184:	2210      	movs	r2, #16
 8001186:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <menu+0x24c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d10e      	bne.n	80011ae <menu+0x102>
 8001190:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <menu+0x25c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d003      	beq.n	80011a0 <menu+0xf4>
 8001198:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <menu+0x25c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d106      	bne.n	80011ae <menu+0x102>
 80011a0:	4b57      	ldr	r3, [pc, #348]	; (8001300 <menu+0x254>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d102      	bne.n	80011ae <menu+0x102>
			menuSayac = 13;
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <menu+0x24c>)
 80011aa:	220d      	movs	r2, #13
 80011ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80011ae:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <menu+0x24c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d106      	bne.n	80011c4 <menu+0x118>
 80011b6:	4b55      	ldr	r3, [pc, #340]	; (800130c <menu+0x260>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <menu+0x118>
			menuSayac = 16;
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <menu+0x24c>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <menu+0x24c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b18      	cmp	r3, #24
 80011ca:	d106      	bne.n	80011da <menu+0x12e>
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <menu+0x250>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <menu+0x12e>
			menuSayac = 26;
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <menu+0x24c>)
 80011d6:	221a      	movs	r2, #26
 80011d8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011da:	f003 fb3d 	bl	8004858 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011de:	2108      	movs	r1, #8
 80011e0:	484b      	ldr	r0, [pc, #300]	; (8001310 <menu+0x264>)
 80011e2:	f008 f839 	bl	8009258 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d175      	bne.n	80012d8 <menu+0x22c>
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <menu+0x248>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f083 0301 	eor.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d06e      	beq.n	80012d8 <menu+0x22c>
		if (menuSayac <= 1) {
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <menu+0x24c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d802      	bhi.n	8001208 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <menu+0x24c>)
 8001204:	2224      	movs	r2, #36	; 0x24
 8001206:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <menu+0x24c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	3b01      	subs	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <menu+0x24c>)
 8001212:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <menu+0x24c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b14      	cmp	r3, #20
 800121a:	d106      	bne.n	800122a <menu+0x17e>
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <menu+0x250>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <menu+0x17e>
			menuSayac = 17;
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <menu+0x24c>)
 8001226:	2211      	movs	r2, #17
 8001228:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <menu+0x24c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d106      	bne.n	8001240 <menu+0x194>
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <menu+0x254>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <menu+0x194>
			menuSayac = 7;
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <menu+0x24c>)
 800123c:	2207      	movs	r2, #7
 800123e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <menu+0x24c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d106      	bne.n	8001256 <menu+0x1aa>
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <menu+0x254>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <menu+0x1aa>
			menuSayac = 12;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <menu+0x24c>)
 8001252:	220c      	movs	r2, #12
 8001254:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <menu+0x24c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b0c      	cmp	r3, #12
 800125c:	d106      	bne.n	800126c <menu+0x1c0>
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <menu+0x254>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d102      	bne.n	800126c <menu+0x1c0>
			menuSayac = 8;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <menu+0x24c>)
 8001268:	2208      	movs	r2, #8
 800126a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <menu+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0a      	cmp	r3, #10
 8001272:	d10a      	bne.n	800128a <menu+0x1de>
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <menu+0x258>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <menu+0x1d8>
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <menu+0x258>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <menu+0x1de>
			menuSayac = 9;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <menu+0x24c>)
 8001286:	2209      	movs	r2, #9
 8001288:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <menu+0x24c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d10a      	bne.n	80012a8 <menu+0x1fc>
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <menu+0x25c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d003      	beq.n	80012a2 <menu+0x1f6>
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <menu+0x25c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d102      	bne.n	80012a8 <menu+0x1fc>
			menuSayac = 11;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <menu+0x24c>)
 80012a4:	220b      	movs	r2, #11
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <menu+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d106      	bne.n	80012be <menu+0x212>
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <menu+0x260>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <menu+0x212>
			menuSayac = 14;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <menu+0x24c>)
 80012ba:	220e      	movs	r2, #14
 80012bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <menu+0x24c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b19      	cmp	r3, #25
 80012c4:	d106      	bne.n	80012d4 <menu+0x228>
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <menu+0x250>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <menu+0x228>
			menuSayac = 23;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <menu+0x24c>)
 80012d0:	2217      	movs	r2, #23
 80012d2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012d4:	f003 fac0 	bl	8004858 <bekle>
	}

	if (menuSayac == 0) {
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <menu+0x24c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d133      	bne.n	8001348 <menu+0x29c>
		if(dilSecim == 0) {
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <menu+0x268>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d121      	bne.n	800132c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <menu+0x26c>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	2001      	movs	r0, #1
 80012ee:	e015      	b.n	800131c <menu+0x270>
 80012f0:	40010800 	.word	0x40010800
 80012f4:	2000024f 	.word	0x2000024f
 80012f8:	20000220 	.word	0x20000220
 80012fc:	2000022f 	.word	0x2000022f
 8001300:	20000228 	.word	0x20000228
 8001304:	20000229 	.word	0x20000229
 8001308:	2000022a 	.word	0x2000022a
 800130c:	2000022b 	.word	0x2000022b
 8001310:	40011000 	.word	0x40011000
 8001314:	20000241 	.word	0x20000241
 8001318:	0800cf58 	.word	0x0800cf58
 800131c:	f006 fc76 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001320:	4a94      	ldr	r2, [pc, #592]	; (8001574 <menu+0x4c8>)
 8001322:	2101      	movs	r1, #1
 8001324:	2002      	movs	r0, #2
 8001326:	f006 fc71 	bl	8007c0c <lcd_print>
 800132a:	e00d      	b.n	8001348 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <menu+0x4cc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d109      	bne.n	8001348 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001334:	4a91      	ldr	r2, [pc, #580]	; (800157c <menu+0x4d0>)
 8001336:	2101      	movs	r1, #1
 8001338:	2001      	movs	r0, #1
 800133a:	f006 fc67 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800133e:	4a90      	ldr	r2, [pc, #576]	; (8001580 <menu+0x4d4>)
 8001340:	2101      	movs	r1, #1
 8001342:	2002      	movs	r0, #2
 8001344:	f006 fc62 	bl	8007c0c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001348:	4b8e      	ldr	r3, [pc, #568]	; (8001584 <menu+0x4d8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 82b5 	bne.w	80018bc <menu+0x810>
		if(dilSecim == 0) {
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <menu+0x4cc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800135a:	4a8b      	ldr	r2, [pc, #556]	; (8001588 <menu+0x4dc>)
 800135c:	2101      	movs	r1, #1
 800135e:	2001      	movs	r0, #1
 8001360:	f006 fc54 	bl	8007c0c <lcd_print>
 8001364:	e008      	b.n	8001378 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001366:	4b84      	ldr	r3, [pc, #528]	; (8001578 <menu+0x4cc>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d104      	bne.n	8001378 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <menu+0x4e0>)
 8001370:	2101      	movs	r1, #1
 8001372:	2001      	movs	r0, #1
 8001374:	f006 fc4a 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001378:	4b85      	ldr	r3, [pc, #532]	; (8001590 <menu+0x4e4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d123      	bne.n	80013c8 <menu+0x31c>
			if(dilSecim == 0) {
 8001380:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <menu+0x4cc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001388:	4a82      	ldr	r2, [pc, #520]	; (8001594 <menu+0x4e8>)
 800138a:	2101      	movs	r1, #1
 800138c:	2002      	movs	r0, #2
 800138e:	f006 fc3d 	bl	8007c0c <lcd_print>
 8001392:	e008      	b.n	80013a6 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001394:	4b78      	ldr	r3, [pc, #480]	; (8001578 <menu+0x4cc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d104      	bne.n	80013a6 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 800139c:	4a7e      	ldr	r2, [pc, #504]	; (8001598 <menu+0x4ec>)
 800139e:	2101      	movs	r1, #1
 80013a0:	2002      	movs	r0, #2
 80013a2:	f006 fc33 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <menu+0x4f0>)
 80013a8:	210f      	movs	r1, #15
 80013aa:	2002      	movs	r0, #2
 80013ac:	f006 fc2e 	bl	8007c0c <lcd_print>
			itoa(hataKayit1, snum, 10);
 80013b0:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <menu+0x4f4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	220a      	movs	r2, #10
 80013b6:	497b      	ldr	r1, [pc, #492]	; (80015a4 <menu+0x4f8>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a ff79 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 80013be:	4a79      	ldr	r2, [pc, #484]	; (80015a4 <menu+0x4f8>)
 80013c0:	210e      	movs	r1, #14
 80013c2:	2002      	movs	r0, #2
 80013c4:	f006 fc22 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80013c8:	4b71      	ldr	r3, [pc, #452]	; (8001590 <menu+0x4e4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d123      	bne.n	8001418 <menu+0x36c>
			if(dilSecim == 0) {
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <menu+0x4cc>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80013d8:	4a73      	ldr	r2, [pc, #460]	; (80015a8 <menu+0x4fc>)
 80013da:	2101      	movs	r1, #1
 80013dc:	2002      	movs	r0, #2
 80013de:	f006 fc15 	bl	8007c0c <lcd_print>
 80013e2:	e008      	b.n	80013f6 <menu+0x34a>
			} else if(dilSecim == 1) {
 80013e4:	4b64      	ldr	r3, [pc, #400]	; (8001578 <menu+0x4cc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d104      	bne.n	80013f6 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80013ec:	4a6f      	ldr	r2, [pc, #444]	; (80015ac <menu+0x500>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	2002      	movs	r0, #2
 80013f2:	f006 fc0b 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <menu+0x504>)
 80013f8:	210f      	movs	r1, #15
 80013fa:	2002      	movs	r0, #2
 80013fc:	f006 fc06 	bl	8007c0c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001400:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <menu+0x508>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	220a      	movs	r2, #10
 8001406:	4967      	ldr	r1, [pc, #412]	; (80015a4 <menu+0x4f8>)
 8001408:	4618      	mov	r0, r3
 800140a:	f00a ff51 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <menu+0x4f8>)
 8001410:	210e      	movs	r1, #14
 8001412:	2002      	movs	r0, #2
 8001414:	f006 fbfa 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <menu+0x4e4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <menu+0x3bc>
			if(dilSecim == 0) {
 8001420:	4b55      	ldr	r3, [pc, #340]	; (8001578 <menu+0x4cc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001428:	4a63      	ldr	r2, [pc, #396]	; (80015b8 <menu+0x50c>)
 800142a:	2101      	movs	r1, #1
 800142c:	2002      	movs	r0, #2
 800142e:	f006 fbed 	bl	8007c0c <lcd_print>
 8001432:	e008      	b.n	8001446 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <menu+0x4cc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d104      	bne.n	8001446 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800143c:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <menu+0x510>)
 800143e:	2101      	movs	r1, #1
 8001440:	2002      	movs	r0, #2
 8001442:	f006 fbe3 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001446:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <menu+0x504>)
 8001448:	210f      	movs	r1, #15
 800144a:	2002      	movs	r0, #2
 800144c:	f006 fbde 	bl	8007c0c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001450:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <menu+0x514>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	220a      	movs	r2, #10
 8001456:	4953      	ldr	r1, [pc, #332]	; (80015a4 <menu+0x4f8>)
 8001458:	4618      	mov	r0, r3
 800145a:	f00a ff29 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 800145e:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <menu+0x4f8>)
 8001460:	210e      	movs	r1, #14
 8001462:	2002      	movs	r0, #2
 8001464:	f006 fbd2 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <menu+0x4e4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d123      	bne.n	80014b8 <menu+0x40c>
			if(dilSecim == 0) {
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <menu+0x4cc>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <menu+0x518>)
 800147a:	2101      	movs	r1, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f006 fbc5 	bl	8007c0c <lcd_print>
 8001482:	e008      	b.n	8001496 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001484:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <menu+0x4cc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d104      	bne.n	8001496 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 800148c:	4a4e      	ldr	r2, [pc, #312]	; (80015c8 <menu+0x51c>)
 800148e:	2101      	movs	r1, #1
 8001490:	2002      	movs	r0, #2
 8001492:	f006 fbbb 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001496:	4a46      	ldr	r2, [pc, #280]	; (80015b0 <menu+0x504>)
 8001498:	210f      	movs	r1, #15
 800149a:	2002      	movs	r0, #2
 800149c:	f006 fbb6 	bl	8007c0c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <menu+0x520>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	220a      	movs	r2, #10
 80014a6:	493f      	ldr	r1, [pc, #252]	; (80015a4 <menu+0x4f8>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a ff01 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 80014ae:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <menu+0x4f8>)
 80014b0:	210e      	movs	r1, #14
 80014b2:	2002      	movs	r0, #2
 80014b4:	f006 fbaa 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <menu+0x4e4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d123      	bne.n	8001508 <menu+0x45c>
			if(dilSecim == 0) {
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <menu+0x4cc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80014c8:	4a41      	ldr	r2, [pc, #260]	; (80015d0 <menu+0x524>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2002      	movs	r0, #2
 80014ce:	f006 fb9d 	bl	8007c0c <lcd_print>
 80014d2:	e008      	b.n	80014e6 <menu+0x43a>
			} else if(dilSecim == 1) {
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <menu+0x4cc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80014dc:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <menu+0x528>)
 80014de:	2101      	movs	r1, #1
 80014e0:	2002      	movs	r0, #2
 80014e2:	f006 fb93 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <menu+0x504>)
 80014e8:	210f      	movs	r1, #15
 80014ea:	2002      	movs	r0, #2
 80014ec:	f006 fb8e 	bl	8007c0c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <menu+0x52c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	220a      	movs	r2, #10
 80014f6:	492b      	ldr	r1, [pc, #172]	; (80015a4 <menu+0x4f8>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a fed9 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 80014fe:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <menu+0x4f8>)
 8001500:	210e      	movs	r1, #14
 8001502:	2002      	movs	r0, #2
 8001504:	f006 fb82 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <menu+0x4e4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d123      	bne.n	8001558 <menu+0x4ac>
			if(dilSecim == 0) {
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <menu+0x4cc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001518:	4a30      	ldr	r2, [pc, #192]	; (80015dc <menu+0x530>)
 800151a:	2101      	movs	r1, #1
 800151c:	2002      	movs	r0, #2
 800151e:	f006 fb75 	bl	8007c0c <lcd_print>
 8001522:	e008      	b.n	8001536 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <menu+0x4cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d104      	bne.n	8001536 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800152c:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <menu+0x534>)
 800152e:	2101      	movs	r1, #1
 8001530:	2002      	movs	r0, #2
 8001532:	f006 fb6b 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <menu+0x504>)
 8001538:	210f      	movs	r1, #15
 800153a:	2002      	movs	r0, #2
 800153c:	f006 fb66 	bl	8007c0c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <menu+0x538>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	220a      	movs	r2, #10
 8001546:	4917      	ldr	r1, [pc, #92]	; (80015a4 <menu+0x4f8>)
 8001548:	4618      	mov	r0, r3
 800154a:	f00a feb1 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <menu+0x4f8>)
 8001550:	210e      	movs	r1, #14
 8001552:	2002      	movs	r0, #2
 8001554:	f006 fb5a 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <menu+0x4e4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d15f      	bne.n	8001620 <menu+0x574>
			if(dilSecim == 0) {
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <menu+0x4cc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d141      	bne.n	80015ec <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001568:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <menu+0x53c>)
 800156a:	2101      	movs	r1, #1
 800156c:	2002      	movs	r0, #2
 800156e:	f006 fb4d 	bl	8007c0c <lcd_print>
 8001572:	e044      	b.n	80015fe <menu+0x552>
 8001574:	0800cf6c 	.word	0x0800cf6c
 8001578:	20000241 	.word	0x20000241
 800157c:	0800cf80 	.word	0x0800cf80
 8001580:	0800cf94 	.word	0x0800cf94
 8001584:	20000220 	.word	0x20000220
 8001588:	0800cfa8 	.word	0x0800cfa8
 800158c:	0800cfbc 	.word	0x0800cfbc
 8001590:	20000222 	.word	0x20000222
 8001594:	0800cfd0 	.word	0x0800cfd0
 8001598:	0800cfe0 	.word	0x0800cfe0
 800159c:	0800cff0 	.word	0x0800cff0
 80015a0:	20000242 	.word	0x20000242
 80015a4:	20000188 	.word	0x20000188
 80015a8:	0800cff4 	.word	0x0800cff4
 80015ac:	0800d004 	.word	0x0800d004
 80015b0:	0800d014 	.word	0x0800d014
 80015b4:	20000243 	.word	0x20000243
 80015b8:	0800d018 	.word	0x0800d018
 80015bc:	0800d028 	.word	0x0800d028
 80015c0:	20000244 	.word	0x20000244
 80015c4:	0800d038 	.word	0x0800d038
 80015c8:	0800d048 	.word	0x0800d048
 80015cc:	20000245 	.word	0x20000245
 80015d0:	0800d058 	.word	0x0800d058
 80015d4:	0800d068 	.word	0x0800d068
 80015d8:	20000246 	.word	0x20000246
 80015dc:	0800d078 	.word	0x0800d078
 80015e0:	0800d088 	.word	0x0800d088
 80015e4:	20000247 	.word	0x20000247
 80015e8:	0800d098 	.word	0x0800d098
			} else if(dilSecim == 1) {
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <menu+0x680>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d104      	bne.n	80015fe <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80015f4:	4a4e      	ldr	r2, [pc, #312]	; (8001730 <menu+0x684>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	2002      	movs	r0, #2
 80015fa:	f006 fb07 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015fe:	4a4d      	ldr	r2, [pc, #308]	; (8001734 <menu+0x688>)
 8001600:	210f      	movs	r1, #15
 8001602:	2002      	movs	r0, #2
 8001604:	f006 fb02 	bl	8007c0c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <menu+0x68c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	220a      	movs	r2, #10
 800160e:	494b      	ldr	r1, [pc, #300]	; (800173c <menu+0x690>)
 8001610:	4618      	mov	r0, r3
 8001612:	f00a fe4d 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 8001616:	4a49      	ldr	r2, [pc, #292]	; (800173c <menu+0x690>)
 8001618:	210e      	movs	r1, #14
 800161a:	2002      	movs	r0, #2
 800161c:	f006 faf6 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <menu+0x694>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b07      	cmp	r3, #7
 8001626:	d123      	bne.n	8001670 <menu+0x5c4>
			if(dilSecim == 0) {
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <menu+0x680>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001630:	4a44      	ldr	r2, [pc, #272]	; (8001744 <menu+0x698>)
 8001632:	2101      	movs	r1, #1
 8001634:	2002      	movs	r0, #2
 8001636:	f006 fae9 	bl	8007c0c <lcd_print>
 800163a:	e008      	b.n	800164e <menu+0x5a2>
			} else if(dilSecim == 1) {
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <menu+0x680>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d104      	bne.n	800164e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001644:	4a40      	ldr	r2, [pc, #256]	; (8001748 <menu+0x69c>)
 8001646:	2101      	movs	r1, #1
 8001648:	2002      	movs	r0, #2
 800164a:	f006 fadf 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800164e:	4a39      	ldr	r2, [pc, #228]	; (8001734 <menu+0x688>)
 8001650:	210f      	movs	r1, #15
 8001652:	2002      	movs	r0, #2
 8001654:	f006 fada 	bl	8007c0c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001658:	4b3c      	ldr	r3, [pc, #240]	; (800174c <menu+0x6a0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	220a      	movs	r2, #10
 800165e:	4937      	ldr	r1, [pc, #220]	; (800173c <menu+0x690>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00a fe25 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 8001666:	4a35      	ldr	r2, [pc, #212]	; (800173c <menu+0x690>)
 8001668:	210e      	movs	r1, #14
 800166a:	2002      	movs	r0, #2
 800166c:	f006 face 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <menu+0x694>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d123      	bne.n	80016c0 <menu+0x614>
			if(dilSecim == 0) {
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <menu+0x680>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001680:	4a33      	ldr	r2, [pc, #204]	; (8001750 <menu+0x6a4>)
 8001682:	2101      	movs	r1, #1
 8001684:	2002      	movs	r0, #2
 8001686:	f006 fac1 	bl	8007c0c <lcd_print>
 800168a:	e008      	b.n	800169e <menu+0x5f2>
			} else if(dilSecim == 1) {
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <menu+0x680>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d104      	bne.n	800169e <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <menu+0x6a8>)
 8001696:	2101      	movs	r1, #1
 8001698:	2002      	movs	r0, #2
 800169a:	f006 fab7 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800169e:	4a25      	ldr	r2, [pc, #148]	; (8001734 <menu+0x688>)
 80016a0:	210f      	movs	r1, #15
 80016a2:	2002      	movs	r0, #2
 80016a4:	f006 fab2 	bl	8007c0c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <menu+0x6ac>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	220a      	movs	r2, #10
 80016ae:	4923      	ldr	r1, [pc, #140]	; (800173c <menu+0x690>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00a fdfd 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <menu+0x690>)
 80016b8:	210e      	movs	r1, #14
 80016ba:	2002      	movs	r0, #2
 80016bc:	f006 faa6 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <menu+0x694>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d123      	bne.n	8001710 <menu+0x664>
			if(dilSecim == 0) {
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <menu+0x680>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <menu+0x6b0>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	2002      	movs	r0, #2
 80016d6:	f006 fa99 	bl	8007c0c <lcd_print>
 80016da:	e008      	b.n	80016ee <menu+0x642>
			} else if(dilSecim == 1) {
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <menu+0x680>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d104      	bne.n	80016ee <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80016e4:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <menu+0x6b4>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	2002      	movs	r0, #2
 80016ea:	f006 fa8f 	bl	8007c0c <lcd_print>
			}
			lcd_print(2, 16, " ");
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <menu+0x6b8>)
 80016f0:	2110      	movs	r1, #16
 80016f2:	2002      	movs	r0, #2
 80016f4:	f006 fa8a 	bl	8007c0c <lcd_print>
			itoa(hataKayit10, snum, 10);
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <menu+0x6bc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	220a      	movs	r2, #10
 80016fe:	490f      	ldr	r1, [pc, #60]	; (800173c <menu+0x690>)
 8001700:	4618      	mov	r0, r3
 8001702:	f00a fdd5 	bl	800c2b0 <itoa>
			lcd_print(2, 15, snum);
 8001706:	4a0d      	ldr	r2, [pc, #52]	; (800173c <menu+0x690>)
 8001708:	210f      	movs	r1, #15
 800170a:	2002      	movs	r0, #2
 800170c:	f006 fa7e 	bl	8007c0c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <menu+0x694>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b0a      	cmp	r3, #10
 8001716:	d134      	bne.n	8001782 <menu+0x6d6>
			if(dilSecim == 0) {
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <menu+0x680>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d127      	bne.n	8001770 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <menu+0x6c0>)
 8001722:	2101      	movs	r1, #1
 8001724:	2002      	movs	r0, #2
 8001726:	f006 fa71 	bl	8007c0c <lcd_print>
 800172a:	e02a      	b.n	8001782 <menu+0x6d6>
 800172c:	20000241 	.word	0x20000241
 8001730:	0800d0a8 	.word	0x0800d0a8
 8001734:	0800d014 	.word	0x0800d014
 8001738:	20000248 	.word	0x20000248
 800173c:	20000188 	.word	0x20000188
 8001740:	20000222 	.word	0x20000222
 8001744:	0800d0b8 	.word	0x0800d0b8
 8001748:	0800d0c8 	.word	0x0800d0c8
 800174c:	20000249 	.word	0x20000249
 8001750:	0800d0d8 	.word	0x0800d0d8
 8001754:	0800d0e8 	.word	0x0800d0e8
 8001758:	2000024a 	.word	0x2000024a
 800175c:	0800d0f8 	.word	0x0800d0f8
 8001760:	0800d108 	.word	0x0800d108
 8001764:	0800d118 	.word	0x0800d118
 8001768:	2000024b 	.word	0x2000024b
 800176c:	0800d11c 	.word	0x0800d11c
			} else if(dilSecim == 1) {
 8001770:	4b82      	ldr	r3, [pc, #520]	; (800197c <menu+0x8d0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d104      	bne.n	8001782 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001778:	4a81      	ldr	r2, [pc, #516]	; (8001980 <menu+0x8d4>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f006 fa45 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001782:	2102      	movs	r1, #2
 8001784:	487f      	ldr	r0, [pc, #508]	; (8001984 <menu+0x8d8>)
 8001786:	f007 fd67 	bl	8009258 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b01      	cmp	r3, #1
 800178e:	d119      	bne.n	80017c4 <menu+0x718>
 8001790:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <menu+0x8dc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <menu+0x718>
 800179e:	4b7b      	ldr	r3, [pc, #492]	; (800198c <menu+0x8e0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10e      	bne.n	80017c4 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80017a6:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <menu+0x8e4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <menu+0x8e4>)
 80017b0:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <menu+0x8e4>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d902      	bls.n	80017c0 <menu+0x714>
				hataGostermeSirasi = 0;
 80017ba:	4b75      	ldr	r3, [pc, #468]	; (8001990 <menu+0x8e4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017c0:	f003 f84a 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017c4:	2104      	movs	r1, #4
 80017c6:	486f      	ldr	r0, [pc, #444]	; (8001984 <menu+0x8d8>)
 80017c8:	f007 fd46 	bl	8009258 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d119      	bne.n	8001806 <menu+0x75a>
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <menu+0x8dc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	f083 0301 	eor.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <menu+0x75a>
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <menu+0x8e0>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10e      	bne.n	8001806 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80017e8:	4b69      	ldr	r3, [pc, #420]	; (8001990 <menu+0x8e4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <menu+0x8e4>)
 80017f2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <menu+0x8e4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b0b      	cmp	r3, #11
 80017fa:	d902      	bls.n	8001802 <menu+0x756>
	    		hataGostermeSirasi = 10;
 80017fc:	4b64      	ldr	r3, [pc, #400]	; (8001990 <menu+0x8e4>)
 80017fe:	220a      	movs	r2, #10
 8001800:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001802:	f003 f829 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001806:	2108      	movs	r1, #8
 8001808:	485e      	ldr	r0, [pc, #376]	; (8001984 <menu+0x8d8>)
 800180a:	f007 fd25 	bl	8009258 <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d153      	bne.n	80018bc <menu+0x810>
 8001814:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <menu+0x8dc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04c      	beq.n	80018bc <menu+0x810>
 8001822:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <menu+0x8e4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d148      	bne.n	80018bc <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <menu+0x8e8>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <menu+0x8ec>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <menu+0x8f0>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <menu+0x8ec>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001846:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <menu+0x8f4>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	4b52      	ldr	r3, [pc, #328]	; (8001998 <menu+0x8ec>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <menu+0x8f8>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <menu+0x8ec>)
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <menu+0x8fc>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <menu+0x8ec>)
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <menu+0x900>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <menu+0x8ec>)
 8001878:	2200      	movs	r2, #0
 800187a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <menu+0x904>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <menu+0x8ec>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 800188c:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <menu+0x908>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <menu+0x8ec>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <menu+0x90c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <menu+0x8ec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <menu+0x910>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <menu+0x8ec>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80018b6:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <menu+0x914>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <menu+0x918>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	f040 80fc 	bne.w	8001abe <menu+0xa12>
		if(dilSecim == 0) {
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <menu+0x8d0>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <menu+0x91c>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	2001      	movs	r0, #1
 80018d4:	f006 f99a 	bl	8007c0c <lcd_print>
 80018d8:	e008      	b.n	80018ec <menu+0x840>
		} else if(dilSecim == 1) {
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <menu+0x8d0>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d104      	bne.n	80018ec <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80018e2:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <menu+0x920>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	2001      	movs	r0, #1
 80018e8:	f006 f990 	bl	8007c0c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <menu+0x8e0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d003      	beq.n	80018fc <menu+0x850>
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <menu+0x8e0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d112      	bne.n	8001922 <menu+0x876>
			if(dilSecim == 0) {
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <menu+0x8d0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <menu+0x924>)
 8001906:	2101      	movs	r1, #1
 8001908:	2002      	movs	r0, #2
 800190a:	f006 f97f 	bl	8007c0c <lcd_print>
 800190e:	e008      	b.n	8001922 <menu+0x876>
			} else if(dilSecim == 1) {
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <menu+0x8d0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d104      	bne.n	8001922 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <menu+0x928>)
 800191a:	2101      	movs	r1, #1
 800191c:	2002      	movs	r0, #2
 800191e:	f006 f975 	bl	8007c0c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <menu+0x92c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <menu+0x8ac>
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <menu+0x8e0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d112      	bne.n	8001958 <menu+0x8ac>
			if(dilSecim == 0) {
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <menu+0x8d0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 800193a:	4a28      	ldr	r2, [pc, #160]	; (80019dc <menu+0x930>)
 800193c:	2101      	movs	r1, #1
 800193e:	2002      	movs	r0, #2
 8001940:	f006 f964 	bl	8007c0c <lcd_print>
 8001944:	e008      	b.n	8001958 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <menu+0x8d0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d104      	bne.n	8001958 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 800194e:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <menu+0x934>)
 8001950:	2101      	movs	r1, #1
 8001952:	2002      	movs	r0, #2
 8001954:	f006 f95a 	bl	8007c0c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <menu+0x92c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d14c      	bne.n	80019fa <menu+0x94e>
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <menu+0x8e0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d148      	bne.n	80019fa <menu+0x94e>
			if(dilSecim == 0) {
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <menu+0x8d0>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d13b      	bne.n	80019e8 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <menu+0x938>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f006 f949 	bl	8007c0c <lcd_print>
 800197a:	e03e      	b.n	80019fa <menu+0x94e>
 800197c:	20000241 	.word	0x20000241
 8001980:	0800d130 	.word	0x0800d130
 8001984:	40010800 	.word	0x40010800
 8001988:	2000024f 	.word	0x2000024f
 800198c:	2000022f 	.word	0x2000022f
 8001990:	20000222 	.word	0x20000222
 8001994:	20000242 	.word	0x20000242
 8001998:	20000118 	.word	0x20000118
 800199c:	20000243 	.word	0x20000243
 80019a0:	20000244 	.word	0x20000244
 80019a4:	20000245 	.word	0x20000245
 80019a8:	20000246 	.word	0x20000246
 80019ac:	20000247 	.word	0x20000247
 80019b0:	20000248 	.word	0x20000248
 80019b4:	20000249 	.word	0x20000249
 80019b8:	2000024a 	.word	0x2000024a
 80019bc:	2000024b 	.word	0x2000024b
 80019c0:	2000024c 	.word	0x2000024c
 80019c4:	20000220 	.word	0x20000220
 80019c8:	0800d144 	.word	0x0800d144
 80019cc:	0800d158 	.word	0x0800d158
 80019d0:	0800d16c 	.word	0x0800d16c
 80019d4:	0800d180 	.word	0x0800d180
 80019d8:	20000221 	.word	0x20000221
 80019dc:	0800d194 	.word	0x0800d194
 80019e0:	0800d1a4 	.word	0x0800d1a4
 80019e4:	0800d1b4 	.word	0x0800d1b4
			} else if(dilSecim == 1) {
 80019e8:	4b98      	ldr	r3, [pc, #608]	; (8001c4c <menu+0xba0>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d104      	bne.n	80019fa <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80019f0:	4a97      	ldr	r2, [pc, #604]	; (8001c50 <menu+0xba4>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	2002      	movs	r0, #2
 80019f6:	f006 f909 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019fa:	2102      	movs	r1, #2
 80019fc:	4895      	ldr	r0, [pc, #596]	; (8001c54 <menu+0xba8>)
 80019fe:	f007 fc2b 	bl	8009258 <HAL_GPIO_ReadPin>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d119      	bne.n	8001a3c <menu+0x990>
 8001a08:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <menu+0xbac>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	f083 0301 	eor.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <menu+0x990>
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <menu+0xbb0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001a1e:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <menu+0xbb4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <menu+0xbb4>)
 8001a28:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <menu+0xbb4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d902      	bls.n	8001a38 <menu+0x98c>
				calismaSekli = 0;
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <menu+0xbb4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a38:	f002 ff0e 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4885      	ldr	r0, [pc, #532]	; (8001c54 <menu+0xba8>)
 8001a40:	f007 fc0a 	bl	8009258 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d119      	bne.n	8001a7e <menu+0x9d2>
 8001a4a:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <menu+0xbac>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d012      	beq.n	8001a7e <menu+0x9d2>
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <menu+0xbb0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10e      	bne.n	8001a7e <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001a60:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <menu+0xbb4>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <menu+0xbb4>)
 8001a6a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a6c:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <menu+0xbb4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <menu+0x9ce>
	    		calismaSekli = 1;
 8001a74:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <menu+0xbb4>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a7a:	f002 feed 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a7e:	2108      	movs	r1, #8
 8001a80:	4874      	ldr	r0, [pc, #464]	; (8001c54 <menu+0xba8>)
 8001a82:	f007 fbe9 	bl	8009258 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d118      	bne.n	8001abe <menu+0xa12>
 8001a8c:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <menu+0xbac>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d011      	beq.n	8001abe <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001a9a:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <menu+0xbb4>)
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	4b71      	ldr	r3, [pc, #452]	; (8001c64 <menu+0xbb8>)
 8001aa0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <menu+0xbb4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d106      	bne.n	8001ab8 <menu+0xa0c>
				altLimit = 1;
 8001aaa:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <menu+0xbbc>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ab0:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <menu+0xbbc>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <menu+0xbb8>)
 8001ab6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ab8:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <menu+0xbc0>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001abe:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <menu+0xbc4>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	f040 8083 	bne.w	8001bce <menu+0xb22>
		if(dilSecim == 0) {
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <menu+0xba0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ad0:	4a68      	ldr	r2, [pc, #416]	; (8001c74 <menu+0xbc8>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f006 f899 	bl	8007c0c <lcd_print>
 8001ada:	e008      	b.n	8001aee <menu+0xa42>
		} else if(dilSecim == 1) {
 8001adc:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <menu+0xba0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d104      	bne.n	8001aee <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ae4:	4a64      	ldr	r2, [pc, #400]	; (8001c78 <menu+0xbcc>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f006 f88f 	bl	8007c0c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <menu+0xbd0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d113      	bne.n	8001b1e <menu+0xa72>
			if(dilSecim == 0) {
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <menu+0xba0>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001afe:	4a60      	ldr	r2, [pc, #384]	; (8001c80 <menu+0xbd4>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	2002      	movs	r0, #2
 8001b04:	f006 f882 	bl	8007c0c <lcd_print>
 8001b08:	e012      	b.n	8001b30 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <menu+0xba0>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10e      	bne.n	8001b30 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b12:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <menu+0xbd8>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	2002      	movs	r0, #2
 8001b18:	f006 f878 	bl	8007c0c <lcd_print>
 8001b1c:	e008      	b.n	8001b30 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001b1e:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <menu+0xbd0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <menu+0xbdc>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f006 f86e 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b30:	2102      	movs	r1, #2
 8001b32:	4848      	ldr	r0, [pc, #288]	; (8001c54 <menu+0xba8>)
 8001b34:	f007 fb90 	bl	8009258 <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d115      	bne.n	8001b6a <menu+0xabe>
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <menu+0xbac>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <menu+0xbd0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <menu+0xbd0>)
 8001b56:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b58:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <menu+0xbd0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d902      	bls.n	8001b66 <menu+0xaba>
				emniyetCercevesi = 0;
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <menu+0xbd0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b66:	f002 fe77 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4839      	ldr	r0, [pc, #228]	; (8001c54 <menu+0xba8>)
 8001b6e:	f007 fb73 	bl	8009258 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d115      	bne.n	8001ba4 <menu+0xaf8>
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <menu+0xbac>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00e      	beq.n	8001ba4 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <menu+0xbd0>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <menu+0xbd0>)
 8001b90:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <menu+0xbd0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <menu+0xbd0>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ba0:	f002 fe5a 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	482b      	ldr	r0, [pc, #172]	; (8001c54 <menu+0xba8>)
 8001ba8:	f007 fb56 	bl	8009258 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10d      	bne.n	8001bce <menu+0xb22>
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <menu+0xbac>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <menu+0xbd0>)
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <menu+0xbb8>)
 8001bc6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <menu+0xbc0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <menu+0xbc4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	f040 80ba 	bne.w	8001d4c <menu+0xca0>
		if(dilSecim == 0) {
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <menu+0xba0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <menu+0xbe0>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2001      	movs	r0, #1
 8001be6:	f006 f811 	bl	8007c0c <lcd_print>
 8001bea:	e008      	b.n	8001bfe <menu+0xb52>
		} else if(dilSecim == 1) {
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <menu+0xba0>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d104      	bne.n	8001bfe <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <menu+0xbe4>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f006 f807 	bl	8007c0c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <menu+0xbe8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d113      	bne.n	8001c2e <menu+0xb82>
			if(dilSecim == 0) {
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <menu+0xba0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <menu+0xbd4>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	2002      	movs	r0, #2
 8001c14:	f005 fffa 	bl	8007c0c <lcd_print>
 8001c18:	e049      	b.n	8001cae <menu+0xc02>
			} else if(dilSecim == 1) {
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <menu+0xba0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d145      	bne.n	8001cae <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <menu+0xbd8>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	2002      	movs	r0, #2
 8001c28:	f005 fff0 	bl	8007c0c <lcd_print>
 8001c2c:	e03f      	b.n	8001cae <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <menu+0xbe8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d13b      	bne.n	8001cae <menu+0xc02>
			if(dilSecim == 0) {
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <menu+0xba0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12e      	bne.n	8001c9c <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <menu+0xbec>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	2002      	movs	r0, #2
 8001c44:	f005 ffe2 	bl	8007c0c <lcd_print>
 8001c48:	e031      	b.n	8001cae <menu+0xc02>
 8001c4a:	bf00      	nop
 8001c4c:	20000241 	.word	0x20000241
 8001c50:	0800d1c4 	.word	0x0800d1c4
 8001c54:	40010800 	.word	0x40010800
 8001c58:	2000024f 	.word	0x2000024f
 8001c5c:	2000022f 	.word	0x2000022f
 8001c60:	20000221 	.word	0x20000221
 8001c64:	20000118 	.word	0x20000118
 8001c68:	20000226 	.word	0x20000226
 8001c6c:	2000024c 	.word	0x2000024c
 8001c70:	20000220 	.word	0x20000220
 8001c74:	0800d1d4 	.word	0x0800d1d4
 8001c78:	0800d1e8 	.word	0x0800d1e8
 8001c7c:	20000224 	.word	0x20000224
 8001c80:	0800d1fc 	.word	0x0800d1fc
 8001c84:	0800d210 	.word	0x0800d210
 8001c88:	0800d224 	.word	0x0800d224
 8001c8c:	0800d234 	.word	0x0800d234
 8001c90:	0800d248 	.word	0x0800d248
 8001c94:	20000225 	.word	0x20000225
 8001c98:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <menu+0xe3c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d104      	bne.n	8001cae <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001ca4:	4a91      	ldr	r2, [pc, #580]	; (8001eec <menu+0xe40>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f005 ffaf 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cae:	2102      	movs	r1, #2
 8001cb0:	488f      	ldr	r0, [pc, #572]	; (8001ef0 <menu+0xe44>)
 8001cb2:	f007 fad1 	bl	8009258 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d115      	bne.n	8001ce8 <menu+0xc3c>
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <menu+0xe48>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001cca:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <menu+0xe4c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <menu+0xe4c>)
 8001cd4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001cd6:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <menu+0xe4c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d902      	bls.n	8001ce4 <menu+0xc38>
				yavaslamaLimit = 0;
 8001cde:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <menu+0xe4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ce4:	f002 fdb8 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4881      	ldr	r0, [pc, #516]	; (8001ef0 <menu+0xe44>)
 8001cec:	f007 fab4 	bl	8009258 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d115      	bne.n	8001d22 <menu+0xc76>
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <menu+0xe48>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <menu+0xe4c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <menu+0xe4c>)
 8001d0e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d10:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <menu+0xe4c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001d18:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <menu+0xe4c>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d1e:	f002 fd9b 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d22:	2108      	movs	r1, #8
 8001d24:	4872      	ldr	r0, [pc, #456]	; (8001ef0 <menu+0xe44>)
 8001d26:	f007 fa97 	bl	8009258 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10d      	bne.n	8001d4c <menu+0xca0>
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <menu+0xe48>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <menu+0xe4c>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <menu+0xe50>)
 8001d44:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <menu+0xe54>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d4c:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <menu+0xe58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	f040 80b9 	bne.w	8001ec8 <menu+0xe1c>
		if(dilSecim == 0) {
 8001d56:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <menu+0xe3c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <menu+0xe5c>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	2001      	movs	r0, #1
 8001d64:	f005 ff52 	bl	8007c0c <lcd_print>
 8001d68:	e008      	b.n	8001d7c <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <menu+0xe3c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d104      	bne.n	8001d7c <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <menu+0xe60>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2001      	movs	r0, #1
 8001d78:	f005 ff48 	bl	8007c0c <lcd_print>
		}

		if(altLimit == 0) {
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <menu+0xe64>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d113      	bne.n	8001dac <menu+0xd00>
			if(dilSecim == 0) {
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <menu+0xe3c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001d8c:	4a61      	ldr	r2, [pc, #388]	; (8001f14 <menu+0xe68>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2002      	movs	r0, #2
 8001d92:	f005 ff3b 	bl	8007c0c <lcd_print>
 8001d96:	e020      	b.n	8001dda <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <menu+0xe3c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d11c      	bne.n	8001dda <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <menu+0xe6c>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	2002      	movs	r0, #2
 8001da6:	f005 ff31 	bl	8007c0c <lcd_print>
 8001daa:	e016      	b.n	8001dda <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <menu+0xe64>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d112      	bne.n	8001dda <menu+0xd2e>
			if(dilSecim == 0){
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <menu+0xe3c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001dbc:	4a57      	ldr	r2, [pc, #348]	; (8001f1c <menu+0xe70>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f005 ff23 	bl	8007c0c <lcd_print>
 8001dc6:	e008      	b.n	8001dda <menu+0xd2e>
			} else if(dilSecim == 1){
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <menu+0xe3c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <menu+0xe40>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f005 ff19 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4844      	ldr	r0, [pc, #272]	; (8001ef0 <menu+0xe44>)
 8001dde:	f007 fa3b 	bl	8009258 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d119      	bne.n	8001e1c <menu+0xd70>
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <menu+0xe48>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <menu+0xd70>
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <menu+0xe74>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10e      	bne.n	8001e1c <menu+0xd70>
			altLimit = altLimit + 1;
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <menu+0xe64>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <menu+0xe64>)
 8001e08:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <menu+0xe64>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d902      	bls.n	8001e18 <menu+0xd6c>
				altLimit = 0;
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <menu+0xe64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e18:	f002 fd1e 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4834      	ldr	r0, [pc, #208]	; (8001ef0 <menu+0xe44>)
 8001e20:	f007 fa1a 	bl	8009258 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d119      	bne.n	8001e5e <menu+0xdb2>
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <menu+0xe48>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <menu+0xdb2>
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <menu+0xe74>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <menu+0xdb2>
			altLimit = altLimit - 1;
 8001e40:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <menu+0xe64>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <menu+0xe64>)
 8001e4a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <menu+0xe64>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <menu+0xdae>
		   		altLimit = 1;
 8001e54:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <menu+0xe64>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e5a:	f002 fcfd 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e5e:	2108      	movs	r1, #8
 8001e60:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <menu+0xe44>)
 8001e62:	f007 f9f9 	bl	8009258 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d12d      	bne.n	8001ec8 <menu+0xe1c>
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <menu+0xe48>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d026      	beq.n	8001ec8 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <menu+0xe64>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <menu+0xe50>)
 8001e80:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <menu+0xe64>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d110      	bne.n	8001eac <menu+0xe00>
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <menu+0xe78>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <menu+0xdee>
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <menu+0xe78>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d108      	bne.n	8001eac <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <menu+0xe78>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <menu+0xe78>)
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <menu+0xe50>)
 8001ea6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001eaa:	e00a      	b.n	8001ec2 <menu+0xe16>
			} else if(altLimit == 0) {
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <menu+0xe64>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <menu+0xe16>
				platformSilindirTipi = 0;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <menu+0xe7c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <menu+0xe7c>)
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <menu+0xe50>)
 8001ec0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <menu+0xe54>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <menu+0xe58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	f040 80b6 	bne.w	800203e <menu+0xf92>
		if(dilSecim == 0) {
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <menu+0xe3c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d12a      	bne.n	8001f30 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <menu+0xe80>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f005 fe94 	bl	8007c0c <lcd_print>
 8001ee4:	e02d      	b.n	8001f42 <menu+0xe96>
 8001ee6:	bf00      	nop
 8001ee8:	20000241 	.word	0x20000241
 8001eec:	0800d270 	.word	0x0800d270
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	2000024f 	.word	0x2000024f
 8001ef8:	20000225 	.word	0x20000225
 8001efc:	20000118 	.word	0x20000118
 8001f00:	2000024c 	.word	0x2000024c
 8001f04:	20000220 	.word	0x20000220
 8001f08:	0800d284 	.word	0x0800d284
 8001f0c:	0800d298 	.word	0x0800d298
 8001f10:	20000226 	.word	0x20000226
 8001f14:	0800d1fc 	.word	0x0800d1fc
 8001f18:	0800d210 	.word	0x0800d210
 8001f1c:	0800d25c 	.word	0x0800d25c
 8001f20:	20000221 	.word	0x20000221
 8001f24:	2000022d 	.word	0x2000022d
 8001f28:	20000233 	.word	0x20000233
 8001f2c:	0800d2ac 	.word	0x0800d2ac
		} else if(dilSecim == 1){
 8001f30:	4b7a      	ldr	r3, [pc, #488]	; (800211c <menu+0x1070>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d104      	bne.n	8001f42 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001f38:	4a79      	ldr	r2, [pc, #484]	; (8002120 <menu+0x1074>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f005 fe65 	bl	8007c0c <lcd_print>
		}
		if(basincSalteri == 0){
 8001f42:	4b78      	ldr	r3, [pc, #480]	; (8002124 <menu+0x1078>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d113      	bne.n	8001f72 <menu+0xec6>
			if(dilSecim == 0) {
 8001f4a:	4b74      	ldr	r3, [pc, #464]	; (800211c <menu+0x1070>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001f52:	4a75      	ldr	r2, [pc, #468]	; (8002128 <menu+0x107c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f005 fe58 	bl	8007c0c <lcd_print>
 8001f5c:	e020      	b.n	8001fa0 <menu+0xef4>
			} else if(dilSecim == 1){
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	; (800211c <menu+0x1070>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d11c      	bne.n	8001fa0 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001f66:	4a71      	ldr	r2, [pc, #452]	; (800212c <menu+0x1080>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f005 fe4e 	bl	8007c0c <lcd_print>
 8001f70:	e016      	b.n	8001fa0 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <menu+0x1078>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d112      	bne.n	8001fa0 <menu+0xef4>
			if(dilSecim == 0) {
 8001f7a:	4b68      	ldr	r3, [pc, #416]	; (800211c <menu+0x1070>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d105      	bne.n	8001f8e <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001f82:	4a6b      	ldr	r2, [pc, #428]	; (8002130 <menu+0x1084>)
 8001f84:	2101      	movs	r1, #1
 8001f86:	2002      	movs	r0, #2
 8001f88:	f005 fe40 	bl	8007c0c <lcd_print>
 8001f8c:	e008      	b.n	8001fa0 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <menu+0x1070>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d104      	bne.n	8001fa0 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001f96:	4a67      	ldr	r2, [pc, #412]	; (8002134 <menu+0x1088>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f005 fe36 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4865      	ldr	r0, [pc, #404]	; (8002138 <menu+0x108c>)
 8001fa4:	f007 f958 	bl	8009258 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d115      	bne.n	8001fda <menu+0xf2e>
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <menu+0x1090>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <menu+0x1078>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <menu+0x1078>)
 8001fc6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <menu+0x1078>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d902      	bls.n	8001fd6 <menu+0xf2a>
				basincSalteri = 0;
 8001fd0:	4b54      	ldr	r3, [pc, #336]	; (8002124 <menu+0x1078>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fd6:	f002 fc3f 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4856      	ldr	r0, [pc, #344]	; (8002138 <menu+0x108c>)
 8001fde:	f007 f93b 	bl	8009258 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d115      	bne.n	8002014 <menu+0xf68>
 8001fe8:	4b54      	ldr	r3, [pc, #336]	; (800213c <menu+0x1090>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f083 0301 	eor.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00e      	beq.n	8002014 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <menu+0x1078>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <menu+0x1078>)
 8002000:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002002:	4b48      	ldr	r3, [pc, #288]	; (8002124 <menu+0x1078>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <menu+0xf64>
		   		basincSalteri = 1;
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <menu+0x1078>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002010:	f002 fc22 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002014:	2108      	movs	r1, #8
 8002016:	4848      	ldr	r0, [pc, #288]	; (8002138 <menu+0x108c>)
 8002018:	f007 f91e 	bl	8009258 <HAL_GPIO_ReadPin>
 800201c:	4603      	mov	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10d      	bne.n	800203e <menu+0xf92>
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <menu+0x1090>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <menu+0x1078>)
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <menu+0x1094>)
 8002036:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <menu+0x1098>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800203e:	4b42      	ldr	r3, [pc, #264]	; (8002148 <menu+0x109c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b07      	cmp	r3, #7
 8002044:	f040 80f5 	bne.w	8002232 <menu+0x1186>
		if(dilSecim == 0) {
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <menu+0x1070>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002050:	4a3e      	ldr	r2, [pc, #248]	; (800214c <menu+0x10a0>)
 8002052:	2101      	movs	r1, #1
 8002054:	2001      	movs	r0, #1
 8002056:	f005 fdd9 	bl	8007c0c <lcd_print>
 800205a:	e008      	b.n	800206e <menu+0xfc2>
		} else if(dilSecim == 1){
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <menu+0x1070>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d104      	bne.n	800206e <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002064:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <menu+0x10a4>)
 8002066:	2101      	movs	r1, #1
 8002068:	2001      	movs	r0, #1
 800206a:	f005 fdcf 	bl	8007c0c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <menu+0x10a8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d113      	bne.n	800209e <menu+0xff2>
			if(dilSecim == 0) {
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <menu+0x1070>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800207e:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <menu+0x107c>)
 8002080:	2101      	movs	r1, #1
 8002082:	2002      	movs	r0, #2
 8002084:	f005 fdc2 	bl	8007c0c <lcd_print>
 8002088:	e079      	b.n	800217e <menu+0x10d2>
			} else if(dilSecim == 1){
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <menu+0x1070>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d175      	bne.n	800217e <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002092:	4a26      	ldr	r2, [pc, #152]	; (800212c <menu+0x1080>)
 8002094:	2101      	movs	r1, #1
 8002096:	2002      	movs	r0, #2
 8002098:	f005 fdb8 	bl	8007c0c <lcd_print>
 800209c:	e06f      	b.n	800217e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <menu+0x10a8>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d113      	bne.n	80020ce <menu+0x1022>
			if(dilSecim == 0) {
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <menu+0x1070>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <menu+0x10ac>)
 80020b0:	2101      	movs	r1, #1
 80020b2:	2002      	movs	r0, #2
 80020b4:	f005 fdaa 	bl	8007c0c <lcd_print>
 80020b8:	e061      	b.n	800217e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <menu+0x1070>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d15d      	bne.n	800217e <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <menu+0x10b0>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	2002      	movs	r0, #2
 80020c8:	f005 fda0 	bl	8007c0c <lcd_print>
 80020cc:	e057      	b.n	800217e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <menu+0x10a8>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d113      	bne.n	80020fe <menu+0x1052>
			if(dilSecim == 0) {
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <menu+0x1070>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <menu+0x10b4>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	2002      	movs	r0, #2
 80020e4:	f005 fd92 	bl	8007c0c <lcd_print>
 80020e8:	e049      	b.n	800217e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <menu+0x1070>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d145      	bne.n	800217e <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <menu+0x10b8>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	2002      	movs	r0, #2
 80020f8:	f005 fd88 	bl	8007c0c <lcd_print>
 80020fc:	e03f      	b.n	800217e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <menu+0x10a8>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d13b      	bne.n	800217e <menu+0x10d2>
			if(dilSecim == 0) {
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <menu+0x1070>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d12e      	bne.n	800216c <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <menu+0x10bc>)
 8002110:	2101      	movs	r1, #1
 8002112:	2002      	movs	r0, #2
 8002114:	f005 fd7a 	bl	8007c0c <lcd_print>
 8002118:	e031      	b.n	800217e <menu+0x10d2>
 800211a:	bf00      	nop
 800211c:	20000241 	.word	0x20000241
 8002120:	0800d2bc 	.word	0x0800d2bc
 8002124:	20000227 	.word	0x20000227
 8002128:	0800d1fc 	.word	0x0800d1fc
 800212c:	0800d210 	.word	0x0800d210
 8002130:	0800d25c 	.word	0x0800d25c
 8002134:	0800d270 	.word	0x0800d270
 8002138:	40010800 	.word	0x40010800
 800213c:	2000024f 	.word	0x2000024f
 8002140:	20000118 	.word	0x20000118
 8002144:	2000024c 	.word	0x2000024c
 8002148:	20000220 	.word	0x20000220
 800214c:	0800d2cc 	.word	0x0800d2cc
 8002150:	0800d2e0 	.word	0x0800d2e0
 8002154:	20000228 	.word	0x20000228
 8002158:	0800d2f4 	.word	0x0800d2f4
 800215c:	0800d308 	.word	0x0800d308
 8002160:	0800d31c 	.word	0x0800d31c
 8002164:	0800d330 	.word	0x0800d330
 8002168:	0800d344 	.word	0x0800d344
			} else if(dilSecim == 1){
 800216c:	4b99      	ldr	r3, [pc, #612]	; (80023d4 <menu+0x1328>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d104      	bne.n	800217e <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002174:	4a98      	ldr	r2, [pc, #608]	; (80023d8 <menu+0x132c>)
 8002176:	2101      	movs	r1, #1
 8002178:	2002      	movs	r0, #2
 800217a:	f005 fd47 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800217e:	2102      	movs	r1, #2
 8002180:	4896      	ldr	r0, [pc, #600]	; (80023dc <menu+0x1330>)
 8002182:	f007 f869 	bl	8009258 <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <menu+0x110c>
 800218c:	4b94      	ldr	r3, [pc, #592]	; (80023e0 <menu+0x1334>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f083 0301 	eor.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800219a:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <menu+0x1338>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b90      	ldr	r3, [pc, #576]	; (80023e4 <menu+0x1338>)
 80021a4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80021a6:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <menu+0x1338>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d902      	bls.n	80021b4 <menu+0x1108>
				kapiSecimleri = 0;
 80021ae:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <menu+0x1338>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021b4:	f002 fb50 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b8:	2104      	movs	r1, #4
 80021ba:	4888      	ldr	r0, [pc, #544]	; (80023dc <menu+0x1330>)
 80021bc:	f007 f84c 	bl	8009258 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d115      	bne.n	80021f2 <menu+0x1146>
 80021c6:	4b86      	ldr	r3, [pc, #536]	; (80023e0 <menu+0x1334>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80021d4:	4b83      	ldr	r3, [pc, #524]	; (80023e4 <menu+0x1338>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <menu+0x1338>)
 80021de:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80021e0:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <menu+0x1338>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d902      	bls.n	80021ee <menu+0x1142>
		   		kapiSecimleri = 3;
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <menu+0x1338>)
 80021ea:	2203      	movs	r2, #3
 80021ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ee:	f002 fb33 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f2:	2108      	movs	r1, #8
 80021f4:	4879      	ldr	r0, [pc, #484]	; (80023dc <menu+0x1330>)
 80021f6:	f007 f82f 	bl	8009258 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d118      	bne.n	8002232 <menu+0x1186>
 8002200:	4b77      	ldr	r3, [pc, #476]	; (80023e0 <menu+0x1334>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800220e:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <menu+0x1338>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <menu+0x133c>)
 8002214:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <menu+0x1338>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <menu+0x1180>
				altLimit = 1;
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <menu+0x1340>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002224:	4b71      	ldr	r3, [pc, #452]	; (80023ec <menu+0x1340>)
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <menu+0x133c>)
 800222a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800222c:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <menu+0x1344>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <menu+0x1348>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b08      	cmp	r3, #8
 8002238:	f040 8092 	bne.w	8002360 <menu+0x12b4>
		if(dilSecim == 0) {
 800223c:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <menu+0x1328>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002244:	4a6c      	ldr	r2, [pc, #432]	; (80023f8 <menu+0x134c>)
 8002246:	2101      	movs	r1, #1
 8002248:	2001      	movs	r0, #1
 800224a:	f005 fcdf 	bl	8007c0c <lcd_print>
 800224e:	e008      	b.n	8002262 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002250:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <menu+0x1328>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d104      	bne.n	8002262 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002258:	4a68      	ldr	r2, [pc, #416]	; (80023fc <menu+0x1350>)
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f005 fcd5 	bl	8007c0c <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <menu+0x1354>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d113      	bne.n	8002292 <menu+0x11e6>
			if(dilSecim == 0) {
 800226a:	4b5a      	ldr	r3, [pc, #360]	; (80023d4 <menu+0x1328>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002272:	4a64      	ldr	r2, [pc, #400]	; (8002404 <menu+0x1358>)
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f005 fcc8 	bl	8007c0c <lcd_print>
 800227c:	e020      	b.n	80022c0 <menu+0x1214>
			} else if(dilSecim == 1) {
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <menu+0x1328>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d11c      	bne.n	80022c0 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002286:	4a60      	ldr	r2, [pc, #384]	; (8002408 <menu+0x135c>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f005 fcbe 	bl	8007c0c <lcd_print>
 8002290:	e016      	b.n	80022c0 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002292:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <menu+0x1354>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <menu+0x1214>
			if(dilSecim == 0){
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <menu+0x1328>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80022a2:	4a5a      	ldr	r2, [pc, #360]	; (800240c <menu+0x1360>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	2002      	movs	r0, #2
 80022a8:	f005 fcb0 	bl	8007c0c <lcd_print>
 80022ac:	e008      	b.n	80022c0 <menu+0x1214>
			} else if(dilSecim == 1){
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <menu+0x1328>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d104      	bne.n	80022c0 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80022b6:	4a56      	ldr	r2, [pc, #344]	; (8002410 <menu+0x1364>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	2002      	movs	r0, #2
 80022bc:	f005 fca6 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022c0:	2102      	movs	r1, #2
 80022c2:	4846      	ldr	r0, [pc, #280]	; (80023dc <menu+0x1330>)
 80022c4:	f006 ffc8 	bl	8009258 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d115      	bne.n	80022fa <menu+0x124e>
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <menu+0x1334>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00e      	beq.n	80022fa <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80022dc:	4b48      	ldr	r3, [pc, #288]	; (8002400 <menu+0x1354>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <menu+0x1354>)
 80022e6:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80022e8:	4b45      	ldr	r3, [pc, #276]	; (8002400 <menu+0x1354>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d902      	bls.n	80022f6 <menu+0x124a>
				kapiAcTipi = 0;
 80022f0:	4b43      	ldr	r3, [pc, #268]	; (8002400 <menu+0x1354>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022f6:	f002 faaf 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022fa:	2104      	movs	r1, #4
 80022fc:	4837      	ldr	r0, [pc, #220]	; (80023dc <menu+0x1330>)
 80022fe:	f006 ffab 	bl	8009258 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d115      	bne.n	8002334 <menu+0x1288>
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <menu+0x1334>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002316:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <menu+0x1354>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <menu+0x1354>)
 8002320:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002322:	4b37      	ldr	r3, [pc, #220]	; (8002400 <menu+0x1354>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <menu+0x1284>
		   		kapiAcTipi = 1;
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <menu+0x1354>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002330:	f002 fa92 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002334:	2108      	movs	r1, #8
 8002336:	4829      	ldr	r0, [pc, #164]	; (80023dc <menu+0x1330>)
 8002338:	f006 ff8e 	bl	8009258 <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <menu+0x12b4>
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <menu+0x1334>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <menu+0x1354>)
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <menu+0x133c>)
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <menu+0x1344>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <menu+0x1348>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	f040 80b9 	bne.w	80024dc <menu+0x1430>
		if(dilSecim == 0){
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <menu+0x1328>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <menu+0x1368>)
 8002374:	2101      	movs	r1, #1
 8002376:	2001      	movs	r0, #1
 8002378:	f005 fc48 	bl	8007c0c <lcd_print>
 800237c:	e008      	b.n	8002390 <menu+0x12e4>
		} else if(dilSecim == 1) {
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <menu+0x1328>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d104      	bne.n	8002390 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002386:	4a24      	ldr	r2, [pc, #144]	; (8002418 <menu+0x136c>)
 8002388:	2101      	movs	r1, #1
 800238a:	2001      	movs	r0, #1
 800238c:	f005 fc3e 	bl	8007c0c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <menu+0x1370>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <menu+0x1374>)
 800239a:	2101      	movs	r1, #1
 800239c:	2002      	movs	r0, #2
 800239e:	f005 fc35 	bl	8007c0c <lcd_print>
 80023a2:	e04c      	b.n	800243e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <menu+0x1370>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d13f      	bne.n	800242c <menu+0x1380>
			if(dilSecim == 0){
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <menu+0x1328>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <menu+0x1378>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	2002      	movs	r0, #2
 80023ba:	f005 fc27 	bl	8007c0c <lcd_print>
 80023be:	e03e      	b.n	800243e <menu+0x1392>
			} else if(dilSecim == 1) {
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <menu+0x1328>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d13a      	bne.n	800243e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <menu+0x137c>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	2002      	movs	r0, #2
 80023ce:	f005 fc1d 	bl	8007c0c <lcd_print>
 80023d2:	e034      	b.n	800243e <menu+0x1392>
 80023d4:	20000241 	.word	0x20000241
 80023d8:	0800d358 	.word	0x0800d358
 80023dc:	40010800 	.word	0x40010800
 80023e0:	2000024f 	.word	0x2000024f
 80023e4:	20000228 	.word	0x20000228
 80023e8:	20000118 	.word	0x20000118
 80023ec:	20000226 	.word	0x20000226
 80023f0:	2000024c 	.word	0x2000024c
 80023f4:	20000220 	.word	0x20000220
 80023f8:	0800d36c 	.word	0x0800d36c
 80023fc:	0800d380 	.word	0x0800d380
 8002400:	2000022c 	.word	0x2000022c
 8002404:	0800d394 	.word	0x0800d394
 8002408:	0800d3a4 	.word	0x0800d3a4
 800240c:	0800d3b4 	.word	0x0800d3b4
 8002410:	0800d3c8 	.word	0x0800d3c8
 8002414:	0800d3dc 	.word	0x0800d3dc
 8002418:	0800d3f0 	.word	0x0800d3f0
 800241c:	20000229 	.word	0x20000229
 8002420:	0800d404 	.word	0x0800d404
 8002424:	0800d418 	.word	0x0800d418
 8002428:	0800d428 	.word	0x0800d428
			}
		} else if(kapi1Tip == 2) {
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <menu+0x15ac>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d104      	bne.n	800243e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002434:	4a89      	ldr	r2, [pc, #548]	; (800265c <menu+0x15b0>)
 8002436:	2101      	movs	r1, #1
 8002438:	2002      	movs	r0, #2
 800243a:	f005 fbe7 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800243e:	2102      	movs	r1, #2
 8002440:	4887      	ldr	r0, [pc, #540]	; (8002660 <menu+0x15b4>)
 8002442:	f006 ff09 	bl	8009258 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d115      	bne.n	8002478 <menu+0x13cc>
 800244c:	4b85      	ldr	r3, [pc, #532]	; (8002664 <menu+0x15b8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <menu+0x15ac>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <menu+0x15ac>)
 8002464:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002466:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <menu+0x15ac>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d902      	bls.n	8002474 <menu+0x13c8>
				kapi1Tip = 0;
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <menu+0x15ac>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002474:	f002 f9f0 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002478:	2104      	movs	r1, #4
 800247a:	4879      	ldr	r0, [pc, #484]	; (8002660 <menu+0x15b4>)
 800247c:	f006 feec 	bl	8009258 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d115      	bne.n	80024b2 <menu+0x1406>
 8002486:	4b77      	ldr	r3, [pc, #476]	; (8002664 <menu+0x15b8>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <menu+0x15ac>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3b01      	subs	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <menu+0x15ac>)
 800249e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <menu+0x15ac>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d902      	bls.n	80024ae <menu+0x1402>
		   		kapi1Tip = 2;
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <menu+0x15ac>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ae:	f002 f9d3 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b2:	2108      	movs	r1, #8
 80024b4:	486a      	ldr	r0, [pc, #424]	; (8002660 <menu+0x15b4>)
 80024b6:	f006 fecf 	bl	8009258 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10d      	bne.n	80024dc <menu+0x1430>
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <menu+0x15b8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80024ce:	4b62      	ldr	r3, [pc, #392]	; (8002658 <menu+0x15ac>)
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <menu+0x15bc>)
 80024d4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <menu+0x15c0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <menu+0x15c4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b0a      	cmp	r3, #10
 80024e2:	d17f      	bne.n	80025e4 <menu+0x1538>
		if(dilSecim == 0) {
 80024e4:	4b63      	ldr	r3, [pc, #396]	; (8002674 <menu+0x15c8>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80024ec:	4a62      	ldr	r2, [pc, #392]	; (8002678 <menu+0x15cc>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	2001      	movs	r0, #1
 80024f2:	f005 fb8b 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <menu+0x15d0>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	2002      	movs	r0, #2
 80024fc:	f005 fb86 	bl	8007c0c <lcd_print>
 8002500:	e00d      	b.n	800251e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <menu+0x15c8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d109      	bne.n	800251e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800250a:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <menu+0x15d4>)
 800250c:	2101      	movs	r1, #1
 800250e:	2001      	movs	r0, #1
 8002510:	f005 fb7c 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002514:	4a5b      	ldr	r2, [pc, #364]	; (8002684 <menu+0x15d8>)
 8002516:	2101      	movs	r1, #1
 8002518:	2002      	movs	r0, #2
 800251a:	f005 fb77 	bl	8007c0c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <menu+0x15dc>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	220a      	movs	r2, #10
 8002524:	4959      	ldr	r1, [pc, #356]	; (800268c <menu+0x15e0>)
 8002526:	4618      	mov	r0, r3
 8002528:	f009 fec2 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <menu+0x15e0>)
 800252e:	2110      	movs	r1, #16
 8002530:	2002      	movs	r0, #2
 8002532:	f005 fb6b 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002536:	2102      	movs	r1, #2
 8002538:	4849      	ldr	r0, [pc, #292]	; (8002660 <menu+0x15b4>)
 800253a:	f006 fe8d 	bl	8009258 <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <menu+0x14cc>
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <menu+0x15b8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <menu+0x14cc>
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <menu+0x15ac>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <menu+0x15dc>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <menu+0x15dc>)
 8002564:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002566:	4b48      	ldr	r3, [pc, #288]	; (8002688 <menu+0x15dc>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d902      	bls.n	8002574 <menu+0x14c8>
				kapi1AcSure = 0;
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <menu+0x15dc>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002574:	f002 f970 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002578:	2104      	movs	r1, #4
 800257a:	4839      	ldr	r0, [pc, #228]	; (8002660 <menu+0x15b4>)
 800257c:	f006 fe6c 	bl	8009258 <HAL_GPIO_ReadPin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d119      	bne.n	80025ba <menu+0x150e>
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <menu+0x15b8>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f083 0301 	eor.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <menu+0x150e>
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <menu+0x15ac>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10e      	bne.n	80025ba <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <menu+0x15dc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <menu+0x15dc>)
 80025a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <menu+0x15dc>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b06      	cmp	r3, #6
 80025ae:	d902      	bls.n	80025b6 <menu+0x150a>
		   		kapi1AcSure = 5;
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <menu+0x15dc>)
 80025b2:	2205      	movs	r2, #5
 80025b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025b6:	f002 f94f 	bl	8004858 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ba:	2108      	movs	r1, #8
 80025bc:	4828      	ldr	r0, [pc, #160]	; (8002660 <menu+0x15b4>)
 80025be:	f006 fe4b 	bl	8009258 <HAL_GPIO_ReadPin>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <menu+0x1538>
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <menu+0x15b8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <menu+0x15dc>)
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <menu+0x15bc>)
 80025dc:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025de:	4b23      	ldr	r3, [pc, #140]	; (800266c <menu+0x15c0>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <menu+0x15c4>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b0b      	cmp	r3, #11
 80025ea:	f040 80b5 	bne.w	8002758 <menu+0x16ac>
		if(dilSecim == 0) {
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <menu+0x15c8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80025f6:	4a26      	ldr	r2, [pc, #152]	; (8002690 <menu+0x15e4>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2001      	movs	r0, #1
 80025fc:	f005 fb06 	bl	8007c0c <lcd_print>
 8002600:	e008      	b.n	8002614 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <menu+0x15c8>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d104      	bne.n	8002614 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <menu+0x15e8>)
 800260c:	2101      	movs	r1, #1
 800260e:	2001      	movs	r0, #1
 8002610:	f005 fafc 	bl	8007c0c <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <menu+0x15ec>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <menu+0x15f0>)
 800261e:	2101      	movs	r1, #1
 8002620:	2002      	movs	r0, #2
 8002622:	f005 faf3 	bl	8007c0c <lcd_print>
 8002626:	e048      	b.n	80026ba <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <menu+0x15ec>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d13b      	bne.n	80026a8 <menu+0x15fc>
			if(dilSecim == 0) {
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <menu+0x15c8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <menu+0x15f4>)
 800263a:	2101      	movs	r1, #1
 800263c:	2002      	movs	r0, #2
 800263e:	f005 fae5 	bl	8007c0c <lcd_print>
 8002642:	e03a      	b.n	80026ba <menu+0x160e>
			} else if(dilSecim == 1) {
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <menu+0x15c8>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d136      	bne.n	80026ba <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <menu+0x15f8>)
 800264e:	2101      	movs	r1, #1
 8002650:	2002      	movs	r0, #2
 8002652:	f005 fadb 	bl	8007c0c <lcd_print>
 8002656:	e030      	b.n	80026ba <menu+0x160e>
 8002658:	20000229 	.word	0x20000229
 800265c:	0800d43c 	.word	0x0800d43c
 8002660:	40010800 	.word	0x40010800
 8002664:	2000024f 	.word	0x2000024f
 8002668:	20000118 	.word	0x20000118
 800266c:	2000024c 	.word	0x2000024c
 8002670:	20000220 	.word	0x20000220
 8002674:	20000241 	.word	0x20000241
 8002678:	0800d44c 	.word	0x0800d44c
 800267c:	0800d460 	.word	0x0800d460
 8002680:	0800d470 	.word	0x0800d470
 8002684:	0800d484 	.word	0x0800d484
 8002688:	20000239 	.word	0x20000239
 800268c:	20000188 	.word	0x20000188
 8002690:	0800d494 	.word	0x0800d494
 8002694:	0800d4a8 	.word	0x0800d4a8
 8002698:	2000022a 	.word	0x2000022a
 800269c:	0800d404 	.word	0x0800d404
 80026a0:	0800d418 	.word	0x0800d418
 80026a4:	0800d428 	.word	0x0800d428
			}
		} else if(kapi2Tip == 2) {
 80026a8:	4b8a      	ldr	r3, [pc, #552]	; (80028d4 <menu+0x1828>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d104      	bne.n	80026ba <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80026b0:	4a89      	ldr	r2, [pc, #548]	; (80028d8 <menu+0x182c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	2002      	movs	r0, #2
 80026b6:	f005 faa9 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ba:	2102      	movs	r1, #2
 80026bc:	4887      	ldr	r0, [pc, #540]	; (80028dc <menu+0x1830>)
 80026be:	f006 fdcb 	bl	8009258 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d115      	bne.n	80026f4 <menu+0x1648>
 80026c8:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <menu+0x1834>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <menu+0x1828>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <menu+0x1828>)
 80026e0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026e2:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <menu+0x1828>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <menu+0x1644>
				kapi2Tip = 0;
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <menu+0x1828>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026f0:	f002 f8b2 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f4:	2104      	movs	r1, #4
 80026f6:	4879      	ldr	r0, [pc, #484]	; (80028dc <menu+0x1830>)
 80026f8:	f006 fdae 	bl	8009258 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d115      	bne.n	800272e <menu+0x1682>
 8002702:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <menu+0x1834>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f083 0301 	eor.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <menu+0x1828>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <menu+0x1828>)
 800271a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <menu+0x1828>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d902      	bls.n	800272a <menu+0x167e>
		   		kapi2Tip = 2;
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <menu+0x1828>)
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800272a:	f002 f895 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800272e:	2108      	movs	r1, #8
 8002730:	486a      	ldr	r0, [pc, #424]	; (80028dc <menu+0x1830>)
 8002732:	f006 fd91 	bl	8009258 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10d      	bne.n	8002758 <menu+0x16ac>
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <menu+0x1834>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800274a:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <menu+0x1828>)
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <menu+0x1838>)
 8002750:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <menu+0x183c>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <menu+0x1840>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d17f      	bne.n	8002860 <menu+0x17b4>
		if(dilSecim == 0) {
 8002760:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <menu+0x1844>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002768:	4a62      	ldr	r2, [pc, #392]	; (80028f4 <menu+0x1848>)
 800276a:	2101      	movs	r1, #1
 800276c:	2001      	movs	r0, #1
 800276e:	f005 fa4d 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002772:	4a61      	ldr	r2, [pc, #388]	; (80028f8 <menu+0x184c>)
 8002774:	2101      	movs	r1, #1
 8002776:	2002      	movs	r0, #2
 8002778:	f005 fa48 	bl	8007c0c <lcd_print>
 800277c:	e00d      	b.n	800279a <menu+0x16ee>
		} else if(dilSecim == 1) {
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <menu+0x1844>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d109      	bne.n	800279a <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <menu+0x1850>)
 8002788:	2101      	movs	r1, #1
 800278a:	2001      	movs	r0, #1
 800278c:	f005 fa3e 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002790:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <menu+0x1854>)
 8002792:	2101      	movs	r1, #1
 8002794:	2002      	movs	r0, #2
 8002796:	f005 fa39 	bl	8007c0c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <menu+0x1858>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	220a      	movs	r2, #10
 80027a0:	4959      	ldr	r1, [pc, #356]	; (8002908 <menu+0x185c>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f009 fd84 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 80027a8:	4a57      	ldr	r2, [pc, #348]	; (8002908 <menu+0x185c>)
 80027aa:	2110      	movs	r1, #16
 80027ac:	2002      	movs	r0, #2
 80027ae:	f005 fa2d 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027b2:	2102      	movs	r1, #2
 80027b4:	4849      	ldr	r0, [pc, #292]	; (80028dc <menu+0x1830>)
 80027b6:	f006 fd4f 	bl	8009258 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d119      	bne.n	80027f4 <menu+0x1748>
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <menu+0x1834>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <menu+0x1748>
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <menu+0x1828>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80027d6:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <menu+0x1858>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <menu+0x1858>)
 80027e0:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80027e2:	4b48      	ldr	r3, [pc, #288]	; (8002904 <menu+0x1858>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d902      	bls.n	80027f0 <menu+0x1744>
				kapi2AcSure = 0;
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <menu+0x1858>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f0:	f002 f832 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027f4:	2104      	movs	r1, #4
 80027f6:	4839      	ldr	r0, [pc, #228]	; (80028dc <menu+0x1830>)
 80027f8:	f006 fd2e 	bl	8009258 <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d119      	bne.n	8002836 <menu+0x178a>
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <menu+0x1834>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <menu+0x178a>
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <menu+0x1828>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <menu+0x1858>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b38      	ldr	r3, [pc, #224]	; (8002904 <menu+0x1858>)
 8002822:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <menu+0x1858>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d902      	bls.n	8002832 <menu+0x1786>
		   		kapi2AcSure = 5;
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <menu+0x1858>)
 800282e:	2205      	movs	r2, #5
 8002830:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002832:	f002 f811 	bl	8004858 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002836:	2108      	movs	r1, #8
 8002838:	4828      	ldr	r0, [pc, #160]	; (80028dc <menu+0x1830>)
 800283a:	f006 fd0d 	bl	8009258 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10d      	bne.n	8002860 <menu+0x17b4>
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <menu+0x1834>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <menu+0x1858>)
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <menu+0x1838>)
 8002858:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <menu+0x183c>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <menu+0x1840>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b0d      	cmp	r3, #13
 8002866:	f040 80b5 	bne.w	80029d4 <menu+0x1928>
		if(dilSecim == 0) {
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <menu+0x1844>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <menu+0x1860>)
 8002874:	2101      	movs	r1, #1
 8002876:	2001      	movs	r0, #1
 8002878:	f005 f9c8 	bl	8007c0c <lcd_print>
 800287c:	e008      	b.n	8002890 <menu+0x17e4>
		} else if(dilSecim == 1){
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <menu+0x1844>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d104      	bne.n	8002890 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <menu+0x1864>)
 8002888:	2101      	movs	r1, #1
 800288a:	2001      	movs	r0, #1
 800288c:	f005 f9be 	bl	8007c0c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <menu+0x1868>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <menu+0x186c>)
 800289a:	2101      	movs	r1, #1
 800289c:	2002      	movs	r0, #2
 800289e:	f005 f9b5 	bl	8007c0c <lcd_print>
 80028a2:	e048      	b.n	8002936 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <menu+0x1868>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d13b      	bne.n	8002924 <menu+0x1878>
			if(dilSecim == 0) {
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <menu+0x1844>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80028b4:	4a19      	ldr	r2, [pc, #100]	; (800291c <menu+0x1870>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	2002      	movs	r0, #2
 80028ba:	f005 f9a7 	bl	8007c0c <lcd_print>
 80028be:	e03a      	b.n	8002936 <menu+0x188a>
			} else if(dilSecim == 1) {
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <menu+0x1844>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d136      	bne.n	8002936 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <menu+0x1874>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	2002      	movs	r0, #2
 80028ce:	f005 f99d 	bl	8007c0c <lcd_print>
 80028d2:	e030      	b.n	8002936 <menu+0x188a>
 80028d4:	2000022a 	.word	0x2000022a
 80028d8:	0800d43c 	.word	0x0800d43c
 80028dc:	40010800 	.word	0x40010800
 80028e0:	2000024f 	.word	0x2000024f
 80028e4:	20000118 	.word	0x20000118
 80028e8:	2000024c 	.word	0x2000024c
 80028ec:	20000220 	.word	0x20000220
 80028f0:	20000241 	.word	0x20000241
 80028f4:	0800d4bc 	.word	0x0800d4bc
 80028f8:	0800d460 	.word	0x0800d460
 80028fc:	0800d4d0 	.word	0x0800d4d0
 8002900:	0800d484 	.word	0x0800d484
 8002904:	2000023a 	.word	0x2000023a
 8002908:	20000188 	.word	0x20000188
 800290c:	0800d4e4 	.word	0x0800d4e4
 8002910:	0800d4f8 	.word	0x0800d4f8
 8002914:	2000022b 	.word	0x2000022b
 8002918:	0800d404 	.word	0x0800d404
 800291c:	0800d418 	.word	0x0800d418
 8002920:	0800d428 	.word	0x0800d428
			}
		} else if(kapitablaTip == 2) {
 8002924:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <menu+0x19e8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d104      	bne.n	8002936 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 800292c:	4a5a      	ldr	r2, [pc, #360]	; (8002a98 <menu+0x19ec>)
 800292e:	2101      	movs	r1, #1
 8002930:	2002      	movs	r0, #2
 8002932:	f005 f96b 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002936:	2102      	movs	r1, #2
 8002938:	4858      	ldr	r0, [pc, #352]	; (8002a9c <menu+0x19f0>)
 800293a:	f006 fc8d 	bl	8009258 <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d115      	bne.n	8002970 <menu+0x18c4>
 8002944:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <menu+0x19f4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00e      	beq.n	8002970 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002952:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <menu+0x19e8>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <menu+0x19e8>)
 800295c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800295e:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <menu+0x19e8>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <menu+0x18c0>
				kapitablaTip = 0;
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <menu+0x19e8>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800296c:	f001 ff74 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002970:	2104      	movs	r1, #4
 8002972:	484a      	ldr	r0, [pc, #296]	; (8002a9c <menu+0x19f0>)
 8002974:	f006 fc70 	bl	8009258 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d115      	bne.n	80029aa <menu+0x18fe>
 800297e:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <menu+0x19f4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <menu+0x19e8>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <menu+0x19e8>)
 8002996:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <menu+0x19e8>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d902      	bls.n	80029a6 <menu+0x18fa>
		   		kapitablaTip = 2;
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <menu+0x19e8>)
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029a6:	f001 ff57 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029aa:	2108      	movs	r1, #8
 80029ac:	483b      	ldr	r0, [pc, #236]	; (8002a9c <menu+0x19f0>)
 80029ae:	f006 fc53 	bl	8009258 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10d      	bne.n	80029d4 <menu+0x1928>
 80029b8:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <menu+0x19f4>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80029c6:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <menu+0x19e8>)
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <menu+0x19f8>)
 80029cc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <menu+0x19fc>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <menu+0x1a00>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b0e      	cmp	r3, #14
 80029da:	f040 80f2 	bne.w	8002bc2 <menu+0x1b16>
		if(dilSecim == 0) {
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <menu+0x1a04>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <menu+0x1a08>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2001      	movs	r0, #1
 80029ec:	f005 f90e 	bl	8007c0c <lcd_print>
 80029f0:	e008      	b.n	8002a04 <menu+0x1958>
		} else if(dilSecim == 1) {
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <menu+0x1a04>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d104      	bne.n	8002a04 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80029fa:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <menu+0x1a0c>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f005 f904 	bl	8007c0c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <menu+0x1a10>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d113      	bne.n	8002a34 <menu+0x1988>
			if(dilSecim == 0){
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <menu+0x1a04>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002a14:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <menu+0x1a14>)
 8002a16:	2101      	movs	r1, #1
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f005 f8f7 	bl	8007c0c <lcd_print>
 8002a1e:	e071      	b.n	8002b04 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a20:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <menu+0x1a04>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d16d      	bne.n	8002b04 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <menu+0x1a18>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f005 f8ed 	bl	8007c0c <lcd_print>
 8002a32:	e067      	b.n	8002b04 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <menu+0x1a10>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d112      	bne.n	8002a62 <menu+0x19b6>
			if(dilSecim == 0){
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <menu+0x1a04>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002a44:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <menu+0x1a1c>)
 8002a46:	2101      	movs	r1, #1
 8002a48:	2002      	movs	r0, #2
 8002a4a:	f005 f8df 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1){
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <menu+0x1a04>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d156      	bne.n	8002b04 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <menu+0x1a20>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f005 f8d6 	bl	8007c0c <lcd_print>
 8002a60:	e050      	b.n	8002b04 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <menu+0x1a10>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d136      	bne.n	8002ad8 <menu+0x1a2c>
			if(dilSecim == 0){
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <menu+0x1a04>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <menu+0x1a24>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	2002      	movs	r0, #2
 8002a78:	f005 f8c8 	bl	8007c0c <lcd_print>
 8002a7c:	e042      	b.n	8002b04 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <menu+0x1a04>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d13e      	bne.n	8002b04 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <menu+0x1a28>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	f005 f8be 	bl	8007c0c <lcd_print>
 8002a90:	e038      	b.n	8002b04 <menu+0x1a58>
 8002a92:	bf00      	nop
 8002a94:	2000022b 	.word	0x2000022b
 8002a98:	0800d43c 	.word	0x0800d43c
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	2000024f 	.word	0x2000024f
 8002aa4:	20000118 	.word	0x20000118
 8002aa8:	2000024c 	.word	0x2000024c
 8002aac:	20000220 	.word	0x20000220
 8002ab0:	20000241 	.word	0x20000241
 8002ab4:	0800d50c 	.word	0x0800d50c
 8002ab8:	0800d520 	.word	0x0800d520
 8002abc:	2000022d 	.word	0x2000022d
 8002ac0:	0800d534 	.word	0x0800d534
 8002ac4:	0800d544 	.word	0x0800d544
 8002ac8:	0800d554 	.word	0x0800d554
 8002acc:	0800d564 	.word	0x0800d564
 8002ad0:	0800d574 	.word	0x0800d574
 8002ad4:	0800d588 	.word	0x0800d588
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ad8:	4b9b      	ldr	r3, [pc, #620]	; (8002d48 <menu+0x1c9c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d111      	bne.n	8002b04 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <menu+0x1ca0>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002ae8:	4a99      	ldr	r2, [pc, #612]	; (8002d50 <menu+0x1ca4>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	2002      	movs	r0, #2
 8002aee:	f005 f88d 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1) {
 8002af2:	4b96      	ldr	r3, [pc, #600]	; (8002d4c <menu+0x1ca0>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d104      	bne.n	8002b04 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002afa:	4a96      	ldr	r2, [pc, #600]	; (8002d54 <menu+0x1ca8>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2002      	movs	r0, #2
 8002b00:	f005 f884 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b04:	2102      	movs	r1, #2
 8002b06:	4894      	ldr	r0, [pc, #592]	; (8002d58 <menu+0x1cac>)
 8002b08:	f006 fba6 	bl	8009258 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d115      	bne.n	8002b3e <menu+0x1a92>
 8002b12:	4b92      	ldr	r3, [pc, #584]	; (8002d5c <menu+0x1cb0>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b20:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <menu+0x1c9c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b87      	ldr	r3, [pc, #540]	; (8002d48 <menu+0x1c9c>)
 8002b2a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b2c:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <menu+0x1c9c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d902      	bls.n	8002b3a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <menu+0x1c9c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b3a:	f001 fe8d 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3e:	2104      	movs	r1, #4
 8002b40:	4885      	ldr	r0, [pc, #532]	; (8002d58 <menu+0x1cac>)
 8002b42:	f006 fb89 	bl	8009258 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d115      	bne.n	8002b78 <menu+0x1acc>
 8002b4c:	4b83      	ldr	r3, [pc, #524]	; (8002d5c <menu+0x1cb0>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b5a:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <menu+0x1c9c>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <menu+0x1c9c>)
 8002b64:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <menu+0x1c9c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d902      	bls.n	8002b74 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <menu+0x1c9c>)
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b74:	f001 fe70 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b78:	2108      	movs	r1, #8
 8002b7a:	4877      	ldr	r0, [pc, #476]	; (8002d58 <menu+0x1cac>)
 8002b7c:	f006 fb6c 	bl	8009258 <HAL_GPIO_ReadPin>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11d      	bne.n	8002bc2 <menu+0x1b16>
 8002b86:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <menu+0x1cb0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	f083 0301 	eor.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002b94:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <menu+0x1c9c>)
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	4b71      	ldr	r3, [pc, #452]	; (8002d60 <menu+0x1cb4>)
 8002b9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <menu+0x1c9c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <menu+0x1b02>
 8002ba6:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <menu+0x1c9c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d106      	bne.n	8002bbc <menu+0x1b10>
				altLimit = 1;
 8002bae:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <menu+0x1cb8>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <menu+0x1cb8>)
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	4b69      	ldr	r3, [pc, #420]	; (8002d60 <menu+0x1cb4>)
 8002bba:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <menu+0x1cbc>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002bc2:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <menu+0x1cc0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	d17f      	bne.n	8002cca <menu+0x1c1e>
		if(dilSecim == 0) {
 8002bca:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <menu+0x1ca0>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002bd2:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <menu+0x1cc4>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f005 f818 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bdc:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <menu+0x1cc8>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	2002      	movs	r0, #2
 8002be2:	f005 f813 	bl	8007c0c <lcd_print>
 8002be6:	e00d      	b.n	8002c04 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <menu+0x1ca0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d109      	bne.n	8002c04 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002bf0:	4a61      	ldr	r2, [pc, #388]	; (8002d78 <menu+0x1ccc>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f005 f809 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bfa:	4a60      	ldr	r2, [pc, #384]	; (8002d7c <menu+0x1cd0>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f005 f804 	bl	8007c0c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002c04:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <menu+0x1cd4>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	220a      	movs	r2, #10
 8002c0a:	495e      	ldr	r1, [pc, #376]	; (8002d84 <menu+0x1cd8>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f009 fb4f 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 8002c12:	4a5c      	ldr	r2, [pc, #368]	; (8002d84 <menu+0x1cd8>)
 8002c14:	2110      	movs	r1, #16
 8002c16:	2002      	movs	r0, #2
 8002c18:	f004 fff8 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	484e      	ldr	r0, [pc, #312]	; (8002d58 <menu+0x1cac>)
 8002c20:	f006 fb1a 	bl	8009258 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d119      	bne.n	8002c5e <menu+0x1bb2>
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <menu+0x1cb0>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <menu+0x1bb2>
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <menu+0x1cdc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10e      	bne.n	8002c5e <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c40:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <menu+0x1cd4>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <menu+0x1cd4>)
 8002c4a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <menu+0x1cd4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d902      	bls.n	8002c5a <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <menu+0x1cd4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c5a:	f001 fdfd 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c5e:	2104      	movs	r1, #4
 8002c60:	483d      	ldr	r0, [pc, #244]	; (8002d58 <menu+0x1cac>)
 8002c62:	f006 faf9 	bl	8009258 <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d119      	bne.n	8002ca0 <menu+0x1bf4>
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <menu+0x1cb0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <menu+0x1bf4>
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <menu+0x1cdc>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <menu+0x1cd4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <menu+0x1cd4>)
 8002c8c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	; (8002d80 <menu+0x1cd4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002c96:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <menu+0x1cd4>)
 8002c98:	2205      	movs	r2, #5
 8002c9a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c9c:	f001 fddc 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca0:	2108      	movs	r1, #8
 8002ca2:	482d      	ldr	r0, [pc, #180]	; (8002d58 <menu+0x1cac>)
 8002ca4:	f006 fad8 	bl	8009258 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10d      	bne.n	8002cca <menu+0x1c1e>
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <menu+0x1cb0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <menu+0x1cd4>)
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <menu+0x1cb4>)
 8002cc2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002cc4:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <menu+0x1cbc>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002cca:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <menu+0x1cc0>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	f040 80bc 	bne.w	8002e4c <menu+0x1da0>
		if(dilSecim == 0) {
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <menu+0x1ca0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <menu+0x1ce0>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f004 ff93 	bl	8007c0c <lcd_print>
 8002ce6:	e008      	b.n	8002cfa <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <menu+0x1ca0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d104      	bne.n	8002cfa <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <menu+0x1ce4>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f004 ff89 	bl	8007c0c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <menu+0x1ce8>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <menu+0x1ca0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <menu+0x1ca4>)
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f004 ff7c 	bl	8007c0c <lcd_print>
 8002d14:	e04b      	b.n	8002dae <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <menu+0x1ca0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d147      	bne.n	8002dae <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002d1e:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <menu+0x1ca8>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	2002      	movs	r0, #2
 8002d24:	f004 ff72 	bl	8007c0c <lcd_print>
 8002d28:	e041      	b.n	8002dae <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <menu+0x1ce8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d13d      	bne.n	8002dae <menu+0x1d02>
			if(dilSecim == 0) {
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <menu+0x1ca0>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d130      	bne.n	8002d9c <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <menu+0x1cec>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f004 ff64 	bl	8007c0c <lcd_print>
 8002d44:	e033      	b.n	8002dae <menu+0x1d02>
 8002d46:	bf00      	nop
 8002d48:	2000022d 	.word	0x2000022d
 8002d4c:	20000241 	.word	0x20000241
 8002d50:	0800d1fc 	.word	0x0800d1fc
 8002d54:	0800d210 	.word	0x0800d210
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	2000024f 	.word	0x2000024f
 8002d60:	20000118 	.word	0x20000118
 8002d64:	20000226 	.word	0x20000226
 8002d68:	2000024c 	.word	0x2000024c
 8002d6c:	20000220 	.word	0x20000220
 8002d70:	0800d59c 	.word	0x0800d59c
 8002d74:	0800d460 	.word	0x0800d460
 8002d78:	0800d5b0 	.word	0x0800d5b0
 8002d7c:	0800d484 	.word	0x0800d484
 8002d80:	2000023b 	.word	0x2000023b
 8002d84:	20000188 	.word	0x20000188
 8002d88:	2000022b 	.word	0x2000022b
 8002d8c:	0800d5c4 	.word	0x0800d5c4
 8002d90:	0800d5d8 	.word	0x0800d5d8
 8002d94:	2000022e 	.word	0x2000022e
 8002d98:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 8002d9c:	4b99      	ldr	r3, [pc, #612]	; (8003004 <menu+0x1f58>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d104      	bne.n	8002dae <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002da4:	4a98      	ldr	r2, [pc, #608]	; (8003008 <menu+0x1f5c>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2002      	movs	r0, #2
 8002daa:	f004 ff2f 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dae:	2102      	movs	r1, #2
 8002db0:	4896      	ldr	r0, [pc, #600]	; (800300c <menu+0x1f60>)
 8002db2:	f006 fa51 	bl	8009258 <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <menu+0x1d3c>
 8002dbc:	4b94      	ldr	r3, [pc, #592]	; (8003010 <menu+0x1f64>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002dca:	4b92      	ldr	r3, [pc, #584]	; (8003014 <menu+0x1f68>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b90      	ldr	r3, [pc, #576]	; (8003014 <menu+0x1f68>)
 8002dd4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002dd6:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <menu+0x1f68>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d902      	bls.n	8002de4 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <menu+0x1f68>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002de4:	f001 fd38 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de8:	2104      	movs	r1, #4
 8002dea:	4888      	ldr	r0, [pc, #544]	; (800300c <menu+0x1f60>)
 8002dec:	f006 fa34 	bl	8009258 <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d115      	bne.n	8002e22 <menu+0x1d76>
 8002df6:	4b86      	ldr	r3, [pc, #536]	; (8003010 <menu+0x1f64>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00e      	beq.n	8002e22 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002e04:	4b83      	ldr	r3, [pc, #524]	; (8003014 <menu+0x1f68>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b81      	ldr	r3, [pc, #516]	; (8003014 <menu+0x1f68>)
 8002e0e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e10:	4b80      	ldr	r3, [pc, #512]	; (8003014 <menu+0x1f68>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002e18:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <menu+0x1f68>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e1e:	f001 fd1b 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e22:	2108      	movs	r1, #8
 8002e24:	4879      	ldr	r0, [pc, #484]	; (800300c <menu+0x1f60>)
 8002e26:	f006 fa17 	bl	8009258 <HAL_GPIO_ReadPin>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10d      	bne.n	8002e4c <menu+0x1da0>
 8002e30:	4b77      	ldr	r3, [pc, #476]	; (8003010 <menu+0x1f64>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <menu+0x1f68>)
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	4b75      	ldr	r3, [pc, #468]	; (8003018 <menu+0x1f6c>)
 8002e44:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002e46:	4b75      	ldr	r3, [pc, #468]	; (800301c <menu+0x1f70>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <menu+0x1f74>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	f040 80c3 	bne.w	8002fdc <menu+0x1f30>
		if(dilSecim == 0) {
 8002e56:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <menu+0x1f58>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <menu+0x1f78>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	2001      	movs	r0, #1
 8002e64:	f004 fed2 	bl	8007c0c <lcd_print>
 8002e68:	e008      	b.n	8002e7c <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002e6a:	4b66      	ldr	r3, [pc, #408]	; (8003004 <menu+0x1f58>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d104      	bne.n	8002e7c <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002e72:	4a6d      	ldr	r2, [pc, #436]	; (8003028 <menu+0x1f7c>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	2001      	movs	r0, #1
 8002e78:	f004 fec8 	bl	8007c0c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <menu+0x1f80>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d113      	bne.n	8002eac <menu+0x1e00>
			if(dilSecim == 0){
 8002e84:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <menu+0x1f58>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002e8c:	4a68      	ldr	r2, [pc, #416]	; (8003030 <menu+0x1f84>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2002      	movs	r0, #2
 8002e92:	f004 febb 	bl	8007c0c <lcd_print>
 8002e96:	e038      	b.n	8002f0a <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002e98:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <menu+0x1f58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d134      	bne.n	8002f0a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002ea0:	4a64      	ldr	r2, [pc, #400]	; (8003034 <menu+0x1f88>)
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	2002      	movs	r0, #2
 8002ea6:	f004 feb1 	bl	8007c0c <lcd_print>
 8002eaa:	e02e      	b.n	8002f0a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002eac:	4b5f      	ldr	r3, [pc, #380]	; (800302c <menu+0x1f80>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d113      	bne.n	8002edc <menu+0x1e30>
			if(dilSecim == 0){
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <menu+0x1f58>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002ebc:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <menu+0x1f8c>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f004 fea3 	bl	8007c0c <lcd_print>
 8002ec6:	e020      	b.n	8002f0a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <menu+0x1f58>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11c      	bne.n	8002f0a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002ed0:	4a5a      	ldr	r2, [pc, #360]	; (800303c <menu+0x1f90>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f004 fe99 	bl	8007c0c <lcd_print>
 8002eda:	e016      	b.n	8002f0a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <menu+0x1f80>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d112      	bne.n	8002f0a <menu+0x1e5e>
			if(dilSecim == 0) {
 8002ee4:	4b47      	ldr	r3, [pc, #284]	; (8003004 <menu+0x1f58>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002eec:	4a54      	ldr	r2, [pc, #336]	; (8003040 <menu+0x1f94>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f004 fe8b 	bl	8007c0c <lcd_print>
 8002ef6:	e008      	b.n	8002f0a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <menu+0x1f58>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d104      	bne.n	8002f0a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002f00:	4a50      	ldr	r2, [pc, #320]	; (8003044 <menu+0x1f98>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	2002      	movs	r0, #2
 8002f06:	f004 fe81 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	483f      	ldr	r0, [pc, #252]	; (800300c <menu+0x1f60>)
 8002f0e:	f006 f9a3 	bl	8009258 <HAL_GPIO_ReadPin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d115      	bne.n	8002f44 <menu+0x1e98>
 8002f18:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <menu+0x1f64>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <menu+0x1f80>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <menu+0x1f80>)
 8002f30:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <menu+0x1f80>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d902      	bls.n	8002f40 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002f3a:	4b3c      	ldr	r3, [pc, #240]	; (800302c <menu+0x1f80>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f40:	f001 fc8a 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f44:	2104      	movs	r1, #4
 8002f46:	4831      	ldr	r0, [pc, #196]	; (800300c <menu+0x1f60>)
 8002f48:	f006 f986 	bl	8009258 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d115      	bne.n	8002f7e <menu+0x1ed2>
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <menu+0x1f64>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <menu+0x1f80>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <menu+0x1f80>)
 8002f6a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <menu+0x1f80>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d902      	bls.n	8002f7a <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <menu+0x1f80>)
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f7a:	f001 fc6d 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7e:	2108      	movs	r1, #8
 8002f80:	4822      	ldr	r0, [pc, #136]	; (800300c <menu+0x1f60>)
 8002f82:	f006 f969 	bl	8009258 <HAL_GPIO_ReadPin>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d127      	bne.n	8002fdc <menu+0x1f30>
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <menu+0x1f64>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d020      	beq.n	8002fdc <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <menu+0x1f80>)
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <menu+0x1f6c>)
 8002fa0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <menu+0x1f80>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <menu+0x1f06>
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <menu+0x1f80>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d106      	bne.n	8002fc0 <menu+0x1f14>
				calismaSekli = 0;
 8002fb2:	4b25      	ldr	r3, [pc, #148]	; (8003048 <menu+0x1f9c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <menu+0x1f9c>)
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <menu+0x1f6c>)
 8002fbe:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <menu+0x1f80>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <menu+0x1fa0>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <menu+0x1fa0>)
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <menu+0x1f6c>)
 8002fd4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <menu+0x1f70>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <menu+0x1f74>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b12      	cmp	r3, #18
 8002fe2:	f040 80d5 	bne.w	8003190 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <menu+0x1f80>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d13c      	bne.n	8003068 <menu+0x1fbc>
			if(dilSecim == 0) {
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <menu+0x1f58>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12e      	bne.n	8003054 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <menu+0x1fa4>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f004 fe06 	bl	8007c0c <lcd_print>
 8003000:	e048      	b.n	8003094 <menu+0x1fe8>
 8003002:	bf00      	nop
 8003004:	20000241 	.word	0x20000241
 8003008:	0800d270 	.word	0x0800d270
 800300c:	40010800 	.word	0x40010800
 8003010:	2000024f 	.word	0x2000024f
 8003014:	2000022e 	.word	0x2000022e
 8003018:	20000118 	.word	0x20000118
 800301c:	2000024c 	.word	0x2000024c
 8003020:	20000220 	.word	0x20000220
 8003024:	0800d5ec 	.word	0x0800d5ec
 8003028:	0800d600 	.word	0x0800d600
 800302c:	2000022f 	.word	0x2000022f
 8003030:	0800d614 	.word	0x0800d614
 8003034:	0800d624 	.word	0x0800d624
 8003038:	0800d634 	.word	0x0800d634
 800303c:	0800d644 	.word	0x0800d644
 8003040:	0800d1fc 	.word	0x0800d1fc
 8003044:	0800d210 	.word	0x0800d210
 8003048:	20000221 	.word	0x20000221
 800304c:	20000232 	.word	0x20000232
 8003050:	0800d654 	.word	0x0800d654
			} else if(dilSecim == 1) {
 8003054:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <menu+0x2198>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d11b      	bne.n	8003094 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800305c:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <menu+0x219c>)
 800305e:	2101      	movs	r1, #1
 8003060:	2001      	movs	r0, #1
 8003062:	f004 fdd3 	bl	8007c0c <lcd_print>
 8003066:	e015      	b.n	8003094 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003068:	4b78      	ldr	r3, [pc, #480]	; (800324c <menu+0x21a0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d111      	bne.n	8003094 <menu+0x1fe8>
			if(dilSecim == 0){
 8003070:	4b74      	ldr	r3, [pc, #464]	; (8003244 <menu+0x2198>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003078:	4a75      	ldr	r2, [pc, #468]	; (8003250 <menu+0x21a4>)
 800307a:	2101      	movs	r1, #1
 800307c:	2001      	movs	r0, #1
 800307e:	f004 fdc5 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1){
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <menu+0x2198>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d104      	bne.n	8003094 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800308a:	4a72      	ldr	r2, [pc, #456]	; (8003254 <menu+0x21a8>)
 800308c:	2101      	movs	r1, #1
 800308e:	2001      	movs	r0, #1
 8003090:	f004 fdbc 	bl	8007c0c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003094:	4b70      	ldr	r3, [pc, #448]	; (8003258 <menu+0x21ac>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d113      	bne.n	80030c4 <menu+0x2018>
			if(dilSecim == 0) {
 800309c:	4b69      	ldr	r3, [pc, #420]	; (8003244 <menu+0x2198>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80030a4:	4a6d      	ldr	r2, [pc, #436]	; (800325c <menu+0x21b0>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	2002      	movs	r0, #2
 80030aa:	f004 fdaf 	bl	8007c0c <lcd_print>
 80030ae:	e020      	b.n	80030f2 <menu+0x2046>
			} else if(dilSecim == 1){
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <menu+0x2198>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11c      	bne.n	80030f2 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80030b8:	4a69      	ldr	r2, [pc, #420]	; (8003260 <menu+0x21b4>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	2002      	movs	r0, #2
 80030be:	f004 fda5 	bl	8007c0c <lcd_print>
 80030c2:	e016      	b.n	80030f2 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <menu+0x21ac>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d112      	bne.n	80030f2 <menu+0x2046>
			if(dilSecim == 0){
 80030cc:	4b5d      	ldr	r3, [pc, #372]	; (8003244 <menu+0x2198>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80030d4:	4a63      	ldr	r2, [pc, #396]	; (8003264 <menu+0x21b8>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	2002      	movs	r0, #2
 80030da:	f004 fd97 	bl	8007c0c <lcd_print>
 80030de:	e008      	b.n	80030f2 <menu+0x2046>
			} else if(dilSecim == 1){
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <menu+0x2198>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d104      	bne.n	80030f2 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80030e8:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <menu+0x21bc>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	2002      	movs	r0, #2
 80030ee:	f004 fd8d 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f2:	2102      	movs	r1, #2
 80030f4:	485d      	ldr	r0, [pc, #372]	; (800326c <menu+0x21c0>)
 80030f6:	f006 f8af 	bl	8009258 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d115      	bne.n	800312c <menu+0x2080>
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <menu+0x21c4>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <menu+0x21ac>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b50      	ldr	r3, [pc, #320]	; (8003258 <menu+0x21ac>)
 8003118:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800311a:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <menu+0x21ac>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d902      	bls.n	8003128 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003122:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <menu+0x21ac>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003128:	f001 fb96 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800312c:	2104      	movs	r1, #4
 800312e:	484f      	ldr	r0, [pc, #316]	; (800326c <menu+0x21c0>)
 8003130:	f006 f892 	bl	8009258 <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d115      	bne.n	8003166 <menu+0x20ba>
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <menu+0x21c4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <menu+0x21ac>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b41      	ldr	r3, [pc, #260]	; (8003258 <menu+0x21ac>)
 8003152:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <menu+0x21ac>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <menu+0x21ac>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003162:	f001 fb79 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2108      	movs	r1, #8
 8003168:	4840      	ldr	r0, [pc, #256]	; (800326c <menu+0x21c0>)
 800316a:	f006 f875 	bl	8009258 <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10d      	bne.n	8003190 <menu+0x20e4>
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <menu+0x21c4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <menu+0x21ac>)
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <menu+0x21c8>)
 8003188:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <menu+0x21cc>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003190:	4b3a      	ldr	r3, [pc, #232]	; (800327c <menu+0x21d0>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b13      	cmp	r3, #19
 8003196:	f040 80d5 	bne.w	8003344 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <menu+0x21a0>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d113      	bne.n	80031ca <menu+0x211e>
			if(dilSecim == 0) {
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <menu+0x2198>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80031aa:	4a35      	ldr	r2, [pc, #212]	; (8003280 <menu+0x21d4>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	2001      	movs	r0, #1
 80031b0:	f004 fd2c 	bl	8007c0c <lcd_print>
 80031b4:	e01f      	b.n	80031f6 <menu+0x214a>
			} else if(dilSecim == 1) {
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <menu+0x2198>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11b      	bne.n	80031f6 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <menu+0x21d8>)
 80031c0:	2101      	movs	r1, #1
 80031c2:	2001      	movs	r0, #1
 80031c4:	f004 fd22 	bl	8007c0c <lcd_print>
 80031c8:	e015      	b.n	80031f6 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <menu+0x21a0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d111      	bne.n	80031f6 <menu+0x214a>
			if(dilSecim == 0) {
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <menu+0x2198>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80031da:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <menu+0x21dc>)
 80031dc:	2101      	movs	r1, #1
 80031de:	2001      	movs	r0, #1
 80031e0:	f004 fd14 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1) {
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <menu+0x2198>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d104      	bne.n	80031f6 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <menu+0x21e0>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2001      	movs	r0, #1
 80031f2:	f004 fd0b 	bl	8007c0c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <menu+0x21e4>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <menu+0x217a>
			if(dilSecim == 0) {
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <menu+0x2198>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <menu+0x21b0>)
 8003208:	2101      	movs	r1, #1
 800320a:	2002      	movs	r0, #2
 800320c:	f004 fcfe 	bl	8007c0c <lcd_print>
 8003210:	e049      	b.n	80032a6 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <menu+0x2198>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d145      	bne.n	80032a6 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <menu+0x21b4>)
 800321c:	2101      	movs	r1, #1
 800321e:	2002      	movs	r0, #2
 8003220:	f004 fcf4 	bl	8007c0c <lcd_print>
 8003224:	e03f      	b.n	80032a6 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <menu+0x21e4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d13b      	bne.n	80032a6 <menu+0x21fa>
			if(dilSecim == 0) {
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <menu+0x2198>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d12e      	bne.n	8003294 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <menu+0x21b8>)
 8003238:	2101      	movs	r1, #1
 800323a:	2002      	movs	r0, #2
 800323c:	f004 fce6 	bl	8007c0c <lcd_print>
 8003240:	e031      	b.n	80032a6 <menu+0x21fa>
 8003242:	bf00      	nop
 8003244:	20000241 	.word	0x20000241
 8003248:	0800d668 	.word	0x0800d668
 800324c:	2000022f 	.word	0x2000022f
 8003250:	0800d678 	.word	0x0800d678
 8003254:	0800d68c 	.word	0x0800d68c
 8003258:	20000230 	.word	0x20000230
 800325c:	0800d1fc 	.word	0x0800d1fc
 8003260:	0800d210 	.word	0x0800d210
 8003264:	0800d25c 	.word	0x0800d25c
 8003268:	0800d270 	.word	0x0800d270
 800326c:	40010800 	.word	0x40010800
 8003270:	2000024f 	.word	0x2000024f
 8003274:	20000118 	.word	0x20000118
 8003278:	2000024c 	.word	0x2000024c
 800327c:	20000220 	.word	0x20000220
 8003280:	0800d6a0 	.word	0x0800d6a0
 8003284:	0800d6b4 	.word	0x0800d6b4
 8003288:	0800d6c8 	.word	0x0800d6c8
 800328c:	0800d6dc 	.word	0x0800d6dc
 8003290:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 8003294:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <menu+0x242c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d104      	bne.n	80032a6 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 800329c:	4a8f      	ldr	r2, [pc, #572]	; (80034dc <menu+0x2430>)
 800329e:	2101      	movs	r1, #1
 80032a0:	2002      	movs	r0, #2
 80032a2:	f004 fcb3 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a6:	2102      	movs	r1, #2
 80032a8:	488d      	ldr	r0, [pc, #564]	; (80034e0 <menu+0x2434>)
 80032aa:	f005 ffd5 	bl	8009258 <HAL_GPIO_ReadPin>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d115      	bne.n	80032e0 <menu+0x2234>
 80032b4:	4b8b      	ldr	r3, [pc, #556]	; (80034e4 <menu+0x2438>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80032c2:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <menu+0x243c>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b87      	ldr	r3, [pc, #540]	; (80034e8 <menu+0x243c>)
 80032cc:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80032ce:	4b86      	ldr	r3, [pc, #536]	; (80034e8 <menu+0x243c>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d902      	bls.n	80032dc <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80032d6:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <menu+0x243c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032dc:	f001 fabc 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e0:	2104      	movs	r1, #4
 80032e2:	487f      	ldr	r0, [pc, #508]	; (80034e0 <menu+0x2434>)
 80032e4:	f005 ffb8 	bl	8009258 <HAL_GPIO_ReadPin>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d115      	bne.n	800331a <menu+0x226e>
 80032ee:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <menu+0x2438>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	f083 0301 	eor.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80032fc:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <menu+0x243c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <menu+0x243c>)
 8003306:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003308:	4b77      	ldr	r3, [pc, #476]	; (80034e8 <menu+0x243c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003310:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <menu+0x243c>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003316:	f001 fa9f 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800331a:	2108      	movs	r1, #8
 800331c:	4870      	ldr	r0, [pc, #448]	; (80034e0 <menu+0x2434>)
 800331e:	f005 ff9b 	bl	8009258 <HAL_GPIO_ReadPin>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10d      	bne.n	8003344 <menu+0x2298>
 8003328:	4b6e      	ldr	r3, [pc, #440]	; (80034e4 <menu+0x2438>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003336:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <menu+0x243c>)
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	4b6c      	ldr	r3, [pc, #432]	; (80034ec <menu+0x2440>)
 800333c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800333e:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <menu+0x2444>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003344:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <menu+0x2448>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b14      	cmp	r3, #20
 800334a:	f040 80b5 	bne.w	80034b8 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800334e:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <menu+0x244c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d113      	bne.n	800337e <menu+0x22d2>
			if(dilSecim == 0) {
 8003356:	4b60      	ldr	r3, [pc, #384]	; (80034d8 <menu+0x242c>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800335e:	4a67      	ldr	r2, [pc, #412]	; (80034fc <menu+0x2450>)
 8003360:	2101      	movs	r1, #1
 8003362:	2001      	movs	r0, #1
 8003364:	f004 fc52 	bl	8007c0c <lcd_print>
 8003368:	e020      	b.n	80033ac <menu+0x2300>
			} else if(dilSecim == 1) {
 800336a:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <menu+0x242c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11c      	bne.n	80033ac <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003372:	4a63      	ldr	r2, [pc, #396]	; (8003500 <menu+0x2454>)
 8003374:	2101      	movs	r1, #1
 8003376:	2001      	movs	r0, #1
 8003378:	f004 fc48 	bl	8007c0c <lcd_print>
 800337c:	e016      	b.n	80033ac <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800337e:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <menu+0x244c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d112      	bne.n	80033ac <menu+0x2300>
			if(dilSecim == 0) {
 8003386:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <menu+0x242c>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800338e:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <menu+0x2458>)
 8003390:	2101      	movs	r1, #1
 8003392:	2001      	movs	r0, #1
 8003394:	f004 fc3a 	bl	8007c0c <lcd_print>
 8003398:	e008      	b.n	80033ac <menu+0x2300>
			} else if(dilSecim == 1) {
 800339a:	4b4f      	ldr	r3, [pc, #316]	; (80034d8 <menu+0x242c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d104      	bne.n	80033ac <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80033a2:	4a59      	ldr	r2, [pc, #356]	; (8003508 <menu+0x245c>)
 80033a4:	2101      	movs	r1, #1
 80033a6:	2001      	movs	r0, #1
 80033a8:	f004 fc30 	bl	8007c0c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80033ac:	4b57      	ldr	r3, [pc, #348]	; (800350c <menu+0x2460>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d113      	bne.n	80033dc <menu+0x2330>
			if(dilSecim == 0) {
 80033b4:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <menu+0x242c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <menu+0x2464>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2002      	movs	r0, #2
 80033c2:	f004 fc23 	bl	8007c0c <lcd_print>
 80033c6:	e020      	b.n	800340a <menu+0x235e>
			} else if(dilSecim == 1) {
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <menu+0x242c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d11c      	bne.n	800340a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <menu+0x2468>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	2002      	movs	r0, #2
 80033d6:	f004 fc19 	bl	8007c0c <lcd_print>
 80033da:	e016      	b.n	800340a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <menu+0x2460>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d112      	bne.n	800340a <menu+0x235e>
			if(dilSecim == 0) {
 80033e4:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <menu+0x242c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80033ec:	4a4a      	ldr	r2, [pc, #296]	; (8003518 <menu+0x246c>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2002      	movs	r0, #2
 80033f2:	f004 fc0b 	bl	8007c0c <lcd_print>
 80033f6:	e008      	b.n	800340a <menu+0x235e>
			} else if(dilSecim == 1) {
 80033f8:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <menu+0x242c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d104      	bne.n	800340a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003400:	4a46      	ldr	r2, [pc, #280]	; (800351c <menu+0x2470>)
 8003402:	2101      	movs	r1, #1
 8003404:	2002      	movs	r0, #2
 8003406:	f004 fc01 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800340a:	2102      	movs	r1, #2
 800340c:	4834      	ldr	r0, [pc, #208]	; (80034e0 <menu+0x2434>)
 800340e:	f005 ff23 	bl	8009258 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d119      	bne.n	800344c <menu+0x23a0>
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <menu+0x2438>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <menu+0x23a0>
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <menu+0x244c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d10e      	bne.n	800344c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <menu+0x2460>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b35      	ldr	r3, [pc, #212]	; (800350c <menu+0x2460>)
 8003438:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <menu+0x2460>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d902      	bls.n	8003448 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003442:	4b32      	ldr	r3, [pc, #200]	; (800350c <menu+0x2460>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003448:	f001 fa06 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800344c:	2104      	movs	r1, #4
 800344e:	4824      	ldr	r0, [pc, #144]	; (80034e0 <menu+0x2434>)
 8003450:	f005 ff02 	bl	8009258 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d119      	bne.n	800348e <menu+0x23e2>
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <menu+0x2438>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <menu+0x23e2>
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <menu+0x244c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d10e      	bne.n	800348e <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <menu+0x2460>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	3b01      	subs	r3, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <menu+0x2460>)
 800347a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <menu+0x2460>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003484:	4b21      	ldr	r3, [pc, #132]	; (800350c <menu+0x2460>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800348a:	f001 f9e5 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800348e:	2108      	movs	r1, #8
 8003490:	4813      	ldr	r0, [pc, #76]	; (80034e0 <menu+0x2434>)
 8003492:	f005 fee1 	bl	8009258 <HAL_GPIO_ReadPin>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10d      	bne.n	80034b8 <menu+0x240c>
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <menu+0x2438>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f083 0301 	eor.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <menu+0x2460>)
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <menu+0x2440>)
 80034b0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <menu+0x2444>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <menu+0x2448>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b15      	cmp	r3, #21
 80034be:	f040 80c2 	bne.w	8003646 <menu+0x259a>
		if(dilSecim == 0) {
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <menu+0x242c>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d12c      	bne.n	8003524 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <menu+0x2474>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	2001      	movs	r0, #1
 80034d0:	f004 fb9c 	bl	8007c0c <lcd_print>
 80034d4:	e02f      	b.n	8003536 <menu+0x248a>
 80034d6:	bf00      	nop
 80034d8:	20000241 	.word	0x20000241
 80034dc:	0800d270 	.word	0x0800d270
 80034e0:	40010800 	.word	0x40010800
 80034e4:	2000024f 	.word	0x2000024f
 80034e8:	20000231 	.word	0x20000231
 80034ec:	20000118 	.word	0x20000118
 80034f0:	2000024c 	.word	0x2000024c
 80034f4:	20000220 	.word	0x20000220
 80034f8:	2000022f 	.word	0x2000022f
 80034fc:	0800d6f0 	.word	0x0800d6f0
 8003500:	0800d704 	.word	0x0800d704
 8003504:	0800d718 	.word	0x0800d718
 8003508:	0800d72c 	.word	0x0800d72c
 800350c:	20000232 	.word	0x20000232
 8003510:	0800d740 	.word	0x0800d740
 8003514:	0800d754 	.word	0x0800d754
 8003518:	0800d764 	.word	0x0800d764
 800351c:	0800d778 	.word	0x0800d778
 8003520:	0800d788 	.word	0x0800d788
		} else if(dilSecim == 1) {
 8003524:	4b9c      	ldr	r3, [pc, #624]	; (8003798 <menu+0x26ec>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d104      	bne.n	8003536 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800352c:	4a9b      	ldr	r2, [pc, #620]	; (800379c <menu+0x26f0>)
 800352e:	2101      	movs	r1, #1
 8003530:	2001      	movs	r0, #1
 8003532:	f004 fb6b 	bl	8007c0c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003536:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <menu+0x26f4>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d112      	bne.n	8003564 <menu+0x24b8>
			if(dilSecim == 0) {
 800353e:	4b96      	ldr	r3, [pc, #600]	; (8003798 <menu+0x26ec>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003546:	4a97      	ldr	r2, [pc, #604]	; (80037a4 <menu+0x26f8>)
 8003548:	2101      	movs	r1, #1
 800354a:	2002      	movs	r0, #2
 800354c:	f004 fb5e 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1) {
 8003550:	4b91      	ldr	r3, [pc, #580]	; (8003798 <menu+0x26ec>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d11c      	bne.n	8003592 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003558:	4a93      	ldr	r2, [pc, #588]	; (80037a8 <menu+0x26fc>)
 800355a:	2101      	movs	r1, #1
 800355c:	2002      	movs	r0, #2
 800355e:	f004 fb55 	bl	8007c0c <lcd_print>
 8003562:	e016      	b.n	8003592 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003564:	4b8e      	ldr	r3, [pc, #568]	; (80037a0 <menu+0x26f4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d112      	bne.n	8003592 <menu+0x24e6>
			if(dilSecim == 0) {
 800356c:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <menu+0x26ec>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003574:	4a8d      	ldr	r2, [pc, #564]	; (80037ac <menu+0x2700>)
 8003576:	2101      	movs	r1, #1
 8003578:	2002      	movs	r0, #2
 800357a:	f004 fb47 	bl	8007c0c <lcd_print>
 800357e:	e008      	b.n	8003592 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003580:	4b85      	ldr	r3, [pc, #532]	; (8003798 <menu+0x26ec>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d104      	bne.n	8003592 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003588:	4a89      	ldr	r2, [pc, #548]	; (80037b0 <menu+0x2704>)
 800358a:	2101      	movs	r1, #1
 800358c:	2002      	movs	r0, #2
 800358e:	f004 fb3d 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003592:	2102      	movs	r1, #2
 8003594:	4887      	ldr	r0, [pc, #540]	; (80037b4 <menu+0x2708>)
 8003596:	f005 fe5f 	bl	8009258 <HAL_GPIO_ReadPin>
 800359a:	4603      	mov	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d115      	bne.n	80035cc <menu+0x2520>
 80035a0:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <menu+0x270c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80035ae:	4b7c      	ldr	r3, [pc, #496]	; (80037a0 <menu+0x26f4>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <menu+0x26f4>)
 80035b8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80035ba:	4b79      	ldr	r3, [pc, #484]	; (80037a0 <menu+0x26f4>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d902      	bls.n	80035c8 <menu+0x251c>
				platformSilindirTipi = 0;
 80035c2:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <menu+0x26f4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035c8:	f001 f946 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035cc:	2104      	movs	r1, #4
 80035ce:	4879      	ldr	r0, [pc, #484]	; (80037b4 <menu+0x2708>)
 80035d0:	f005 fe42 	bl	8009258 <HAL_GPIO_ReadPin>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d115      	bne.n	8003606 <menu+0x255a>
 80035da:	4b77      	ldr	r3, [pc, #476]	; (80037b8 <menu+0x270c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80035e8:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <menu+0x26f4>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <menu+0x26f4>)
 80035f2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <menu+0x26f4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <menu+0x26f4>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003602:	f001 f929 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003606:	2108      	movs	r1, #8
 8003608:	486a      	ldr	r0, [pc, #424]	; (80037b4 <menu+0x2708>)
 800360a:	f005 fe25 	bl	8009258 <HAL_GPIO_ReadPin>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d118      	bne.n	8003646 <menu+0x259a>
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <menu+0x270c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d011      	beq.n	8003646 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <menu+0x26f4>)
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <menu+0x2710>)
 8003628:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <menu+0x26f4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <menu+0x2594>
				altLimit = 1;
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <menu+0x2714>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <menu+0x2714>)
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <menu+0x2710>)
 800363e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003640:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <menu+0x2718>)
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <menu+0x271c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b16      	cmp	r3, #22
 800364c:	f040 8081 	bne.w	8003752 <menu+0x26a6>
		if(dilSecim == 0) {
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <menu+0x26ec>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003658:	4a5c      	ldr	r2, [pc, #368]	; (80037cc <menu+0x2720>)
 800365a:	2101      	movs	r1, #1
 800365c:	2001      	movs	r0, #1
 800365e:	f004 fad5 	bl	8007c0c <lcd_print>
 8003662:	e008      	b.n	8003676 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003664:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <menu+0x26ec>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d104      	bne.n	8003676 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <menu+0x2724>)
 800366e:	2101      	movs	r1, #1
 8003670:	2001      	movs	r0, #1
 8003672:	f004 facb 	bl	8007c0c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <menu+0x26ec>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <menu+0x2728>)
 8003680:	2101      	movs	r1, #1
 8003682:	2002      	movs	r0, #2
 8003684:	f004 fac2 	bl	8007c0c <lcd_print>
 8003688:	e008      	b.n	800369c <menu+0x25f0>
			} else if(dilSecim == 1){
 800368a:	4b43      	ldr	r3, [pc, #268]	; (8003798 <menu+0x26ec>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d104      	bne.n	800369c <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003692:	4a51      	ldr	r2, [pc, #324]	; (80037d8 <menu+0x272c>)
 8003694:	2101      	movs	r1, #1
 8003696:	2002      	movs	r0, #2
 8003698:	f004 fab8 	bl	8007c0c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 800369c:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <menu+0x2730>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	220a      	movs	r2, #10
 80036a2:	494f      	ldr	r1, [pc, #316]	; (80037e0 <menu+0x2734>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f008 fe03 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 80036aa:	4a4d      	ldr	r2, [pc, #308]	; (80037e0 <menu+0x2734>)
 80036ac:	2110      	movs	r1, #16
 80036ae:	2002      	movs	r0, #2
 80036b0:	f004 faac 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b4:	2102      	movs	r1, #2
 80036b6:	483f      	ldr	r0, [pc, #252]	; (80037b4 <menu+0x2708>)
 80036b8:	f005 fdce 	bl	8009258 <HAL_GPIO_ReadPin>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d115      	bne.n	80036ee <menu+0x2642>
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <menu+0x270c>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80036d0:	4b42      	ldr	r3, [pc, #264]	; (80037dc <menu+0x2730>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <menu+0x2730>)
 80036da:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80036dc:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <menu+0x2730>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d902      	bls.n	80036ea <menu+0x263e>
				yukariValfTmr = 0;
 80036e4:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <menu+0x2730>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ea:	f001 f8b5 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ee:	2104      	movs	r1, #4
 80036f0:	4830      	ldr	r0, [pc, #192]	; (80037b4 <menu+0x2708>)
 80036f2:	f005 fdb1 	bl	8009258 <HAL_GPIO_ReadPin>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d115      	bne.n	8003728 <menu+0x267c>
 80036fc:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <menu+0x270c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f083 0301 	eor.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <menu+0x2730>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	3b01      	subs	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b32      	ldr	r3, [pc, #200]	; (80037dc <menu+0x2730>)
 8003714:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <menu+0x2730>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d902      	bls.n	8003724 <menu+0x2678>
		   		yukariValfTmr = 5;
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <menu+0x2730>)
 8003720:	2205      	movs	r2, #5
 8003722:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003724:	f001 f898 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003728:	2108      	movs	r1, #8
 800372a:	4822      	ldr	r0, [pc, #136]	; (80037b4 <menu+0x2708>)
 800372c:	f005 fd94 	bl	8009258 <HAL_GPIO_ReadPin>
 8003730:	4603      	mov	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10d      	bne.n	8003752 <menu+0x26a6>
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <menu+0x270c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d006      	beq.n	8003752 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <menu+0x2730>)
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <menu+0x2710>)
 800374a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <menu+0x2718>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <menu+0x271c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b17      	cmp	r3, #23
 8003758:	f040 80ac 	bne.w	80038b4 <menu+0x2808>
		if(dilSecim == 0) {
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <menu+0x26ec>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <menu+0x2738>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f004 fa4f 	bl	8007c0c <lcd_print>
 800376e:	e008      	b.n	8003782 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <menu+0x26ec>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d104      	bne.n	8003782 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <menu+0x273c>)
 800377a:	2101      	movs	r1, #1
 800377c:	2001      	movs	r0, #1
 800377e:	f004 fa45 	bl	8007c0c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <menu+0x26ec>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d130      	bne.n	80037ec <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <menu+0x2728>)
 800378c:	2101      	movs	r1, #1
 800378e:	2002      	movs	r0, #2
 8003790:	f004 fa3c 	bl	8007c0c <lcd_print>
 8003794:	e033      	b.n	80037fe <menu+0x2752>
 8003796:	bf00      	nop
 8003798:	20000241 	.word	0x20000241
 800379c:	0800d79c 	.word	0x0800d79c
 80037a0:	20000233 	.word	0x20000233
 80037a4:	0800d740 	.word	0x0800d740
 80037a8:	0800d754 	.word	0x0800d754
 80037ac:	0800d764 	.word	0x0800d764
 80037b0:	0800d778 	.word	0x0800d778
 80037b4:	40010800 	.word	0x40010800
 80037b8:	2000024f 	.word	0x2000024f
 80037bc:	20000118 	.word	0x20000118
 80037c0:	20000226 	.word	0x20000226
 80037c4:	2000024c 	.word	0x2000024c
 80037c8:	20000220 	.word	0x20000220
 80037cc:	0800d7ac 	.word	0x0800d7ac
 80037d0:	0800d7c0 	.word	0x0800d7c0
 80037d4:	0800d460 	.word	0x0800d460
 80037d8:	0800d7d4 	.word	0x0800d7d4
 80037dc:	20000234 	.word	0x20000234
 80037e0:	20000188 	.word	0x20000188
 80037e4:	0800d7e4 	.word	0x0800d7e4
 80037e8:	0800d7f8 	.word	0x0800d7f8
			} else if(dilSecim == 1) {
 80037ec:	4b98      	ldr	r3, [pc, #608]	; (8003a50 <menu+0x29a4>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d104      	bne.n	80037fe <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80037f4:	4a97      	ldr	r2, [pc, #604]	; (8003a54 <menu+0x29a8>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	2002      	movs	r0, #2
 80037fa:	f004 fa07 	bl	8007c0c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80037fe:	4b96      	ldr	r3, [pc, #600]	; (8003a58 <menu+0x29ac>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	220a      	movs	r2, #10
 8003804:	4995      	ldr	r1, [pc, #596]	; (8003a5c <menu+0x29b0>)
 8003806:	4618      	mov	r0, r3
 8003808:	f008 fd52 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 800380c:	4a93      	ldr	r2, [pc, #588]	; (8003a5c <menu+0x29b0>)
 800380e:	2110      	movs	r1, #16
 8003810:	2002      	movs	r0, #2
 8003812:	f004 f9fb 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003816:	2102      	movs	r1, #2
 8003818:	4891      	ldr	r0, [pc, #580]	; (8003a60 <menu+0x29b4>)
 800381a:	f005 fd1d 	bl	8009258 <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d115      	bne.n	8003850 <menu+0x27a4>
 8003824:	4b8f      	ldr	r3, [pc, #572]	; (8003a64 <menu+0x29b8>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <menu+0x29ac>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b87      	ldr	r3, [pc, #540]	; (8003a58 <menu+0x29ac>)
 800383c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800383e:	4b86      	ldr	r3, [pc, #536]	; (8003a58 <menu+0x29ac>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d902      	bls.n	800384c <menu+0x27a0>
				asagiValfTmr = 0;
 8003846:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <menu+0x29ac>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800384c:	f001 f804 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003850:	2104      	movs	r1, #4
 8003852:	4883      	ldr	r0, [pc, #524]	; (8003a60 <menu+0x29b4>)
 8003854:	f005 fd00 	bl	8009258 <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d115      	bne.n	800388a <menu+0x27de>
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <menu+0x29b8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 800386c:	4b7a      	ldr	r3, [pc, #488]	; (8003a58 <menu+0x29ac>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <menu+0x29ac>)
 8003876:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003878:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <menu+0x29ac>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d902      	bls.n	8003886 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003880:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <menu+0x29ac>)
 8003882:	2205      	movs	r2, #5
 8003884:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003886:	f000 ffe7 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800388a:	2108      	movs	r1, #8
 800388c:	4874      	ldr	r0, [pc, #464]	; (8003a60 <menu+0x29b4>)
 800388e:	f005 fce3 	bl	8009258 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10d      	bne.n	80038b4 <menu+0x2808>
 8003898:	4b72      	ldr	r3, [pc, #456]	; (8003a64 <menu+0x29b8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80038a6:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <menu+0x29ac>)
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <menu+0x29bc>)
 80038ac:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80038ae:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <menu+0x29c0>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80038b4:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <menu+0x29c4>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b18      	cmp	r3, #24
 80038ba:	f040 809d 	bne.w	80039f8 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <menu+0x29c8>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d113      	bne.n	80038ee <menu+0x2842>
			if(dilSecim == 0) {
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <menu+0x29a4>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80038ce:	4a6a      	ldr	r2, [pc, #424]	; (8003a78 <menu+0x29cc>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	2001      	movs	r0, #1
 80038d4:	f004 f99a 	bl	8007c0c <lcd_print>
 80038d8:	e020      	b.n	800391c <menu+0x2870>
			} else if(dilSecim == 1) {
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <menu+0x29a4>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11c      	bne.n	800391c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80038e2:	4a66      	ldr	r2, [pc, #408]	; (8003a7c <menu+0x29d0>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	2001      	movs	r0, #1
 80038e8:	f004 f990 	bl	8007c0c <lcd_print>
 80038ec:	e016      	b.n	800391c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038ee:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <menu+0x29c8>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d112      	bne.n	800391c <menu+0x2870>
			if(dilSecim == 0) {
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <menu+0x29a4>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80038fe:	4a60      	ldr	r2, [pc, #384]	; (8003a80 <menu+0x29d4>)
 8003900:	2101      	movs	r1, #1
 8003902:	2001      	movs	r0, #1
 8003904:	f004 f982 	bl	8007c0c <lcd_print>
 8003908:	e008      	b.n	800391c <menu+0x2870>
			} else if(dilSecim == 1) {
 800390a:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <menu+0x29a4>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d104      	bne.n	800391c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003912:	4a5c      	ldr	r2, [pc, #368]	; (8003a84 <menu+0x29d8>)
 8003914:	2101      	movs	r1, #1
 8003916:	2001      	movs	r0, #1
 8003918:	f004 f978 	bl	8007c0c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 800391c:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <menu+0x29a4>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <menu+0x29dc>)
 8003926:	2101      	movs	r1, #1
 8003928:	2002      	movs	r0, #2
 800392a:	f004 f96f 	bl	8007c0c <lcd_print>
 800392e:	e008      	b.n	8003942 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003930:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <menu+0x29a4>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d104      	bne.n	8003942 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003938:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <menu+0x29a8>)
 800393a:	2101      	movs	r1, #1
 800393c:	2002      	movs	r0, #2
 800393e:	f004 f965 	bl	8007c0c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003942:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <menu+0x29e0>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	220a      	movs	r2, #10
 8003948:	4944      	ldr	r1, [pc, #272]	; (8003a5c <menu+0x29b0>)
 800394a:	4618      	mov	r0, r3
 800394c:	f008 fcb0 	bl	800c2b0 <itoa>
		lcd_print(2, 16, snum);
 8003950:	4a42      	ldr	r2, [pc, #264]	; (8003a5c <menu+0x29b0>)
 8003952:	2110      	movs	r1, #16
 8003954:	2002      	movs	r0, #2
 8003956:	f004 f959 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800395a:	2102      	movs	r1, #2
 800395c:	4840      	ldr	r0, [pc, #256]	; (8003a60 <menu+0x29b4>)
 800395e:	f005 fc7b 	bl	8009258 <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d115      	bne.n	8003994 <menu+0x28e8>
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <menu+0x29b8>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <menu+0x29e0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <menu+0x29e0>)
 8003980:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <menu+0x29e0>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d902      	bls.n	8003990 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 800398a:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <menu+0x29e0>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003990:	f000 ff62 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003994:	2104      	movs	r1, #4
 8003996:	4832      	ldr	r0, [pc, #200]	; (8003a60 <menu+0x29b4>)
 8003998:	f005 fc5e 	bl	8009258 <HAL_GPIO_ReadPin>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d115      	bne.n	80039ce <menu+0x2922>
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <menu+0x29b8>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <menu+0x29e0>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <menu+0x29e0>)
 80039ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <menu+0x29e0>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d902      	bls.n	80039ca <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80039c4:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <menu+0x29e0>)
 80039c6:	2205      	movs	r2, #5
 80039c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039ca:	f000 ff45 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ce:	2108      	movs	r1, #8
 80039d0:	4823      	ldr	r0, [pc, #140]	; (8003a60 <menu+0x29b4>)
 80039d2:	f005 fc41 	bl	8009258 <HAL_GPIO_ReadPin>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10d      	bne.n	80039f8 <menu+0x294c>
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <menu+0x29b8>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	f083 0301 	eor.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <menu+0x29e0>)
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <menu+0x29bc>)
 80039f0:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <menu+0x29c0>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <menu+0x29c4>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b19      	cmp	r3, #25
 80039fe:	f040 80c4 	bne.w	8003b8a <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <menu+0x29c8>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d113      	bne.n	8003a32 <menu+0x2986>
			if(dilSecim == 0) {
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <menu+0x29a4>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <menu+0x29e4>)
 8003a14:	2101      	movs	r1, #1
 8003a16:	2001      	movs	r0, #1
 8003a18:	f004 f8f8 	bl	8007c0c <lcd_print>
 8003a1c:	e047      	b.n	8003aae <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <menu+0x29a4>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d143      	bne.n	8003aae <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <menu+0x29e8>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f004 f8ee 	bl	8007c0c <lcd_print>
 8003a30:	e03d      	b.n	8003aae <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <menu+0x29c8>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d139      	bne.n	8003aae <menu+0x2a02>
			if(dilSecim == 0) {
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <menu+0x29a4>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12c      	bne.n	8003a9c <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <menu+0x29ec>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	2001      	movs	r0, #1
 8003a48:	f004 f8e0 	bl	8007c0c <lcd_print>
 8003a4c:	e02f      	b.n	8003aae <menu+0x2a02>
 8003a4e:	bf00      	nop
 8003a50:	20000241 	.word	0x20000241
 8003a54:	0800d7d4 	.word	0x0800d7d4
 8003a58:	20000235 	.word	0x20000235
 8003a5c:	20000188 	.word	0x20000188
 8003a60:	40010800 	.word	0x40010800
 8003a64:	2000024f 	.word	0x2000024f
 8003a68:	20000118 	.word	0x20000118
 8003a6c:	2000024c 	.word	0x2000024c
 8003a70:	20000220 	.word	0x20000220
 8003a74:	2000022f 	.word	0x2000022f
 8003a78:	0800d80c 	.word	0x0800d80c
 8003a7c:	0800d820 	.word	0x0800d820
 8003a80:	0800d834 	.word	0x0800d834
 8003a84:	0800d848 	.word	0x0800d848
 8003a88:	0800d460 	.word	0x0800d460
 8003a8c:	20000236 	.word	0x20000236
 8003a90:	0800d85c 	.word	0x0800d85c
 8003a94:	0800d870 	.word	0x0800d870
 8003a98:	0800d884 	.word	0x0800d884
			} else if(dilSecim == 1) {
 8003a9c:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <menu+0x2bc0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d104      	bne.n	8003aae <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003aa4:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <menu+0x2bc4>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f004 f8af 	bl	8007c0c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <menu+0x2bc0>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	; (8003c74 <menu+0x2bc8>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	2002      	movs	r0, #2
 8003abc:	f004 f8a6 	bl	8007c0c <lcd_print>
 8003ac0:	e008      	b.n	8003ad4 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <menu+0x2bc0>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d104      	bne.n	8003ad4 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003aca:	4a6b      	ldr	r2, [pc, #428]	; (8003c78 <menu+0x2bcc>)
 8003acc:	2101      	movs	r1, #1
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f004 f89c 	bl	8007c0c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ad4:	4b69      	ldr	r3, [pc, #420]	; (8003c7c <menu+0x2bd0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	220a      	movs	r2, #10
 8003ada:	4969      	ldr	r1, [pc, #420]	; (8003c80 <menu+0x2bd4>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f008 fbe7 	bl	800c2b0 <itoa>
		lcd_print(2,16,snum);
 8003ae2:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <menu+0x2bd4>)
 8003ae4:	2110      	movs	r1, #16
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f004 f890 	bl	8007c0c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aec:	2102      	movs	r1, #2
 8003aee:	4865      	ldr	r0, [pc, #404]	; (8003c84 <menu+0x2bd8>)
 8003af0:	f005 fbb2 	bl	8009258 <HAL_GPIO_ReadPin>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d115      	bne.n	8003b26 <menu+0x2a7a>
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <menu+0x2bdc>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	f083 0301 	eor.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b08:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <menu+0x2bd0>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <menu+0x2bd0>)
 8003b12:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <menu+0x2bd0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d902      	bls.n	8003b22 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003b1c:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <menu+0x2bd0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b22:	f000 fe99 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b26:	2104      	movs	r1, #4
 8003b28:	4856      	ldr	r0, [pc, #344]	; (8003c84 <menu+0x2bd8>)
 8003b2a:	f005 fb95 	bl	8009258 <HAL_GPIO_ReadPin>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d115      	bne.n	8003b60 <menu+0x2ab4>
 8003b34:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <menu+0x2bdc>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f083 0301 	eor.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <menu+0x2bd0>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <menu+0x2bd0>)
 8003b4c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <menu+0x2bd0>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d902      	bls.n	8003b5c <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <menu+0x2bd0>)
 8003b58:	2205      	movs	r2, #5
 8003b5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b5c:	f000 fe7c 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b60:	2108      	movs	r1, #8
 8003b62:	4848      	ldr	r0, [pc, #288]	; (8003c84 <menu+0x2bd8>)
 8003b64:	f005 fb78 	bl	8009258 <HAL_GPIO_ReadPin>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10d      	bne.n	8003b8a <menu+0x2ade>
 8003b6e:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <menu+0x2bdc>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	f083 0301 	eor.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <menu+0x2bd0>)
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <menu+0x2be0>)
 8003b82:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003b84:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <menu+0x2be4>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003b8a:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <menu+0x2be8>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b1a      	cmp	r3, #26
 8003b90:	f040 80ec 	bne.w	8003d6c <menu+0x2cc0>
		if(dilSecim == 0) {
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <menu+0x2bc0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003b9c:	4a3e      	ldr	r2, [pc, #248]	; (8003c98 <menu+0x2bec>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f004 f833 	bl	8007c0c <lcd_print>
 8003ba6:	e008      	b.n	8003bba <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <menu+0x2bc0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d104      	bne.n	8003bba <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003bb0:	4a3a      	ldr	r2, [pc, #232]	; (8003c9c <menu+0x2bf0>)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f004 f829 	bl	8007c0c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <menu+0x2bf4>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b63      	cmp	r3, #99	; 0x63
 8003bc0:	d91e      	bls.n	8003c00 <menu+0x2b54>
			if(dilSecim == 0) {
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <menu+0x2bc0>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bca:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <menu+0x2bc8>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	2002      	movs	r0, #2
 8003bd0:	f004 f81c 	bl	8007c0c <lcd_print>
			}
			if(dilSecim == 1) {
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <menu+0x2bc0>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d104      	bne.n	8003be6 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <menu+0x2bcc>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	2002      	movs	r0, #2
 8003be2:	f004 f813 	bl	8007c0c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003be6:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <menu+0x2bf4>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	220a      	movs	r2, #10
 8003bec:	4924      	ldr	r1, [pc, #144]	; (8003c80 <menu+0x2bd4>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f008 fb5e 	bl	800c2b0 <itoa>
			lcd_print(2,14,snum);
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <menu+0x2bd4>)
 8003bf6:	210e      	movs	r1, #14
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f004 f807 	bl	8007c0c <lcd_print>
 8003bfe:	e066      	b.n	8003cce <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <menu+0x2bf4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d923      	bls.n	8003c50 <menu+0x2ba4>
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <menu+0x2bf4>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b63      	cmp	r3, #99	; 0x63
 8003c0e:	d81f      	bhi.n	8003c50 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <menu+0x2bc0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <menu+0x2bc8>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f003 fff5 	bl	8007c0c <lcd_print>
 8003c22:	e008      	b.n	8003c36 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <menu+0x2bc0>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d104      	bne.n	8003c36 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <menu+0x2bcc>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2002      	movs	r0, #2
 8003c32:	f003 ffeb 	bl	8007c0c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <menu+0x2bf4>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	220a      	movs	r2, #10
 8003c3c:	4910      	ldr	r1, [pc, #64]	; (8003c80 <menu+0x2bd4>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f008 fb36 	bl	800c2b0 <itoa>
			lcd_print(2, 15, snum);
 8003c44:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <menu+0x2bd4>)
 8003c46:	210f      	movs	r1, #15
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f003 ffdf 	bl	8007c0c <lcd_print>
 8003c4e:	e03e      	b.n	8003cce <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <menu+0x2bf4>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d83a      	bhi.n	8003cce <menu+0x2c22>
			if(dilSecim == 0) {
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <menu+0x2bc0>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d121      	bne.n	8003ca4 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <menu+0x2bc8>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	2002      	movs	r0, #2
 8003c66:	f003 ffd1 	bl	8007c0c <lcd_print>
 8003c6a:	e024      	b.n	8003cb6 <menu+0x2c0a>
 8003c6c:	20000241 	.word	0x20000241
 8003c70:	0800d898 	.word	0x0800d898
 8003c74:	0800d460 	.word	0x0800d460
 8003c78:	0800d7d4 	.word	0x0800d7d4
 8003c7c:	20000237 	.word	0x20000237
 8003c80:	20000188 	.word	0x20000188
 8003c84:	40010800 	.word	0x40010800
 8003c88:	2000024f 	.word	0x2000024f
 8003c8c:	20000118 	.word	0x20000118
 8003c90:	2000024c 	.word	0x2000024c
 8003c94:	20000220 	.word	0x20000220
 8003c98:	0800d8ac 	.word	0x0800d8ac
 8003c9c:	0800d8c0 	.word	0x0800d8c0
 8003ca0:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003ca4:	4b8f      	ldr	r3, [pc, #572]	; (8003ee4 <menu+0x2e38>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d104      	bne.n	8003cb6 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003cac:	4a8e      	ldr	r2, [pc, #568]	; (8003ee8 <menu+0x2e3c>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f003 ffab 	bl	8007c0c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	; (8003eec <menu+0x2e40>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	220a      	movs	r2, #10
 8003cbc:	498c      	ldr	r1, [pc, #560]	; (8003ef0 <menu+0x2e44>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f008 faf6 	bl	800c2b0 <itoa>
			lcd_print(2, 16, snum);
 8003cc4:	4a8a      	ldr	r2, [pc, #552]	; (8003ef0 <menu+0x2e44>)
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f003 ff9f 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4888      	ldr	r0, [pc, #544]	; (8003ef4 <menu+0x2e48>)
 8003cd2:	f005 fac1 	bl	8009258 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d115      	bne.n	8003d08 <menu+0x2c5c>
 8003cdc:	4b86      	ldr	r3, [pc, #536]	; (8003ef8 <menu+0x2e4c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00e      	beq.n	8003d08 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003cea:	4b80      	ldr	r3, [pc, #512]	; (8003eec <menu+0x2e40>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b7e      	ldr	r3, [pc, #504]	; (8003eec <menu+0x2e40>)
 8003cf4:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003cf6:	4b7d      	ldr	r3, [pc, #500]	; (8003eec <menu+0x2e40>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2bb4      	cmp	r3, #180	; 0xb4
 8003cfc:	d902      	bls.n	8003d04 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003cfe:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <menu+0x2e40>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d04:	f000 fda8 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d08:	2104      	movs	r1, #4
 8003d0a:	487a      	ldr	r0, [pc, #488]	; (8003ef4 <menu+0x2e48>)
 8003d0c:	f005 faa4 	bl	8009258 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d115      	bne.n	8003d42 <menu+0x2c96>
 8003d16:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <menu+0x2e4c>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	f083 0301 	eor.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d24:	4b71      	ldr	r3, [pc, #452]	; (8003eec <menu+0x2e40>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <menu+0x2e40>)
 8003d2e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d30:	4b6e      	ldr	r3, [pc, #440]	; (8003eec <menu+0x2e40>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2bb5      	cmp	r3, #181	; 0xb5
 8003d36:	d902      	bls.n	8003d3e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003d38:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <menu+0x2e40>)
 8003d3a:	22b4      	movs	r2, #180	; 0xb4
 8003d3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d3e:	f000 fd8b 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d42:	2108      	movs	r1, #8
 8003d44:	486b      	ldr	r0, [pc, #428]	; (8003ef4 <menu+0x2e48>)
 8003d46:	f005 fa87 	bl	8009258 <HAL_GPIO_ReadPin>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10d      	bne.n	8003d6c <menu+0x2cc0>
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <menu+0x2e4c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <menu+0x2e40>)
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	4b66      	ldr	r3, [pc, #408]	; (8003efc <menu+0x2e50>)
 8003d64:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003d66:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <menu+0x2e54>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <menu+0x2e58>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b1b      	cmp	r3, #27
 8003d72:	f040 8083 	bne.w	8003e7c <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003d76:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <menu+0x2e5c>)
 8003d78:	2101      	movs	r1, #1
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f003 ff46 	bl	8007c0c <lcd_print>

		if(buzzer == 0) {
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <menu+0x2e60>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <menu+0x2d04>
			if(dilSecim == 0) {
 8003d88:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <menu+0x2e38>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003d90:	4a5f      	ldr	r2, [pc, #380]	; (8003f10 <menu+0x2e64>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	2002      	movs	r0, #2
 8003d96:	f003 ff39 	bl	8007c0c <lcd_print>
 8003d9a:	e020      	b.n	8003dde <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <menu+0x2e38>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d11c      	bne.n	8003dde <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003da4:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <menu+0x2e68>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	2002      	movs	r0, #2
 8003daa:	f003 ff2f 	bl	8007c0c <lcd_print>
 8003dae:	e016      	b.n	8003dde <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003db0:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <menu+0x2e60>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d112      	bne.n	8003dde <menu+0x2d32>
			if(dilSecim == 0) {
 8003db8:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <menu+0x2e38>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003dc0:	4a55      	ldr	r2, [pc, #340]	; (8003f18 <menu+0x2e6c>)
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	f003 ff21 	bl	8007c0c <lcd_print>
 8003dca:	e008      	b.n	8003dde <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003dcc:	4b45      	ldr	r3, [pc, #276]	; (8003ee4 <menu+0x2e38>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d104      	bne.n	8003dde <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003dd4:	4a51      	ldr	r2, [pc, #324]	; (8003f1c <menu+0x2e70>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f003 ff17 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dde:	2102      	movs	r1, #2
 8003de0:	4844      	ldr	r0, [pc, #272]	; (8003ef4 <menu+0x2e48>)
 8003de2:	f005 fa39 	bl	8009258 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d115      	bne.n	8003e18 <menu+0x2d6c>
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <menu+0x2e4c>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f083 0301 	eor.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003dfa:	4b44      	ldr	r3, [pc, #272]	; (8003f0c <menu+0x2e60>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <menu+0x2e60>)
 8003e04:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <menu+0x2e60>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d902      	bls.n	8003e14 <menu+0x2d68>
				buzzer = 0;
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <menu+0x2e60>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e14:	f000 fd20 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4836      	ldr	r0, [pc, #216]	; (8003ef4 <menu+0x2e48>)
 8003e1c:	f005 fa1c 	bl	8009258 <HAL_GPIO_ReadPin>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d115      	bne.n	8003e52 <menu+0x2da6>
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <menu+0x2e4c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e34:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <menu+0x2e60>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <menu+0x2e60>)
 8003e3e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <menu+0x2e60>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <menu+0x2da2>
		   		buzzer = 1;
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <menu+0x2e60>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e4e:	f000 fd03 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e52:	2108      	movs	r1, #8
 8003e54:	4827      	ldr	r0, [pc, #156]	; (8003ef4 <menu+0x2e48>)
 8003e56:	f005 f9ff 	bl	8009258 <HAL_GPIO_ReadPin>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10d      	bne.n	8003e7c <menu+0x2dd0>
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <menu+0x2e4c>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f083 0301 	eor.w	r3, r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003e6e:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <menu+0x2e60>)
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <menu+0x2e50>)
 8003e74:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <menu+0x2e54>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <menu+0x2e58>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b1c      	cmp	r3, #28
 8003e82:	f040 80ab 	bne.w	8003fdc <menu+0x2f30>
		calismaSayModu = 0;
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <menu+0x2e74>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <menu+0x2e78>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2001      	movs	r0, #1
 8003e92:	f003 febb 	bl	8007c0c <lcd_print>

		if(demoMode == 0) {
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <menu+0x2e7c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <menu+0x2e38>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003ea6:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <menu+0x2e64>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f003 feae 	bl	8007c0c <lcd_print>
 8003eb0:	e045      	b.n	8003f3e <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <menu+0x2e38>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d141      	bne.n	8003f3e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003eba:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <menu+0x2e68>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	f003 fea4 	bl	8007c0c <lcd_print>
 8003ec4:	e03b      	b.n	8003f3e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <menu+0x2e7c>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d137      	bne.n	8003f3e <menu+0x2e92>
			if(dilSecim == 0){
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <menu+0x2e38>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d12a      	bne.n	8003f2c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <menu+0x2e6c>)
 8003ed8:	2101      	movs	r1, #1
 8003eda:	2002      	movs	r0, #2
 8003edc:	f003 fe96 	bl	8007c0c <lcd_print>
 8003ee0:	e02d      	b.n	8003f3e <menu+0x2e92>
 8003ee2:	bf00      	nop
 8003ee4:	20000241 	.word	0x20000241
 8003ee8:	0800d7d4 	.word	0x0800d7d4
 8003eec:	20000238 	.word	0x20000238
 8003ef0:	20000188 	.word	0x20000188
 8003ef4:	40010800 	.word	0x40010800
 8003ef8:	2000024f 	.word	0x2000024f
 8003efc:	20000118 	.word	0x20000118
 8003f00:	2000024c 	.word	0x2000024c
 8003f04:	20000220 	.word	0x20000220
 8003f08:	0800d8d4 	.word	0x0800d8d4
 8003f0c:	2000023c 	.word	0x2000023c
 8003f10:	0800d1fc 	.word	0x0800d1fc
 8003f14:	0800d210 	.word	0x0800d210
 8003f18:	0800d25c 	.word	0x0800d25c
 8003f1c:	0800d270 	.word	0x0800d270
 8003f20:	20000240 	.word	0x20000240
 8003f24:	0800d8e8 	.word	0x0800d8e8
 8003f28:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8003f2c:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <menu+0x3048>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d104      	bne.n	8003f3e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f34:	4a70      	ldr	r2, [pc, #448]	; (80040f8 <menu+0x304c>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	2002      	movs	r0, #2
 8003f3a:	f003 fe67 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3e:	2102      	movs	r1, #2
 8003f40:	486e      	ldr	r0, [pc, #440]	; (80040fc <menu+0x3050>)
 8003f42:	f005 f989 	bl	8009258 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d115      	bne.n	8003f78 <menu+0x2ecc>
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	; (8004100 <menu+0x3054>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <menu+0x3058>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b68      	ldr	r3, [pc, #416]	; (8004104 <menu+0x3058>)
 8003f64:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003f66:	4b67      	ldr	r3, [pc, #412]	; (8004104 <menu+0x3058>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d902      	bls.n	8003f74 <menu+0x2ec8>
				demoMode = 0;
 8003f6e:	4b65      	ldr	r3, [pc, #404]	; (8004104 <menu+0x3058>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f74:	f000 fc70 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f78:	2104      	movs	r1, #4
 8003f7a:	4860      	ldr	r0, [pc, #384]	; (80040fc <menu+0x3050>)
 8003f7c:	f005 f96c 	bl	8009258 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d115      	bne.n	8003fb2 <menu+0x2f06>
 8003f86:	4b5e      	ldr	r3, [pc, #376]	; (8004100 <menu+0x3054>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	f083 0301 	eor.w	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <menu+0x3058>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <menu+0x3058>)
 8003f9e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003fa0:	4b58      	ldr	r3, [pc, #352]	; (8004104 <menu+0x3058>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <menu+0x2f02>
		   		demoMode = 1;
 8003fa8:	4b56      	ldr	r3, [pc, #344]	; (8004104 <menu+0x3058>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fae:	f000 fc53 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb2:	2108      	movs	r1, #8
 8003fb4:	4851      	ldr	r0, [pc, #324]	; (80040fc <menu+0x3050>)
 8003fb6:	f005 f94f 	bl	8009258 <HAL_GPIO_ReadPin>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10d      	bne.n	8003fdc <menu+0x2f30>
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <menu+0x3054>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <menu+0x2f30>
			eepromData[26] = demoMode;
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <menu+0x3058>)
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <menu+0x305c>)
 8003fd4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003fd6:	4b4d      	ldr	r3, [pc, #308]	; (800410c <menu+0x3060>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003fdc:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <menu+0x3064>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b1d      	cmp	r3, #29
 8003fe2:	f040 8132 	bne.w	800424a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003fe6:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <menu+0x3068>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d113      	bne.n	8004016 <menu+0x2f6a>
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <menu+0x306c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <menu+0x2f6a>
 8003ff6:	4b49      	ldr	r3, [pc, #292]	; (800411c <menu+0x3070>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <menu+0x2f6a>
 8003ffe:	4b48      	ldr	r3, [pc, #288]	; (8004120 <menu+0x3074>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <menu+0x2f6a>
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <menu+0x3078>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800400e:	4b46      	ldr	r3, [pc, #280]	; (8004128 <menu+0x307c>)
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e002      	b.n	800401c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <menu+0x307c>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800401c:	4b43      	ldr	r3, [pc, #268]	; (800412c <menu+0x3080>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d154      	bne.n	80040ce <menu+0x3022>
			if(dilSecim == 0) {
 8004024:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <menu+0x3048>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800402c:	4a40      	ldr	r2, [pc, #256]	; (8004130 <menu+0x3084>)
 800402e:	2101      	movs	r1, #1
 8004030:	2001      	movs	r0, #1
 8004032:	f003 fdeb 	bl	8007c0c <lcd_print>
 8004036:	e008      	b.n	800404a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <menu+0x3048>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d104      	bne.n	800404a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004040:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <menu+0x3088>)
 8004042:	2101      	movs	r1, #1
 8004044:	2001      	movs	r0, #1
 8004046:	f003 fde1 	bl	8007c0c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <menu+0x3078>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	220a      	movs	r2, #10
 8004050:	4939      	ldr	r1, [pc, #228]	; (8004138 <menu+0x308c>)
 8004052:	4618      	mov	r0, r3
 8004054:	f008 f92c 	bl	800c2b0 <itoa>
			lcd_print(2, 12, snum);
 8004058:	4a37      	ldr	r2, [pc, #220]	; (8004138 <menu+0x308c>)
 800405a:	210c      	movs	r1, #12
 800405c:	2002      	movs	r0, #2
 800405e:	f003 fdd5 	bl	8007c0c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004062:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <menu+0x3074>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	220a      	movs	r2, #10
 8004068:	4933      	ldr	r1, [pc, #204]	; (8004138 <menu+0x308c>)
 800406a:	4618      	mov	r0, r3
 800406c:	f008 f920 	bl	800c2b0 <itoa>
			lcd_print(2, 13, snum);
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <menu+0x308c>)
 8004072:	210d      	movs	r1, #13
 8004074:	2002      	movs	r0, #2
 8004076:	f003 fdc9 	bl	8007c0c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <menu+0x3070>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	220a      	movs	r2, #10
 8004080:	492d      	ldr	r1, [pc, #180]	; (8004138 <menu+0x308c>)
 8004082:	4618      	mov	r0, r3
 8004084:	f008 f914 	bl	800c2b0 <itoa>
			lcd_print(2, 14, snum);
 8004088:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <menu+0x308c>)
 800408a:	210e      	movs	r1, #14
 800408c:	2002      	movs	r0, #2
 800408e:	f003 fdbd 	bl	8007c0c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <menu+0x306c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	220a      	movs	r2, #10
 8004098:	4927      	ldr	r1, [pc, #156]	; (8004138 <menu+0x308c>)
 800409a:	4618      	mov	r0, r3
 800409c:	f008 f908 	bl	800c2b0 <itoa>
			lcd_print(2, 15, snum);
 80040a0:	4a25      	ldr	r2, [pc, #148]	; (8004138 <menu+0x308c>)
 80040a2:	210f      	movs	r1, #15
 80040a4:	2002      	movs	r0, #2
 80040a6:	f003 fdb1 	bl	8007c0c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <menu+0x3068>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	220a      	movs	r2, #10
 80040b0:	4921      	ldr	r1, [pc, #132]	; (8004138 <menu+0x308c>)
 80040b2:	4618      	mov	r0, r3
 80040b4:	f008 f8fc 	bl	800c2b0 <itoa>
			lcd_print(2, 16, snum);
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <menu+0x308c>)
 80040ba:	2110      	movs	r1, #16
 80040bc:	2002      	movs	r0, #2
 80040be:	f003 fda5 	bl	8007c0c <lcd_print>

			lcd_print(2, 1, "           ");
 80040c2:	4a1e      	ldr	r2, [pc, #120]	; (800413c <menu+0x3090>)
 80040c4:	2101      	movs	r1, #1
 80040c6:	2002      	movs	r0, #2
 80040c8:	f003 fda0 	bl	8007c0c <lcd_print>
 80040cc:	e048      	b.n	8004160 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <menu+0x3080>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d144      	bne.n	8004160 <menu+0x30b4>
			if(dilSecim == 0) {
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <menu+0x3048>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d132      	bne.n	8004144 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <menu+0x3084>)
 80040e0:	2101      	movs	r1, #1
 80040e2:	2001      	movs	r0, #1
 80040e4:	f003 fd92 	bl	8007c0c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <menu+0x3094>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	2002      	movs	r0, #2
 80040ee:	f003 fd8d 	bl	8007c0c <lcd_print>
 80040f2:	e035      	b.n	8004160 <menu+0x30b4>
 80040f4:	20000241 	.word	0x20000241
 80040f8:	0800d270 	.word	0x0800d270
 80040fc:	40010800 	.word	0x40010800
 8004100:	2000024f 	.word	0x2000024f
 8004104:	2000023e 	.word	0x2000023e
 8004108:	20000118 	.word	0x20000118
 800410c:	2000024c 	.word	0x2000024c
 8004110:	20000220 	.word	0x20000220
 8004114:	2000021d 	.word	0x2000021d
 8004118:	2000021e 	.word	0x2000021e
 800411c:	20000000 	.word	0x20000000
 8004120:	20000001 	.word	0x20000001
 8004124:	2000021f 	.word	0x2000021f
 8004128:	20000261 	.word	0x20000261
 800412c:	20000240 	.word	0x20000240
 8004130:	0800d8f8 	.word	0x0800d8f8
 8004134:	0800d90c 	.word	0x0800d90c
 8004138:	20000188 	.word	0x20000188
 800413c:	0800d920 	.word	0x0800d920
 8004140:	0800d92c 	.word	0x0800d92c
			} else if(dilSecim == 1) {
 8004144:	4b94      	ldr	r3, [pc, #592]	; (8004398 <menu+0x32ec>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d109      	bne.n	8004160 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800414c:	4a93      	ldr	r2, [pc, #588]	; (800439c <menu+0x32f0>)
 800414e:	2101      	movs	r1, #1
 8004150:	2001      	movs	r0, #1
 8004152:	f003 fd5b 	bl	8007c0c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004156:	4a92      	ldr	r2, [pc, #584]	; (80043a0 <menu+0x32f4>)
 8004158:	2101      	movs	r1, #1
 800415a:	2002      	movs	r0, #2
 800415c:	f003 fd56 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004160:	2102      	movs	r1, #2
 8004162:	4890      	ldr	r0, [pc, #576]	; (80043a4 <menu+0x32f8>)
 8004164:	f005 f878 	bl	8009258 <HAL_GPIO_ReadPin>
 8004168:	4603      	mov	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d119      	bne.n	80041a2 <menu+0x30f6>
 800416e:	4b8e      	ldr	r3, [pc, #568]	; (80043a8 <menu+0x32fc>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f083 0301 	eor.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <menu+0x30f6>
 800417c:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <menu+0x3300>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004184:	4b8a      	ldr	r3, [pc, #552]	; (80043b0 <menu+0x3304>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <menu+0x3304>)
 800418e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004190:	4b87      	ldr	r3, [pc, #540]	; (80043b0 <menu+0x3304>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d902      	bls.n	800419e <menu+0x30f2>
				calismaSayModu = 0;
 8004198:	4b85      	ldr	r3, [pc, #532]	; (80043b0 <menu+0x3304>)
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800419e:	f000 fb5b 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80041a2:	2104      	movs	r1, #4
 80041a4:	487f      	ldr	r0, [pc, #508]	; (80043a4 <menu+0x32f8>)
 80041a6:	f005 f857 	bl	8009258 <HAL_GPIO_ReadPin>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d119      	bne.n	80041e4 <menu+0x3138>
 80041b0:	4b7d      	ldr	r3, [pc, #500]	; (80043a8 <menu+0x32fc>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <menu+0x3138>
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <menu+0x3300>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80041c6:	4b7a      	ldr	r3, [pc, #488]	; (80043b0 <menu+0x3304>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b78      	ldr	r3, [pc, #480]	; (80043b0 <menu+0x3304>)
 80041d0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80041d2:	4b77      	ldr	r3, [pc, #476]	; (80043b0 <menu+0x3304>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <menu+0x3134>
		   		calismaSayModu = 1;
 80041da:	4b75      	ldr	r3, [pc, #468]	; (80043b0 <menu+0x3304>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041e0:	f000 fb3a 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041e4:	2108      	movs	r1, #8
 80041e6:	486f      	ldr	r0, [pc, #444]	; (80043a4 <menu+0x32f8>)
 80041e8:	f005 f836 	bl	8009258 <HAL_GPIO_ReadPin>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d12b      	bne.n	800424a <menu+0x319e>
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <menu+0x32fc>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f083 0301 	eor.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d024      	beq.n	800424a <menu+0x319e>
			eepromData[32] = 0;
 8004200:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <menu+0x3308>)
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <menu+0x3308>)
 800420a:	2200      	movs	r2, #0
 800420c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800420e:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <menu+0x3308>)
 8004210:	2200      	movs	r2, #0
 8004212:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004214:	4b67      	ldr	r3, [pc, #412]	; (80043b4 <menu+0x3308>)
 8004216:	2200      	movs	r2, #0
 8004218:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <menu+0x3308>)
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004220:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <menu+0x330c>)
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <menu+0x3310>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <menu+0x3314>)
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004232:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <menu+0x3318>)
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <menu+0x331c>)
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <menu+0x3304>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <menu+0x3320>)
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <menu+0x3324>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b1e      	cmp	r3, #30
 8004250:	d16f      	bne.n	8004332 <menu+0x3286>
		calismaSayModu = 0;
 8004252:	4b57      	ldr	r3, [pc, #348]	; (80043b0 <menu+0x3304>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <menu+0x32ec>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004260:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <menu+0x3328>)
 8004262:	2101      	movs	r1, #1
 8004264:	2001      	movs	r0, #1
 8004266:	f003 fcd1 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800426a:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <menu+0x332c>)
 800426c:	2101      	movs	r1, #1
 800426e:	2002      	movs	r0, #2
 8004270:	f003 fccc 	bl	8007c0c <lcd_print>
 8004274:	e00d      	b.n	8004292 <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004276:	4b48      	ldr	r3, [pc, #288]	; (8004398 <menu+0x32ec>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d109      	bne.n	8004292 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800427e:	4a57      	ldr	r2, [pc, #348]	; (80043dc <menu+0x3330>)
 8004280:	2101      	movs	r1, #1
 8004282:	2001      	movs	r0, #1
 8004284:	f003 fcc2 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004288:	4a55      	ldr	r2, [pc, #340]	; (80043e0 <menu+0x3334>)
 800428a:	2101      	movs	r1, #1
 800428c:	2002      	movs	r0, #2
 800428e:	f003 fcbd 	bl	8007c0c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004292:	2102      	movs	r1, #2
 8004294:	4843      	ldr	r0, [pc, #268]	; (80043a4 <menu+0x32f8>)
 8004296:	f004 ffdf 	bl	8009258 <HAL_GPIO_ReadPin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d115      	bne.n	80042cc <menu+0x3220>
 80042a0:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <menu+0x32fc>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <menu+0x3220>
			dilSecim = dilSecim + 1;
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <menu+0x32ec>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b38      	ldr	r3, [pc, #224]	; (8004398 <menu+0x32ec>)
 80042b8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <menu+0x32ec>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d902      	bls.n	80042c8 <menu+0x321c>
				dilSecim = 0;
 80042c2:	4b35      	ldr	r3, [pc, #212]	; (8004398 <menu+0x32ec>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80042c8:	f000 fac6 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042cc:	2104      	movs	r1, #4
 80042ce:	4835      	ldr	r0, [pc, #212]	; (80043a4 <menu+0x32f8>)
 80042d0:	f004 ffc2 	bl	8009258 <HAL_GPIO_ReadPin>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d115      	bne.n	8004306 <menu+0x325a>
 80042da:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <menu+0x32fc>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <menu+0x32ec>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b29      	ldr	r3, [pc, #164]	; (8004398 <menu+0x32ec>)
 80042f2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <menu+0x32ec>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <menu+0x3256>
		   		dilSecim = 1;
 80042fc:	4b26      	ldr	r3, [pc, #152]	; (8004398 <menu+0x32ec>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004302:	f000 faa9 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004306:	2108      	movs	r1, #8
 8004308:	4826      	ldr	r0, [pc, #152]	; (80043a4 <menu+0x32f8>)
 800430a:	f004 ffa5 	bl	8009258 <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10e      	bne.n	8004332 <menu+0x3286>
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <menu+0x32fc>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f083 0301 	eor.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <menu+0x32ec>)
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <menu+0x3308>)
 8004328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <menu+0x3320>)
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <menu+0x3324>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b1f      	cmp	r3, #31
 8004338:	f040 80b7 	bne.w	80044aa <menu+0x33fe>
		calismaSayModu = 0;
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <menu+0x3304>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004342:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <menu+0x3338>)
 8004344:	2101      	movs	r1, #1
 8004346:	2001      	movs	r0, #1
 8004348:	f003 fc60 	bl	8007c0c <lcd_print>

		if(iotMode == 0) {
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <menu+0x333c>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d113      	bne.n	800437c <menu+0x32d0>
			if(dilSecim == 0) {
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <menu+0x32ec>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <menu+0x3340>)
 800435e:	2101      	movs	r1, #1
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fc53 	bl	8007c0c <lcd_print>
 8004366:	e050      	b.n	800440a <menu+0x335e>
			} else if(dilSecim == 1) {
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <menu+0x32ec>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d14c      	bne.n	800440a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <menu+0x3344>)
 8004372:	2101      	movs	r1, #1
 8004374:	2002      	movs	r0, #2
 8004376:	f003 fc49 	bl	8007c0c <lcd_print>
 800437a:	e046      	b.n	800440a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <menu+0x333c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d142      	bne.n	800440a <menu+0x335e>
			if(dilSecim == 0) {
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <menu+0x32ec>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d135      	bne.n	80043f8 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <menu+0x3348>)
 800438e:	2101      	movs	r1, #1
 8004390:	2002      	movs	r0, #2
 8004392:	f003 fc3b 	bl	8007c0c <lcd_print>
 8004396:	e038      	b.n	800440a <menu+0x335e>
 8004398:	20000241 	.word	0x20000241
 800439c:	0800d90c 	.word	0x0800d90c
 80043a0:	0800d940 	.word	0x0800d940
 80043a4:	40010800 	.word	0x40010800
 80043a8:	2000024f 	.word	0x2000024f
 80043ac:	20000261 	.word	0x20000261
 80043b0:	20000240 	.word	0x20000240
 80043b4:	20000118 	.word	0x20000118
 80043b8:	2000021f 	.word	0x2000021f
 80043bc:	20000001 	.word	0x20000001
 80043c0:	20000000 	.word	0x20000000
 80043c4:	2000021e 	.word	0x2000021e
 80043c8:	2000021d 	.word	0x2000021d
 80043cc:	2000024c 	.word	0x2000024c
 80043d0:	20000220 	.word	0x20000220
 80043d4:	0800d954 	.word	0x0800d954
 80043d8:	0800d968 	.word	0x0800d968
 80043dc:	0800d97c 	.word	0x0800d97c
 80043e0:	0800d990 	.word	0x0800d990
 80043e4:	0800d9a4 	.word	0x0800d9a4
 80043e8:	2000023f 	.word	0x2000023f
 80043ec:	0800d1fc 	.word	0x0800d1fc
 80043f0:	0800d210 	.word	0x0800d210
 80043f4:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 80043f8:	4baf      	ldr	r3, [pc, #700]	; (80046b8 <menu+0x360c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d104      	bne.n	800440a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004400:	4aae      	ldr	r2, [pc, #696]	; (80046bc <menu+0x3610>)
 8004402:	2101      	movs	r1, #1
 8004404:	2002      	movs	r0, #2
 8004406:	f003 fc01 	bl	8007c0c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800440a:	2102      	movs	r1, #2
 800440c:	48ac      	ldr	r0, [pc, #688]	; (80046c0 <menu+0x3614>)
 800440e:	f004 ff23 	bl	8009258 <HAL_GPIO_ReadPin>
 8004412:	4603      	mov	r3, r0
 8004414:	2b01      	cmp	r3, #1
 8004416:	d115      	bne.n	8004444 <menu+0x3398>
 8004418:	4baa      	ldr	r3, [pc, #680]	; (80046c4 <menu+0x3618>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	f083 0301 	eor.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00e      	beq.n	8004444 <menu+0x3398>
			iotMode = iotMode + 1;
 8004426:	4ba8      	ldr	r3, [pc, #672]	; (80046c8 <menu+0x361c>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4ba6      	ldr	r3, [pc, #664]	; (80046c8 <menu+0x361c>)
 8004430:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004432:	4ba5      	ldr	r3, [pc, #660]	; (80046c8 <menu+0x361c>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d902      	bls.n	8004440 <menu+0x3394>
				iotMode = 0;
 800443a:	4ba3      	ldr	r3, [pc, #652]	; (80046c8 <menu+0x361c>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004440:	f000 fa0a 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004444:	2104      	movs	r1, #4
 8004446:	489e      	ldr	r0, [pc, #632]	; (80046c0 <menu+0x3614>)
 8004448:	f004 ff06 	bl	8009258 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d115      	bne.n	800447e <menu+0x33d2>
 8004452:	4b9c      	ldr	r3, [pc, #624]	; (80046c4 <menu+0x3618>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <menu+0x33d2>
			iotMode = iotMode - 1;
 8004460:	4b99      	ldr	r3, [pc, #612]	; (80046c8 <menu+0x361c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	4b97      	ldr	r3, [pc, #604]	; (80046c8 <menu+0x361c>)
 800446a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800446c:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <menu+0x361c>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <menu+0x33ce>
		   		iotMode = 1;
 8004474:	4b94      	ldr	r3, [pc, #592]	; (80046c8 <menu+0x361c>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800447a:	f000 f9ed 	bl	8004858 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800447e:	2108      	movs	r1, #8
 8004480:	488f      	ldr	r0, [pc, #572]	; (80046c0 <menu+0x3614>)
 8004482:	f004 fee9 	bl	8009258 <HAL_GPIO_ReadPin>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d10e      	bne.n	80044aa <menu+0x33fe>
 800448c:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <menu+0x3618>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	f083 0301 	eor.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <menu+0x33fe>
			eepromData[48] = iotMode;
 800449a:	4b8b      	ldr	r3, [pc, #556]	; (80046c8 <menu+0x361c>)
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	4b8b      	ldr	r3, [pc, #556]	; (80046cc <menu+0x3620>)
 80044a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80044a4:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <menu+0x3624>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80044aa:	4b8a      	ldr	r3, [pc, #552]	; (80046d4 <menu+0x3628>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d150      	bne.n	8004554 <menu+0x34a8>
		calismaSayModu = 0;
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <menu+0x362c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044b8:	4b7f      	ldr	r3, [pc, #508]	; (80046b8 <menu+0x360c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80044c0:	4a86      	ldr	r2, [pc, #536]	; (80046dc <menu+0x3630>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	2001      	movs	r0, #1
 80044c6:	f003 fba1 	bl	8007c0c <lcd_print>
 80044ca:	e004      	b.n	80044d6 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80044cc:	4a84      	ldr	r2, [pc, #528]	; (80046e0 <menu+0x3634>)
 80044ce:	2101      	movs	r1, #1
 80044d0:	2001      	movs	r0, #1
 80044d2:	f003 fb9b 	bl	8007c0c <lcd_print>
		}
		printMachineCredentials(1);
 80044d6:	2001      	movs	r0, #1
 80044d8:	f003 f94c 	bl	8007774 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044dc:	2102      	movs	r1, #2
 80044de:	4878      	ldr	r0, [pc, #480]	; (80046c0 <menu+0x3614>)
 80044e0:	f004 feba 	bl	8009258 <HAL_GPIO_ReadPin>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d134      	bne.n	8004554 <menu+0x34a8>
 80044ea:	2104      	movs	r1, #4
 80044ec:	4874      	ldr	r0, [pc, #464]	; (80046c0 <menu+0x3614>)
 80044ee:	f004 feb3 	bl	8009258 <HAL_GPIO_ReadPin>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d12d      	bne.n	8004554 <menu+0x34a8>
 80044f8:	4b72      	ldr	r3, [pc, #456]	; (80046c4 <menu+0x3618>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f083 0301 	eor.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d026      	beq.n	8004554 <menu+0x34a8>
			takeMachineID();
 8004506:	f002 fab3 	bl	8006a70 <takeMachineID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800450a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	236e      	movs	r3, #110	; 0x6e
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <menu+0x3620>)
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	236e      	movs	r3, #110	; 0x6e
 800451a:	2200      	movs	r2, #0
 800451c:	21a0      	movs	r1, #160	; 0xa0
 800451e:	4871      	ldr	r0, [pc, #452]	; (80046e4 <menu+0x3638>)
 8004520:	f005 fa4e 	bl	80099c0 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 8004524:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004528:	f004 f8c6 	bl	80086b8 <HAL_Delay>
			memcpy(machineIDInt, &eepromData[idStartPos], 12);
 800452c:	4b6e      	ldr	r3, [pc, #440]	; (80046e8 <menu+0x363c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a66      	ldr	r2, [pc, #408]	; (80046cc <menu+0x3620>)
 8004532:	441a      	add	r2, r3
 8004534:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <menu+0x3640>)
 8004536:	6810      	ldr	r0, [r2, #0]
 8004538:	6851      	ldr	r1, [r2, #4]
 800453a:	6892      	ldr	r2, [r2, #8]
 800453c:	6018      	str	r0, [r3, #0]
 800453e:	6059      	str	r1, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
			convertArrays(1);
 8004542:	2001      	movs	r0, #1
 8004544:	f7fc f932 	bl	80007ac <convertArrays>

			HAL_Delay(250);
 8004548:	20fa      	movs	r0, #250	; 0xfa
 800454a:	f004 f8b5 	bl	80086b8 <HAL_Delay>
			printMachineCredentials(1);
 800454e:	2001      	movs	r0, #1
 8004550:	f003 f910 	bl	8007774 <printMachineCredentials>
		}
	}

	if (menuSayac == 33) {
 8004554:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <menu+0x3628>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b21      	cmp	r3, #33	; 0x21
 800455a:	d14a      	bne.n	80045f2 <menu+0x3546>
		calismaSayModu = 0;
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <menu+0x362c>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004562:	4a63      	ldr	r2, [pc, #396]	; (80046f0 <menu+0x3644>)
 8004564:	2101      	movs	r1, #1
 8004566:	2001      	movs	r0, #1
 8004568:	f003 fb50 	bl	8007c0c <lcd_print>
		printMachineCredentials(2);
 800456c:	2002      	movs	r0, #2
 800456e:	f003 f901 	bl	8007774 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004572:	2102      	movs	r1, #2
 8004574:	4852      	ldr	r0, [pc, #328]	; (80046c0 <menu+0x3614>)
 8004576:	f004 fe6f 	bl	8009258 <HAL_GPIO_ReadPin>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d138      	bne.n	80045f2 <menu+0x3546>
 8004580:	2104      	movs	r1, #4
 8004582:	484f      	ldr	r0, [pc, #316]	; (80046c0 <menu+0x3614>)
 8004584:	f004 fe68 	bl	8009258 <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d131      	bne.n	80045f2 <menu+0x3546>
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <menu+0x3618>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02a      	beq.n	80045f2 <menu+0x3546>
			takeWifiSSID();
 800459c:	f002 fc08 	bl	8006db0 <takeWifiSSID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80045a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	236e      	movs	r3, #110	; 0x6e
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	4b48      	ldr	r3, [pc, #288]	; (80046cc <menu+0x3620>)
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	236e      	movs	r3, #110	; 0x6e
 80045b0:	2200      	movs	r2, #0
 80045b2:	21a0      	movs	r1, #160	; 0xa0
 80045b4:	484b      	ldr	r0, [pc, #300]	; (80046e4 <menu+0x3638>)
 80045b6:	f005 fa03 	bl	80099c0 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80045ba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045be:	f004 f87b 	bl	80086b8 <HAL_Delay>
			memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80045c2:	4b4c      	ldr	r3, [pc, #304]	; (80046f4 <menu+0x3648>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a41      	ldr	r2, [pc, #260]	; (80046cc <menu+0x3620>)
 80045c8:	441a      	add	r2, r3
 80045ca:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <menu+0x364c>)
 80045cc:	6811      	ldr	r1, [r2, #0]
 80045ce:	6855      	ldr	r5, [r2, #4]
 80045d0:	6894      	ldr	r4, [r2, #8]
 80045d2:	68d0      	ldr	r0, [r2, #12]
 80045d4:	6019      	str	r1, [r3, #0]
 80045d6:	605d      	str	r5, [r3, #4]
 80045d8:	609c      	str	r4, [r3, #8]
 80045da:	60d8      	str	r0, [r3, #12]
 80045dc:	6911      	ldr	r1, [r2, #16]
 80045de:	6119      	str	r1, [r3, #16]
			convertArrays(2);
 80045e0:	2002      	movs	r0, #2
 80045e2:	f7fc f8e3 	bl	80007ac <convertArrays>

			HAL_Delay(250);
 80045e6:	20fa      	movs	r0, #250	; 0xfa
 80045e8:	f004 f866 	bl	80086b8 <HAL_Delay>
			printMachineCredentials(2);
 80045ec:	2002      	movs	r0, #2
 80045ee:	f003 f8c1 	bl	8007774 <printMachineCredentials>
		}
	}

	if (menuSayac == 34) {
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <menu+0x3628>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b22      	cmp	r3, #34	; 0x22
 80045f8:	d14a      	bne.n	8004690 <menu+0x35e4>
		calismaSayModu = 0;
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <menu+0x362c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004600:	4a3e      	ldr	r2, [pc, #248]	; (80046fc <menu+0x3650>)
 8004602:	2101      	movs	r1, #1
 8004604:	2001      	movs	r0, #1
 8004606:	f003 fb01 	bl	8007c0c <lcd_print>
		printMachineCredentials(3);
 800460a:	2003      	movs	r0, #3
 800460c:	f003 f8b2 	bl	8007774 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004610:	2102      	movs	r1, #2
 8004612:	482b      	ldr	r0, [pc, #172]	; (80046c0 <menu+0x3614>)
 8004614:	f004 fe20 	bl	8009258 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d138      	bne.n	8004690 <menu+0x35e4>
 800461e:	2104      	movs	r1, #4
 8004620:	4827      	ldr	r0, [pc, #156]	; (80046c0 <menu+0x3614>)
 8004622:	f004 fe19 	bl	8009258 <HAL_GPIO_ReadPin>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d131      	bne.n	8004690 <menu+0x35e4>
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <menu+0x3618>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02a      	beq.n	8004690 <menu+0x35e4>
			takeWifiPass();
 800463a:	f002 fd73 	bl	8007124 <takeWifiPass>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800463e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004642:	9302      	str	r3, [sp, #8]
 8004644:	236e      	movs	r3, #110	; 0x6e
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	4b20      	ldr	r3, [pc, #128]	; (80046cc <menu+0x3620>)
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	236e      	movs	r3, #110	; 0x6e
 800464e:	2200      	movs	r2, #0
 8004650:	21a0      	movs	r1, #160	; 0xa0
 8004652:	4824      	ldr	r0, [pc, #144]	; (80046e4 <menu+0x3638>)
 8004654:	f005 f9b4 	bl	80099c0 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 8004658:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800465c:	f004 f82c 	bl	80086b8 <HAL_Delay>
			memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <menu+0x3654>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <menu+0x3620>)
 8004666:	441a      	add	r2, r3
 8004668:	4b26      	ldr	r3, [pc, #152]	; (8004704 <menu+0x3658>)
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	6855      	ldr	r5, [r2, #4]
 800466e:	6894      	ldr	r4, [r2, #8]
 8004670:	68d0      	ldr	r0, [r2, #12]
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	605d      	str	r5, [r3, #4]
 8004676:	609c      	str	r4, [r3, #8]
 8004678:	60d8      	str	r0, [r3, #12]
 800467a:	6911      	ldr	r1, [r2, #16]
 800467c:	6119      	str	r1, [r3, #16]
			convertArrays(3);
 800467e:	2003      	movs	r0, #3
 8004680:	f7fc f894 	bl	80007ac <convertArrays>

			HAL_Delay(250);
 8004684:	20fa      	movs	r0, #250	; 0xfa
 8004686:	f004 f817 	bl	80086b8 <HAL_Delay>
			printMachineCredentials(3);
 800468a:	2003      	movs	r0, #3
 800468c:	f003 f872 	bl	8007774 <printMachineCredentials>
		}
	}

	if (menuSayac == 35) {
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <menu+0x3628>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b23      	cmp	r3, #35	; 0x23
 8004696:	d17a      	bne.n	800478e <menu+0x36e2>
		if(dilSecim == 0) {
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <menu+0x360c>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d137      	bne.n	8004710 <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <menu+0x365c>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	2001      	movs	r0, #1
 80046a6:	f003 fab1 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <menu+0x3660>)
 80046ac:	2101      	movs	r1, #1
 80046ae:	2002      	movs	r0, #2
 80046b0:	f003 faac 	bl	8007c0c <lcd_print>
 80046b4:	e03a      	b.n	800472c <menu+0x3680>
 80046b6:	bf00      	nop
 80046b8:	20000241 	.word	0x20000241
 80046bc:	0800d270 	.word	0x0800d270
 80046c0:	40010800 	.word	0x40010800
 80046c4:	2000024f 	.word	0x2000024f
 80046c8:	2000023f 	.word	0x2000023f
 80046cc:	20000118 	.word	0x20000118
 80046d0:	2000024c 	.word	0x2000024c
 80046d4:	20000220 	.word	0x20000220
 80046d8:	20000240 	.word	0x20000240
 80046dc:	0800d9b8 	.word	0x0800d9b8
 80046e0:	0800d9cc 	.word	0x0800d9cc
 80046e4:	200003a8 	.word	0x200003a8
 80046e8:	20000004 	.word	0x20000004
 80046ec:	200001c4 	.word	0x200001c4
 80046f0:	0800d9e0 	.word	0x0800d9e0
 80046f4:	20000008 	.word	0x20000008
 80046f8:	200001d0 	.word	0x200001d0
 80046fc:	0800d9f4 	.word	0x0800d9f4
 8004700:	2000000c 	.word	0x2000000c
 8004704:	200001e4 	.word	0x200001e4
 8004708:	0800da08 	.word	0x0800da08
 800470c:	0800da1c 	.word	0x0800da1c
		} else if(dilSecim == 1) {
 8004710:	4b20      	ldr	r3, [pc, #128]	; (8004794 <menu+0x36e8>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d109      	bne.n	800472c <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <menu+0x36ec>)
 800471a:	2101      	movs	r1, #1
 800471c:	2001      	movs	r0, #1
 800471e:	f003 fa75 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <menu+0x36f0>)
 8004724:	2101      	movs	r1, #1
 8004726:	2002      	movs	r0, #2
 8004728:	f003 fa70 	bl	8007c0c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800472c:	2108      	movs	r1, #8
 800472e:	481c      	ldr	r0, [pc, #112]	; (80047a0 <menu+0x36f4>)
 8004730:	f004 fd92 	bl	8009258 <HAL_GPIO_ReadPin>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d129      	bne.n	800478e <menu+0x36e2>
			menuGiris = 0;
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <menu+0x36f8>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004740:	bf00      	nop
 8004742:	4819      	ldr	r0, [pc, #100]	; (80047a8 <menu+0x36fc>)
 8004744:	f005 fbb1 	bl	8009eaa <HAL_I2C_GetError>
 8004748:	4603      	mov	r3, r0
 800474a:	2b04      	cmp	r3, #4
 800474c:	d0f9      	beq.n	8004742 <menu+0x3696>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800474e:	bf00      	nop
 8004750:	4815      	ldr	r0, [pc, #84]	; (80047a8 <menu+0x36fc>)
 8004752:	f005 fb9d 	bl	8009e90 <HAL_I2C_GetState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b20      	cmp	r3, #32
 800475a:	d1f9      	bne.n	8004750 <menu+0x36a4>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800475c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004760:	9302      	str	r3, [sp, #8]
 8004762:	236e      	movs	r3, #110	; 0x6e
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <menu+0x3700>)
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	236e      	movs	r3, #110	; 0x6e
 800476c:	2200      	movs	r2, #0
 800476e:	21a0      	movs	r1, #160	; 0xa0
 8004770:	480d      	ldr	r0, [pc, #52]	; (80047a8 <menu+0x36fc>)
 8004772:	f005 f82b 	bl	80097cc <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004776:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800477a:	f003 ff9d 	bl	80086b8 <HAL_Delay>

			lcd_clear();
 800477e:	f003 fa71 	bl	8007c64 <lcd_clear>
			HAL_Delay(500);
 8004782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004786:	f003 ff97 	bl	80086b8 <HAL_Delay>
			NVIC_SystemReset();
 800478a:	f7fc fc79 	bl	8001080 <__NVIC_SystemReset>
		}
	}
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	bdb0      	pop	{r4, r5, r7, pc}
 8004794:	20000241 	.word	0x20000241
 8004798:	0800da30 	.word	0x0800da30
 800479c:	0800da44 	.word	0x0800da44
 80047a0:	40010800 	.word	0x40010800
 80047a4:	2000023d 	.word	0x2000023d
 80047a8:	200003a8 	.word	0x200003a8
 80047ac:	20000118 	.word	0x20000118

080047b0 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80047c0:	4a22      	ldr	r2, [pc, #136]	; (800484c <lcdUpdate+0x9c>)
 80047c2:	2101      	movs	r1, #1
 80047c4:	2002      	movs	r0, #2
 80047c6:	f003 fa21 	bl	8007c0c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80047ca:	e03b      	b.n	8004844 <lcdUpdate+0x94>
	} else if(y==2) {
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d105      	bne.n	80047de <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <lcdUpdate+0x9c>)
 80047d4:	2102      	movs	r1, #2
 80047d6:	2002      	movs	r0, #2
 80047d8:	f003 fa18 	bl	8007c0c <lcd_print>
}
 80047dc:	e032      	b.n	8004844 <lcdUpdate+0x94>
	} else if(y==3) {
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d105      	bne.n	80047f0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <lcdUpdate+0x9c>)
 80047e6:	2103      	movs	r1, #3
 80047e8:	2002      	movs	r0, #2
 80047ea:	f003 fa0f 	bl	8007c0c <lcd_print>
}
 80047ee:	e029      	b.n	8004844 <lcdUpdate+0x94>
	} else if(y==4) {
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d105      	bne.n	8004802 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <lcdUpdate+0x9c>)
 80047f8:	2104      	movs	r1, #4
 80047fa:	2002      	movs	r0, #2
 80047fc:	f003 fa06 	bl	8007c0c <lcd_print>
}
 8004800:	e020      	b.n	8004844 <lcdUpdate+0x94>
	} else if(y==5) {
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d105      	bne.n	8004814 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <lcdUpdate+0x9c>)
 800480a:	2105      	movs	r1, #5
 800480c:	2002      	movs	r0, #2
 800480e:	f003 f9fd 	bl	8007c0c <lcd_print>
}
 8004812:	e017      	b.n	8004844 <lcdUpdate+0x94>
	} else if(y==6) {
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	2b06      	cmp	r3, #6
 8004818:	d105      	bne.n	8004826 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <lcdUpdate+0x9c>)
 800481c:	2106      	movs	r1, #6
 800481e:	2002      	movs	r0, #2
 8004820:	f003 f9f4 	bl	8007c0c <lcd_print>
}
 8004824:	e00e      	b.n	8004844 <lcdUpdate+0x94>
	} else if (y==7) {
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2b07      	cmp	r3, #7
 800482a:	d10b      	bne.n	8004844 <lcdUpdate+0x94>
		lcd_clear();
 800482c:	f003 fa1a 	bl	8007c64 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <lcdUpdate+0xa0>)
 8004832:	2104      	movs	r1, #4
 8004834:	2001      	movs	r0, #1
 8004836:	f003 f9e9 	bl	8007c0c <lcd_print>
		lcd_print(2, 6, "RUN");
 800483a:	4a06      	ldr	r2, [pc, #24]	; (8004854 <lcdUpdate+0xa4>)
 800483c:	2106      	movs	r1, #6
 800483e:	2002      	movs	r0, #2
 8004840:	f003 f9e4 	bl	8007c0c <lcd_print>
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0800da58 	.word	0x0800da58
 8004850:	0800da5c 	.word	0x0800da5c
 8004854:	0800da64 	.word	0x0800da64

08004858 <bekle>:

void bekle() {
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
	timer1=millis;
 800485c:	4b47      	ldr	r3, [pc, #284]	; (800497c <bekle+0x124>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a47      	ldr	r2, [pc, #284]	; (8004980 <bekle+0x128>)
 8004862:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004864:	e002      	b.n	800486c <bekle+0x14>
    	butonKontrol = 1;
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <bekle+0x12c>)
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800486c:	2101      	movs	r1, #1
 800486e:	4846      	ldr	r0, [pc, #280]	; (8004988 <bekle+0x130>)
 8004870:	f004 fcf2 	bl	8009258 <HAL_GPIO_ReadPin>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d109      	bne.n	800488e <bekle+0x36>
 800487a:	4b40      	ldr	r3, [pc, #256]	; (800497c <bekle+0x124>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b40      	ldr	r3, [pc, #256]	; (8004980 <bekle+0x128>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d0ef      	beq.n	8004866 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004886:	e002      	b.n	800488e <bekle+0x36>
    	butonKontrol = 1;
 8004888:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <bekle+0x12c>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800488e:	2108      	movs	r1, #8
 8004890:	483e      	ldr	r0, [pc, #248]	; (800498c <bekle+0x134>)
 8004892:	f004 fce1 	bl	8009258 <HAL_GPIO_ReadPin>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d109      	bne.n	80048b0 <bekle+0x58>
 800489c:	4b37      	ldr	r3, [pc, #220]	; (800497c <bekle+0x124>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b37      	ldr	r3, [pc, #220]	; (8004980 <bekle+0x128>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d0ef      	beq.n	8004888 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048a8:	e002      	b.n	80048b0 <bekle+0x58>
    	butonKontrol = 1;
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <bekle+0x12c>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048b0:	2102      	movs	r1, #2
 80048b2:	4835      	ldr	r0, [pc, #212]	; (8004988 <bekle+0x130>)
 80048b4:	f004 fcd0 	bl	8009258 <HAL_GPIO_ReadPin>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d109      	bne.n	80048d2 <bekle+0x7a>
 80048be:	4b2f      	ldr	r3, [pc, #188]	; (800497c <bekle+0x124>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <bekle+0x128>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d0ef      	beq.n	80048aa <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ca:	e002      	b.n	80048d2 <bekle+0x7a>
    	butonKontrol = 1;
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <bekle+0x12c>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048d2:	2104      	movs	r1, #4
 80048d4:	482c      	ldr	r0, [pc, #176]	; (8004988 <bekle+0x130>)
 80048d6:	f004 fcbf 	bl	8009258 <HAL_GPIO_ReadPin>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d109      	bne.n	80048f4 <bekle+0x9c>
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <bekle+0x124>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b26      	ldr	r3, [pc, #152]	; (8004980 <bekle+0x128>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d0ef      	beq.n	80048cc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ec:	e002      	b.n	80048f4 <bekle+0x9c>
    	butonKontrol = 1;
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <bekle+0x12c>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048f4:	2108      	movs	r1, #8
 80048f6:	4824      	ldr	r0, [pc, #144]	; (8004988 <bekle+0x130>)
 80048f8:	f004 fcae 	bl	8009258 <HAL_GPIO_ReadPin>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d109      	bne.n	8004916 <bekle+0xbe>
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <bekle+0x124>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <bekle+0x128>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d0ef      	beq.n	80048ee <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800490e:	e002      	b.n	8004916 <bekle+0xbe>
    	butonKontrol = 1;
 8004910:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <bekle+0x12c>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	481c      	ldr	r0, [pc, #112]	; (800498c <bekle+0x134>)
 800491a:	f004 fc9d 	bl	8009258 <HAL_GPIO_ReadPin>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <bekle+0xe0>
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <bekle+0x124>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <bekle+0x128>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0ef      	beq.n	8004910 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004930:	e002      	b.n	8004938 <bekle+0xe0>
    	butonKontrol = 1;
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <bekle+0x12c>)
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800493c:	4813      	ldr	r0, [pc, #76]	; (800498c <bekle+0x134>)
 800493e:	f004 fc8b 	bl	8009258 <HAL_GPIO_ReadPin>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <bekle+0x104>
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <bekle+0x124>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <bekle+0x128>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d0ee      	beq.n	8004932 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004954:	e002      	b.n	800495c <bekle+0x104>
    	butonKontrol = 1;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <bekle+0x12c>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800495c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004960:	480a      	ldr	r0, [pc, #40]	; (800498c <bekle+0x134>)
 8004962:	f004 fc79 	bl	8009258 <HAL_GPIO_ReadPin>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <bekle+0x120>
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <bekle+0x124>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <bekle+0x128>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d0ee      	beq.n	8004956 <bekle+0xfe>
    }

}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200001fc 	.word	0x200001fc
 8004980:	20000204 	.word	0x20000204
 8004984:	2000024f 	.word	0x2000024f
 8004988:	40010800 	.word	0x40010800
 800498c:	40011000 	.word	0x40011000

08004990 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <checkLCDBacklight+0x24>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <checkLCDBacklight+0x28>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b3b      	cmp	r3, #59	; 0x3b
 80049a0:	d903      	bls.n	80049aa <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f003 f97e 	bl	8007ca4 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80049a8:	e002      	b.n	80049b0 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80049aa:	2001      	movs	r0, #1
 80049ac:	f003 f97a 	bl	8007ca4 <lcd_backlight>
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200001fc 	.word	0x200001fc
 80049b8:	20000218 	.word	0x20000218

080049bc <checkBasincSalteri>:

void checkBasincSalteri() {
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <checkBasincSalteri+0x54>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <checkBasincSalteri+0x12>
		basincVar=1;
 80049c8:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <checkBasincSalteri+0x58>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <checkBasincSalteri+0x54>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d119      	bne.n	8004a0a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80049d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049da:	480f      	ldr	r0, [pc, #60]	; (8004a18 <checkBasincSalteri+0x5c>)
 80049dc:	f004 fc3c 	bl	8009258 <HAL_GPIO_ReadPin>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <checkBasincSalteri+0x60>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <checkBasincSalteri+0x64>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d90a      	bls.n	8004a0a <checkBasincSalteri+0x4e>
				basincVar=1;
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <checkBasincSalteri+0x58>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80049fa:	e006      	b.n	8004a0a <checkBasincSalteri+0x4e>
			timer5=millis;
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <checkBasincSalteri+0x60>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <checkBasincSalteri+0x64>)
 8004a02:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <checkBasincSalteri+0x58>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000227 	.word	0x20000227
 8004a14:	20000223 	.word	0x20000223
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	200001fc 	.word	0x200001fc
 8004a20:	20000214 	.word	0x20000214

08004a24 <checkBasGonder>:

void checkBasGonder() {
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a28:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <checkBasGonder+0x74>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10b      	bne.n	8004a48 <checkBasGonder+0x24>
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <checkBasGonder+0x78>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <checkBasGonder+0x24>
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <checkBasGonder+0x7c>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <checkBasGonder+0x80>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e009      	b.n	8004a5c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <checkBasGonder+0x78>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <checkBasGonder+0x80>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <checkBasGonder+0x74>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10b      	bne.n	8004a7c <checkBasGonder+0x58>
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <checkBasGonder+0x84>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <checkBasGonder+0x58>
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <checkBasGonder+0x7c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <checkBasGonder+0x88>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004a7a:	e009      	b.n	8004a90 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <checkBasGonder+0x84>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f083 0301 	eor.w	r3, r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <checkBasGonder+0x88>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20000221 	.word	0x20000221
 8004a9c:	20000255 	.word	0x20000255
 8004aa0:	2000022f 	.word	0x2000022f
 8004aa4:	2000025c 	.word	0x2000025c
 8004aa8:	20000258 	.word	0x20000258
 8004aac:	2000025d 	.word	0x2000025d

08004ab0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <checkKapiSecimleri+0x98>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004ac2:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <checkKapiSecimleri+0x98>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10e      	bne.n	8004ae8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ace:	4820      	ldr	r0, [pc, #128]	; (8004b50 <checkKapiSecimleri+0xa0>)
 8004ad0:	f004 fbc2 	bl	8009258 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e002      	b.n	8004ae8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <checkKapiSecimleri+0x98>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d10e      	bne.n	8004b0e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004af4:	4816      	ldr	r0, [pc, #88]	; (8004b50 <checkKapiSecimleri+0xa0>)
 8004af6:	f004 fbaf 	bl	8009258 <HAL_GPIO_ReadPin>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <checkKapiSecimleri+0x98>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d116      	bne.n	8004b44 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b1a:	480d      	ldr	r0, [pc, #52]	; (8004b50 <checkKapiSecimleri+0xa0>)
 8004b1c:	f004 fb9c 	bl	8009258 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <checkKapiSecimleri+0x8e>
 8004b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b2a:	4809      	ldr	r0, [pc, #36]	; (8004b50 <checkKapiSecimleri+0xa0>)
 8004b2c:	f004 fb94 	bl	8009258 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004b3c:	e002      	b.n	8004b44 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004b3e:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <checkKapiSecimleri+0x9c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000228 	.word	0x20000228
 8004b4c:	20000273 	.word	0x20000273
 8004b50:	40010800 	.word	0x40010800

08004b54 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004b58:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <checkAktifCalisma+0x190>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f041 833e 	bne.w	80061de <checkAktifCalisma+0x168a>
 8004b62:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <checkAktifCalisma+0x194>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f041 8339 	bne.w	80061de <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004b6c:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <checkAktifCalisma+0x198>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11a      	bne.n	8004baa <checkAktifCalisma+0x56>
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <checkAktifCalisma+0x19c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <checkAktifCalisma+0x56>
 8004b7c:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <checkAktifCalisma+0x1a0>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <checkAktifCalisma+0x46>
 8004b84:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <checkAktifCalisma+0x1a4>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f083 0301 	eor.w	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <checkAktifCalisma+0x46>
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <checkAktifCalisma+0x1a8>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d007      	beq.n	8004baa <checkAktifCalisma+0x56>
 8004b9a:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <checkAktifCalisma+0x1ac>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <checkAktifCalisma+0x80>
 8004ba2:	4b58      	ldr	r3, [pc, #352]	; (8004d04 <checkAktifCalisma+0x1b0>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d114      	bne.n	8004bd4 <checkAktifCalisma+0x80>
 8004baa:	4b57      	ldr	r3, [pc, #348]	; (8004d08 <checkAktifCalisma+0x1b4>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <checkAktifCalisma+0x80>
 8004bb2:	4b56      	ldr	r3, [pc, #344]	; (8004d0c <checkAktifCalisma+0x1b8>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bc0:	4853      	ldr	r0, [pc, #332]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004bc2:	f004 fb60 	bl	8009286 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004bc6:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <checkAktifCalisma+0x1c0>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004bcc:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <checkAktifCalisma+0x1c4>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e008      	b.n	8004be6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bda:	484d      	ldr	r0, [pc, #308]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004bdc:	f004 fb53 	bl	8009286 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004be0:	4b4c      	ldr	r3, [pc, #304]	; (8004d14 <checkAktifCalisma+0x1c0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004be6:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <checkAktifCalisma+0x194>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d160      	bne.n	8004cb0 <checkAktifCalisma+0x15c>
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <checkAktifCalisma+0x1b4>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d05c      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
 8004bf6:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <checkAktifCalisma+0x1b8>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d058      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c02:	4843      	ldr	r0, [pc, #268]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004c04:	f004 fb28 	bl	8009258 <HAL_GPIO_ReadPin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <checkAktifCalisma+0xc2>
 8004c0e:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <checkAktifCalisma+0x1c8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d04c      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c16:	2102      	movs	r1, #2
 8004c18:	4841      	ldr	r0, [pc, #260]	; (8004d20 <checkAktifCalisma+0x1cc>)
 8004c1a:	f004 fb1d 	bl	8009258 <HAL_GPIO_ReadPin>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d145      	bne.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004c24:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <checkAktifCalisma+0x1d0>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d041      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c30:	4837      	ldr	r0, [pc, #220]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004c32:	f004 fb11 	bl	8009258 <HAL_GPIO_ReadPin>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10e      	bne.n	8004c5a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c40:	4833      	ldr	r0, [pc, #204]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004c42:	f004 fb09 	bl	8009258 <HAL_GPIO_ReadPin>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004c4c:	2140      	movs	r1, #64	; 0x40
 8004c4e:	4834      	ldr	r0, [pc, #208]	; (8004d20 <checkAktifCalisma+0x1cc>)
 8004c50:	f004 fb02 	bl	8009258 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d003      	beq.n	8004c62 <checkAktifCalisma+0x10e>
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <checkAktifCalisma+0x198>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d026      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <checkAktifCalisma+0x1a0>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f083 0301 	eor.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01f      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <checkAktifCalisma+0x19c>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f083 0301 	eor.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <checkAktifCalisma+0x1ac>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f083 0301 	eor.w	r3, r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d011      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004c8c:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <checkAktifCalisma+0x1d4>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <checkAktifCalisma+0x1d8>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <checkAktifCalisma+0x198>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e002      	b.n	8004cb6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <checkAktifCalisma+0x198>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <checkAktifCalisma+0x198>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d03a      	beq.n	8004d34 <checkAktifCalisma+0x1e0>
 8004cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cc2:	4817      	ldr	r0, [pc, #92]	; (8004d20 <checkAktifCalisma+0x1cc>)
 8004cc4:	f004 fac8 	bl	8009258 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d132      	bne.n	8004d34 <checkAktifCalisma+0x1e0>
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <checkAktifCalisma+0x1dc>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02e      	beq.n	8004d34 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cdc:	480c      	ldr	r0, [pc, #48]	; (8004d10 <checkAktifCalisma+0x1bc>)
 8004cde:	f004 fad2 	bl	8009286 <HAL_GPIO_WritePin>
 8004ce2:	e02d      	b.n	8004d40 <checkAktifCalisma+0x1ec>
 8004ce4:	2000023e 	.word	0x2000023e
 8004ce8:	2000023d 	.word	0x2000023d
 8004cec:	20000255 	.word	0x20000255
 8004cf0:	20000256 	.word	0x20000256
 8004cf4:	20000258 	.word	0x20000258
 8004cf8:	20000250 	.word	0x20000250
 8004cfc:	20000233 	.word	0x20000233
 8004d00:	20000257 	.word	0x20000257
 8004d04:	20000232 	.word	0x20000232
 8004d08:	20000272 	.word	0x20000272
 8004d0c:	20000273 	.word	0x20000273
 8004d10:	40010c00 	.word	0x40010c00
 8004d14:	20000274 	.word	0x20000274
 8004d18:	2000025f 	.word	0x2000025f
 8004d1c:	2000025c 	.word	0x2000025c
 8004d20:	40011000 	.word	0x40011000
 8004d24:	20000223 	.word	0x20000223
 8004d28:	2000025a 	.word	0x2000025a
 8004d2c:	2000025b 	.word	0x2000025b
 8004d30:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d3a:	4860      	ldr	r0, [pc, #384]	; (8004ebc <checkAktifCalisma+0x368>)
 8004d3c:	f004 faa3 	bl	8009286 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004d40:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <checkAktifCalisma+0x36c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <checkAktifCalisma+0x21c>
 8004d48:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <checkAktifCalisma+0x370>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d007      	beq.n	8004d60 <checkAktifCalisma+0x20c>
 8004d50:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <checkAktifCalisma+0x370>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d003      	beq.n	8004d60 <checkAktifCalisma+0x20c>
 8004d58:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <checkAktifCalisma+0x374>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d107      	bne.n	8004d70 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004d60:	2201      	movs	r2, #1
 8004d62:	2104      	movs	r1, #4
 8004d64:	4855      	ldr	r0, [pc, #340]	; (8004ebc <checkAktifCalisma+0x368>)
 8004d66:	f004 fa8e 	bl	8009286 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004d6a:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <checkAktifCalisma+0x378>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004d70:	4b56      	ldr	r3, [pc, #344]	; (8004ecc <checkAktifCalisma+0x378>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02f      	beq.n	8004dd8 <checkAktifCalisma+0x284>
 8004d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d7c:	484f      	ldr	r0, [pc, #316]	; (8004ebc <checkAktifCalisma+0x368>)
 8004d7e:	f004 fa6b 	bl	8009258 <HAL_GPIO_ReadPin>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d106      	bne.n	8004d96 <checkAktifCalisma+0x242>
 8004d88:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <checkAktifCalisma+0x37c>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f083 0301 	eor.w	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <checkAktifCalisma+0x250>
 8004d96:	2102      	movs	r1, #2
 8004d98:	484e      	ldr	r0, [pc, #312]	; (8004ed4 <checkAktifCalisma+0x380>)
 8004d9a:	f004 fa5d 	bl	8009258 <HAL_GPIO_ReadPin>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <checkAktifCalisma+0x284>
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <checkAktifCalisma+0x384>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <checkAktifCalisma+0x284>
 8004dac:	4b4b      	ldr	r3, [pc, #300]	; (8004edc <checkAktifCalisma+0x388>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <checkAktifCalisma+0x284>
 8004db4:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <checkAktifCalisma+0x38c>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <checkAktifCalisma+0x284>
 8004dbc:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <checkAktifCalisma+0x390>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f083 0301 	eor.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d006      	beq.n	8004dd8 <checkAktifCalisma+0x284>
			timer2=millis;
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <checkAktifCalisma+0x394>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a47      	ldr	r2, [pc, #284]	; (8004eec <checkAktifCalisma+0x398>)
 8004dd0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004dd2:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <checkAktifCalisma+0x390>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <checkAktifCalisma+0x394>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b43      	ldr	r3, [pc, #268]	; (8004eec <checkAktifCalisma+0x398>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	4a43      	ldr	r2, [pc, #268]	; (8004ef0 <checkAktifCalisma+0x39c>)
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d303      	bcc.n	8004df2 <checkAktifCalisma+0x29e>
 8004dea:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <checkAktifCalisma+0x390>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d111      	bne.n	8004e16 <checkAktifCalisma+0x2c2>
 8004df2:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <checkAktifCalisma+0x384>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f083 0301 	eor.w	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <checkAktifCalisma+0x2c2>
 8004e00:	4b36      	ldr	r3, [pc, #216]	; (8004edc <checkAktifCalisma+0x388>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <checkAktifCalisma+0x2c2>
 8004e0e:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <checkAktifCalisma+0x38c>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2104      	movs	r1, #4
 8004e1a:	4828      	ldr	r0, [pc, #160]	; (8004ebc <checkAktifCalisma+0x368>)
 8004e1c:	f004 fa33 	bl	8009286 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004e20:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <checkAktifCalisma+0x378>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <checkAktifCalisma+0x390>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <checkAktifCalisma+0x3a0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004e34:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <checkAktifCalisma+0x3a4>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <checkAktifCalisma+0x3a0>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d116      	bne.n	8004e70 <checkAktifCalisma+0x31c>
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <checkAktifCalisma+0x3a8>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d112      	bne.n	8004e70 <checkAktifCalisma+0x31c>
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4821      	ldr	r0, [pc, #132]	; (8004ed4 <checkAktifCalisma+0x380>)
 8004e4e:	f004 fa03 	bl	8009258 <HAL_GPIO_ReadPin>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <checkAktifCalisma+0x31c>
 8004e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e5c:	4817      	ldr	r0, [pc, #92]	; (8004ebc <checkAktifCalisma+0x368>)
 8004e5e:	f004 f9fb 	bl	8009258 <HAL_GPIO_ReadPin>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004e68:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <checkAktifCalisma+0x3a4>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e011      	b.n	8004e94 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004e70:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <checkAktifCalisma+0x3a0>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10d      	bne.n	8004e94 <checkAktifCalisma+0x340>
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4816      	ldr	r0, [pc, #88]	; (8004ed4 <checkAktifCalisma+0x380>)
 8004e7c:	f004 f9ec 	bl	8009258 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d106      	bne.n	8004e94 <checkAktifCalisma+0x340>
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <checkAktifCalisma+0x3a8>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <checkAktifCalisma+0x3a4>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004e94:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <checkAktifCalisma+0x3a0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d134      	bne.n	8004f06 <checkAktifCalisma+0x3b2>
 8004e9c:	4b17      	ldr	r3, [pc, #92]	; (8004efc <checkAktifCalisma+0x3a8>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d130      	bne.n	8004f06 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	480b      	ldr	r0, [pc, #44]	; (8004ed4 <checkAktifCalisma+0x380>)
 8004ea8:	f004 f9d6 	bl	8009258 <HAL_GPIO_ReadPin>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d126      	bne.n	8004f00 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <checkAktifCalisma+0x3a4>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e025      	b.n	8004f06 <checkAktifCalisma+0x3b2>
 8004eba:	bf00      	nop
 8004ebc:	40010c00 	.word	0x40010c00
 8004ec0:	20000255 	.word	0x20000255
 8004ec4:	2000022f 	.word	0x2000022f
 8004ec8:	20000233 	.word	0x20000233
 8004ecc:	20000259 	.word	0x20000259
 8004ed0:	2000025c 	.word	0x2000025c
 8004ed4:	40011000 	.word	0x40011000
 8004ed8:	20000272 	.word	0x20000272
 8004edc:	20000273 	.word	0x20000273
 8004ee0:	20000223 	.word	0x20000223
 8004ee4:	20000251 	.word	0x20000251
 8004ee8:	200001fc 	.word	0x200001fc
 8004eec:	20000208 	.word	0x20000208
 8004ef0:	20000234 	.word	0x20000234
 8004ef4:	20000224 	.word	0x20000224
 8004ef8:	20000277 	.word	0x20000277
 8004efc:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8004f00:	4b7f      	ldr	r3, [pc, #508]	; (8005100 <checkAktifCalisma+0x5ac>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004f06:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <checkAktifCalisma+0x5b0>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d17c      	bne.n	8005008 <checkAktifCalisma+0x4b4>
 8004f0e:	4b7e      	ldr	r3, [pc, #504]	; (8005108 <checkAktifCalisma+0x5b4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d078      	beq.n	8005008 <checkAktifCalisma+0x4b4>
 8004f16:	4b7d      	ldr	r3, [pc, #500]	; (800510c <checkAktifCalisma+0x5b8>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d074      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f22:	487b      	ldr	r0, [pc, #492]	; (8005110 <checkAktifCalisma+0x5bc>)
 8004f24:	f004 f998 	bl	8009258 <HAL_GPIO_ReadPin>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <checkAktifCalisma+0x3e2>
 8004f2e:	4b79      	ldr	r3, [pc, #484]	; (8005114 <checkAktifCalisma+0x5c0>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d068      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004f36:	4b72      	ldr	r3, [pc, #456]	; (8005100 <checkAktifCalisma+0x5ac>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d064      	beq.n	8005008 <checkAktifCalisma+0x4b4>
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <checkAktifCalisma+0x5c4>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d05d      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	4873      	ldr	r0, [pc, #460]	; (800511c <checkAktifCalisma+0x5c8>)
 8004f50:	f004 f982 	bl	8009258 <HAL_GPIO_ReadPin>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <checkAktifCalisma+0x40e>
 8004f5a:	4b71      	ldr	r3, [pc, #452]	; (8005120 <checkAktifCalisma+0x5cc>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d152      	bne.n	8005008 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f66:	486a      	ldr	r0, [pc, #424]	; (8005110 <checkAktifCalisma+0x5bc>)
 8004f68:	f004 f976 	bl	8009258 <HAL_GPIO_ReadPin>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10e      	bne.n	8004f90 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f76:	4866      	ldr	r0, [pc, #408]	; (8005110 <checkAktifCalisma+0x5bc>)
 8004f78:	f004 f96e 	bl	8009258 <HAL_GPIO_ReadPin>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d106      	bne.n	8004f90 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	4865      	ldr	r0, [pc, #404]	; (800511c <checkAktifCalisma+0x5c8>)
 8004f86:	f004 f967 	bl	8009258 <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d003      	beq.n	8004f98 <checkAktifCalisma+0x444>
 8004f90:	4b64      	ldr	r3, [pc, #400]	; (8005124 <checkAktifCalisma+0x5d0>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d037      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004f98:	4b63      	ldr	r3, [pc, #396]	; (8005128 <checkAktifCalisma+0x5d4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f083 0301 	eor.w	r3, r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d030      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004fa6:	4b61      	ldr	r3, [pc, #388]	; (800512c <checkAktifCalisma+0x5d8>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f083 0301 	eor.w	r3, r3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d029      	beq.n	8005008 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	; (8005130 <checkAktifCalisma+0x5dc>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f083 0301 	eor.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d022      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <checkAktifCalisma+0x5e0>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	f083 0301 	eor.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <checkAktifCalisma+0x5e4>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f083 0301 	eor.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8004fde:	4b57      	ldr	r3, [pc, #348]	; (800513c <checkAktifCalisma+0x5e8>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004fec:	2201      	movs	r2, #1
 8004fee:	2102      	movs	r1, #2
 8004ff0:	4847      	ldr	r0, [pc, #284]	; (8005110 <checkAktifCalisma+0x5bc>)
 8004ff2:	f004 f948 	bl	8009286 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004ff6:	4b4b      	ldr	r3, [pc, #300]	; (8005124 <checkAktifCalisma+0x5d0>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <checkAktifCalisma+0x5ec>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005002:	4b50      	ldr	r3, [pc, #320]	; (8005144 <checkAktifCalisma+0x5f0>)
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005008:	4b46      	ldr	r3, [pc, #280]	; (8005124 <checkAktifCalisma+0x5d0>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d033      	beq.n	8005078 <checkAktifCalisma+0x524>
 8005010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005014:	483e      	ldr	r0, [pc, #248]	; (8005110 <checkAktifCalisma+0x5bc>)
 8005016:	f004 f91f 	bl	8009258 <HAL_GPIO_ReadPin>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <checkAktifCalisma+0x4da>
 8005020:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <checkAktifCalisma+0x5c0>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f083 0301 	eor.w	r3, r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <checkAktifCalisma+0x4f0>
 800502e:	2104      	movs	r1, #4
 8005030:	483a      	ldr	r0, [pc, #232]	; (800511c <checkAktifCalisma+0x5c8>)
 8005032:	f004 f911 	bl	8009258 <HAL_GPIO_ReadPin>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d11d      	bne.n	8005078 <checkAktifCalisma+0x524>
 800503c:	4b38      	ldr	r3, [pc, #224]	; (8005120 <checkAktifCalisma+0x5cc>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <checkAktifCalisma+0x524>
 8005044:	4b30      	ldr	r3, [pc, #192]	; (8005108 <checkAktifCalisma+0x5b4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <checkAktifCalisma+0x524>
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <checkAktifCalisma+0x5b8>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d011      	beq.n	8005078 <checkAktifCalisma+0x524>
 8005054:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <checkAktifCalisma+0x5ac>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <checkAktifCalisma+0x524>
 800505c:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <checkAktifCalisma+0x5f4>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f083 0301 	eor.w	r3, r3, #1
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <checkAktifCalisma+0x524>
			timer2=millis;
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <checkAktifCalisma+0x5f8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a38      	ldr	r2, [pc, #224]	; (8005150 <checkAktifCalisma+0x5fc>)
 8005070:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <checkAktifCalisma+0x5f4>)
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005078:	4b34      	ldr	r3, [pc, #208]	; (800514c <checkAktifCalisma+0x5f8>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b34      	ldr	r3, [pc, #208]	; (8005150 <checkAktifCalisma+0x5fc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a34      	ldr	r2, [pc, #208]	; (8005154 <checkAktifCalisma+0x600>)
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	4293      	cmp	r3, r2
 8005088:	d303      	bcc.n	8005092 <checkAktifCalisma+0x53e>
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <checkAktifCalisma+0x5f4>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d114      	bne.n	80050bc <checkAktifCalisma+0x568>
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <checkAktifCalisma+0x5b4>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10d      	bne.n	80050bc <checkAktifCalisma+0x568>
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <checkAktifCalisma+0x5b8>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f083 0301 	eor.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <checkAktifCalisma+0x568>
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <checkAktifCalisma+0x5ac>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f083 0301 	eor.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80050bc:	2200      	movs	r2, #0
 80050be:	2102      	movs	r1, #2
 80050c0:	4813      	ldr	r0, [pc, #76]	; (8005110 <checkAktifCalisma+0x5bc>)
 80050c2:	f004 f8e0 	bl	8009286 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80050c6:	4b17      	ldr	r3, [pc, #92]	; (8005124 <checkAktifCalisma+0x5d0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <checkAktifCalisma+0x5f4>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <checkAktifCalisma+0x5d0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d040      	beq.n	800515c <checkAktifCalisma+0x608>
 80050da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050de:	480f      	ldr	r0, [pc, #60]	; (800511c <checkAktifCalisma+0x5c8>)
 80050e0:	f004 f8ba 	bl	8009258 <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d138      	bne.n	800515c <checkAktifCalisma+0x608>
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <checkAktifCalisma+0x604>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d034      	beq.n	800515c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80050f2:	2201      	movs	r2, #1
 80050f4:	2101      	movs	r1, #1
 80050f6:	4806      	ldr	r0, [pc, #24]	; (8005110 <checkAktifCalisma+0x5bc>)
 80050f8:	f004 f8c5 	bl	8009286 <HAL_GPIO_WritePin>
 80050fc:	e033      	b.n	8005166 <checkAktifCalisma+0x612>
 80050fe:	bf00      	nop
 8005100:	20000277 	.word	0x20000277
 8005104:	2000023d 	.word	0x2000023d
 8005108:	20000272 	.word	0x20000272
 800510c:	20000273 	.word	0x20000273
 8005110:	40010c00 	.word	0x40010c00
 8005114:	2000025d 	.word	0x2000025d
 8005118:	20000271 	.word	0x20000271
 800511c:	40011000 	.word	0x40011000
 8005120:	20000226 	.word	0x20000226
 8005124:	20000258 	.word	0x20000258
 8005128:	20000255 	.word	0x20000255
 800512c:	20000259 	.word	0x20000259
 8005130:	20000256 	.word	0x20000256
 8005134:	20000257 	.word	0x20000257
 8005138:	2000025a 	.word	0x2000025a
 800513c:	2000025b 	.word	0x2000025b
 8005140:	20000260 	.word	0x20000260
 8005144:	20000281 	.word	0x20000281
 8005148:	20000250 	.word	0x20000250
 800514c:	200001fc 	.word	0x200001fc
 8005150:	20000208 	.word	0x20000208
 8005154:	20000235 	.word	0x20000235
 8005158:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800515c:	2200      	movs	r2, #0
 800515e:	2101      	movs	r1, #1
 8005160:	4836      	ldr	r0, [pc, #216]	; (800523c <checkAktifCalisma+0x6e8>)
 8005162:	f004 f890 	bl	8009286 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005166:	4b36      	ldr	r3, [pc, #216]	; (8005240 <checkAktifCalisma+0x6ec>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 8080 	bne.w	8005270 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <checkAktifCalisma+0x6f0>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d003      	beq.n	8005180 <checkAktifCalisma+0x62c>
 8005178:	4b32      	ldr	r3, [pc, #200]	; (8005244 <checkAktifCalisma+0x6f0>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d177      	bne.n	8005270 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <checkAktifCalisma+0x6f4>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d073      	beq.n	8005270 <checkAktifCalisma+0x71c>
 8005188:	4b30      	ldr	r3, [pc, #192]	; (800524c <checkAktifCalisma+0x6f8>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d06f      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005194:	4829      	ldr	r0, [pc, #164]	; (800523c <checkAktifCalisma+0x6e8>)
 8005196:	f004 f85f 	bl	8009258 <HAL_GPIO_ReadPin>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d167      	bne.n	8005270 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80051a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051a4:	482a      	ldr	r0, [pc, #168]	; (8005250 <checkAktifCalisma+0x6fc>)
 80051a6:	f004 f857 	bl	8009258 <HAL_GPIO_ReadPin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <checkAktifCalisma+0x664>
 80051b0:	4b28      	ldr	r3, [pc, #160]	; (8005254 <checkAktifCalisma+0x700>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d15b      	bne.n	8005270 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	4825      	ldr	r0, [pc, #148]	; (8005250 <checkAktifCalisma+0x6fc>)
 80051bc:	f004 f84c 	bl	8009258 <HAL_GPIO_ReadPin>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10f      	bne.n	80051e6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ca:	481c      	ldr	r0, [pc, #112]	; (800523c <checkAktifCalisma+0x6e8>)
 80051cc:	f004 f844 	bl	8009258 <HAL_GPIO_ReadPin>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80051d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051da:	4818      	ldr	r0, [pc, #96]	; (800523c <checkAktifCalisma+0x6e8>)
 80051dc:	f004 f83c 	bl	8009258 <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d003      	beq.n	80051ee <checkAktifCalisma+0x69a>
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <checkAktifCalisma+0x704>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d040      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80051ee:	4b1b      	ldr	r3, [pc, #108]	; (800525c <checkAktifCalisma+0x708>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f083 0301 	eor.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d039      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <checkAktifCalisma+0x70c>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f083 0301 	eor.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d032      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <checkAktifCalisma+0x710>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f083 0301 	eor.w	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02b      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005218:	4b13      	ldr	r3, [pc, #76]	; (8005268 <checkAktifCalisma+0x714>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f083 0301 	eor.w	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d024      	beq.n	8005270 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <checkAktifCalisma+0x718>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f083 0301 	eor.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01d      	beq.n	8005270 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <checkAktifCalisma+0x704>)
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e01c      	b.n	8005276 <checkAktifCalisma+0x722>
 800523c:	40010c00 	.word	0x40010c00
 8005240:	2000023d 	.word	0x2000023d
 8005244:	2000022f 	.word	0x2000022f
 8005248:	20000272 	.word	0x20000272
 800524c:	20000273 	.word	0x20000273
 8005250:	40011000 	.word	0x40011000
 8005254:	20000230 	.word	0x20000230
 8005258:	20000256 	.word	0x20000256
 800525c:	20000255 	.word	0x20000255
 8005260:	20000259 	.word	0x20000259
 8005264:	20000258 	.word	0x20000258
 8005268:	20000257 	.word	0x20000257
 800526c:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 8005270:	4b64      	ldr	r3, [pc, #400]	; (8005404 <checkAktifCalisma+0x8b0>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005276:	4b63      	ldr	r3, [pc, #396]	; (8005404 <checkAktifCalisma+0x8b0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800527e:	2201      	movs	r2, #1
 8005280:	2120      	movs	r1, #32
 8005282:	4861      	ldr	r0, [pc, #388]	; (8005408 <checkAktifCalisma+0x8b4>)
 8005284:	f003 ffff 	bl	8009286 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005288:	4b60      	ldr	r3, [pc, #384]	; (800540c <checkAktifCalisma+0x8b8>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800528e:	4b5f      	ldr	r3, [pc, #380]	; (800540c <checkAktifCalisma+0x8b8>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d025      	beq.n	80052e2 <checkAktifCalisma+0x78e>
 8005296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800529a:	485d      	ldr	r0, [pc, #372]	; (8005410 <checkAktifCalisma+0x8bc>)
 800529c:	f003 ffdc 	bl	8009258 <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d007      	beq.n	80052b6 <checkAktifCalisma+0x762>
 80052a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052aa:	4857      	ldr	r0, [pc, #348]	; (8005408 <checkAktifCalisma+0x8b4>)
 80052ac:	f003 ffd4 	bl	8009258 <HAL_GPIO_ReadPin>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d115      	bne.n	80052e2 <checkAktifCalisma+0x78e>
 80052b6:	4b57      	ldr	r3, [pc, #348]	; (8005414 <checkAktifCalisma+0x8c0>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <checkAktifCalisma+0x78e>
 80052be:	4b56      	ldr	r3, [pc, #344]	; (8005418 <checkAktifCalisma+0x8c4>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <checkAktifCalisma+0x78e>
 80052c6:	4b55      	ldr	r3, [pc, #340]	; (800541c <checkAktifCalisma+0x8c8>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f083 0301 	eor.w	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80052d4:	4b52      	ldr	r3, [pc, #328]	; (8005420 <checkAktifCalisma+0x8cc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a52      	ldr	r2, [pc, #328]	; (8005424 <checkAktifCalisma+0x8d0>)
 80052da:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80052dc:	4b4f      	ldr	r3, [pc, #316]	; (800541c <checkAktifCalisma+0x8c8>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80052e2:	4b4f      	ldr	r3, [pc, #316]	; (8005420 <checkAktifCalisma+0x8cc>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b4f      	ldr	r3, [pc, #316]	; (8005424 <checkAktifCalisma+0x8d0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	4a4e      	ldr	r2, [pc, #312]	; (8005428 <checkAktifCalisma+0x8d4>)
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d303      	bcc.n	80052fc <checkAktifCalisma+0x7a8>
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <checkAktifCalisma+0x8c8>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <checkAktifCalisma+0x7c4>
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <checkAktifCalisma+0x8c0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <checkAktifCalisma+0x7c4>
 800530a:	4b43      	ldr	r3, [pc, #268]	; (8005418 <checkAktifCalisma+0x8c4>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005318:	2200      	movs	r2, #0
 800531a:	2120      	movs	r1, #32
 800531c:	483a      	ldr	r0, [pc, #232]	; (8005408 <checkAktifCalisma+0x8b4>)
 800531e:	f003 ffb2 	bl	8009286 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005322:	4b3a      	ldr	r3, [pc, #232]	; (800540c <checkAktifCalisma+0x8b8>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005328:	4b3c      	ldr	r3, [pc, #240]	; (800541c <checkAktifCalisma+0x8c8>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <checkAktifCalisma+0x8d8>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8088 	bne.w	8005448 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005338:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <checkAktifCalisma+0x8dc>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <checkAktifCalisma+0x7f4>
 8005340:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <checkAktifCalisma+0x8dc>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d17f      	bne.n	8005448 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005348:	4b32      	ldr	r3, [pc, #200]	; (8005414 <checkAktifCalisma+0x8c0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d07b      	beq.n	8005448 <checkAktifCalisma+0x8f4>
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <checkAktifCalisma+0x8c4>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d077      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	482b      	ldr	r0, [pc, #172]	; (8005408 <checkAktifCalisma+0x8b4>)
 800535c:	f003 ff7c 	bl	8009258 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d170      	bne.n	8005448 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800536a:	4827      	ldr	r0, [pc, #156]	; (8005408 <checkAktifCalisma+0x8b4>)
 800536c:	f003 ff74 	bl	8009258 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <checkAktifCalisma+0x82a>
 8005376:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <checkAktifCalisma+0x8e0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d164      	bne.n	8005448 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800537e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005382:	4823      	ldr	r0, [pc, #140]	; (8005410 <checkAktifCalisma+0x8bc>)
 8005384:	f003 ff68 	bl	8009258 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10f      	bne.n	80053ae <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800538e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005392:	481f      	ldr	r0, [pc, #124]	; (8005410 <checkAktifCalisma+0x8bc>)
 8005394:	f003 ff60 	bl	8009258 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800539e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053a2:	481b      	ldr	r0, [pc, #108]	; (8005410 <checkAktifCalisma+0x8bc>)
 80053a4:	f003 ff58 	bl	8009258 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <checkAktifCalisma+0x862>
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <checkAktifCalisma+0x8e4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d048      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <checkAktifCalisma+0x8e8>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d041      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80053c4:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <checkAktifCalisma+0x8ec>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f083 0301 	eor.w	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d03a      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <checkAktifCalisma+0x8f0>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d033      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <checkAktifCalisma+0x8b8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f083 0301 	eor.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02c      	beq.n	8005448 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <checkAktifCalisma+0x8b0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d025      	beq.n	8005448 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <checkAktifCalisma+0x8e4>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	e024      	b.n	800544e <checkAktifCalisma+0x8fa>
 8005404:	20000256 	.word	0x20000256
 8005408:	40011000 	.word	0x40011000
 800540c:	2000025a 	.word	0x2000025a
 8005410:	40010c00 	.word	0x40010c00
 8005414:	20000272 	.word	0x20000272
 8005418:	20000273 	.word	0x20000273
 800541c:	20000252 	.word	0x20000252
 8005420:	200001fc 	.word	0x200001fc
 8005424:	20000208 	.word	0x20000208
 8005428:	20000236 	.word	0x20000236
 800542c:	2000023d 	.word	0x2000023d
 8005430:	2000022f 	.word	0x2000022f
 8005434:	20000231 	.word	0x20000231
 8005438:	20000257 	.word	0x20000257
 800543c:	20000255 	.word	0x20000255
 8005440:	20000259 	.word	0x20000259
 8005444:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 8005448:	4b96      	ldr	r3, [pc, #600]	; (80056a4 <checkAktifCalisma+0xb50>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800544e:	4b95      	ldr	r3, [pc, #596]	; (80056a4 <checkAktifCalisma+0xb50>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005456:	2201      	movs	r2, #1
 8005458:	2110      	movs	r1, #16
 800545a:	4893      	ldr	r0, [pc, #588]	; (80056a8 <checkAktifCalisma+0xb54>)
 800545c:	f003 ff13 	bl	8009286 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005460:	4b92      	ldr	r3, [pc, #584]	; (80056ac <checkAktifCalisma+0xb58>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005466:	4b91      	ldr	r3, [pc, #580]	; (80056ac <checkAktifCalisma+0xb58>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d024      	beq.n	80054b8 <checkAktifCalisma+0x964>
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	488d      	ldr	r0, [pc, #564]	; (80056a8 <checkAktifCalisma+0xb54>)
 8005472:	f003 fef1 	bl	8009258 <HAL_GPIO_ReadPin>
 8005476:	4603      	mov	r3, r0
 8005478:	2b01      	cmp	r3, #1
 800547a:	d007      	beq.n	800548c <checkAktifCalisma+0x938>
 800547c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005480:	4889      	ldr	r0, [pc, #548]	; (80056a8 <checkAktifCalisma+0xb54>)
 8005482:	f003 fee9 	bl	8009258 <HAL_GPIO_ReadPin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d115      	bne.n	80054b8 <checkAktifCalisma+0x964>
 800548c:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <checkAktifCalisma+0xb5c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d011      	beq.n	80054b8 <checkAktifCalisma+0x964>
 8005494:	4b87      	ldr	r3, [pc, #540]	; (80056b4 <checkAktifCalisma+0xb60>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <checkAktifCalisma+0x964>
 800549c:	4b86      	ldr	r3, [pc, #536]	; (80056b8 <checkAktifCalisma+0xb64>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f083 0301 	eor.w	r3, r3, #1
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <checkAktifCalisma+0x964>
			timer2=millis;
 80054aa:	4b84      	ldr	r3, [pc, #528]	; (80056bc <checkAktifCalisma+0xb68>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a84      	ldr	r2, [pc, #528]	; (80056c0 <checkAktifCalisma+0xb6c>)
 80054b0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80054b2:	4b81      	ldr	r3, [pc, #516]	; (80056b8 <checkAktifCalisma+0xb64>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054b8:	4b80      	ldr	r3, [pc, #512]	; (80056bc <checkAktifCalisma+0xb68>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b80      	ldr	r3, [pc, #512]	; (80056c0 <checkAktifCalisma+0xb6c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4a80      	ldr	r2, [pc, #512]	; (80056c4 <checkAktifCalisma+0xb70>)
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d303      	bcc.n	80054d2 <checkAktifCalisma+0x97e>
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <checkAktifCalisma+0xb64>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <checkAktifCalisma+0x99a>
 80054d2:	4b77      	ldr	r3, [pc, #476]	; (80056b0 <checkAktifCalisma+0xb5c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <checkAktifCalisma+0x99a>
 80054e0:	4b74      	ldr	r3, [pc, #464]	; (80056b4 <checkAktifCalisma+0xb60>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f083 0301 	eor.w	r3, r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80054ee:	2200      	movs	r2, #0
 80054f0:	2110      	movs	r1, #16
 80054f2:	486d      	ldr	r0, [pc, #436]	; (80056a8 <checkAktifCalisma+0xb54>)
 80054f4:	f003 fec7 	bl	8009286 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80054f8:	4b6c      	ldr	r3, [pc, #432]	; (80056ac <checkAktifCalisma+0xb58>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80054fe:	4b6e      	ldr	r3, [pc, #440]	; (80056b8 <checkAktifCalisma+0xb64>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005508:	486f      	ldr	r0, [pc, #444]	; (80056c8 <checkAktifCalisma+0xb74>)
 800550a:	f003 fea5 	bl	8009258 <HAL_GPIO_ReadPin>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d120      	bne.n	8005556 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005518:	486b      	ldr	r0, [pc, #428]	; (80056c8 <checkAktifCalisma+0xb74>)
 800551a:	f003 fe9d 	bl	8009258 <HAL_GPIO_ReadPin>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d118      	bne.n	8005556 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005524:	2104      	movs	r1, #4
 8005526:	4868      	ldr	r0, [pc, #416]	; (80056c8 <checkAktifCalisma+0xb74>)
 8005528:	f003 fe96 	bl	8009258 <HAL_GPIO_ReadPin>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d111      	bne.n	8005556 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005532:	2102      	movs	r1, #2
 8005534:	4864      	ldr	r0, [pc, #400]	; (80056c8 <checkAktifCalisma+0xb74>)
 8005536:	f003 fe8f 	bl	8009258 <HAL_GPIO_ReadPin>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005540:	2101      	movs	r1, #1
 8005542:	4861      	ldr	r0, [pc, #388]	; (80056c8 <checkAktifCalisma+0xb74>)
 8005544:	f003 fe88 	bl	8009258 <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <checkAktifCalisma+0xa02>
			makineStop=1;
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <checkAktifCalisma+0xb78>)
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e002      	b.n	800555c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005556:	4b5d      	ldr	r3, [pc, #372]	; (80056cc <checkAktifCalisma+0xb78>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800555c:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <checkAktifCalisma+0xb7c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d144      	bne.n	80055ee <checkAktifCalisma+0xa9a>
 8005564:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <checkAktifCalisma+0xb80>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d003      	beq.n	8005574 <checkAktifCalisma+0xa20>
 800556c:	4b59      	ldr	r3, [pc, #356]	; (80056d4 <checkAktifCalisma+0xb80>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d13c      	bne.n	80055ee <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	484c      	ldr	r0, [pc, #304]	; (80056a8 <checkAktifCalisma+0xb54>)
 8005578:	f003 fe6e 	bl	8009258 <HAL_GPIO_ReadPin>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <checkAktifCalisma+0xa36>
 8005582:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <checkAktifCalisma+0xb84>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <checkAktifCalisma+0xa4e>
 800558a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800558e:	484e      	ldr	r0, [pc, #312]	; (80056c8 <checkAktifCalisma+0xb74>)
 8005590:	f003 fe62 	bl	8009258 <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d129      	bne.n	80055ee <checkAktifCalisma+0xa9a>
 800559a:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <checkAktifCalisma+0xb84>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d125      	bne.n	80055ee <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80055a2:	2104      	movs	r1, #4
 80055a4:	4840      	ldr	r0, [pc, #256]	; (80056a8 <checkAktifCalisma+0xb54>)
 80055a6:	f003 fe57 	bl	8009258 <HAL_GPIO_ReadPin>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d003      	beq.n	80055b8 <checkAktifCalisma+0xa64>
 80055b0:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <checkAktifCalisma+0xb88>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11a      	bne.n	80055ee <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055b8:	2102      	movs	r1, #2
 80055ba:	483b      	ldr	r0, [pc, #236]	; (80056a8 <checkAktifCalisma+0xb54>)
 80055bc:	f003 fe4c 	bl	8009258 <HAL_GPIO_ReadPin>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d113      	bne.n	80055ee <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80055c6:	4b46      	ldr	r3, [pc, #280]	; (80056e0 <checkAktifCalisma+0xb8c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00c      	beq.n	80055ee <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80055d4:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <checkAktifCalisma+0xb78>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80055dc:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <checkAktifCalisma+0xb90>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80055e2:	4b36      	ldr	r3, [pc, #216]	; (80056bc <checkAktifCalisma+0xb68>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a40      	ldr	r2, [pc, #256]	; (80056e8 <checkAktifCalisma+0xb94>)
 80055e8:	6013      	str	r3, [r2, #0]
			bekle();
 80055ea:	f7ff f935 	bl	8004858 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80055ee:	4b33      	ldr	r3, [pc, #204]	; (80056bc <checkAktifCalisma+0xb68>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <checkAktifCalisma+0xb94>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <checkAktifCalisma+0xb98>)
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d211      	bcs.n	8005624 <checkAktifCalisma+0xad0>
 8005600:	2104      	movs	r1, #4
 8005602:	4829      	ldr	r0, [pc, #164]	; (80056a8 <checkAktifCalisma+0xb54>)
 8005604:	f003 fe28 	bl	8009258 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <checkAktifCalisma+0xad0>
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <checkAktifCalisma+0xb88>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <checkAktifCalisma+0xad0>
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <checkAktifCalisma+0xb78>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f083 0301 	eor.w	r3, r3, #1
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <checkAktifCalisma+0xb90>)
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800562a:	4b29      	ldr	r3, [pc, #164]	; (80056d0 <checkAktifCalisma+0xb7c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d160      	bne.n	80056f4 <checkAktifCalisma+0xba0>
 8005632:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <checkAktifCalisma+0xb80>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d003      	beq.n	8005642 <checkAktifCalisma+0xaee>
 800563a:	4b26      	ldr	r3, [pc, #152]	; (80056d4 <checkAktifCalisma+0xb80>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d158      	bne.n	80056f4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005642:	2104      	movs	r1, #4
 8005644:	4818      	ldr	r0, [pc, #96]	; (80056a8 <checkAktifCalisma+0xb54>)
 8005646:	f003 fe07 	bl	8009258 <HAL_GPIO_ReadPin>
 800564a:	4603      	mov	r3, r0
 800564c:	2b01      	cmp	r3, #1
 800564e:	d003      	beq.n	8005658 <checkAktifCalisma+0xb04>
 8005650:	4b22      	ldr	r3, [pc, #136]	; (80056dc <checkAktifCalisma+0xb88>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d14d      	bne.n	80056f4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005658:	2102      	movs	r1, #2
 800565a:	4813      	ldr	r0, [pc, #76]	; (80056a8 <checkAktifCalisma+0xb54>)
 800565c:	f003 fdfc 	bl	8009258 <HAL_GPIO_ReadPin>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d146      	bne.n	80056f4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	480f      	ldr	r0, [pc, #60]	; (80056a8 <checkAktifCalisma+0xb54>)
 800566a:	f003 fdf5 	bl	8009258 <HAL_GPIO_ReadPin>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <checkAktifCalisma+0xb28>
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <checkAktifCalisma+0xb84>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <checkAktifCalisma+0xb40>
 800567c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005680:	4811      	ldr	r0, [pc, #68]	; (80056c8 <checkAktifCalisma+0xb74>)
 8005682:	f003 fde9 	bl	8009258 <HAL_GPIO_ReadPin>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d133      	bne.n	80056f4 <checkAktifCalisma+0xba0>
 800568c:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <checkAktifCalisma+0xb84>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d12f      	bne.n	80056f4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <checkAktifCalisma+0xb78>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02b      	beq.n	80056f4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <checkAktifCalisma+0xb9c>)
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e02a      	b.n	80056fa <checkAktifCalisma+0xba6>
 80056a4:	20000257 	.word	0x20000257
 80056a8:	40011000 	.word	0x40011000
 80056ac:	2000025b 	.word	0x2000025b
 80056b0:	20000272 	.word	0x20000272
 80056b4:	20000273 	.word	0x20000273
 80056b8:	20000253 	.word	0x20000253
 80056bc:	200001fc 	.word	0x200001fc
 80056c0:	20000208 	.word	0x20000208
 80056c4:	20000236 	.word	0x20000236
 80056c8:	40010c00 	.word	0x40010c00
 80056cc:	20000262 	.word	0x20000262
 80056d0:	20000229 	.word	0x20000229
 80056d4:	20000228 	.word	0x20000228
 80056d8:	2000022c 	.word	0x2000022c
 80056dc:	20000226 	.word	0x20000226
 80056e0:	2000024f 	.word	0x2000024f
 80056e4:	20000263 	.word	0x20000263
 80056e8:	20000200 	.word	0x20000200
 80056ec:	20000239 	.word	0x20000239
 80056f0:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 80056f4:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <checkAktifCalisma+0xdd0>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056fa:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <checkAktifCalisma+0xdd4>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d121      	bne.n	8005746 <checkAktifCalisma+0xbf2>
 8005702:	4b8a      	ldr	r3, [pc, #552]	; (800592c <checkAktifCalisma+0xdd8>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d003      	beq.n	8005712 <checkAktifCalisma+0xbbe>
 800570a:	4b88      	ldr	r3, [pc, #544]	; (800592c <checkAktifCalisma+0xdd8>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d119      	bne.n	8005746 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005712:	2104      	movs	r1, #4
 8005714:	4886      	ldr	r0, [pc, #536]	; (8005930 <checkAktifCalisma+0xddc>)
 8005716:	f003 fd9f 	bl	8009258 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d003      	beq.n	8005728 <checkAktifCalisma+0xbd4>
 8005720:	4b84      	ldr	r3, [pc, #528]	; (8005934 <checkAktifCalisma+0xde0>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10e      	bne.n	8005746 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005728:	2102      	movs	r1, #2
 800572a:	4881      	ldr	r0, [pc, #516]	; (8005930 <checkAktifCalisma+0xddc>)
 800572c:	f003 fd94 	bl	8009258 <HAL_GPIO_ReadPin>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005736:	4b80      	ldr	r3, [pc, #512]	; (8005938 <checkAktifCalisma+0xde4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800573e:	4b7f      	ldr	r3, [pc, #508]	; (800593c <checkAktifCalisma+0xde8>)
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e002      	b.n	800574c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005746:	4b7d      	ldr	r3, [pc, #500]	; (800593c <checkAktifCalisma+0xde8>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800574c:	4b75      	ldr	r3, [pc, #468]	; (8005924 <checkAktifCalisma+0xdd0>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <checkAktifCalisma+0xc10>
 8005754:	4b79      	ldr	r3, [pc, #484]	; (800593c <checkAktifCalisma+0xde8>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <checkAktifCalisma+0xc10>
 800575c:	4b78      	ldr	r3, [pc, #480]	; (8005940 <checkAktifCalisma+0xdec>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005764:	2201      	movs	r2, #1
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	4876      	ldr	r0, [pc, #472]	; (8005944 <checkAktifCalisma+0xdf0>)
 800576a:	f003 fd8c 	bl	8009286 <HAL_GPIO_WritePin>
 800576e:	e004      	b.n	800577a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005770:	2200      	movs	r2, #0
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	4873      	ldr	r0, [pc, #460]	; (8005944 <checkAktifCalisma+0xdf0>)
 8005776:	f003 fd86 	bl	8009286 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <checkAktifCalisma+0xdf4>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d141      	bne.n	8005806 <checkAktifCalisma+0xcb2>
 8005782:	4b6a      	ldr	r3, [pc, #424]	; (800592c <checkAktifCalisma+0xdd8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d003      	beq.n	8005792 <checkAktifCalisma+0xc3e>
 800578a:	4b68      	ldr	r3, [pc, #416]	; (800592c <checkAktifCalisma+0xdd8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d139      	bne.n	8005806 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005796:	4866      	ldr	r0, [pc, #408]	; (8005930 <checkAktifCalisma+0xddc>)
 8005798:	f003 fd5e 	bl	8009258 <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <checkAktifCalisma+0xc56>
 80057a2:	4b6a      	ldr	r3, [pc, #424]	; (800594c <checkAktifCalisma+0xdf8>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <checkAktifCalisma+0xc6e>
 80057aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057ae:	4868      	ldr	r0, [pc, #416]	; (8005950 <checkAktifCalisma+0xdfc>)
 80057b0:	f003 fd52 	bl	8009258 <HAL_GPIO_ReadPin>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d125      	bne.n	8005806 <checkAktifCalisma+0xcb2>
 80057ba:	4b64      	ldr	r3, [pc, #400]	; (800594c <checkAktifCalisma+0xdf8>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d121      	bne.n	8005806 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057c2:	2102      	movs	r1, #2
 80057c4:	485a      	ldr	r0, [pc, #360]	; (8005930 <checkAktifCalisma+0xddc>)
 80057c6:	f003 fd47 	bl	8009258 <HAL_GPIO_ReadPin>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d11a      	bne.n	8005806 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80057d0:	2104      	movs	r1, #4
 80057d2:	4857      	ldr	r0, [pc, #348]	; (8005930 <checkAktifCalisma+0xddc>)
 80057d4:	f003 fd40 	bl	8009258 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <checkAktifCalisma+0xde4>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00f      	beq.n	8005806 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80057e6:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <checkAktifCalisma+0xe00>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	f083 0301 	eor.w	r3, r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <checkAktifCalisma+0xe04>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057fa:	4b58      	ldr	r3, [pc, #352]	; (800595c <checkAktifCalisma+0xe08>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a58      	ldr	r2, [pc, #352]	; (8005960 <checkAktifCalisma+0xe0c>)
 8005800:	6013      	str	r3, [r2, #0]
			bekle();
 8005802:	f7ff f829 	bl	8004858 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005806:	4b55      	ldr	r3, [pc, #340]	; (800595c <checkAktifCalisma+0xe08>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b55      	ldr	r3, [pc, #340]	; (8005960 <checkAktifCalisma+0xe0c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	4a54      	ldr	r2, [pc, #336]	; (8005964 <checkAktifCalisma+0xe10>)
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	4293      	cmp	r3, r2
 8005816:	d20d      	bcs.n	8005834 <checkAktifCalisma+0xce0>
 8005818:	2102      	movs	r1, #2
 800581a:	4845      	ldr	r0, [pc, #276]	; (8005930 <checkAktifCalisma+0xddc>)
 800581c:	f003 fd1c 	bl	8009258 <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <checkAktifCalisma+0xce0>
 8005826:	4b44      	ldr	r3, [pc, #272]	; (8005938 <checkAktifCalisma+0xde4>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f083 0301 	eor.w	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005834:	4b48      	ldr	r3, [pc, #288]	; (8005958 <checkAktifCalisma+0xe04>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800583a:	4b43      	ldr	r3, [pc, #268]	; (8005948 <checkAktifCalisma+0xdf4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d135      	bne.n	80058ae <checkAktifCalisma+0xd5a>
 8005842:	4b3a      	ldr	r3, [pc, #232]	; (800592c <checkAktifCalisma+0xdd8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d003      	beq.n	8005852 <checkAktifCalisma+0xcfe>
 800584a:	4b38      	ldr	r3, [pc, #224]	; (800592c <checkAktifCalisma+0xdd8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d12d      	bne.n	80058ae <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005856:	4836      	ldr	r0, [pc, #216]	; (8005930 <checkAktifCalisma+0xddc>)
 8005858:	f003 fcfe 	bl	8009258 <HAL_GPIO_ReadPin>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <checkAktifCalisma+0xd16>
 8005862:	4b3a      	ldr	r3, [pc, #232]	; (800594c <checkAktifCalisma+0xdf8>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <checkAktifCalisma+0xd2e>
 800586a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800586e:	4838      	ldr	r0, [pc, #224]	; (8005950 <checkAktifCalisma+0xdfc>)
 8005870:	f003 fcf2 	bl	8009258 <HAL_GPIO_ReadPin>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d119      	bne.n	80058ae <checkAktifCalisma+0xd5a>
 800587a:	4b34      	ldr	r3, [pc, #208]	; (800594c <checkAktifCalisma+0xdf8>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d115      	bne.n	80058ae <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005882:	2102      	movs	r1, #2
 8005884:	482a      	ldr	r0, [pc, #168]	; (8005930 <checkAktifCalisma+0xddc>)
 8005886:	f003 fce7 	bl	8009258 <HAL_GPIO_ReadPin>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10e      	bne.n	80058ae <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005890:	2104      	movs	r1, #4
 8005892:	4827      	ldr	r0, [pc, #156]	; (8005930 <checkAktifCalisma+0xddc>)
 8005894:	f003 fce0 	bl	8009258 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <checkAktifCalisma+0xde4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80058a6:	4b30      	ldr	r3, [pc, #192]	; (8005968 <checkAktifCalisma+0xe14>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e002      	b.n	80058b4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80058ae:	4b2e      	ldr	r3, [pc, #184]	; (8005968 <checkAktifCalisma+0xe14>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <checkAktifCalisma+0xdf4>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11d      	bne.n	80058f8 <checkAktifCalisma+0xda4>
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <checkAktifCalisma+0xdd8>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d003      	beq.n	80058cc <checkAktifCalisma+0xd78>
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <checkAktifCalisma+0xdd8>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d115      	bne.n	80058f8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058cc:	2102      	movs	r1, #2
 80058ce:	4818      	ldr	r0, [pc, #96]	; (8005930 <checkAktifCalisma+0xddc>)
 80058d0:	f003 fcc2 	bl	8009258 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10e      	bne.n	80058f8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058da:	2104      	movs	r1, #4
 80058dc:	4814      	ldr	r0, [pc, #80]	; (8005930 <checkAktifCalisma+0xddc>)
 80058de:	f003 fcbb 	bl	8009258 <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <checkAktifCalisma+0xde4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80058f0:	4b1e      	ldr	r3, [pc, #120]	; (800596c <checkAktifCalisma+0xe18>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e002      	b.n	80058fe <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80058f8:	4b1c      	ldr	r3, [pc, #112]	; (800596c <checkAktifCalisma+0xe18>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <checkAktifCalisma+0xe14>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <checkAktifCalisma+0xdc2>
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <checkAktifCalisma+0xe18>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <checkAktifCalisma+0xdc2>
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <checkAktifCalisma+0xe04>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02c      	beq.n	8005970 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005916:	2201      	movs	r2, #1
 8005918:	2140      	movs	r1, #64	; 0x40
 800591a:	480a      	ldr	r0, [pc, #40]	; (8005944 <checkAktifCalisma+0xdf0>)
 800591c:	f003 fcb3 	bl	8009286 <HAL_GPIO_WritePin>
 8005920:	e02b      	b.n	800597a <checkAktifCalisma+0xe26>
 8005922:	bf00      	nop
 8005924:	20000264 	.word	0x20000264
 8005928:	20000229 	.word	0x20000229
 800592c:	20000228 	.word	0x20000228
 8005930:	40011000 	.word	0x40011000
 8005934:	20000226 	.word	0x20000226
 8005938:	20000262 	.word	0x20000262
 800593c:	20000265 	.word	0x20000265
 8005940:	20000263 	.word	0x20000263
 8005944:	40010800 	.word	0x40010800
 8005948:	2000022a 	.word	0x2000022a
 800594c:	2000022c 	.word	0x2000022c
 8005950:	40010c00 	.word	0x40010c00
 8005954:	2000024f 	.word	0x2000024f
 8005958:	20000266 	.word	0x20000266
 800595c:	200001fc 	.word	0x200001fc
 8005960:	20000200 	.word	0x20000200
 8005964:	2000023a 	.word	0x2000023a
 8005968:	20000267 	.word	0x20000267
 800596c:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005970:	2200      	movs	r2, #0
 8005972:	2140      	movs	r1, #64	; 0x40
 8005974:	488d      	ldr	r0, [pc, #564]	; (8005bac <checkAktifCalisma+0x1058>)
 8005976:	f003 fc86 	bl	8009286 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800597a:	4b8d      	ldr	r3, [pc, #564]	; (8005bb0 <checkAktifCalisma+0x105c>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <checkAktifCalisma+0xe36>
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <checkAktifCalisma+0x105c>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d115      	bne.n	80059b6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800598a:	2104      	movs	r1, #4
 800598c:	4889      	ldr	r0, [pc, #548]	; (8005bb4 <checkAktifCalisma+0x1060>)
 800598e:	f003 fc63 	bl	8009258 <HAL_GPIO_ReadPin>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d003      	beq.n	80059a0 <checkAktifCalisma+0xe4c>
 8005998:	4b87      	ldr	r3, [pc, #540]	; (8005bb8 <checkAktifCalisma+0x1064>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80059a0:	2102      	movs	r1, #2
 80059a2:	4884      	ldr	r0, [pc, #528]	; (8005bb4 <checkAktifCalisma+0x1060>)
 80059a4:	f003 fc58 	bl	8009258 <HAL_GPIO_ReadPin>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80059ae:	4b83      	ldr	r3, [pc, #524]	; (8005bbc <checkAktifCalisma+0x1068>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e002      	b.n	80059bc <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80059b6:	4b81      	ldr	r3, [pc, #516]	; (8005bbc <checkAktifCalisma+0x1068>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80059bc:	4b7c      	ldr	r3, [pc, #496]	; (8005bb0 <checkAktifCalisma+0x105c>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d003      	beq.n	80059cc <checkAktifCalisma+0xe78>
 80059c4:	4b7a      	ldr	r3, [pc, #488]	; (8005bb0 <checkAktifCalisma+0x105c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d111      	bne.n	80059f0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059cc:	2102      	movs	r1, #2
 80059ce:	4879      	ldr	r0, [pc, #484]	; (8005bb4 <checkAktifCalisma+0x1060>)
 80059d0:	f003 fc42 	bl	8009258 <HAL_GPIO_ReadPin>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10a      	bne.n	80059f0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80059da:	2104      	movs	r1, #4
 80059dc:	4875      	ldr	r0, [pc, #468]	; (8005bb4 <checkAktifCalisma+0x1060>)
 80059de:	f003 fc3b 	bl	8009258 <HAL_GPIO_ReadPin>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80059e8:	4b75      	ldr	r3, [pc, #468]	; (8005bc0 <checkAktifCalisma+0x106c>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e002      	b.n	80059f6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80059f0:	4b73      	ldr	r3, [pc, #460]	; (8005bc0 <checkAktifCalisma+0x106c>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80059f6:	4b71      	ldr	r3, [pc, #452]	; (8005bbc <checkAktifCalisma+0x1068>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00f      	beq.n	8005a1e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80059fe:	4b71      	ldr	r3, [pc, #452]	; (8005bc4 <checkAktifCalisma+0x1070>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10b      	bne.n	8005a1e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a0a:	486f      	ldr	r0, [pc, #444]	; (8005bc8 <checkAktifCalisma+0x1074>)
 8005a0c:	f003 fc24 	bl	8009258 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005a16:	4b6d      	ldr	r3, [pc, #436]	; (8005bcc <checkAktifCalisma+0x1078>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e002      	b.n	8005a24 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005a1e:	4b6b      	ldr	r3, [pc, #428]	; (8005bcc <checkAktifCalisma+0x1078>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005a24:	4b66      	ldr	r3, [pc, #408]	; (8005bc0 <checkAktifCalisma+0x106c>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005a2c:	4b65      	ldr	r3, [pc, #404]	; (8005bc4 <checkAktifCalisma+0x1070>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10b      	bne.n	8005a4c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a38:	4863      	ldr	r0, [pc, #396]	; (8005bc8 <checkAktifCalisma+0x1074>)
 8005a3a:	f003 fc0d 	bl	8009258 <HAL_GPIO_ReadPin>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005a44:	4b62      	ldr	r3, [pc, #392]	; (8005bd0 <checkAktifCalisma+0x107c>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e002      	b.n	8005a52 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005a4c:	4b60      	ldr	r3, [pc, #384]	; (8005bd0 <checkAktifCalisma+0x107c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a52:	4b60      	ldr	r3, [pc, #384]	; (8005bd4 <checkAktifCalisma+0x1080>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d137      	bne.n	8005aca <checkAktifCalisma+0xf76>
 8005a5a:	4b5f      	ldr	r3, [pc, #380]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d003      	beq.n	8005a6a <checkAktifCalisma+0xf16>
 8005a62:	4b5d      	ldr	r3, [pc, #372]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d12f      	bne.n	8005aca <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a6a:	4b54      	ldr	r3, [pc, #336]	; (8005bbc <checkAktifCalisma+0x1068>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <checkAktifCalisma+0xf26>
 8005a72:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <checkAktifCalisma+0x106c>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d027      	beq.n	8005aca <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a7e:	484d      	ldr	r0, [pc, #308]	; (8005bb4 <checkAktifCalisma+0x1060>)
 8005a80:	f003 fbea 	bl	8009258 <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <checkAktifCalisma+0xf3e>
 8005a8a:	4b4e      	ldr	r3, [pc, #312]	; (8005bc4 <checkAktifCalisma+0x1070>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005a92:	4b4e      	ldr	r3, [pc, #312]	; (8005bcc <checkAktifCalisma+0x1078>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <checkAktifCalisma+0xf4e>
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <checkAktifCalisma+0x107c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d013      	beq.n	8005aca <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005aa2:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <checkAktifCalisma+0x1088>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005aaa:	4b4d      	ldr	r3, [pc, #308]	; (8005be0 <checkAktifCalisma+0x108c>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f083 0301 	eor.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005ab8:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <checkAktifCalisma+0x1090>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005abe:	4b4a      	ldr	r3, [pc, #296]	; (8005be8 <checkAktifCalisma+0x1094>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4a      	ldr	r2, [pc, #296]	; (8005bec <checkAktifCalisma+0x1098>)
 8005ac4:	6013      	str	r3, [r2, #0]
			bekle();
 8005ac6:	f7fe fec7 	bl	8004858 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <checkAktifCalisma+0x1094>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b47      	ldr	r3, [pc, #284]	; (8005bec <checkAktifCalisma+0x1098>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	4a46      	ldr	r2, [pc, #280]	; (8005bf0 <checkAktifCalisma+0x109c>)
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d214      	bcs.n	8005b06 <checkAktifCalisma+0xfb2>
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <checkAktifCalisma+0x1068>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f083 0301 	eor.w	r3, r3, #1
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <checkAktifCalisma+0xfa4>
 8005aea:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <checkAktifCalisma+0x106c>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f083 0301 	eor.w	r3, r3, #1
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <checkAktifCalisma+0xfb2>
 8005af8:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <checkAktifCalisma+0x1088>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f083 0301 	eor.w	r3, r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <checkAktifCalisma+0x1090>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <checkAktifCalisma+0x1080>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d12b      	bne.n	8005b6c <checkAktifCalisma+0x1018>
 8005b14:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d003      	beq.n	8005b24 <checkAktifCalisma+0xfd0>
 8005b1c:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d123      	bne.n	8005b6c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <checkAktifCalisma+0x1068>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <checkAktifCalisma+0xfe0>
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <checkAktifCalisma+0x106c>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b38:	481e      	ldr	r0, [pc, #120]	; (8005bb4 <checkAktifCalisma+0x1060>)
 8005b3a:	f003 fb8d 	bl	8009258 <HAL_GPIO_ReadPin>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <checkAktifCalisma+0xff8>
 8005b44:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <checkAktifCalisma+0x1070>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <checkAktifCalisma+0x1078>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <checkAktifCalisma+0x1008>
 8005b54:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <checkAktifCalisma+0x107c>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <checkAktifCalisma+0x1088>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <checkAktifCalisma+0x10a0>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e002      	b.n	8005b72 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <checkAktifCalisma+0x10a0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b72:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <checkAktifCalisma+0x1080>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d140      	bne.n	8005bfc <checkAktifCalisma+0x10a8>
 8005b7a:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d003      	beq.n	8005b8a <checkAktifCalisma+0x1036>
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <checkAktifCalisma+0x1084>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d138      	bne.n	8005bfc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <checkAktifCalisma+0x1068>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <checkAktifCalisma+0x1046>
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <checkAktifCalisma+0x106c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d030      	beq.n	8005bfc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005b9a:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <checkAktifCalisma+0x1088>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02c      	beq.n	8005bfc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <checkAktifCalisma+0x10a4>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e02b      	b.n	8005c02 <checkAktifCalisma+0x10ae>
 8005baa:	bf00      	nop
 8005bac:	40010800 	.word	0x40010800
 8005bb0:	2000022d 	.word	0x2000022d
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	20000226 	.word	0x20000226
 8005bbc:	2000026c 	.word	0x2000026c
 8005bc0:	2000026d 	.word	0x2000026d
 8005bc4:	2000022c 	.word	0x2000022c
 8005bc8:	40010c00 	.word	0x40010c00
 8005bcc:	2000027c 	.word	0x2000027c
 8005bd0:	2000027d 	.word	0x2000027d
 8005bd4:	2000022b 	.word	0x2000022b
 8005bd8:	20000228 	.word	0x20000228
 8005bdc:	20000262 	.word	0x20000262
 8005be0:	2000024f 	.word	0x2000024f
 8005be4:	20000269 	.word	0x20000269
 8005be8:	200001fc 	.word	0x200001fc
 8005bec:	20000200 	.word	0x20000200
 8005bf0:	2000023b 	.word	0x2000023b
 8005bf4:	2000026a 	.word	0x2000026a
 8005bf8:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005bfc:	4b8b      	ldr	r3, [pc, #556]	; (8005e2c <checkAktifCalisma+0x12d8>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005c02:	4b8b      	ldr	r3, [pc, #556]	; (8005e30 <checkAktifCalisma+0x12dc>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d107      	bne.n	8005c1a <checkAktifCalisma+0x10c6>
 8005c0a:	4b8a      	ldr	r3, [pc, #552]	; (8005e34 <checkAktifCalisma+0x12e0>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <checkAktifCalisma+0x10c6>
 8005c12:	4b86      	ldr	r3, [pc, #536]	; (8005e2c <checkAktifCalisma+0x12d8>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	2120      	movs	r1, #32
 8005c1e:	4886      	ldr	r0, [pc, #536]	; (8005e38 <checkAktifCalisma+0x12e4>)
 8005c20:	f003 fb31 	bl	8009286 <HAL_GPIO_WritePin>
 8005c24:	e004      	b.n	8005c30 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c26:	2200      	movs	r2, #0
 8005c28:	2120      	movs	r1, #32
 8005c2a:	4883      	ldr	r0, [pc, #524]	; (8005e38 <checkAktifCalisma+0x12e4>)
 8005c2c:	f003 fb2b 	bl	8009286 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005c30:	4b82      	ldr	r3, [pc, #520]	; (8005e3c <checkAktifCalisma+0x12e8>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00e      	beq.n	8005c56 <checkAktifCalisma+0x1102>
 8005c38:	2102      	movs	r1, #2
 8005c3a:	4881      	ldr	r0, [pc, #516]	; (8005e40 <checkAktifCalisma+0x12ec>)
 8005c3c:	f003 fb0c 	bl	8009258 <HAL_GPIO_ReadPin>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <checkAktifCalisma+0x1102>
 8005c46:	4b7f      	ldr	r3, [pc, #508]	; (8005e44 <checkAktifCalisma+0x12f0>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <checkAktifCalisma+0x1102>
 8005c4e:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <checkAktifCalisma+0x12f4>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d112      	bne.n	8005c7c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005c56:	4b7d      	ldr	r3, [pc, #500]	; (8005e4c <checkAktifCalisma+0x12f8>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d066      	beq.n	8005d2c <checkAktifCalisma+0x11d8>
 8005c5e:	2104      	movs	r1, #4
 8005c60:	4877      	ldr	r0, [pc, #476]	; (8005e40 <checkAktifCalisma+0x12ec>)
 8005c62:	f003 faf9 	bl	8009258 <HAL_GPIO_ReadPin>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d15f      	bne.n	8005d2c <checkAktifCalisma+0x11d8>
 8005c6c:	4b75      	ldr	r3, [pc, #468]	; (8005e44 <checkAktifCalisma+0x12f0>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05b      	beq.n	8005d2c <checkAktifCalisma+0x11d8>
 8005c74:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <checkAktifCalisma+0x12f4>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d057      	beq.n	8005d2c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005c7c:	4b74      	ldr	r3, [pc, #464]	; (8005e50 <checkAktifCalisma+0x12fc>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	4b72      	ldr	r3, [pc, #456]	; (8005e50 <checkAktifCalisma+0x12fc>)
 8005c86:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005c88:	4b71      	ldr	r3, [pc, #452]	; (8005e50 <checkAktifCalisma+0x12fc>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b09      	cmp	r3, #9
 8005c8e:	d908      	bls.n	8005ca2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005c90:	4b6f      	ldr	r3, [pc, #444]	; (8005e50 <checkAktifCalisma+0x12fc>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005c96:	4b6f      	ldr	r3, [pc, #444]	; (8005e54 <checkAktifCalisma+0x1300>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4b6d      	ldr	r3, [pc, #436]	; (8005e54 <checkAktifCalisma+0x1300>)
 8005ca0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005ca2:	4b6c      	ldr	r3, [pc, #432]	; (8005e54 <checkAktifCalisma+0x1300>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d908      	bls.n	8005cbc <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005caa:	4b6a      	ldr	r3, [pc, #424]	; (8005e54 <checkAktifCalisma+0x1300>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005cb0:	4b69      	ldr	r3, [pc, #420]	; (8005e58 <checkAktifCalisma+0x1304>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	4b67      	ldr	r3, [pc, #412]	; (8005e58 <checkAktifCalisma+0x1304>)
 8005cba:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <checkAktifCalisma+0x1304>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d908      	bls.n	8005cd6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <checkAktifCalisma+0x1304>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005cca:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <checkAktifCalisma+0x1308>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <checkAktifCalisma+0x1308>)
 8005cd4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005cd6:	4b61      	ldr	r3, [pc, #388]	; (8005e5c <checkAktifCalisma+0x1308>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d908      	bls.n	8005cf0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005cde:	4b5f      	ldr	r3, [pc, #380]	; (8005e5c <checkAktifCalisma+0x1308>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005ce4:	4b5e      	ldr	r3, [pc, #376]	; (8005e60 <checkAktifCalisma+0x130c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	4b5c      	ldr	r3, [pc, #368]	; (8005e60 <checkAktifCalisma+0x130c>)
 8005cee:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005cf0:	4b5b      	ldr	r3, [pc, #364]	; (8005e60 <checkAktifCalisma+0x130c>)
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	; (8005e64 <checkAktifCalisma+0x1310>)
 8005cf6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005cfa:	4b58      	ldr	r3, [pc, #352]	; (8005e5c <checkAktifCalisma+0x1308>)
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	4b59      	ldr	r3, [pc, #356]	; (8005e64 <checkAktifCalisma+0x1310>)
 8005d00:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005d02:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <checkAktifCalisma+0x1304>)
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <checkAktifCalisma+0x1310>)
 8005d08:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005d0a:	4b52      	ldr	r3, [pc, #328]	; (8005e54 <checkAktifCalisma+0x1300>)
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <checkAktifCalisma+0x1310>)
 8005d10:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005d12:	4b4f      	ldr	r3, [pc, #316]	; (8005e50 <checkAktifCalisma+0x12fc>)
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	4b53      	ldr	r3, [pc, #332]	; (8005e64 <checkAktifCalisma+0x1310>)
 8005d18:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005d1a:	4b53      	ldr	r3, [pc, #332]	; (8005e68 <checkAktifCalisma+0x1314>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005d20:	4b46      	ldr	r3, [pc, #280]	; (8005e3c <checkAktifCalisma+0x12e8>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005d26:	4b49      	ldr	r3, [pc, #292]	; (8005e4c <checkAktifCalisma+0x12f8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d30:	484e      	ldr	r0, [pc, #312]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005d32:	f003 fa91 	bl	8009258 <HAL_GPIO_ReadPin>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d016      	beq.n	8005d6a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d40:	484a      	ldr	r0, [pc, #296]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005d42:	f003 fa89 	bl	8009258 <HAL_GPIO_ReadPin>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d50:	4846      	ldr	r0, [pc, #280]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005d52:	f003 fa81 	bl	8009258 <HAL_GPIO_ReadPin>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	4838      	ldr	r0, [pc, #224]	; (8005e40 <checkAktifCalisma+0x12ec>)
 8005d60:	f003 fa7a 	bl	8009258 <HAL_GPIO_ReadPin>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <checkAktifCalisma+0x131c>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005d72:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <checkAktifCalisma+0x131c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005d78:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <checkAktifCalisma+0x131c>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <checkAktifCalisma+0x125a>
 8005d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d84:	4839      	ldr	r0, [pc, #228]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005d86:	f003 fa67 	bl	8009258 <HAL_GPIO_ReadPin>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10e      	bne.n	8005dae <checkAktifCalisma+0x125a>
			hataVar=1;
 8005d90:	4b38      	ldr	r3, [pc, #224]	; (8005e74 <checkAktifCalisma+0x1320>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fa fe4a 	bl	8000a30 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	f7fa fded 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005da2:	f001 fc85 	bl	80076b0 <convertAndSendData>
			acilstophatasi=1;
 8005da6:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <checkAktifCalisma+0x1324>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e018      	b.n	8005de0 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005dae:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <checkAktifCalisma+0x1324>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d014      	beq.n	8005de0 <checkAktifCalisma+0x128c>
 8005db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005dba:	482c      	ldr	r0, [pc, #176]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005dbc:	f003 fa4c 	bl	8009258 <HAL_GPIO_ReadPin>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <checkAktifCalisma+0x128c>
 8005dc6:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <checkAktifCalisma+0x131c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <checkAktifCalisma+0x1324>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005dda:	2001      	movs	r0, #1
 8005ddc:	f7fe fce8 	bl	80047b0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005de0:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <checkAktifCalisma+0x1328>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f083 0301 	eor.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d04e      	beq.n	8005e8c <checkAktifCalisma+0x1338>
 8005dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005df2:	481e      	ldr	r0, [pc, #120]	; (8005e6c <checkAktifCalisma+0x1318>)
 8005df4:	f003 fa30 	bl	8009258 <HAL_GPIO_ReadPin>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <checkAktifCalisma+0x12b2>
 8005dfe:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <checkAktifCalisma+0x132c>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d042      	beq.n	8005e8c <checkAktifCalisma+0x1338>
 8005e06:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <checkAktifCalisma+0x1330>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d13e      	bne.n	8005e8c <checkAktifCalisma+0x1338>
			hataVar=1;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <checkAktifCalisma+0x1320>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005e14:	2002      	movs	r0, #2
 8005e16:	f7fa fe0b 	bl	8000a30 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005e1a:	2002      	movs	r0, #2
 8005e1c:	f7fa fdae 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005e20:	f001 fc46 	bl	80076b0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <checkAktifCalisma+0x1334>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e047      	b.n	8005ebc <checkAktifCalisma+0x1368>
 8005e2c:	2000026b 	.word	0x2000026b
 8005e30:	2000026a 	.word	0x2000026a
 8005e34:	20000269 	.word	0x20000269
 8005e38:	40010800 	.word	0x40010800
 8005e3c:	2000025f 	.word	0x2000025f
 8005e40:	40011000 	.word	0x40011000
 8005e44:	20000226 	.word	0x20000226
 8005e48:	20000262 	.word	0x20000262
 8005e4c:	20000260 	.word	0x20000260
 8005e50:	2000021d 	.word	0x2000021d
 8005e54:	2000021e 	.word	0x2000021e
 8005e58:	20000000 	.word	0x20000000
 8005e5c:	20000001 	.word	0x20000001
 8005e60:	2000021f 	.word	0x2000021f
 8005e64:	20000118 	.word	0x20000118
 8005e68:	2000024c 	.word	0x2000024c
 8005e6c:	40010c00 	.word	0x40010c00
 8005e70:	2000026e 	.word	0x2000026e
 8005e74:	20000275 	.word	0x20000275
 8005e78:	20000270 	.word	0x20000270
 8005e7c:	20000277 	.word	0x20000277
 8005e80:	20000281 	.word	0x20000281
 8005e84:	20000224 	.word	0x20000224
 8005e88:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005e8c:	4b9b      	ldr	r3, [pc, #620]	; (80060fc <checkAktifCalisma+0x15a8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <checkAktifCalisma+0x1368>
 8005e94:	4b9a      	ldr	r3, [pc, #616]	; (8006100 <checkAktifCalisma+0x15ac>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00f      	beq.n	8005ebc <checkAktifCalisma+0x1368>
 8005e9c:	4b99      	ldr	r3, [pc, #612]	; (8006104 <checkAktifCalisma+0x15b0>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f083 0301 	eor.w	r3, r3, #1
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005eaa:	4b94      	ldr	r3, [pc, #592]	; (80060fc <checkAktifCalisma+0x15a8>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005eb0:	4b95      	ldr	r3, [pc, #596]	; (8006108 <checkAktifCalisma+0x15b4>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005eb6:	2002      	movs	r0, #2
 8005eb8:	f7fe fc7a 	bl	80047b0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005ebc:	4b93      	ldr	r3, [pc, #588]	; (800610c <checkAktifCalisma+0x15b8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11e      	bne.n	8005f02 <checkAktifCalisma+0x13ae>
 8005ec4:	4b92      	ldr	r3, [pc, #584]	; (8006110 <checkAktifCalisma+0x15bc>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d11a      	bne.n	8005f02 <checkAktifCalisma+0x13ae>
 8005ecc:	4b91      	ldr	r3, [pc, #580]	; (8006114 <checkAktifCalisma+0x15c0>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d016      	beq.n	8005f02 <checkAktifCalisma+0x13ae>
 8005ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ed8:	488f      	ldr	r0, [pc, #572]	; (8006118 <checkAktifCalisma+0x15c4>)
 8005eda:	f003 f9bd 	bl	8009258 <HAL_GPIO_ReadPin>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10e      	bne.n	8005f02 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <checkAktifCalisma+0x15c8>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005eea:	2003      	movs	r0, #3
 8005eec:	f7fa fda0 	bl	8000a30 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	f7fa fd43 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005ef6:	f001 fbdb 	bl	80076b0 <convertAndSendData>
			basinchatasi=1;
 8005efa:	4b89      	ldr	r3, [pc, #548]	; (8006120 <checkAktifCalisma+0x15cc>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e015      	b.n	8005f2e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005f02:	4b87      	ldr	r3, [pc, #540]	; (8006120 <checkAktifCalisma+0x15cc>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <checkAktifCalisma+0x13da>
 8005f0a:	4b80      	ldr	r3, [pc, #512]	; (800610c <checkAktifCalisma+0x15b8>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10d      	bne.n	8005f2e <checkAktifCalisma+0x13da>
 8005f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f16:	4883      	ldr	r0, [pc, #524]	; (8006124 <checkAktifCalisma+0x15d0>)
 8005f18:	f003 f99e 	bl	8009258 <HAL_GPIO_ReadPin>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d105      	bne.n	8005f2e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005f22:	4b7f      	ldr	r3, [pc, #508]	; (8006120 <checkAktifCalisma+0x15cc>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005f28:	2003      	movs	r0, #3
 8005f2a:	f7fe fc41 	bl	80047b0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005f2e:	4b7e      	ldr	r3, [pc, #504]	; (8006128 <checkAktifCalisma+0x15d4>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <checkAktifCalisma+0x13ea>
 8005f36:	4b7d      	ldr	r3, [pc, #500]	; (800612c <checkAktifCalisma+0x15d8>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01e      	beq.n	8005f7c <checkAktifCalisma+0x1428>
 8005f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f42:	487b      	ldr	r0, [pc, #492]	; (8006130 <checkAktifCalisma+0x15dc>)
 8005f44:	f003 f988 	bl	8009258 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d116      	bne.n	8005f7c <checkAktifCalisma+0x1428>
 8005f4e:	4b79      	ldr	r3, [pc, #484]	; (8006134 <checkAktifCalisma+0x15e0>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d003      	beq.n	8005f5e <checkAktifCalisma+0x140a>
 8005f56:	4b77      	ldr	r3, [pc, #476]	; (8006134 <checkAktifCalisma+0x15e0>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d10e      	bne.n	8005f7c <checkAktifCalisma+0x1428>
			hataVar=1;
 8005f5e:	4b6f      	ldr	r3, [pc, #444]	; (800611c <checkAktifCalisma+0x15c8>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005f64:	2004      	movs	r0, #4
 8005f66:	f7fa fd63 	bl	8000a30 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005f6a:	2004      	movs	r0, #4
 8005f6c:	f7fa fd06 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005f70:	f001 fb9e 	bl	80076b0 <convertAndSendData>
			katkapisivicihatasi=1;
 8005f74:	4b70      	ldr	r3, [pc, #448]	; (8006138 <checkAktifCalisma+0x15e4>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e01f      	b.n	8005fbc <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005f7c:	4b6e      	ldr	r3, [pc, #440]	; (8006138 <checkAktifCalisma+0x15e4>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <checkAktifCalisma+0x1468>
 8005f84:	4b6d      	ldr	r3, [pc, #436]	; (800613c <checkAktifCalisma+0x15e8>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <checkAktifCalisma+0x1468>
 8005f8c:	4b66      	ldr	r3, [pc, #408]	; (8006128 <checkAktifCalisma+0x15d4>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f083 0301 	eor.w	r3, r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <checkAktifCalisma+0x1468>
 8005f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f9e:	4864      	ldr	r0, [pc, #400]	; (8006130 <checkAktifCalisma+0x15dc>)
 8005fa0:	f003 f95a 	bl	8009258 <HAL_GPIO_ReadPin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005faa:	4b63      	ldr	r3, [pc, #396]	; (8006138 <checkAktifCalisma+0x15e4>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005fb0:	4b5e      	ldr	r3, [pc, #376]	; (800612c <checkAktifCalisma+0x15d8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005fb6:	2004      	movs	r0, #4
 8005fb8:	f7fe fbfa 	bl	80047b0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fbc:	4b5a      	ldr	r3, [pc, #360]	; (8006128 <checkAktifCalisma+0x15d4>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <checkAktifCalisma+0x1478>
 8005fc4:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <checkAktifCalisma+0x15ec>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01e      	beq.n	800600a <checkAktifCalisma+0x14b6>
 8005fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fd0:	4857      	ldr	r0, [pc, #348]	; (8006130 <checkAktifCalisma+0x15dc>)
 8005fd2:	f003 f941 	bl	8009258 <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d116      	bne.n	800600a <checkAktifCalisma+0x14b6>
 8005fdc:	4b55      	ldr	r3, [pc, #340]	; (8006134 <checkAktifCalisma+0x15e0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d003      	beq.n	8005fec <checkAktifCalisma+0x1498>
 8005fe4:	4b53      	ldr	r3, [pc, #332]	; (8006134 <checkAktifCalisma+0x15e0>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d10e      	bne.n	800600a <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005fec:	4b4b      	ldr	r3, [pc, #300]	; (800611c <checkAktifCalisma+0x15c8>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8005ff2:	2005      	movs	r0, #5
 8005ff4:	f7fa fd1c 	bl	8000a30 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005ff8:	2005      	movs	r0, #5
 8005ffa:	f7fa fcbf 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005ffe:	f001 fb57 	bl	80076b0 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006002:	4b50      	ldr	r3, [pc, #320]	; (8006144 <checkAktifCalisma+0x15f0>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e023      	b.n	8006052 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800600a:	4b4e      	ldr	r3, [pc, #312]	; (8006144 <checkAktifCalisma+0x15f0>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01f      	beq.n	8006052 <checkAktifCalisma+0x14fe>
 8006012:	4b4a      	ldr	r3, [pc, #296]	; (800613c <checkAktifCalisma+0x15e8>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01b      	beq.n	8006052 <checkAktifCalisma+0x14fe>
 800601a:	4b43      	ldr	r3, [pc, #268]	; (8006128 <checkAktifCalisma+0x15d4>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f083 0301 	eor.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d014      	beq.n	8006052 <checkAktifCalisma+0x14fe>
 8006028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800602c:	4840      	ldr	r0, [pc, #256]	; (8006130 <checkAktifCalisma+0x15dc>)
 800602e:	f003 f913 	bl	8009258 <HAL_GPIO_ReadPin>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10c      	bne.n	8006052 <checkAktifCalisma+0x14fe>
 8006038:	4b40      	ldr	r3, [pc, #256]	; (800613c <checkAktifCalisma+0x15e8>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006040:	4b40      	ldr	r3, [pc, #256]	; (8006144 <checkAktifCalisma+0x15f0>)
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006046:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <checkAktifCalisma+0x15ec>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800604c:	2005      	movs	r0, #5
 800604e:	f7fe fbaf 	bl	80047b0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006052:	4b30      	ldr	r3, [pc, #192]	; (8006114 <checkAktifCalisma+0x15c0>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d107      	bne.n	800606a <checkAktifCalisma+0x1516>
 800605a:	4b2a      	ldr	r3, [pc, #168]	; (8006104 <checkAktifCalisma+0x15b0>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d103      	bne.n	800606a <checkAktifCalisma+0x1516>
 8006062:	4b39      	ldr	r3, [pc, #228]	; (8006148 <checkAktifCalisma+0x15f4>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800606a:	4b38      	ldr	r3, [pc, #224]	; (800614c <checkAktifCalisma+0x15f8>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b38      	ldr	r3, [pc, #224]	; (8006150 <checkAktifCalisma+0x15fc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	4a37      	ldr	r2, [pc, #220]	; (8006154 <checkAktifCalisma+0x1600>)
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	4293      	cmp	r3, r2
 800607a:	d30d      	bcc.n	8006098 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <checkAktifCalisma+0x15c8>)
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006082:	2006      	movs	r0, #6
 8006084:	f7fa fcd4 	bl	8000a30 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006088:	2006      	movs	r0, #6
 800608a:	f7fa fc77 	bl	800097c <hata2EEPROM>
			  	convertAndSendData();
 800608e:	f001 fb0f 	bl	80076b0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <checkAktifCalisma+0x1604>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006098:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <checkAktifCalisma+0x1604>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <checkAktifCalisma+0x1574>
 80060a0:	2108      	movs	r1, #8
 80060a2:	4823      	ldr	r0, [pc, #140]	; (8006130 <checkAktifCalisma+0x15dc>)
 80060a4:	f003 f8d8 	bl	8009258 <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <checkAktifCalisma+0x1574>
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <checkAktifCalisma+0x15d4>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f083 0301 	eor.w	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80060bc:	4b26      	ldr	r3, [pc, #152]	; (8006158 <checkAktifCalisma+0x1604>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80060c2:	2006      	movs	r0, #6
 80060c4:	f7fe fb74 	bl	80047b0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80060c8:	4b24      	ldr	r3, [pc, #144]	; (800615c <checkAktifCalisma+0x1608>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <checkAktifCalisma+0x1594>
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <checkAktifCalisma+0x15b0>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <checkAktifCalisma+0x1594>
 80060d8:	4b21      	ldr	r3, [pc, #132]	; (8006160 <checkAktifCalisma+0x160c>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <checkAktifCalisma+0x1594>
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <checkAktifCalisma+0x15f4>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03f      	beq.n	8006168 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <checkAktifCalisma+0x1610>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <checkAktifCalisma+0x15d8>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <checkAktifCalisma+0x15ec>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e03c      	b.n	8006176 <checkAktifCalisma+0x1622>
 80060fc:	20000271 	.word	0x20000271
 8006100:	20000277 	.word	0x20000277
 8006104:	20000258 	.word	0x20000258
 8006108:	20000281 	.word	0x20000281
 800610c:	20000223 	.word	0x20000223
 8006110:	20000227 	.word	0x20000227
 8006114:	20000274 	.word	0x20000274
 8006118:	40011000 	.word	0x40011000
 800611c:	20000275 	.word	0x20000275
 8006120:	2000027e 	.word	0x2000027e
 8006124:	40010c00 	.word	0x40010c00
 8006128:	2000026e 	.word	0x2000026e
 800612c:	20000282 	.word	0x20000282
 8006130:	40010800 	.word	0x40010800
 8006134:	20000228 	.word	0x20000228
 8006138:	2000027f 	.word	0x2000027f
 800613c:	20000262 	.word	0x20000262
 8006140:	20000283 	.word	0x20000283
 8006144:	20000280 	.word	0x20000280
 8006148:	20000257 	.word	0x20000257
 800614c:	200001fc 	.word	0x200001fc
 8006150:	20000210 	.word	0x20000210
 8006154:	20000238 	.word	0x20000238
 8006158:	2000026f 	.word	0x2000026f
 800615c:	20000255 	.word	0x20000255
 8006160:	20000256 	.word	0x20000256
 8006164:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <checkAktifCalisma+0x1690>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <checkAktifCalisma+0x1694>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <checkAktifCalisma+0x1698>)
 8006174:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006176:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <checkAktifCalisma+0x169c>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02f      	beq.n	80061de <checkAktifCalisma+0x168a>
 800617e:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <checkAktifCalisma+0x16a0>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f083 0301 	eor.w	r3, r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <checkAktifCalisma+0x168a>
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <checkAktifCalisma+0x16a4>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d021      	beq.n	80061de <checkAktifCalisma+0x168a>
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <checkAktifCalisma+0x16a8>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f083 0301 	eor.w	r3, r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01a      	beq.n	80061de <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80061a8:	4b15      	ldr	r3, [pc, #84]	; (8006200 <checkAktifCalisma+0x16ac>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f083 0301 	eor.w	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d013      	beq.n	80061de <checkAktifCalisma+0x168a>
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <checkAktifCalisma+0x16b0>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f083 0301 	eor.w	r3, r3, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <checkAktifCalisma+0x168a>
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <checkAktifCalisma+0x16b4>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f083 0301 	eor.w	r3, r3, #1
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <checkAktifCalisma+0x168a>
			hataVar=0;
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <checkAktifCalisma+0x169c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80061d8:	2007      	movs	r0, #7
 80061da:	f7fe fae9 	bl	80047b0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000276 	.word	0x20000276
 80061e8:	200001fc 	.word	0x200001fc
 80061ec:	20000210 	.word	0x20000210
 80061f0:	20000275 	.word	0x20000275
 80061f4:	20000270 	.word	0x20000270
 80061f8:	20000271 	.word	0x20000271
 80061fc:	2000027e 	.word	0x2000027e
 8006200:	2000027f 	.word	0x2000027f
 8006204:	20000280 	.word	0x20000280
 8006208:	2000026f 	.word	0x2000026f

0800620c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006210:	4b8b      	ldr	r3, [pc, #556]	; (8006440 <checkDemoModCalisma+0x234>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	f040 8229 	bne.w	800666c <checkDemoModCalisma+0x460>
 800621a:	4b8a      	ldr	r3, [pc, #552]	; (8006444 <checkDemoModCalisma+0x238>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8224 	beq.w	800666c <checkDemoModCalisma+0x460>
 8006224:	4b88      	ldr	r3, [pc, #544]	; (8006448 <checkDemoModCalisma+0x23c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f040 821f 	bne.w	800666c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800622e:	2102      	movs	r1, #2
 8006230:	4886      	ldr	r0, [pc, #536]	; (800644c <checkDemoModCalisma+0x240>)
 8006232:	f003 f811 	bl	8009258 <HAL_GPIO_ReadPin>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11d      	bne.n	8006278 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800623c:	4b84      	ldr	r3, [pc, #528]	; (8006450 <checkDemoModCalisma+0x244>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f083 0301 	eor.w	r3, r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800624a:	4b82      	ldr	r3, [pc, #520]	; (8006454 <checkDemoModCalisma+0x248>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f083 0301 	eor.w	r3, r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006258:	4b7f      	ldr	r3, [pc, #508]	; (8006458 <checkDemoModCalisma+0x24c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f083 0301 	eor.w	r3, r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006266:	2201      	movs	r2, #1
 8006268:	2104      	movs	r1, #4
 800626a:	487c      	ldr	r0, [pc, #496]	; (800645c <checkDemoModCalisma+0x250>)
 800626c:	f003 f80b 	bl	8009286 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006270:	4b7b      	ldr	r3, [pc, #492]	; (8006460 <checkDemoModCalisma+0x254>)
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e00e      	b.n	8006296 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006278:	2102      	movs	r1, #2
 800627a:	4874      	ldr	r0, [pc, #464]	; (800644c <checkDemoModCalisma+0x240>)
 800627c:	f002 ffec 	bl	8009258 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d107      	bne.n	8006296 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006286:	2200      	movs	r2, #0
 8006288:	2104      	movs	r1, #4
 800628a:	4874      	ldr	r0, [pc, #464]	; (800645c <checkDemoModCalisma+0x250>)
 800628c:	f002 fffb 	bl	8009286 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006290:	4b73      	ldr	r3, [pc, #460]	; (8006460 <checkDemoModCalisma+0x254>)
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006296:	4b72      	ldr	r3, [pc, #456]	; (8006460 <checkDemoModCalisma+0x254>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <checkDemoModCalisma+0xaa>
 800629e:	4b6d      	ldr	r3, [pc, #436]	; (8006454 <checkDemoModCalisma+0x248>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d107      	bne.n	80062b6 <checkDemoModCalisma+0xaa>
 80062a6:	4b6c      	ldr	r3, [pc, #432]	; (8006458 <checkDemoModCalisma+0x24c>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <checkDemoModCalisma+0xaa>
 80062ae:	4b68      	ldr	r3, [pc, #416]	; (8006450 <checkDemoModCalisma+0x244>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00c      	beq.n	80062d0 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80062b6:	2201      	movs	r2, #1
 80062b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062bc:	4867      	ldr	r0, [pc, #412]	; (800645c <checkDemoModCalisma+0x250>)
 80062be:	f002 ffe2 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80062c2:	2201      	movs	r2, #1
 80062c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062c8:	4864      	ldr	r0, [pc, #400]	; (800645c <checkDemoModCalisma+0x250>)
 80062ca:	f002 ffdc 	bl	8009286 <HAL_GPIO_WritePin>
 80062ce:	e00b      	b.n	80062e8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062d6:	4861      	ldr	r0, [pc, #388]	; (800645c <checkDemoModCalisma+0x250>)
 80062d8:	f002 ffd5 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062e2:	485e      	ldr	r0, [pc, #376]	; (800645c <checkDemoModCalisma+0x250>)
 80062e4:	f002 ffcf 	bl	8009286 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062e8:	2102      	movs	r1, #2
 80062ea:	4858      	ldr	r0, [pc, #352]	; (800644c <checkDemoModCalisma+0x240>)
 80062ec:	f002 ffb4 	bl	8009258 <HAL_GPIO_ReadPin>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10d      	bne.n	8006312 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80062f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062fa:	4854      	ldr	r0, [pc, #336]	; (800644c <checkDemoModCalisma+0x240>)
 80062fc:	f002 ffac 	bl	8009258 <HAL_GPIO_ReadPin>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006306:	4b56      	ldr	r3, [pc, #344]	; (8006460 <checkDemoModCalisma+0x254>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f083 0301 	eor.w	r3, r3, #1
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006312:	2102      	movs	r1, #2
 8006314:	484d      	ldr	r0, [pc, #308]	; (800644c <checkDemoModCalisma+0x240>)
 8006316:	f002 ff9f 	bl	8009258 <HAL_GPIO_ReadPin>
 800631a:	4603      	mov	r3, r0
 800631c:	2b01      	cmp	r3, #1
 800631e:	d125      	bne.n	800636c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006324:	4849      	ldr	r0, [pc, #292]	; (800644c <checkDemoModCalisma+0x240>)
 8006326:	f002 ff97 	bl	8009258 <HAL_GPIO_ReadPin>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11d      	bne.n	800636c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006330:	4b4b      	ldr	r3, [pc, #300]	; (8006460 <checkDemoModCalisma+0x254>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f083 0301 	eor.w	r3, r3, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800633e:	4b44      	ldr	r3, [pc, #272]	; (8006450 <checkDemoModCalisma+0x244>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f083 0301 	eor.w	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00f      	beq.n	800636c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800634c:	4b42      	ldr	r3, [pc, #264]	; (8006458 <checkDemoModCalisma+0x24c>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	2120      	movs	r1, #32
 800635e:	483b      	ldr	r0, [pc, #236]	; (800644c <checkDemoModCalisma+0x240>)
 8006360:	f002 ff91 	bl	8009286 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006364:	4b3b      	ldr	r3, [pc, #236]	; (8006454 <checkDemoModCalisma+0x248>)
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e007      	b.n	800637c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800636c:	2200      	movs	r2, #0
 800636e:	2120      	movs	r1, #32
 8006370:	4836      	ldr	r0, [pc, #216]	; (800644c <checkDemoModCalisma+0x240>)
 8006372:	f002 ff88 	bl	8009286 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006376:	4b37      	ldr	r3, [pc, #220]	; (8006454 <checkDemoModCalisma+0x248>)
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800637c:	2102      	movs	r1, #2
 800637e:	4833      	ldr	r0, [pc, #204]	; (800644c <checkDemoModCalisma+0x240>)
 8006380:	f002 ff6a 	bl	8009258 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d125      	bne.n	80063d6 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800638a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800638e:	482f      	ldr	r0, [pc, #188]	; (800644c <checkDemoModCalisma+0x240>)
 8006390:	f002 ff62 	bl	8009258 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11d      	bne.n	80063d6 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <checkDemoModCalisma+0x254>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f083 0301 	eor.w	r3, r3, #1
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <checkDemoModCalisma+0x248>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f083 0301 	eor.w	r3, r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00f      	beq.n	80063d6 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80063b6:	4b26      	ldr	r3, [pc, #152]	; (8006450 <checkDemoModCalisma+0x244>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f083 0301 	eor.w	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80063c4:	2201      	movs	r2, #1
 80063c6:	2110      	movs	r1, #16
 80063c8:	4820      	ldr	r0, [pc, #128]	; (800644c <checkDemoModCalisma+0x240>)
 80063ca:	f002 ff5c 	bl	8009286 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <checkDemoModCalisma+0x24c>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e007      	b.n	80063e6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2110      	movs	r1, #16
 80063da:	481c      	ldr	r0, [pc, #112]	; (800644c <checkDemoModCalisma+0x240>)
 80063dc:	f002 ff53 	bl	8009286 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <checkDemoModCalisma+0x24c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063e6:	2104      	movs	r1, #4
 80063e8:	4818      	ldr	r0, [pc, #96]	; (800644c <checkDemoModCalisma+0x240>)
 80063ea:	f002 ff35 	bl	8009258 <HAL_GPIO_ReadPin>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d139      	bne.n	8006468 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <checkDemoModCalisma+0x254>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f083 0301 	eor.w	r3, r3, #1
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d032      	beq.n	8006468 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <checkDemoModCalisma+0x24c>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f083 0301 	eor.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02b      	beq.n	8006468 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <checkDemoModCalisma+0x248>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d024      	beq.n	8006468 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800641e:	2201      	movs	r2, #1
 8006420:	2102      	movs	r1, #2
 8006422:	480e      	ldr	r0, [pc, #56]	; (800645c <checkDemoModCalisma+0x250>)
 8006424:	f002 ff2f 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006428:	2201      	movs	r2, #1
 800642a:	2101      	movs	r1, #1
 800642c:	480b      	ldr	r0, [pc, #44]	; (800645c <checkDemoModCalisma+0x250>)
 800642e:	f002 ff2a 	bl	8009286 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <checkDemoModCalisma+0x244>)
 8006434:	2201      	movs	r2, #1
 8006436:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <checkDemoModCalisma+0x258>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e027      	b.n	8006490 <checkDemoModCalisma+0x284>
 8006440:	2000023e 	.word	0x2000023e
 8006444:	20000272 	.word	0x20000272
 8006448:	2000023d 	.word	0x2000023d
 800644c:	40011000 	.word	0x40011000
 8006450:	20000279 	.word	0x20000279
 8006454:	2000027a 	.word	0x2000027a
 8006458:	2000027b 	.word	0x2000027b
 800645c:	40010c00 	.word	0x40010c00
 8006460:	20000278 	.word	0x20000278
 8006464:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006468:	2104      	movs	r1, #4
 800646a:	48a0      	ldr	r0, [pc, #640]	; (80066ec <checkDemoModCalisma+0x4e0>)
 800646c:	f002 fef4 	bl	8009258 <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10c      	bne.n	8006490 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006476:	2200      	movs	r2, #0
 8006478:	2102      	movs	r1, #2
 800647a:	489d      	ldr	r0, [pc, #628]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 800647c:	f002 ff03 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006480:	2200      	movs	r2, #0
 8006482:	2101      	movs	r1, #1
 8006484:	489a      	ldr	r0, [pc, #616]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 8006486:	f002 fefe 	bl	8009286 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800648a:	4b9a      	ldr	r3, [pc, #616]	; (80066f4 <checkDemoModCalisma+0x4e8>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006490:	2104      	movs	r1, #4
 8006492:	4896      	ldr	r0, [pc, #600]	; (80066ec <checkDemoModCalisma+0x4e0>)
 8006494:	f002 fee0 	bl	8009258 <HAL_GPIO_ReadPin>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10d      	bne.n	80064ba <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800649e:	2201      	movs	r2, #1
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	4895      	ldr	r0, [pc, #596]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80064a4:	f002 feef 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064a8:	2201      	movs	r2, #1
 80064aa:	2120      	movs	r1, #32
 80064ac:	4892      	ldr	r0, [pc, #584]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80064ae:	f002 feea 	bl	8009286 <HAL_GPIO_WritePin>
			timer3 = millis;
 80064b2:	4b92      	ldr	r3, [pc, #584]	; (80066fc <checkDemoModCalisma+0x4f0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a92      	ldr	r2, [pc, #584]	; (8006700 <checkDemoModCalisma+0x4f4>)
 80064b8:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80064ba:	4b90      	ldr	r3, [pc, #576]	; (80066fc <checkDemoModCalisma+0x4f0>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b90      	ldr	r3, [pc, #576]	; (8006700 <checkDemoModCalisma+0x4f4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d909      	bls.n	80064dc <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	488a      	ldr	r0, [pc, #552]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80064ce:	f002 feda 	bl	8009286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80064d2:	2200      	movs	r2, #0
 80064d4:	2120      	movs	r1, #32
 80064d6:	4888      	ldr	r0, [pc, #544]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80064d8:	f002 fed5 	bl	8009286 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064dc:	2102      	movs	r1, #2
 80064de:	4883      	ldr	r0, [pc, #524]	; (80066ec <checkDemoModCalisma+0x4e0>)
 80064e0:	f002 feba 	bl	8009258 <HAL_GPIO_ReadPin>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d108      	bne.n	80064fc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80064ea:	2201      	movs	r2, #1
 80064ec:	2140      	movs	r1, #64	; 0x40
 80064ee:	4882      	ldr	r0, [pc, #520]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80064f0:	f002 fec9 	bl	8009286 <HAL_GPIO_WritePin>
			timer3 = millis;
 80064f4:	4b81      	ldr	r3, [pc, #516]	; (80066fc <checkDemoModCalisma+0x4f0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a81      	ldr	r2, [pc, #516]	; (8006700 <checkDemoModCalisma+0x4f4>)
 80064fa:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80064fc:	4b7f      	ldr	r3, [pc, #508]	; (80066fc <checkDemoModCalisma+0x4f0>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b7f      	ldr	r3, [pc, #508]	; (8006700 <checkDemoModCalisma+0x4f4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b04      	cmp	r3, #4
 8006508:	d904      	bls.n	8006514 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800650a:	2200      	movs	r2, #0
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	487a      	ldr	r0, [pc, #488]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 8006510:	f002 feb9 	bl	8009286 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006514:	4b7b      	ldr	r3, [pc, #492]	; (8006704 <checkDemoModCalisma+0x4f8>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d058      	beq.n	80065ce <checkDemoModCalisma+0x3c2>
 800651c:	4b7a      	ldr	r3, [pc, #488]	; (8006708 <checkDemoModCalisma+0x4fc>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d054      	beq.n	80065ce <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006524:	4b79      	ldr	r3, [pc, #484]	; (800670c <checkDemoModCalisma+0x500>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b77      	ldr	r3, [pc, #476]	; (800670c <checkDemoModCalisma+0x500>)
 800652e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006530:	4b76      	ldr	r3, [pc, #472]	; (800670c <checkDemoModCalisma+0x500>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d908      	bls.n	800654a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006538:	4b74      	ldr	r3, [pc, #464]	; (800670c <checkDemoModCalisma+0x500>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800653e:	4b74      	ldr	r3, [pc, #464]	; (8006710 <checkDemoModCalisma+0x504>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	3301      	adds	r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b72      	ldr	r3, [pc, #456]	; (8006710 <checkDemoModCalisma+0x504>)
 8006548:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800654a:	4b71      	ldr	r3, [pc, #452]	; (8006710 <checkDemoModCalisma+0x504>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b09      	cmp	r3, #9
 8006550:	d908      	bls.n	8006564 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006552:	4b6f      	ldr	r3, [pc, #444]	; (8006710 <checkDemoModCalisma+0x504>)
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006558:	4b6e      	ldr	r3, [pc, #440]	; (8006714 <checkDemoModCalisma+0x508>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b6c      	ldr	r3, [pc, #432]	; (8006714 <checkDemoModCalisma+0x508>)
 8006562:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006564:	4b6b      	ldr	r3, [pc, #428]	; (8006714 <checkDemoModCalisma+0x508>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b09      	cmp	r3, #9
 800656a:	d908      	bls.n	800657e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800656c:	4b69      	ldr	r3, [pc, #420]	; (8006714 <checkDemoModCalisma+0x508>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006572:	4b69      	ldr	r3, [pc, #420]	; (8006718 <checkDemoModCalisma+0x50c>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	b2da      	uxtb	r2, r3
 800657a:	4b67      	ldr	r3, [pc, #412]	; (8006718 <checkDemoModCalisma+0x50c>)
 800657c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800657e:	4b66      	ldr	r3, [pc, #408]	; (8006718 <checkDemoModCalisma+0x50c>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b09      	cmp	r3, #9
 8006584:	d908      	bls.n	8006598 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006586:	4b64      	ldr	r3, [pc, #400]	; (8006718 <checkDemoModCalisma+0x50c>)
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800658c:	4b63      	ldr	r3, [pc, #396]	; (800671c <checkDemoModCalisma+0x510>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	4b61      	ldr	r3, [pc, #388]	; (800671c <checkDemoModCalisma+0x510>)
 8006596:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006598:	4b60      	ldr	r3, [pc, #384]	; (800671c <checkDemoModCalisma+0x510>)
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	4b60      	ldr	r3, [pc, #384]	; (8006720 <checkDemoModCalisma+0x514>)
 800659e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80065a2:	4b5d      	ldr	r3, [pc, #372]	; (8006718 <checkDemoModCalisma+0x50c>)
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	4b5e      	ldr	r3, [pc, #376]	; (8006720 <checkDemoModCalisma+0x514>)
 80065a8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80065aa:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <checkDemoModCalisma+0x508>)
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	4b5c      	ldr	r3, [pc, #368]	; (8006720 <checkDemoModCalisma+0x514>)
 80065b0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80065b2:	4b57      	ldr	r3, [pc, #348]	; (8006710 <checkDemoModCalisma+0x504>)
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	4b5a      	ldr	r3, [pc, #360]	; (8006720 <checkDemoModCalisma+0x514>)
 80065b8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80065ba:	4b54      	ldr	r3, [pc, #336]	; (800670c <checkDemoModCalisma+0x500>)
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	4b58      	ldr	r3, [pc, #352]	; (8006720 <checkDemoModCalisma+0x514>)
 80065c0:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80065c2:	4b58      	ldr	r3, [pc, #352]	; (8006724 <checkDemoModCalisma+0x518>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80065c8:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <checkDemoModCalisma+0x4fc>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80065ce:	4b56      	ldr	r3, [pc, #344]	; (8006728 <checkDemoModCalisma+0x51c>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8087 	bne.w	80066e6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80065d8:	4a54      	ldr	r2, [pc, #336]	; (800672c <checkDemoModCalisma+0x520>)
 80065da:	2101      	movs	r1, #1
 80065dc:	2002      	movs	r0, #2
 80065de:	f001 fb15 	bl	8007c0c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80065e2:	4a53      	ldr	r2, [pc, #332]	; (8006730 <checkDemoModCalisma+0x524>)
 80065e4:	2101      	movs	r1, #1
 80065e6:	2001      	movs	r0, #1
 80065e8:	f001 fb10 	bl	8007c0c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80065ec:	4b4b      	ldr	r3, [pc, #300]	; (800671c <checkDemoModCalisma+0x510>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	4950      	ldr	r1, [pc, #320]	; (8006734 <checkDemoModCalisma+0x528>)
 80065f4:	4618      	mov	r0, r3
 80065f6:	f005 fe5b 	bl	800c2b0 <itoa>
			lcd_print(2,12,snum);
 80065fa:	4a4e      	ldr	r2, [pc, #312]	; (8006734 <checkDemoModCalisma+0x528>)
 80065fc:	210c      	movs	r1, #12
 80065fe:	2002      	movs	r0, #2
 8006600:	f001 fb04 	bl	8007c0c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006604:	4b44      	ldr	r3, [pc, #272]	; (8006718 <checkDemoModCalisma+0x50c>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	220a      	movs	r2, #10
 800660a:	494a      	ldr	r1, [pc, #296]	; (8006734 <checkDemoModCalisma+0x528>)
 800660c:	4618      	mov	r0, r3
 800660e:	f005 fe4f 	bl	800c2b0 <itoa>
			lcd_print(2,13,snum);
 8006612:	4a48      	ldr	r2, [pc, #288]	; (8006734 <checkDemoModCalisma+0x528>)
 8006614:	210d      	movs	r1, #13
 8006616:	2002      	movs	r0, #2
 8006618:	f001 faf8 	bl	8007c0c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800661c:	4b3d      	ldr	r3, [pc, #244]	; (8006714 <checkDemoModCalisma+0x508>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	220a      	movs	r2, #10
 8006622:	4944      	ldr	r1, [pc, #272]	; (8006734 <checkDemoModCalisma+0x528>)
 8006624:	4618      	mov	r0, r3
 8006626:	f005 fe43 	bl	800c2b0 <itoa>
			lcd_print(2,14,snum);
 800662a:	4a42      	ldr	r2, [pc, #264]	; (8006734 <checkDemoModCalisma+0x528>)
 800662c:	210e      	movs	r1, #14
 800662e:	2002      	movs	r0, #2
 8006630:	f001 faec 	bl	8007c0c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <checkDemoModCalisma+0x504>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	220a      	movs	r2, #10
 800663a:	493e      	ldr	r1, [pc, #248]	; (8006734 <checkDemoModCalisma+0x528>)
 800663c:	4618      	mov	r0, r3
 800663e:	f005 fe37 	bl	800c2b0 <itoa>
			lcd_print(2,15,snum);
 8006642:	4a3c      	ldr	r2, [pc, #240]	; (8006734 <checkDemoModCalisma+0x528>)
 8006644:	210f      	movs	r1, #15
 8006646:	2002      	movs	r0, #2
 8006648:	f001 fae0 	bl	8007c0c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800664c:	4b2f      	ldr	r3, [pc, #188]	; (800670c <checkDemoModCalisma+0x500>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	220a      	movs	r2, #10
 8006652:	4938      	ldr	r1, [pc, #224]	; (8006734 <checkDemoModCalisma+0x528>)
 8006654:	4618      	mov	r0, r3
 8006656:	f005 fe2b 	bl	800c2b0 <itoa>
			lcd_print(2,16,snum);
 800665a:	4a36      	ldr	r2, [pc, #216]	; (8006734 <checkDemoModCalisma+0x528>)
 800665c:	2110      	movs	r1, #16
 800665e:	2002      	movs	r0, #2
 8006660:	f001 fad4 	bl	8007c0c <lcd_print>
			mesajYazildi=1;
 8006664:	4b34      	ldr	r3, [pc, #208]	; (8006738 <checkDemoModCalisma+0x52c>)
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800666a:	e03c      	b.n	80066e6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800666c:	4b33      	ldr	r3, [pc, #204]	; (800673c <checkDemoModCalisma+0x530>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d003      	beq.n	800667c <checkDemoModCalisma+0x470>
 8006674:	4b2c      	ldr	r3, [pc, #176]	; (8006728 <checkDemoModCalisma+0x51c>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d134      	bne.n	80066e6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800667c:	2200      	movs	r2, #0
 800667e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006682:	481b      	ldr	r0, [pc, #108]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 8006684:	f002 fdff 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800668e:	4818      	ldr	r0, [pc, #96]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 8006690:	f002 fdf9 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006694:	2200      	movs	r2, #0
 8006696:	2104      	movs	r1, #4
 8006698:	4815      	ldr	r0, [pc, #84]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 800669a:	f002 fdf4 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800669e:	2200      	movs	r2, #0
 80066a0:	2102      	movs	r1, #2
 80066a2:	4813      	ldr	r0, [pc, #76]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 80066a4:	f002 fdef 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2101      	movs	r1, #1
 80066ac:	4810      	ldr	r0, [pc, #64]	; (80066f0 <checkDemoModCalisma+0x4e4>)
 80066ae:	f002 fdea 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066b2:	2200      	movs	r2, #0
 80066b4:	2120      	movs	r1, #32
 80066b6:	480d      	ldr	r0, [pc, #52]	; (80066ec <checkDemoModCalisma+0x4e0>)
 80066b8:	f002 fde5 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066bc:	2200      	movs	r2, #0
 80066be:	2110      	movs	r1, #16
 80066c0:	480a      	ldr	r0, [pc, #40]	; (80066ec <checkDemoModCalisma+0x4e0>)
 80066c2:	f002 fde0 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066c6:	2200      	movs	r2, #0
 80066c8:	2180      	movs	r1, #128	; 0x80
 80066ca:	480b      	ldr	r0, [pc, #44]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80066cc:	f002 fddb 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2140      	movs	r1, #64	; 0x40
 80066d4:	4808      	ldr	r0, [pc, #32]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80066d6:	f002 fdd6 	bl	8009286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066da:	2200      	movs	r2, #0
 80066dc:	2120      	movs	r1, #32
 80066de:	4806      	ldr	r0, [pc, #24]	; (80066f8 <checkDemoModCalisma+0x4ec>)
 80066e0:	f002 fdd1 	bl	8009286 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80066e4:	e7ff      	b.n	80066e6 <checkDemoModCalisma+0x4da>
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40011000 	.word	0x40011000
 80066f0:	40010c00 	.word	0x40010c00
 80066f4:	20000279 	.word	0x20000279
 80066f8:	40010800 	.word	0x40010800
 80066fc:	200001fc 	.word	0x200001fc
 8006700:	2000020c 	.word	0x2000020c
 8006704:	20000278 	.word	0x20000278
 8006708:	2000025e 	.word	0x2000025e
 800670c:	2000021d 	.word	0x2000021d
 8006710:	2000021e 	.word	0x2000021e
 8006714:	20000000 	.word	0x20000000
 8006718:	20000001 	.word	0x20000001
 800671c:	2000021f 	.word	0x2000021f
 8006720:	20000118 	.word	0x20000118
 8006724:	2000024c 	.word	0x2000024c
 8006728:	2000023d 	.word	0x2000023d
 800672c:	0800da68 	.word	0x0800da68
 8006730:	0800da74 	.word	0x0800da74
 8006734:	20000188 	.word	0x20000188
 8006738:	20000254 	.word	0x20000254
 800673c:	2000023e 	.word	0x2000023e

08006740 <mainLoop>:

void mainLoop() {
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006746:	f7fe f923 	bl	8004990 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800674a:	2101      	movs	r1, #1
 800674c:	48ac      	ldr	r0, [pc, #688]	; (8006a00 <mainLoop+0x2c0>)
 800674e:	f002 fd83 	bl	8009258 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d136      	bne.n	80067c6 <mainLoop+0x86>
 8006758:	2108      	movs	r1, #8
 800675a:	48aa      	ldr	r0, [pc, #680]	; (8006a04 <mainLoop+0x2c4>)
 800675c:	f002 fd7c 	bl	8009258 <HAL_GPIO_ReadPin>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d12f      	bne.n	80067c6 <mainLoop+0x86>
 8006766:	2102      	movs	r1, #2
 8006768:	48a5      	ldr	r0, [pc, #660]	; (8006a00 <mainLoop+0x2c0>)
 800676a:	f002 fd75 	bl	8009258 <HAL_GPIO_ReadPin>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d128      	bne.n	80067c6 <mainLoop+0x86>
 8006774:	2104      	movs	r1, #4
 8006776:	48a2      	ldr	r0, [pc, #648]	; (8006a00 <mainLoop+0x2c0>)
 8006778:	f002 fd6e 	bl	8009258 <HAL_GPIO_ReadPin>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d121      	bne.n	80067c6 <mainLoop+0x86>
 8006782:	2108      	movs	r1, #8
 8006784:	489e      	ldr	r0, [pc, #632]	; (8006a00 <mainLoop+0x2c0>)
 8006786:	f002 fd67 	bl	8009258 <HAL_GPIO_ReadPin>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11a      	bne.n	80067c6 <mainLoop+0x86>
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	489c      	ldr	r0, [pc, #624]	; (8006a04 <mainLoop+0x2c4>)
 8006794:	f002 fd60 	bl	8009258 <HAL_GPIO_ReadPin>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d113      	bne.n	80067c6 <mainLoop+0x86>
 800679e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067a2:	4898      	ldr	r0, [pc, #608]	; (8006a04 <mainLoop+0x2c4>)
 80067a4:	f002 fd58 	bl	8009258 <HAL_GPIO_ReadPin>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d10b      	bne.n	80067c6 <mainLoop+0x86>
 80067ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067b2:	4894      	ldr	r0, [pc, #592]	; (8006a04 <mainLoop+0x2c4>)
 80067b4:	f002 fd50 	bl	8009258 <HAL_GPIO_ReadPin>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d103      	bne.n	80067c6 <mainLoop+0x86>
			butonKontrol=0;
 80067be:	4b92      	ldr	r3, [pc, #584]	; (8006a08 <mainLoop+0x2c8>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e003      	b.n	80067ce <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80067c6:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <mainLoop+0x2cc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a91      	ldr	r2, [pc, #580]	; (8006a10 <mainLoop+0x2d0>)
 80067cc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80067ce:	4b91      	ldr	r3, [pc, #580]	; (8006a14 <mainLoop+0x2d4>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d03a      	beq.n	800684c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80067d6:	bf00      	nop
 80067d8:	488f      	ldr	r0, [pc, #572]	; (8006a18 <mainLoop+0x2d8>)
 80067da:	f003 fb66 	bl	8009eaa <HAL_I2C_GetError>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d0f9      	beq.n	80067d8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80067e4:	bf00      	nop
 80067e6:	488c      	ldr	r0, [pc, #560]	; (8006a18 <mainLoop+0x2d8>)
 80067e8:	f003 fb52 	bl	8009e90 <HAL_I2C_GetState>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d1f9      	bne.n	80067e6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80067f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	236e      	movs	r3, #110	; 0x6e
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	4b87      	ldr	r3, [pc, #540]	; (8006a1c <mainLoop+0x2dc>)
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	236e      	movs	r3, #110	; 0x6e
 8006802:	2200      	movs	r2, #0
 8006804:	21a0      	movs	r1, #160	; 0xa0
 8006806:	4884      	ldr	r0, [pc, #528]	; (8006a18 <mainLoop+0x2d8>)
 8006808:	f002 ffe0 	bl	80097cc <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 800680c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006810:	f001 ff52 	bl	80086b8 <HAL_Delay>

		  hafizaYaz=0;
 8006814:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <mainLoop+0x2d4>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800681a:	4b81      	ldr	r3, [pc, #516]	; (8006a20 <mainLoop+0x2e0>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006822:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <mainLoop+0x2e4>)
 8006824:	2101      	movs	r1, #1
 8006826:	2002      	movs	r0, #2
 8006828:	f001 f9f0 	bl	8007c0c <lcd_print>
 800682c:	e008      	b.n	8006840 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800682e:	4b7c      	ldr	r3, [pc, #496]	; (8006a20 <mainLoop+0x2e0>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d104      	bne.n	8006840 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006836:	4a7c      	ldr	r2, [pc, #496]	; (8006a28 <mainLoop+0x2e8>)
 8006838:	2101      	movs	r1, #1
 800683a:	2002      	movs	r0, #2
 800683c:	f001 f9e6 	bl	8007c0c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006844:	f001 ff38 	bl	80086b8 <HAL_Delay>
		  lcd_clear();
 8006848:	f001 fa0c 	bl	8007c64 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800684c:	4b77      	ldr	r3, [pc, #476]	; (8006a2c <mainLoop+0x2ec>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d06d      	beq.n	8006936 <mainLoop+0x1f6>
 800685a:	486f      	ldr	r0, [pc, #444]	; (8006a18 <mainLoop+0x2d8>)
 800685c:	f003 fb18 	bl	8009e90 <HAL_I2C_GetState>
 8006860:	4603      	mov	r3, r0
 8006862:	2b20      	cmp	r3, #32
 8006864:	d167      	bne.n	8006936 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006866:	4b72      	ldr	r3, [pc, #456]	; (8006a30 <mainLoop+0x2f0>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f083 0301 	eor.w	r3, r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d044      	beq.n	80068fe <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006874:	4a6f      	ldr	r2, [pc, #444]	; (8006a34 <mainLoop+0x2f4>)
 8006876:	2101      	movs	r1, #1
 8006878:	2001      	movs	r0, #1
 800687a:	f001 f9c7 	bl	8007c0c <lcd_print>
			  if(dilSecim==0) {
 800687e:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <mainLoop+0x2e0>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006886:	4a6c      	ldr	r2, [pc, #432]	; (8006a38 <mainLoop+0x2f8>)
 8006888:	2101      	movs	r1, #1
 800688a:	2002      	movs	r0, #2
 800688c:	f001 f9be 	bl	8007c0c <lcd_print>
 8006890:	e008      	b.n	80068a4 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006892:	4b63      	ldr	r3, [pc, #396]	; (8006a20 <mainLoop+0x2e0>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d104      	bne.n	80068a4 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800689a:	4a68      	ldr	r2, [pc, #416]	; (8006a3c <mainLoop+0x2fc>)
 800689c:	2101      	movs	r1, #1
 800689e:	2002      	movs	r0, #2
 80068a0:	f001 f9b4 	bl	8007c0c <lcd_print>
			  }
			  HAL_Delay(1000);
 80068a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068a8:	f001 ff06 	bl	80086b8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068ac:	bf00      	nop
 80068ae:	485a      	ldr	r0, [pc, #360]	; (8006a18 <mainLoop+0x2d8>)
 80068b0:	f003 fafb 	bl	8009eaa <HAL_I2C_GetError>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d0f9      	beq.n	80068ae <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80068ba:	e003      	b.n	80068c4 <mainLoop+0x184>
				  HAL_Delay(1000);
 80068bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068c0:	f001 fefa 	bl	80086b8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80068c4:	4854      	ldr	r0, [pc, #336]	; (8006a18 <mainLoop+0x2d8>)
 80068c6:	f003 fae3 	bl	8009e90 <HAL_I2C_GetState>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d1f5      	bne.n	80068bc <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80068d0:	4b53      	ldr	r3, [pc, #332]	; (8006a20 <mainLoop+0x2e0>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80068d8:	4a59      	ldr	r2, [pc, #356]	; (8006a40 <mainLoop+0x300>)
 80068da:	2101      	movs	r1, #1
 80068dc:	2002      	movs	r0, #2
 80068de:	f001 f995 	bl	8007c0c <lcd_print>
 80068e2:	e008      	b.n	80068f6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80068e4:	4b4e      	ldr	r3, [pc, #312]	; (8006a20 <mainLoop+0x2e0>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d104      	bne.n	80068f6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80068ec:	4a55      	ldr	r2, [pc, #340]	; (8006a44 <mainLoop+0x304>)
 80068ee:	2101      	movs	r1, #1
 80068f0:	2002      	movs	r0, #2
 80068f2:	f001 f98b 	bl	8007c0c <lcd_print>
			  }

			  ilkOkuma=1;
 80068f6:	4b4e      	ldr	r3, [pc, #312]	; (8006a30 <mainLoop+0x2f0>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e014      	b.n	8006928 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80068fe:	4b48      	ldr	r3, [pc, #288]	; (8006a20 <mainLoop+0x2e0>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006906:	4a50      	ldr	r2, [pc, #320]	; (8006a48 <mainLoop+0x308>)
 8006908:	2101      	movs	r1, #1
 800690a:	2002      	movs	r0, #2
 800690c:	f001 f97e 	bl	8007c0c <lcd_print>
 8006910:	e008      	b.n	8006924 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006912:	4b43      	ldr	r3, [pc, #268]	; (8006a20 <mainLoop+0x2e0>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d104      	bne.n	8006924 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 800691a:	4a4c      	ldr	r2, [pc, #304]	; (8006a4c <mainLoop+0x30c>)
 800691c:	2101      	movs	r1, #1
 800691e:	2002      	movs	r0, #2
 8006920:	f001 f974 	bl	8007c0c <lcd_print>
			  }
			  lcd_clear();
 8006924:	f001 f99e 	bl	8007c64 <lcd_clear>
		  }

		  lcd_clear();
 8006928:	f001 f99c 	bl	8007c64 <lcd_clear>

		  eepromKontrol();
 800692c:	f7f9 fc82 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006930:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <mainLoop+0x2ec>)
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006936:	4b46      	ldr	r3, [pc, #280]	; (8006a50 <mainLoop+0x310>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d11c      	bne.n	8006978 <mainLoop+0x238>
 800693e:	4b45      	ldr	r3, [pc, #276]	; (8006a54 <mainLoop+0x314>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f083 0301 	eor.w	r3, r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d015      	beq.n	8006978 <mainLoop+0x238>
 800694c:	4b42      	ldr	r3, [pc, #264]	; (8006a58 <mainLoop+0x318>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d111      	bne.n	8006978 <mainLoop+0x238>
			lcd_clear();
 8006954:	f001 f986 	bl	8007c64 <lcd_clear>
			HAL_Delay(10);
 8006958:	200a      	movs	r0, #10
 800695a:	f001 fead 	bl	80086b8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800695e:	4a3f      	ldr	r2, [pc, #252]	; (8006a5c <mainLoop+0x31c>)
 8006960:	2101      	movs	r1, #1
 8006962:	2001      	movs	r0, #1
 8006964:	f001 f952 	bl	8007c0c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006968:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <mainLoop+0x320>)
 800696a:	2101      	movs	r1, #1
 800696c:	2002      	movs	r0, #2
 800696e:	f001 f94d 	bl	8007c0c <lcd_print>
			mesajYazildi=1;
 8006972:	4b38      	ldr	r3, [pc, #224]	; (8006a54 <mainLoop+0x314>)
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006978:	4b35      	ldr	r3, [pc, #212]	; (8006a50 <mainLoop+0x310>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d112      	bne.n	80069a6 <mainLoop+0x266>
 8006980:	2102      	movs	r1, #2
 8006982:	481f      	ldr	r0, [pc, #124]	; (8006a00 <mainLoop+0x2c0>)
 8006984:	f002 fc68 	bl	8009258 <HAL_GPIO_ReadPin>
 8006988:	4603      	mov	r3, r0
 800698a:	2b01      	cmp	r3, #1
 800698c:	d10b      	bne.n	80069a6 <mainLoop+0x266>
 800698e:	2104      	movs	r1, #4
 8006990:	481b      	ldr	r0, [pc, #108]	; (8006a00 <mainLoop+0x2c0>)
 8006992:	f002 fc61 	bl	8009258 <HAL_GPIO_ReadPin>
 8006996:	4603      	mov	r3, r0
 8006998:	2b01      	cmp	r3, #1
 800699a:	d104      	bne.n	80069a6 <mainLoop+0x266>
			menuGiris=1;
 800699c:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <mainLoop+0x310>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80069a2:	f001 f95f 	bl	8007c64 <lcd_clear>
		}

		if(menuGiris==1) {
 80069a6:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <mainLoop+0x310>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <mainLoop+0x272>
			menu();
 80069ae:	f7fa fb7d 	bl	80010ac <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80069b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069b6:	4813      	ldr	r0, [pc, #76]	; (8006a04 <mainLoop+0x2c4>)
 80069b8:	f002 fc7d 	bl	80092b6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80069bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069c0:	4828      	ldr	r0, [pc, #160]	; (8006a64 <mainLoop+0x324>)
 80069c2:	f002 fc49 	bl	8009258 <HAL_GPIO_ReadPin>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <mainLoop+0x2a2>
 80069cc:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <mainLoop+0x328>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f083 0301 	eor.w	r3, r3, #1
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <mainLoop+0x2a2>
			stopVar=1;
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <mainLoop+0x32c>)
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e002      	b.n	80069e8 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 80069e2:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <mainLoop+0x32c>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80069e8:	f7fd ffe8 	bl	80049bc <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80069ec:	f7fe f81a 	bl	8004a24 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80069f0:	f7fe f85e 	bl	8004ab0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80069f4:	f7fe f8ae 	bl	8004b54 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80069f8:	f7ff fc08 	bl	800620c <checkDemoModCalisma>
		checkLCDBacklight();
 80069fc:	e6a3      	b.n	8006746 <mainLoop+0x6>
 80069fe:	bf00      	nop
 8006a00:	40010800 	.word	0x40010800
 8006a04:	40011000 	.word	0x40011000
 8006a08:	2000024f 	.word	0x2000024f
 8006a0c:	200001fc 	.word	0x200001fc
 8006a10:	20000218 	.word	0x20000218
 8006a14:	2000024c 	.word	0x2000024c
 8006a18:	200003a8 	.word	0x200003a8
 8006a1c:	20000118 	.word	0x20000118
 8006a20:	20000241 	.word	0x20000241
 8006a24:	0800da88 	.word	0x0800da88
 8006a28:	0800da9c 	.word	0x0800da9c
 8006a2c:	2000024d 	.word	0x2000024d
 8006a30:	2000024e 	.word	0x2000024e
 8006a34:	0800dab0 	.word	0x0800dab0
 8006a38:	0800dac4 	.word	0x0800dac4
 8006a3c:	0800dad8 	.word	0x0800dad8
 8006a40:	0800daec 	.word	0x0800daec
 8006a44:	0800db00 	.word	0x0800db00
 8006a48:	0800db14 	.word	0x0800db14
 8006a4c:	0800db28 	.word	0x0800db28
 8006a50:	2000023d 	.word	0x2000023d
 8006a54:	20000254 	.word	0x20000254
 8006a58:	2000023e 	.word	0x2000023e
 8006a5c:	0800db3c 	.word	0x0800db3c
 8006a60:	0800db50 	.word	0x0800db50
 8006a64:	40010c00 	.word	0x40010c00
 8006a68:	20000275 	.word	0x20000275
 8006a6c:	20000272 	.word	0x20000272

08006a70 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006a76:	2001      	movs	r0, #1
 8006a78:	f001 f926 	bl	8007cc8 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006a7c:	2305      	movs	r3, #5
 8006a7e:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006a80:	2303      	movs	r3, #3
 8006a82:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006a84:	2300      	movs	r3, #0
 8006a86:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006a88:	4ba7      	ldr	r3, [pc, #668]	; (8006d28 <takeMachineID+0x2b8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006a8e:	220c      	movs	r2, #12
 8006a90:	2100      	movs	r1, #0
 8006a92:	48a6      	ldr	r0, [pc, #664]	; (8006d2c <takeMachineID+0x2bc>)
 8006a94:	f005 fd33 	bl	800c4fe <memset>
    memset(machineIDInt, 0, sizeof(machineIDInt));
 8006a98:	220c      	movs	r2, #12
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	48a4      	ldr	r0, [pc, #656]	; (8006d30 <takeMachineID+0x2c0>)
 8006a9e:	f005 fd2e 	bl	800c4fe <memset>
    memset(&eepromData[idStartPos], 0, 12);
 8006aa2:	4ba1      	ldr	r3, [pc, #644]	; (8006d28 <takeMachineID+0x2b8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4aa3      	ldr	r2, [pc, #652]	; (8006d34 <takeMachineID+0x2c4>)
 8006aa8:	4413      	add	r3, r2
 8006aaa:	220c      	movs	r2, #12
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f005 fd25 	bl	800c4fe <memset>
    //resetEEPROM4Wifi(1);
    HAL_Delay(100);
 8006ab4:	2064      	movs	r0, #100	; 0x64
 8006ab6:	f001 fdff 	bl	80086b8 <HAL_Delay>

    printTemplate(1, 0);
 8006aba:	2100      	movs	r1, #0
 8006abc:	2001      	movs	r0, #1
 8006abe:	f7fa f969 	bl	8000d94 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ac2:	2108      	movs	r1, #8
 8006ac4:	489c      	ldr	r0, [pc, #624]	; (8006d38 <takeMachineID+0x2c8>)
 8006ac6:	f002 fbc7 	bl	8009258 <HAL_GPIO_ReadPin>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d12b      	bne.n	8006b28 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f001 f8f9 	bl	8007cc8 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006ad6:	4895      	ldr	r0, [pc, #596]	; (8006d2c <takeMachineID+0x2bc>)
 8006ad8:	f7f9 fba4 	bl	8000224 <strlen>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b0c      	cmp	r3, #12
 8006ae0:	d010      	beq.n	8006b04 <takeMachineID+0x94>
        		lcd_clear();
 8006ae2:	f001 f8bf 	bl	8007c64 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006ae6:	4a95      	ldr	r2, [pc, #596]	; (8006d3c <takeMachineID+0x2cc>)
 8006ae8:	2101      	movs	r1, #1
 8006aea:	2001      	movs	r0, #1
 8006aec:	f001 f88e 	bl	8007c0c <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006af0:	4a93      	ldr	r2, [pc, #588]	; (8006d40 <takeMachineID+0x2d0>)
 8006af2:	2101      	movs	r1, #1
 8006af4:	2002      	movs	r0, #2
 8006af6:	f001 f889 	bl	8007c0c <lcd_print>
        		HAL_Delay(1200);
 8006afa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006afe:	f001 fddb 	bl	80086b8 <HAL_Delay>
        		goto mainSection;
 8006b02:	e7b8      	b.n	8006a76 <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b04:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	236e      	movs	r3, #110	; 0x6e
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	4b89      	ldr	r3, [pc, #548]	; (8006d34 <takeMachineID+0x2c4>)
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	236e      	movs	r3, #110	; 0x6e
 8006b14:	2200      	movs	r2, #0
 8006b16:	21a0      	movs	r1, #160	; 0xa0
 8006b18:	488a      	ldr	r0, [pc, #552]	; (8006d44 <takeMachineID+0x2d4>)
 8006b1a:	f002 fe57 	bl	80097cc <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b22:	f001 fdc9 	bl	80086b8 <HAL_Delay>

            break;
 8006b26:	e13d      	b.n	8006da4 <takeMachineID+0x334>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4883      	ldr	r0, [pc, #524]	; (8006d38 <takeMachineID+0x2c8>)
 8006b2c:	f002 fb94 	bl	8009258 <HAL_GPIO_ReadPin>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d111      	bne.n	8006b5a <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d102      	bne.n	8006b42 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8006b3c:	230a      	movs	r3, #10
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	e008      	b.n	8006b54 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b0e      	cmp	r3, #14
 8006b46:	d102      	bne.n	8006b4e <takeMachineID+0xde>
                cursorPosition = 3;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	e002      	b.n	8006b54 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006b54:	2096      	movs	r0, #150	; 0x96
 8006b56:	f001 fdaf 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006b5a:	2108      	movs	r1, #8
 8006b5c:	487a      	ldr	r0, [pc, #488]	; (8006d48 <takeMachineID+0x2d8>)
 8006b5e:	f002 fb7b 	bl	8009258 <HAL_GPIO_ReadPin>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d111      	bne.n	8006b8c <takeMachineID+0x11c>
            if (cursorPosition == 3) {
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d102      	bne.n	8006b74 <takeMachineID+0x104>
                cursorPosition = 14;
 8006b6e:	230e      	movs	r3, #14
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	e008      	b.n	8006b86 <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b0a      	cmp	r3, #10
 8006b78:	d102      	bne.n	8006b80 <takeMachineID+0x110>
            	cursorPosition = 7;
 8006b7a:	2307      	movs	r3, #7
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	e002      	b.n	8006b86 <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006b86:	2096      	movs	r0, #150	; 0x96
 8006b88:	f001 fd96 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	486a      	ldr	r0, [pc, #424]	; (8006d38 <takeMachineID+0x2c8>)
 8006b90:	f002 fb62 	bl	8009258 <HAL_GPIO_ReadPin>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	f040 80aa 	bne.w	8006cf0 <takeMachineID+0x280>
        	if(cursorPosition == 3) {
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d10a      	bne.n	8006bb8 <takeMachineID+0x148>
        		machineID[arrayPos] = '0';
 8006ba2:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <takeMachineID+0x2bc>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	2230      	movs	r2, #48	; 0x30
 8006baa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006bac:	4a61      	ldr	r2, [pc, #388]	; (8006d34 <takeMachineID+0x2c4>)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e07c      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 4) {
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d10a      	bne.n	8006bd4 <takeMachineID+0x164>
        		machineID[arrayPos] = '1';
 8006bbe:	4a5b      	ldr	r2, [pc, #364]	; (8006d2c <takeMachineID+0x2bc>)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	2231      	movs	r2, #49	; 0x31
 8006bc6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006bc8:	4a5a      	ldr	r2, [pc, #360]	; (8006d34 <takeMachineID+0x2c4>)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	4413      	add	r3, r2
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e06e      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 5) {
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d10a      	bne.n	8006bf0 <takeMachineID+0x180>
        		machineID[arrayPos] = '2';
 8006bda:	4a54      	ldr	r2, [pc, #336]	; (8006d2c <takeMachineID+0x2bc>)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	2232      	movs	r2, #50	; 0x32
 8006be2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006be4:	4a53      	ldr	r2, [pc, #332]	; (8006d34 <takeMachineID+0x2c4>)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	2202      	movs	r2, #2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e060      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 6) {
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b06      	cmp	r3, #6
 8006bf4:	d10a      	bne.n	8006c0c <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8006bf6:	4a4d      	ldr	r2, [pc, #308]	; (8006d2c <takeMachineID+0x2bc>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	2233      	movs	r2, #51	; 0x33
 8006bfe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006c00:	4a4c      	ldr	r2, [pc, #304]	; (8006d34 <takeMachineID+0x2c4>)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	2203      	movs	r2, #3
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e052      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 7) {
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	d10a      	bne.n	8006c28 <takeMachineID+0x1b8>
        		machineID[arrayPos] = '4';
 8006c12:	4a46      	ldr	r2, [pc, #280]	; (8006d2c <takeMachineID+0x2bc>)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	2234      	movs	r2, #52	; 0x34
 8006c1a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006c1c:	4a45      	ldr	r2, [pc, #276]	; (8006d34 <takeMachineID+0x2c4>)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4413      	add	r3, r2
 8006c22:	2204      	movs	r2, #4
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e044      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 10) {
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b0a      	cmp	r3, #10
 8006c2c:	d10a      	bne.n	8006c44 <takeMachineID+0x1d4>
        		machineID[arrayPos] = '5';
 8006c2e:	4a3f      	ldr	r2, [pc, #252]	; (8006d2c <takeMachineID+0x2bc>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	2235      	movs	r2, #53	; 0x35
 8006c36:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006c38:	4a3e      	ldr	r2, [pc, #248]	; (8006d34 <takeMachineID+0x2c4>)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2205      	movs	r2, #5
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e036      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 11) {
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b0b      	cmp	r3, #11
 8006c48:	d10a      	bne.n	8006c60 <takeMachineID+0x1f0>
        		machineID[arrayPos] = '6';
 8006c4a:	4a38      	ldr	r2, [pc, #224]	; (8006d2c <takeMachineID+0x2bc>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4413      	add	r3, r2
 8006c50:	2236      	movs	r2, #54	; 0x36
 8006c52:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006c54:	4a37      	ldr	r2, [pc, #220]	; (8006d34 <takeMachineID+0x2c4>)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2206      	movs	r2, #6
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e028      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 12) {
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d10a      	bne.n	8006c7c <takeMachineID+0x20c>
        		machineID[arrayPos] = '7';
 8006c66:	4a31      	ldr	r2, [pc, #196]	; (8006d2c <takeMachineID+0x2bc>)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2237      	movs	r2, #55	; 0x37
 8006c6e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006c70:	4a30      	ldr	r2, [pc, #192]	; (8006d34 <takeMachineID+0x2c4>)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	2207      	movs	r2, #7
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e01a      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 13) {
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b0d      	cmp	r3, #13
 8006c80:	d10a      	bne.n	8006c98 <takeMachineID+0x228>
        		machineID[arrayPos] = '8';
 8006c82:	4a2a      	ldr	r2, [pc, #168]	; (8006d2c <takeMachineID+0x2bc>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	2238      	movs	r2, #56	; 0x38
 8006c8a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006c8c:	4a29      	ldr	r2, [pc, #164]	; (8006d34 <takeMachineID+0x2c4>)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	2208      	movs	r2, #8
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e00c      	b.n	8006cb2 <takeMachineID+0x242>
        	} else if(cursorPosition == 14) {
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b0e      	cmp	r3, #14
 8006c9c:	d109      	bne.n	8006cb2 <takeMachineID+0x242>
        		machineID[arrayPos] = '9';
 8006c9e:	4a23      	ldr	r2, [pc, #140]	; (8006d2c <takeMachineID+0x2bc>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	2239      	movs	r2, #57	; 0x39
 8006ca6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006ca8:	4a22      	ldr	r2, [pc, #136]	; (8006d34 <takeMachineID+0x2c4>)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	2209      	movs	r2, #9
 8006cb0:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b0b      	cmp	r3, #11
 8006cb6:	d105      	bne.n	8006cc4 <takeMachineID+0x254>
        		machineID[machineIDCharacterLimit] = '\0';
 8006cb8:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <takeMachineID+0x2bc>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	731a      	strb	r2, [r3, #12]
        		machineIDInt[machineIDCharacterLimit] = '\0';
 8006cbe:	4b1c      	ldr	r3, [pc, #112]	; (8006d30 <takeMachineID+0x2c0>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	b2d9      	uxtb	r1, r3
 8006cc8:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <takeMachineID+0x2bc>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	f000 ffaf 	bl	8007c36 <lcd_print_char>

        	writeLoc++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006cea:	2096      	movs	r0, #150	; 0x96
 8006cec:	f001 fce4 	bl	80086b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006cf0:	2104      	movs	r1, #4
 8006cf2:	4811      	ldr	r0, [pc, #68]	; (8006d38 <takeMachineID+0x2c8>)
 8006cf4:	f002 fab0 	bl	8009258 <HAL_GPIO_ReadPin>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d14b      	bne.n	8006d96 <takeMachineID+0x326>
            if(strlen(machineID) >= 1) {
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <takeMachineID+0x2bc>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d044      	beq.n	8006d90 <takeMachineID+0x320>
                machineID[arrayPos] = '\0';
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <takeMachineID+0x2bc>)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <takeMachineID+0x2c4>)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	dd15      	ble.n	8006d4c <takeMachineID+0x2dc>
                	writeLoc--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e016      	b.n	8006d56 <takeMachineID+0x2e6>
 8006d28:	20000004 	.word	0x20000004
 8006d2c:	20000190 	.word	0x20000190
 8006d30:	200001c4 	.word	0x200001c4
 8006d34:	20000118 	.word	0x20000118
 8006d38:	40010800 	.word	0x40010800
 8006d3c:	0800db64 	.word	0x0800db64
 8006d40:	0800db78 	.word	0x0800db78
 8006d44:	200003a8 	.word	0x200003a8
 8006d48:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	dc01      	bgt.n	8006d56 <takeMachineID+0x2e6>
                	writeLoc = 5;
 8006d52:	2305      	movs	r3, #5
 8006d54:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd06      	ble.n	8006d6a <takeMachineID+0x2fa>
                	arrayPos--;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	e007      	b.n	8006d7a <takeMachineID+0x30a>
                } else if(arrayPos < 0) {
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da04      	bge.n	8006d7a <takeMachineID+0x30a>
                	arrayPos = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006d74:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <takeMachineID+0x33c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	3304      	adds	r3, #4
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	2001      	movs	r0, #1
 8006d86:	f000 ff77 	bl	8007c78 <lcd_delete_char>
                HAL_Delay(50);
 8006d8a:	2032      	movs	r0, #50	; 0x32
 8006d8c:	f001 fc94 	bl	80086b8 <HAL_Delay>
            }

            HAL_Delay(150);
 8006d90:	2096      	movs	r0, #150	; 0x96
 8006d92:	f001 fc91 	bl	80086b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	2002      	movs	r0, #2
 8006d9e:	f000 ff16 	bl	8007bce <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006da2:	e68e      	b.n	8006ac2 <takeMachineID+0x52>
    }
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000004 	.word	0x20000004

08006db0 <takeWifiSSID>:

void takeWifiSSID() {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006db6:	2001      	movs	r0, #1
 8006db8:	f000 ff86 	bl	8007cc8 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8006dbc:	2214      	movs	r2, #20
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	487a      	ldr	r0, [pc, #488]	; (8006fac <takeWifiSSID+0x1fc>)
 8006dc2:	f005 fb9c 	bl	800c4fe <memset>
    memset(wifiSSIDInt, 0, sizeof(wifiSSIDInt)); //wifiSSID Sıfırlanıyor.
 8006dc6:	2214      	movs	r2, #20
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4879      	ldr	r0, [pc, #484]	; (8006fb0 <takeWifiSSID+0x200>)
 8006dcc:	f005 fb97 	bl	800c4fe <memset>
    memset(&eepromData[ssidStartPos], 0, 20);
 8006dd0:	4b78      	ldr	r3, [pc, #480]	; (8006fb4 <takeWifiSSID+0x204>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a78      	ldr	r2, [pc, #480]	; (8006fb8 <takeWifiSSID+0x208>)
 8006dd6:	4413      	add	r3, r2
 8006dd8:	2214      	movs	r2, #20
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f005 fb8e 	bl	800c4fe <memset>
    //resetEEPROM4Wifi(2);
    HAL_Delay(100);
 8006de2:	2064      	movs	r0, #100	; 0x64
 8006de4:	f001 fc68 	bl	80086b8 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006dec:	2307      	movs	r3, #7
 8006dee:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006df0:	2301      	movs	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006df4:	2300      	movs	r3, #0
 8006df6:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006df8:	4b6e      	ldr	r3, [pc, #440]	; (8006fb4 <takeWifiSSID+0x204>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	2002      	movs	r0, #2
 8006e02:	f7f9 ffc7 	bl	8000d94 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e06:	2108      	movs	r1, #8
 8006e08:	486c      	ldr	r0, [pc, #432]	; (8006fbc <takeWifiSSID+0x20c>)
 8006e0a:	f002 fa25 	bl	8009258 <HAL_GPIO_ReadPin>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d12b      	bne.n	8006e6c <takeWifiSSID+0xbc>
            lcd_cursor(0);
 8006e14:	2000      	movs	r0, #0
 8006e16:	f000 ff57 	bl	8007cc8 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006e1a:	4864      	ldr	r0, [pc, #400]	; (8006fac <takeWifiSSID+0x1fc>)
 8006e1c:	f7f9 fa02 	bl	8000224 <strlen>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b14      	cmp	r3, #20
 8006e24:	d910      	bls.n	8006e48 <takeWifiSSID+0x98>
                lcd_clear();
 8006e26:	f000 ff1d 	bl	8007c64 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e2a:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <takeWifiSSID+0x210>)
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f000 feec 	bl	8007c0c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006e34:	4a63      	ldr	r2, [pc, #396]	; (8006fc4 <takeWifiSSID+0x214>)
 8006e36:	2101      	movs	r1, #1
 8006e38:	2002      	movs	r0, #2
 8006e3a:	f000 fee7 	bl	8007c0c <lcd_print>
                HAL_Delay(1250);
 8006e3e:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006e42:	f001 fc39 	bl	80086b8 <HAL_Delay>
                goto mainSSIDSection;
 8006e46:	e7b6      	b.n	8006db6 <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e4c:	9302      	str	r3, [sp, #8]
 8006e4e:	236e      	movs	r3, #110	; 0x6e
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	4b59      	ldr	r3, [pc, #356]	; (8006fb8 <takeWifiSSID+0x208>)
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	236e      	movs	r3, #110	; 0x6e
 8006e58:	2200      	movs	r2, #0
 8006e5a:	21a0      	movs	r1, #160	; 0xa0
 8006e5c:	485a      	ldr	r0, [pc, #360]	; (8006fc8 <takeWifiSSID+0x218>)
 8006e5e:	f002 fcb5 	bl	80097cc <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8006e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e66:	f001 fc27 	bl	80086b8 <HAL_Delay>

            break;
 8006e6a:	e14b      	b.n	8007104 <takeWifiSSID+0x354>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4853      	ldr	r0, [pc, #332]	; (8006fbc <takeWifiSSID+0x20c>)
 8006e70:	f002 f9f2 	bl	8009258 <HAL_GPIO_ReadPin>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d14d      	bne.n	8006f16 <takeWifiSSID+0x166>
        	if(cursorPosition > 80) {
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	dd01      	ble.n	8006e84 <takeWifiSSID+0xd4>
        		cursorPosition = 1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b10      	cmp	r3, #16
 8006e88:	d13f      	bne.n	8006f0a <takeWifiSSID+0x15a>
            	if(page == 1) {
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d109      	bne.n	8006ea4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8006e90:	2301      	movs	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
            		page++;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	3301      	adds	r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	2002      	movs	r0, #2
 8006e9e:	f7f9 ff79 	bl	8000d94 <printTemplate>
 8006ea2:	e035      	b.n	8006f10 <takeWifiSSID+0x160>
            	} else if(page == 2) {
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d109      	bne.n	8006ebe <takeWifiSSID+0x10e>
            		cursorPosition = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
            		page++;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006eb4:	2103      	movs	r1, #3
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	f7f9 ff6c 	bl	8000d94 <printTemplate>
 8006ebc:	e028      	b.n	8006f10 <takeWifiSSID+0x160>
            	} else if(page == 3) {
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d109      	bne.n	8006ed8 <takeWifiSSID+0x128>
            		cursorPosition = 1;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006ece:	2104      	movs	r1, #4
 8006ed0:	2002      	movs	r0, #2
 8006ed2:	f7f9 ff5f 	bl	8000d94 <printTemplate>
 8006ed6:	e01b      	b.n	8006f10 <takeWifiSSID+0x160>
            	} else if(page == 4) {
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d109      	bne.n	8006ef2 <takeWifiSSID+0x142>
            		cursorPosition = 1;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006ee8:	2105      	movs	r1, #5
 8006eea:	2002      	movs	r0, #2
 8006eec:	f7f9 ff52 	bl	8000d94 <printTemplate>
 8006ef0:	e00e      	b.n	8006f10 <takeWifiSSID+0x160>
            	} else if(page == 5) {
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d10b      	bne.n	8006f10 <takeWifiSSID+0x160>
            		cursorPosition = 1;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f00:	2101      	movs	r1, #1
 8006f02:	2002      	movs	r0, #2
 8006f04:	f7f9 ff46 	bl	8000d94 <printTemplate>
 8006f08:	e002      	b.n	8006f10 <takeWifiSSID+0x160>
            	}
            } else {
            	cursorPosition++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006f10:	2096      	movs	r0, #150	; 0x96
 8006f12:	f001 fbd1 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f16:	2108      	movs	r1, #8
 8006f18:	482c      	ldr	r0, [pc, #176]	; (8006fcc <takeWifiSSID+0x21c>)
 8006f1a:	f002 f99d 	bl	8009258 <HAL_GPIO_ReadPin>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d15b      	bne.n	8006fdc <takeWifiSSID+0x22c>
        	if(cursorPosition < 1) {
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dc01      	bgt.n	8006f2e <takeWifiSSID+0x17e>
        		cursorPosition = 80;
 8006f2a:	2350      	movs	r3, #80	; 0x50
 8006f2c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d14d      	bne.n	8006fd0 <takeWifiSSID+0x220>
            	if(page == 1) {
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d108      	bne.n	8006f4c <takeWifiSSID+0x19c>
            		cursorPosition = 16;
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006f3e:	2305      	movs	r3, #5
 8006f40:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f42:	2105      	movs	r1, #5
 8006f44:	2002      	movs	r0, #2
 8006f46:	f7f9 ff25 	bl	8000d94 <printTemplate>
 8006f4a:	e044      	b.n	8006fd6 <takeWifiSSID+0x226>
            	} else if(page == 2) {
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d108      	bne.n	8006f64 <takeWifiSSID+0x1b4>
            		cursorPosition = 16;
 8006f52:	2310      	movs	r3, #16
 8006f54:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	2002      	movs	r0, #2
 8006f5e:	f7f9 ff19 	bl	8000d94 <printTemplate>
 8006f62:	e038      	b.n	8006fd6 <takeWifiSSID+0x226>
            	} else if(page == 3) {
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d108      	bne.n	8006f7c <takeWifiSSID+0x1cc>
            		cursorPosition = 16;
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f72:	2102      	movs	r1, #2
 8006f74:	2002      	movs	r0, #2
 8006f76:	f7f9 ff0d 	bl	8000d94 <printTemplate>
 8006f7a:	e02c      	b.n	8006fd6 <takeWifiSSID+0x226>
            	} else if(page == 4) {
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d108      	bne.n	8006f94 <takeWifiSSID+0x1e4>
            		cursorPosition = 16;
 8006f82:	2310      	movs	r3, #16
 8006f84:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8006f86:	2303      	movs	r3, #3
 8006f88:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006f8a:	2103      	movs	r1, #3
 8006f8c:	2002      	movs	r0, #2
 8006f8e:	f7f9 ff01 	bl	8000d94 <printTemplate>
 8006f92:	e020      	b.n	8006fd6 <takeWifiSSID+0x226>
            	} else if(page == 5) {
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	d11d      	bne.n	8006fd6 <takeWifiSSID+0x226>
            		cursorPosition = 16;
 8006f9a:	2310      	movs	r3, #16
 8006f9c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006fa2:	2104      	movs	r1, #4
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f7f9 fef5 	bl	8000d94 <printTemplate>
 8006faa:	e014      	b.n	8006fd6 <takeWifiSSID+0x226>
 8006fac:	2000019c 	.word	0x2000019c
 8006fb0:	200001d0 	.word	0x200001d0
 8006fb4:	20000008 	.word	0x20000008
 8006fb8:	20000118 	.word	0x20000118
 8006fbc:	40010800 	.word	0x40010800
 8006fc0:	0800db8c 	.word	0x0800db8c
 8006fc4:	0800dba0 	.word	0x0800dba0
 8006fc8:	200003a8 	.word	0x200003a8
 8006fcc:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006fd6:	2096      	movs	r0, #150	; 0x96
 8006fd8:	f001 fb6e 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006fdc:	2102      	movs	r1, #2
 8006fde:	484b      	ldr	r0, [pc, #300]	; (800710c <takeWifiSSID+0x35c>)
 8006fe0:	f002 f93a 	bl	8009258 <HAL_GPIO_ReadPin>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d13f      	bne.n	800706a <takeWifiSSID+0x2ba>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4a48      	ldr	r2, [pc, #288]	; (8007110 <takeWifiSSID+0x360>)
 8006ff0:	5cd1      	ldrb	r1, [r2, r3]
 8006ff2:	4a48      	ldr	r2, [pc, #288]	; (8007114 <takeWifiSSID+0x364>)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b2d9      	uxtb	r1, r3
 8007004:	4a44      	ldr	r2, [pc, #272]	; (8007118 <takeWifiSSID+0x368>)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	460a      	mov	r2, r1
 800700c:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b2d9      	uxtb	r1, r3
 8007016:	4a41      	ldr	r2, [pc, #260]	; (800711c <takeWifiSSID+0x36c>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4413      	add	r3, r2
 800701c:	460a      	mov	r2, r1
 800701e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b2d9      	uxtb	r1, r3
 8007024:	4a3b      	ldr	r2, [pc, #236]	; (8007114 <takeWifiSSID+0x364>)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	2001      	movs	r0, #1
 8007030:	f000 fe01 	bl	8007c36 <lcd_print_char>

            writeLoc++;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	3301      	adds	r3, #1
 800703e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3301      	adds	r3, #1
 8007044:	607b      	str	r3, [r7, #4]

            wifiSSID[arrayPosition] = '\0';
 8007046:	4a33      	ldr	r2, [pc, #204]	; (8007114 <takeWifiSSID+0x364>)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4413      	add	r3, r2
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 8007050:	4a31      	ldr	r2, [pc, #196]	; (8007118 <takeWifiSSID+0x368>)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4413      	add	r3, r2
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 800705a:	4a30      	ldr	r2, [pc, #192]	; (800711c <takeWifiSSID+0x36c>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4413      	add	r3, r2
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007064:	2096      	movs	r0, #150	; 0x96
 8007066:	f001 fb27 	bl	80086b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800706a:	2104      	movs	r1, #4
 800706c:	4827      	ldr	r0, [pc, #156]	; (800710c <takeWifiSSID+0x35c>)
 800706e:	f002 f8f3 	bl	8009258 <HAL_GPIO_ReadPin>
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	d13e      	bne.n	80070f6 <takeWifiSSID+0x346>
        	if(strlen(wifiSSID) >= 1) {
 8007078:	4b26      	ldr	r3, [pc, #152]	; (8007114 <takeWifiSSID+0x364>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d037      	beq.n	80070f0 <takeWifiSSID+0x340>
        		wifiSSID[arrayPosition] = '\0';
 8007080:	4a24      	ldr	r2, [pc, #144]	; (8007114 <takeWifiSSID+0x364>)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 800708a:	4a23      	ldr	r2, [pc, #140]	; (8007118 <takeWifiSSID+0x368>)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4413      	add	r3, r2
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007094:	4a21      	ldr	r2, [pc, #132]	; (800711c <takeWifiSSID+0x36c>)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b07      	cmp	r3, #7
 80070a2:	dd03      	ble.n	80070ac <takeWifiSSID+0x2fc>
        			writeLoc--;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	e004      	b.n	80070b6 <takeWifiSSID+0x306>
        		} else if(writeLoc < 7) {
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	dc01      	bgt.n	80070b6 <takeWifiSSID+0x306>
        			writeLoc = 7;
 80070b2:	2307      	movs	r3, #7
 80070b4:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	dd06      	ble.n	80070ca <takeWifiSSID+0x31a>
        			arrayPosition--;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3b01      	subs	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	e007      	b.n	80070da <takeWifiSSID+0x32a>
        		} else if(arrayPosition < 0) {
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da04      	bge.n	80070da <takeWifiSSID+0x32a>
        			arrayPosition = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <takeWifiSSID+0x370>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	3306      	adds	r3, #6
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	4619      	mov	r1, r3
 80070e4:	2001      	movs	r0, #1
 80070e6:	f000 fdc7 	bl	8007c78 <lcd_delete_char>
        		HAL_Delay(50);
 80070ea:	2032      	movs	r0, #50	; 0x32
 80070ec:	f001 fae4 	bl	80086b8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80070f0:	2096      	movs	r0, #150	; 0x96
 80070f2:	f001 fae1 	bl	80086b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	4619      	mov	r1, r3
 80070fc:	2002      	movs	r0, #2
 80070fe:	f000 fd66 	bl	8007bce <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007102:	e680      	b.n	8006e06 <takeWifiSSID+0x56>
    }
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40010800 	.word	0x40010800
 8007110:	2000001c 	.word	0x2000001c
 8007114:	2000019c 	.word	0x2000019c
 8007118:	200001d0 	.word	0x200001d0
 800711c:	20000118 	.word	0x20000118
 8007120:	20000008 	.word	0x20000008

08007124 <takeWifiPass>:

void takeWifiPass() {
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800712a:	2001      	movs	r0, #1
 800712c:	f000 fdcc 	bl	8007cc8 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007130:	2214      	movs	r2, #20
 8007132:	2100      	movs	r1, #0
 8007134:	487a      	ldr	r0, [pc, #488]	; (8007320 <takeWifiPass+0x1fc>)
 8007136:	f005 f9e2 	bl	800c4fe <memset>
    memset(wifiPassInt, 0, sizeof(wifiPassInt));
 800713a:	2214      	movs	r2, #20
 800713c:	2100      	movs	r1, #0
 800713e:	4879      	ldr	r0, [pc, #484]	; (8007324 <takeWifiPass+0x200>)
 8007140:	f005 f9dd 	bl	800c4fe <memset>
    memset(&eepromData[passStartPos], 0, 20);
 8007144:	4b78      	ldr	r3, [pc, #480]	; (8007328 <takeWifiPass+0x204>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a78      	ldr	r2, [pc, #480]	; (800732c <takeWifiPass+0x208>)
 800714a:	4413      	add	r3, r2
 800714c:	2214      	movs	r2, #20
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f005 f9d4 	bl	800c4fe <memset>
    //resetEEPROM4Wifi(3);
    HAL_Delay(100);
 8007156:	2064      	movs	r0, #100	; 0x64
 8007158:	f001 faae 	bl	80086b8 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007160:	2307      	movs	r3, #7
 8007162:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007164:	2301      	movs	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 800716c:	4b6e      	ldr	r3, [pc, #440]	; (8007328 <takeWifiPass+0x204>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007172:	2101      	movs	r1, #1
 8007174:	2003      	movs	r0, #3
 8007176:	f7f9 fe0d 	bl	8000d94 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800717a:	2108      	movs	r1, #8
 800717c:	486c      	ldr	r0, [pc, #432]	; (8007330 <takeWifiPass+0x20c>)
 800717e:	f002 f86b 	bl	8009258 <HAL_GPIO_ReadPin>
 8007182:	4603      	mov	r3, r0
 8007184:	2b01      	cmp	r3, #1
 8007186:	d12b      	bne.n	80071e0 <takeWifiPass+0xbc>
            lcd_cursor(0);
 8007188:	2000      	movs	r0, #0
 800718a:	f000 fd9d 	bl	8007cc8 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800718e:	4864      	ldr	r0, [pc, #400]	; (8007320 <takeWifiPass+0x1fc>)
 8007190:	f7f9 f848 	bl	8000224 <strlen>
 8007194:	4603      	mov	r3, r0
 8007196:	2b14      	cmp	r3, #20
 8007198:	d910      	bls.n	80071bc <takeWifiPass+0x98>
                lcd_clear();
 800719a:	f000 fd63 	bl	8007c64 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800719e:	4a65      	ldr	r2, [pc, #404]	; (8007334 <takeWifiPass+0x210>)
 80071a0:	2101      	movs	r1, #1
 80071a2:	2001      	movs	r0, #1
 80071a4:	f000 fd32 	bl	8007c0c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80071a8:	4a63      	ldr	r2, [pc, #396]	; (8007338 <takeWifiPass+0x214>)
 80071aa:	2101      	movs	r1, #1
 80071ac:	2002      	movs	r0, #2
 80071ae:	f000 fd2d 	bl	8007c0c <lcd_print>
                HAL_Delay(1200);
 80071b2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80071b6:	f001 fa7f 	bl	80086b8 <HAL_Delay>
                goto mainPASSSection;
 80071ba:	e7b6      	b.n	800712a <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	236e      	movs	r3, #110	; 0x6e
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	4b59      	ldr	r3, [pc, #356]	; (800732c <takeWifiPass+0x208>)
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	236e      	movs	r3, #110	; 0x6e
 80071cc:	2200      	movs	r2, #0
 80071ce:	21a0      	movs	r1, #160	; 0xa0
 80071d0:	485a      	ldr	r0, [pc, #360]	; (800733c <takeWifiPass+0x218>)
 80071d2:	f002 fafb 	bl	80097cc <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 80071d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071da:	f001 fa6d 	bl	80086b8 <HAL_Delay>

            break;
 80071de:	e136      	b.n	800744e <takeWifiPass+0x32a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071e0:	2101      	movs	r1, #1
 80071e2:	4853      	ldr	r0, [pc, #332]	; (8007330 <takeWifiPass+0x20c>)
 80071e4:	f002 f838 	bl	8009258 <HAL_GPIO_ReadPin>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d14d      	bne.n	800728a <takeWifiPass+0x166>
        	if(cursorPosition > 80) {
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b50      	cmp	r3, #80	; 0x50
 80071f2:	dd01      	ble.n	80071f8 <takeWifiPass+0xd4>
        	    cursorPosition = 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d13f      	bne.n	800727e <takeWifiPass+0x15a>
            	if(page == 1) {
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d109      	bne.n	8007218 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8007204:	2301      	movs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
            		page++;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	3301      	adds	r3, #1
 800720c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800720e:	2102      	movs	r1, #2
 8007210:	2003      	movs	r0, #3
 8007212:	f7f9 fdbf 	bl	8000d94 <printTemplate>
 8007216:	e035      	b.n	8007284 <takeWifiPass+0x160>
            	} else if(page == 2) {
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d109      	bne.n	8007232 <takeWifiPass+0x10e>
            		cursorPosition = 1;
 800721e:	2301      	movs	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
            		page++;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	3301      	adds	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007228:	2103      	movs	r1, #3
 800722a:	2003      	movs	r0, #3
 800722c:	f7f9 fdb2 	bl	8000d94 <printTemplate>
 8007230:	e028      	b.n	8007284 <takeWifiPass+0x160>
            	} else if(page == 3) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d109      	bne.n	800724c <takeWifiPass+0x128>
            		cursorPosition = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
            		page++;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3301      	adds	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007242:	2104      	movs	r1, #4
 8007244:	2003      	movs	r0, #3
 8007246:	f7f9 fda5 	bl	8000d94 <printTemplate>
 800724a:	e01b      	b.n	8007284 <takeWifiPass+0x160>
            	} else if(page == 4) {
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d109      	bne.n	8007266 <takeWifiPass+0x142>
            		cursorPosition = 1;
 8007252:	2301      	movs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
            		page++;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3301      	adds	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800725c:	2105      	movs	r1, #5
 800725e:	2003      	movs	r0, #3
 8007260:	f7f9 fd98 	bl	8000d94 <printTemplate>
 8007264:	e00e      	b.n	8007284 <takeWifiPass+0x160>
            	} else if(page == 5) {
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b05      	cmp	r3, #5
 800726a:	d10b      	bne.n	8007284 <takeWifiPass+0x160>
            		cursorPosition = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007274:	2101      	movs	r1, #1
 8007276:	2003      	movs	r0, #3
 8007278:	f7f9 fd8c 	bl	8000d94 <printTemplate>
 800727c:	e002      	b.n	8007284 <takeWifiPass+0x160>
            	}
            } else {
            	cursorPosition++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007284:	2096      	movs	r0, #150	; 0x96
 8007286:	f001 fa17 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800728a:	2108      	movs	r1, #8
 800728c:	482c      	ldr	r0, [pc, #176]	; (8007340 <takeWifiPass+0x21c>)
 800728e:	f001 ffe3 	bl	8009258 <HAL_GPIO_ReadPin>
 8007292:	4603      	mov	r3, r0
 8007294:	2b01      	cmp	r3, #1
 8007296:	d15b      	bne.n	8007350 <takeWifiPass+0x22c>
        	if(cursorPosition < 1) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc01      	bgt.n	80072a2 <takeWifiPass+0x17e>
        	    cursorPosition = 80;
 800729e:	2350      	movs	r3, #80	; 0x50
 80072a0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d14d      	bne.n	8007344 <takeWifiPass+0x220>
            	if(page == 1) {
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d108      	bne.n	80072c0 <takeWifiPass+0x19c>
            		cursorPosition = 16;
 80072ae:	2310      	movs	r3, #16
 80072b0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072b2:	2305      	movs	r3, #5
 80072b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80072b6:	2105      	movs	r1, #5
 80072b8:	2003      	movs	r0, #3
 80072ba:	f7f9 fd6b 	bl	8000d94 <printTemplate>
 80072be:	e044      	b.n	800734a <takeWifiPass+0x226>
            	} else if(page == 2) {
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d108      	bne.n	80072d8 <takeWifiPass+0x1b4>
            		cursorPosition = 16;
 80072c6:	2310      	movs	r3, #16
 80072c8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80072ce:	2101      	movs	r1, #1
 80072d0:	2003      	movs	r0, #3
 80072d2:	f7f9 fd5f 	bl	8000d94 <printTemplate>
 80072d6:	e038      	b.n	800734a <takeWifiPass+0x226>
            	} else if(page == 3) {
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d108      	bne.n	80072f0 <takeWifiPass+0x1cc>
            		cursorPosition = 16;
 80072de:	2310      	movs	r3, #16
 80072e0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072e2:	2302      	movs	r3, #2
 80072e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80072e6:	2102      	movs	r1, #2
 80072e8:	2003      	movs	r0, #3
 80072ea:	f7f9 fd53 	bl	8000d94 <printTemplate>
 80072ee:	e02c      	b.n	800734a <takeWifiPass+0x226>
            	} else if(page == 4) {
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d108      	bne.n	8007308 <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 80072f6:	2310      	movs	r3, #16
 80072f8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80072fa:	2303      	movs	r3, #3
 80072fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072fe:	2103      	movs	r1, #3
 8007300:	2003      	movs	r0, #3
 8007302:	f7f9 fd47 	bl	8000d94 <printTemplate>
 8007306:	e020      	b.n	800734a <takeWifiPass+0x226>
            	} else if(page == 5) {
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b05      	cmp	r3, #5
 800730c:	d11d      	bne.n	800734a <takeWifiPass+0x226>
            		cursorPosition = 16;
 800730e:	2310      	movs	r3, #16
 8007310:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007312:	2304      	movs	r3, #4
 8007314:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007316:	2104      	movs	r1, #4
 8007318:	2003      	movs	r0, #3
 800731a:	f7f9 fd3b 	bl	8000d94 <printTemplate>
 800731e:	e014      	b.n	800734a <takeWifiPass+0x226>
 8007320:	200001b0 	.word	0x200001b0
 8007324:	200001e4 	.word	0x200001e4
 8007328:	2000000c 	.word	0x2000000c
 800732c:	20000118 	.word	0x20000118
 8007330:	40010800 	.word	0x40010800
 8007334:	0800db8c 	.word	0x0800db8c
 8007338:	0800dbb4 	.word	0x0800dbb4
 800733c:	200003a8 	.word	0x200003a8
 8007340:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b01      	subs	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800734a:	2096      	movs	r0, #150	; 0x96
 800734c:	f001 f9b4 	bl	80086b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007350:	2102      	movs	r1, #2
 8007352:	4841      	ldr	r0, [pc, #260]	; (8007458 <takeWifiPass+0x334>)
 8007354:	f001 ff80 	bl	8009258 <HAL_GPIO_ReadPin>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d13f      	bne.n	80073de <takeWifiPass+0x2ba>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3b01      	subs	r3, #1
 8007362:	4a3e      	ldr	r2, [pc, #248]	; (800745c <takeWifiPass+0x338>)
 8007364:	5cd1      	ldrb	r1, [r2, r3]
 8007366:	4a3e      	ldr	r2, [pc, #248]	; (8007460 <takeWifiPass+0x33c>)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4413      	add	r3, r2
 800736c:	460a      	mov	r2, r1
 800736e:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b2d9      	uxtb	r1, r3
 8007378:	4a3a      	ldr	r2, [pc, #232]	; (8007464 <takeWifiPass+0x340>)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4413      	add	r3, r2
 800737e:	460a      	mov	r2, r1
 8007380:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	4a37      	ldr	r2, [pc, #220]	; (8007468 <takeWifiPass+0x344>)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	460a      	mov	r2, r1
 8007392:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	b2d9      	uxtb	r1, r3
 8007398:	4a31      	ldr	r2, [pc, #196]	; (8007460 <takeWifiPass+0x33c>)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4413      	add	r3, r2
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	2001      	movs	r0, #1
 80073a4:	f000 fc47 	bl	8007c36 <lcd_print_char>

            writeLoc++;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3301      	adds	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3301      	adds	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]

            wifiPass[arrayPos] = '\0';
 80073ba:	4a29      	ldr	r2, [pc, #164]	; (8007460 <takeWifiPass+0x33c>)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4413      	add	r3, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <takeWifiPass+0x340>)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80073ce:	4a26      	ldr	r2, [pc, #152]	; (8007468 <takeWifiPass+0x344>)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80073d8:	2096      	movs	r0, #150	; 0x96
 80073da:	f001 f96d 	bl	80086b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073de:	2104      	movs	r1, #4
 80073e0:	481d      	ldr	r0, [pc, #116]	; (8007458 <takeWifiPass+0x334>)
 80073e2:	f001 ff39 	bl	8009258 <HAL_GPIO_ReadPin>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d129      	bne.n	8007440 <takeWifiPass+0x31c>
            if(strlen(wifiPass) >= 1) {
 80073ec:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <takeWifiPass+0x33c>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d022      	beq.n	800743a <takeWifiPass+0x316>
            	wifiPass[arrayPos] = '\0';
 80073f4:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <takeWifiPass+0x33c>)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <takeWifiPass+0x340>)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4413      	add	r3, r2
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <takeWifiPass+0x344>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3b01      	subs	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3b01      	subs	r3, #1
 8007422:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	3306      	adds	r3, #6
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	2001      	movs	r0, #1
 8007430:	f000 fc22 	bl	8007c78 <lcd_delete_char>
            	HAL_Delay(50);
 8007434:	2032      	movs	r0, #50	; 0x32
 8007436:	f001 f93f 	bl	80086b8 <HAL_Delay>
            }

            HAL_Delay(150);
 800743a:	2096      	movs	r0, #150	; 0x96
 800743c:	f001 f93c 	bl	80086b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	2002      	movs	r0, #2
 8007448:	f000 fbc1 	bl	8007bce <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800744c:	e695      	b.n	800717a <takeWifiPass+0x56>
    }
}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40010800 	.word	0x40010800
 800745c:	2000001c 	.word	0x2000001c
 8007460:	200001b0 	.word	0x200001b0
 8007464:	200001e4 	.word	0x200001e4
 8007468:	20000118 	.word	0x20000118

0800746c <mergeData>:

char* mergeData() {
 800746c:	b580      	push	{r7, lr}
 800746e:	b09c      	sub	sp, #112	; 0x70
 8007470:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007472:	2300      	movs	r3, #0
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800747a:	2228      	movs	r2, #40	; 0x28
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f005 f83d 	bl	800c4fe <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007484:	4b67      	ldr	r3, [pc, #412]	; (8007624 <mergeData+0x1b8>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	713b      	strb	r3, [r7, #4]
 800748a:	4b67      	ldr	r3, [pc, #412]	; (8007628 <mergeData+0x1bc>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	717b      	strb	r3, [r7, #5]
 8007490:	4b66      	ldr	r3, [pc, #408]	; (800762c <mergeData+0x1c0>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	71bb      	strb	r3, [r7, #6]
 8007496:	4b66      	ldr	r3, [pc, #408]	; (8007630 <mergeData+0x1c4>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
 800749c:	4b65      	ldr	r3, [pc, #404]	; (8007634 <mergeData+0x1c8>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	723b      	strb	r3, [r7, #8]
 80074a2:	4b65      	ldr	r3, [pc, #404]	; (8007638 <mergeData+0x1cc>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	727b      	strb	r3, [r7, #9]
 80074a8:	4b64      	ldr	r3, [pc, #400]	; (800763c <mergeData+0x1d0>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	72bb      	strb	r3, [r7, #10]
 80074ae:	4b64      	ldr	r3, [pc, #400]	; (8007640 <mergeData+0x1d4>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	72fb      	strb	r3, [r7, #11]
 80074b4:	4b63      	ldr	r3, [pc, #396]	; (8007644 <mergeData+0x1d8>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	733b      	strb	r3, [r7, #12]
 80074ba:	4b63      	ldr	r3, [pc, #396]	; (8007648 <mergeData+0x1dc>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	737b      	strb	r3, [r7, #13]
 80074c0:	4b62      	ldr	r3, [pc, #392]	; (800764c <mergeData+0x1e0>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	73bb      	strb	r3, [r7, #14]
 80074c6:	4b62      	ldr	r3, [pc, #392]	; (8007650 <mergeData+0x1e4>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	4b61      	ldr	r3, [pc, #388]	; (8007654 <mergeData+0x1e8>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	743b      	strb	r3, [r7, #16]
 80074d2:	4b61      	ldr	r3, [pc, #388]	; (8007658 <mergeData+0x1ec>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	747b      	strb	r3, [r7, #17]
 80074d8:	4b60      	ldr	r3, [pc, #384]	; (800765c <mergeData+0x1f0>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	74bb      	strb	r3, [r7, #18]
 80074de:	4b60      	ldr	r3, [pc, #384]	; (8007660 <mergeData+0x1f4>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	74fb      	strb	r3, [r7, #19]
 80074e4:	4b5f      	ldr	r3, [pc, #380]	; (8007664 <mergeData+0x1f8>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	753b      	strb	r3, [r7, #20]
 80074ea:	4b5f      	ldr	r3, [pc, #380]	; (8007668 <mergeData+0x1fc>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	757b      	strb	r3, [r7, #21]
 80074f0:	4b5e      	ldr	r3, [pc, #376]	; (800766c <mergeData+0x200>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	75bb      	strb	r3, [r7, #22]
 80074f6:	4b5e      	ldr	r3, [pc, #376]	; (8007670 <mergeData+0x204>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	75fb      	strb	r3, [r7, #23]
 80074fc:	4b5d      	ldr	r3, [pc, #372]	; (8007674 <mergeData+0x208>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	763b      	strb	r3, [r7, #24]
 8007502:	4b5d      	ldr	r3, [pc, #372]	; (8007678 <mergeData+0x20c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	767b      	strb	r3, [r7, #25]
 8007508:	4b5c      	ldr	r3, [pc, #368]	; (800767c <mergeData+0x210>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	76bb      	strb	r3, [r7, #26]
 800750e:	4b5c      	ldr	r3, [pc, #368]	; (8007680 <mergeData+0x214>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	4b5b      	ldr	r3, [pc, #364]	; (8007684 <mergeData+0x218>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	773b      	strb	r3, [r7, #28]
 800751a:	4b5b      	ldr	r3, [pc, #364]	; (8007688 <mergeData+0x21c>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	777b      	strb	r3, [r7, #29]
 8007520:	4b5a      	ldr	r3, [pc, #360]	; (800768c <mergeData+0x220>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	77bb      	strb	r3, [r7, #30]
 8007526:	4b5a      	ldr	r3, [pc, #360]	; (8007690 <mergeData+0x224>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <mergeData+0x228>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f887 3020 	strb.w	r3, [r7, #32]
 8007534:	4b58      	ldr	r3, [pc, #352]	; (8007698 <mergeData+0x22c>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800753c:	4b57      	ldr	r3, [pc, #348]	; (800769c <mergeData+0x230>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007544:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <mergeData+0x234>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800754c:	4b55      	ldr	r3, [pc, #340]	; (80076a4 <mergeData+0x238>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007554:	4b54      	ldr	r3, [pc, #336]	; (80076a8 <mergeData+0x23c>)
 8007556:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800755a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800755e:	4b52      	ldr	r3, [pc, #328]	; (80076a8 <mergeData+0x23c>)
 8007560:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <mergeData+0x23c>)
 800756a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800756e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007572:	4b4d      	ldr	r3, [pc, #308]	; (80076a8 <mergeData+0x23c>)
 8007574:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007578:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800757c:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <mergeData+0x23c>)
 800757e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007582:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007586:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <mergeData+0x23c>)
 8007588:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007590:	4b45      	ldr	r3, [pc, #276]	; (80076a8 <mergeData+0x23c>)
 8007592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800759a:	4b43      	ldr	r3, [pc, #268]	; (80076a8 <mergeData+0x23c>)
 800759c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80075a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80075a4:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <mergeData+0x23c>)
 80075a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80075aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80075ae:	4b3e      	ldr	r3, [pc, #248]	; (80076a8 <mergeData+0x23c>)
 80075b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80075b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80075b8:	2306      	movs	r3, #6
 80075ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075be:	2300      	movs	r3, #0
 80075c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c2:	e015      	b.n	80075f0 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80075c4:	1d3a      	adds	r2, r7, #4
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075d2:	4936      	ldr	r1, [pc, #216]	; (80076ac <mergeData+0x240>)
 80075d4:	4618      	mov	r0, r3
 80075d6:	f004 ff21 	bl	800c41c <siprintf>
	    strcat(combinedString, temp);
 80075da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f004 ff7b 	bl	800c4e0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ec:	3301      	adds	r3, #1
 80075ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	2b2b      	cmp	r3, #43	; 0x2b
 80075f4:	d9e6      	bls.n	80075c4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80075f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7f8 fe12 	bl	8000224 <strlen>
 8007600:	4603      	mov	r3, r0
 8007602:	3301      	adds	r3, #1
 8007604:	4618      	mov	r0, r3
 8007606:	f004 fe55 	bl	800c2b4 <malloc>
 800760a:	4603      	mov	r3, r0
 800760c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800760e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007612:	4619      	mov	r1, r3
 8007614:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007616:	f004 ffb7 	bl	800c588 <strcpy>
	return result;
 800761a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800761c:	4618      	mov	r0, r3
 800761e:	3770      	adds	r7, #112	; 0x70
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	2000022f 	.word	0x2000022f
 8007628:	20000221 	.word	0x20000221
 800762c:	20000224 	.word	0x20000224
 8007630:	20000225 	.word	0x20000225
 8007634:	20000226 	.word	0x20000226
 8007638:	2000022d 	.word	0x2000022d
 800763c:	20000227 	.word	0x20000227
 8007640:	20000228 	.word	0x20000228
 8007644:	2000022c 	.word	0x2000022c
 8007648:	20000229 	.word	0x20000229
 800764c:	20000239 	.word	0x20000239
 8007650:	2000022a 	.word	0x2000022a
 8007654:	2000023a 	.word	0x2000023a
 8007658:	2000022b 	.word	0x2000022b
 800765c:	2000023b 	.word	0x2000023b
 8007660:	2000022e 	.word	0x2000022e
 8007664:	20000230 	.word	0x20000230
 8007668:	20000231 	.word	0x20000231
 800766c:	20000232 	.word	0x20000232
 8007670:	20000233 	.word	0x20000233
 8007674:	20000234 	.word	0x20000234
 8007678:	20000235 	.word	0x20000235
 800767c:	20000236 	.word	0x20000236
 8007680:	20000237 	.word	0x20000237
 8007684:	20000238 	.word	0x20000238
 8007688:	2000023c 	.word	0x2000023c
 800768c:	2000023e 	.word	0x2000023e
 8007690:	2000021d 	.word	0x2000021d
 8007694:	2000021e 	.word	0x2000021e
 8007698:	20000000 	.word	0x20000000
 800769c:	20000001 	.word	0x20000001
 80076a0:	2000021f 	.word	0x2000021f
 80076a4:	20000241 	.word	0x20000241
 80076a8:	20000118 	.word	0x20000118
 80076ac:	0800dbc8 	.word	0x0800dbc8

080076b0 <convertAndSendData>:

void convertAndSendData() {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80076b4:	4b14      	ldr	r3, [pc, #80]	; (8007708 <convertAndSendData+0x58>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80076bc:	4a13      	ldr	r2, [pc, #76]	; (800770c <convertAndSendData+0x5c>)
 80076be:	2101      	movs	r1, #1
 80076c0:	2001      	movs	r0, #1
 80076c2:	f000 faa3 	bl	8007c0c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80076c6:	4a12      	ldr	r2, [pc, #72]	; (8007710 <convertAndSendData+0x60>)
 80076c8:	2101      	movs	r1, #1
 80076ca:	2002      	movs	r0, #2
 80076cc:	f000 fa9e 	bl	8007c0c <lcd_print>
 80076d0:	e009      	b.n	80076e6 <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <convertAndSendData+0x64>)
 80076d4:	2101      	movs	r1, #1
 80076d6:	2001      	movs	r0, #1
 80076d8:	f000 fa98 	bl	8007c0c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076dc:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <convertAndSendData+0x68>)
 80076de:	2101      	movs	r1, #1
 80076e0:	2002      	movs	r0, #2
 80076e2:	f000 fa93 	bl	8007c0c <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 80076e6:	f7ff fec1 	bl	800746c <mergeData>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	490b      	ldr	r1, [pc, #44]	; (800771c <convertAndSendData+0x6c>)
 80076f0:	480b      	ldr	r0, [pc, #44]	; (8007720 <convertAndSendData+0x70>)
 80076f2:	f7f9 f8c1 	bl	8000878 <sendMachineData>

	HAL_Delay(500);
 80076f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076fa:	f000 ffdd 	bl	80086b8 <HAL_Delay>
	lcd_clear();
 80076fe:	f000 fab1 	bl	8007c64 <lcd_clear>
}
 8007702:	bf00      	nop
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000241 	.word	0x20000241
 800770c:	0800dbcc 	.word	0x0800dbcc
 8007710:	0800dbe0 	.word	0x0800dbe0
 8007714:	0800dbf4 	.word	0x0800dbf4
 8007718:	0800dc08 	.word	0x0800dc08
 800771c:	20000190 	.word	0x20000190
 8007720:	20000444 	.word	0x20000444

08007724 <iotSetup>:

void iotSetup() {
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007728:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <iotSetup+0x40>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d017      	beq.n	8007760 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007730:	480d      	ldr	r0, [pc, #52]	; (8007768 <iotSetup+0x44>)
 8007732:	f7f8 fd77 	bl	8000224 <strlen>
 8007736:	4603      	mov	r3, r0
 8007738:	2b0c      	cmp	r3, #12
 800773a:	d001      	beq.n	8007740 <iotSetup+0x1c>
			takeMachineID();
 800773c:	f7ff f998 	bl	8006a70 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007740:	480a      	ldr	r0, [pc, #40]	; (800776c <iotSetup+0x48>)
 8007742:	f7f8 fd6f 	bl	8000224 <strlen>
 8007746:	4603      	mov	r3, r0
 8007748:	2b01      	cmp	r3, #1
 800774a:	d801      	bhi.n	8007750 <iotSetup+0x2c>
			takeWifiSSID();
 800774c:	f7ff fb30 	bl	8006db0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007750:	4807      	ldr	r0, [pc, #28]	; (8007770 <iotSetup+0x4c>)
 8007752:	f7f8 fd67 	bl	8000224 <strlen>
 8007756:	4603      	mov	r3, r0
 8007758:	2b01      	cmp	r3, #1
 800775a:	d801      	bhi.n	8007760 <iotSetup+0x3c>
			takeWifiPass();
 800775c:	f7ff fce2 	bl	8007124 <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}
 8007764:	2000023f 	.word	0x2000023f
 8007768:	20000190 	.word	0x20000190
 800776c:	2000019c 	.word	0x2000019c
 8007770:	200001b0 	.word	0x200001b0

08007774 <printMachineCredentials>:

void printMachineCredentials(int state) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b08c      	sub	sp, #48	; 0x30
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d11f      	bne.n	80077c2 <printMachineCredentials+0x4e>
		int idLength = strlen(machineID);
 8007782:	4853      	ldr	r0, [pc, #332]	; (80078d0 <printMachineCredentials+0x15c>)
 8007784:	f7f8 fd4e 	bl	8000224 <strlen>
 8007788:	4603      	mov	r3, r0
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c

		lcd_print(2, 1, machineID);
 800778c:	4a50      	ldr	r2, [pc, #320]	; (80078d0 <printMachineCredentials+0x15c>)
 800778e:	2101      	movs	r1, #1
 8007790:	2002      	movs	r0, #2
 8007792:	f000 fa3b 	bl	8007c0c <lcd_print>
		for(int i=0; i<16-idLength; i++) {
 8007796:	2300      	movs	r3, #0
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
 800779a:	e00b      	b.n	80077b4 <printMachineCredentials+0x40>
			lcd_delete_char(2, idLength);
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	2002      	movs	r0, #2
 80077a4:	f000 fa68 	bl	8007c78 <lcd_delete_char>
			idLength++;
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	3301      	adds	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0; i<16-idLength; i++) {
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	3301      	adds	r3, #1
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	f1c3 0310 	rsb	r3, r3, #16
 80077ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077bc:	429a      	cmp	r2, r3
 80077be:	dbed      	blt.n	800779c <printMachineCredentials+0x28>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}
	}
}
 80077c0:	e081      	b.n	80078c6 <printMachineCredentials+0x152>
	} else if(state == 2) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d13f      	bne.n	8007848 <printMachineCredentials+0xd4>
		int ssidLength = strlen(wifiSSID);
 80077c8:	4842      	ldr	r0, [pc, #264]	; (80078d4 <printMachineCredentials+0x160>)
 80077ca:	f7f8 fd2b 	bl	8000224 <strlen>
 80077ce:	4603      	mov	r3, r0
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
		if(ssidLength == 16) {
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d105      	bne.n	80077e4 <printMachineCredentials+0x70>
			lcd_print(2, 1, wifiSSID);
 80077d8:	4a3e      	ldr	r2, [pc, #248]	; (80078d4 <printMachineCredentials+0x160>)
 80077da:	2101      	movs	r1, #1
 80077dc:	2002      	movs	r0, #2
 80077de:	f000 fa15 	bl	8007c0c <lcd_print>
}
 80077e2:	e070      	b.n	80078c6 <printMachineCredentials+0x152>
		} else if(ssidLength < 16) {
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	dc15      	bgt.n	8007816 <printMachineCredentials+0xa2>
			for(int i=0; i<16-ssidLength; i++) {
 80077ea:	2300      	movs	r3, #0
 80077ec:	623b      	str	r3, [r7, #32]
 80077ee:	e00b      	b.n	8007808 <printMachineCredentials+0x94>
				lcd_delete_char(2, ssidLength);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	4619      	mov	r1, r3
 80077f6:	2002      	movs	r0, #2
 80077f8:	f000 fa3e 	bl	8007c78 <lcd_delete_char>
				ssidLength++;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	3301      	adds	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i=0; i<16-ssidLength; i++) {
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	3301      	adds	r3, #1
 8007806:	623b      	str	r3, [r7, #32]
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	f1c3 0310 	rsb	r3, r3, #16
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	429a      	cmp	r2, r3
 8007812:	dbed      	blt.n	80077f0 <printMachineCredentials+0x7c>
}
 8007814:	e057      	b.n	80078c6 <printMachineCredentials+0x152>
			int lcdVal = 1;
 8007816:	2301      	movs	r3, #1
 8007818:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e00f      	b.n	8007840 <printMachineCredentials+0xcc>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	b2d9      	uxtb	r1, r3
 8007824:	4a2b      	ldr	r2, [pc, #172]	; (80078d4 <printMachineCredentials+0x160>)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	4413      	add	r3, r2
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	2002      	movs	r0, #2
 8007830:	f000 fa01 	bl	8007c36 <lcd_print_char>
				lcdVal++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	3301      	adds	r3, #1
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b0f      	cmp	r3, #15
 8007844:	ddec      	ble.n	8007820 <printMachineCredentials+0xac>
}
 8007846:	e03e      	b.n	80078c6 <printMachineCredentials+0x152>
		int passLength = strlen(wifiPass);
 8007848:	4823      	ldr	r0, [pc, #140]	; (80078d8 <printMachineCredentials+0x164>)
 800784a:	f7f8 fceb 	bl	8000224 <strlen>
 800784e:	4603      	mov	r3, r0
 8007850:	617b      	str	r3, [r7, #20]
		if(passLength == 16) {
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b10      	cmp	r3, #16
 8007856:	d105      	bne.n	8007864 <printMachineCredentials+0xf0>
			lcd_print(2, 1, wifiPass);
 8007858:	4a1f      	ldr	r2, [pc, #124]	; (80078d8 <printMachineCredentials+0x164>)
 800785a:	2101      	movs	r1, #1
 800785c:	2002      	movs	r0, #2
 800785e:	f000 f9d5 	bl	8007c0c <lcd_print>
}
 8007862:	e030      	b.n	80078c6 <printMachineCredentials+0x152>
		} else if(passLength < 16) {
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	dc15      	bgt.n	8007896 <printMachineCredentials+0x122>
			for(int i=0; i<16-passLength; i++) {
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	e00b      	b.n	8007888 <printMachineCredentials+0x114>
				lcd_delete_char(2, passLength);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	2002      	movs	r0, #2
 8007878:	f000 f9fe 	bl	8007c78 <lcd_delete_char>
				passLength++;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3301      	adds	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
			for(int i=0; i<16-passLength; i++) {
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	3301      	adds	r3, #1
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f1c3 0310 	rsb	r3, r3, #16
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	429a      	cmp	r2, r3
 8007892:	dbed      	blt.n	8007870 <printMachineCredentials+0xfc>
}
 8007894:	e017      	b.n	80078c6 <printMachineCredentials+0x152>
			int lcdVal = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	e00f      	b.n	80078c0 <printMachineCredentials+0x14c>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	b2d9      	uxtb	r1, r3
 80078a4:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <printMachineCredentials+0x164>)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4413      	add	r3, r2
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	2002      	movs	r0, #2
 80078b0:	f000 f9c1 	bl	8007c36 <lcd_print_char>
				lcdVal++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	3301      	adds	r3, #1
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	ddec      	ble.n	80078a0 <printMachineCredentials+0x12c>
}
 80078c6:	bf00      	nop
 80078c8:	3730      	adds	r7, #48	; 0x30
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000190 	.word	0x20000190
 80078d4:	2000019c 	.word	0x2000019c
 80078d8:	200001b0 	.word	0x200001b0

080078dc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	f023 030f 	bic.w	r3, r3, #15
 80078ec:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80078f4:	7b7b      	ldrb	r3, [r7, #13]
 80078f6:	f043 030c 	orr.w	r3, r3, #12
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80078fe:	7b7b      	ldrb	r3, [r7, #13]
 8007900:	f043 0308 	orr.w	r3, r3, #8
 8007904:	b2db      	uxtb	r3, r3
 8007906:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007908:	7b3b      	ldrb	r3, [r7, #12]
 800790a:	f043 030c 	orr.w	r3, r3, #12
 800790e:	b2db      	uxtb	r3, r3
 8007910:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007912:	7b3b      	ldrb	r3, [r7, #12]
 8007914:	f043 0308 	orr.w	r3, r3, #8
 8007918:	b2db      	uxtb	r3, r3
 800791a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800791c:	bf00      	nop
 800791e:	4825      	ldr	r0, [pc, #148]	; (80079b4 <lcd_send_cmd+0xd8>)
 8007920:	f002 fac3 	bl	8009eaa <HAL_I2C_GetError>
 8007924:	4603      	mov	r3, r0
 8007926:	2b04      	cmp	r3, #4
 8007928:	d0f9      	beq.n	800791e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800792a:	bf00      	nop
 800792c:	4821      	ldr	r0, [pc, #132]	; (80079b4 <lcd_send_cmd+0xd8>)
 800792e:	f002 faaf 	bl	8009e90 <HAL_I2C_GetState>
 8007932:	4603      	mov	r3, r0
 8007934:	2b20      	cmp	r3, #32
 8007936:	d1f9      	bne.n	800792c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007938:	4b1f      	ldr	r3, [pc, #124]	; (80079b8 <lcd_send_cmd+0xdc>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d116      	bne.n	800796e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007940:	2300      	movs	r3, #0
 8007942:	73fb      	strb	r3, [r7, #15]
 8007944:	e00f      	b.n	8007966 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	3310      	adds	r3, #16
 800794a:	443b      	add	r3, r7
 800794c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	f022 0208 	bic.w	r2, r2, #8
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	3310      	adds	r3, #16
 800795a:	443b      	add	r3, r7
 800795c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	3301      	adds	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d9ec      	bls.n	8007946 <lcd_send_cmd+0x6a>
 800796c:	e015      	b.n	800799a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800796e:	2300      	movs	r3, #0
 8007970:	73bb      	strb	r3, [r7, #14]
 8007972:	e00f      	b.n	8007994 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	3310      	adds	r3, #16
 8007978:	443b      	add	r3, r7
 800797a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f042 0208 	orr.w	r2, r2, #8
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	3310      	adds	r3, #16
 8007988:	443b      	add	r3, r7
 800798a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	3301      	adds	r3, #1
 8007992:	73bb      	strb	r3, [r7, #14]
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d9ec      	bls.n	8007974 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800799a:	f107 0208 	add.w	r2, r7, #8
 800799e:	2364      	movs	r3, #100	; 0x64
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	2304      	movs	r3, #4
 80079a4:	214e      	movs	r1, #78	; 0x4e
 80079a6:	4803      	ldr	r0, [pc, #12]	; (80079b4 <lcd_send_cmd+0xd8>)
 80079a8:	f001 fe12 	bl	80095d0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80079ac:	bf00      	nop
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	200003a8 	.word	0x200003a8
 80079b8:	2000037e 	.word	0x2000037e

080079bc <lcd_send_data>:

void lcd_send_data (char data) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	f023 030f 	bic.w	r3, r3, #15
 80079cc:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80079d4:	7b7b      	ldrb	r3, [r7, #13]
 80079d6:	f043 030d 	orr.w	r3, r3, #13
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80079de:	7b7b      	ldrb	r3, [r7, #13]
 80079e0:	f043 0309 	orr.w	r3, r3, #9
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80079e8:	7b3b      	ldrb	r3, [r7, #12]
 80079ea:	f043 030d 	orr.w	r3, r3, #13
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80079f2:	7b3b      	ldrb	r3, [r7, #12]
 80079f4:	f043 0309 	orr.w	r3, r3, #9
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079fc:	bf00      	nop
 80079fe:	4825      	ldr	r0, [pc, #148]	; (8007a94 <lcd_send_data+0xd8>)
 8007a00:	f002 fa53 	bl	8009eaa <HAL_I2C_GetError>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d0f9      	beq.n	80079fe <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a0a:	bf00      	nop
 8007a0c:	4821      	ldr	r0, [pc, #132]	; (8007a94 <lcd_send_data+0xd8>)
 8007a0e:	f002 fa3f 	bl	8009e90 <HAL_I2C_GetState>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d1f9      	bne.n	8007a0c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a18:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <lcd_send_data+0xdc>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d116      	bne.n	8007a4e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
 8007a24:	e00f      	b.n	8007a46 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	3310      	adds	r3, #16
 8007a2a:	443b      	add	r3, r7
 8007a2c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	f022 0208 	bic.w	r2, r2, #8
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	3310      	adds	r3, #16
 8007a3a:	443b      	add	r3, r7
 8007a3c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	3301      	adds	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d9ec      	bls.n	8007a26 <lcd_send_data+0x6a>
 8007a4c:	e015      	b.n	8007a7a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73bb      	strb	r3, [r7, #14]
 8007a52:	e00f      	b.n	8007a74 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	3310      	adds	r3, #16
 8007a58:	443b      	add	r3, r7
 8007a5a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	f042 0208 	orr.w	r2, r2, #8
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	3310      	adds	r3, #16
 8007a68:	443b      	add	r3, r7
 8007a6a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	3301      	adds	r3, #1
 8007a72:	73bb      	strb	r3, [r7, #14]
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d9ec      	bls.n	8007a54 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	2364      	movs	r3, #100	; 0x64
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2304      	movs	r3, #4
 8007a84:	214e      	movs	r1, #78	; 0x4e
 8007a86:	4803      	ldr	r0, [pc, #12]	; (8007a94 <lcd_send_data+0xd8>)
 8007a88:	f001 fda2 	bl	80095d0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200003a8 	.word	0x200003a8
 8007a98:	2000037e 	.word	0x2000037e

08007a9c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007aa4:	e006      	b.n	8007ab4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ff84 	bl	80079bc <lcd_send_data>
	while (*str) {
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f4      	bne.n	8007aa6 <lcd_send_string+0xa>
	}
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	f023 030f 	bic.w	r3, r3, #15
 8007ad8:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007ae0:	7b7b      	ldrb	r3, [r7, #13]
 8007ae2:	f043 030d 	orr.w	r3, r3, #13
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007aea:	7b7b      	ldrb	r3, [r7, #13]
 8007aec:	f043 0309 	orr.w	r3, r3, #9
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007af4:	7b3b      	ldrb	r3, [r7, #12]
 8007af6:	f043 030d 	orr.w	r3, r3, #13
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007afe:	7b3b      	ldrb	r3, [r7, #12]
 8007b00:	f043 0309 	orr.w	r3, r3, #9
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b08:	bf00      	nop
 8007b0a:	4825      	ldr	r0, [pc, #148]	; (8007ba0 <lcd_send_char+0xd8>)
 8007b0c:	f002 f9cd 	bl	8009eaa <HAL_I2C_GetError>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d0f9      	beq.n	8007b0a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b16:	bf00      	nop
 8007b18:	4821      	ldr	r0, [pc, #132]	; (8007ba0 <lcd_send_char+0xd8>)
 8007b1a:	f002 f9b9 	bl	8009e90 <HAL_I2C_GetState>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d1f9      	bne.n	8007b18 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007b24:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <lcd_send_char+0xdc>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d116      	bne.n	8007b5a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e00f      	b.n	8007b52 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	3310      	adds	r3, #16
 8007b36:	443b      	add	r3, r7
 8007b38:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	f022 0208 	bic.w	r2, r2, #8
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	3310      	adds	r3, #16
 8007b46:	443b      	add	r3, r7
 8007b48:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d9ec      	bls.n	8007b32 <lcd_send_char+0x6a>
 8007b58:	e015      	b.n	8007b86 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73bb      	strb	r3, [r7, #14]
 8007b5e:	e00f      	b.n	8007b80 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	3310      	adds	r3, #16
 8007b64:	443b      	add	r3, r7
 8007b66:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f042 0208 	orr.w	r2, r2, #8
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	3310      	adds	r3, #16
 8007b74:	443b      	add	r3, r7
 8007b76:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	73bb      	strb	r3, [r7, #14]
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d9ec      	bls.n	8007b60 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	2364      	movs	r3, #100	; 0x64
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	2304      	movs	r3, #4
 8007b90:	214e      	movs	r1, #78	; 0x4e
 8007b92:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <lcd_send_char+0xd8>)
 8007b94:	f001 fd1c 	bl	80095d0 <HAL_I2C_Master_Transmit>
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	200003a8 	.word	0x200003a8
 8007ba4:	2000037e 	.word	0x2000037e

08007ba8 <lcd_init>:

void lcd_init (void) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007bac:	2002      	movs	r0, #2
 8007bae:	f7ff fe95 	bl	80078dc <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007bb2:	2028      	movs	r0, #40	; 0x28
 8007bb4:	f7ff fe92 	bl	80078dc <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007bb8:	200c      	movs	r0, #12
 8007bba:	f7ff fe8f 	bl	80078dc <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007bbe:	2080      	movs	r0, #128	; 0x80
 8007bc0:	f7ff fe8c 	bl	80078dc <lcd_send_cmd>
	lcd_backlight(1);
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	f000 f86d 	bl	8007ca4 <lcd_backlight>
}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	71fb      	strb	r3, [r7, #7]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d106      	bne.n	8007bf2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007be4:	79bb      	ldrb	r3, [r7, #6]
 8007be6:	337f      	adds	r3, #127	; 0x7f
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fe76 	bl	80078dc <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007bf0:	e008      	b.n	8007c04 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d105      	bne.n	8007c04 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007bf8:	79bb      	ldrb	r3, [r7, #6]
 8007bfa:	3b41      	subs	r3, #65	; 0x41
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fe6c 	bl	80078dc <lcd_send_cmd>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	603a      	str	r2, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007c1c:	79ba      	ldrb	r2, [r7, #6]
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ffd3 	bl	8007bce <lcd_gotoxy>
	lcd_send_string(str);
 8007c28:	6838      	ldr	r0, [r7, #0]
 8007c2a:	f7ff ff37 	bl	8007a9c <lcd_send_string>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	71fb      	strb	r3, [r7, #7]
 8007c40:	460b      	mov	r3, r1
 8007c42:	71bb      	strb	r3, [r7, #6]
 8007c44:	4613      	mov	r3, r2
 8007c46:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007c48:	79ba      	ldrb	r2, [r7, #6]
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff ffbd 	bl	8007bce <lcd_gotoxy>
    lcd_send_char(ch);
 8007c54:	797b      	ldrb	r3, [r7, #5]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff36 	bl	8007ac8 <lcd_send_char>
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <lcd_clear>:

void lcd_clear(void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f7ff fe37 	bl	80078dc <lcd_send_cmd>
    HAL_Delay(2);
 8007c6e:	2002      	movs	r0, #2
 8007c70:	f000 fd22 	bl	80086b8 <HAL_Delay>
}
 8007c74:	bf00      	nop
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	460a      	mov	r2, r1
 8007c82:	71fb      	strb	r3, [r7, #7]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007c88:	79ba      	ldrb	r2, [r7, #6]
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff ff9d 	bl	8007bce <lcd_gotoxy>

    lcd_send_char(' ');
 8007c94:	2020      	movs	r0, #32
 8007c96:	f7ff ff17 	bl	8007ac8 <lcd_send_char>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007cae:	4a05      	ldr	r2, [pc, #20]	; (8007cc4 <lcd_backlight+0x20>)
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7ff fe11 	bl	80078dc <lcd_send_cmd>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2000037e 	.word	0x2000037e

08007cc8 <lcd_cursor>:

void lcd_cursor(int state) {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d106      	bne.n	8007ce4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007cd6:	200e      	movs	r0, #14
 8007cd8:	f7ff fe00 	bl	80078dc <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007cdc:	200f      	movs	r0, #15
 8007cde:	f7ff fdfd 	bl	80078dc <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007ce2:	e002      	b.n	8007cea <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007ce4:	200c      	movs	r0, #12
 8007ce6:	f7ff fdf9 	bl	80078dc <lcd_send_cmd>
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007cfc:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	4a03      	ldr	r2, [pc, #12]	; (8007d10 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d04:	6013      	str	r3, [r2, #0]
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr
 8007d10:	200001fc 	.word	0x200001fc

08007d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d18:	f000 fc6c 	bl	80085f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d20:	f000 fcca 	bl	80086b8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d24:	f000 f89c 	bl	8007e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d28:	f000 f9be 	bl	80080a8 <MX_GPIO_Init>
  MX_CAN_Init();
 8007d2c:	f000 f8de 	bl	8007eec <MX_CAN_Init>
  MX_I2C1_Init();
 8007d30:	f000 f910 	bl	8007f54 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007d34:	f000 f93c 	bl	8007fb0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d38:	f000 f98c 	bl	8008054 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	2140      	movs	r1, #64	; 0x40
 8007d40:	483e      	ldr	r0, [pc, #248]	; (8007e3c <main+0x128>)
 8007d42:	f001 faa0 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d46:	2201      	movs	r2, #1
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	483c      	ldr	r0, [pc, #240]	; (8007e3c <main+0x128>)
 8007d4c:	f001 fa9b 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007d50:	200a      	movs	r0, #10
 8007d52:	f000 fcb1 	bl	80086b8 <HAL_Delay>
  lcd_init();
 8007d56:	f7ff ff27 	bl	8007ba8 <lcd_init>
  HAL_Delay(10);
 8007d5a:	200a      	movs	r0, #10
 8007d5c:	f000 fcac 	bl	80086b8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007d60:	4837      	ldr	r0, [pc, #220]	; (8007e40 <main+0x12c>)
 8007d62:	f003 f943 	bl	800afec <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d66:	bf00      	nop
 8007d68:	4836      	ldr	r0, [pc, #216]	; (8007e44 <main+0x130>)
 8007d6a:	f002 f89e 	bl	8009eaa <HAL_I2C_GetError>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d0f9      	beq.n	8007d68 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d74:	bf00      	nop
 8007d76:	4833      	ldr	r0, [pc, #204]	; (8007e44 <main+0x130>)
 8007d78:	f002 f88a 	bl	8009e90 <HAL_I2C_GetState>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d1f9      	bne.n	8007d76 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d82:	2200      	movs	r2, #0
 8007d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d88:	482c      	ldr	r0, [pc, #176]	; (8007e3c <main+0x128>)
 8007d8a:	f001 fa7c 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d94:	4829      	ldr	r0, [pc, #164]	; (8007e3c <main+0x128>)
 8007d96:	f001 fa76 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2104      	movs	r1, #4
 8007d9e:	4827      	ldr	r0, [pc, #156]	; (8007e3c <main+0x128>)
 8007da0:	f001 fa71 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007da4:	2200      	movs	r2, #0
 8007da6:	2102      	movs	r1, #2
 8007da8:	4824      	ldr	r0, [pc, #144]	; (8007e3c <main+0x128>)
 8007daa:	f001 fa6c 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007dae:	2200      	movs	r2, #0
 8007db0:	2101      	movs	r1, #1
 8007db2:	4822      	ldr	r0, [pc, #136]	; (8007e3c <main+0x128>)
 8007db4:	f001 fa67 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007db8:	2200      	movs	r2, #0
 8007dba:	2120      	movs	r1, #32
 8007dbc:	4822      	ldr	r0, [pc, #136]	; (8007e48 <main+0x134>)
 8007dbe:	f001 fa62 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2110      	movs	r1, #16
 8007dc6:	4820      	ldr	r0, [pc, #128]	; (8007e48 <main+0x134>)
 8007dc8:	f001 fa5d 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2180      	movs	r1, #128	; 0x80
 8007dd0:	481e      	ldr	r0, [pc, #120]	; (8007e4c <main+0x138>)
 8007dd2:	f001 fa58 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2140      	movs	r1, #64	; 0x40
 8007dda:	481c      	ldr	r0, [pc, #112]	; (8007e4c <main+0x138>)
 8007ddc:	f001 fa53 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007de0:	2200      	movs	r2, #0
 8007de2:	2120      	movs	r1, #32
 8007de4:	4819      	ldr	r0, [pc, #100]	; (8007e4c <main+0x138>)
 8007de6:	f001 fa4e 	bl	8009286 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2110      	movs	r1, #16
 8007dee:	4817      	ldr	r0, [pc, #92]	; (8007e4c <main+0x138>)
 8007df0:	f001 fa49 	bl	8009286 <HAL_GPIO_WritePin>

  i2cTest();
 8007df4:	f7f8 ff20 	bl	8000c38 <i2cTest>
  HAL_Delay(100);
 8007df8:	2064      	movs	r0, #100	; 0x64
 8007dfa:	f000 fc5d 	bl	80086b8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <main+0x13c>)
 8007e00:	2101      	movs	r1, #1
 8007e02:	2001      	movs	r0, #1
 8007e04:	f7ff ff02 	bl	8007c0c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e08:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <main+0x140>)
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	2002      	movs	r0, #2
 8007e0e:	f7ff fefd 	bl	8007c0c <lcd_print>
  HAL_Delay(1000);
 8007e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e16:	f000 fc4f 	bl	80086b8 <HAL_Delay>
  lcd_clear();
 8007e1a:	f7ff ff23 	bl	8007c64 <lcd_clear>

  eepromKontrol();
 8007e1e:	f7f8 fa09 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e26:	f000 fc47 	bl	80086b8 <HAL_Delay>

  backLightTimer = millis;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <main+0x144>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a0b      	ldr	r2, [pc, #44]	; (8007e5c <main+0x148>)
 8007e30:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007e32:	f7ff fc77 	bl	8007724 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007e36:	f7fe fc83 	bl	8006740 <mainLoop>
 8007e3a:	e7fc      	b.n	8007e36 <main+0x122>
 8007e3c:	40010c00 	.word	0x40010c00
 8007e40:	200003fc 	.word	0x200003fc
 8007e44:	200003a8 	.word	0x200003a8
 8007e48:	40011000 	.word	0x40011000
 8007e4c:	40010800 	.word	0x40010800
 8007e50:	0800dc1c 	.word	0x0800dc1c
 8007e54:	0800dc30 	.word	0x0800dc30
 8007e58:	200001fc 	.word	0x200001fc
 8007e5c:	20000218 	.word	0x20000218

08007e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b090      	sub	sp, #64	; 0x40
 8007e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e66:	f107 0318 	add.w	r3, r7, #24
 8007e6a:	2228      	movs	r2, #40	; 0x28
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f004 fb45 	bl	800c4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e90:	2301      	movs	r3, #1
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e94:	2302      	movs	r3, #2
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ea4:	f107 0318 	add.w	r3, r7, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f002 fc3f 	bl	800a72c <HAL_RCC_OscConfig>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007eb4:	f000 f9a2 	bl	80081fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eb8:	230f      	movs	r3, #15
 8007eba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f002 feac 	bl	800ac30 <HAL_RCC_ClockConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007ede:	f000 f98d 	bl	80081fc <Error_Handler>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3740      	adds	r7, #64	; 0x40
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ef0:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <MX_CAN_Init+0x60>)
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <MX_CAN_Init+0x64>)
 8007ef4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ef6:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <MX_CAN_Init+0x60>)
 8007ef8:	2210      	movs	r2, #16
 8007efa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007efc:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <MX_CAN_Init+0x60>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007f14:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007f38:	4804      	ldr	r0, [pc, #16]	; (8007f4c <MX_CAN_Init+0x60>)
 8007f3a:	f000 fbe1 	bl	8008700 <HAL_CAN_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007f44:	f000 f95a 	bl	80081fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007f48:	bf00      	nop
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000380 	.word	0x20000380
 8007f50:	40006400 	.word	0x40006400

08007f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f5a:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <MX_I2C1_Init+0x54>)
 8007f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007f5e:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f60:	4a12      	ldr	r2, [pc, #72]	; (8007fac <MX_I2C1_Init+0x58>)
 8007f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f8a:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f90:	4804      	ldr	r0, [pc, #16]	; (8007fa4 <MX_I2C1_Init+0x50>)
 8007f92:	f001 f9a9 	bl	80092e8 <HAL_I2C_Init>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f9c:	f000 f92e 	bl	80081fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007fa0:	bf00      	nop
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	200003a8 	.word	0x200003a8
 8007fa8:	40005400 	.word	0x40005400
 8007fac:	00061a80 	.word	0x00061a80

08007fb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007fcc:	4b1f      	ldr	r3, [pc, #124]	; (800804c <MX_TIM1_Init+0x9c>)
 8007fce:	4a20      	ldr	r2, [pc, #128]	; (8008050 <MX_TIM1_Init+0xa0>)
 8007fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007fd2:	4b1e      	ldr	r3, [pc, #120]	; (800804c <MX_TIM1_Init+0x9c>)
 8007fd4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007fd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fda:	4b1c      	ldr	r3, [pc, #112]	; (800804c <MX_TIM1_Init+0x9c>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007fe0:	4b1a      	ldr	r3, [pc, #104]	; (800804c <MX_TIM1_Init+0x9c>)
 8007fe2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe8:	4b18      	ldr	r3, [pc, #96]	; (800804c <MX_TIM1_Init+0x9c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007fee:	4b17      	ldr	r3, [pc, #92]	; (800804c <MX_TIM1_Init+0x9c>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ff4:	4b15      	ldr	r3, [pc, #84]	; (800804c <MX_TIM1_Init+0x9c>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007ffa:	4814      	ldr	r0, [pc, #80]	; (800804c <MX_TIM1_Init+0x9c>)
 8007ffc:	f002 ffa6 	bl	800af4c <HAL_TIM_Base_Init>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008006:	f000 f8f9 	bl	80081fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800800a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800800e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4619      	mov	r1, r3
 8008016:	480d      	ldr	r0, [pc, #52]	; (800804c <MX_TIM1_Init+0x9c>)
 8008018:	f003 f950 	bl	800b2bc <HAL_TIM_ConfigClockSource>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008022:	f000 f8eb 	bl	80081fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008026:	2300      	movs	r3, #0
 8008028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800802e:	463b      	mov	r3, r7
 8008030:	4619      	mov	r1, r3
 8008032:	4806      	ldr	r0, [pc, #24]	; (800804c <MX_TIM1_Init+0x9c>)
 8008034:	f003 fb3e 	bl	800b6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800803e:	f000 f8dd 	bl	80081fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008042:	bf00      	nop
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200003fc 	.word	0x200003fc
 8008050:	40012c00 	.word	0x40012c00

08008054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008058:	4b11      	ldr	r3, [pc, #68]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <MX_USART1_UART_Init+0x50>)
 800805c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800805e:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 8008060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008066:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 8008068:	2200      	movs	r2, #0
 800806a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800806c:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 800806e:	2200      	movs	r2, #0
 8008070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008072:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 8008074:	2200      	movs	r2, #0
 8008076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008078:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 800807a:	220c      	movs	r2, #12
 800807c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800807e:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 8008080:	2200      	movs	r2, #0
 8008082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 8008086:	2200      	movs	r2, #0
 8008088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800808a:	4805      	ldr	r0, [pc, #20]	; (80080a0 <MX_USART1_UART_Init+0x4c>)
 800808c:	f003 fb90 	bl	800b7b0 <HAL_UART_Init>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008096:	f000 f8b1 	bl	80081fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800809a:	bf00      	nop
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000444 	.word	0x20000444
 80080a4:	40013800 	.word	0x40013800

080080a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	605a      	str	r2, [r3, #4]
 80080b8:	609a      	str	r2, [r3, #8]
 80080ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080bc:	4b4b      	ldr	r3, [pc, #300]	; (80081ec <MX_GPIO_Init+0x144>)
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	4a4a      	ldr	r2, [pc, #296]	; (80081ec <MX_GPIO_Init+0x144>)
 80080c2:	f043 0310 	orr.w	r3, r3, #16
 80080c6:	6193      	str	r3, [r2, #24]
 80080c8:	4b48      	ldr	r3, [pc, #288]	; (80081ec <MX_GPIO_Init+0x144>)
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <MX_GPIO_Init+0x144>)
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	4a44      	ldr	r2, [pc, #272]	; (80081ec <MX_GPIO_Init+0x144>)
 80080da:	f043 0320 	orr.w	r3, r3, #32
 80080de:	6193      	str	r3, [r2, #24]
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <MX_GPIO_Init+0x144>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ec:	4b3f      	ldr	r3, [pc, #252]	; (80081ec <MX_GPIO_Init+0x144>)
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	4a3e      	ldr	r2, [pc, #248]	; (80081ec <MX_GPIO_Init+0x144>)
 80080f2:	f043 0304 	orr.w	r3, r3, #4
 80080f6:	6193      	str	r3, [r2, #24]
 80080f8:	4b3c      	ldr	r3, [pc, #240]	; (80081ec <MX_GPIO_Init+0x144>)
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008104:	4b39      	ldr	r3, [pc, #228]	; (80081ec <MX_GPIO_Init+0x144>)
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	4a38      	ldr	r2, [pc, #224]	; (80081ec <MX_GPIO_Init+0x144>)
 800810a:	f043 0308 	orr.w	r3, r3, #8
 800810e:	6193      	str	r3, [r2, #24]
 8008110:	4b36      	ldr	r3, [pc, #216]	; (80081ec <MX_GPIO_Init+0x144>)
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800811c:	2200      	movs	r2, #0
 800811e:	21f0      	movs	r1, #240	; 0xf0
 8008120:	4833      	ldr	r0, [pc, #204]	; (80081f0 <MX_GPIO_Init+0x148>)
 8008122:	f001 f8b0 	bl	8009286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008126:	2200      	movs	r2, #0
 8008128:	f241 0130 	movw	r1, #4144	; 0x1030
 800812c:	4831      	ldr	r0, [pc, #196]	; (80081f4 <MX_GPIO_Init+0x14c>)
 800812e:	f001 f8aa 	bl	8009286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008132:	2200      	movs	r2, #0
 8008134:	f640 4107 	movw	r1, #3079	; 0xc07
 8008138:	482f      	ldr	r0, [pc, #188]	; (80081f8 <MX_GPIO_Init+0x150>)
 800813a:	f001 f8a4 	bl	8009286 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800813e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008142:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008148:	2300      	movs	r3, #0
 800814a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800814c:	f107 0310 	add.w	r3, r7, #16
 8008150:	4619      	mov	r1, r3
 8008152:	4828      	ldr	r0, [pc, #160]	; (80081f4 <MX_GPIO_Init+0x14c>)
 8008154:	f000 fe20 	bl	8008d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008158:	f248 130f 	movw	r3, #33039	; 0x810f
 800815c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4619      	mov	r1, r3
 800816c:	4820      	ldr	r0, [pc, #128]	; (80081f0 <MX_GPIO_Init+0x148>)
 800816e:	f000 fe13 	bl	8008d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008172:	23f0      	movs	r3, #240	; 0xf0
 8008174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008176:	2301      	movs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800817e:	2302      	movs	r3, #2
 8008180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008182:	f107 0310 	add.w	r3, r7, #16
 8008186:	4619      	mov	r1, r3
 8008188:	4819      	ldr	r0, [pc, #100]	; (80081f0 <MX_GPIO_Init+0x148>)
 800818a:	f000 fe05 	bl	8008d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800818e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008198:	2300      	movs	r3, #0
 800819a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819c:	2302      	movs	r3, #2
 800819e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	4619      	mov	r1, r3
 80081a6:	4813      	ldr	r0, [pc, #76]	; (80081f4 <MX_GPIO_Init+0x14c>)
 80081a8:	f000 fdf6 	bl	8008d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081ac:	f640 4307 	movw	r3, #3079	; 0xc07
 80081b0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081b2:	2301      	movs	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ba:	2302      	movs	r3, #2
 80081bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081be:	f107 0310 	add.w	r3, r7, #16
 80081c2:	4619      	mov	r1, r3
 80081c4:	480c      	ldr	r0, [pc, #48]	; (80081f8 <MX_GPIO_Init+0x150>)
 80081c6:	f000 fde7 	bl	8008d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80081ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80081ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4806      	ldr	r0, [pc, #24]	; (80081f8 <MX_GPIO_Init+0x150>)
 80081e0:	f000 fdda 	bl	8008d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80081e4:	bf00      	nop
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	40021000 	.word	0x40021000
 80081f0:	40010800 	.word	0x40010800
 80081f4:	40011000 	.word	0x40011000
 80081f8:	40010c00 	.word	0x40010c00

080081fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <HAL_MspInit+0x5c>)
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	4a14      	ldr	r2, [pc, #80]	; (8008264 <HAL_MspInit+0x5c>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6193      	str	r3, [r2, #24]
 800821a:	4b12      	ldr	r3, [pc, #72]	; (8008264 <HAL_MspInit+0x5c>)
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008226:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <HAL_MspInit+0x5c>)
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4a0e      	ldr	r2, [pc, #56]	; (8008264 <HAL_MspInit+0x5c>)
 800822c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008230:	61d3      	str	r3, [r2, #28]
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <HAL_MspInit+0x5c>)
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800823a:	607b      	str	r3, [r7, #4]
 800823c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <HAL_MspInit+0x60>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	4a04      	ldr	r2, [pc, #16]	; (8008268 <HAL_MspInit+0x60>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	40021000 	.word	0x40021000
 8008268:	40010000 	.word	0x40010000

0800826c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008274:	f107 0310 	add.w	r3, r7, #16
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <HAL_CAN_MspInit+0x8c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d131      	bne.n	80082f0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800828c:	4b1b      	ldr	r3, [pc, #108]	; (80082fc <HAL_CAN_MspInit+0x90>)
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	4a1a      	ldr	r2, [pc, #104]	; (80082fc <HAL_CAN_MspInit+0x90>)
 8008292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008296:	61d3      	str	r3, [r2, #28]
 8008298:	4b18      	ldr	r3, [pc, #96]	; (80082fc <HAL_CAN_MspInit+0x90>)
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <HAL_CAN_MspInit+0x90>)
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	4a14      	ldr	r2, [pc, #80]	; (80082fc <HAL_CAN_MspInit+0x90>)
 80082aa:	f043 0304 	orr.w	r3, r3, #4
 80082ae:	6193      	str	r3, [r2, #24]
 80082b0:	4b12      	ldr	r3, [pc, #72]	; (80082fc <HAL_CAN_MspInit+0x90>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80082bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ca:	f107 0310 	add.w	r3, r7, #16
 80082ce:	4619      	mov	r1, r3
 80082d0:	480b      	ldr	r0, [pc, #44]	; (8008300 <HAL_CAN_MspInit+0x94>)
 80082d2:	f000 fd61 	bl	8008d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80082d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082dc:	2302      	movs	r3, #2
 80082de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082e0:	2303      	movs	r3, #3
 80082e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	4619      	mov	r1, r3
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <HAL_CAN_MspInit+0x94>)
 80082ec:	f000 fd54 	bl	8008d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80082f0:	bf00      	nop
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40006400 	.word	0x40006400
 80082fc:	40021000 	.word	0x40021000
 8008300:	40010800 	.word	0x40010800

08008304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a15      	ldr	r2, [pc, #84]	; (8008374 <HAL_I2C_MspInit+0x70>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d123      	bne.n	800836c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008324:	4b14      	ldr	r3, [pc, #80]	; (8008378 <HAL_I2C_MspInit+0x74>)
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	4a13      	ldr	r2, [pc, #76]	; (8008378 <HAL_I2C_MspInit+0x74>)
 800832a:	f043 0308 	orr.w	r3, r3, #8
 800832e:	6193      	str	r3, [r2, #24]
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <HAL_I2C_MspInit+0x74>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800833c:	23c0      	movs	r3, #192	; 0xc0
 800833e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008340:	2312      	movs	r3, #18
 8008342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008344:	2303      	movs	r3, #3
 8008346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	4619      	mov	r1, r3
 800834e:	480b      	ldr	r0, [pc, #44]	; (800837c <HAL_I2C_MspInit+0x78>)
 8008350:	f000 fd22 	bl	8008d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008354:	4b08      	ldr	r3, [pc, #32]	; (8008378 <HAL_I2C_MspInit+0x74>)
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	4a07      	ldr	r2, [pc, #28]	; (8008378 <HAL_I2C_MspInit+0x74>)
 800835a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800835e:	61d3      	str	r3, [r2, #28]
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <HAL_I2C_MspInit+0x74>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800836c:	bf00      	nop
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40005400 	.word	0x40005400
 8008378:	40021000 	.word	0x40021000
 800837c:	40010c00 	.word	0x40010c00

08008380 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <HAL_I2C_MspDeInit+0x38>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d10d      	bne.n	80083ae <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_I2C_MspDeInit+0x3c>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <HAL_I2C_MspDeInit+0x3c>)
 8008398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800839c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800839e:	2140      	movs	r1, #64	; 0x40
 80083a0:	4807      	ldr	r0, [pc, #28]	; (80083c0 <HAL_I2C_MspDeInit+0x40>)
 80083a2:	f000 fe8d 	bl	80090c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	4805      	ldr	r0, [pc, #20]	; (80083c0 <HAL_I2C_MspDeInit+0x40>)
 80083aa:	f000 fe89 	bl	80090c0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40005400 	.word	0x40005400
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40010c00 	.word	0x40010c00

080083c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0d      	ldr	r2, [pc, #52]	; (8008408 <HAL_TIM_Base_MspInit+0x44>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d113      	bne.n	80083fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083d6:	4b0d      	ldr	r3, [pc, #52]	; (800840c <HAL_TIM_Base_MspInit+0x48>)
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	4a0c      	ldr	r2, [pc, #48]	; (800840c <HAL_TIM_Base_MspInit+0x48>)
 80083dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083e0:	6193      	str	r3, [r2, #24]
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <HAL_TIM_Base_MspInit+0x48>)
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80083ee:	2200      	movs	r2, #0
 80083f0:	2100      	movs	r1, #0
 80083f2:	2019      	movs	r0, #25
 80083f4:	f000 fb57 	bl	8008aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80083f8:	2019      	movs	r0, #25
 80083fa:	f000 fb70 	bl	8008ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40021000 	.word	0x40021000

08008410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a20      	ldr	r2, [pc, #128]	; (80084ac <HAL_UART_MspInit+0x9c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d139      	bne.n	80084a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008430:	4b1f      	ldr	r3, [pc, #124]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 8008436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800843a:	6193      	str	r3, [r2, #24]
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008448:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 800844e:	f043 0304 	orr.w	r3, r3, #4
 8008452:	6193      	str	r3, [r2, #24]
 8008454:	4b16      	ldr	r3, [pc, #88]	; (80084b0 <HAL_UART_MspInit+0xa0>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008466:	2302      	movs	r3, #2
 8008468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800846a:	2303      	movs	r3, #3
 800846c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800846e:	f107 0310 	add.w	r3, r7, #16
 8008472:	4619      	mov	r1, r3
 8008474:	480f      	ldr	r0, [pc, #60]	; (80084b4 <HAL_UART_MspInit+0xa4>)
 8008476:	f000 fc8f 	bl	8008d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800847a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	4619      	mov	r1, r3
 800848e:	4809      	ldr	r0, [pc, #36]	; (80084b4 <HAL_UART_MspInit+0xa4>)
 8008490:	f000 fc82 	bl	8008d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	2025      	movs	r0, #37	; 0x25
 800849a:	f000 fb04 	bl	8008aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800849e:	2025      	movs	r0, #37	; 0x25
 80084a0:	f000 fb1d 	bl	8008ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80084a4:	bf00      	nop
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40013800 	.word	0x40013800
 80084b0:	40021000 	.word	0x40021000
 80084b4:	40010800 	.word	0x40010800

080084b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80084bc:	e7fe      	b.n	80084bc <NMI_Handler+0x4>

080084be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084be:	b480      	push	{r7}
 80084c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084c2:	e7fe      	b.n	80084c2 <HardFault_Handler+0x4>

080084c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084c8:	e7fe      	b.n	80084c8 <MemManage_Handler+0x4>

080084ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084ca:	b480      	push	{r7}
 80084cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084ce:	e7fe      	b.n	80084ce <BusFault_Handler+0x4>

080084d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084d4:	e7fe      	b.n	80084d4 <UsageFault_Handler+0x4>

080084d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084da:	bf00      	nop
 80084dc:	46bd      	mov	sp, r7
 80084de:	bc80      	pop	{r7}
 80084e0:	4770      	bx	lr

080084e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr

080084ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr

080084fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084fe:	f000 f8bf 	bl	8008680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008502:	bf00      	nop
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800850c:	4802      	ldr	r0, [pc, #8]	; (8008518 <TIM1_UP_IRQHandler+0x10>)
 800850e:	f002 fdcd 	bl	800b0ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200003fc 	.word	0x200003fc

0800851c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008520:	4802      	ldr	r0, [pc, #8]	; (800852c <USART1_IRQHandler+0x10>)
 8008522:	f003 f9cb 	bl	800b8bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000444 	.word	0x20000444

08008530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008538:	4a14      	ldr	r2, [pc, #80]	; (800858c <_sbrk+0x5c>)
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <_sbrk+0x60>)
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008544:	4b13      	ldr	r3, [pc, #76]	; (8008594 <_sbrk+0x64>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800854c:	4b11      	ldr	r3, [pc, #68]	; (8008594 <_sbrk+0x64>)
 800854e:	4a12      	ldr	r2, [pc, #72]	; (8008598 <_sbrk+0x68>)
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008552:	4b10      	ldr	r3, [pc, #64]	; (8008594 <_sbrk+0x64>)
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	d207      	bcs.n	8008570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008560:	f003 ffe6 	bl	800c530 <__errno>
 8008564:	4603      	mov	r3, r0
 8008566:	220c      	movs	r2, #12
 8008568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800856e:	e009      	b.n	8008584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008570:	4b08      	ldr	r3, [pc, #32]	; (8008594 <_sbrk+0x64>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <_sbrk+0x64>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	4a05      	ldr	r2, [pc, #20]	; (8008594 <_sbrk+0x64>)
 8008580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	2000c000 	.word	0x2000c000
 8008590:	00000400 	.word	0x00000400
 8008594:	2000048c 	.word	0x2000048c
 8008598:	200005e0 	.word	0x200005e0

0800859c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr

080085a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085a8:	480c      	ldr	r0, [pc, #48]	; (80085dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80085aa:	490d      	ldr	r1, [pc, #52]	; (80085e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80085ac:	4a0d      	ldr	r2, [pc, #52]	; (80085e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80085ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085b0:	e002      	b.n	80085b8 <LoopCopyDataInit>

080085b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085b6:	3304      	adds	r3, #4

080085b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085bc:	d3f9      	bcc.n	80085b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085be:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80085c0:	4c0a      	ldr	r4, [pc, #40]	; (80085ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80085c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085c4:	e001      	b.n	80085ca <LoopFillZerobss>

080085c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085c8:	3204      	adds	r2, #4

080085ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085cc:	d3fb      	bcc.n	80085c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80085ce:	f7ff ffe5 	bl	800859c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085d2:	f003 ffb3 	bl	800c53c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085d6:	f7ff fb9d 	bl	8007d14 <main>
  bx lr
 80085da:	4770      	bx	lr
  ldr r0, =_sdata
 80085dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085e0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80085e4:	0800dcd0 	.word	0x0800dcd0
  ldr r2, =_sbss
 80085e8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80085ec:	200005dc 	.word	0x200005dc

080085f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085f0:	e7fe      	b.n	80085f0 <ADC1_2_IRQHandler>
	...

080085f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <HAL_Init+0x28>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a07      	ldr	r2, [pc, #28]	; (800861c <HAL_Init+0x28>)
 80085fe:	f043 0310 	orr.w	r3, r3, #16
 8008602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008604:	2003      	movs	r0, #3
 8008606:	f000 fa43 	bl	8008a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800860a:	200f      	movs	r0, #15
 800860c:	f000 f808 	bl	8008620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008610:	f7ff fdfa 	bl	8008208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40022000 	.word	0x40022000

08008620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008628:	4b12      	ldr	r3, [pc, #72]	; (8008674 <HAL_InitTick+0x54>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	4b12      	ldr	r3, [pc, #72]	; (8008678 <HAL_InitTick+0x58>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	4619      	mov	r1, r3
 8008632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008636:	fbb3 f3f1 	udiv	r3, r3, r1
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fa5b 	bl	8008afa <HAL_SYSTICK_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e00e      	b.n	800866c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b0f      	cmp	r3, #15
 8008652:	d80a      	bhi.n	800866a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008654:	2200      	movs	r2, #0
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865c:	f000 fa23 	bl	8008aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008660:	4a06      	ldr	r2, [pc, #24]	; (800867c <HAL_InitTick+0x5c>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200000a0 	.word	0x200000a0
 8008678:	200000a8 	.word	0x200000a8
 800867c:	200000a4 	.word	0x200000a4

08008680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_IncTick+0x1c>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_IncTick+0x20>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4413      	add	r3, r2
 8008690:	4a03      	ldr	r2, [pc, #12]	; (80086a0 <HAL_IncTick+0x20>)
 8008692:	6013      	str	r3, [r2, #0]
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr
 800869c:	200000a8 	.word	0x200000a8
 80086a0:	20000490 	.word	0x20000490

080086a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  return uwTick;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <HAL_GetTick+0x10>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr
 80086b4:	20000490 	.word	0x20000490

080086b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80086c0:	f7ff fff0 	bl	80086a4 <HAL_GetTick>
 80086c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d0:	d005      	beq.n	80086de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <HAL_Delay+0x44>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086de:	bf00      	nop
 80086e0:	f7ff ffe0 	bl	80086a4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d8f7      	bhi.n	80086e0 <HAL_Delay+0x28>
  {
  }
}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200000a8 	.word	0x200000a8

08008700 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e0ed      	b.n	80088ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fda4 	bl	800826c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008734:	f7ff ffb6 	bl	80086a4 <HAL_GetTick>
 8008738:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800873a:	e012      	b.n	8008762 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800873c:	f7ff ffb2 	bl	80086a4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b0a      	cmp	r3, #10
 8008748:	d90b      	bls.n	8008762 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2205      	movs	r2, #5
 800875a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e0c5      	b.n	80088ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0e5      	beq.n	800873c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0202 	bic.w	r2, r2, #2
 800877e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008780:	f7ff ff90 	bl	80086a4 <HAL_GetTick>
 8008784:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008786:	e012      	b.n	80087ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008788:	f7ff ff8c 	bl	80086a4 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b0a      	cmp	r3, #10
 8008794:	d90b      	bls.n	80087ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2205      	movs	r2, #5
 80087a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e09f      	b.n	80088ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e5      	bne.n	8008788 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	7e1b      	ldrb	r3, [r3, #24]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d108      	bne.n	80087d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e007      	b.n	80087e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7e5b      	ldrb	r3, [r3, #25]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d108      	bne.n	8008800 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e007      	b.n	8008810 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800880e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7e9b      	ldrb	r3, [r3, #26]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d108      	bne.n	800882a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0220 	orr.w	r2, r2, #32
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e007      	b.n	800883a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0220 	bic.w	r2, r2, #32
 8008838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7edb      	ldrb	r3, [r3, #27]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d108      	bne.n	8008854 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0210 	bic.w	r2, r2, #16
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e007      	b.n	8008864 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0210 	orr.w	r2, r2, #16
 8008862:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7f1b      	ldrb	r3, [r3, #28]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d108      	bne.n	800887e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0208 	orr.w	r2, r2, #8
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e007      	b.n	800888e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0208 	bic.w	r2, r2, #8
 800888c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7f5b      	ldrb	r3, [r3, #29]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d108      	bne.n	80088a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0204 	orr.w	r2, r2, #4
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e007      	b.n	80088b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0204 	bic.w	r2, r2, #4
 80088b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	ea42 0103 	orr.w	r1, r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	1e5a      	subs	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <__NVIC_SetPriorityGrouping>:
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008908:	4b0c      	ldr	r3, [pc, #48]	; (800893c <__NVIC_SetPriorityGrouping+0x44>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008914:	4013      	ands	r3, r2
 8008916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800892a:	4a04      	ldr	r2, [pc, #16]	; (800893c <__NVIC_SetPriorityGrouping+0x44>)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	60d3      	str	r3, [r2, #12]
}
 8008930:	bf00      	nop
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000ed00 	.word	0xe000ed00

08008940 <__NVIC_GetPriorityGrouping>:
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <__NVIC_GetPriorityGrouping+0x18>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	0a1b      	lsrs	r3, r3, #8
 800894a:	f003 0307 	and.w	r3, r3, #7
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	e000ed00 	.word	0xe000ed00

0800895c <__NVIC_EnableIRQ>:
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896a:	2b00      	cmp	r3, #0
 800896c:	db0b      	blt.n	8008986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f003 021f 	and.w	r2, r3, #31
 8008974:	4906      	ldr	r1, [pc, #24]	; (8008990 <__NVIC_EnableIRQ+0x34>)
 8008976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897a:	095b      	lsrs	r3, r3, #5
 800897c:	2001      	movs	r0, #1
 800897e:	fa00 f202 	lsl.w	r2, r0, r2
 8008982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr
 8008990:	e000e100 	.word	0xe000e100

08008994 <__NVIC_SetPriority>:
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	db0a      	blt.n	80089be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	490c      	ldr	r1, [pc, #48]	; (80089e0 <__NVIC_SetPriority+0x4c>)
 80089ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b2:	0112      	lsls	r2, r2, #4
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	440b      	add	r3, r1
 80089b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089bc:	e00a      	b.n	80089d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	4908      	ldr	r1, [pc, #32]	; (80089e4 <__NVIC_SetPriority+0x50>)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	3b04      	subs	r3, #4
 80089cc:	0112      	lsls	r2, r2, #4
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	440b      	add	r3, r1
 80089d2:	761a      	strb	r2, [r3, #24]
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	e000e100 	.word	0xe000e100
 80089e4:	e000ed00 	.word	0xe000ed00

080089e8 <NVIC_EncodePriority>:
{
 80089e8:	b480      	push	{r7}
 80089ea:	b089      	sub	sp, #36	; 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f1c3 0307 	rsb	r3, r3, #7
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	bf28      	it	cs
 8008a06:	2304      	movcs	r3, #4
 8008a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	2b06      	cmp	r3, #6
 8008a10:	d902      	bls.n	8008a18 <NVIC_EncodePriority+0x30>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	3b03      	subs	r3, #3
 8008a16:	e000      	b.n	8008a1a <NVIC_EncodePriority+0x32>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	43da      	mvns	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	43d9      	mvns	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a40:	4313      	orrs	r3, r2
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3724      	adds	r7, #36	; 0x24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a5c:	d301      	bcc.n	8008a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e00f      	b.n	8008a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <SysTick_Config+0x40>)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a6a:	210f      	movs	r1, #15
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a70:	f7ff ff90 	bl	8008994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <SysTick_Config+0x40>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <SysTick_Config+0x40>)
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	e000e010 	.word	0xe000e010

08008a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff2d 	bl	80088f8 <__NVIC_SetPriorityGrouping>
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	4603      	mov	r3, r0
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ab8:	f7ff ff42 	bl	8008940 <__NVIC_GetPriorityGrouping>
 8008abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f7ff ff90 	bl	80089e8 <NVIC_EncodePriority>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff ff5f 	bl	8008994 <__NVIC_SetPriority>
}
 8008ad6:	bf00      	nop
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ff35 	bl	800895c <__NVIC_EnableIRQ>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff ffa2 	bl	8008a4c <SysTick_Config>
 8008b08:	4603      	mov	r3, r0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d008      	beq.n	8008b3c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e020      	b.n	8008b7e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 020e 	bic.w	r2, r2, #14
 8008b4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b64:	2101      	movs	r1, #1
 8008b66:	fa01 f202 	lsl.w	r2, r1, r2
 8008b6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d005      	beq.n	8008bac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
 8008baa:	e0d6      	b.n	8008d5a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 020e 	bic.w	r2, r2, #14
 8008bba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0201 	bic.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <HAL_DMA_Abort_IT+0x1dc>)
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d958      	bls.n	8008c8a <HAL_DMA_Abort_IT+0x102>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a62      	ldr	r2, [pc, #392]	; (8008d68 <HAL_DMA_Abort_IT+0x1e0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d04f      	beq.n	8008c82 <HAL_DMA_Abort_IT+0xfa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a61      	ldr	r2, [pc, #388]	; (8008d6c <HAL_DMA_Abort_IT+0x1e4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d048      	beq.n	8008c7e <HAL_DMA_Abort_IT+0xf6>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a5f      	ldr	r2, [pc, #380]	; (8008d70 <HAL_DMA_Abort_IT+0x1e8>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d040      	beq.n	8008c78 <HAL_DMA_Abort_IT+0xf0>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a5e      	ldr	r2, [pc, #376]	; (8008d74 <HAL_DMA_Abort_IT+0x1ec>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d038      	beq.n	8008c72 <HAL_DMA_Abort_IT+0xea>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a5c      	ldr	r2, [pc, #368]	; (8008d78 <HAL_DMA_Abort_IT+0x1f0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d030      	beq.n	8008c6c <HAL_DMA_Abort_IT+0xe4>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a5b      	ldr	r2, [pc, #364]	; (8008d7c <HAL_DMA_Abort_IT+0x1f4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d028      	beq.n	8008c66 <HAL_DMA_Abort_IT+0xde>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a52      	ldr	r2, [pc, #328]	; (8008d64 <HAL_DMA_Abort_IT+0x1dc>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d020      	beq.n	8008c60 <HAL_DMA_Abort_IT+0xd8>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a57      	ldr	r2, [pc, #348]	; (8008d80 <HAL_DMA_Abort_IT+0x1f8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d019      	beq.n	8008c5c <HAL_DMA_Abort_IT+0xd4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a55      	ldr	r2, [pc, #340]	; (8008d84 <HAL_DMA_Abort_IT+0x1fc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d012      	beq.n	8008c58 <HAL_DMA_Abort_IT+0xd0>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a54      	ldr	r2, [pc, #336]	; (8008d88 <HAL_DMA_Abort_IT+0x200>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00a      	beq.n	8008c52 <HAL_DMA_Abort_IT+0xca>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a52      	ldr	r2, [pc, #328]	; (8008d8c <HAL_DMA_Abort_IT+0x204>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d102      	bne.n	8008c4c <HAL_DMA_Abort_IT+0xc4>
 8008c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4a:	e01b      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c50:	e018      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c56:	e015      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	e013      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e011      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c64:	e00e      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c6a:	e00b      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c70:	e008      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c76:	e005      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c7c:	e002      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c7e:	2310      	movs	r3, #16
 8008c80:	e000      	b.n	8008c84 <HAL_DMA_Abort_IT+0xfc>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4a42      	ldr	r2, [pc, #264]	; (8008d90 <HAL_DMA_Abort_IT+0x208>)
 8008c86:	6053      	str	r3, [r2, #4]
 8008c88:	e057      	b.n	8008d3a <HAL_DMA_Abort_IT+0x1b2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a36      	ldr	r2, [pc, #216]	; (8008d68 <HAL_DMA_Abort_IT+0x1e0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d04f      	beq.n	8008d34 <HAL_DMA_Abort_IT+0x1ac>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a34      	ldr	r2, [pc, #208]	; (8008d6c <HAL_DMA_Abort_IT+0x1e4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d048      	beq.n	8008d30 <HAL_DMA_Abort_IT+0x1a8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a33      	ldr	r2, [pc, #204]	; (8008d70 <HAL_DMA_Abort_IT+0x1e8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d040      	beq.n	8008d2a <HAL_DMA_Abort_IT+0x1a2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a31      	ldr	r2, [pc, #196]	; (8008d74 <HAL_DMA_Abort_IT+0x1ec>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d038      	beq.n	8008d24 <HAL_DMA_Abort_IT+0x19c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a30      	ldr	r2, [pc, #192]	; (8008d78 <HAL_DMA_Abort_IT+0x1f0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d030      	beq.n	8008d1e <HAL_DMA_Abort_IT+0x196>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a2e      	ldr	r2, [pc, #184]	; (8008d7c <HAL_DMA_Abort_IT+0x1f4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d028      	beq.n	8008d18 <HAL_DMA_Abort_IT+0x190>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a26      	ldr	r2, [pc, #152]	; (8008d64 <HAL_DMA_Abort_IT+0x1dc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d020      	beq.n	8008d12 <HAL_DMA_Abort_IT+0x18a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a2a      	ldr	r2, [pc, #168]	; (8008d80 <HAL_DMA_Abort_IT+0x1f8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d019      	beq.n	8008d0e <HAL_DMA_Abort_IT+0x186>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a29      	ldr	r2, [pc, #164]	; (8008d84 <HAL_DMA_Abort_IT+0x1fc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d012      	beq.n	8008d0a <HAL_DMA_Abort_IT+0x182>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a27      	ldr	r2, [pc, #156]	; (8008d88 <HAL_DMA_Abort_IT+0x200>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00a      	beq.n	8008d04 <HAL_DMA_Abort_IT+0x17c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a26      	ldr	r2, [pc, #152]	; (8008d8c <HAL_DMA_Abort_IT+0x204>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d102      	bne.n	8008cfe <HAL_DMA_Abort_IT+0x176>
 8008cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cfc:	e01b      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d02:	e018      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d08:	e015      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	e013      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e011      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d16:	e00e      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d1c:	e00b      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d22:	e008      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d28:	e005      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d2e:	e002      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d30:	2310      	movs	r3, #16
 8008d32:	e000      	b.n	8008d36 <HAL_DMA_Abort_IT+0x1ae>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <HAL_DMA_Abort_IT+0x20c>)
 8008d38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
    } 
  }
  return status;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40020080 	.word	0x40020080
 8008d68:	40020008 	.word	0x40020008
 8008d6c:	4002001c 	.word	0x4002001c
 8008d70:	40020030 	.word	0x40020030
 8008d74:	40020044 	.word	0x40020044
 8008d78:	40020058 	.word	0x40020058
 8008d7c:	4002006c 	.word	0x4002006c
 8008d80:	40020408 	.word	0x40020408
 8008d84:	4002041c 	.word	0x4002041c
 8008d88:	40020430 	.word	0x40020430
 8008d8c:	40020444 	.word	0x40020444
 8008d90:	40020400 	.word	0x40020400
 8008d94:	40020000 	.word	0x40020000

08008d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b08b      	sub	sp, #44	; 0x2c
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008da2:	2300      	movs	r3, #0
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008da6:	2300      	movs	r3, #0
 8008da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008daa:	e179      	b.n	80090a0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008dac:	2201      	movs	r2, #1
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	f040 8168 	bne.w	800909a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4a96      	ldr	r2, [pc, #600]	; (8009028 <HAL_GPIO_Init+0x290>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d05e      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
 8008dd4:	4a94      	ldr	r2, [pc, #592]	; (8009028 <HAL_GPIO_Init+0x290>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d875      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008dda:	4a94      	ldr	r2, [pc, #592]	; (800902c <HAL_GPIO_Init+0x294>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d058      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
 8008de0:	4a92      	ldr	r2, [pc, #584]	; (800902c <HAL_GPIO_Init+0x294>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d86f      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008de6:	4a92      	ldr	r2, [pc, #584]	; (8009030 <HAL_GPIO_Init+0x298>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d052      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
 8008dec:	4a90      	ldr	r2, [pc, #576]	; (8009030 <HAL_GPIO_Init+0x298>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d869      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008df2:	4a90      	ldr	r2, [pc, #576]	; (8009034 <HAL_GPIO_Init+0x29c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d04c      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
 8008df8:	4a8e      	ldr	r2, [pc, #568]	; (8009034 <HAL_GPIO_Init+0x29c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d863      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008dfe:	4a8e      	ldr	r2, [pc, #568]	; (8009038 <HAL_GPIO_Init+0x2a0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d046      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
 8008e04:	4a8c      	ldr	r2, [pc, #560]	; (8009038 <HAL_GPIO_Init+0x2a0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d85d      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008e0a:	2b12      	cmp	r3, #18
 8008e0c:	d82a      	bhi.n	8008e64 <HAL_GPIO_Init+0xcc>
 8008e0e:	2b12      	cmp	r3, #18
 8008e10:	d859      	bhi.n	8008ec6 <HAL_GPIO_Init+0x12e>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <HAL_GPIO_Init+0x80>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e93 	.word	0x08008e93
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e7f 	.word	0x08008e7f
 8008e24:	08008ec1 	.word	0x08008ec1
 8008e28:	08008ec7 	.word	0x08008ec7
 8008e2c:	08008ec7 	.word	0x08008ec7
 8008e30:	08008ec7 	.word	0x08008ec7
 8008e34:	08008ec7 	.word	0x08008ec7
 8008e38:	08008ec7 	.word	0x08008ec7
 8008e3c:	08008ec7 	.word	0x08008ec7
 8008e40:	08008ec7 	.word	0x08008ec7
 8008e44:	08008ec7 	.word	0x08008ec7
 8008e48:	08008ec7 	.word	0x08008ec7
 8008e4c:	08008ec7 	.word	0x08008ec7
 8008e50:	08008ec7 	.word	0x08008ec7
 8008e54:	08008ec7 	.word	0x08008ec7
 8008e58:	08008ec7 	.word	0x08008ec7
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	4a75      	ldr	r2, [pc, #468]	; (800903c <HAL_GPIO_Init+0x2a4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e6a:	e02c      	b.n	8008ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	623b      	str	r3, [r7, #32]
          break;
 8008e72:	e029      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	623b      	str	r3, [r7, #32]
          break;
 8008e7c:	e024      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	3308      	adds	r3, #8
 8008e84:	623b      	str	r3, [r7, #32]
          break;
 8008e86:	e01f      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	623b      	str	r3, [r7, #32]
          break;
 8008e90:	e01a      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	623b      	str	r3, [r7, #32]
          break;
 8008e9e:	e013      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d105      	bne.n	8008eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	611a      	str	r2, [r3, #16]
          break;
 8008eb2:	e009      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	615a      	str	r2, [r3, #20]
          break;
 8008ebe:	e003      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	623b      	str	r3, [r7, #32]
          break;
 8008ec4:	e000      	b.n	8008ec8 <HAL_GPIO_Init+0x130>
          break;
 8008ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2bff      	cmp	r3, #255	; 0xff
 8008ecc:	d801      	bhi.n	8008ed2 <HAL_GPIO_Init+0x13a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	e001      	b.n	8008ed6 <HAL_GPIO_Init+0x13e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2bff      	cmp	r3, #255	; 0xff
 8008edc:	d802      	bhi.n	8008ee4 <HAL_GPIO_Init+0x14c>
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	e002      	b.n	8008eea <HAL_GPIO_Init+0x152>
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	3b08      	subs	r3, #8
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	210f      	movs	r1, #15
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	401a      	ands	r2, r3
 8008efc:	6a39      	ldr	r1, [r7, #32]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	fa01 f303 	lsl.w	r3, r1, r3
 8008f04:	431a      	orrs	r2, r3
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 80c1 	beq.w	800909a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008f18:	4b49      	ldr	r3, [pc, #292]	; (8009040 <HAL_GPIO_Init+0x2a8>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	4a48      	ldr	r2, [pc, #288]	; (8009040 <HAL_GPIO_Init+0x2a8>)
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	6193      	str	r3, [r2, #24]
 8008f24:	4b46      	ldr	r3, [pc, #280]	; (8009040 <HAL_GPIO_Init+0x2a8>)
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	60bb      	str	r3, [r7, #8]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f30:	4a44      	ldr	r2, [pc, #272]	; (8009044 <HAL_GPIO_Init+0x2ac>)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	089b      	lsrs	r3, r3, #2
 8008f36:	3302      	adds	r3, #2
 8008f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	220f      	movs	r2, #15
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a3c      	ldr	r2, [pc, #240]	; (8009048 <HAL_GPIO_Init+0x2b0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d01f      	beq.n	8008f9c <HAL_GPIO_Init+0x204>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a3b      	ldr	r2, [pc, #236]	; (800904c <HAL_GPIO_Init+0x2b4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d019      	beq.n	8008f98 <HAL_GPIO_Init+0x200>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a3a      	ldr	r2, [pc, #232]	; (8009050 <HAL_GPIO_Init+0x2b8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d013      	beq.n	8008f94 <HAL_GPIO_Init+0x1fc>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a39      	ldr	r2, [pc, #228]	; (8009054 <HAL_GPIO_Init+0x2bc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00d      	beq.n	8008f90 <HAL_GPIO_Init+0x1f8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a38      	ldr	r2, [pc, #224]	; (8009058 <HAL_GPIO_Init+0x2c0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <HAL_GPIO_Init+0x1f4>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a37      	ldr	r2, [pc, #220]	; (800905c <HAL_GPIO_Init+0x2c4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d101      	bne.n	8008f88 <HAL_GPIO_Init+0x1f0>
 8008f84:	2305      	movs	r3, #5
 8008f86:	e00a      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f88:	2306      	movs	r3, #6
 8008f8a:	e008      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	e006      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f90:	2303      	movs	r3, #3
 8008f92:	e004      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e002      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <HAL_GPIO_Init+0x206>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	f002 0203 	and.w	r2, r2, #3
 8008fa4:	0092      	lsls	r2, r2, #2
 8008fa6:	4093      	lsls	r3, r2
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008fae:	4925      	ldr	r1, [pc, #148]	; (8009044 <HAL_GPIO_Init+0x2ac>)
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	089b      	lsrs	r3, r3, #2
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008fc8:	4b25      	ldr	r3, [pc, #148]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	4924      	ldr	r1, [pc, #144]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	608b      	str	r3, [r1, #8]
 8008fd4:	e006      	b.n	8008fe4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008fd6:	4b22      	ldr	r3, [pc, #136]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	4920      	ldr	r1, [pc, #128]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d006      	beq.n	8008ffe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	491a      	ldr	r1, [pc, #104]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60cb      	str	r3, [r1, #12]
 8008ffc:	e006      	b.n	800900c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ffe:	4b18      	ldr	r3, [pc, #96]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	43db      	mvns	r3, r3
 8009006:	4916      	ldr	r1, [pc, #88]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 8009008:	4013      	ands	r3, r2
 800900a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d025      	beq.n	8009064 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4910      	ldr	r1, [pc, #64]	; (8009060 <HAL_GPIO_Init+0x2c8>)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	4313      	orrs	r3, r2
 8009022:	604b      	str	r3, [r1, #4]
 8009024:	e025      	b.n	8009072 <HAL_GPIO_Init+0x2da>
 8009026:	bf00      	nop
 8009028:	10320000 	.word	0x10320000
 800902c:	10310000 	.word	0x10310000
 8009030:	10220000 	.word	0x10220000
 8009034:	10210000 	.word	0x10210000
 8009038:	10120000 	.word	0x10120000
 800903c:	10110000 	.word	0x10110000
 8009040:	40021000 	.word	0x40021000
 8009044:	40010000 	.word	0x40010000
 8009048:	40010800 	.word	0x40010800
 800904c:	40010c00 	.word	0x40010c00
 8009050:	40011000 	.word	0x40011000
 8009054:	40011400 	.word	0x40011400
 8009058:	40011800 	.word	0x40011800
 800905c:	40011c00 	.word	0x40011c00
 8009060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <HAL_GPIO_Init+0x324>)
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	43db      	mvns	r3, r3
 800906c:	4913      	ldr	r1, [pc, #76]	; (80090bc <HAL_GPIO_Init+0x324>)
 800906e:	4013      	ands	r3, r2
 8009070:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d006      	beq.n	800908c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800907e:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <HAL_GPIO_Init+0x324>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	490e      	ldr	r1, [pc, #56]	; (80090bc <HAL_GPIO_Init+0x324>)
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	4313      	orrs	r3, r2
 8009088:	600b      	str	r3, [r1, #0]
 800908a:	e006      	b.n	800909a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_GPIO_Init+0x324>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	43db      	mvns	r3, r3
 8009094:	4909      	ldr	r1, [pc, #36]	; (80090bc <HAL_GPIO_Init+0x324>)
 8009096:	4013      	ands	r3, r2
 8009098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	3301      	adds	r3, #1
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f47f ae7e 	bne.w	8008dac <HAL_GPIO_Init+0x14>
  }
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	372c      	adds	r7, #44	; 0x2c
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	40010400 	.word	0x40010400

080090c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b089      	sub	sp, #36	; 0x24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80090ce:	e0a6      	b.n	800921e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80090d0:	2201      	movs	r2, #1
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	4013      	ands	r3, r2
 80090dc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 8099 	beq.w	8009218 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80090e6:	4a54      	ldr	r2, [pc, #336]	; (8009238 <HAL_GPIO_DeInit+0x178>)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	089b      	lsrs	r3, r3, #2
 80090ec:	3302      	adds	r3, #2
 80090ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090f2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	220f      	movs	r2, #15
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4013      	ands	r3, r2
 8009106:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a4c      	ldr	r2, [pc, #304]	; (800923c <HAL_GPIO_DeInit+0x17c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d01f      	beq.n	8009150 <HAL_GPIO_DeInit+0x90>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a4b      	ldr	r2, [pc, #300]	; (8009240 <HAL_GPIO_DeInit+0x180>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d019      	beq.n	800914c <HAL_GPIO_DeInit+0x8c>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a4a      	ldr	r2, [pc, #296]	; (8009244 <HAL_GPIO_DeInit+0x184>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d013      	beq.n	8009148 <HAL_GPIO_DeInit+0x88>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a49      	ldr	r2, [pc, #292]	; (8009248 <HAL_GPIO_DeInit+0x188>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00d      	beq.n	8009144 <HAL_GPIO_DeInit+0x84>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a48      	ldr	r2, [pc, #288]	; (800924c <HAL_GPIO_DeInit+0x18c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <HAL_GPIO_DeInit+0x80>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a47      	ldr	r2, [pc, #284]	; (8009250 <HAL_GPIO_DeInit+0x190>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d101      	bne.n	800913c <HAL_GPIO_DeInit+0x7c>
 8009138:	2305      	movs	r3, #5
 800913a:	e00a      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 800913c:	2306      	movs	r3, #6
 800913e:	e008      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 8009140:	2304      	movs	r3, #4
 8009142:	e006      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 8009144:	2303      	movs	r3, #3
 8009146:	e004      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 8009148:	2302      	movs	r3, #2
 800914a:	e002      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <HAL_GPIO_DeInit+0x92>
 8009150:	2300      	movs	r3, #0
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	f002 0203 	and.w	r2, r2, #3
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	4093      	lsls	r3, r2
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	429a      	cmp	r2, r3
 8009160:	d132      	bne.n	80091c8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009162:	4b3c      	ldr	r3, [pc, #240]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	43db      	mvns	r3, r3
 800916a:	493a      	ldr	r1, [pc, #232]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 800916c:	4013      	ands	r3, r2
 800916e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009170:	4b38      	ldr	r3, [pc, #224]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	43db      	mvns	r3, r3
 8009178:	4936      	ldr	r1, [pc, #216]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 800917a:	4013      	ands	r3, r2
 800917c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800917e:	4b35      	ldr	r3, [pc, #212]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	43db      	mvns	r3, r3
 8009186:	4933      	ldr	r1, [pc, #204]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 8009188:	4013      	ands	r3, r2
 800918a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800918c:	4b31      	ldr	r3, [pc, #196]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	43db      	mvns	r3, r3
 8009194:	492f      	ldr	r1, [pc, #188]	; (8009254 <HAL_GPIO_DeInit+0x194>)
 8009196:	4013      	ands	r3, r2
 8009198:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	220f      	movs	r2, #15
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80091aa:	4a23      	ldr	r2, [pc, #140]	; (8009238 <HAL_GPIO_DeInit+0x178>)
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	089b      	lsrs	r3, r3, #2
 80091b0:	3302      	adds	r3, #2
 80091b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	43da      	mvns	r2, r3
 80091ba:	481f      	ldr	r0, [pc, #124]	; (8009238 <HAL_GPIO_DeInit+0x178>)
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	089b      	lsrs	r3, r3, #2
 80091c0:	400a      	ands	r2, r1
 80091c2:	3302      	adds	r3, #2
 80091c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2bff      	cmp	r3, #255	; 0xff
 80091cc:	d801      	bhi.n	80091d2 <HAL_GPIO_DeInit+0x112>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	e001      	b.n	80091d6 <HAL_GPIO_DeInit+0x116>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3304      	adds	r3, #4
 80091d6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2bff      	cmp	r3, #255	; 0xff
 80091dc:	d802      	bhi.n	80091e4 <HAL_GPIO_DeInit+0x124>
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	e002      	b.n	80091ea <HAL_GPIO_DeInit+0x12a>
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3b08      	subs	r3, #8
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	210f      	movs	r1, #15
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	fa01 f303 	lsl.w	r3, r1, r3
 80091f8:	43db      	mvns	r3, r3
 80091fa:	401a      	ands	r2, r3
 80091fc:	2104      	movs	r1, #4
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	fa01 f303 	lsl.w	r3, r1, r3
 8009204:	431a      	orrs	r2, r3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	43db      	mvns	r3, r3
 8009212:	401a      	ands	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	f47f af52 	bne.w	80090d0 <HAL_GPIO_DeInit+0x10>
  }
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	3724      	adds	r7, #36	; 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr
 8009238:	40010000 	.word	0x40010000
 800923c:	40010800 	.word	0x40010800
 8009240:	40010c00 	.word	0x40010c00
 8009244:	40011000 	.word	0x40011000
 8009248:	40011400 	.word	0x40011400
 800924c:	40011800 	.word	0x40011800
 8009250:	40011c00 	.word	0x40011c00
 8009254:	40010400 	.word	0x40010400

08009258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	887b      	ldrh	r3, [r7, #2]
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e001      	b.n	800927a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr

08009286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	807b      	strh	r3, [r7, #2]
 8009292:	4613      	mov	r3, r2
 8009294:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009296:	787b      	ldrb	r3, [r7, #1]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80092a2:	e003      	b.n	80092ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80092a4:	887b      	ldrh	r3, [r7, #2]
 80092a6:	041a      	lsls	r2, r3, #16
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	611a      	str	r2, [r3, #16]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092c8:	887a      	ldrh	r2, [r7, #2]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4013      	ands	r3, r2
 80092ce:	041a      	lsls	r2, r3, #16
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	43d9      	mvns	r1, r3
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	400b      	ands	r3, r1
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	611a      	str	r2, [r3, #16]
}
 80092de:	bf00      	nop
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bc80      	pop	{r7}
 80092e6:	4770      	bx	lr

080092e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e12b      	b.n	8009552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7fe fff8 	bl	8008304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2224      	movs	r2, #36	; 0x24
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0201 	bic.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800933a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800934a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800934c:	f001 fdb8 	bl	800aec0 <HAL_RCC_GetPCLK1Freq>
 8009350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	4a81      	ldr	r2, [pc, #516]	; (800955c <HAL_I2C_Init+0x274>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d807      	bhi.n	800936c <HAL_I2C_Init+0x84>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4a80      	ldr	r2, [pc, #512]	; (8009560 <HAL_I2C_Init+0x278>)
 8009360:	4293      	cmp	r3, r2
 8009362:	bf94      	ite	ls
 8009364:	2301      	movls	r3, #1
 8009366:	2300      	movhi	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	e006      	b.n	800937a <HAL_I2C_Init+0x92>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4a7d      	ldr	r2, [pc, #500]	; (8009564 <HAL_I2C_Init+0x27c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	bf94      	ite	ls
 8009374:	2301      	movls	r3, #1
 8009376:	2300      	movhi	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e0e7      	b.n	8009552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a78      	ldr	r2, [pc, #480]	; (8009568 <HAL_I2C_Init+0x280>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	0c9b      	lsrs	r3, r3, #18
 800938c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4a6a      	ldr	r2, [pc, #424]	; (800955c <HAL_I2C_Init+0x274>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d802      	bhi.n	80093bc <HAL_I2C_Init+0xd4>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	3301      	adds	r3, #1
 80093ba:	e009      	b.n	80093d0 <HAL_I2C_Init+0xe8>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	4a69      	ldr	r2, [pc, #420]	; (800956c <HAL_I2C_Init+0x284>)
 80093c8:	fba2 2303 	umull	r2, r3, r2, r3
 80093cc:	099b      	lsrs	r3, r3, #6
 80093ce:	3301      	adds	r3, #1
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6812      	ldr	r2, [r2, #0]
 80093d4:	430b      	orrs	r3, r1
 80093d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	495c      	ldr	r1, [pc, #368]	; (800955c <HAL_I2C_Init+0x274>)
 80093ec:	428b      	cmp	r3, r1
 80093ee:	d819      	bhi.n	8009424 <HAL_I2C_Init+0x13c>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1e59      	subs	r1, r3, #1
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80093fe:	1c59      	adds	r1, r3, #1
 8009400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009404:	400b      	ands	r3, r1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <HAL_I2C_Init+0x138>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1e59      	subs	r1, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	fbb1 f3f3 	udiv	r3, r1, r3
 8009418:	3301      	adds	r3, #1
 800941a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941e:	e051      	b.n	80094c4 <HAL_I2C_Init+0x1dc>
 8009420:	2304      	movs	r3, #4
 8009422:	e04f      	b.n	80094c4 <HAL_I2C_Init+0x1dc>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d111      	bne.n	8009450 <HAL_I2C_Init+0x168>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	1e58      	subs	r0, r3, #1
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	440b      	add	r3, r1
 800943a:	fbb0 f3f3 	udiv	r3, r0, r3
 800943e:	3301      	adds	r3, #1
 8009440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009444:	2b00      	cmp	r3, #0
 8009446:	bf0c      	ite	eq
 8009448:	2301      	moveq	r3, #1
 800944a:	2300      	movne	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	e012      	b.n	8009476 <HAL_I2C_Init+0x18e>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	1e58      	subs	r0, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6859      	ldr	r1, [r3, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	0099      	lsls	r1, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	fbb0 f3f3 	udiv	r3, r0, r3
 8009466:	3301      	adds	r3, #1
 8009468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf0c      	ite	eq
 8009470:	2301      	moveq	r3, #1
 8009472:	2300      	movne	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <HAL_I2C_Init+0x196>
 800947a:	2301      	movs	r3, #1
 800947c:	e022      	b.n	80094c4 <HAL_I2C_Init+0x1dc>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10e      	bne.n	80094a4 <HAL_I2C_Init+0x1bc>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1e58      	subs	r0, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6859      	ldr	r1, [r3, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	440b      	add	r3, r1
 8009494:	fbb0 f3f3 	udiv	r3, r0, r3
 8009498:	3301      	adds	r3, #1
 800949a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800949e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a2:	e00f      	b.n	80094c4 <HAL_I2C_Init+0x1dc>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	1e58      	subs	r0, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6859      	ldr	r1, [r3, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	440b      	add	r3, r1
 80094b2:	0099      	lsls	r1, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ba:	3301      	adds	r3, #1
 80094bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	6809      	ldr	r1, [r1, #0]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69da      	ldr	r2, [r3, #28]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6911      	ldr	r1, [r2, #16]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	68d2      	ldr	r2, [r2, #12]
 80094fe:	4311      	orrs	r1, r2
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	430b      	orrs	r3, r1
 8009506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0201 	orr.w	r2, r2, #1
 8009532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	000186a0 	.word	0x000186a0
 8009560:	001e847f 	.word	0x001e847f
 8009564:	003d08ff 	.word	0x003d08ff
 8009568:	431bde83 	.word	0x431bde83
 800956c:	10624dd3 	.word	0x10624dd3

08009570 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e021      	b.n	80095c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2224      	movs	r2, #36	; 0x24
 8009586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0201 	bic.w	r2, r2, #1
 8009598:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fe fef0 	bl	8008380 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	461a      	mov	r2, r3
 80095dc:	460b      	mov	r3, r1
 80095de:	817b      	strh	r3, [r7, #10]
 80095e0:	4613      	mov	r3, r2
 80095e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095e4:	f7ff f85e 	bl	80086a4 <HAL_GetTick>
 80095e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	f040 80e0 	bne.w	80097b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2319      	movs	r3, #25
 80095fe:	2201      	movs	r2, #1
 8009600:	4970      	ldr	r1, [pc, #448]	; (80097c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fe5c 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800960e:	2302      	movs	r3, #2
 8009610:	e0d3      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_I2C_Master_Transmit+0x50>
 800961c:	2302      	movs	r3, #2
 800961e:	e0cc      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b01      	cmp	r3, #1
 8009634:	d007      	beq.n	8009646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0201 	orr.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2221      	movs	r2, #33	; 0x21
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2210      	movs	r2, #16
 8009662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	893a      	ldrh	r2, [r7, #8]
 8009676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a50      	ldr	r2, [pc, #320]	; (80097c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009688:	8979      	ldrh	r1, [r7, #10]
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fc16 	bl	8009ec0 <I2C_MasterRequestWrite>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e08d      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80096b4:	e066      	b.n	8009784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	6a39      	ldr	r1, [r7, #32]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 ff1a 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d107      	bne.n	80096de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e06b      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	781a      	ldrb	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b04      	cmp	r3, #4
 800971e:	d11b      	bne.n	8009758 <HAL_I2C_Master_Transmit+0x188>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009724:	2b00      	cmp	r3, #0
 8009726:	d017      	beq.n	8009758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009750:	3b01      	subs	r3, #1
 8009752:	b29a      	uxth	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	6a39      	ldr	r1, [r7, #32]
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 ff11 	bl	800a584 <I2C_WaitOnBTFFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00d      	beq.n	8009784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	2b04      	cmp	r3, #4
 800976e:	d107      	bne.n	8009780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e01a      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	2b00      	cmp	r3, #0
 800978a:	d194      	bne.n	80096b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800979a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e000      	b.n	80097ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80097b8:	2302      	movs	r3, #2
  }
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	00100002 	.word	0x00100002
 80097c8:	ffff0000 	.word	0xffff0000

080097cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	817b      	strh	r3, [r7, #10]
 80097de:	460b      	mov	r3, r1
 80097e0:	813b      	strh	r3, [r7, #8]
 80097e2:	4613      	mov	r3, r2
 80097e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097e6:	f7fe ff5d 	bl	80086a4 <HAL_GetTick>
 80097ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	f040 80d9 	bne.w	80099ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2319      	movs	r3, #25
 8009800:	2201      	movs	r2, #1
 8009802:	496d      	ldr	r1, [pc, #436]	; (80099b8 <HAL_I2C_Mem_Write+0x1ec>)
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 fd5b 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009810:	2302      	movs	r3, #2
 8009812:	e0cc      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_I2C_Mem_Write+0x56>
 800981e:	2302      	movs	r3, #2
 8009820:	e0c5      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d007      	beq.n	8009848 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0201 	orr.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2221      	movs	r2, #33	; 0x21
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2240      	movs	r2, #64	; 0x40
 8009864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a3a      	ldr	r2, [r7, #32]
 8009872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987e:	b29a      	uxth	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4a4d      	ldr	r2, [pc, #308]	; (80099bc <HAL_I2C_Mem_Write+0x1f0>)
 8009888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800988a:	88f8      	ldrh	r0, [r7, #6]
 800988c:	893a      	ldrh	r2, [r7, #8]
 800988e:	8979      	ldrh	r1, [r7, #10]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4603      	mov	r3, r0
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fb92 	bl	8009fc4 <I2C_RequestMemoryWrite>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d052      	beq.n	800994c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e081      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fe20 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d107      	bne.n	80098d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e06b      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3b01      	subs	r3, #1
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b04      	cmp	r3, #4
 8009912:	d11b      	bne.n	800994c <HAL_I2C_Mem_Write+0x180>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d017      	beq.n	800994c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	781a      	ldrb	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1aa      	bne.n	80098aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fe13 	bl	800a584 <I2C_WaitOnBTFFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00d      	beq.n	8009980 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	2b04      	cmp	r3, #4
 800996a:	d107      	bne.n	800997c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800997a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e016      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2220      	movs	r2, #32
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	00100002 	.word	0x00100002
 80099bc:	ffff0000 	.word	0xffff0000

080099c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08c      	sub	sp, #48	; 0x30
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	817b      	strh	r3, [r7, #10]
 80099d2:	460b      	mov	r3, r1
 80099d4:	813b      	strh	r3, [r7, #8]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099de:	f7fe fe61 	bl	80086a4 <HAL_GetTick>
 80099e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	f040 8244 	bne.w	8009e7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	2319      	movs	r3, #25
 80099f8:	2201      	movs	r2, #1
 80099fa:	4982      	ldr	r1, [pc, #520]	; (8009c04 <HAL_I2C_Mem_Read+0x244>)
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fc5f 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e237      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d101      	bne.n	8009a1a <HAL_I2C_Mem_Read+0x5a>
 8009a16:	2302      	movs	r3, #2
 8009a18:	e230      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d007      	beq.n	8009a40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2222      	movs	r2, #34	; 0x22
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2240      	movs	r2, #64	; 0x40
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a62      	ldr	r2, [pc, #392]	; (8009c08 <HAL_I2C_Mem_Read+0x248>)
 8009a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a82:	88f8      	ldrh	r0, [r7, #6]
 8009a84:	893a      	ldrh	r2, [r7, #8]
 8009a86:	8979      	ldrh	r1, [r7, #10]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4603      	mov	r3, r0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fb2c 	bl	800a0f0 <I2C_RequestMemoryRead>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e1ec      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d113      	bne.n	8009ad2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	61fb      	str	r3, [r7, #28]
 8009abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	e1c0      	b.n	8009e54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d11e      	bne.n	8009b18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aea:	b672      	cpsid	i
}
 8009aec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	61bb      	str	r3, [r7, #24]
 8009b02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b14:	b662      	cpsie	i
}
 8009b16:	e035      	b.n	8009b84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d11e      	bne.n	8009b5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b30:	b672      	cpsid	i
}
 8009b32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b5a:	b662      	cpsie	i
}
 8009b5c:	e012      	b.n	8009b84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b6e:	2300      	movs	r3, #0
 8009b70:	613b      	str	r3, [r7, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009b84:	e166      	b.n	8009e54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	f200 811f 	bhi.w	8009dce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d123      	bne.n	8009be0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 fd39 	bl	800a614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e167      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bde:	e139      	b.n	8009e54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d152      	bne.n	8009c8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4906      	ldr	r1, [pc, #24]	; (8009c0c <HAL_I2C_Mem_Read+0x24c>)
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fb64 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d008      	beq.n	8009c10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e13c      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
 8009c02:	bf00      	nop
 8009c04:	00100002 	.word	0x00100002
 8009c08:	ffff0000 	.word	0xffff0000
 8009c0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c10:	b672      	cpsid	i
}
 8009c12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c56:	b662      	cpsie	i
}
 8009c58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c8c:	e0e2      	b.n	8009e54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	2200      	movs	r2, #0
 8009c96:	497b      	ldr	r1, [pc, #492]	; (8009e84 <HAL_I2C_Mem_Read+0x4c4>)
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fb11 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0e9      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cb8:	b672      	cpsid	i
}
 8009cba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691a      	ldr	r2, [r3, #16]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009cee:	4b66      	ldr	r3, [pc, #408]	; (8009e88 <HAL_I2C_Mem_Read+0x4c8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	4a65      	ldr	r2, [pc, #404]	; (8009e8c <HAL_I2C_Mem_Read+0x4cc>)
 8009cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfa:	0a1a      	lsrs	r2, r3, #8
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	00da      	lsls	r2, r3, #3
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d118      	bne.n	8009d46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f043 0220 	orr.w	r2, r3, #32
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009d36:	b662      	cpsie	i
}
 8009d38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e09a      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d1d9      	bne.n	8009d08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d96:	b662      	cpsie	i
}
 8009d98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691a      	ldr	r2, [r3, #16]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	b2d2      	uxtb	r2, r2
 8009da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dcc:	e042      	b.n	8009e54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 fc1e 	bl	800a614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e04c      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d118      	bne.n	8009e54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f ae94 	bne.w	8009b86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e000      	b.n	8009e7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009e7a:	2302      	movs	r3, #2
  }
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3728      	adds	r7, #40	; 0x28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	00010004 	.word	0x00010004
 8009e88:	200000a0 	.word	0x200000a0
 8009e8c:	14f8b589 	.word	0x14f8b589

08009e90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e9e:	b2db      	uxtb	r3, r3
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bc80      	pop	{r7}
 8009ea8:	4770      	bx	lr

08009eaa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d006      	beq.n	8009eea <I2C_MasterRequestWrite+0x2a>
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d003      	beq.n	8009eea <I2C_MasterRequestWrite+0x2a>
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ee8:	d108      	bne.n	8009efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	e00b      	b.n	8009f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f00:	2b12      	cmp	r3, #18
 8009f02:	d107      	bne.n	8009f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f9cd 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00d      	beq.n	8009f48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3a:	d103      	bne.n	8009f44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e035      	b.n	8009fb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f50:	d108      	bne.n	8009f64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f52:	897b      	ldrh	r3, [r7, #10]
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	461a      	mov	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f60:	611a      	str	r2, [r3, #16]
 8009f62:	e01b      	b.n	8009f9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f64:	897b      	ldrh	r3, [r7, #10]
 8009f66:	11db      	asrs	r3, r3, #7
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	f003 0306 	and.w	r3, r3, #6
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	f063 030f 	orn	r3, r3, #15
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	490e      	ldr	r1, [pc, #56]	; (8009fbc <I2C_MasterRequestWrite+0xfc>)
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fa16 	bl	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e010      	b.n	8009fb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f92:	897b      	ldrh	r3, [r7, #10]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <I2C_MasterRequestWrite+0x100>)
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fa06 	bl	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	00010008 	.word	0x00010008
 8009fc0:	00010002 	.word	0x00010002

08009fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	817b      	strh	r3, [r7, #10]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	813b      	strh	r3, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f960 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00d      	beq.n	800a022 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a014:	d103      	bne.n	800a01e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a01c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e05f      	b.n	800a0e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a022:	897b      	ldrh	r3, [r7, #10]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	461a      	mov	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	6a3a      	ldr	r2, [r7, #32]
 800a036:	492d      	ldr	r1, [pc, #180]	; (800a0ec <I2C_RequestMemoryWrite+0x128>)
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f9bb 	bl	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e04c      	b.n	800a0e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	6a39      	ldr	r1, [r7, #32]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fa46 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00d      	beq.n	800a08a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	2b04      	cmp	r3, #4
 800a074:	d107      	bne.n	800a086 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e02b      	b.n	800a0e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d105      	bne.n	800a09c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a090:	893b      	ldrh	r3, [r7, #8]
 800a092:	b2da      	uxtb	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	611a      	str	r2, [r3, #16]
 800a09a:	e021      	b.n	800a0e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a09c:	893b      	ldrh	r3, [r7, #8]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ac:	6a39      	ldr	r1, [r7, #32]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 fa20 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d107      	bne.n	800a0d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e005      	b.n	800a0e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0d6:	893b      	ldrh	r3, [r7, #8]
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	00010002 	.word	0x00010002

0800a0f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	817b      	strh	r3, [r7, #10]
 800a102:	460b      	mov	r3, r1
 800a104:	813b      	strh	r3, [r7, #8]
 800a106:	4613      	mov	r3, r2
 800a108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	2200      	movs	r2, #0
 800a132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 f8c2 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00d      	beq.n	800a15e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a150:	d103      	bne.n	800a15a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e0aa      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a16c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	6a3a      	ldr	r2, [r7, #32]
 800a172:	4952      	ldr	r1, [pc, #328]	; (800a2bc <I2C_RequestMemoryRead+0x1cc>)
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f91d 	bl	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e097      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	6a39      	ldr	r1, [r7, #32]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f9a8 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00d      	beq.n	800a1c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d107      	bne.n	800a1c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e076      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d105      	bne.n	800a1d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1cc:	893b      	ldrh	r3, [r7, #8]
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	611a      	str	r2, [r3, #16]
 800a1d6:	e021      	b.n	800a21c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1d8:	893b      	ldrh	r3, [r7, #8]
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e8:	6a39      	ldr	r1, [r7, #32]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f982 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d107      	bne.n	800a20e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a20c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e050      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a212:	893b      	ldrh	r3, [r7, #8]
 800a214:	b2da      	uxtb	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21e:	6a39      	ldr	r1, [r7, #32]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f967 	bl	800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00d      	beq.n	800a248 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	2b04      	cmp	r3, #4
 800a232:	d107      	bne.n	800a244 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a242:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e035      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a256:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2200      	movs	r2, #0
 800a260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f82b 	bl	800a2c0 <I2C_WaitOnFlagUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00d      	beq.n	800a28c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27e:	d103      	bne.n	800a288 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e013      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a28c:	897b      	ldrh	r3, [r7, #10]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f043 0301 	orr.w	r3, r3, #1
 800a294:	b2da      	uxtb	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	4906      	ldr	r1, [pc, #24]	; (800a2bc <I2C_RequestMemoryRead+0x1cc>)
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f886 	bl	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	00010002 	.word	0x00010002

0800a2c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2d0:	e048      	b.n	800a364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d8:	d044      	beq.n	800a364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2da:	f7fe f9e3 	bl	80086a4 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d302      	bcc.n	800a2f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d139      	bne.n	800a364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	0c1b      	lsrs	r3, r3, #16
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d10d      	bne.n	800a316 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	43da      	mvns	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4013      	ands	r3, r2
 800a306:	b29b      	uxth	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bf0c      	ite	eq
 800a30c:	2301      	moveq	r3, #1
 800a30e:	2300      	movne	r3, #0
 800a310:	b2db      	uxtb	r3, r3
 800a312:	461a      	mov	r2, r3
 800a314:	e00c      	b.n	800a330 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	43da      	mvns	r2, r3
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4013      	ands	r3, r2
 800a322:	b29b      	uxth	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	bf0c      	ite	eq
 800a328:	2301      	moveq	r3, #1
 800a32a:	2300      	movne	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	429a      	cmp	r2, r3
 800a334:	d116      	bne.n	800a364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2220      	movs	r2, #32
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	f043 0220 	orr.w	r2, r3, #32
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e023      	b.n	800a3ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d10d      	bne.n	800a38a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	43da      	mvns	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4013      	ands	r3, r2
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bf0c      	ite	eq
 800a380:	2301      	moveq	r3, #1
 800a382:	2300      	movne	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	e00c      	b.n	800a3a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	43da      	mvns	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4013      	ands	r3, r2
 800a396:	b29b      	uxth	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bf0c      	ite	eq
 800a39c:	2301      	moveq	r3, #1
 800a39e:	2300      	movne	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d093      	beq.n	800a2d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3c2:	e071      	b.n	800a4a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d2:	d123      	bne.n	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	f043 0204 	orr.w	r2, r3, #4
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e067      	b.n	800a4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a422:	d041      	beq.n	800a4a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a424:	f7fe f93e 	bl	80086a4 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d302      	bcc.n	800a43a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d136      	bne.n	800a4a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b01      	cmp	r3, #1
 800a442:	d10c      	bne.n	800a45e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	43da      	mvns	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4013      	ands	r3, r2
 800a450:	b29b      	uxth	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	bf14      	ite	ne
 800a456:	2301      	movne	r3, #1
 800a458:	2300      	moveq	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e00b      	b.n	800a476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	43da      	mvns	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4013      	ands	r3, r2
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf14      	ite	ne
 800a470:	2301      	movne	r3, #1
 800a472:	2300      	moveq	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d016      	beq.n	800a4a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f043 0220 	orr.w	r2, r3, #32
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e021      	b.n	800a4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	0c1b      	lsrs	r3, r3, #16
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d10c      	bne.n	800a4cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	43da      	mvns	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	e00b      	b.n	800a4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	43da      	mvns	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f47f af6d 	bne.w	800a3c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a500:	e034      	b.n	800a56c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f8e3 	bl	800a6ce <I2C_IsAcknowledgeFailed>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e034      	b.n	800a57c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a518:	d028      	beq.n	800a56c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a51a:	f7fe f8c3 	bl	80086a4 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	429a      	cmp	r2, r3
 800a528:	d302      	bcc.n	800a530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d11d      	bne.n	800a56c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	d016      	beq.n	800a56c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	f043 0220 	orr.w	r2, r3, #32
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e007      	b.n	800a57c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d1c3      	bne.n	800a502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a590:	e034      	b.n	800a5fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f89b 	bl	800a6ce <I2C_IsAcknowledgeFailed>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e034      	b.n	800a60c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a8:	d028      	beq.n	800a5fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5aa:	f7fe f87b 	bl	80086a4 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11d      	bne.n	800a5fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b04      	cmp	r3, #4
 800a5cc:	d016      	beq.n	800a5fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	f043 0220 	orr.w	r2, r3, #32
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e007      	b.n	800a60c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b04      	cmp	r3, #4
 800a608:	d1c3      	bne.n	800a592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a620:	e049      	b.n	800a6b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b10      	cmp	r3, #16
 800a62e:	d119      	bne.n	800a664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0210 	mvn.w	r2, #16
 800a638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e030      	b.n	800a6c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a664:	f7fe f81e 	bl	80086a4 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	429a      	cmp	r2, r3
 800a672:	d302      	bcc.n	800a67a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d11d      	bne.n	800a6b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a684:	2b40      	cmp	r3, #64	; 0x40
 800a686:	d016      	beq.n	800a6b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2220      	movs	r2, #32
 800a692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	f043 0220 	orr.w	r2, r3, #32
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e007      	b.n	800a6c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c0:	2b40      	cmp	r3, #64	; 0x40
 800a6c2:	d1ae      	bne.n	800a622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6e4:	d11b      	bne.n	800a71e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	f043 0204 	orr.w	r2, r3, #4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
	...

0800a72c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e272      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8087 	beq.w	800a85a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a74c:	4b92      	ldr	r3, [pc, #584]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	f003 030c 	and.w	r3, r3, #12
 800a754:	2b04      	cmp	r3, #4
 800a756:	d00c      	beq.n	800a772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a758:	4b8f      	ldr	r3, [pc, #572]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f003 030c 	and.w	r3, r3, #12
 800a760:	2b08      	cmp	r3, #8
 800a762:	d112      	bne.n	800a78a <HAL_RCC_OscConfig+0x5e>
 800a764:	4b8c      	ldr	r3, [pc, #560]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a770:	d10b      	bne.n	800a78a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a772:	4b89      	ldr	r3, [pc, #548]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d06c      	beq.n	800a858 <HAL_RCC_OscConfig+0x12c>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d168      	bne.n	800a858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e24c      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a792:	d106      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x76>
 800a794:	4b80      	ldr	r3, [pc, #512]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a7f      	ldr	r2, [pc, #508]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a79a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e02e      	b.n	800a800 <HAL_RCC_OscConfig+0xd4>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10c      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x98>
 800a7aa:	4b7b      	ldr	r3, [pc, #492]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a7a      	ldr	r2, [pc, #488]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	4b78      	ldr	r3, [pc, #480]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a77      	ldr	r2, [pc, #476]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e01d      	b.n	800a800 <HAL_RCC_OscConfig+0xd4>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7cc:	d10c      	bne.n	800a7e8 <HAL_RCC_OscConfig+0xbc>
 800a7ce:	4b72      	ldr	r3, [pc, #456]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a71      	ldr	r2, [pc, #452]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	4b6f      	ldr	r3, [pc, #444]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a6e      	ldr	r2, [pc, #440]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	e00b      	b.n	800a800 <HAL_RCC_OscConfig+0xd4>
 800a7e8:	4b6b      	ldr	r3, [pc, #428]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a6a      	ldr	r2, [pc, #424]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4b68      	ldr	r3, [pc, #416]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a67      	ldr	r2, [pc, #412]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a7fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d013      	beq.n	800a830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a808:	f7fd ff4c 	bl	80086a4 <HAL_GetTick>
 800a80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a810:	f7fd ff48 	bl	80086a4 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b64      	cmp	r3, #100	; 0x64
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e200      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a822:	4b5d      	ldr	r3, [pc, #372]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0f0      	beq.n	800a810 <HAL_RCC_OscConfig+0xe4>
 800a82e:	e014      	b.n	800a85a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a830:	f7fd ff38 	bl	80086a4 <HAL_GetTick>
 800a834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a836:	e008      	b.n	800a84a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a838:	f7fd ff34 	bl	80086a4 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	2b64      	cmp	r3, #100	; 0x64
 800a844:	d901      	bls.n	800a84a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e1ec      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a84a:	4b53      	ldr	r3, [pc, #332]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f0      	bne.n	800a838 <HAL_RCC_OscConfig+0x10c>
 800a856:	e000      	b.n	800a85a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d063      	beq.n	800a92e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a866:	4b4c      	ldr	r3, [pc, #304]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f003 030c 	and.w	r3, r3, #12
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a872:	4b49      	ldr	r3, [pc, #292]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f003 030c 	and.w	r3, r3, #12
 800a87a:	2b08      	cmp	r3, #8
 800a87c:	d11c      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x18c>
 800a87e:	4b46      	ldr	r3, [pc, #280]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d116      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a88a:	4b43      	ldr	r3, [pc, #268]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0302 	and.w	r3, r3, #2
 800a892:	2b00      	cmp	r3, #0
 800a894:	d005      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x176>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d001      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e1c0      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8a2:	4b3d      	ldr	r3, [pc, #244]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	4939      	ldr	r1, [pc, #228]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8b6:	e03a      	b.n	800a92e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d020      	beq.n	800a902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8c0:	4b36      	ldr	r3, [pc, #216]	; (800a99c <HAL_RCC_OscConfig+0x270>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8c6:	f7fd feed 	bl	80086a4 <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8ce:	f7fd fee9 	bl	80086a4 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e1a1      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8e0:	4b2d      	ldr	r3, [pc, #180]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0f0      	beq.n	800a8ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ec:	4b2a      	ldr	r3, [pc, #168]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	4927      	ldr	r1, [pc, #156]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	600b      	str	r3, [r1, #0]
 800a900:	e015      	b.n	800a92e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a902:	4b26      	ldr	r3, [pc, #152]	; (800a99c <HAL_RCC_OscConfig+0x270>)
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a908:	f7fd fecc 	bl	80086a4 <HAL_GetTick>
 800a90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a90e:	e008      	b.n	800a922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a910:	f7fd fec8 	bl	80086a4 <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e180      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a922:	4b1d      	ldr	r3, [pc, #116]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f0      	bne.n	800a910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0308 	and.w	r3, r3, #8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d03a      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d019      	beq.n	800a976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a942:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <HAL_RCC_OscConfig+0x274>)
 800a944:	2201      	movs	r2, #1
 800a946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a948:	f7fd feac 	bl	80086a4 <HAL_GetTick>
 800a94c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a94e:	e008      	b.n	800a962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a950:	f7fd fea8 	bl	80086a4 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e160      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a962:	4b0d      	ldr	r3, [pc, #52]	; (800a998 <HAL_RCC_OscConfig+0x26c>)
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0f0      	beq.n	800a950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a96e:	2001      	movs	r0, #1
 800a970:	f000 face 	bl	800af10 <RCC_Delay>
 800a974:	e01c      	b.n	800a9b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a976:	4b0a      	ldr	r3, [pc, #40]	; (800a9a0 <HAL_RCC_OscConfig+0x274>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a97c:	f7fd fe92 	bl	80086a4 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a982:	e00f      	b.n	800a9a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a984:	f7fd fe8e 	bl	80086a4 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d908      	bls.n	800a9a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e146      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
 800a996:	bf00      	nop
 800a998:	40021000 	.word	0x40021000
 800a99c:	42420000 	.word	0x42420000
 800a9a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9a4:	4b92      	ldr	r3, [pc, #584]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e9      	bne.n	800a984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80a6 	beq.w	800ab0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9c2:	4b8b      	ldr	r3, [pc, #556]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10d      	bne.n	800a9ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9ce:	4b88      	ldr	r3, [pc, #544]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	4a87      	ldr	r2, [pc, #540]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800a9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9d8:	61d3      	str	r3, [r2, #28]
 800a9da:	4b85      	ldr	r3, [pc, #532]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e2:	60bb      	str	r3, [r7, #8]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ea:	4b82      	ldr	r3, [pc, #520]	; (800abf4 <HAL_RCC_OscConfig+0x4c8>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d118      	bne.n	800aa28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9f6:	4b7f      	ldr	r3, [pc, #508]	; (800abf4 <HAL_RCC_OscConfig+0x4c8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a7e      	ldr	r2, [pc, #504]	; (800abf4 <HAL_RCC_OscConfig+0x4c8>)
 800a9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa02:	f7fd fe4f 	bl	80086a4 <HAL_GetTick>
 800aa06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa08:	e008      	b.n	800aa1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa0a:	f7fd fe4b 	bl	80086a4 <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b64      	cmp	r3, #100	; 0x64
 800aa16:	d901      	bls.n	800aa1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e103      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa1c:	4b75      	ldr	r3, [pc, #468]	; (800abf4 <HAL_RCC_OscConfig+0x4c8>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0f0      	beq.n	800aa0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d106      	bne.n	800aa3e <HAL_RCC_OscConfig+0x312>
 800aa30:	4b6f      	ldr	r3, [pc, #444]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	4a6e      	ldr	r2, [pc, #440]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	6213      	str	r3, [r2, #32]
 800aa3c:	e02d      	b.n	800aa9a <HAL_RCC_OscConfig+0x36e>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10c      	bne.n	800aa60 <HAL_RCC_OscConfig+0x334>
 800aa46:	4b6a      	ldr	r3, [pc, #424]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	4a69      	ldr	r2, [pc, #420]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	f023 0301 	bic.w	r3, r3, #1
 800aa50:	6213      	str	r3, [r2, #32]
 800aa52:	4b67      	ldr	r3, [pc, #412]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4a66      	ldr	r2, [pc, #408]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	f023 0304 	bic.w	r3, r3, #4
 800aa5c:	6213      	str	r3, [r2, #32]
 800aa5e:	e01c      	b.n	800aa9a <HAL_RCC_OscConfig+0x36e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	2b05      	cmp	r3, #5
 800aa66:	d10c      	bne.n	800aa82 <HAL_RCC_OscConfig+0x356>
 800aa68:	4b61      	ldr	r3, [pc, #388]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	4a60      	ldr	r2, [pc, #384]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa6e:	f043 0304 	orr.w	r3, r3, #4
 800aa72:	6213      	str	r3, [r2, #32]
 800aa74:	4b5e      	ldr	r3, [pc, #376]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	4a5d      	ldr	r2, [pc, #372]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa7a:	f043 0301 	orr.w	r3, r3, #1
 800aa7e:	6213      	str	r3, [r2, #32]
 800aa80:	e00b      	b.n	800aa9a <HAL_RCC_OscConfig+0x36e>
 800aa82:	4b5b      	ldr	r3, [pc, #364]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	4a5a      	ldr	r2, [pc, #360]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa88:	f023 0301 	bic.w	r3, r3, #1
 800aa8c:	6213      	str	r3, [r2, #32]
 800aa8e:	4b58      	ldr	r3, [pc, #352]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	4a57      	ldr	r2, [pc, #348]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d015      	beq.n	800aace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaa2:	f7fd fdff 	bl	80086a4 <HAL_GetTick>
 800aaa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaa8:	e00a      	b.n	800aac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaaa:	f7fd fdfb 	bl	80086a4 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e0b1      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aac0:	4b4b      	ldr	r3, [pc, #300]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0ee      	beq.n	800aaaa <HAL_RCC_OscConfig+0x37e>
 800aacc:	e014      	b.n	800aaf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aace:	f7fd fde9 	bl	80086a4 <HAL_GetTick>
 800aad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aad4:	e00a      	b.n	800aaec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad6:	f7fd fde5 	bl	80086a4 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e09b      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaec:	4b40      	ldr	r3, [pc, #256]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1ee      	bne.n	800aad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d105      	bne.n	800ab0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aafe:	4b3c      	ldr	r3, [pc, #240]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab00:	69db      	ldr	r3, [r3, #28]
 800ab02:	4a3b      	ldr	r2, [pc, #236]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 8087 	beq.w	800ac22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab14:	4b36      	ldr	r3, [pc, #216]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f003 030c 	and.w	r3, r3, #12
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d061      	beq.n	800abe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d146      	bne.n	800abb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab28:	4b33      	ldr	r3, [pc, #204]	; (800abf8 <HAL_RCC_OscConfig+0x4cc>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab2e:	f7fd fdb9 	bl	80086a4 <HAL_GetTick>
 800ab32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab34:	e008      	b.n	800ab48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab36:	f7fd fdb5 	bl	80086a4 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e06d      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab48:	4b29      	ldr	r3, [pc, #164]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f0      	bne.n	800ab36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5c:	d108      	bne.n	800ab70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab5e:	4b24      	ldr	r3, [pc, #144]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	4921      	ldr	r1, [pc, #132]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab70:	4b1f      	ldr	r3, [pc, #124]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a19      	ldr	r1, [r3, #32]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	430b      	orrs	r3, r1
 800ab82:	491b      	ldr	r1, [pc, #108]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800ab84:	4313      	orrs	r3, r2
 800ab86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab88:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <HAL_RCC_OscConfig+0x4cc>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8e:	f7fd fd89 	bl	80086a4 <HAL_GetTick>
 800ab92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab96:	f7fd fd85 	bl	80086a4 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e03d      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aba8:	4b11      	ldr	r3, [pc, #68]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0f0      	beq.n	800ab96 <HAL_RCC_OscConfig+0x46a>
 800abb4:	e035      	b.n	800ac22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abb6:	4b10      	ldr	r3, [pc, #64]	; (800abf8 <HAL_RCC_OscConfig+0x4cc>)
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abbc:	f7fd fd72 	bl	80086a4 <HAL_GetTick>
 800abc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abc2:	e008      	b.n	800abd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abc4:	f7fd fd6e 	bl	80086a4 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d901      	bls.n	800abd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e026      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abd6:	4b06      	ldr	r3, [pc, #24]	; (800abf0 <HAL_RCC_OscConfig+0x4c4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f0      	bne.n	800abc4 <HAL_RCC_OscConfig+0x498>
 800abe2:	e01e      	b.n	800ac22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d107      	bne.n	800abfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e019      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
 800abf0:	40021000 	.word	0x40021000
 800abf4:	40007000 	.word	0x40007000
 800abf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abfc:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <HAL_RCC_OscConfig+0x500>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d106      	bne.n	800ac1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d001      	beq.n	800ac22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	40021000 	.word	0x40021000

0800ac30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0d0      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac44:	4b6a      	ldr	r3, [pc, #424]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d910      	bls.n	800ac74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac52:	4b67      	ldr	r3, [pc, #412]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f023 0207 	bic.w	r2, r3, #7
 800ac5a:	4965      	ldr	r1, [pc, #404]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac62:	4b63      	ldr	r3, [pc, #396]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d001      	beq.n	800ac74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e0b8      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d020      	beq.n	800acc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac8c:	4b59      	ldr	r3, [pc, #356]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	4a58      	ldr	r2, [pc, #352]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aca4:	4b53      	ldr	r3, [pc, #332]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	4a52      	ldr	r2, [pc, #328]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800acaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800acae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acb0:	4b50      	ldr	r3, [pc, #320]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	494d      	ldr	r1, [pc, #308]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d040      	beq.n	800ad50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d107      	bne.n	800ace6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acd6:	4b47      	ldr	r3, [pc, #284]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d115      	bne.n	800ad0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e07f      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b02      	cmp	r3, #2
 800acec:	d107      	bne.n	800acfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acee:	4b41      	ldr	r3, [pc, #260]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e073      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acfe:	4b3d      	ldr	r3, [pc, #244]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e06b      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad0e:	4b39      	ldr	r3, [pc, #228]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f023 0203 	bic.w	r2, r3, #3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	4936      	ldr	r1, [pc, #216]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad20:	f7fd fcc0 	bl	80086a4 <HAL_GetTick>
 800ad24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad26:	e00a      	b.n	800ad3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad28:	f7fd fcbc 	bl	80086a4 <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d901      	bls.n	800ad3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e053      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad3e:	4b2d      	ldr	r3, [pc, #180]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f003 020c 	and.w	r2, r3, #12
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d1eb      	bne.n	800ad28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad50:	4b27      	ldr	r3, [pc, #156]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0307 	and.w	r3, r3, #7
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d210      	bcs.n	800ad80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5e:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f023 0207 	bic.w	r2, r3, #7
 800ad66:	4922      	ldr	r1, [pc, #136]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad6e:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0307 	and.w	r3, r3, #7
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d001      	beq.n	800ad80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e032      	b.n	800ade6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad8c:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	4916      	ldr	r1, [pc, #88]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800adaa:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	490e      	ldr	r1, [pc, #56]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800adbe:	f000 f821 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	091b      	lsrs	r3, r3, #4
 800adca:	f003 030f 	and.w	r3, r3, #15
 800adce:	490a      	ldr	r1, [pc, #40]	; (800adf8 <HAL_RCC_ClockConfig+0x1c8>)
 800add0:	5ccb      	ldrb	r3, [r1, r3]
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	4a09      	ldr	r2, [pc, #36]	; (800adfc <HAL_RCC_ClockConfig+0x1cc>)
 800add8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <HAL_RCC_ClockConfig+0x1d0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fd fc1e 	bl	8008620 <HAL_InitTick>

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	40022000 	.word	0x40022000
 800adf4:	40021000 	.word	0x40021000
 800adf8:	0800dc44 	.word	0x0800dc44
 800adfc:	200000a0 	.word	0x200000a0
 800ae00:	200000a4 	.word	0x200000a4

0800ae04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ae1e:	4b1e      	ldr	r3, [pc, #120]	; (800ae98 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 030c 	and.w	r3, r3, #12
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d002      	beq.n	800ae34 <HAL_RCC_GetSysClockFreq+0x30>
 800ae2e:	2b08      	cmp	r3, #8
 800ae30:	d003      	beq.n	800ae3a <HAL_RCC_GetSysClockFreq+0x36>
 800ae32:	e027      	b.n	800ae84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae34:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae36:	613b      	str	r3, [r7, #16]
      break;
 800ae38:	e027      	b.n	800ae8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	0c9b      	lsrs	r3, r3, #18
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	4a17      	ldr	r2, [pc, #92]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ae44:	5cd3      	ldrb	r3, [r2, r3]
 800ae46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d010      	beq.n	800ae74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae52:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	0c5b      	lsrs	r3, r3, #17
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ae5e:	5cd3      	ldrb	r3, [r2, r3]
 800ae60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a0d      	ldr	r2, [pc, #52]	; (800ae9c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae66:	fb03 f202 	mul.w	r2, r3, r2
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e004      	b.n	800ae7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a0c      	ldr	r2, [pc, #48]	; (800aea8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae78:	fb02 f303 	mul.w	r3, r2, r3
 800ae7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	613b      	str	r3, [r7, #16]
      break;
 800ae82:	e002      	b.n	800ae8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae86:	613b      	str	r3, [r7, #16]
      break;
 800ae88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae8a:	693b      	ldr	r3, [r7, #16]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bc80      	pop	{r7}
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40021000 	.word	0x40021000
 800ae9c:	007a1200 	.word	0x007a1200
 800aea0:	0800dc5c 	.word	0x0800dc5c
 800aea4:	0800dc6c 	.word	0x0800dc6c
 800aea8:	003d0900 	.word	0x003d0900

0800aeac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <HAL_RCC_GetHCLKFreq+0x10>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bc80      	pop	{r7}
 800aeba:	4770      	bx	lr
 800aebc:	200000a0 	.word	0x200000a0

0800aec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aec4:	f7ff fff2 	bl	800aeac <HAL_RCC_GetHCLKFreq>
 800aec8:	4602      	mov	r2, r0
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	0a1b      	lsrs	r3, r3, #8
 800aed0:	f003 0307 	and.w	r3, r3, #7
 800aed4:	4903      	ldr	r1, [pc, #12]	; (800aee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aed6:	5ccb      	ldrb	r3, [r1, r3]
 800aed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	40021000 	.word	0x40021000
 800aee4:	0800dc54 	.word	0x0800dc54

0800aee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aeec:	f7ff ffde 	bl	800aeac <HAL_RCC_GetHCLKFreq>
 800aef0:	4602      	mov	r2, r0
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	0adb      	lsrs	r3, r3, #11
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	4903      	ldr	r1, [pc, #12]	; (800af0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aefe:	5ccb      	ldrb	r3, [r1, r3]
 800af00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af04:	4618      	mov	r0, r3
 800af06:	bd80      	pop	{r7, pc}
 800af08:	40021000 	.word	0x40021000
 800af0c:	0800dc54 	.word	0x0800dc54

0800af10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <RCC_Delay+0x34>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a0a      	ldr	r2, [pc, #40]	; (800af48 <RCC_Delay+0x38>)
 800af1e:	fba2 2303 	umull	r2, r3, r2, r3
 800af22:	0a5b      	lsrs	r3, r3, #9
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	fb02 f303 	mul.w	r3, r2, r3
 800af2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800af2c:	bf00      	nop
  }
  while (Delay --);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1e5a      	subs	r2, r3, #1
 800af32:	60fa      	str	r2, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1f9      	bne.n	800af2c <RCC_Delay+0x1c>
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr
 800af44:	200000a0 	.word	0x200000a0
 800af48:	10624dd3 	.word	0x10624dd3

0800af4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e041      	b.n	800afe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7fd fa26 	bl	80083c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	4619      	mov	r1, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	f000 fa82 	bl	800b494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b01      	cmp	r3, #1
 800affe:	d001      	beq.n	800b004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e044      	b.n	800b08e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0201 	orr.w	r2, r2, #1
 800b01a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1d      	ldr	r2, [pc, #116]	; (800b098 <HAL_TIM_Base_Start_IT+0xac>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d018      	beq.n	800b058 <HAL_TIM_Base_Start_IT+0x6c>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1c      	ldr	r2, [pc, #112]	; (800b09c <HAL_TIM_Base_Start_IT+0xb0>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_TIM_Base_Start_IT+0x6c>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b038:	d00e      	beq.n	800b058 <HAL_TIM_Base_Start_IT+0x6c>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a18      	ldr	r2, [pc, #96]	; (800b0a0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d009      	beq.n	800b058 <HAL_TIM_Base_Start_IT+0x6c>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a16      	ldr	r2, [pc, #88]	; (800b0a4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIM_Base_Start_IT+0x6c>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d111      	bne.n	800b07c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 0307 	and.w	r3, r3, #7
 800b062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b06      	cmp	r3, #6
 800b068:	d010      	beq.n	800b08c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f042 0201 	orr.w	r2, r2, #1
 800b078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07a:	e007      	b.n	800b08c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0201 	orr.w	r2, r2, #1
 800b08a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr
 800b098:	40012c00 	.word	0x40012c00
 800b09c:	40013400 	.word	0x40013400
 800b0a0:	40000400 	.word	0x40000400
 800b0a4:	40000800 	.word	0x40000800
 800b0a8:	40000c00 	.word	0x40000c00

0800b0ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d122      	bne.n	800b108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d11b      	bne.n	800b108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f06f 0202 	mvn.w	r2, #2
 800b0d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f9b4 	bl	800b45c <HAL_TIM_IC_CaptureCallback>
 800b0f4:	e005      	b.n	800b102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9a7 	bl	800b44a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f9b6 	bl	800b46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	2b04      	cmp	r3, #4
 800b114:	d122      	bne.n	800b15c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b04      	cmp	r3, #4
 800b122:	d11b      	bne.n	800b15c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f06f 0204 	mvn.w	r2, #4
 800b12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2202      	movs	r2, #2
 800b132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f98a 	bl	800b45c <HAL_TIM_IC_CaptureCallback>
 800b148:	e005      	b.n	800b156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f97d 	bl	800b44a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f98c 	bl	800b46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f003 0308 	and.w	r3, r3, #8
 800b166:	2b08      	cmp	r3, #8
 800b168:	d122      	bne.n	800b1b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	f003 0308 	and.w	r3, r3, #8
 800b174:	2b08      	cmp	r3, #8
 800b176:	d11b      	bne.n	800b1b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f06f 0208 	mvn.w	r2, #8
 800b180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2204      	movs	r2, #4
 800b186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f960 	bl	800b45c <HAL_TIM_IC_CaptureCallback>
 800b19c:	e005      	b.n	800b1aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f953 	bl	800b44a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f962 	bl	800b46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	f003 0310 	and.w	r3, r3, #16
 800b1ba:	2b10      	cmp	r3, #16
 800b1bc:	d122      	bne.n	800b204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d11b      	bne.n	800b204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f06f 0210 	mvn.w	r2, #16
 800b1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2208      	movs	r2, #8
 800b1da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f936 	bl	800b45c <HAL_TIM_IC_CaptureCallback>
 800b1f0:	e005      	b.n	800b1fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f929 	bl	800b44a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f938 	bl	800b46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d10e      	bne.n	800b230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d107      	bne.n	800b230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f06f 0201 	mvn.w	r2, #1
 800b228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7fc fd62 	bl	8007cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23a:	2b80      	cmp	r3, #128	; 0x80
 800b23c:	d10e      	bne.n	800b25c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b248:	2b80      	cmp	r3, #128	; 0x80
 800b24a:	d107      	bne.n	800b25c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 faa1 	bl	800b79e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b266:	2b40      	cmp	r3, #64	; 0x40
 800b268:	d10e      	bne.n	800b288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b274:	2b40      	cmp	r3, #64	; 0x40
 800b276:	d107      	bne.n	800b288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f8fc 	bl	800b480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b20      	cmp	r3, #32
 800b294:	d10e      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b20      	cmp	r3, #32
 800b2a2:	d107      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f06f 0220 	mvn.w	r2, #32
 800b2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fa6c 	bl	800b78c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_TIM_ConfigClockSource+0x1c>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e0b4      	b.n	800b442 <HAL_TIM_ConfigClockSource+0x186>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b310:	d03e      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0xd4>
 800b312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b316:	f200 8087 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b31e:	f000 8086 	beq.w	800b42e <HAL_TIM_ConfigClockSource+0x172>
 800b322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b326:	d87f      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b328:	2b70      	cmp	r3, #112	; 0x70
 800b32a:	d01a      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0xa6>
 800b32c:	2b70      	cmp	r3, #112	; 0x70
 800b32e:	d87b      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b330:	2b60      	cmp	r3, #96	; 0x60
 800b332:	d050      	beq.n	800b3d6 <HAL_TIM_ConfigClockSource+0x11a>
 800b334:	2b60      	cmp	r3, #96	; 0x60
 800b336:	d877      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b338:	2b50      	cmp	r3, #80	; 0x50
 800b33a:	d03c      	beq.n	800b3b6 <HAL_TIM_ConfigClockSource+0xfa>
 800b33c:	2b50      	cmp	r3, #80	; 0x50
 800b33e:	d873      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b340:	2b40      	cmp	r3, #64	; 0x40
 800b342:	d058      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x13a>
 800b344:	2b40      	cmp	r3, #64	; 0x40
 800b346:	d86f      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b348:	2b30      	cmp	r3, #48	; 0x30
 800b34a:	d064      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x15a>
 800b34c:	2b30      	cmp	r3, #48	; 0x30
 800b34e:	d86b      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b350:	2b20      	cmp	r3, #32
 800b352:	d060      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x15a>
 800b354:	2b20      	cmp	r3, #32
 800b356:	d867      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d05c      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x15a>
 800b35c:	2b10      	cmp	r3, #16
 800b35e:	d05a      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x15a>
 800b360:	e062      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b372:	f000 f980 	bl	800b676 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	609a      	str	r2, [r3, #8]
      break;
 800b38e:	e04f      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3a0:	f000 f969 	bl	800b676 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689a      	ldr	r2, [r3, #8]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3b2:	609a      	str	r2, [r3, #8]
      break;
 800b3b4:	e03c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f000 f8e0 	bl	800b588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2150      	movs	r1, #80	; 0x50
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 f937 	bl	800b642 <TIM_ITRx_SetConfig>
      break;
 800b3d4:	e02c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f000 f8fe 	bl	800b5e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2160      	movs	r1, #96	; 0x60
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f927 	bl	800b642 <TIM_ITRx_SetConfig>
      break;
 800b3f4:	e01c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b402:	461a      	mov	r2, r3
 800b404:	f000 f8c0 	bl	800b588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2140      	movs	r1, #64	; 0x40
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f917 	bl	800b642 <TIM_ITRx_SetConfig>
      break;
 800b414:	e00c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f000 f90e 	bl	800b642 <TIM_ITRx_SetConfig>
      break;
 800b426:	e003      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]
      break;
 800b42c:	e000      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b42e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	bc80      	pop	{r7}
 800b45a:	4770      	bx	lr

0800b45c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr

0800b46e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bc80      	pop	{r7}
 800b47e:	4770      	bx	lr

0800b480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bc80      	pop	{r7}
 800b490:	4770      	bx	lr
	...

0800b494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a33      	ldr	r2, [pc, #204]	; (800b574 <TIM_Base_SetConfig+0xe0>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d013      	beq.n	800b4d4 <TIM_Base_SetConfig+0x40>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a32      	ldr	r2, [pc, #200]	; (800b578 <TIM_Base_SetConfig+0xe4>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d00f      	beq.n	800b4d4 <TIM_Base_SetConfig+0x40>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ba:	d00b      	beq.n	800b4d4 <TIM_Base_SetConfig+0x40>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a2f      	ldr	r2, [pc, #188]	; (800b57c <TIM_Base_SetConfig+0xe8>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d007      	beq.n	800b4d4 <TIM_Base_SetConfig+0x40>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a2e      	ldr	r2, [pc, #184]	; (800b580 <TIM_Base_SetConfig+0xec>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <TIM_Base_SetConfig+0x40>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a2d      	ldr	r2, [pc, #180]	; (800b584 <TIM_Base_SetConfig+0xf0>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d108      	bne.n	800b4e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a22      	ldr	r2, [pc, #136]	; (800b574 <TIM_Base_SetConfig+0xe0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d013      	beq.n	800b516 <TIM_Base_SetConfig+0x82>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a21      	ldr	r2, [pc, #132]	; (800b578 <TIM_Base_SetConfig+0xe4>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00f      	beq.n	800b516 <TIM_Base_SetConfig+0x82>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4fc:	d00b      	beq.n	800b516 <TIM_Base_SetConfig+0x82>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a1e      	ldr	r2, [pc, #120]	; (800b57c <TIM_Base_SetConfig+0xe8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d007      	beq.n	800b516 <TIM_Base_SetConfig+0x82>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a1d      	ldr	r2, [pc, #116]	; (800b580 <TIM_Base_SetConfig+0xec>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d003      	beq.n	800b516 <TIM_Base_SetConfig+0x82>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a1c      	ldr	r2, [pc, #112]	; (800b584 <TIM_Base_SetConfig+0xf0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d108      	bne.n	800b528 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b51c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689a      	ldr	r2, [r3, #8]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a09      	ldr	r2, [pc, #36]	; (800b574 <TIM_Base_SetConfig+0xe0>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d003      	beq.n	800b55c <TIM_Base_SetConfig+0xc8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a08      	ldr	r2, [pc, #32]	; (800b578 <TIM_Base_SetConfig+0xe4>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d103      	bne.n	800b564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	691a      	ldr	r2, [r3, #16]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	615a      	str	r2, [r3, #20]
}
 800b56a:	bf00      	nop
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	bc80      	pop	{r7}
 800b572:	4770      	bx	lr
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40013400 	.word	0x40013400
 800b57c:	40000400 	.word	0x40000400
 800b580:	40000800 	.word	0x40000800
 800b584:	40000c00 	.word	0x40000c00

0800b588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	f023 0201 	bic.w	r2, r3, #1
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	f023 030a 	bic.w	r3, r3, #10
 800b5c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	621a      	str	r2, [r3, #32]
}
 800b5da:	bf00      	nop
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bc80      	pop	{r7}
 800b5e2:	4770      	bx	lr

0800b5e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	f023 0210 	bic.w	r2, r3, #16
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b60e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	031b      	lsls	r3, r3, #12
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b620:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	4313      	orrs	r3, r2
 800b62a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	621a      	str	r2, [r3, #32]
}
 800b638:	bf00      	nop
 800b63a:	371c      	adds	r7, #28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bc80      	pop	{r7}
 800b640:	4770      	bx	lr

0800b642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b642:	b480      	push	{r7}
 800b644:	b085      	sub	sp, #20
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	f043 0307 	orr.w	r3, r3, #7
 800b664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	609a      	str	r2, [r3, #8]
}
 800b66c:	bf00      	nop
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr

0800b676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b676:	b480      	push	{r7}
 800b678:	b087      	sub	sp, #28
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
 800b682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	021a      	lsls	r2, r3, #8
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	431a      	orrs	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	609a      	str	r2, [r3, #8]
}
 800b6aa:	bf00      	nop
 800b6ac:	371c      	adds	r7, #28
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d101      	bne.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e050      	b.n	800b76e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d018      	beq.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a19      	ldr	r2, [pc, #100]	; (800b77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d013      	beq.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b722:	d00e      	beq.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a15      	ldr	r2, [pc, #84]	; (800b780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d009      	beq.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a14      	ldr	r2, [pc, #80]	; (800b784 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d004      	beq.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a12      	ldr	r2, [pc, #72]	; (800b788 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d10c      	bne.n	800b75c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	4313      	orrs	r3, r2
 800b752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr
 800b778:	40012c00 	.word	0x40012c00
 800b77c:	40013400 	.word	0x40013400
 800b780:	40000400 	.word	0x40000400
 800b784:	40000800 	.word	0x40000800
 800b788:	40000c00 	.word	0x40000c00

0800b78c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	bc80      	pop	{r7}
 800b79c:	4770      	bx	lr

0800b79e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bc80      	pop	{r7}
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e042      	b.n	800b848 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d106      	bne.n	800b7dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7fc fe1a 	bl	8008410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2224      	movs	r2, #36	; 0x24
 800b7e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fcb5 	bl	800c164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691a      	ldr	r2, [r3, #16]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	695a      	ldr	r2, [r3, #20]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	4613      	mov	r3, r2
 800b85c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b20      	cmp	r3, #32
 800b868:	d121      	bne.n	800b8ae <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <HAL_UART_Transmit_IT+0x26>
 800b870:	88fb      	ldrh	r3, [r7, #6]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e01a      	b.n	800b8b0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	88fa      	ldrh	r2, [r7, #6]
 800b884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	88fa      	ldrh	r2, [r7, #6]
 800b88a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2221      	movs	r2, #33	; 0x21
 800b896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e000      	b.n	800b8b0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b8ae:	2302      	movs	r3, #2
  }
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bc80      	pop	{r7}
 800b8b8:	4770      	bx	lr
	...

0800b8bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b0ba      	sub	sp, #232	; 0xe8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f2:	f003 030f 	and.w	r3, r3, #15
 800b8f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b8fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10f      	bne.n	800b922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d009      	beq.n	800b922 <HAL_UART_IRQHandler+0x66>
 800b90e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fb63 	bl	800bfe6 <UART_Receive_IT>
      return;
 800b920:	e25b      	b.n	800bdda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 80de 	beq.w	800bae8 <HAL_UART_IRQHandler+0x22c>
 800b92c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b93c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 80d1 	beq.w	800bae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00b      	beq.n	800b96a <HAL_UART_IRQHandler+0xae>
 800b952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	f043 0201 	orr.w	r2, r3, #1
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00b      	beq.n	800b98e <HAL_UART_IRQHandler+0xd2>
 800b976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d005      	beq.n	800b98e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b986:	f043 0202 	orr.w	r2, r3, #2
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00b      	beq.n	800b9b2 <HAL_UART_IRQHandler+0xf6>
 800b99a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9aa:	f043 0204 	orr.w	r2, r3, #4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b6:	f003 0308 	and.w	r3, r3, #8
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d011      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x126>
 800b9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c2:	f003 0320 	and.w	r3, r3, #32
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d105      	bne.n	800b9d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b9ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9da:	f043 0208 	orr.w	r2, r3, #8
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 81f2 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9f0:	f003 0320 	and.w	r3, r3, #32
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <HAL_UART_IRQHandler+0x14e>
 800b9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 faee 	bl	800bfe6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bf14      	ite	ne
 800ba18:	2301      	movne	r3, #1
 800ba1a:	2300      	moveq	r3, #0
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba26:	f003 0308 	and.w	r3, r3, #8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <HAL_UART_IRQHandler+0x17a>
 800ba2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d04f      	beq.n	800bad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f9f8 	bl	800be2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d041      	beq.n	800bace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3314      	adds	r3, #20
 800ba72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1d9      	bne.n	800ba4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d013      	beq.n	800bac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa2:	4a7e      	ldr	r2, [pc, #504]	; (800bc9c <HAL_UART_IRQHandler+0x3e0>)
 800baa4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fd f86c 	bl	8008b88 <HAL_DMA_Abort_IT>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d016      	beq.n	800bae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bac0:	4610      	mov	r0, r2
 800bac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	e00e      	b.n	800bae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f99c 	bl	800be04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bacc:	e00a      	b.n	800bae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f998 	bl	800be04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad4:	e006      	b.n	800bae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f994 	bl	800be04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bae2:	e175      	b.n	800bdd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bae4:	bf00      	nop
    return;
 800bae6:	e173      	b.n	800bdd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	2b01      	cmp	r3, #1
 800baee:	f040 814f 	bne.w	800bd90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800baf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf6:	f003 0310 	and.w	r3, r3, #16
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 8148 	beq.w	800bd90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 8141 	beq.w	800bd90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60bb      	str	r3, [r7, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60bb      	str	r3, [r7, #8]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	60bb      	str	r3, [r7, #8]
 800bb22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 80b6 	beq.w	800bca0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 8145 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb52:	429a      	cmp	r2, r3
 800bb54:	f080 813e 	bcs.w	800bdd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	f000 8088 	beq.w	800bc7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	330c      	adds	r3, #12
 800bb72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	330c      	adds	r3, #12
 800bb94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bbb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1d9      	bne.n	800bb6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3314      	adds	r3, #20
 800bbbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbc2:	e853 3f00 	ldrex	r3, [r3]
 800bbc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bbc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3314      	adds	r3, #20
 800bbd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bbdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bbe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbe8:	e841 2300 	strex	r3, r2, [r1]
 800bbec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bbee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e1      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3314      	adds	r3, #20
 800bbfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3314      	adds	r3, #20
 800bc14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc18:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc20:	e841 2300 	strex	r3, r2, [r1]
 800bc24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1e3      	bne.n	800bbf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	330c      	adds	r3, #12
 800bc40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc4c:	f023 0310 	bic.w	r3, r3, #16
 800bc50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bc5e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e3      	bne.n	800bc3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fc ff4b 	bl	8008b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f8bf 	bl	800be16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc98:	e09c      	b.n	800bdd4 <HAL_UART_IRQHandler+0x518>
 800bc9a:	bf00      	nop
 800bc9c:	0800bef1 	.word	0x0800bef1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 808e 	beq.w	800bdd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bcbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 8089 	beq.w	800bdd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	330c      	adds	r3, #12
 800bccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	330c      	adds	r3, #12
 800bce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bcea:	647a      	str	r2, [r7, #68]	; 0x44
 800bcec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e3      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3314      	adds	r3, #20
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	e853 3f00 	ldrex	r3, [r3]
 800bd0c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	f023 0301 	bic.w	r3, r3, #1
 800bd14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd22:	633a      	str	r2, [r7, #48]	; 0x30
 800bd24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e3      	bne.n	800bcfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	330c      	adds	r3, #12
 800bd4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 0310 	bic.w	r3, r3, #16
 800bd5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	330c      	adds	r3, #12
 800bd64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bd68:	61fa      	str	r2, [r7, #28]
 800bd6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	69b9      	ldr	r1, [r7, #24]
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	617b      	str	r3, [r7, #20]
   return(result);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e3      	bne.n	800bd44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f844 	bl	800be16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd8e:	e023      	b.n	800bdd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d009      	beq.n	800bdb0 <HAL_UART_IRQHandler+0x4f4>
 800bd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bda0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f8b5 	bl	800bf18 <UART_Transmit_IT>
    return;
 800bdae:	e014      	b.n	800bdda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bdb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00e      	beq.n	800bdda <HAL_UART_IRQHandler+0x51e>
 800bdbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d008      	beq.n	800bdda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f8f4 	bl	800bfb6 <UART_EndTransmit_IT>
    return;
 800bdce:	e004      	b.n	800bdda <HAL_UART_IRQHandler+0x51e>
    return;
 800bdd0:	bf00      	nop
 800bdd2:	e002      	b.n	800bdda <HAL_UART_IRQHandler+0x51e>
      return;
 800bdd4:	bf00      	nop
 800bdd6:	e000      	b.n	800bdda <HAL_UART_IRQHandler+0x51e>
      return;
 800bdd8:	bf00      	nop
  }
}
 800bdda:	37e8      	adds	r7, #232	; 0xe8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr

0800bdf2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bdfa:	bf00      	nop
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bc80      	pop	{r7}
 800be02:	4770      	bx	lr

0800be04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	bc80      	pop	{r7}
 800be14:	4770      	bx	lr

0800be16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be22:	bf00      	nop
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	bc80      	pop	{r7}
 800be2a:	4770      	bx	lr

0800be2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b095      	sub	sp, #84	; 0x54
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	330c      	adds	r3, #12
 800be3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be54:	643a      	str	r2, [r7, #64]	; 0x40
 800be56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e5      	bne.n	800be34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3314      	adds	r3, #20
 800be6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	6a3b      	ldr	r3, [r7, #32]
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	61fb      	str	r3, [r7, #28]
   return(result);
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	f023 0301 	bic.w	r3, r3, #1
 800be7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3314      	adds	r3, #20
 800be86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d119      	bne.n	800bed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	e853 3f00 	ldrex	r3, [r3]
 800beb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f023 0310 	bic.w	r3, r3, #16
 800beba:	647b      	str	r3, [r7, #68]	; 0x44
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	330c      	adds	r3, #12
 800bec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bec4:	61ba      	str	r2, [r7, #24]
 800bec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec8:	6979      	ldr	r1, [r7, #20]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	e841 2300 	strex	r3, r2, [r1]
 800bed0:	613b      	str	r3, [r7, #16]
   return(result);
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e5      	bne.n	800bea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2220      	movs	r2, #32
 800bedc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bee6:	bf00      	nop
 800bee8:	3754      	adds	r7, #84	; 0x54
 800beea:	46bd      	mov	sp, r7
 800beec:	bc80      	pop	{r7}
 800beee:	4770      	bx	lr

0800bef0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff ff7a 	bl	800be04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b21      	cmp	r3, #33	; 0x21
 800bf2a:	d13e      	bne.n	800bfaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf34:	d114      	bne.n	800bf60 <UART_Transmit_IT+0x48>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d110      	bne.n	800bf60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	1c9a      	adds	r2, r3, #2
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	621a      	str	r2, [r3, #32]
 800bf5e:	e008      	b.n	800bf72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	1c59      	adds	r1, r3, #1
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	6211      	str	r1, [r2, #32]
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10f      	bne.n	800bfa6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68da      	ldr	r2, [r3, #12]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfa4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e000      	b.n	800bfac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfaa:	2302      	movs	r3, #2
  }
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr

0800bfb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff ff02 	bl	800bde0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b08c      	sub	sp, #48	; 0x30
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b22      	cmp	r3, #34	; 0x22
 800bff8:	f040 80ae 	bne.w	800c158 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c004:	d117      	bne.n	800c036 <UART_Receive_IT+0x50>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d113      	bne.n	800c036 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c016:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c024:	b29a      	uxth	r2, r3
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	1c9a      	adds	r2, r3, #2
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	629a      	str	r2, [r3, #40]	; 0x28
 800c034:	e026      	b.n	800c084 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c048:	d007      	beq.n	800c05a <UART_Receive_IT+0x74>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <UART_Receive_IT+0x82>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e008      	b.n	800c07a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c074:	b2da      	uxtb	r2, r3
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c088:	b29b      	uxth	r3, r3
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	4619      	mov	r1, r3
 800c092:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c094:	2b00      	cmp	r3, #0
 800c096:	d15d      	bne.n	800c154 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f022 0220 	bic.w	r2, r2, #32
 800c0a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	695a      	ldr	r2, [r3, #20]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 0201 	bic.w	r2, r2, #1
 800c0c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2220      	movs	r2, #32
 800c0cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d135      	bne.n	800c14a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	330c      	adds	r3, #12
 800c0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	e853 3f00 	ldrex	r3, [r3]
 800c0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f023 0310 	bic.w	r3, r3, #16
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	330c      	adds	r3, #12
 800c102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c104:	623a      	str	r2, [r7, #32]
 800c106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c108:	69f9      	ldr	r1, [r7, #28]
 800c10a:	6a3a      	ldr	r2, [r7, #32]
 800c10c:	e841 2300 	strex	r3, r2, [r1]
 800c110:	61bb      	str	r3, [r7, #24]
   return(result);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1e5      	bne.n	800c0e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0310 	and.w	r3, r3, #16
 800c122:	2b10      	cmp	r3, #16
 800c124:	d10a      	bne.n	800c13c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff fe67 	bl	800be16 <HAL_UARTEx_RxEventCallback>
 800c148:	e002      	b.n	800c150 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff fe51 	bl	800bdf2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	e002      	b.n	800c15a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	e000      	b.n	800c15a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c158:	2302      	movs	r3, #2
  }
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3730      	adds	r7, #48	; 0x30
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68da      	ldr	r2, [r3, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689a      	ldr	r2, [r3, #8]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	431a      	orrs	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	4313      	orrs	r3, r2
 800c192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c19e:	f023 030c 	bic.w	r3, r3, #12
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	6812      	ldr	r2, [r2, #0]
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699a      	ldr	r2, [r3, #24]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a2c      	ldr	r2, [pc, #176]	; (800c278 <UART_SetConfig+0x114>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d103      	bne.n	800c1d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c1cc:	f7fe fe8c 	bl	800aee8 <HAL_RCC_GetPCLK2Freq>
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	e002      	b.n	800c1da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c1d4:	f7fe fe74 	bl	800aec0 <HAL_RCC_GetPCLK1Freq>
 800c1d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009a      	lsls	r2, r3, #2
 800c1e4:	441a      	add	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f0:	4a22      	ldr	r2, [pc, #136]	; (800c27c <UART_SetConfig+0x118>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	095b      	lsrs	r3, r3, #5
 800c1f8:	0119      	lsls	r1, r3, #4
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009a      	lsls	r2, r3, #2
 800c204:	441a      	add	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c210:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <UART_SetConfig+0x118>)
 800c212:	fba3 0302 	umull	r0, r3, r3, r2
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	2064      	movs	r0, #100	; 0x64
 800c21a:	fb00 f303 	mul.w	r3, r0, r3
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	011b      	lsls	r3, r3, #4
 800c222:	3332      	adds	r3, #50	; 0x32
 800c224:	4a15      	ldr	r2, [pc, #84]	; (800c27c <UART_SetConfig+0x118>)
 800c226:	fba2 2303 	umull	r2, r3, r2, r3
 800c22a:	095b      	lsrs	r3, r3, #5
 800c22c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c230:	4419      	add	r1, r3
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4613      	mov	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4413      	add	r3, r2
 800c23a:	009a      	lsls	r2, r3, #2
 800c23c:	441a      	add	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	fbb2 f2f3 	udiv	r2, r2, r3
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <UART_SetConfig+0x118>)
 800c24a:	fba3 0302 	umull	r0, r3, r3, r2
 800c24e:	095b      	lsrs	r3, r3, #5
 800c250:	2064      	movs	r0, #100	; 0x64
 800c252:	fb00 f303 	mul.w	r3, r0, r3
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	011b      	lsls	r3, r3, #4
 800c25a:	3332      	adds	r3, #50	; 0x32
 800c25c:	4a07      	ldr	r2, [pc, #28]	; (800c27c <UART_SetConfig+0x118>)
 800c25e:	fba2 2303 	umull	r2, r3, r2, r3
 800c262:	095b      	lsrs	r3, r3, #5
 800c264:	f003 020f 	and.w	r2, r3, #15
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	440a      	add	r2, r1
 800c26e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c270:	bf00      	nop
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40013800 	.word	0x40013800
 800c27c:	51eb851f 	.word	0x51eb851f

0800c280 <__itoa>:
 800c280:	1e93      	subs	r3, r2, #2
 800c282:	2b22      	cmp	r3, #34	; 0x22
 800c284:	b510      	push	{r4, lr}
 800c286:	460c      	mov	r4, r1
 800c288:	d904      	bls.n	800c294 <__itoa+0x14>
 800c28a:	2300      	movs	r3, #0
 800c28c:	461c      	mov	r4, r3
 800c28e:	700b      	strb	r3, [r1, #0]
 800c290:	4620      	mov	r0, r4
 800c292:	bd10      	pop	{r4, pc}
 800c294:	2a0a      	cmp	r2, #10
 800c296:	d109      	bne.n	800c2ac <__itoa+0x2c>
 800c298:	2800      	cmp	r0, #0
 800c29a:	da07      	bge.n	800c2ac <__itoa+0x2c>
 800c29c:	232d      	movs	r3, #45	; 0x2d
 800c29e:	700b      	strb	r3, [r1, #0]
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	4240      	negs	r0, r0
 800c2a4:	4421      	add	r1, r4
 800c2a6:	f000 f8d9 	bl	800c45c <__utoa>
 800c2aa:	e7f1      	b.n	800c290 <__itoa+0x10>
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	e7f9      	b.n	800c2a4 <__itoa+0x24>

0800c2b0 <itoa>:
 800c2b0:	f7ff bfe6 	b.w	800c280 <__itoa>

0800c2b4 <malloc>:
 800c2b4:	4b02      	ldr	r3, [pc, #8]	; (800c2c0 <malloc+0xc>)
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	f000 b823 	b.w	800c304 <_malloc_r>
 800c2be:	bf00      	nop
 800c2c0:	200000f8 	.word	0x200000f8

0800c2c4 <sbrk_aligned>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	4e0e      	ldr	r6, [pc, #56]	; (800c300 <sbrk_aligned+0x3c>)
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	6831      	ldr	r1, [r6, #0]
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	b911      	cbnz	r1, 800c2d6 <sbrk_aligned+0x12>
 800c2d0:	f000 f91e 	bl	800c510 <_sbrk_r>
 800c2d4:	6030      	str	r0, [r6, #0]
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f000 f919 	bl	800c510 <_sbrk_r>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d00a      	beq.n	800c2f8 <sbrk_aligned+0x34>
 800c2e2:	1cc4      	adds	r4, r0, #3
 800c2e4:	f024 0403 	bic.w	r4, r4, #3
 800c2e8:	42a0      	cmp	r0, r4
 800c2ea:	d007      	beq.n	800c2fc <sbrk_aligned+0x38>
 800c2ec:	1a21      	subs	r1, r4, r0
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f000 f90e 	bl	800c510 <_sbrk_r>
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	d101      	bne.n	800c2fc <sbrk_aligned+0x38>
 800c2f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	20000498 	.word	0x20000498

0800c304 <_malloc_r>:
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	1ccd      	adds	r5, r1, #3
 800c30a:	f025 0503 	bic.w	r5, r5, #3
 800c30e:	3508      	adds	r5, #8
 800c310:	2d0c      	cmp	r5, #12
 800c312:	bf38      	it	cc
 800c314:	250c      	movcc	r5, #12
 800c316:	2d00      	cmp	r5, #0
 800c318:	4607      	mov	r7, r0
 800c31a:	db01      	blt.n	800c320 <_malloc_r+0x1c>
 800c31c:	42a9      	cmp	r1, r5
 800c31e:	d905      	bls.n	800c32c <_malloc_r+0x28>
 800c320:	230c      	movs	r3, #12
 800c322:	2600      	movs	r6, #0
 800c324:	603b      	str	r3, [r7, #0]
 800c326:	4630      	mov	r0, r6
 800c328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c400 <_malloc_r+0xfc>
 800c330:	f000 f868 	bl	800c404 <__malloc_lock>
 800c334:	f8d8 3000 	ldr.w	r3, [r8]
 800c338:	461c      	mov	r4, r3
 800c33a:	bb5c      	cbnz	r4, 800c394 <_malloc_r+0x90>
 800c33c:	4629      	mov	r1, r5
 800c33e:	4638      	mov	r0, r7
 800c340:	f7ff ffc0 	bl	800c2c4 <sbrk_aligned>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	4604      	mov	r4, r0
 800c348:	d155      	bne.n	800c3f6 <_malloc_r+0xf2>
 800c34a:	f8d8 4000 	ldr.w	r4, [r8]
 800c34e:	4626      	mov	r6, r4
 800c350:	2e00      	cmp	r6, #0
 800c352:	d145      	bne.n	800c3e0 <_malloc_r+0xdc>
 800c354:	2c00      	cmp	r4, #0
 800c356:	d048      	beq.n	800c3ea <_malloc_r+0xe6>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	4631      	mov	r1, r6
 800c35c:	4638      	mov	r0, r7
 800c35e:	eb04 0903 	add.w	r9, r4, r3
 800c362:	f000 f8d5 	bl	800c510 <_sbrk_r>
 800c366:	4581      	cmp	r9, r0
 800c368:	d13f      	bne.n	800c3ea <_malloc_r+0xe6>
 800c36a:	6821      	ldr	r1, [r4, #0]
 800c36c:	4638      	mov	r0, r7
 800c36e:	1a6d      	subs	r5, r5, r1
 800c370:	4629      	mov	r1, r5
 800c372:	f7ff ffa7 	bl	800c2c4 <sbrk_aligned>
 800c376:	3001      	adds	r0, #1
 800c378:	d037      	beq.n	800c3ea <_malloc_r+0xe6>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	442b      	add	r3, r5
 800c37e:	6023      	str	r3, [r4, #0]
 800c380:	f8d8 3000 	ldr.w	r3, [r8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d038      	beq.n	800c3fa <_malloc_r+0xf6>
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	42a2      	cmp	r2, r4
 800c38c:	d12b      	bne.n	800c3e6 <_malloc_r+0xe2>
 800c38e:	2200      	movs	r2, #0
 800c390:	605a      	str	r2, [r3, #4]
 800c392:	e00f      	b.n	800c3b4 <_malloc_r+0xb0>
 800c394:	6822      	ldr	r2, [r4, #0]
 800c396:	1b52      	subs	r2, r2, r5
 800c398:	d41f      	bmi.n	800c3da <_malloc_r+0xd6>
 800c39a:	2a0b      	cmp	r2, #11
 800c39c:	d917      	bls.n	800c3ce <_malloc_r+0xca>
 800c39e:	1961      	adds	r1, r4, r5
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	6025      	str	r5, [r4, #0]
 800c3a4:	bf18      	it	ne
 800c3a6:	6059      	strne	r1, [r3, #4]
 800c3a8:	6863      	ldr	r3, [r4, #4]
 800c3aa:	bf08      	it	eq
 800c3ac:	f8c8 1000 	streq.w	r1, [r8]
 800c3b0:	5162      	str	r2, [r4, r5]
 800c3b2:	604b      	str	r3, [r1, #4]
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	f104 060b 	add.w	r6, r4, #11
 800c3ba:	f000 f829 	bl	800c410 <__malloc_unlock>
 800c3be:	f026 0607 	bic.w	r6, r6, #7
 800c3c2:	1d23      	adds	r3, r4, #4
 800c3c4:	1af2      	subs	r2, r6, r3
 800c3c6:	d0ae      	beq.n	800c326 <_malloc_r+0x22>
 800c3c8:	1b9b      	subs	r3, r3, r6
 800c3ca:	50a3      	str	r3, [r4, r2]
 800c3cc:	e7ab      	b.n	800c326 <_malloc_r+0x22>
 800c3ce:	42a3      	cmp	r3, r4
 800c3d0:	6862      	ldr	r2, [r4, #4]
 800c3d2:	d1dd      	bne.n	800c390 <_malloc_r+0x8c>
 800c3d4:	f8c8 2000 	str.w	r2, [r8]
 800c3d8:	e7ec      	b.n	800c3b4 <_malloc_r+0xb0>
 800c3da:	4623      	mov	r3, r4
 800c3dc:	6864      	ldr	r4, [r4, #4]
 800c3de:	e7ac      	b.n	800c33a <_malloc_r+0x36>
 800c3e0:	4634      	mov	r4, r6
 800c3e2:	6876      	ldr	r6, [r6, #4]
 800c3e4:	e7b4      	b.n	800c350 <_malloc_r+0x4c>
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	e7cc      	b.n	800c384 <_malloc_r+0x80>
 800c3ea:	230c      	movs	r3, #12
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	603b      	str	r3, [r7, #0]
 800c3f0:	f000 f80e 	bl	800c410 <__malloc_unlock>
 800c3f4:	e797      	b.n	800c326 <_malloc_r+0x22>
 800c3f6:	6025      	str	r5, [r4, #0]
 800c3f8:	e7dc      	b.n	800c3b4 <_malloc_r+0xb0>
 800c3fa:	605b      	str	r3, [r3, #4]
 800c3fc:	deff      	udf	#255	; 0xff
 800c3fe:	bf00      	nop
 800c400:	20000494 	.word	0x20000494

0800c404 <__malloc_lock>:
 800c404:	4801      	ldr	r0, [pc, #4]	; (800c40c <__malloc_lock+0x8>)
 800c406:	f000 b8bd 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c40a:	bf00      	nop
 800c40c:	200005d4 	.word	0x200005d4

0800c410 <__malloc_unlock>:
 800c410:	4801      	ldr	r0, [pc, #4]	; (800c418 <__malloc_unlock+0x8>)
 800c412:	f000 b8b8 	b.w	800c586 <__retarget_lock_release_recursive>
 800c416:	bf00      	nop
 800c418:	200005d4 	.word	0x200005d4

0800c41c <siprintf>:
 800c41c:	b40e      	push	{r1, r2, r3}
 800c41e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c422:	b500      	push	{lr}
 800c424:	b09c      	sub	sp, #112	; 0x70
 800c426:	ab1d      	add	r3, sp, #116	; 0x74
 800c428:	9002      	str	r0, [sp, #8]
 800c42a:	9006      	str	r0, [sp, #24]
 800c42c:	9107      	str	r1, [sp, #28]
 800c42e:	9104      	str	r1, [sp, #16]
 800c430:	4808      	ldr	r0, [pc, #32]	; (800c454 <siprintf+0x38>)
 800c432:	4909      	ldr	r1, [pc, #36]	; (800c458 <siprintf+0x3c>)
 800c434:	f853 2b04 	ldr.w	r2, [r3], #4
 800c438:	9105      	str	r1, [sp, #20]
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	a902      	add	r1, sp, #8
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	f000 f94c 	bl	800c6dc <_svfiprintf_r>
 800c444:	2200      	movs	r2, #0
 800c446:	9b02      	ldr	r3, [sp, #8]
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	b01c      	add	sp, #112	; 0x70
 800c44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c450:	b003      	add	sp, #12
 800c452:	4770      	bx	lr
 800c454:	200000f8 	.word	0x200000f8
 800c458:	ffff0208 	.word	0xffff0208

0800c45c <__utoa>:
 800c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45e:	b08b      	sub	sp, #44	; 0x2c
 800c460:	4605      	mov	r5, r0
 800c462:	460b      	mov	r3, r1
 800c464:	466e      	mov	r6, sp
 800c466:	4c1d      	ldr	r4, [pc, #116]	; (800c4dc <__utoa+0x80>)
 800c468:	f104 0c20 	add.w	ip, r4, #32
 800c46c:	4637      	mov	r7, r6
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	6861      	ldr	r1, [r4, #4]
 800c472:	3408      	adds	r4, #8
 800c474:	c703      	stmia	r7!, {r0, r1}
 800c476:	4564      	cmp	r4, ip
 800c478:	463e      	mov	r6, r7
 800c47a:	d1f7      	bne.n	800c46c <__utoa+0x10>
 800c47c:	7921      	ldrb	r1, [r4, #4]
 800c47e:	6820      	ldr	r0, [r4, #0]
 800c480:	7139      	strb	r1, [r7, #4]
 800c482:	1e91      	subs	r1, r2, #2
 800c484:	2922      	cmp	r1, #34	; 0x22
 800c486:	6038      	str	r0, [r7, #0]
 800c488:	f04f 0100 	mov.w	r1, #0
 800c48c:	d904      	bls.n	800c498 <__utoa+0x3c>
 800c48e:	7019      	strb	r1, [r3, #0]
 800c490:	460b      	mov	r3, r1
 800c492:	4618      	mov	r0, r3
 800c494:	b00b      	add	sp, #44	; 0x2c
 800c496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c498:	1e58      	subs	r0, r3, #1
 800c49a:	4684      	mov	ip, r0
 800c49c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c4a0:	fb02 5617 	mls	r6, r2, r7, r5
 800c4a4:	3628      	adds	r6, #40	; 0x28
 800c4a6:	446e      	add	r6, sp
 800c4a8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c4b2:	462e      	mov	r6, r5
 800c4b4:	42b2      	cmp	r2, r6
 800c4b6:	463d      	mov	r5, r7
 800c4b8:	f101 0101 	add.w	r1, r1, #1
 800c4bc:	d9ee      	bls.n	800c49c <__utoa+0x40>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	545a      	strb	r2, [r3, r1]
 800c4c2:	1919      	adds	r1, r3, r4
 800c4c4:	1aa5      	subs	r5, r4, r2
 800c4c6:	42aa      	cmp	r2, r5
 800c4c8:	dae3      	bge.n	800c492 <__utoa+0x36>
 800c4ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c4ce:	780e      	ldrb	r6, [r1, #0]
 800c4d0:	3201      	adds	r2, #1
 800c4d2:	7006      	strb	r6, [r0, #0]
 800c4d4:	f801 5901 	strb.w	r5, [r1], #-1
 800c4d8:	e7f4      	b.n	800c4c4 <__utoa+0x68>
 800c4da:	bf00      	nop
 800c4dc:	0800dc6e 	.word	0x0800dc6e

0800c4e0 <strcat>:
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	b510      	push	{r4, lr}
 800c4e4:	7814      	ldrb	r4, [r2, #0]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	3201      	adds	r2, #1
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	d1fa      	bne.n	800c4e4 <strcat+0x4>
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d1f9      	bne.n	800c4f0 <strcat+0x10>
 800c4fc:	bd10      	pop	{r4, pc}

0800c4fe <memset>:
 800c4fe:	4603      	mov	r3, r0
 800c500:	4402      	add	r2, r0
 800c502:	4293      	cmp	r3, r2
 800c504:	d100      	bne.n	800c508 <memset+0xa>
 800c506:	4770      	bx	lr
 800c508:	f803 1b01 	strb.w	r1, [r3], #1
 800c50c:	e7f9      	b.n	800c502 <memset+0x4>
	...

0800c510 <_sbrk_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	2300      	movs	r3, #0
 800c514:	4d05      	ldr	r5, [pc, #20]	; (800c52c <_sbrk_r+0x1c>)
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7fc f808 	bl	8008530 <_sbrk>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_sbrk_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_sbrk_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	200005d8 	.word	0x200005d8

0800c530 <__errno>:
 800c530:	4b01      	ldr	r3, [pc, #4]	; (800c538 <__errno+0x8>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	200000f8 	.word	0x200000f8

0800c53c <__libc_init_array>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	2600      	movs	r6, #0
 800c540:	4d0c      	ldr	r5, [pc, #48]	; (800c574 <__libc_init_array+0x38>)
 800c542:	4c0d      	ldr	r4, [pc, #52]	; (800c578 <__libc_init_array+0x3c>)
 800c544:	1b64      	subs	r4, r4, r5
 800c546:	10a4      	asrs	r4, r4, #2
 800c548:	42a6      	cmp	r6, r4
 800c54a:	d109      	bne.n	800c560 <__libc_init_array+0x24>
 800c54c:	f000 fbc6 	bl	800ccdc <_init>
 800c550:	2600      	movs	r6, #0
 800c552:	4d0a      	ldr	r5, [pc, #40]	; (800c57c <__libc_init_array+0x40>)
 800c554:	4c0a      	ldr	r4, [pc, #40]	; (800c580 <__libc_init_array+0x44>)
 800c556:	1b64      	subs	r4, r4, r5
 800c558:	10a4      	asrs	r4, r4, #2
 800c55a:	42a6      	cmp	r6, r4
 800c55c:	d105      	bne.n	800c56a <__libc_init_array+0x2e>
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	f855 3b04 	ldr.w	r3, [r5], #4
 800c564:	4798      	blx	r3
 800c566:	3601      	adds	r6, #1
 800c568:	e7ee      	b.n	800c548 <__libc_init_array+0xc>
 800c56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56e:	4798      	blx	r3
 800c570:	3601      	adds	r6, #1
 800c572:	e7f2      	b.n	800c55a <__libc_init_array+0x1e>
 800c574:	0800dcc8 	.word	0x0800dcc8
 800c578:	0800dcc8 	.word	0x0800dcc8
 800c57c:	0800dcc8 	.word	0x0800dcc8
 800c580:	0800dccc 	.word	0x0800dccc

0800c584 <__retarget_lock_acquire_recursive>:
 800c584:	4770      	bx	lr

0800c586 <__retarget_lock_release_recursive>:
 800c586:	4770      	bx	lr

0800c588 <strcpy>:
 800c588:	4603      	mov	r3, r0
 800c58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c58e:	f803 2b01 	strb.w	r2, [r3], #1
 800c592:	2a00      	cmp	r2, #0
 800c594:	d1f9      	bne.n	800c58a <strcpy+0x2>
 800c596:	4770      	bx	lr

0800c598 <_free_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4605      	mov	r5, r0
 800c59c:	2900      	cmp	r1, #0
 800c59e:	d040      	beq.n	800c622 <_free_r+0x8a>
 800c5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a4:	1f0c      	subs	r4, r1, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bfb8      	it	lt
 800c5aa:	18e4      	addlt	r4, r4, r3
 800c5ac:	f7ff ff2a 	bl	800c404 <__malloc_lock>
 800c5b0:	4a1c      	ldr	r2, [pc, #112]	; (800c624 <_free_r+0x8c>)
 800c5b2:	6813      	ldr	r3, [r2, #0]
 800c5b4:	b933      	cbnz	r3, 800c5c4 <_free_r+0x2c>
 800c5b6:	6063      	str	r3, [r4, #4]
 800c5b8:	6014      	str	r4, [r2, #0]
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c0:	f7ff bf26 	b.w	800c410 <__malloc_unlock>
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	d908      	bls.n	800c5da <_free_r+0x42>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	1821      	adds	r1, r4, r0
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf01      	itttt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	1809      	addeq	r1, r1, r0
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	e7ed      	b.n	800c5b6 <_free_r+0x1e>
 800c5da:	461a      	mov	r2, r3
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	b10b      	cbz	r3, 800c5e4 <_free_r+0x4c>
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	d9fa      	bls.n	800c5da <_free_r+0x42>
 800c5e4:	6811      	ldr	r1, [r2, #0]
 800c5e6:	1850      	adds	r0, r2, r1
 800c5e8:	42a0      	cmp	r0, r4
 800c5ea:	d10b      	bne.n	800c604 <_free_r+0x6c>
 800c5ec:	6820      	ldr	r0, [r4, #0]
 800c5ee:	4401      	add	r1, r0
 800c5f0:	1850      	adds	r0, r2, r1
 800c5f2:	4283      	cmp	r3, r0
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	d1e0      	bne.n	800c5ba <_free_r+0x22>
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	4408      	add	r0, r1
 800c5fe:	6010      	str	r0, [r2, #0]
 800c600:	6053      	str	r3, [r2, #4]
 800c602:	e7da      	b.n	800c5ba <_free_r+0x22>
 800c604:	d902      	bls.n	800c60c <_free_r+0x74>
 800c606:	230c      	movs	r3, #12
 800c608:	602b      	str	r3, [r5, #0]
 800c60a:	e7d6      	b.n	800c5ba <_free_r+0x22>
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	1821      	adds	r1, r4, r0
 800c610:	428b      	cmp	r3, r1
 800c612:	bf01      	itttt	eq
 800c614:	6819      	ldreq	r1, [r3, #0]
 800c616:	685b      	ldreq	r3, [r3, #4]
 800c618:	1809      	addeq	r1, r1, r0
 800c61a:	6021      	streq	r1, [r4, #0]
 800c61c:	6063      	str	r3, [r4, #4]
 800c61e:	6054      	str	r4, [r2, #4]
 800c620:	e7cb      	b.n	800c5ba <_free_r+0x22>
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	20000494 	.word	0x20000494

0800c628 <__ssputs_r>:
 800c628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c62c:	461f      	mov	r7, r3
 800c62e:	688e      	ldr	r6, [r1, #8]
 800c630:	4682      	mov	sl, r0
 800c632:	42be      	cmp	r6, r7
 800c634:	460c      	mov	r4, r1
 800c636:	4690      	mov	r8, r2
 800c638:	680b      	ldr	r3, [r1, #0]
 800c63a:	d82c      	bhi.n	800c696 <__ssputs_r+0x6e>
 800c63c:	898a      	ldrh	r2, [r1, #12]
 800c63e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c642:	d026      	beq.n	800c692 <__ssputs_r+0x6a>
 800c644:	6965      	ldr	r5, [r4, #20]
 800c646:	6909      	ldr	r1, [r1, #16]
 800c648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c64c:	eba3 0901 	sub.w	r9, r3, r1
 800c650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c654:	1c7b      	adds	r3, r7, #1
 800c656:	444b      	add	r3, r9
 800c658:	106d      	asrs	r5, r5, #1
 800c65a:	429d      	cmp	r5, r3
 800c65c:	bf38      	it	cc
 800c65e:	461d      	movcc	r5, r3
 800c660:	0553      	lsls	r3, r2, #21
 800c662:	d527      	bpl.n	800c6b4 <__ssputs_r+0x8c>
 800c664:	4629      	mov	r1, r5
 800c666:	f7ff fe4d 	bl	800c304 <_malloc_r>
 800c66a:	4606      	mov	r6, r0
 800c66c:	b360      	cbz	r0, 800c6c8 <__ssputs_r+0xa0>
 800c66e:	464a      	mov	r2, r9
 800c670:	6921      	ldr	r1, [r4, #16]
 800c672:	f000 fb1c 	bl	800ccae <memcpy>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c680:	81a3      	strh	r3, [r4, #12]
 800c682:	6126      	str	r6, [r4, #16]
 800c684:	444e      	add	r6, r9
 800c686:	6026      	str	r6, [r4, #0]
 800c688:	463e      	mov	r6, r7
 800c68a:	6165      	str	r5, [r4, #20]
 800c68c:	eba5 0509 	sub.w	r5, r5, r9
 800c690:	60a5      	str	r5, [r4, #8]
 800c692:	42be      	cmp	r6, r7
 800c694:	d900      	bls.n	800c698 <__ssputs_r+0x70>
 800c696:	463e      	mov	r6, r7
 800c698:	4632      	mov	r2, r6
 800c69a:	4641      	mov	r1, r8
 800c69c:	6820      	ldr	r0, [r4, #0]
 800c69e:	f000 fade 	bl	800cc5e <memmove>
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	68a3      	ldr	r3, [r4, #8]
 800c6a6:	1b9b      	subs	r3, r3, r6
 800c6a8:	60a3      	str	r3, [r4, #8]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	4433      	add	r3, r6
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b4:	462a      	mov	r2, r5
 800c6b6:	f000 faa3 	bl	800cc00 <_realloc_r>
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d1e0      	bne.n	800c682 <__ssputs_r+0x5a>
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	6921      	ldr	r1, [r4, #16]
 800c6c4:	f7ff ff68 	bl	800c598 <_free_r>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	f8ca 3000 	str.w	r3, [sl]
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	e7e9      	b.n	800c6b0 <__ssputs_r+0x88>

0800c6dc <_svfiprintf_r>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	4698      	mov	r8, r3
 800c6e2:	898b      	ldrh	r3, [r1, #12]
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	061b      	lsls	r3, r3, #24
 800c6e8:	460d      	mov	r5, r1
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	b09d      	sub	sp, #116	; 0x74
 800c6ee:	d50e      	bpl.n	800c70e <_svfiprintf_r+0x32>
 800c6f0:	690b      	ldr	r3, [r1, #16]
 800c6f2:	b963      	cbnz	r3, 800c70e <_svfiprintf_r+0x32>
 800c6f4:	2140      	movs	r1, #64	; 0x40
 800c6f6:	f7ff fe05 	bl	800c304 <_malloc_r>
 800c6fa:	6028      	str	r0, [r5, #0]
 800c6fc:	6128      	str	r0, [r5, #16]
 800c6fe:	b920      	cbnz	r0, 800c70a <_svfiprintf_r+0x2e>
 800c700:	230c      	movs	r3, #12
 800c702:	603b      	str	r3, [r7, #0]
 800c704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c708:	e0d0      	b.n	800c8ac <_svfiprintf_r+0x1d0>
 800c70a:	2340      	movs	r3, #64	; 0x40
 800c70c:	616b      	str	r3, [r5, #20]
 800c70e:	2300      	movs	r3, #0
 800c710:	9309      	str	r3, [sp, #36]	; 0x24
 800c712:	2320      	movs	r3, #32
 800c714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c718:	2330      	movs	r3, #48	; 0x30
 800c71a:	f04f 0901 	mov.w	r9, #1
 800c71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c722:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c8c4 <_svfiprintf_r+0x1e8>
 800c726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c72a:	4623      	mov	r3, r4
 800c72c:	469a      	mov	sl, r3
 800c72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c732:	b10a      	cbz	r2, 800c738 <_svfiprintf_r+0x5c>
 800c734:	2a25      	cmp	r2, #37	; 0x25
 800c736:	d1f9      	bne.n	800c72c <_svfiprintf_r+0x50>
 800c738:	ebba 0b04 	subs.w	fp, sl, r4
 800c73c:	d00b      	beq.n	800c756 <_svfiprintf_r+0x7a>
 800c73e:	465b      	mov	r3, fp
 800c740:	4622      	mov	r2, r4
 800c742:	4629      	mov	r1, r5
 800c744:	4638      	mov	r0, r7
 800c746:	f7ff ff6f 	bl	800c628 <__ssputs_r>
 800c74a:	3001      	adds	r0, #1
 800c74c:	f000 80a9 	beq.w	800c8a2 <_svfiprintf_r+0x1c6>
 800c750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c752:	445a      	add	r2, fp
 800c754:	9209      	str	r2, [sp, #36]	; 0x24
 800c756:	f89a 3000 	ldrb.w	r3, [sl]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 80a1 	beq.w	800c8a2 <_svfiprintf_r+0x1c6>
 800c760:	2300      	movs	r3, #0
 800c762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76a:	f10a 0a01 	add.w	sl, sl, #1
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	9307      	str	r3, [sp, #28]
 800c772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c776:	931a      	str	r3, [sp, #104]	; 0x68
 800c778:	4654      	mov	r4, sl
 800c77a:	2205      	movs	r2, #5
 800c77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c780:	4850      	ldr	r0, [pc, #320]	; (800c8c4 <_svfiprintf_r+0x1e8>)
 800c782:	f000 fa86 	bl	800cc92 <memchr>
 800c786:	9a04      	ldr	r2, [sp, #16]
 800c788:	b9d8      	cbnz	r0, 800c7c2 <_svfiprintf_r+0xe6>
 800c78a:	06d0      	lsls	r0, r2, #27
 800c78c:	bf44      	itt	mi
 800c78e:	2320      	movmi	r3, #32
 800c790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c794:	0711      	lsls	r1, r2, #28
 800c796:	bf44      	itt	mi
 800c798:	232b      	movmi	r3, #43	; 0x2b
 800c79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c79e:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a4:	d015      	beq.n	800c7d2 <_svfiprintf_r+0xf6>
 800c7a6:	4654      	mov	r4, sl
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	f04f 0c0a 	mov.w	ip, #10
 800c7ae:	9a07      	ldr	r2, [sp, #28]
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b6:	3b30      	subs	r3, #48	; 0x30
 800c7b8:	2b09      	cmp	r3, #9
 800c7ba:	d94d      	bls.n	800c858 <_svfiprintf_r+0x17c>
 800c7bc:	b1b0      	cbz	r0, 800c7ec <_svfiprintf_r+0x110>
 800c7be:	9207      	str	r2, [sp, #28]
 800c7c0:	e014      	b.n	800c7ec <_svfiprintf_r+0x110>
 800c7c2:	eba0 0308 	sub.w	r3, r0, r8
 800c7c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	46a2      	mov	sl, r4
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	e7d2      	b.n	800c778 <_svfiprintf_r+0x9c>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	1d19      	adds	r1, r3, #4
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	9103      	str	r1, [sp, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	bfbb      	ittet	lt
 800c7de:	425b      	neglt	r3, r3
 800c7e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e4:	9307      	strge	r3, [sp, #28]
 800c7e6:	9307      	strlt	r3, [sp, #28]
 800c7e8:	bfb8      	it	lt
 800c7ea:	9204      	strlt	r2, [sp, #16]
 800c7ec:	7823      	ldrb	r3, [r4, #0]
 800c7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f0:	d10c      	bne.n	800c80c <_svfiprintf_r+0x130>
 800c7f2:	7863      	ldrb	r3, [r4, #1]
 800c7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f6:	d134      	bne.n	800c862 <_svfiprintf_r+0x186>
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	3402      	adds	r4, #2
 800c7fc:	1d1a      	adds	r2, r3, #4
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	9203      	str	r2, [sp, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	bfb8      	it	lt
 800c806:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c8c8 <_svfiprintf_r+0x1ec>
 800c810:	2203      	movs	r2, #3
 800c812:	4650      	mov	r0, sl
 800c814:	7821      	ldrb	r1, [r4, #0]
 800c816:	f000 fa3c 	bl	800cc92 <memchr>
 800c81a:	b138      	cbz	r0, 800c82c <_svfiprintf_r+0x150>
 800c81c:	2240      	movs	r2, #64	; 0x40
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	eba0 000a 	sub.w	r0, r0, sl
 800c824:	4082      	lsls	r2, r0
 800c826:	4313      	orrs	r3, r2
 800c828:	3401      	adds	r4, #1
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c830:	2206      	movs	r2, #6
 800c832:	4826      	ldr	r0, [pc, #152]	; (800c8cc <_svfiprintf_r+0x1f0>)
 800c834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c838:	f000 fa2b 	bl	800cc92 <memchr>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d038      	beq.n	800c8b2 <_svfiprintf_r+0x1d6>
 800c840:	4b23      	ldr	r3, [pc, #140]	; (800c8d0 <_svfiprintf_r+0x1f4>)
 800c842:	bb1b      	cbnz	r3, 800c88c <_svfiprintf_r+0x1b0>
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	3307      	adds	r3, #7
 800c848:	f023 0307 	bic.w	r3, r3, #7
 800c84c:	3308      	adds	r3, #8
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c852:	4433      	add	r3, r6
 800c854:	9309      	str	r3, [sp, #36]	; 0x24
 800c856:	e768      	b.n	800c72a <_svfiprintf_r+0x4e>
 800c858:	460c      	mov	r4, r1
 800c85a:	2001      	movs	r0, #1
 800c85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c860:	e7a6      	b.n	800c7b0 <_svfiprintf_r+0xd4>
 800c862:	2300      	movs	r3, #0
 800c864:	f04f 0c0a 	mov.w	ip, #10
 800c868:	4619      	mov	r1, r3
 800c86a:	3401      	adds	r4, #1
 800c86c:	9305      	str	r3, [sp, #20]
 800c86e:	4620      	mov	r0, r4
 800c870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c874:	3a30      	subs	r2, #48	; 0x30
 800c876:	2a09      	cmp	r2, #9
 800c878:	d903      	bls.n	800c882 <_svfiprintf_r+0x1a6>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0c6      	beq.n	800c80c <_svfiprintf_r+0x130>
 800c87e:	9105      	str	r1, [sp, #20]
 800c880:	e7c4      	b.n	800c80c <_svfiprintf_r+0x130>
 800c882:	4604      	mov	r4, r0
 800c884:	2301      	movs	r3, #1
 800c886:	fb0c 2101 	mla	r1, ip, r1, r2
 800c88a:	e7f0      	b.n	800c86e <_svfiprintf_r+0x192>
 800c88c:	ab03      	add	r3, sp, #12
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	462a      	mov	r2, r5
 800c892:	4638      	mov	r0, r7
 800c894:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <_svfiprintf_r+0x1f8>)
 800c896:	a904      	add	r1, sp, #16
 800c898:	f3af 8000 	nop.w
 800c89c:	1c42      	adds	r2, r0, #1
 800c89e:	4606      	mov	r6, r0
 800c8a0:	d1d6      	bne.n	800c850 <_svfiprintf_r+0x174>
 800c8a2:	89ab      	ldrh	r3, [r5, #12]
 800c8a4:	065b      	lsls	r3, r3, #25
 800c8a6:	f53f af2d 	bmi.w	800c704 <_svfiprintf_r+0x28>
 800c8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ac:	b01d      	add	sp, #116	; 0x74
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	ab03      	add	r3, sp, #12
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <_svfiprintf_r+0x1f8>)
 800c8bc:	a904      	add	r1, sp, #16
 800c8be:	f000 f87d 	bl	800c9bc <_printf_i>
 800c8c2:	e7eb      	b.n	800c89c <_svfiprintf_r+0x1c0>
 800c8c4:	0800dc93 	.word	0x0800dc93
 800c8c8:	0800dc99 	.word	0x0800dc99
 800c8cc:	0800dc9d 	.word	0x0800dc9d
 800c8d0:	00000000 	.word	0x00000000
 800c8d4:	0800c629 	.word	0x0800c629

0800c8d8 <_printf_common>:
 800c8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8dc:	4616      	mov	r6, r2
 800c8de:	4699      	mov	r9, r3
 800c8e0:	688a      	ldr	r2, [r1, #8]
 800c8e2:	690b      	ldr	r3, [r1, #16]
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	bfb8      	it	lt
 800c8ea:	4613      	movlt	r3, r2
 800c8ec:	6033      	str	r3, [r6, #0]
 800c8ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8f8:	b10a      	cbz	r2, 800c8fe <_printf_common+0x26>
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	6033      	str	r3, [r6, #0]
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	0699      	lsls	r1, r3, #26
 800c902:	bf42      	ittt	mi
 800c904:	6833      	ldrmi	r3, [r6, #0]
 800c906:	3302      	addmi	r3, #2
 800c908:	6033      	strmi	r3, [r6, #0]
 800c90a:	6825      	ldr	r5, [r4, #0]
 800c90c:	f015 0506 	ands.w	r5, r5, #6
 800c910:	d106      	bne.n	800c920 <_printf_common+0x48>
 800c912:	f104 0a19 	add.w	sl, r4, #25
 800c916:	68e3      	ldr	r3, [r4, #12]
 800c918:	6832      	ldr	r2, [r6, #0]
 800c91a:	1a9b      	subs	r3, r3, r2
 800c91c:	42ab      	cmp	r3, r5
 800c91e:	dc2b      	bgt.n	800c978 <_printf_common+0xa0>
 800c920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c924:	1e13      	subs	r3, r2, #0
 800c926:	6822      	ldr	r2, [r4, #0]
 800c928:	bf18      	it	ne
 800c92a:	2301      	movne	r3, #1
 800c92c:	0692      	lsls	r2, r2, #26
 800c92e:	d430      	bmi.n	800c992 <_printf_common+0xba>
 800c930:	4649      	mov	r1, r9
 800c932:	4638      	mov	r0, r7
 800c934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c938:	47c0      	blx	r8
 800c93a:	3001      	adds	r0, #1
 800c93c:	d023      	beq.n	800c986 <_printf_common+0xae>
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	6922      	ldr	r2, [r4, #16]
 800c942:	f003 0306 	and.w	r3, r3, #6
 800c946:	2b04      	cmp	r3, #4
 800c948:	bf14      	ite	ne
 800c94a:	2500      	movne	r5, #0
 800c94c:	6833      	ldreq	r3, [r6, #0]
 800c94e:	f04f 0600 	mov.w	r6, #0
 800c952:	bf08      	it	eq
 800c954:	68e5      	ldreq	r5, [r4, #12]
 800c956:	f104 041a 	add.w	r4, r4, #26
 800c95a:	bf08      	it	eq
 800c95c:	1aed      	subeq	r5, r5, r3
 800c95e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c962:	bf08      	it	eq
 800c964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c968:	4293      	cmp	r3, r2
 800c96a:	bfc4      	itt	gt
 800c96c:	1a9b      	subgt	r3, r3, r2
 800c96e:	18ed      	addgt	r5, r5, r3
 800c970:	42b5      	cmp	r5, r6
 800c972:	d11a      	bne.n	800c9aa <_printf_common+0xd2>
 800c974:	2000      	movs	r0, #0
 800c976:	e008      	b.n	800c98a <_printf_common+0xb2>
 800c978:	2301      	movs	r3, #1
 800c97a:	4652      	mov	r2, sl
 800c97c:	4649      	mov	r1, r9
 800c97e:	4638      	mov	r0, r7
 800c980:	47c0      	blx	r8
 800c982:	3001      	adds	r0, #1
 800c984:	d103      	bne.n	800c98e <_printf_common+0xb6>
 800c986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98e:	3501      	adds	r5, #1
 800c990:	e7c1      	b.n	800c916 <_printf_common+0x3e>
 800c992:	2030      	movs	r0, #48	; 0x30
 800c994:	18e1      	adds	r1, r4, r3
 800c996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9a0:	4422      	add	r2, r4
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9a8:	e7c2      	b.n	800c930 <_printf_common+0x58>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	47c0      	blx	r8
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d0e6      	beq.n	800c986 <_printf_common+0xae>
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	e7d9      	b.n	800c970 <_printf_common+0x98>

0800c9bc <_printf_i>:
 800c9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c0:	7e0f      	ldrb	r7, [r1, #24]
 800c9c2:	4691      	mov	r9, r2
 800c9c4:	2f78      	cmp	r7, #120	; 0x78
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	469a      	mov	sl, r3
 800c9cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9d2:	d807      	bhi.n	800c9e4 <_printf_i+0x28>
 800c9d4:	2f62      	cmp	r7, #98	; 0x62
 800c9d6:	d80a      	bhi.n	800c9ee <_printf_i+0x32>
 800c9d8:	2f00      	cmp	r7, #0
 800c9da:	f000 80d5 	beq.w	800cb88 <_printf_i+0x1cc>
 800c9de:	2f58      	cmp	r7, #88	; 0x58
 800c9e0:	f000 80c1 	beq.w	800cb66 <_printf_i+0x1aa>
 800c9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9ec:	e03a      	b.n	800ca64 <_printf_i+0xa8>
 800c9ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9f2:	2b15      	cmp	r3, #21
 800c9f4:	d8f6      	bhi.n	800c9e4 <_printf_i+0x28>
 800c9f6:	a101      	add	r1, pc, #4	; (adr r1, 800c9fc <_printf_i+0x40>)
 800c9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9fc:	0800ca55 	.word	0x0800ca55
 800ca00:	0800ca69 	.word	0x0800ca69
 800ca04:	0800c9e5 	.word	0x0800c9e5
 800ca08:	0800c9e5 	.word	0x0800c9e5
 800ca0c:	0800c9e5 	.word	0x0800c9e5
 800ca10:	0800c9e5 	.word	0x0800c9e5
 800ca14:	0800ca69 	.word	0x0800ca69
 800ca18:	0800c9e5 	.word	0x0800c9e5
 800ca1c:	0800c9e5 	.word	0x0800c9e5
 800ca20:	0800c9e5 	.word	0x0800c9e5
 800ca24:	0800c9e5 	.word	0x0800c9e5
 800ca28:	0800cb6f 	.word	0x0800cb6f
 800ca2c:	0800ca95 	.word	0x0800ca95
 800ca30:	0800cb29 	.word	0x0800cb29
 800ca34:	0800c9e5 	.word	0x0800c9e5
 800ca38:	0800c9e5 	.word	0x0800c9e5
 800ca3c:	0800cb91 	.word	0x0800cb91
 800ca40:	0800c9e5 	.word	0x0800c9e5
 800ca44:	0800ca95 	.word	0x0800ca95
 800ca48:	0800c9e5 	.word	0x0800c9e5
 800ca4c:	0800c9e5 	.word	0x0800c9e5
 800ca50:	0800cb31 	.word	0x0800cb31
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	1d1a      	adds	r2, r3, #4
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	602a      	str	r2, [r5, #0]
 800ca5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca64:	2301      	movs	r3, #1
 800ca66:	e0a0      	b.n	800cbaa <_printf_i+0x1ee>
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	682b      	ldr	r3, [r5, #0]
 800ca6c:	0607      	lsls	r7, r0, #24
 800ca6e:	f103 0104 	add.w	r1, r3, #4
 800ca72:	6029      	str	r1, [r5, #0]
 800ca74:	d501      	bpl.n	800ca7a <_printf_i+0xbe>
 800ca76:	681e      	ldr	r6, [r3, #0]
 800ca78:	e003      	b.n	800ca82 <_printf_i+0xc6>
 800ca7a:	0646      	lsls	r6, r0, #25
 800ca7c:	d5fb      	bpl.n	800ca76 <_printf_i+0xba>
 800ca7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca82:	2e00      	cmp	r6, #0
 800ca84:	da03      	bge.n	800ca8e <_printf_i+0xd2>
 800ca86:	232d      	movs	r3, #45	; 0x2d
 800ca88:	4276      	negs	r6, r6
 800ca8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca8e:	230a      	movs	r3, #10
 800ca90:	4859      	ldr	r0, [pc, #356]	; (800cbf8 <_printf_i+0x23c>)
 800ca92:	e012      	b.n	800caba <_printf_i+0xfe>
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	6820      	ldr	r0, [r4, #0]
 800ca98:	1d19      	adds	r1, r3, #4
 800ca9a:	6029      	str	r1, [r5, #0]
 800ca9c:	0605      	lsls	r5, r0, #24
 800ca9e:	d501      	bpl.n	800caa4 <_printf_i+0xe8>
 800caa0:	681e      	ldr	r6, [r3, #0]
 800caa2:	e002      	b.n	800caaa <_printf_i+0xee>
 800caa4:	0641      	lsls	r1, r0, #25
 800caa6:	d5fb      	bpl.n	800caa0 <_printf_i+0xe4>
 800caa8:	881e      	ldrh	r6, [r3, #0]
 800caaa:	2f6f      	cmp	r7, #111	; 0x6f
 800caac:	bf0c      	ite	eq
 800caae:	2308      	moveq	r3, #8
 800cab0:	230a      	movne	r3, #10
 800cab2:	4851      	ldr	r0, [pc, #324]	; (800cbf8 <_printf_i+0x23c>)
 800cab4:	2100      	movs	r1, #0
 800cab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caba:	6865      	ldr	r5, [r4, #4]
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	bfa8      	it	ge
 800cac0:	6821      	ldrge	r1, [r4, #0]
 800cac2:	60a5      	str	r5, [r4, #8]
 800cac4:	bfa4      	itt	ge
 800cac6:	f021 0104 	bicge.w	r1, r1, #4
 800caca:	6021      	strge	r1, [r4, #0]
 800cacc:	b90e      	cbnz	r6, 800cad2 <_printf_i+0x116>
 800cace:	2d00      	cmp	r5, #0
 800cad0:	d04b      	beq.n	800cb6a <_printf_i+0x1ae>
 800cad2:	4615      	mov	r5, r2
 800cad4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cad8:	fb03 6711 	mls	r7, r3, r1, r6
 800cadc:	5dc7      	ldrb	r7, [r0, r7]
 800cade:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cae2:	4637      	mov	r7, r6
 800cae4:	42bb      	cmp	r3, r7
 800cae6:	460e      	mov	r6, r1
 800cae8:	d9f4      	bls.n	800cad4 <_printf_i+0x118>
 800caea:	2b08      	cmp	r3, #8
 800caec:	d10b      	bne.n	800cb06 <_printf_i+0x14a>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	07de      	lsls	r6, r3, #31
 800caf2:	d508      	bpl.n	800cb06 <_printf_i+0x14a>
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	6861      	ldr	r1, [r4, #4]
 800caf8:	4299      	cmp	r1, r3
 800cafa:	bfde      	ittt	le
 800cafc:	2330      	movle	r3, #48	; 0x30
 800cafe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb06:	1b52      	subs	r2, r2, r5
 800cb08:	6122      	str	r2, [r4, #16]
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4640      	mov	r0, r8
 800cb10:	f8cd a000 	str.w	sl, [sp]
 800cb14:	aa03      	add	r2, sp, #12
 800cb16:	f7ff fedf 	bl	800c8d8 <_printf_common>
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	d14a      	bne.n	800cbb4 <_printf_i+0x1f8>
 800cb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb22:	b004      	add	sp, #16
 800cb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	f043 0320 	orr.w	r3, r3, #32
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	2778      	movs	r7, #120	; 0x78
 800cb32:	4832      	ldr	r0, [pc, #200]	; (800cbfc <_printf_i+0x240>)
 800cb34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	6829      	ldr	r1, [r5, #0]
 800cb3c:	061f      	lsls	r7, r3, #24
 800cb3e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb42:	d402      	bmi.n	800cb4a <_printf_i+0x18e>
 800cb44:	065f      	lsls	r7, r3, #25
 800cb46:	bf48      	it	mi
 800cb48:	b2b6      	uxthmi	r6, r6
 800cb4a:	07df      	lsls	r7, r3, #31
 800cb4c:	bf48      	it	mi
 800cb4e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb52:	6029      	str	r1, [r5, #0]
 800cb54:	bf48      	it	mi
 800cb56:	6023      	strmi	r3, [r4, #0]
 800cb58:	b91e      	cbnz	r6, 800cb62 <_printf_i+0x1a6>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	f023 0320 	bic.w	r3, r3, #32
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	2310      	movs	r3, #16
 800cb64:	e7a6      	b.n	800cab4 <_printf_i+0xf8>
 800cb66:	4824      	ldr	r0, [pc, #144]	; (800cbf8 <_printf_i+0x23c>)
 800cb68:	e7e4      	b.n	800cb34 <_printf_i+0x178>
 800cb6a:	4615      	mov	r5, r2
 800cb6c:	e7bd      	b.n	800caea <_printf_i+0x12e>
 800cb6e:	682b      	ldr	r3, [r5, #0]
 800cb70:	6826      	ldr	r6, [r4, #0]
 800cb72:	1d18      	adds	r0, r3, #4
 800cb74:	6961      	ldr	r1, [r4, #20]
 800cb76:	6028      	str	r0, [r5, #0]
 800cb78:	0635      	lsls	r5, r6, #24
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	d501      	bpl.n	800cb82 <_printf_i+0x1c6>
 800cb7e:	6019      	str	r1, [r3, #0]
 800cb80:	e002      	b.n	800cb88 <_printf_i+0x1cc>
 800cb82:	0670      	lsls	r0, r6, #25
 800cb84:	d5fb      	bpl.n	800cb7e <_printf_i+0x1c2>
 800cb86:	8019      	strh	r1, [r3, #0]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4615      	mov	r5, r2
 800cb8c:	6123      	str	r3, [r4, #16]
 800cb8e:	e7bc      	b.n	800cb0a <_printf_i+0x14e>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	2100      	movs	r1, #0
 800cb94:	1d1a      	adds	r2, r3, #4
 800cb96:	602a      	str	r2, [r5, #0]
 800cb98:	681d      	ldr	r5, [r3, #0]
 800cb9a:	6862      	ldr	r2, [r4, #4]
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	f000 f878 	bl	800cc92 <memchr>
 800cba2:	b108      	cbz	r0, 800cba8 <_printf_i+0x1ec>
 800cba4:	1b40      	subs	r0, r0, r5
 800cba6:	6060      	str	r0, [r4, #4]
 800cba8:	6863      	ldr	r3, [r4, #4]
 800cbaa:	6123      	str	r3, [r4, #16]
 800cbac:	2300      	movs	r3, #0
 800cbae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb2:	e7aa      	b.n	800cb0a <_printf_i+0x14e>
 800cbb4:	462a      	mov	r2, r5
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	47d0      	blx	sl
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d0ad      	beq.n	800cb1e <_printf_i+0x162>
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	079b      	lsls	r3, r3, #30
 800cbc6:	d413      	bmi.n	800cbf0 <_printf_i+0x234>
 800cbc8:	68e0      	ldr	r0, [r4, #12]
 800cbca:	9b03      	ldr	r3, [sp, #12]
 800cbcc:	4298      	cmp	r0, r3
 800cbce:	bfb8      	it	lt
 800cbd0:	4618      	movlt	r0, r3
 800cbd2:	e7a6      	b.n	800cb22 <_printf_i+0x166>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4649      	mov	r1, r9
 800cbda:	4640      	mov	r0, r8
 800cbdc:	47d0      	blx	sl
 800cbde:	3001      	adds	r0, #1
 800cbe0:	d09d      	beq.n	800cb1e <_printf_i+0x162>
 800cbe2:	3501      	adds	r5, #1
 800cbe4:	68e3      	ldr	r3, [r4, #12]
 800cbe6:	9903      	ldr	r1, [sp, #12]
 800cbe8:	1a5b      	subs	r3, r3, r1
 800cbea:	42ab      	cmp	r3, r5
 800cbec:	dcf2      	bgt.n	800cbd4 <_printf_i+0x218>
 800cbee:	e7eb      	b.n	800cbc8 <_printf_i+0x20c>
 800cbf0:	2500      	movs	r5, #0
 800cbf2:	f104 0619 	add.w	r6, r4, #25
 800cbf6:	e7f5      	b.n	800cbe4 <_printf_i+0x228>
 800cbf8:	0800dca4 	.word	0x0800dca4
 800cbfc:	0800dcb5 	.word	0x0800dcb5

0800cc00 <_realloc_r>:
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	4680      	mov	r8, r0
 800cc06:	4614      	mov	r4, r2
 800cc08:	460e      	mov	r6, r1
 800cc0a:	b921      	cbnz	r1, 800cc16 <_realloc_r+0x16>
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	f7ff bb77 	b.w	800c304 <_malloc_r>
 800cc16:	b92a      	cbnz	r2, 800cc24 <_realloc_r+0x24>
 800cc18:	f7ff fcbe 	bl	800c598 <_free_r>
 800cc1c:	4625      	mov	r5, r4
 800cc1e:	4628      	mov	r0, r5
 800cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc24:	f000 f851 	bl	800ccca <_malloc_usable_size_r>
 800cc28:	4284      	cmp	r4, r0
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	d802      	bhi.n	800cc34 <_realloc_r+0x34>
 800cc2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc32:	d812      	bhi.n	800cc5a <_realloc_r+0x5a>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7ff fb64 	bl	800c304 <_malloc_r>
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0ed      	beq.n	800cc1e <_realloc_r+0x1e>
 800cc42:	42bc      	cmp	r4, r7
 800cc44:	4622      	mov	r2, r4
 800cc46:	4631      	mov	r1, r6
 800cc48:	bf28      	it	cs
 800cc4a:	463a      	movcs	r2, r7
 800cc4c:	f000 f82f 	bl	800ccae <memcpy>
 800cc50:	4631      	mov	r1, r6
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff fca0 	bl	800c598 <_free_r>
 800cc58:	e7e1      	b.n	800cc1e <_realloc_r+0x1e>
 800cc5a:	4635      	mov	r5, r6
 800cc5c:	e7df      	b.n	800cc1e <_realloc_r+0x1e>

0800cc5e <memmove>:
 800cc5e:	4288      	cmp	r0, r1
 800cc60:	b510      	push	{r4, lr}
 800cc62:	eb01 0402 	add.w	r4, r1, r2
 800cc66:	d902      	bls.n	800cc6e <memmove+0x10>
 800cc68:	4284      	cmp	r4, r0
 800cc6a:	4623      	mov	r3, r4
 800cc6c:	d807      	bhi.n	800cc7e <memmove+0x20>
 800cc6e:	1e43      	subs	r3, r0, #1
 800cc70:	42a1      	cmp	r1, r4
 800cc72:	d008      	beq.n	800cc86 <memmove+0x28>
 800cc74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc7c:	e7f8      	b.n	800cc70 <memmove+0x12>
 800cc7e:	4601      	mov	r1, r0
 800cc80:	4402      	add	r2, r0
 800cc82:	428a      	cmp	r2, r1
 800cc84:	d100      	bne.n	800cc88 <memmove+0x2a>
 800cc86:	bd10      	pop	{r4, pc}
 800cc88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc90:	e7f7      	b.n	800cc82 <memmove+0x24>

0800cc92 <memchr>:
 800cc92:	4603      	mov	r3, r0
 800cc94:	b510      	push	{r4, lr}
 800cc96:	b2c9      	uxtb	r1, r1
 800cc98:	4402      	add	r2, r0
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	d101      	bne.n	800cca4 <memchr+0x12>
 800cca0:	2000      	movs	r0, #0
 800cca2:	e003      	b.n	800ccac <memchr+0x1a>
 800cca4:	7804      	ldrb	r4, [r0, #0]
 800cca6:	3301      	adds	r3, #1
 800cca8:	428c      	cmp	r4, r1
 800ccaa:	d1f6      	bne.n	800cc9a <memchr+0x8>
 800ccac:	bd10      	pop	{r4, pc}

0800ccae <memcpy>:
 800ccae:	440a      	add	r2, r1
 800ccb0:	4291      	cmp	r1, r2
 800ccb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ccb6:	d100      	bne.n	800ccba <memcpy+0xc>
 800ccb8:	4770      	bx	lr
 800ccba:	b510      	push	{r4, lr}
 800ccbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccc0:	4291      	cmp	r1, r2
 800ccc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccc6:	d1f9      	bne.n	800ccbc <memcpy+0xe>
 800ccc8:	bd10      	pop	{r4, pc}

0800ccca <_malloc_usable_size_r>:
 800ccca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccce:	1f18      	subs	r0, r3, #4
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bfbc      	itt	lt
 800ccd4:	580b      	ldrlt	r3, [r1, r0]
 800ccd6:	18c0      	addlt	r0, r0, r3
 800ccd8:	4770      	bx	lr
	...

0800ccdc <_init>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	bf00      	nop
 800cce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce2:	bc08      	pop	{r3}
 800cce4:	469e      	mov	lr, r3
 800cce6:	4770      	bx	lr

0800cce8 <_fini>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	bf00      	nop
 800ccec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccee:	bc08      	pop	{r3}
 800ccf0:	469e      	mov	lr, r3
 800ccf2:	4770      	bx	lr
