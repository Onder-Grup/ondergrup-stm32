
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800d8b4  0800d8b4  0000e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe0  0800dbe0  0000ffac  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbe0  0800dbe0  0000ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbe8  0800dbe8  0000ffac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbe8  0800dbe8  0000ebe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbec  0800dbec  0000ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fac  20000000  0800dbf0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  20000fac  0800eb9c  0000ffac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b3c  0800eb9c  00010b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c77  00000000  00000000  0000ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f7  00000000  00000000  00028c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea8  00000000  00000000  0002d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c867  00000000  00000000  0004ac74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a041c  00000000  00000000  000674db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001078f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  0010793c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fac 	.word	0x20000fac
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d89c 	.word	0x0800d89c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fb0 	.word	0x20000fb0
 8000220:	0800d89c 	.word	0x0800d89c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a f986 	bl	800a560 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f008 fffe 	bl	8009258 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000fc8 	.word	0x20000fc8
 80004bc:	20001908 	.word	0x20001908
 80004c0:	20001075 	.word	0x20001075
 80004c4:	200010a1 	.word	0x200010a1
 80004c8:	200010a4 	.word	0x200010a4
 80004cc:	200010a5 	.word	0x200010a5
 80004d0:	200010a6 	.word	0x200010a6
 80004d4:	200010a7 	.word	0x200010a7
 80004d8:	200010a8 	.word	0x200010a8
 80004dc:	200010a9 	.word	0x200010a9
 80004e0:	200010b9 	.word	0x200010b9
 80004e4:	200010aa 	.word	0x200010aa
 80004e8:	200010ba 	.word	0x200010ba
 80004ec:	200010ab 	.word	0x200010ab
 80004f0:	200010bb 	.word	0x200010bb
 80004f4:	200010ae 	.word	0x200010ae
 80004f8:	200010af 	.word	0x200010af
 80004fc:	200010b0 	.word	0x200010b0
 8000500:	200010b1 	.word	0x200010b1
 8000504:	200010b2 	.word	0x200010b2
 8000508:	200010b3 	.word	0x200010b3
 800050c:	200010b4 	.word	0x200010b4
 8000510:	200010b5 	.word	0x200010b5
 8000514:	200010b6 	.word	0x200010b6
 8000518:	200010b7 	.word	0x200010b7
 800051c:	200010b8 	.word	0x200010b8
 8000520:	200010bc 	.word	0x200010bc
 8000524:	200010be 	.word	0x200010be
 8000528:	2000109c 	.word	0x2000109c
 800052c:	2000109d 	.word	0x2000109d
 8000530:	2000109e 	.word	0x2000109e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000109f 	.word	0x2000109f
 8000540:	200010c1 	.word	0x200010c1
 8000544:	200010bf 	.word	0x200010bf
 8000548:	200010ad 	.word	0x200010ad
 800054c:	200010c0 	.word	0x200010c0
 8000550:	200010ac 	.word	0x200010ac
 8000554:	200010c2 	.word	0x200010c2
 8000558:	200010c3 	.word	0x200010c3
 800055c:	200010c4 	.word	0x200010c4
 8000560:	200010c5 	.word	0x200010c5
 8000564:	200010c6 	.word	0x200010c6
 8000568:	200010c7 	.word	0x200010c7
 800056c:	200010c8 	.word	0x200010c8
 8000570:	200010c9 	.word	0x200010c9
 8000574:	200010ca 	.word	0x200010ca
 8000578:	200010cb 	.word	0x200010cb
 800057c:	20001074 	.word	0x20001074
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fdcc 	bl	8009258 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fdc6 	bl	8009258 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 fdc0 	bl	8009258 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fbf9 	bl	8005ed4 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010b9 	.word	0x200010b9
 80006ec:	200010aa 	.word	0x200010aa
 80006f0:	200010ba 	.word	0x200010ba
 80006f4:	200010ab 	.word	0x200010ab
 80006f8:	200010ad 	.word	0x200010ad
 80006fc:	200010bb 	.word	0x200010bb
 8000700:	200010ae 	.word	0x200010ae
 8000704:	200010af 	.word	0x200010af
 8000708:	200010b0 	.word	0x200010b0
 800070c:	200010b1 	.word	0x200010b1
 8000710:	200010b2 	.word	0x200010b2
 8000714:	200010b3 	.word	0x200010b3
 8000718:	200010b4 	.word	0x200010b4
 800071c:	200010b5 	.word	0x200010b5
 8000720:	200010b6 	.word	0x200010b6
 8000724:	200010b7 	.word	0x200010b7
 8000728:	200010b8 	.word	0x200010b8
 800072c:	200010bc 	.word	0x200010bc
 8000730:	200010be 	.word	0x200010be
 8000734:	200010c0 	.word	0x200010c0
 8000738:	200010c1 	.word	0x200010c1
 800073c:	200010bf 	.word	0x200010bf

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000fc8 	.word	0x20000fc8
 8000828:	20000010 	.word	0x20000010
 800082c:	20001040 	.word	0x20001040
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	2000104c 	.word	0x2000104c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001060 	.word	0x20001060

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fc0d 	bl	800d0a2 <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fb91 	bl	800cfc0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fd9c 	bl	800c3f0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fccc 	bl	8009258 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fb68 	bl	800cfc0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c fb58 	bl	800cfc0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fd60 	bl	800c3f0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fc90 	bl	8009258 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fd4c 	bl	800c3f0 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fc7c 	bl	8009258 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800d904 	.word	0x0800d904
 8000970:	0800d914 	.word	0x0800d914
 8000974:	20001104 	.word	0x20001104
 8000978:	0800d9a8 	.word	0x0800d9a8
 800097c:	0800d934 	.word	0x0800d934
 8000980:	0800d9bc 	.word	0x0800d9bc

08000984 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f8d1 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fcae 	bl	800a36c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fc20 	bl	8009258 <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000fc8 	.word	0x20000fc8
 8000a30:	20001908 	.word	0x20001908

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10f      	bne.n	8000a64 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 feab 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, "1");
 8000a4e:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <hataKoduLcdGoster+0xf8>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	2002      	movs	r0, #2
 8000a54:	f007 fea6 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f007 fea1 	bl	80087a4 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a62:	e05d      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10f      	bne.n	8000a8a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 fe98 	bl	80087a4 <lcd_print>
		lcd_print(2, 2, "2");
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <hataKoduLcdGoster+0x100>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 fe93 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a80:	2107      	movs	r1, #7
 8000a82:	2002      	movs	r0, #2
 8000a84:	f007 fe8e 	bl	80087a4 <lcd_print>
}
 8000a88:	e04a      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10f      	bne.n	8000ab0 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f007 fe85 	bl	80087a4 <lcd_print>
		lcd_print(2, 3, "3");
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <hataKoduLcdGoster+0x104>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f007 fe80 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f007 fe7b 	bl	80087a4 <lcd_print>
}
 8000aae:	e037      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d10f      	bne.n	8000ad6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 fe72 	bl	80087a4 <lcd_print>
		lcd_print(2, 4, "4");
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <hataKoduLcdGoster+0x108>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 fe6d 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 fe68 	bl	80087a4 <lcd_print>
}
 8000ad4:	e024      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d10f      	bne.n	8000afc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 fe5f 	bl	80087a4 <lcd_print>
		lcd_print(2, 5, "5");
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <hataKoduLcdGoster+0x10c>)
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 fe5a 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f007 fe55 	bl	80087a4 <lcd_print>
}
 8000afa:	e011      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d10e      	bne.n	8000b20 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 fe4c 	bl	80087a4 <lcd_print>
		lcd_print(2, 6, "6");
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <hataKoduLcdGoster+0x110>)
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 fe47 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 fe42 	bl	80087a4 <lcd_print>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20001890 	.word	0x20001890
 8000b2c:	0800da30 	.word	0x0800da30
 8000b30:	0800da34 	.word	0x0800da34
 8000b34:	0800da40 	.word	0x0800da40
 8000b38:	0800da44 	.word	0x0800da44
 8000b3c:	0800da48 	.word	0x0800da48
 8000b40:	0800da4c 	.word	0x0800da4c
 8000b44:	0800da50 	.word	0x0800da50

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000070 	.word	0x20000070
 8000b84:	20000fc8 	.word	0x20000fc8
 8000b88:	20000098 	.word	0x20000098

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <i2cTest+0x154>)
 8000bb0:	f009 faae 	bl	800a110 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	@ 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 feb5 	bl	8009938 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	@ (8000ce4 <i2cTest+0x158>)
 8000bd4:	f009 f927 	bl	8009e26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <i2cTest+0x158>)
 8000bde:	f009 f922 	bl	8009e26 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 fb38 	bl	8009258 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <i2cTest+0x158>)
 8000bee:	f009 f903 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	@ (8000ce4 <i2cTest+0x158>)
 8000bfc:	f009 f8fc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <i2cTest+0x158>)
 8000c0c:	f009 f90b 	bl	8009e26 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f008 fb21 	bl	8009258 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	@ (8000ce4 <i2cTest+0x158>)
 8000c1c:	f009 f8ec 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	@ 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <i2cTest+0x158>)
 8000c2c:	f009 f8fb 	bl	8009e26 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f008 fb11 	bl	8009258 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <i2cTest+0x158>)
 8000c3c:	f009 f8dc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <i2cTest+0x158>)
 8000c4c:	f009 f8eb 	bl	8009e26 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f008 fb01 	bl	8009258 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <i2cTest+0x158>)
 8000c5c:	f009 f8cc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <i2cTest+0x158>)
 8000c6c:	f009 f8db 	bl	8009e26 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f008 faf1 	bl	8009258 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <i2cTest+0x158>)
 8000c7c:	f009 f8bc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <i2cTest+0x158>)
 8000c9c:	f008 fe4c 	bl	8009938 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <i2cTest+0x154>)
 8000cd2:	f009 f8d9 	bl	8009e88 <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001908 	.word	0x20001908
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f008 fab0 	bl	8009258 <HAL_Delay>
	lcd_clear();
 8000cf8:	f007 fd80 	bl	80087fc <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13e      	bne.n	8000d80 <printTemplate+0x98>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d13b      	bne.n	8000d80 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a81      	ldr	r2, [pc, #516]	@ (8000f10 <printTemplate+0x228>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 fd49 	bl	80087a4 <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a80      	ldr	r2, [pc, #512]	@ (8000f14 <printTemplate+0x22c>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 fd44 	bl	80087a4 <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a7e      	ldr	r2, [pc, #504]	@ (8000f18 <printTemplate+0x230>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 fd3f 	bl	80087a4 <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a7d      	ldr	r2, [pc, #500]	@ (8000f1c <printTemplate+0x234>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 fd3a 	bl	80087a4 <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a7b      	ldr	r2, [pc, #492]	@ (8000f20 <printTemplate+0x238>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fd35 	bl	80087a4 <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f24 <printTemplate+0x23c>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fd30 	bl	80087a4 <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a78      	ldr	r2, [pc, #480]	@ (8000f28 <printTemplate+0x240>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 fd2b 	bl	80087a4 <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <printTemplate+0x244>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fd26 	bl	80087a4 <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a75      	ldr	r2, [pc, #468]	@ (8000f30 <printTemplate+0x248>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f007 fd21 	bl	80087a4 <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a74      	ldr	r2, [pc, #464]	@ (8000f34 <printTemplate+0x24c>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 fd1c 	bl	80087a4 <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a72      	ldr	r2, [pc, #456]	@ (8000f38 <printTemplate+0x250>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fd17 	bl	80087a4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f007 fcf4 	bl	8008766 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d7e:	e0c2      	b.n	8000f06 <printTemplate+0x21e>
	} else if(type == 2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d15e      	bne.n	8000e44 <printTemplate+0x15c>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <printTemplate+0xc4>
			lcd_clear();
 8000d8c:	f007 fd36 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f008 fa61 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d96:	4a69      	ldr	r2, [pc, #420]	@ (8000f3c <printTemplate+0x254>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 fd02 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000da0:	4a67      	ldr	r2, [pc, #412]	@ (8000f40 <printTemplate+0x258>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f007 fcfd 	bl	80087a4 <lcd_print>
}
 8000daa:	e0ac      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 2) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10f      	bne.n	8000dd2 <printTemplate+0xea>
			lcd_clear();
 8000db2:	f007 fd23 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000db6:	2064      	movs	r0, #100	@ 0x64
 8000db8:	f008 fa4e 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8000f3c <printTemplate+0x254>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f007 fcef 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f44 <printTemplate+0x25c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f007 fcea 	bl	80087a4 <lcd_print>
}
 8000dd0:	e099      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 3) {
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d10f      	bne.n	8000df8 <printTemplate+0x110>
			lcd_clear();
 8000dd8:	f007 fd10 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	@ 0x64
 8000dde:	f008 fa3b 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000de2:	4a56      	ldr	r2, [pc, #344]	@ (8000f3c <printTemplate+0x254>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	2001      	movs	r0, #1
 8000de8:	f007 fcdc 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000dec:	4a56      	ldr	r2, [pc, #344]	@ (8000f48 <printTemplate+0x260>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2002      	movs	r0, #2
 8000df2:	f007 fcd7 	bl	80087a4 <lcd_print>
}
 8000df6:	e086      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 4) {
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d10f      	bne.n	8000e1e <printTemplate+0x136>
			lcd_clear();
 8000dfe:	f007 fcfd 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000e02:	2064      	movs	r0, #100	@ 0x64
 8000e04:	f008 fa28 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e08:	4a4c      	ldr	r2, [pc, #304]	@ (8000f3c <printTemplate+0x254>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f007 fcc9 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e12:	4a4e      	ldr	r2, [pc, #312]	@ (8000f4c <printTemplate+0x264>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	2002      	movs	r0, #2
 8000e18:	f007 fcc4 	bl	80087a4 <lcd_print>
}
 8000e1c:	e073      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 5) {
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d170      	bne.n	8000f06 <printTemplate+0x21e>
			lcd_clear();
 8000e24:	f007 fcea 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	@ 0x64
 8000e2a:	f008 fa15 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e2e:	4a43      	ldr	r2, [pc, #268]	@ (8000f3c <printTemplate+0x254>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	2001      	movs	r0, #1
 8000e34:	f007 fcb6 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e38:	4a45      	ldr	r2, [pc, #276]	@ (8000f50 <printTemplate+0x268>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f007 fcb1 	bl	80087a4 <lcd_print>
}
 8000e42:	e060      	b.n	8000f06 <printTemplate+0x21e>
	} else if(type == 3) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d15d      	bne.n	8000f06 <printTemplate+0x21e>
		if(page == 1) {
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10f      	bne.n	8000e70 <printTemplate+0x188>
			lcd_clear();
 8000e50:	f007 fcd4 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000e54:	2064      	movs	r0, #100	@ 0x64
 8000e56:	f008 f9ff 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f54 <printTemplate+0x26c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 fca0 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e64:	4a36      	ldr	r2, [pc, #216]	@ (8000f40 <printTemplate+0x258>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 fc9b 	bl	80087a4 <lcd_print>
}
 8000e6e:	e04a      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 2) {
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d10f      	bne.n	8000e96 <printTemplate+0x1ae>
			lcd_clear();
 8000e76:	f007 fcc1 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000e7a:	2064      	movs	r0, #100	@ 0x64
 8000e7c:	f008 f9ec 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e80:	4a34      	ldr	r2, [pc, #208]	@ (8000f54 <printTemplate+0x26c>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	2001      	movs	r0, #1
 8000e86:	f007 fc8d 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <printTemplate+0x25c>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f007 fc88 	bl	80087a4 <lcd_print>
}
 8000e94:	e037      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 3) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10f      	bne.n	8000ebc <printTemplate+0x1d4>
			lcd_clear();
 8000e9c:	f007 fcae 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	@ 0x64
 8000ea2:	f008 f9d9 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <printTemplate+0x26c>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f007 fc7a 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000eb0:	4a25      	ldr	r2, [pc, #148]	@ (8000f48 <printTemplate+0x260>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f007 fc75 	bl	80087a4 <lcd_print>
}
 8000eba:	e024      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 4) {
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d10f      	bne.n	8000ee2 <printTemplate+0x1fa>
			lcd_clear();
 8000ec2:	f007 fc9b 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	@ 0x64
 8000ec8:	f008 f9c6 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <printTemplate+0x26c>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f007 fc67 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <printTemplate+0x264>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2002      	movs	r0, #2
 8000edc:	f007 fc62 	bl	80087a4 <lcd_print>
}
 8000ee0:	e011      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 5) {
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d10e      	bne.n	8000f06 <printTemplate+0x21e>
			lcd_clear();
 8000ee8:	f007 fc88 	bl	80087fc <lcd_clear>
			HAL_Delay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f008 f9b3 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ef2:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <printTemplate+0x26c>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f007 fc54 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <printTemplate+0x268>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2002      	movs	r0, #2
 8000f02:	f007 fc4f 	bl	80087a4 <lcd_print>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800da54 	.word	0x0800da54
 8000f14:	0800da5c 	.word	0x0800da5c
 8000f18:	0800da60 	.word	0x0800da60
 8000f1c:	0800da64 	.word	0x0800da64
 8000f20:	0800da68 	.word	0x0800da68
 8000f24:	0800da6c 	.word	0x0800da6c
 8000f28:	0800da70 	.word	0x0800da70
 8000f2c:	0800da74 	.word	0x0800da74
 8000f30:	0800da78 	.word	0x0800da78
 8000f34:	0800da7c 	.word	0x0800da7c
 8000f38:	0800da80 	.word	0x0800da80
 8000f3c:	0800da84 	.word	0x0800da84
 8000f40:	0800da8c 	.word	0x0800da8c
 8000f44:	0800daa0 	.word	0x0800daa0
 8000f48:	0800dab4 	.word	0x0800dab4
 8000f4c:	0800dac8 	.word	0x0800dac8
 8000f50:	0800dadc 	.word	0x0800dadc
 8000f54:	0800daf0 	.word	0x0800daf0

08000f58 <checkSlideVal>:

int checkSlideVal(int state) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f66:	2101      	movs	r1, #1
 8000f68:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <checkSlideVal+0x60>)
 8000f6a:	f008 ff45 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <checkSlideVal+0x20>
			return 34;
 8000f74:	2322      	movs	r3, #34	@ 0x22
 8000f76:	e01b      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <checkSlideVal+0x64>)
 8000f7c:	f008 ff3c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d113      	bne.n	8000fae <checkSlideVal+0x56>
			return 32;
 8000f86:	2320      	movs	r3, #32
 8000f88:	e012      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <checkSlideVal+0x60>)
 8000f8e:	f008 ff33 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <checkSlideVal+0x44>
			return 35;
 8000f98:	2323      	movs	r3, #35	@ 0x23
 8000f9a:	e009      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <checkSlideVal+0x64>)
 8000fa0:	f008 ff2a 	bl	8009df8 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <checkSlideVal+0x56>
			return 33;
 8000faa:	2321      	movs	r3, #33	@ 0x21
 8000fac:	e000      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	}
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff f928 	bl	8000224 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8000fdc:	e0aa      	b.n	8001134 <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f7ff ffba 	bl	8000f58 <checkSlideVal>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dd07      	ble.n	8000ffa <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff ffb4 	bl	8000f58 <checkSlideVal>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <slideText+0x188>)
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e0a2      	b.n	8001140 <slideText+0x180>
		}
		checkEditMode();
 8000ffa:	f000 f927 	bl	800124c <checkEditMode>
		if(editMode == 1) {
 8000ffe:	4b53      	ldr	r3, [pc, #332]	@ (800114c <slideText+0x18c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	f000 809b 	beq.w	800113e <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	e08b      	b.n	8001126 <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f7ff ffa2 	bl	8000f58 <checkSlideVal>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	dd09      	ble.n	800102e <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f7ff ff9c 	bl	8000f58 <checkSlideVal>
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <slideText+0x188>)
 8001026:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 800102c:	e082      	b.n	8001134 <slideText+0x174>
			}
			checkEditMode();
 800102e:	f000 f90d 	bl	800124c <checkEditMode>
			if(editMode == 1) {
 8001032:	4b46      	ldr	r3, [pc, #280]	@ (800114c <slideText+0x18c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d07b      	beq.n	8001132 <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	4413      	add	r3, r2
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e02f      	b.n	80010a4 <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff ff87 	bl	8000f58 <checkSlideVal>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0b      	ble.n	8001068 <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff ff81 	bl	8000f58 <checkSlideVal>
 8001056:	4603      	mov	r3, r0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <slideText+0x188>)
 800105c:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001066:	e025      	b.n	80010b4 <slideText+0xf4>
				}
				checkEditMode();
 8001068:	f000 f8f0 	bl	800124c <checkEditMode>
				if(editMode == 1) {
 800106c:	4b37      	ldr	r3, [pc, #220]	@ (800114c <slideText+0x18c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d01e      	beq.n	80010b2 <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	b2d8      	uxtb	r0, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f007 fb9b 	bl	80087ce <lcd_print_char>
				HAL_Delay(30);
 8001098:	201e      	movs	r0, #30
 800109a:	f008 f8dd 	bl	8009258 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	7dfa      	ldrb	r2, [r7, #23]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbc9      	blt.n	8001044 <slideText+0x84>
 80010b0:	e000      	b.n	80010b4 <slideText+0xf4>
					break;
 80010b2:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e029      	b.n	8001110 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f7ff ff4b 	bl	8000f58 <checkSlideVal>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dd0b      	ble.n	80010e0 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff ff45 	bl	8000f58 <checkSlideVal>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <slideText+0x188>)
 80010d4:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80010de:	e01f      	b.n	8001120 <slideText+0x160>
				}
				checkEditMode();
 80010e0:	f000 f8b4 	bl	800124c <checkEditMode>
				if(editMode == 1) {
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <slideText+0x18c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	db0a      	blt.n	800110a <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	2220      	movs	r2, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 fb65 	bl	80087ce <lcd_print_char>
			    	HAL_Delay(30);
 8001104:	201e      	movs	r0, #30
 8001106:	f008 f8a7 	bl	8009258 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	3b01      	subs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	7dfa      	ldrb	r2, [r7, #23]
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	429a      	cmp	r2, r3
 800111a:	dacf      	bge.n	80010bc <slideText+0xfc>
 800111c:	e000      	b.n	8001120 <slideText+0x160>
					break;
 800111e:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3301      	adds	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	6a3a      	ldr	r2, [r7, #32]
 800112a:	429a      	cmp	r2, r3
 800112c:	f6ff af6f 	blt.w	800100e <slideText+0x4e>
 8001130:	e000      	b.n	8001134 <slideText+0x174>
				break;
 8001132:	bf00      	nop
	while(mainLoopVal == 1) {
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	2b01      	cmp	r3, #1
 8001138:	f43f af51 	beq.w	8000fde <slideText+0x1e>
			    }
			}
		}
	}
}
 800113c:	e000      	b.n	8001140 <slideText+0x180>
			break;
 800113e:	bf00      	nop
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200010a0 	.word	0x200010a0
 800114c:	20001098 	.word	0x20001098

08001150 <printCredentials>:

void printCredentials(int type) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10f      	bne.n	800117e <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 800115e:	4a33      	ldr	r2, [pc, #204]	@ (800122c <printCredentials+0xdc>)
 8001160:	2101      	movs	r1, #1
 8001162:	2001      	movs	r0, #1
 8001164:	f007 fb1e 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, machineID);
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <printCredentials+0xe0>)
 800116a:	2101      	movs	r1, #1
 800116c:	2002      	movs	r0, #2
 800116e:	f007 fb19 	bl	80087a4 <lcd_print>
		lcd_print(2, 13, "    ");
 8001172:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <printCredentials+0xe4>)
 8001174:	210d      	movs	r1, #13
 8001176:	2002      	movs	r0, #2
 8001178:	f007 fb14 	bl	80087a4 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 800117c:	e051      	b.n	8001222 <printCredentials+0xd2>
	} else if(type == 2) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d127      	bne.n	80011d4 <printCredentials+0x84>
		int ssidLength = strlen(wifiSSID);
 8001184:	482c      	ldr	r0, [pc, #176]	@ (8001238 <printCredentials+0xe8>)
 8001186:	f7ff f84d 	bl	8000224 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <printCredentials+0xec>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fb06 	bl	80087a4 <lcd_print>
		if(ssidLength == 16) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d105      	bne.n	80011aa <printCredentials+0x5a>
			lcd_print(2, 1, wifiSSID);
 800119e:	4a26      	ldr	r2, [pc, #152]	@ (8001238 <printCredentials+0xe8>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	2002      	movs	r0, #2
 80011a4:	f007 fafe 	bl	80087a4 <lcd_print>
}
 80011a8:	e03b      	b.n	8001222 <printCredentials+0xd2>
		} else if(ssidLength < 16) {
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	dc0a      	bgt.n	80011c6 <printCredentials+0x76>
			lcd_print(2, 1, "                ");
 80011b0:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <printCredentials+0xf0>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	2002      	movs	r0, #2
 80011b6:	f007 faf5 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80011ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001238 <printCredentials+0xe8>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2002      	movs	r0, #2
 80011c0:	f007 faf0 	bl	80087a4 <lcd_print>
}
 80011c4:	e02d      	b.n	8001222 <printCredentials+0xd2>
			slideText(wifiSSID, 1, 2, 0);
 80011c6:	2300      	movs	r3, #0
 80011c8:	2202      	movs	r2, #2
 80011ca:	2101      	movs	r1, #1
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <printCredentials+0xe8>)
 80011ce:	f7ff fef7 	bl	8000fc0 <slideText>
}
 80011d2:	e026      	b.n	8001222 <printCredentials+0xd2>
		int passLength = strlen(wifiPass);
 80011d4:	481b      	ldr	r0, [pc, #108]	@ (8001244 <printCredentials+0xf4>)
 80011d6:	f7ff f825 	bl	8000224 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 80011de:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <printCredentials+0xf8>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2001      	movs	r0, #1
 80011e4:	f007 fade 	bl	80087a4 <lcd_print>
		if(passLength == 16) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d105      	bne.n	80011fa <printCredentials+0xaa>
			lcd_print(2, 1, wifiPass);
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <printCredentials+0xf4>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2002      	movs	r0, #2
 80011f4:	f007 fad6 	bl	80087a4 <lcd_print>
}
 80011f8:	e013      	b.n	8001222 <printCredentials+0xd2>
		} else if(passLength < 16) {
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	dc0a      	bgt.n	8001216 <printCredentials+0xc6>
			lcd_print(2, 1, "                ");
 8001200:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <printCredentials+0xf0>)
 8001202:	2101      	movs	r1, #1
 8001204:	2002      	movs	r0, #2
 8001206:	f007 facd 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <printCredentials+0xf4>)
 800120c:	2101      	movs	r1, #1
 800120e:	2002      	movs	r0, #2
 8001210:	f007 fac8 	bl	80087a4 <lcd_print>
}
 8001214:	e005      	b.n	8001222 <printCredentials+0xd2>
			slideText(wifiPass, 1, 2, 1);
 8001216:	2301      	movs	r3, #1
 8001218:	2202      	movs	r2, #2
 800121a:	2101      	movs	r1, #1
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <printCredentials+0xf4>)
 800121e:	f7ff fecf 	bl	8000fc0 <slideText>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200018a4 	.word	0x200018a4
 8001230:	20001040 	.word	0x20001040
 8001234:	0800daf8 	.word	0x0800daf8
 8001238:	2000104c 	.word	0x2000104c
 800123c:	0800db00 	.word	0x0800db00
 8001240:	0800db14 	.word	0x0800db14
 8001244:	20001060 	.word	0x20001060
 8001248:	0800db28 	.word	0x0800db28

0800124c <checkEditMode>:

void checkEditMode(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 8001250:	2102      	movs	r1, #2
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <checkEditMode+0x2c>)
 8001254:	f008 fdd0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d109      	bne.n	8001272 <checkEditMode+0x26>
 800125e:	2104      	movs	r1, #4
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <checkEditMode+0x2c>)
 8001262:	f008 fdc9 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d102      	bne.n	8001272 <checkEditMode+0x26>
		editMode = 1;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <checkEditMode+0x30>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
	}
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010800 	.word	0x40010800
 800127c:	20001098 	.word	0x20001098

08001280 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001284:	f3bf 8f4f 	dsb	sy
}
 8001288:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <__NVIC_SystemReset+0x24>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001292:	4904      	ldr	r1, [pc, #16]	@ (80012a4 <__NVIC_SystemReset+0x24>)
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <__NVIC_SystemReset+0x28>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800129a:	f3bf 8f4f 	dsb	sy
}
 800129e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <__NVIC_SystemReset+0x20>
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	05fa0004 	.word	0x05fa0004

080012ac <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012b2:	2101      	movs	r1, #1
 80012b4:	4890      	ldr	r0, [pc, #576]	@ (80014f8 <menu+0x24c>)
 80012b6:	f008 fd9f 	bl	8009df8 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f040 808e 	bne.w	80013de <menu+0x132>
 80012c2:	4b8e      	ldr	r3, [pc, #568]	@ (80014fc <menu+0x250>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8086 	beq.w	80013de <menu+0x132>
		menuSayac = menuSayac+1;
 80012d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001500 <menu+0x254>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b89      	ldr	r3, [pc, #548]	@ (8001500 <menu+0x254>)
 80012dc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012de:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <menu+0x254>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b24      	cmp	r3, #36	@ 0x24
 80012e4:	d102      	bne.n	80012ec <menu+0x40>
			menuSayac = 1;
 80012e6:	4b86      	ldr	r3, [pc, #536]	@ (8001500 <menu+0x254>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012ec:	4b84      	ldr	r3, [pc, #528]	@ (8001500 <menu+0x254>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d106      	bne.n	8001302 <menu+0x56>
 80012f4:	4b83      	ldr	r3, [pc, #524]	@ (8001504 <menu+0x258>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <menu+0x56>
			menuSayac = 21;
 80012fc:	4b80      	ldr	r3, [pc, #512]	@ (8001500 <menu+0x254>)
 80012fe:	2215      	movs	r2, #21
 8001300:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001302:	4b7f      	ldr	r3, [pc, #508]	@ (8001500 <menu+0x254>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b08      	cmp	r3, #8
 8001308:	d106      	bne.n	8001318 <menu+0x6c>
 800130a:	4b7f      	ldr	r3, [pc, #508]	@ (8001508 <menu+0x25c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <menu+0x6c>
			menuSayac = 16;
 8001312:	4b7b      	ldr	r3, [pc, #492]	@ (8001500 <menu+0x254>)
 8001314:	2210      	movs	r2, #16
 8001316:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001318:	4b79      	ldr	r3, [pc, #484]	@ (8001500 <menu+0x254>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b0d      	cmp	r3, #13
 800131e:	d106      	bne.n	800132e <menu+0x82>
 8001320:	4b79      	ldr	r3, [pc, #484]	@ (8001508 <menu+0x25c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <menu+0x82>
			menuSayac = 16;
 8001328:	4b75      	ldr	r3, [pc, #468]	@ (8001500 <menu+0x254>)
 800132a:	2210      	movs	r2, #16
 800132c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800132e:	4b74      	ldr	r3, [pc, #464]	@ (8001500 <menu+0x254>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b09      	cmp	r3, #9
 8001334:	d106      	bne.n	8001344 <menu+0x98>
 8001336:	4b74      	ldr	r3, [pc, #464]	@ (8001508 <menu+0x25c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d102      	bne.n	8001344 <menu+0x98>
			menuSayac = 13;
 800133e:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <menu+0x254>)
 8001340:	220d      	movs	r2, #13
 8001342:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001344:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <menu+0x254>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d10a      	bne.n	8001362 <menu+0xb6>
 800134c:	4b6f      	ldr	r3, [pc, #444]	@ (800150c <menu+0x260>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d003      	beq.n	800135c <menu+0xb0>
 8001354:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <menu+0x260>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d102      	bne.n	8001362 <menu+0xb6>
			menuSayac = 11;
 800135c:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <menu+0x254>)
 800135e:	220b      	movs	r2, #11
 8001360:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <menu+0x254>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d10e      	bne.n	8001388 <menu+0xdc>
 800136a:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <menu+0x264>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <menu+0xce>
 8001372:	4b67      	ldr	r3, [pc, #412]	@ (8001510 <menu+0x264>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d106      	bne.n	8001388 <menu+0xdc>
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <menu+0x25c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <menu+0xdc>
			menuSayac = 16;
 8001382:	4b5f      	ldr	r3, [pc, #380]	@ (8001500 <menu+0x254>)
 8001384:	2210      	movs	r2, #16
 8001386:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001388:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <menu+0x254>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d10e      	bne.n	80013ae <menu+0x102>
 8001390:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <menu+0x264>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d003      	beq.n	80013a0 <menu+0xf4>
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <menu+0x264>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d106      	bne.n	80013ae <menu+0x102>
 80013a0:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <menu+0x25c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d102      	bne.n	80013ae <menu+0x102>
			menuSayac = 13;
 80013a8:	4b55      	ldr	r3, [pc, #340]	@ (8001500 <menu+0x254>)
 80013aa:	220d      	movs	r2, #13
 80013ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013ae:	4b54      	ldr	r3, [pc, #336]	@ (8001500 <menu+0x254>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d106      	bne.n	80013c4 <menu+0x118>
 80013b6:	4b57      	ldr	r3, [pc, #348]	@ (8001514 <menu+0x268>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <menu+0x118>
			menuSayac = 16;
 80013be:	4b50      	ldr	r3, [pc, #320]	@ (8001500 <menu+0x254>)
 80013c0:	2210      	movs	r2, #16
 80013c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001500 <menu+0x254>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b18      	cmp	r3, #24
 80013ca:	d106      	bne.n	80013da <menu+0x12e>
 80013cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001504 <menu+0x258>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <menu+0x12e>
			menuSayac = 26;
 80013d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001500 <menu+0x254>)
 80013d6:	221a      	movs	r2, #26
 80013d8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013da:	f002 fc8b 	bl	8003cf4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013de:	2108      	movs	r1, #8
 80013e0:	484d      	ldr	r0, [pc, #308]	@ (8001518 <menu+0x26c>)
 80013e2:	f008 fd09 	bl	8009df8 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d175      	bne.n	80014d8 <menu+0x22c>
 80013ec:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <menu+0x250>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d06e      	beq.n	80014d8 <menu+0x22c>
		if (menuSayac <= 1) {
 80013fa:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <menu+0x254>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d802      	bhi.n	8001408 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001402:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <menu+0x254>)
 8001404:	2224      	movs	r2, #36	@ 0x24
 8001406:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001408:	4b3d      	ldr	r3, [pc, #244]	@ (8001500 <menu+0x254>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <menu+0x254>)
 8001412:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <menu+0x254>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b14      	cmp	r3, #20
 800141a:	d106      	bne.n	800142a <menu+0x17e>
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <menu+0x258>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <menu+0x17e>
			menuSayac = 17;
 8001424:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <menu+0x254>)
 8001426:	2211      	movs	r2, #17
 8001428:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800142a:	4b35      	ldr	r3, [pc, #212]	@ (8001500 <menu+0x254>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	d106      	bne.n	8001440 <menu+0x194>
 8001432:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <menu+0x25c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <menu+0x194>
			menuSayac = 7;
 800143a:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <menu+0x254>)
 800143c:	2207      	movs	r2, #7
 800143e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001440:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <menu+0x254>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d106      	bne.n	8001456 <menu+0x1aa>
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <menu+0x25c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <menu+0x1aa>
			menuSayac = 12;
 8001450:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <menu+0x254>)
 8001452:	220c      	movs	r2, #12
 8001454:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001456:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <menu+0x254>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d106      	bne.n	800146c <menu+0x1c0>
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <menu+0x25c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d102      	bne.n	800146c <menu+0x1c0>
			menuSayac = 8;
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <menu+0x254>)
 8001468:	2208      	movs	r2, #8
 800146a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <menu+0x254>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b0a      	cmp	r3, #10
 8001472:	d10a      	bne.n	800148a <menu+0x1de>
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <menu+0x260>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d003      	beq.n	8001484 <menu+0x1d8>
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <menu+0x260>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d102      	bne.n	800148a <menu+0x1de>
			menuSayac = 9;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <menu+0x254>)
 8001486:	2209      	movs	r2, #9
 8001488:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <menu+0x254>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d10a      	bne.n	80014a8 <menu+0x1fc>
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <menu+0x264>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d003      	beq.n	80014a2 <menu+0x1f6>
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <menu+0x264>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d102      	bne.n	80014a8 <menu+0x1fc>
			menuSayac = 11;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <menu+0x254>)
 80014a4:	220b      	movs	r2, #11
 80014a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <menu+0x254>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d106      	bne.n	80014be <menu+0x212>
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <menu+0x268>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d102      	bne.n	80014be <menu+0x212>
			menuSayac = 14;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <menu+0x254>)
 80014ba:	220e      	movs	r2, #14
 80014bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <menu+0x254>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b19      	cmp	r3, #25
 80014c4:	d106      	bne.n	80014d4 <menu+0x228>
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <menu+0x258>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <menu+0x228>
			menuSayac = 23;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <menu+0x254>)
 80014d0:	2217      	movs	r2, #23
 80014d2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014d4:	f002 fc0e 	bl	8003cf4 <bekle>
	}

	if (menuSayac == 0) {
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <menu+0x254>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d121      	bne.n	8001524 <menu+0x278>
		lcd_print(1, 1, menuyeGirildiText);
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <menu+0x270>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2001      	movs	r0, #1
 80014e6:	f007 f95d 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80014ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <menu+0x274>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f007 f958 	bl	80087a4 <lcd_print>
 80014f4:	e016      	b.n	8001524 <menu+0x278>
 80014f6:	bf00      	nop
 80014f8:	40010800 	.word	0x40010800
 80014fc:	200010cf 	.word	0x200010cf
 8001500:	200010a0 	.word	0x200010a0
 8001504:	200010af 	.word	0x200010af
 8001508:	200010a8 	.word	0x200010a8
 800150c:	200010a9 	.word	0x200010a9
 8001510:	200010aa 	.word	0x200010aa
 8001514:	200010ab 	.word	0x200010ab
 8001518:	40011000 	.word	0x40011000
 800151c:	20001200 	.word	0x20001200
 8001520:	20001214 	.word	0x20001214
	}

	if (menuSayac == 1) {
 8001524:	4bb0      	ldr	r3, [pc, #704]	@ (80017e8 <menu+0x53c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 81ef 	bne.w	800190c <menu+0x660>
		lcd_print(1, 1, hataKayitListText);
 800152e:	4aaf      	ldr	r2, [pc, #700]	@ (80017ec <menu+0x540>)
 8001530:	2101      	movs	r1, #1
 8001532:	2001      	movs	r0, #1
 8001534:	f007 f936 	bl	80087a4 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001538:	4bad      	ldr	r3, [pc, #692]	@ (80017f0 <menu+0x544>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d115      	bne.n	800156c <menu+0x2c0>
			lcd_print(2, 1, birHataKoduText);
 8001540:	4aac      	ldr	r2, [pc, #688]	@ (80017f4 <menu+0x548>)
 8001542:	2101      	movs	r1, #1
 8001544:	2002      	movs	r0, #2
 8001546:	f007 f92d 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "   ");
 800154a:	4aab      	ldr	r2, [pc, #684]	@ (80017f8 <menu+0x54c>)
 800154c:	210f      	movs	r1, #15
 800154e:	2002      	movs	r0, #2
 8001550:	f007 f928 	bl	80087a4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001554:	4ba9      	ldr	r3, [pc, #676]	@ (80017fc <menu+0x550>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	220a      	movs	r2, #10
 800155a:	49a9      	ldr	r1, [pc, #676]	@ (8001800 <menu+0x554>)
 800155c:	4618      	mov	r0, r3
 800155e:	f00b fc77 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 8001562:	4aa7      	ldr	r2, [pc, #668]	@ (8001800 <menu+0x554>)
 8001564:	210e      	movs	r1, #14
 8001566:	2002      	movs	r0, #2
 8001568:	f007 f91c 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800156c:	4ba0      	ldr	r3, [pc, #640]	@ (80017f0 <menu+0x544>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d115      	bne.n	80015a0 <menu+0x2f4>
			lcd_print(2, 1, ikiHataKoduText);
 8001574:	4aa3      	ldr	r2, [pc, #652]	@ (8001804 <menu+0x558>)
 8001576:	2101      	movs	r1, #1
 8001578:	2002      	movs	r0, #2
 800157a:	f007 f913 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 800157e:	4aa2      	ldr	r2, [pc, #648]	@ (8001808 <menu+0x55c>)
 8001580:	210f      	movs	r1, #15
 8001582:	2002      	movs	r0, #2
 8001584:	f007 f90e 	bl	80087a4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001588:	4ba0      	ldr	r3, [pc, #640]	@ (800180c <menu+0x560>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	220a      	movs	r2, #10
 800158e:	499c      	ldr	r1, [pc, #624]	@ (8001800 <menu+0x554>)
 8001590:	4618      	mov	r0, r3
 8001592:	f00b fc5d 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 8001596:	4a9a      	ldr	r2, [pc, #616]	@ (8001800 <menu+0x554>)
 8001598:	210e      	movs	r1, #14
 800159a:	2002      	movs	r0, #2
 800159c:	f007 f902 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015a0:	4b93      	ldr	r3, [pc, #588]	@ (80017f0 <menu+0x544>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d115      	bne.n	80015d4 <menu+0x328>
			lcd_print(2, 1, ucHataKoduText);
 80015a8:	4a99      	ldr	r2, [pc, #612]	@ (8001810 <menu+0x564>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	2002      	movs	r0, #2
 80015ae:	f007 f8f9 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 80015b2:	4a95      	ldr	r2, [pc, #596]	@ (8001808 <menu+0x55c>)
 80015b4:	210f      	movs	r1, #15
 80015b6:	2002      	movs	r0, #2
 80015b8:	f007 f8f4 	bl	80087a4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015bc:	4b95      	ldr	r3, [pc, #596]	@ (8001814 <menu+0x568>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	220a      	movs	r2, #10
 80015c2:	498f      	ldr	r1, [pc, #572]	@ (8001800 <menu+0x554>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00b fc43 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 80015ca:	4a8d      	ldr	r2, [pc, #564]	@ (8001800 <menu+0x554>)
 80015cc:	210e      	movs	r1, #14
 80015ce:	2002      	movs	r0, #2
 80015d0:	f007 f8e8 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015d4:	4b86      	ldr	r3, [pc, #536]	@ (80017f0 <menu+0x544>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d115      	bne.n	8001608 <menu+0x35c>
			lcd_print(2, 1, dortHataKoduText);
 80015dc:	4a8e      	ldr	r2, [pc, #568]	@ (8001818 <menu+0x56c>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f007 f8df 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 80015e6:	4a88      	ldr	r2, [pc, #544]	@ (8001808 <menu+0x55c>)
 80015e8:	210f      	movs	r1, #15
 80015ea:	2002      	movs	r0, #2
 80015ec:	f007 f8da 	bl	80087a4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80015f0:	4b8a      	ldr	r3, [pc, #552]	@ (800181c <menu+0x570>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	220a      	movs	r2, #10
 80015f6:	4982      	ldr	r1, [pc, #520]	@ (8001800 <menu+0x554>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00b fc29 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 80015fe:	4a80      	ldr	r2, [pc, #512]	@ (8001800 <menu+0x554>)
 8001600:	210e      	movs	r1, #14
 8001602:	2002      	movs	r0, #2
 8001604:	f007 f8ce 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001608:	4b79      	ldr	r3, [pc, #484]	@ (80017f0 <menu+0x544>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d115      	bne.n	800163c <menu+0x390>
			lcd_print(2, 1, besHataKoduText);
 8001610:	4a83      	ldr	r2, [pc, #524]	@ (8001820 <menu+0x574>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f007 f8c5 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 800161a:	4a7b      	ldr	r2, [pc, #492]	@ (8001808 <menu+0x55c>)
 800161c:	210f      	movs	r1, #15
 800161e:	2002      	movs	r0, #2
 8001620:	f007 f8c0 	bl	80087a4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001624:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <menu+0x578>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	220a      	movs	r2, #10
 800162a:	4975      	ldr	r1, [pc, #468]	@ (8001800 <menu+0x554>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00b fc0f 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 8001632:	4a73      	ldr	r2, [pc, #460]	@ (8001800 <menu+0x554>)
 8001634:	210e      	movs	r1, #14
 8001636:	2002      	movs	r0, #2
 8001638:	f007 f8b4 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800163c:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <menu+0x544>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d115      	bne.n	8001670 <menu+0x3c4>
			lcd_print(2, 1, altiHataKoduText);
 8001644:	4a78      	ldr	r2, [pc, #480]	@ (8001828 <menu+0x57c>)
 8001646:	2101      	movs	r1, #1
 8001648:	2002      	movs	r0, #2
 800164a:	f007 f8ab 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 800164e:	4a6e      	ldr	r2, [pc, #440]	@ (8001808 <menu+0x55c>)
 8001650:	210f      	movs	r1, #15
 8001652:	2002      	movs	r0, #2
 8001654:	f007 f8a6 	bl	80087a4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001658:	4b74      	ldr	r3, [pc, #464]	@ (800182c <menu+0x580>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	220a      	movs	r2, #10
 800165e:	4968      	ldr	r1, [pc, #416]	@ (8001800 <menu+0x554>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fbf5 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 8001666:	4a66      	ldr	r2, [pc, #408]	@ (8001800 <menu+0x554>)
 8001668:	210e      	movs	r1, #14
 800166a:	2002      	movs	r0, #2
 800166c:	f007 f89a 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001670:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <menu+0x544>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b06      	cmp	r3, #6
 8001676:	d115      	bne.n	80016a4 <menu+0x3f8>
			lcd_print(2, 1, yediHataKoduText);
 8001678:	4a6d      	ldr	r2, [pc, #436]	@ (8001830 <menu+0x584>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f007 f891 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 8001682:	4a61      	ldr	r2, [pc, #388]	@ (8001808 <menu+0x55c>)
 8001684:	210f      	movs	r1, #15
 8001686:	2002      	movs	r0, #2
 8001688:	f007 f88c 	bl	80087a4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800168c:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <menu+0x588>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	220a      	movs	r2, #10
 8001692:	495b      	ldr	r1, [pc, #364]	@ (8001800 <menu+0x554>)
 8001694:	4618      	mov	r0, r3
 8001696:	f00b fbdb 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 800169a:	4a59      	ldr	r2, [pc, #356]	@ (8001800 <menu+0x554>)
 800169c:	210e      	movs	r1, #14
 800169e:	2002      	movs	r0, #2
 80016a0:	f007 f880 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80016a4:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <menu+0x544>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d115      	bne.n	80016d8 <menu+0x42c>
			lcd_print(2, 1, sekizHataKoduText);
 80016ac:	4a62      	ldr	r2, [pc, #392]	@ (8001838 <menu+0x58c>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	2002      	movs	r0, #2
 80016b2:	f007 f877 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 80016b6:	4a54      	ldr	r2, [pc, #336]	@ (8001808 <menu+0x55c>)
 80016b8:	210f      	movs	r1, #15
 80016ba:	2002      	movs	r0, #2
 80016bc:	f007 f872 	bl	80087a4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016c0:	4b5e      	ldr	r3, [pc, #376]	@ (800183c <menu+0x590>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	220a      	movs	r2, #10
 80016c6:	494e      	ldr	r1, [pc, #312]	@ (8001800 <menu+0x554>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b fbc1 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 80016ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001800 <menu+0x554>)
 80016d0:	210e      	movs	r1, #14
 80016d2:	2002      	movs	r0, #2
 80016d4:	f007 f866 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <menu+0x544>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d115      	bne.n	800170c <menu+0x460>
			lcd_print(2, 1, dokuzHataKoduText);
 80016e0:	4a57      	ldr	r2, [pc, #348]	@ (8001840 <menu+0x594>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f007 f85d 	bl	80087a4 <lcd_print>
			lcd_print(2, 15, "  ");
 80016ea:	4a47      	ldr	r2, [pc, #284]	@ (8001808 <menu+0x55c>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f007 f858 	bl	80087a4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80016f4:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <menu+0x598>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	4941      	ldr	r1, [pc, #260]	@ (8001800 <menu+0x554>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00b fba7 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <menu+0x554>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f007 f84c 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <menu+0x544>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d115      	bne.n	8001740 <menu+0x494>
			lcd_print(2, 1, onHataKoduText);
 8001714:	4a4c      	ldr	r2, [pc, #304]	@ (8001848 <menu+0x59c>)
 8001716:	2101      	movs	r1, #1
 8001718:	2002      	movs	r0, #2
 800171a:	f007 f843 	bl	80087a4 <lcd_print>
			lcd_print(2, 16, " ");
 800171e:	4a4b      	ldr	r2, [pc, #300]	@ (800184c <menu+0x5a0>)
 8001720:	2110      	movs	r1, #16
 8001722:	2002      	movs	r0, #2
 8001724:	f007 f83e 	bl	80087a4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001728:	4b49      	ldr	r3, [pc, #292]	@ (8001850 <menu+0x5a4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	220a      	movs	r2, #10
 800172e:	4934      	ldr	r1, [pc, #208]	@ (8001800 <menu+0x554>)
 8001730:	4618      	mov	r0, r3
 8001732:	f00b fb8d 	bl	800ce50 <itoa>
			lcd_print(2, 15, snum);
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <menu+0x554>)
 8001738:	210f      	movs	r1, #15
 800173a:	2002      	movs	r0, #2
 800173c:	f007 f832 	bl	80087a4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <menu+0x544>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d104      	bne.n	8001752 <menu+0x4a6>
			lcd_print(2, 1, silmekIcinText);
 8001748:	4a42      	ldr	r2, [pc, #264]	@ (8001854 <menu+0x5a8>)
 800174a:	2101      	movs	r1, #1
 800174c:	2002      	movs	r0, #2
 800174e:	f007 f829 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001752:	2102      	movs	r1, #2
 8001754:	4840      	ldr	r0, [pc, #256]	@ (8001858 <menu+0x5ac>)
 8001756:	f008 fb4f 	bl	8009df8 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d119      	bne.n	8001794 <menu+0x4e8>
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <menu+0x5b0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d012      	beq.n	8001794 <menu+0x4e8>
 800176e:	4b3c      	ldr	r3, [pc, #240]	@ (8001860 <menu+0x5b4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <menu+0x544>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <menu+0x544>)
 8001780:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <menu+0x544>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d902      	bls.n	8001790 <menu+0x4e4>
				hataGostermeSirasi = 0;
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <menu+0x544>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001790:	f002 fab0 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001794:	2104      	movs	r1, #4
 8001796:	4830      	ldr	r0, [pc, #192]	@ (8001858 <menu+0x5ac>)
 8001798:	f008 fb2e 	bl	8009df8 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d119      	bne.n	80017d6 <menu+0x52a>
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <menu+0x5b0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d012      	beq.n	80017d6 <menu+0x52a>
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <menu+0x5b4>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10e      	bne.n	80017d6 <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <menu+0x544>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <menu+0x544>)
 80017c2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <menu+0x544>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b0b      	cmp	r3, #11
 80017ca:	d902      	bls.n	80017d2 <menu+0x526>
	    		hataGostermeSirasi = 10;
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <menu+0x544>)
 80017ce:	220a      	movs	r2, #10
 80017d0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80017d2:	f002 fa8f 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80017d6:	2108      	movs	r1, #8
 80017d8:	481f      	ldr	r0, [pc, #124]	@ (8001858 <menu+0x5ac>)
 80017da:	f008 fb0d 	bl	8009df8 <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 8093 	bne.w	800190c <menu+0x660>
 80017e6:	e03d      	b.n	8001864 <menu+0x5b8>
 80017e8:	200010a0 	.word	0x200010a0
 80017ec:	20001228 	.word	0x20001228
 80017f0:	200010a2 	.word	0x200010a2
 80017f4:	2000123c 	.word	0x2000123c
 80017f8:	0800db3c 	.word	0x0800db3c
 80017fc:	200010c2 	.word	0x200010c2
 8001800:	20001038 	.word	0x20001038
 8001804:	20001250 	.word	0x20001250
 8001808:	0800db40 	.word	0x0800db40
 800180c:	200010c3 	.word	0x200010c3
 8001810:	20001264 	.word	0x20001264
 8001814:	200010c4 	.word	0x200010c4
 8001818:	20001278 	.word	0x20001278
 800181c:	200010c5 	.word	0x200010c5
 8001820:	2000128c 	.word	0x2000128c
 8001824:	200010c6 	.word	0x200010c6
 8001828:	200012a0 	.word	0x200012a0
 800182c:	200010c7 	.word	0x200010c7
 8001830:	200012b4 	.word	0x200012b4
 8001834:	200010c8 	.word	0x200010c8
 8001838:	200012c8 	.word	0x200012c8
 800183c:	200010c9 	.word	0x200010c9
 8001840:	200012dc 	.word	0x200012dc
 8001844:	200010ca 	.word	0x200010ca
 8001848:	200012f0 	.word	0x200012f0
 800184c:	0800db44 	.word	0x0800db44
 8001850:	200010cb 	.word	0x200010cb
 8001854:	20001304 	.word	0x20001304
 8001858:	40010800 	.word	0x40010800
 800185c:	200010cf 	.word	0x200010cf
 8001860:	200010af 	.word	0x200010af
 8001864:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <menu+0x7b0>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04c      	beq.n	800190c <menu+0x660>
 8001872:	4b7b      	ldr	r3, [pc, #492]	@ (8001a60 <menu+0x7b4>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d148      	bne.n	800190c <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 800187a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <menu+0x7b8>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	4b79      	ldr	r3, [pc, #484]	@ (8001a68 <menu+0x7bc>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001888:	4b78      	ldr	r3, [pc, #480]	@ (8001a6c <menu+0x7c0>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	4b76      	ldr	r3, [pc, #472]	@ (8001a68 <menu+0x7bc>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001896:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <menu+0x7c4>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	4b72      	ldr	r3, [pc, #456]	@ (8001a68 <menu+0x7bc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018a4:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <menu+0x7c8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001a68 <menu+0x7bc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80018b2:	4b71      	ldr	r3, [pc, #452]	@ (8001a78 <menu+0x7cc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a68 <menu+0x7bc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018c0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a7c <menu+0x7d0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <menu+0x7bc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80018ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <menu+0x7d4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	4b64      	ldr	r3, [pc, #400]	@ (8001a68 <menu+0x7bc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80018dc:	4b69      	ldr	r3, [pc, #420]	@ (8001a84 <menu+0x7d8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	4b61      	ldr	r3, [pc, #388]	@ (8001a68 <menu+0x7bc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <menu+0x7dc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <menu+0x7bc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80018f8:	4b64      	ldr	r3, [pc, #400]	@ (8001a8c <menu+0x7e0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001a68 <menu+0x7bc>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <menu+0x7e4>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 800190c:	4b61      	ldr	r3, [pc, #388]	@ (8001a94 <menu+0x7e8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b02      	cmp	r3, #2
 8001912:	f040 808e 	bne.w	8001a32 <menu+0x786>
		lcd_print(1, 1, calismaSekliText);
 8001916:	4a60      	ldr	r2, [pc, #384]	@ (8001a98 <menu+0x7ec>)
 8001918:	2101      	movs	r1, #1
 800191a:	2001      	movs	r0, #1
 800191c:	f006 ff42 	bl	80087a4 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001920:	4b5e      	ldr	r3, [pc, #376]	@ (8001a9c <menu+0x7f0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d003      	beq.n	8001930 <menu+0x684>
 8001928:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <menu+0x7f0>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d104      	bne.n	800193a <menu+0x68e>
			lcd_print(2, 1, devirmeYuruyusText);
 8001930:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa0 <menu+0x7f4>)
 8001932:	2101      	movs	r1, #1
 8001934:	2002      	movs	r0, #2
 8001936:	f006 ff35 	bl	80087a4 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800193a:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa4 <menu+0x7f8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <menu+0x6a8>
 8001942:	4b56      	ldr	r3, [pc, #344]	@ (8001a9c <menu+0x7f0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d104      	bne.n	8001954 <menu+0x6a8>
			lcd_print(2, 1, bastikcaCalisanText);
 800194a:	4a57      	ldr	r2, [pc, #348]	@ (8001aa8 <menu+0x7fc>)
 800194c:	2101      	movs	r1, #1
 800194e:	2002      	movs	r0, #2
 8001950:	f006 ff28 	bl	80087a4 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <menu+0x7f8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <menu+0x6c2>
 800195c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a9c <menu+0x7f0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <menu+0x6c2>
			lcd_print(2, 1, basGonderText);
 8001964:	4a51      	ldr	r2, [pc, #324]	@ (8001aac <menu+0x800>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f006 ff1b 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800196e:	2102      	movs	r1, #2
 8001970:	484f      	ldr	r0, [pc, #316]	@ (8001ab0 <menu+0x804>)
 8001972:	f008 fa41 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d119      	bne.n	80019b0 <menu+0x704>
 800197c:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <menu+0x7b0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d012      	beq.n	80019b0 <menu+0x704>
 800198a:	4b44      	ldr	r3, [pc, #272]	@ (8001a9c <menu+0x7f0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <menu+0x704>
			calismaSekli = calismaSekli + 1;
 8001992:	4b44      	ldr	r3, [pc, #272]	@ (8001aa4 <menu+0x7f8>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b42      	ldr	r3, [pc, #264]	@ (8001aa4 <menu+0x7f8>)
 800199c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <menu+0x7f8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d902      	bls.n	80019ac <menu+0x700>
				calismaSekli = 0;
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <menu+0x7f8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019ac:	f002 f9a2 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019b0:	2104      	movs	r1, #4
 80019b2:	483f      	ldr	r0, [pc, #252]	@ (8001ab0 <menu+0x804>)
 80019b4:	f008 fa20 	bl	8009df8 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d119      	bne.n	80019f2 <menu+0x746>
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <menu+0x7b0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <menu+0x746>
 80019cc:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <menu+0x7f0>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <menu+0x746>
			calismaSekli = calismaSekli - 1;
 80019d4:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <menu+0x7f8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <menu+0x7f8>)
 80019de:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80019e0:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <menu+0x7f8>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <menu+0x742>
	    		calismaSekli = 1;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <menu+0x7f8>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80019ee:	f002 f981 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019f2:	2108      	movs	r1, #8
 80019f4:	482e      	ldr	r0, [pc, #184]	@ (8001ab0 <menu+0x804>)
 80019f6:	f008 f9ff 	bl	8009df8 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d118      	bne.n	8001a32 <menu+0x786>
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <menu+0x7b0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <menu+0x786>
			eepromData[1] = calismaSekli;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <menu+0x7f8>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <menu+0x7bc>)
 8001a14:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <menu+0x7f8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d106      	bne.n	8001a2c <menu+0x780>
				altLimit = 1;
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <menu+0x808>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <menu+0x808>)
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <menu+0x7bc>)
 8001a2a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <menu+0x7e4>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <menu+0x7e8>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	f040 809c 	bne.w	8001b74 <menu+0x8c8>
		lcd_print(1, 1, emniyetCercevesiText);
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <menu+0x80c>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	2001      	movs	r0, #1
 8001a42:	f006 feaf 	bl	80087a4 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <menu+0x810>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d13a      	bne.n	8001ac4 <menu+0x818>
			lcd_print(2, 1, pasifText);
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <menu+0x814>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	2002      	movs	r0, #2
 8001a54:	f006 fea6 	bl	80087a4 <lcd_print>
 8001a58:	e03d      	b.n	8001ad6 <menu+0x82a>
 8001a5a:	bf00      	nop
 8001a5c:	200010cf 	.word	0x200010cf
 8001a60:	200010a2 	.word	0x200010a2
 8001a64:	200010c2 	.word	0x200010c2
 8001a68:	20000fc8 	.word	0x20000fc8
 8001a6c:	200010c3 	.word	0x200010c3
 8001a70:	200010c4 	.word	0x200010c4
 8001a74:	200010c5 	.word	0x200010c5
 8001a78:	200010c6 	.word	0x200010c6
 8001a7c:	200010c7 	.word	0x200010c7
 8001a80:	200010c8 	.word	0x200010c8
 8001a84:	200010c9 	.word	0x200010c9
 8001a88:	200010ca 	.word	0x200010ca
 8001a8c:	200010cb 	.word	0x200010cb
 8001a90:	200010cc 	.word	0x200010cc
 8001a94:	200010a0 	.word	0x200010a0
 8001a98:	20001318 	.word	0x20001318
 8001a9c:	200010af 	.word	0x200010af
 8001aa0:	2000132c 	.word	0x2000132c
 8001aa4:	200010a1 	.word	0x200010a1
 8001aa8:	20001340 	.word	0x20001340
 8001aac:	20001354 	.word	0x20001354
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	200010a6 	.word	0x200010a6
 8001ab8:	20001368 	.word	0x20001368
 8001abc:	200010a4 	.word	0x200010a4
 8001ac0:	2000137c 	.word	0x2000137c
		} else if(emniyetCercevesi == 1) {
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c74 <menu+0x9c8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d104      	bne.n	8001ad6 <menu+0x82a>
			lcd_print(2, 1, ondSafetyTextGN);
 8001acc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c78 <menu+0x9cc>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f006 fe67 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4868      	ldr	r0, [pc, #416]	@ (8001c7c <menu+0x9d0>)
 8001ada:	f008 f98d 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d115      	bne.n	8001b10 <menu+0x864>
 8001ae4:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <menu+0x9d4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00e      	beq.n	8001b10 <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001af2:	4b60      	ldr	r3, [pc, #384]	@ (8001c74 <menu+0x9c8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b5e      	ldr	r3, [pc, #376]	@ (8001c74 <menu+0x9c8>)
 8001afc:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001afe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c74 <menu+0x9c8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d902      	bls.n	8001b0c <menu+0x860>
				emniyetCercevesi = 0;
 8001b06:	4b5b      	ldr	r3, [pc, #364]	@ (8001c74 <menu+0x9c8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b0c:	f002 f8f2 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b10:	2104      	movs	r1, #4
 8001b12:	485a      	ldr	r0, [pc, #360]	@ (8001c7c <menu+0x9d0>)
 8001b14:	f008 f970 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d115      	bne.n	8001b4a <menu+0x89e>
 8001b1e:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <menu+0x9d4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	f083 0301 	eor.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b2c:	4b51      	ldr	r3, [pc, #324]	@ (8001c74 <menu+0x9c8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b4f      	ldr	r3, [pc, #316]	@ (8001c74 <menu+0x9c8>)
 8001b36:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b38:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <menu+0x9c8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <menu+0x89a>
		   		emniyetCercevesi = 1;
 8001b40:	4b4c      	ldr	r3, [pc, #304]	@ (8001c74 <menu+0x9c8>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b46:	f002 f8d5 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	484b      	ldr	r0, [pc, #300]	@ (8001c7c <menu+0x9d0>)
 8001b4e:	f008 f953 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10d      	bne.n	8001b74 <menu+0x8c8>
 8001b58:	4b49      	ldr	r3, [pc, #292]	@ (8001c80 <menu+0x9d4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 8001b66:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <menu+0x9c8>)
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <menu+0x9d8>)
 8001b6c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	@ (8001c88 <menu+0x9dc>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <menu+0x9e0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d166      	bne.n	8001c4a <menu+0x99e>
		lcd_print(1, 1, yavaslamaLimitText);
 8001b7c:	4a44      	ldr	r2, [pc, #272]	@ (8001c90 <menu+0x9e4>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2001      	movs	r0, #1
 8001b82:	f006 fe0f 	bl	80087a4 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001b86:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <menu+0x9e8>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <menu+0x8ee>
			lcd_print(2, 1, pasifText);
 8001b8e:	4a42      	ldr	r2, [pc, #264]	@ (8001c98 <menu+0x9ec>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	2002      	movs	r0, #2
 8001b94:	f006 fe06 	bl	80087a4 <lcd_print>
 8001b98:	e008      	b.n	8001bac <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c94 <menu+0x9e8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d104      	bne.n	8001bac <menu+0x900>
			lcd_print(2, 1, aktifText);
 8001ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8001c9c <menu+0x9f0>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f006 fdfc 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bac:	2102      	movs	r1, #2
 8001bae:	4833      	ldr	r0, [pc, #204]	@ (8001c7c <menu+0x9d0>)
 8001bb0:	f008 f922 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d115      	bne.n	8001be6 <menu+0x93a>
 8001bba:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <menu+0x9d4>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f083 0301 	eor.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001bc8:	4b32      	ldr	r3, [pc, #200]	@ (8001c94 <menu+0x9e8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <menu+0x9e8>)
 8001bd2:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <menu+0x9e8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d902      	bls.n	8001be2 <menu+0x936>
				yavaslamaLimit = 0;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <menu+0x9e8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001be2:	f002 f887 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001be6:	2104      	movs	r1, #4
 8001be8:	4824      	ldr	r0, [pc, #144]	@ (8001c7c <menu+0x9d0>)
 8001bea:	f008 f905 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d115      	bne.n	8001c20 <menu+0x974>
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <menu+0x9d4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00e      	beq.n	8001c20 <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001c02:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <menu+0x9e8>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <menu+0x9e8>)
 8001c0c:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <menu+0x9e8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <menu+0x970>
		   		yavaslamaLimit = 1;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <menu+0x9e8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c1c:	f002 f86a 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c20:	2108      	movs	r1, #8
 8001c22:	4816      	ldr	r0, [pc, #88]	@ (8001c7c <menu+0x9d0>)
 8001c24:	f008 f8e8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10d      	bne.n	8001c4a <menu+0x99e>
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <menu+0x9d4>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <menu+0x9e8>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <menu+0x9d8>)
 8001c42:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001c44:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <menu+0x9dc>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <menu+0x9e0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	f040 80aa 	bne.w	8001da8 <menu+0xafc>
		lcd_print(1, 1, altLimitText);
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <menu+0x9f4>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f006 fda3 	bl	80087a4 <lcd_print>

		if(altLimit == 0) {
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <menu+0x9f8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d120      	bne.n	8001ca8 <menu+0x9fc>
			lcd_print(2, 1, pasifText);
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <menu+0x9ec>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f006 fd9a 	bl	80087a4 <lcd_print>
 8001c70:	e023      	b.n	8001cba <menu+0xa0e>
 8001c72:	bf00      	nop
 8001c74:	200010a4 	.word	0x200010a4
 8001c78:	200000f0 	.word	0x200000f0
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	200010cf 	.word	0x200010cf
 8001c84:	20000fc8 	.word	0x20000fc8
 8001c88:	200010cc 	.word	0x200010cc
 8001c8c:	200010a0 	.word	0x200010a0
 8001c90:	200013a4 	.word	0x200013a4
 8001c94:	200010a5 	.word	0x200010a5
 8001c98:	2000137c 	.word	0x2000137c
 8001c9c:	20001390 	.word	0x20001390
 8001ca0:	200013b8 	.word	0x200013b8
 8001ca4:	200010a6 	.word	0x200010a6
		} else if(altLimit == 1) {
 8001ca8:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <menu+0xc24>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d104      	bne.n	8001cba <menu+0xa0e>
			lcd_print(2, 1, aktifText);
 8001cb0:	4a88      	ldr	r2, [pc, #544]	@ (8001ed4 <menu+0xc28>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f006 fd75 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4886      	ldr	r0, [pc, #536]	@ (8001ed8 <menu+0xc2c>)
 8001cbe:	f008 f89b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d119      	bne.n	8001cfc <menu+0xa50>
 8001cc8:	4b84      	ldr	r3, [pc, #528]	@ (8001edc <menu+0xc30>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <menu+0xa50>
 8001cd6:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <menu+0xc34>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10e      	bne.n	8001cfc <menu+0xa50>
			altLimit = altLimit + 1;
 8001cde:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <menu+0xc24>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed0 <menu+0xc24>)
 8001ce8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001cea:	4b79      	ldr	r3, [pc, #484]	@ (8001ed0 <menu+0xc24>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d902      	bls.n	8001cf8 <menu+0xa4c>
				altLimit = 0;
 8001cf2:	4b77      	ldr	r3, [pc, #476]	@ (8001ed0 <menu+0xc24>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cf8:	f001 fffc 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4876      	ldr	r0, [pc, #472]	@ (8001ed8 <menu+0xc2c>)
 8001d00:	f008 f87a 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d119      	bne.n	8001d3e <menu+0xa92>
 8001d0a:	4b74      	ldr	r3, [pc, #464]	@ (8001edc <menu+0xc30>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <menu+0xa92>
 8001d18:	4b71      	ldr	r3, [pc, #452]	@ (8001ee0 <menu+0xc34>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10e      	bne.n	8001d3e <menu+0xa92>
			altLimit = altLimit - 1;
 8001d20:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed0 <menu+0xc24>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b69      	ldr	r3, [pc, #420]	@ (8001ed0 <menu+0xc24>)
 8001d2a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001d2c:	4b68      	ldr	r3, [pc, #416]	@ (8001ed0 <menu+0xc24>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <menu+0xa8e>
		   		altLimit = 1;
 8001d34:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <menu+0xc24>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d3a:	f001 ffdb 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4865      	ldr	r0, [pc, #404]	@ (8001ed8 <menu+0xc2c>)
 8001d42:	f008 f859 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d12d      	bne.n	8001da8 <menu+0xafc>
 8001d4c:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <menu+0xc30>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d026      	beq.n	8001da8 <menu+0xafc>
			eepromData[5] = altLimit;
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed0 <menu+0xc24>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ee4 <menu+0xc38>)
 8001d60:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001d62:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed0 <menu+0xc24>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d110      	bne.n	8001d8c <menu+0xae0>
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee8 <menu+0xc3c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <menu+0xace>
 8001d72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee8 <menu+0xc3c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d108      	bne.n	8001d8c <menu+0xae0>
				kapiTablaAcKonum = 3;
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee8 <menu+0xc3c>)
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001d80:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <menu+0xc3c>)
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	4b57      	ldr	r3, [pc, #348]	@ (8001ee4 <menu+0xc38>)
 8001d86:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001d8a:	e00a      	b.n	8001da2 <menu+0xaf6>
			} else if(altLimit == 0) {
 8001d8c:	4b50      	ldr	r3, [pc, #320]	@ (8001ed0 <menu+0xc24>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <menu+0xaf6>
				platformSilindirTipi = 0;
 8001d94:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <menu+0xc40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001d9a:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <menu+0xc40>)
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	4b51      	ldr	r3, [pc, #324]	@ (8001ee4 <menu+0xc38>)
 8001da0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001da2:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <menu+0xc44>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001da8:	4b52      	ldr	r3, [pc, #328]	@ (8001ef4 <menu+0xc48>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d166      	bne.n	8001e7e <menu+0xbd2>
		lcd_print(1, 1, basincSalteriText);
 8001db0:	4a51      	ldr	r2, [pc, #324]	@ (8001ef8 <menu+0xc4c>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	2001      	movs	r0, #1
 8001db6:	f006 fcf5 	bl	80087a4 <lcd_print>

		if(basincSalteri == 0) {
 8001dba:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <menu+0xc50>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <menu+0xb22>
			lcd_print(2, 1, pasifText);
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <menu+0xc54>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f006 fcec 	bl	80087a4 <lcd_print>
 8001dcc:	e008      	b.n	8001de0 <menu+0xb34>
		} else if(basincSalteri == 1) {
 8001dce:	4b4b      	ldr	r3, [pc, #300]	@ (8001efc <menu+0xc50>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <menu+0xb34>
			lcd_print(2, 1, aktifText);
 8001dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed4 <menu+0xc28>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f006 fce2 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001de0:	2102      	movs	r1, #2
 8001de2:	483d      	ldr	r0, [pc, #244]	@ (8001ed8 <menu+0xc2c>)
 8001de4:	f008 f808 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d115      	bne.n	8001e1a <menu+0xb6e>
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <menu+0xc30>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <menu+0xc50>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b3d      	ldr	r3, [pc, #244]	@ (8001efc <menu+0xc50>)
 8001e06:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001e08:	4b3c      	ldr	r3, [pc, #240]	@ (8001efc <menu+0xc50>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d902      	bls.n	8001e16 <menu+0xb6a>
				basincSalteri = 0;
 8001e10:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <menu+0xc50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e16:	f001 ff6d 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	482e      	ldr	r0, [pc, #184]	@ (8001ed8 <menu+0xc2c>)
 8001e1e:	f007 ffeb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d115      	bne.n	8001e54 <menu+0xba8>
 8001e28:	4b2c      	ldr	r3, [pc, #176]	@ (8001edc <menu+0xc30>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 8001e36:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <menu+0xc50>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <menu+0xc50>)
 8001e40:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001e42:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <menu+0xc50>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <menu+0xba4>
		   		basincSalteri = 1;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <menu+0xc50>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e50:	f001 ff50 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e54:	2108      	movs	r1, #8
 8001e56:	4820      	ldr	r0, [pc, #128]	@ (8001ed8 <menu+0xc2c>)
 8001e58:	f007 ffce 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10d      	bne.n	8001e7e <menu+0xbd2>
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <menu+0xc30>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <menu+0xbd2>
			eepromData[6] = basincSalteri;
 8001e70:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <menu+0xc50>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <menu+0xc38>)
 8001e76:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <menu+0xc44>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <menu+0xc48>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	f040 80a9 	bne.w	8001fda <menu+0xd2e>
		lcd_print(1, 1, kapiSecimleriText);
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <menu+0xc58>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f006 fc89 	bl	80087a4 <lcd_print>

		if(kapiSecimleri == 0) {
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <menu+0xc5c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 8001e9a:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <menu+0xc54>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f006 fc80 	bl	80087a4 <lcd_print>
 8001ea4:	e03f      	b.n	8001f26 <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <menu+0xc5c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <menu+0xc0e>
			lcd_print(2, 1, katKapisiAktifText);
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <menu+0xc60>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f006 fc76 	bl	80087a4 <lcd_print>
 8001eb8:	e035      	b.n	8001f26 <menu+0xc7a>
		} else if(kapiSecimleri == 2) {
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <menu+0xc5c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d128      	bne.n	8001f14 <menu+0xc68>
			lcd_print(2, 1, tablaKapiAktifText);
 8001ec2:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <menu+0xc64>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f006 fc6c 	bl	80087a4 <lcd_print>
 8001ecc:	e02b      	b.n	8001f26 <menu+0xc7a>
 8001ece:	bf00      	nop
 8001ed0:	200010a6 	.word	0x200010a6
 8001ed4:	20001390 	.word	0x20001390
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	200010cf 	.word	0x200010cf
 8001ee0:	200010a1 	.word	0x200010a1
 8001ee4:	20000fc8 	.word	0x20000fc8
 8001ee8:	200010ad 	.word	0x200010ad
 8001eec:	200010b3 	.word	0x200010b3
 8001ef0:	200010cc 	.word	0x200010cc
 8001ef4:	200010a0 	.word	0x200010a0
 8001ef8:	200013cc 	.word	0x200013cc
 8001efc:	200010a7 	.word	0x200010a7
 8001f00:	2000137c 	.word	0x2000137c
 8001f04:	200013e0 	.word	0x200013e0
 8001f08:	200010a8 	.word	0x200010a8
 8001f0c:	200013f4 	.word	0x200013f4
 8001f10:	20001408 	.word	0x20001408
		} else if(kapiSecimleri == 3) {
 8001f14:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <menu+0xe44>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d104      	bne.n	8001f26 <menu+0xc7a>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001f1c:	4a75      	ldr	r2, [pc, #468]	@ (80020f4 <menu+0xe48>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2002      	movs	r0, #2
 8001f22:	f006 fc3f 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f26:	2102      	movs	r1, #2
 8001f28:	4873      	ldr	r0, [pc, #460]	@ (80020f8 <menu+0xe4c>)
 8001f2a:	f007 ff65 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d115      	bne.n	8001f60 <menu+0xcb4>
 8001f34:	4b71      	ldr	r3, [pc, #452]	@ (80020fc <menu+0xe50>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00e      	beq.n	8001f60 <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 8001f42:	4b6b      	ldr	r3, [pc, #428]	@ (80020f0 <menu+0xe44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b69      	ldr	r3, [pc, #420]	@ (80020f0 <menu+0xe44>)
 8001f4c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <menu+0xe44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d902      	bls.n	8001f5c <menu+0xcb0>
				kapiSecimleri = 0;
 8001f56:	4b66      	ldr	r3, [pc, #408]	@ (80020f0 <menu+0xe44>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f5c:	f001 feca 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f60:	2104      	movs	r1, #4
 8001f62:	4865      	ldr	r0, [pc, #404]	@ (80020f8 <menu+0xe4c>)
 8001f64:	f007 ff48 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d115      	bne.n	8001f9a <menu+0xcee>
 8001f6e:	4b63      	ldr	r3, [pc, #396]	@ (80020fc <menu+0xe50>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80020f0 <menu+0xe44>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <menu+0xe44>)
 8001f86:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001f88:	4b59      	ldr	r3, [pc, #356]	@ (80020f0 <menu+0xe44>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d902      	bls.n	8001f96 <menu+0xcea>
		   		kapiSecimleri = 3;
 8001f90:	4b57      	ldr	r3, [pc, #348]	@ (80020f0 <menu+0xe44>)
 8001f92:	2203      	movs	r2, #3
 8001f94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f96:	f001 fead 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4856      	ldr	r0, [pc, #344]	@ (80020f8 <menu+0xe4c>)
 8001f9e:	f007 ff2b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d118      	bne.n	8001fda <menu+0xd2e>
 8001fa8:	4b54      	ldr	r3, [pc, #336]	@ (80020fc <menu+0xe50>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <menu+0xe44>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b51      	ldr	r3, [pc, #324]	@ (8002100 <menu+0xe54>)
 8001fbc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <menu+0xe44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <menu+0xd28>
				altLimit = 1;
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002104 <menu+0xe58>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <menu+0xe58>)
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002100 <menu+0xe54>)
 8001fd2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002108 <menu+0xe5c>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001fda:	4b4c      	ldr	r3, [pc, #304]	@ (800210c <menu+0xe60>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d167      	bne.n	80020b2 <menu+0xe06>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001fe2:	4a4b      	ldr	r2, [pc, #300]	@ (8002110 <menu+0xe64>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f006 fbdc 	bl	80087a4 <lcd_print>

		if(kapiAcTipi == 0) {
 8001fec:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <menu+0xe68>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <menu+0xd54>
			lcd_print(2, 1, kapiButonuESPText);
 8001ff4:	4a48      	ldr	r2, [pc, #288]	@ (8002118 <menu+0xe6c>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f006 fbd3 	bl	80087a4 <lcd_print>
 8001ffe:	e008      	b.n	8002012 <menu+0xd66>
		} else if(kapiAcTipi == 1){
 8002000:	4b44      	ldr	r3, [pc, #272]	@ (8002114 <menu+0xe68>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <menu+0xd66>
			lcd_print(2, 1, katButonuEXTText);
 8002008:	4a44      	ldr	r2, [pc, #272]	@ (800211c <menu+0xe70>)
 800200a:	2101      	movs	r1, #1
 800200c:	2002      	movs	r0, #2
 800200e:	f006 fbc9 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002012:	2102      	movs	r1, #2
 8002014:	4838      	ldr	r0, [pc, #224]	@ (80020f8 <menu+0xe4c>)
 8002016:	f007 feef 	bl	8009df8 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d115      	bne.n	800204c <menu+0xda0>
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <menu+0xe50>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 800202e:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <menu+0xe68>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <menu+0xe68>)
 8002038:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <menu+0xe68>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d902      	bls.n	8002048 <menu+0xd9c>
				kapiAcTipi = 0;
 8002042:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <menu+0xe68>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002048:	f001 fe54 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800204c:	2104      	movs	r1, #4
 800204e:	482a      	ldr	r0, [pc, #168]	@ (80020f8 <menu+0xe4c>)
 8002050:	f007 fed2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d115      	bne.n	8002086 <menu+0xdda>
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <menu+0xe50>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <menu+0xe68>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <menu+0xe68>)
 8002072:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002074:	4b27      	ldr	r3, [pc, #156]	@ (8002114 <menu+0xe68>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <menu+0xdd6>
		   		kapiAcTipi = 1;
 800207c:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <menu+0xe68>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002082:	f001 fe37 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002086:	2108      	movs	r1, #8
 8002088:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <menu+0xe4c>)
 800208a:	f007 feb5 	bl	8009df8 <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10e      	bne.n	80020b2 <menu+0xe06>
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <menu+0xe50>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <menu+0xe68>)
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <menu+0xe54>)
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80020ac:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <menu+0xe5c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <menu+0xe60>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	f040 8092 	bne.w	80021e0 <menu+0xf34>
		lcd_print(1, 1, birKatKapiTipiText);
 80020bc:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <menu+0xe74>)
 80020be:	2101      	movs	r1, #1
 80020c0:	2001      	movs	r0, #1
 80020c2:	f006 fb6f 	bl	80087a4 <lcd_print>

		if(kapi1Tip == 0) {
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <menu+0xe78>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <menu+0xe2e>
			lcd_print(2, 1, prudhomeTextGN);
 80020ce:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <menu+0xe7c>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f006 fb66 	bl	80087a4 <lcd_print>
 80020d8:	e033      	b.n	8002142 <menu+0xe96>
		} else if(kapi1Tip == 1) {
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <menu+0xe78>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d126      	bne.n	8002130 <menu+0xe84>
			lcd_print(2, 1, butonKontrolluText);
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <menu+0xe80>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	2002      	movs	r0, #2
 80020e8:	f006 fb5c 	bl	80087a4 <lcd_print>
 80020ec:	e029      	b.n	8002142 <menu+0xe96>
 80020ee:	bf00      	nop
 80020f0:	200010a8 	.word	0x200010a8
 80020f4:	2000141c 	.word	0x2000141c
 80020f8:	40010800 	.word	0x40010800
 80020fc:	200010cf 	.word	0x200010cf
 8002100:	20000fc8 	.word	0x20000fc8
 8002104:	200010a6 	.word	0x200010a6
 8002108:	200010cc 	.word	0x200010cc
 800210c:	200010a0 	.word	0x200010a0
 8002110:	20001430 	.word	0x20001430
 8002114:	200010ac 	.word	0x200010ac
 8002118:	20001444 	.word	0x20001444
 800211c:	20001458 	.word	0x20001458
 8002120:	2000146c 	.word	0x2000146c
 8002124:	200010a9 	.word	0x200010a9
 8002128:	20000104 	.word	0x20000104
 800212c:	20001480 	.word	0x20001480
		} else if(kapi1Tip == 2) {
 8002130:	4b73      	ldr	r3, [pc, #460]	@ (8002300 <menu+0x1054>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d104      	bne.n	8002142 <menu+0xe96>
			lcd_print(2, 1, pizzattoTextGN);
 8002138:	4a72      	ldr	r2, [pc, #456]	@ (8002304 <menu+0x1058>)
 800213a:	2101      	movs	r1, #1
 800213c:	2002      	movs	r0, #2
 800213e:	f006 fb31 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002142:	2102      	movs	r1, #2
 8002144:	4870      	ldr	r0, [pc, #448]	@ (8002308 <menu+0x105c>)
 8002146:	f007 fe57 	bl	8009df8 <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d115      	bne.n	800217c <menu+0xed0>
 8002150:	4b6e      	ldr	r3, [pc, #440]	@ (800230c <menu+0x1060>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f083 0301 	eor.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 800215e:	4b68      	ldr	r3, [pc, #416]	@ (8002300 <menu+0x1054>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b66      	ldr	r3, [pc, #408]	@ (8002300 <menu+0x1054>)
 8002168:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800216a:	4b65      	ldr	r3, [pc, #404]	@ (8002300 <menu+0x1054>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <menu+0xecc>
				kapi1Tip = 0;
 8002172:	4b63      	ldr	r3, [pc, #396]	@ (8002300 <menu+0x1054>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002178:	f001 fdbc 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800217c:	2104      	movs	r1, #4
 800217e:	4862      	ldr	r0, [pc, #392]	@ (8002308 <menu+0x105c>)
 8002180:	f007 fe3a 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d115      	bne.n	80021b6 <menu+0xf0a>
 800218a:	4b60      	ldr	r3, [pc, #384]	@ (800230c <menu+0x1060>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00e      	beq.n	80021b6 <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <menu+0x1054>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b57      	ldr	r3, [pc, #348]	@ (8002300 <menu+0x1054>)
 80021a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80021a4:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <menu+0x1054>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d902      	bls.n	80021b2 <menu+0xf06>
		   		kapi1Tip = 2;
 80021ac:	4b54      	ldr	r3, [pc, #336]	@ (8002300 <menu+0x1054>)
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021b2:	f001 fd9f 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b6:	2108      	movs	r1, #8
 80021b8:	4853      	ldr	r0, [pc, #332]	@ (8002308 <menu+0x105c>)
 80021ba:	f007 fe1d 	bl	8009df8 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10d      	bne.n	80021e0 <menu+0xf34>
 80021c4:	4b51      	ldr	r3, [pc, #324]	@ (800230c <menu+0x1060>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <menu+0xf34>
			eepromData[8] = kapi1Tip;
 80021d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <menu+0x1054>)
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002310 <menu+0x1064>)
 80021d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80021da:	4b4e      	ldr	r3, [pc, #312]	@ (8002314 <menu+0x1068>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80021e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002318 <menu+0x106c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b0a      	cmp	r3, #10
 80021e6:	d16c      	bne.n	80022c2 <menu+0x1016>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80021e8:	4a4c      	ldr	r2, [pc, #304]	@ (800231c <menu+0x1070>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	2001      	movs	r0, #1
 80021ee:	f006 fad9 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80021f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002320 <menu+0x1074>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f006 fad4 	bl	80087a4 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80021fc:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <menu+0x1078>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	220a      	movs	r2, #10
 8002202:	4949      	ldr	r1, [pc, #292]	@ (8002328 <menu+0x107c>)
 8002204:	4618      	mov	r0, r3
 8002206:	f00a fe23 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 800220a:	4a47      	ldr	r2, [pc, #284]	@ (8002328 <menu+0x107c>)
 800220c:	2110      	movs	r1, #16
 800220e:	2002      	movs	r0, #2
 8002210:	f006 fac8 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002214:	2102      	movs	r1, #2
 8002216:	483c      	ldr	r0, [pc, #240]	@ (8002308 <menu+0x105c>)
 8002218:	f007 fdee 	bl	8009df8 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d119      	bne.n	8002256 <menu+0xfaa>
 8002222:	4b3a      	ldr	r3, [pc, #232]	@ (800230c <menu+0x1060>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <menu+0xfaa>
 8002230:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <menu+0x1054>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10e      	bne.n	8002256 <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 8002238:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <menu+0x1078>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <menu+0x1078>)
 8002242:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002244:	4b37      	ldr	r3, [pc, #220]	@ (8002324 <menu+0x1078>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d902      	bls.n	8002252 <menu+0xfa6>
				kapi1AcSure = 0;
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <menu+0x1078>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002252:	f001 fd4f 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002256:	2104      	movs	r1, #4
 8002258:	482b      	ldr	r0, [pc, #172]	@ (8002308 <menu+0x105c>)
 800225a:	f007 fdcd 	bl	8009df8 <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d119      	bne.n	8002298 <menu+0xfec>
 8002264:	4b29      	ldr	r3, [pc, #164]	@ (800230c <menu+0x1060>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <menu+0xfec>
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <menu+0x1054>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10e      	bne.n	8002298 <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <menu+0x1078>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <menu+0x1078>)
 8002284:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002286:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <menu+0x1078>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <menu+0xfe8>
		   		kapi1AcSure = 5;
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <menu+0x1078>)
 8002290:	2205      	movs	r2, #5
 8002292:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002294:	f001 fd2e 	bl	8003cf4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002298:	2108      	movs	r1, #8
 800229a:	481b      	ldr	r0, [pc, #108]	@ (8002308 <menu+0x105c>)
 800229c:	f007 fdac 	bl	8009df8 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10d      	bne.n	80022c2 <menu+0x1016>
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <menu+0x1060>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f083 0301 	eor.w	r3, r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <menu+0x1078>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <menu+0x1064>)
 80022ba:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <menu+0x1068>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <menu+0x106c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b0b      	cmp	r3, #11
 80022c8:	f040 8090 	bne.w	80023ec <menu+0x1140>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80022cc:	4a17      	ldr	r2, [pc, #92]	@ (800232c <menu+0x1080>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2001      	movs	r0, #1
 80022d2:	f006 fa67 	bl	80087a4 <lcd_print>

		if(kapi2Tip == 0) {
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <menu+0x1084>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <menu+0x103e>
			lcd_print(2, 1, prudhomeTextGN);
 80022de:	4a15      	ldr	r2, [pc, #84]	@ (8002334 <menu+0x1088>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f006 fa5e 	bl	80087a4 <lcd_print>
 80022e8:	e031      	b.n	800234e <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <menu+0x1084>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d124      	bne.n	800233c <menu+0x1090>
			lcd_print(2, 1, butonKontrolluText);
 80022f2:	4a11      	ldr	r2, [pc, #68]	@ (8002338 <menu+0x108c>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f006 fa54 	bl	80087a4 <lcd_print>
 80022fc:	e027      	b.n	800234e <menu+0x10a2>
 80022fe:	bf00      	nop
 8002300:	200010a9 	.word	0x200010a9
 8002304:	20000118 	.word	0x20000118
 8002308:	40010800 	.word	0x40010800
 800230c:	200010cf 	.word	0x200010cf
 8002310:	20000fc8 	.word	0x20000fc8
 8002314:	200010cc 	.word	0x200010cc
 8002318:	200010a0 	.word	0x200010a0
 800231c:	20001494 	.word	0x20001494
 8002320:	200014a8 	.word	0x200014a8
 8002324:	200010b9 	.word	0x200010b9
 8002328:	20001038 	.word	0x20001038
 800232c:	200014bc 	.word	0x200014bc
 8002330:	200010aa 	.word	0x200010aa
 8002334:	20000104 	.word	0x20000104
 8002338:	20001480 	.word	0x20001480
		} else if(kapi2Tip == 2) {
 800233c:	4b73      	ldr	r3, [pc, #460]	@ (800250c <menu+0x1260>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d104      	bne.n	800234e <menu+0x10a2>
			lcd_print(2, 1, pizzattoTextGN);
 8002344:	4a72      	ldr	r2, [pc, #456]	@ (8002510 <menu+0x1264>)
 8002346:	2101      	movs	r1, #1
 8002348:	2002      	movs	r0, #2
 800234a:	f006 fa2b 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800234e:	2102      	movs	r1, #2
 8002350:	4870      	ldr	r0, [pc, #448]	@ (8002514 <menu+0x1268>)
 8002352:	f007 fd51 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d115      	bne.n	8002388 <menu+0x10dc>
 800235c:	4b6e      	ldr	r3, [pc, #440]	@ (8002518 <menu+0x126c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	f083 0301 	eor.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00e      	beq.n	8002388 <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 800236a:	4b68      	ldr	r3, [pc, #416]	@ (800250c <menu+0x1260>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b66      	ldr	r3, [pc, #408]	@ (800250c <menu+0x1260>)
 8002374:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002376:	4b65      	ldr	r3, [pc, #404]	@ (800250c <menu+0x1260>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <menu+0x10d8>
				kapi2Tip = 0;
 800237e:	4b63      	ldr	r3, [pc, #396]	@ (800250c <menu+0x1260>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002384:	f001 fcb6 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002388:	2104      	movs	r1, #4
 800238a:	4862      	ldr	r0, [pc, #392]	@ (8002514 <menu+0x1268>)
 800238c:	f007 fd34 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d115      	bne.n	80023c2 <menu+0x1116>
 8002396:	4b60      	ldr	r3, [pc, #384]	@ (8002518 <menu+0x126c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00e      	beq.n	80023c2 <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 80023a4:	4b59      	ldr	r3, [pc, #356]	@ (800250c <menu+0x1260>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b57      	ldr	r3, [pc, #348]	@ (800250c <menu+0x1260>)
 80023ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80023b0:	4b56      	ldr	r3, [pc, #344]	@ (800250c <menu+0x1260>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d902      	bls.n	80023be <menu+0x1112>
		   		kapi2Tip = 2;
 80023b8:	4b54      	ldr	r3, [pc, #336]	@ (800250c <menu+0x1260>)
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023be:	f001 fc99 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c2:	2108      	movs	r1, #8
 80023c4:	4853      	ldr	r0, [pc, #332]	@ (8002514 <menu+0x1268>)
 80023c6:	f007 fd17 	bl	8009df8 <HAL_GPIO_ReadPin>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <menu+0x1140>
 80023d0:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <menu+0x126c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	f083 0301 	eor.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <menu+0x1140>
			eepromData[10] = kapi2Tip;
 80023de:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <menu+0x1260>)
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	4b4e      	ldr	r3, [pc, #312]	@ (800251c <menu+0x1270>)
 80023e4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80023e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002520 <menu+0x1274>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80023ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <menu+0x1278>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d16c      	bne.n	80024ce <menu+0x1222>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80023f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002528 <menu+0x127c>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	2001      	movs	r0, #1
 80023fa:	f006 f9d3 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80023fe:	4a4b      	ldr	r2, [pc, #300]	@ (800252c <menu+0x1280>)
 8002400:	2101      	movs	r1, #1
 8002402:	2002      	movs	r0, #2
 8002404:	f006 f9ce 	bl	80087a4 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002408:	4b49      	ldr	r3, [pc, #292]	@ (8002530 <menu+0x1284>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	220a      	movs	r2, #10
 800240e:	4949      	ldr	r1, [pc, #292]	@ (8002534 <menu+0x1288>)
 8002410:	4618      	mov	r0, r3
 8002412:	f00a fd1d 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 8002416:	4a47      	ldr	r2, [pc, #284]	@ (8002534 <menu+0x1288>)
 8002418:	2110      	movs	r1, #16
 800241a:	2002      	movs	r0, #2
 800241c:	f006 f9c2 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002420:	2102      	movs	r1, #2
 8002422:	483c      	ldr	r0, [pc, #240]	@ (8002514 <menu+0x1268>)
 8002424:	f007 fce8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d119      	bne.n	8002462 <menu+0x11b6>
 800242e:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <menu+0x126c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <menu+0x11b6>
 800243c:	4b33      	ldr	r3, [pc, #204]	@ (800250c <menu+0x1260>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8002444:	4b3a      	ldr	r3, [pc, #232]	@ (8002530 <menu+0x1284>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b38      	ldr	r3, [pc, #224]	@ (8002530 <menu+0x1284>)
 800244e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002450:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <menu+0x1284>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d902      	bls.n	800245e <menu+0x11b2>
				kapi2AcSure = 0;
 8002458:	4b35      	ldr	r3, [pc, #212]	@ (8002530 <menu+0x1284>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800245e:	f001 fc49 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002462:	2104      	movs	r1, #4
 8002464:	482b      	ldr	r0, [pc, #172]	@ (8002514 <menu+0x1268>)
 8002466:	f007 fcc7 	bl	8009df8 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b01      	cmp	r3, #1
 800246e:	d119      	bne.n	80024a4 <menu+0x11f8>
 8002470:	4b29      	ldr	r3, [pc, #164]	@ (8002518 <menu+0x126c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <menu+0x11f8>
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <menu+0x1260>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10e      	bne.n	80024a4 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 8002486:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <menu+0x1284>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3b01      	subs	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <menu+0x1284>)
 8002490:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002492:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <menu+0x1284>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <menu+0x11f4>
		   		kapi2AcSure = 5;
 800249a:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <menu+0x1284>)
 800249c:	2205      	movs	r2, #5
 800249e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024a0:	f001 fc28 	bl	8003cf4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024a4:	2108      	movs	r1, #8
 80024a6:	481b      	ldr	r0, [pc, #108]	@ (8002514 <menu+0x1268>)
 80024a8:	f007 fca6 	bl	8009df8 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10d      	bne.n	80024ce <menu+0x1222>
 80024b2:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <menu+0x126c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <menu+0x1284>)
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <menu+0x1270>)
 80024c6:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <menu+0x1274>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <menu+0x1278>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b0d      	cmp	r3, #13
 80024d4:	f040 8090 	bne.w	80025f8 <menu+0x134c>
		lcd_print(1, 1, tablaKapiTipiText);
 80024d8:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <menu+0x128c>)
 80024da:	2101      	movs	r1, #1
 80024dc:	2001      	movs	r0, #1
 80024de:	f006 f961 	bl	80087a4 <lcd_print>

		if(kapitablaTip == 0) {
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <menu+0x1290>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <menu+0x124a>
			lcd_print(2, 1, prudhomeTextGN);
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <menu+0x1294>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	2002      	movs	r0, #2
 80024f0:	f006 f958 	bl	80087a4 <lcd_print>
 80024f4:	e031      	b.n	800255a <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <menu+0x1290>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d124      	bne.n	8002548 <menu+0x129c>
			lcd_print(2, 1, butonKontrolluText);
 80024fe:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <menu+0x1298>)
 8002500:	2101      	movs	r1, #1
 8002502:	2002      	movs	r0, #2
 8002504:	f006 f94e 	bl	80087a4 <lcd_print>
 8002508:	e027      	b.n	800255a <menu+0x12ae>
 800250a:	bf00      	nop
 800250c:	200010aa 	.word	0x200010aa
 8002510:	20000118 	.word	0x20000118
 8002514:	40010800 	.word	0x40010800
 8002518:	200010cf 	.word	0x200010cf
 800251c:	20000fc8 	.word	0x20000fc8
 8002520:	200010cc 	.word	0x200010cc
 8002524:	200010a0 	.word	0x200010a0
 8002528:	200014d0 	.word	0x200014d0
 800252c:	200014a8 	.word	0x200014a8
 8002530:	200010ba 	.word	0x200010ba
 8002534:	20001038 	.word	0x20001038
 8002538:	200014e4 	.word	0x200014e4
 800253c:	200010ab 	.word	0x200010ab
 8002540:	20000104 	.word	0x20000104
 8002544:	20001480 	.word	0x20001480
		} else if(kapitablaTip == 2) {
 8002548:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <menu+0x139c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d104      	bne.n	800255a <menu+0x12ae>
			lcd_print(2, 1, pizzattoTextGN);
 8002550:	4a3e      	ldr	r2, [pc, #248]	@ (800264c <menu+0x13a0>)
 8002552:	2101      	movs	r1, #1
 8002554:	2002      	movs	r0, #2
 8002556:	f006 f925 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800255a:	2102      	movs	r1, #2
 800255c:	483c      	ldr	r0, [pc, #240]	@ (8002650 <menu+0x13a4>)
 800255e:	f007 fc4b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d115      	bne.n	8002594 <menu+0x12e8>
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <menu+0x13a8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 8002576:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <menu+0x139c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <menu+0x139c>)
 8002580:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <menu+0x139c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d902      	bls.n	8002590 <menu+0x12e4>
				kapitablaTip = 0;
 800258a:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <menu+0x139c>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002590:	f001 fbb0 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002594:	2104      	movs	r1, #4
 8002596:	482e      	ldr	r0, [pc, #184]	@ (8002650 <menu+0x13a4>)
 8002598:	f007 fc2e 	bl	8009df8 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d115      	bne.n	80025ce <menu+0x1322>
 80025a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <menu+0x13a8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <menu+0x139c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <menu+0x139c>)
 80025ba:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80025bc:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <menu+0x139c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d902      	bls.n	80025ca <menu+0x131e>
		   		kapitablaTip = 2;
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <menu+0x139c>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ca:	f001 fb93 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ce:	2108      	movs	r1, #8
 80025d0:	481f      	ldr	r0, [pc, #124]	@ (8002650 <menu+0x13a4>)
 80025d2:	f007 fc11 	bl	8009df8 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10d      	bne.n	80025f8 <menu+0x134c>
 80025dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <menu+0x13a8>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <menu+0x134c>
			eepromData[12] = kapitablaTip;
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <menu+0x139c>)
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <menu+0x13ac>)
 80025f0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <menu+0x13b0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <menu+0x13b4>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b0e      	cmp	r3, #14
 80025fe:	f040 80a3 	bne.w	8002748 <menu+0x149c>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <menu+0x13b8>)
 8002604:	2101      	movs	r1, #1
 8002606:	2001      	movs	r0, #1
 8002608:	f006 f8cc 	bl	80087a4 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <menu+0x13bc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <menu+0x1374>
			lcd_print(2, 1, birinciKattaAcText);
 8002614:	4a15      	ldr	r2, [pc, #84]	@ (800266c <menu+0x13c0>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f006 f8c3 	bl	80087a4 <lcd_print>
 800261e:	e034      	b.n	800268a <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <menu+0x13bc>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <menu+0x1388>
			lcd_print(2, 1, ikinciKattaAcText);
 8002628:	4a11      	ldr	r2, [pc, #68]	@ (8002670 <menu+0x13c4>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f006 f8b9 	bl	80087a4 <lcd_print>
 8002632:	e02a      	b.n	800268a <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <menu+0x13bc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11d      	bne.n	8002678 <menu+0x13cc>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <menu+0x13c8>)
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f006 f8af 	bl	80087a4 <lcd_print>
 8002646:	e020      	b.n	800268a <menu+0x13de>
 8002648:	200010ab 	.word	0x200010ab
 800264c:	20000118 	.word	0x20000118
 8002650:	40010800 	.word	0x40010800
 8002654:	200010cf 	.word	0x200010cf
 8002658:	20000fc8 	.word	0x20000fc8
 800265c:	200010cc 	.word	0x200010cc
 8002660:	200010a0 	.word	0x200010a0
 8002664:	200014f8 	.word	0x200014f8
 8002668:	200010ad 	.word	0x200010ad
 800266c:	2000150c 	.word	0x2000150c
 8002670:	20001520 	.word	0x20001520
 8002674:	20001534 	.word	0x20001534
		} else if(kapiTablaAcKonum == 3) {
 8002678:	4b76      	ldr	r3, [pc, #472]	@ (8002854 <menu+0x15a8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d104      	bne.n	800268a <menu+0x13de>
			lcd_print(2, 1, pasifText);
 8002680:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <menu+0x15ac>)
 8002682:	2101      	movs	r1, #1
 8002684:	2002      	movs	r0, #2
 8002686:	f006 f88d 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800268a:	2102      	movs	r1, #2
 800268c:	4873      	ldr	r0, [pc, #460]	@ (800285c <menu+0x15b0>)
 800268e:	f007 fbb3 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d115      	bne.n	80026c4 <menu+0x1418>
 8002698:	4b71      	ldr	r3, [pc, #452]	@ (8002860 <menu+0x15b4>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00e      	beq.n	80026c4 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80026a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002854 <menu+0x15a8>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b69      	ldr	r3, [pc, #420]	@ (8002854 <menu+0x15a8>)
 80026b0:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80026b2:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <menu+0x15a8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <menu+0x1414>
				kapiTablaAcKonum = 0;
 80026ba:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <menu+0x15a8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c0:	f001 fb18 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c4:	2104      	movs	r1, #4
 80026c6:	4865      	ldr	r0, [pc, #404]	@ (800285c <menu+0x15b0>)
 80026c8:	f007 fb96 	bl	8009df8 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d115      	bne.n	80026fe <menu+0x1452>
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <menu+0x15b4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80026e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <menu+0x15a8>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002854 <menu+0x15a8>)
 80026ea:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80026ec:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <menu+0x15a8>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d902      	bls.n	80026fa <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 80026f4:	4b57      	ldr	r3, [pc, #348]	@ (8002854 <menu+0x15a8>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026fa:	f001 fafb 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fe:	2108      	movs	r1, #8
 8002700:	4856      	ldr	r0, [pc, #344]	@ (800285c <menu+0x15b0>)
 8002702:	f007 fb79 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b01      	cmp	r3, #1
 800270a:	d11d      	bne.n	8002748 <menu+0x149c>
 800270c:	4b54      	ldr	r3, [pc, #336]	@ (8002860 <menu+0x15b4>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 800271a:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <menu+0x15a8>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <menu+0x15b8>)
 8002720:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <menu+0x15a8>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <menu+0x1488>
 800272c:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <menu+0x15a8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d106      	bne.n	8002742 <menu+0x1496>
				altLimit = 1;
 8002734:	4b4c      	ldr	r3, [pc, #304]	@ (8002868 <menu+0x15bc>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800273a:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <menu+0x15bc>)
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	4b49      	ldr	r3, [pc, #292]	@ (8002864 <menu+0x15b8>)
 8002740:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002742:	4b4a      	ldr	r3, [pc, #296]	@ (800286c <menu+0x15c0>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002748:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <menu+0x15c4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d16c      	bne.n	800282a <menu+0x157e>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002750:	4a48      	ldr	r2, [pc, #288]	@ (8002874 <menu+0x15c8>)
 8002752:	2101      	movs	r1, #1
 8002754:	2001      	movs	r0, #1
 8002756:	f006 f825 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800275a:	4a47      	ldr	r2, [pc, #284]	@ (8002878 <menu+0x15cc>)
 800275c:	2101      	movs	r1, #1
 800275e:	2002      	movs	r0, #2
 8002760:	f006 f820 	bl	80087a4 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002764:	4b45      	ldr	r3, [pc, #276]	@ (800287c <menu+0x15d0>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	220a      	movs	r2, #10
 800276a:	4945      	ldr	r1, [pc, #276]	@ (8002880 <menu+0x15d4>)
 800276c:	4618      	mov	r0, r3
 800276e:	f00a fb6f 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 8002772:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <menu+0x15d4>)
 8002774:	2110      	movs	r1, #16
 8002776:	2002      	movs	r0, #2
 8002778:	f006 f814 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800277c:	2102      	movs	r1, #2
 800277e:	4837      	ldr	r0, [pc, #220]	@ (800285c <menu+0x15b0>)
 8002780:	f007 fb3a 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d119      	bne.n	80027be <menu+0x1512>
 800278a:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <menu+0x15b4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <menu+0x1512>
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <menu+0x15d8>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10e      	bne.n	80027be <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <menu+0x15d0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b34      	ldr	r3, [pc, #208]	@ (800287c <menu+0x15d0>)
 80027aa:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80027ac:	4b33      	ldr	r3, [pc, #204]	@ (800287c <menu+0x15d0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d902      	bls.n	80027ba <menu+0x150e>
				kapiTablaAcSure = 0;
 80027b4:	4b31      	ldr	r3, [pc, #196]	@ (800287c <menu+0x15d0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027ba:	f001 fa9b 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027be:	2104      	movs	r1, #4
 80027c0:	4826      	ldr	r0, [pc, #152]	@ (800285c <menu+0x15b0>)
 80027c2:	f007 fb19 	bl	8009df8 <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d119      	bne.n	8002800 <menu+0x1554>
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <menu+0x15b4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <menu+0x1554>
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <menu+0x15d8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10e      	bne.n	8002800 <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <menu+0x15d0>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <menu+0x15d0>)
 80027ec:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <menu+0x15d0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <menu+0x1550>
		   		kapiTablaAcSure = 5;
 80027f6:	4b21      	ldr	r3, [pc, #132]	@ (800287c <menu+0x15d0>)
 80027f8:	2205      	movs	r2, #5
 80027fa:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80027fc:	f001 fa7a 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002800:	2108      	movs	r1, #8
 8002802:	4816      	ldr	r0, [pc, #88]	@ (800285c <menu+0x15b0>)
 8002804:	f007 faf8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002808:	4603      	mov	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10d      	bne.n	800282a <menu+0x157e>
 800280e:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <menu+0x15b4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <menu+0x15d0>)
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <menu+0x15b8>)
 8002822:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <menu+0x15c0>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <menu+0x15c4>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b10      	cmp	r3, #16
 8002830:	f040 8086 	bne.w	8002940 <menu+0x1694>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002834:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <menu+0x15dc>)
 8002836:	2101      	movs	r1, #1
 8002838:	2001      	movs	r0, #1
 800283a:	f005 ffb3 	bl	80087a4 <lcd_print>

		if(yukariYavasLimit == 0) {
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <menu+0x15e0>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d124      	bne.n	8002890 <menu+0x15e4>
			lcd_print(2, 1, pasifText);
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <menu+0x15ac>)
 8002848:	2101      	movs	r1, #1
 800284a:	2002      	movs	r0, #2
 800284c:	f005 ffaa 	bl	80087a4 <lcd_print>
 8002850:	e027      	b.n	80028a2 <menu+0x15f6>
 8002852:	bf00      	nop
 8002854:	200010ad 	.word	0x200010ad
 8002858:	2000137c 	.word	0x2000137c
 800285c:	40010800 	.word	0x40010800
 8002860:	200010cf 	.word	0x200010cf
 8002864:	20000fc8 	.word	0x20000fc8
 8002868:	200010a6 	.word	0x200010a6
 800286c:	200010cc 	.word	0x200010cc
 8002870:	200010a0 	.word	0x200010a0
 8002874:	20001548 	.word	0x20001548
 8002878:	200014a8 	.word	0x200014a8
 800287c:	200010bb 	.word	0x200010bb
 8002880:	20001038 	.word	0x20001038
 8002884:	200010ab 	.word	0x200010ab
 8002888:	2000155c 	.word	0x2000155c
 800288c:	200010ae 	.word	0x200010ae
		} else if(yukariYavasLimit == 1) {
 8002890:	4b84      	ldr	r3, [pc, #528]	@ (8002aa4 <menu+0x17f8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d104      	bne.n	80028a2 <menu+0x15f6>
			lcd_print(2, 1, aktifText);
 8002898:	4a83      	ldr	r2, [pc, #524]	@ (8002aa8 <menu+0x17fc>)
 800289a:	2101      	movs	r1, #1
 800289c:	2002      	movs	r0, #2
 800289e:	f005 ff81 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a2:	2102      	movs	r1, #2
 80028a4:	4881      	ldr	r0, [pc, #516]	@ (8002aac <menu+0x1800>)
 80028a6:	f007 faa7 	bl	8009df8 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d115      	bne.n	80028dc <menu+0x1630>
 80028b0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab0 <menu+0x1804>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00e      	beq.n	80028dc <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 80028be:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <menu+0x17f8>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <menu+0x17f8>)
 80028c8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <menu+0x17f8>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d902      	bls.n	80028d8 <menu+0x162c>
				yukariYavasLimit = 0;
 80028d2:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <menu+0x17f8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028d8:	f001 fa0c 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028dc:	2104      	movs	r1, #4
 80028de:	4873      	ldr	r0, [pc, #460]	@ (8002aac <menu+0x1800>)
 80028e0:	f007 fa8a 	bl	8009df8 <HAL_GPIO_ReadPin>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <menu+0x166a>
 80028ea:	4b71      	ldr	r3, [pc, #452]	@ (8002ab0 <menu+0x1804>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <menu+0x17f8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b68      	ldr	r3, [pc, #416]	@ (8002aa4 <menu+0x17f8>)
 8002902:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002904:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <menu+0x17f8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <menu+0x1666>
		   		yukariYavasLimit = 1;
 800290c:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <menu+0x17f8>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002912:	f001 f9ef 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002916:	2108      	movs	r1, #8
 8002918:	4864      	ldr	r0, [pc, #400]	@ (8002aac <menu+0x1800>)
 800291a:	f007 fa6d 	bl	8009df8 <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <menu+0x1694>
 8002924:	4b62      	ldr	r3, [pc, #392]	@ (8002ab0 <menu+0x1804>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f083 0301 	eor.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 8002932:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <menu+0x17f8>)
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab4 <menu+0x1808>)
 8002938:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800293a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <menu+0x180c>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002940:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <menu+0x1810>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b11      	cmp	r3, #17
 8002946:	f040 808b 	bne.w	8002a60 <menu+0x17b4>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800294a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac0 <menu+0x1814>)
 800294c:	2101      	movs	r1, #1
 800294e:	2001      	movs	r0, #1
 8002950:	f005 ff28 	bl	80087a4 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002954:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac4 <menu+0x1818>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d105      	bne.n	8002968 <menu+0x16bc>
			lcd_print(2, 1, devirmeAktifText);
 800295c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac8 <menu+0x181c>)
 800295e:	2101      	movs	r1, #1
 8002960:	2002      	movs	r0, #2
 8002962:	f005 ff1f 	bl	80087a4 <lcd_print>
 8002966:	e012      	b.n	800298e <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 8002968:	4b56      	ldr	r3, [pc, #344]	@ (8002ac4 <menu+0x1818>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <menu+0x16d0>
			lcd_print(2, 1, yuruyusAktifText);
 8002970:	4a56      	ldr	r2, [pc, #344]	@ (8002acc <menu+0x1820>)
 8002972:	2101      	movs	r1, #1
 8002974:	2002      	movs	r0, #2
 8002976:	f005 ff15 	bl	80087a4 <lcd_print>
 800297a:	e008      	b.n	800298e <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 800297c:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <menu+0x1818>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <menu+0x16e2>
			lcd_print(2, 1, pasifText);
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <menu+0x1824>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f005 ff0b 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2102      	movs	r1, #2
 8002990:	4846      	ldr	r0, [pc, #280]	@ (8002aac <menu+0x1800>)
 8002992:	f007 fa31 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <menu+0x171c>
 800299c:	4b44      	ldr	r3, [pc, #272]	@ (8002ab0 <menu+0x1804>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80029aa:	4b46      	ldr	r3, [pc, #280]	@ (8002ac4 <menu+0x1818>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b44      	ldr	r3, [pc, #272]	@ (8002ac4 <menu+0x1818>)
 80029b4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80029b6:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <menu+0x1818>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <menu+0x1818>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c4:	f001 f996 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c8:	2104      	movs	r1, #4
 80029ca:	4838      	ldr	r0, [pc, #224]	@ (8002aac <menu+0x1800>)
 80029cc:	f007 fa14 	bl	8009df8 <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d115      	bne.n	8002a02 <menu+0x1756>
 80029d6:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <menu+0x1804>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80029e4:	4b37      	ldr	r3, [pc, #220]	@ (8002ac4 <menu+0x1818>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <menu+0x1818>)
 80029ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <menu+0x1818>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d902      	bls.n	80029fe <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 80029f8:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <menu+0x1818>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fe:	f001 f979 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a02:	2108      	movs	r1, #8
 8002a04:	4829      	ldr	r0, [pc, #164]	@ (8002aac <menu+0x1800>)
 8002a06:	f007 f9f7 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d127      	bne.n	8002a60 <menu+0x17b4>
 8002a10:	4b27      	ldr	r3, [pc, #156]	@ (8002ab0 <menu+0x1804>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d020      	beq.n	8002a60 <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 8002a1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <menu+0x1818>)
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <menu+0x1808>)
 8002a24:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002a26:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <menu+0x1818>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d003      	beq.n	8002a36 <menu+0x178a>
 8002a2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <menu+0x1818>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <menu+0x1798>
				calismaSekli = 0;
 8002a36:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <menu+0x1828>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <menu+0x1828>)
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <menu+0x1808>)
 8002a42:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002a44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <menu+0x1818>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <menu+0x17ae>
				devirmeSilindirTipi = 1;
 8002a4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <menu+0x182c>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002a52:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <menu+0x182c>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <menu+0x1808>)
 8002a58:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <menu+0x180c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002a60:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <menu+0x1810>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	f040 8097 	bne.w	8002b98 <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <menu+0x1818>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d105      	bne.n	8002a7e <menu+0x17d2>
			lcd_print(1, 1, devirmeYukariText);
 8002a72:	4a1a      	ldr	r2, [pc, #104]	@ (8002adc <menu+0x1830>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	2001      	movs	r0, #1
 8002a78:	f005 fe94 	bl	80087a4 <lcd_print>
 8002a7c:	e008      	b.n	8002a90 <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <menu+0x1818>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d104      	bne.n	8002a90 <menu+0x17e4>
			lcd_print(1, 1, yuruyusIleriText);
 8002a86:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <menu+0x1834>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f005 fe8a 	bl	80087a4 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <menu+0x1838>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d127      	bne.n	8002ae8 <menu+0x183c>
			lcd_print(2, 1, pasifText);
 8002a98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <menu+0x1824>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f005 fe81 	bl	80087a4 <lcd_print>
 8002aa2:	e02a      	b.n	8002afa <menu+0x184e>
 8002aa4:	200010ae 	.word	0x200010ae
 8002aa8:	20001390 	.word	0x20001390
 8002aac:	40010800 	.word	0x40010800
 8002ab0:	200010cf 	.word	0x200010cf
 8002ab4:	20000fc8 	.word	0x20000fc8
 8002ab8:	200010cc 	.word	0x200010cc
 8002abc:	200010a0 	.word	0x200010a0
 8002ac0:	20001570 	.word	0x20001570
 8002ac4:	200010af 	.word	0x200010af
 8002ac8:	20001584 	.word	0x20001584
 8002acc:	20001598 	.word	0x20001598
 8002ad0:	2000137c 	.word	0x2000137c
 8002ad4:	200010a1 	.word	0x200010a1
 8002ad8:	200010b2 	.word	0x200010b2
 8002adc:	200015ac 	.word	0x200015ac
 8002ae0:	200015c0 	.word	0x200015c0
 8002ae4:	200010b0 	.word	0x200010b0
		} else if(devirmeYukariIleriLimit == 1){
 8002ae8:	4b79      	ldr	r3, [pc, #484]	@ (8002cd0 <menu+0x1a24>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d104      	bne.n	8002afa <menu+0x184e>
			lcd_print(2, 1, aktifText);
 8002af0:	4a78      	ldr	r2, [pc, #480]	@ (8002cd4 <menu+0x1a28>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2002      	movs	r0, #2
 8002af6:	f005 fe55 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afa:	2102      	movs	r1, #2
 8002afc:	4876      	ldr	r0, [pc, #472]	@ (8002cd8 <menu+0x1a2c>)
 8002afe:	f007 f97b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d115      	bne.n	8002b34 <menu+0x1888>
 8002b08:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <menu+0x1a30>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002b16:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd0 <menu+0x1a24>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd0 <menu+0x1a24>)
 8002b20:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002b22:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd0 <menu+0x1a24>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d902      	bls.n	8002b30 <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 8002b2a:	4b69      	ldr	r3, [pc, #420]	@ (8002cd0 <menu+0x1a24>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b30:	f001 f8e0 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b34:	2104      	movs	r1, #4
 8002b36:	4868      	ldr	r0, [pc, #416]	@ (8002cd8 <menu+0x1a2c>)
 8002b38:	f007 f95e 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d115      	bne.n	8002b6e <menu+0x18c2>
 8002b42:	4b66      	ldr	r3, [pc, #408]	@ (8002cdc <menu+0x1a30>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002b50:	4b5f      	ldr	r3, [pc, #380]	@ (8002cd0 <menu+0x1a24>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd0 <menu+0x1a24>)
 8002b5a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002cd0 <menu+0x1a24>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 8002b64:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd0 <menu+0x1a24>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6a:	f001 f8c3 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6e:	2108      	movs	r1, #8
 8002b70:	4859      	ldr	r0, [pc, #356]	@ (8002cd8 <menu+0x1a2c>)
 8002b72:	f007 f941 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10d      	bne.n	8002b98 <menu+0x18ec>
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <menu+0x1a30>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f083 0301 	eor.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 8002b8a:	4b51      	ldr	r3, [pc, #324]	@ (8002cd0 <menu+0x1a24>)
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	4b54      	ldr	r3, [pc, #336]	@ (8002ce0 <menu+0x1a34>)
 8002b90:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002b92:	4b54      	ldr	r3, [pc, #336]	@ (8002ce4 <menu+0x1a38>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <menu+0x1a3c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b13      	cmp	r3, #19
 8002b9e:	d174      	bne.n	8002c8a <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 8002ba0:	4b52      	ldr	r3, [pc, #328]	@ (8002cec <menu+0x1a40>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d105      	bne.n	8002bb4 <menu+0x1908>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002ba8:	4a51      	ldr	r2, [pc, #324]	@ (8002cf0 <menu+0x1a44>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	2001      	movs	r0, #1
 8002bae:	f005 fdf9 	bl	80087a4 <lcd_print>
 8002bb2:	e008      	b.n	8002bc6 <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <menu+0x1a40>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d104      	bne.n	8002bc6 <menu+0x191a>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <menu+0x1a48>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f005 fdef 	bl	80087a4 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <menu+0x1a4c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <menu+0x192e>
			lcd_print(2, 1, pasifText);
 8002bce:	4a4b      	ldr	r2, [pc, #300]	@ (8002cfc <menu+0x1a50>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	f005 fde6 	bl	80087a4 <lcd_print>
 8002bd8:	e008      	b.n	8002bec <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002bda:	4b47      	ldr	r3, [pc, #284]	@ (8002cf8 <menu+0x1a4c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d104      	bne.n	8002bec <menu+0x1940>
			lcd_print(2, 1, aktifText);
 8002be2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd4 <menu+0x1a28>)
 8002be4:	2101      	movs	r1, #1
 8002be6:	2002      	movs	r0, #2
 8002be8:	f005 fddc 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bec:	2102      	movs	r1, #2
 8002bee:	483a      	ldr	r0, [pc, #232]	@ (8002cd8 <menu+0x1a2c>)
 8002bf0:	f007 f902 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <menu+0x197a>
 8002bfa:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <menu+0x1a30>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002c08:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <menu+0x1a4c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <menu+0x1a4c>)
 8002c12:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002c14:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <menu+0x1a4c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d902      	bls.n	8002c22 <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <menu+0x1a4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c22:	f001 f867 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c26:	2104      	movs	r1, #4
 8002c28:	482b      	ldr	r0, [pc, #172]	@ (8002cd8 <menu+0x1a2c>)
 8002c2a:	f007 f8e5 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d115      	bne.n	8002c60 <menu+0x19b4>
 8002c34:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <menu+0x1a30>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <menu+0x1a4c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <menu+0x1a4c>)
 8002c4c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <menu+0x1a4c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 8002c56:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <menu+0x1a4c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c5c:	f001 f84a 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c60:	2108      	movs	r1, #8
 8002c62:	481d      	ldr	r0, [pc, #116]	@ (8002cd8 <menu+0x1a2c>)
 8002c64:	f007 f8c8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <menu+0x19de>
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <menu+0x1a30>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <menu+0x1a4c>)
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <menu+0x1a34>)
 8002c82:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002c84:	4b17      	ldr	r3, [pc, #92]	@ (8002ce4 <menu+0x1a38>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002c8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <menu+0x1a3c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b14      	cmp	r3, #20
 8002c90:	f040 809e 	bne.w	8002dd0 <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 8002c94:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <menu+0x1a40>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <menu+0x19fc>
			lcd_print(1, 1, yuruyusSecildiText);
 8002c9c:	4a18      	ldr	r2, [pc, #96]	@ (8002d00 <menu+0x1a54>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f005 fd7f 	bl	80087a4 <lcd_print>
 8002ca6:	e008      	b.n	8002cba <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 8002ca8:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <menu+0x1a40>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d104      	bne.n	8002cba <menu+0x1a0e>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002cb0:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <menu+0x1a58>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f005 fd75 	bl	80087a4 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <menu+0x1a5c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d126      	bne.n	8002d10 <menu+0x1a64>
			lcd_print(2, 1, tekTesirText);
 8002cc2:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <menu+0x1a60>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f005 fd6c 	bl	80087a4 <lcd_print>
 8002ccc:	e029      	b.n	8002d22 <menu+0x1a76>
 8002cce:	bf00      	nop
 8002cd0:	200010b0 	.word	0x200010b0
 8002cd4:	20001390 	.word	0x20001390
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	200010cf 	.word	0x200010cf
 8002ce0:	20000fc8 	.word	0x20000fc8
 8002ce4:	200010cc 	.word	0x200010cc
 8002ce8:	200010a0 	.word	0x200010a0
 8002cec:	200010af 	.word	0x200010af
 8002cf0:	200015d4 	.word	0x200015d4
 8002cf4:	200015e8 	.word	0x200015e8
 8002cf8:	200010b1 	.word	0x200010b1
 8002cfc:	2000137c 	.word	0x2000137c
 8002d00:	200015fc 	.word	0x200015fc
 8002d04:	20001610 	.word	0x20001610
 8002d08:	200010b2 	.word	0x200010b2
 8002d0c:	20001624 	.word	0x20001624
		} else if(devirmeSilindirTipi == 1) {
 8002d10:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <menu+0x1b4c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d104      	bne.n	8002d22 <menu+0x1a76>
			lcd_print(2, 1, ciftTesirText);
 8002d18:	4a38      	ldr	r2, [pc, #224]	@ (8002dfc <menu+0x1b50>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f005 fd41 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d22:	2102      	movs	r1, #2
 8002d24:	4836      	ldr	r0, [pc, #216]	@ (8002e00 <menu+0x1b54>)
 8002d26:	f007 f867 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d119      	bne.n	8002d64 <menu+0x1ab8>
 8002d30:	4b34      	ldr	r3, [pc, #208]	@ (8002e04 <menu+0x1b58>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f083 0301 	eor.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <menu+0x1ab8>
 8002d3e:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <menu+0x1b5c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d10e      	bne.n	8002d64 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	@ (8002df8 <menu+0x1b4c>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <menu+0x1b4c>)
 8002d50:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002d52:	4b29      	ldr	r3, [pc, #164]	@ (8002df8 <menu+0x1b4c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d902      	bls.n	8002d60 <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 8002d5a:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <menu+0x1b4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d60:	f000 ffc8 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d64:	2104      	movs	r1, #4
 8002d66:	4826      	ldr	r0, [pc, #152]	@ (8002e00 <menu+0x1b54>)
 8002d68:	f007 f846 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d119      	bne.n	8002da6 <menu+0x1afa>
 8002d72:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <menu+0x1b58>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f083 0301 	eor.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <menu+0x1afa>
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <menu+0x1b5c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d10e      	bne.n	8002da6 <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <menu+0x1b4c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <menu+0x1b4c>)
 8002d92:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002d94:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <menu+0x1b4c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <menu+0x1b4c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002da2:	f000 ffa7 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da6:	2108      	movs	r1, #8
 8002da8:	4815      	ldr	r0, [pc, #84]	@ (8002e00 <menu+0x1b54>)
 8002daa:	f007 f825 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10d      	bne.n	8002dd0 <menu+0x1b24>
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <menu+0x1b58>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <menu+0x1b4c>)
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <menu+0x1b60>)
 8002dc8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <menu+0x1b64>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002dd0:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <menu+0x1b68>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b15      	cmp	r3, #21
 8002dd6:	f040 8088 	bne.w	8002eea <menu+0x1c3e>
		lcd_print(1, 1, platformSilindirTipiText);
 8002dda:	4a0f      	ldr	r2, [pc, #60]	@ (8002e18 <menu+0x1b6c>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	2001      	movs	r0, #1
 8002de0:	f005 fce0 	bl	80087a4 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002de4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <menu+0x1b70>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11b      	bne.n	8002e24 <menu+0x1b78>
			lcd_print(2, 1, tekTesirText);
 8002dec:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <menu+0x1b74>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f005 fcd7 	bl	80087a4 <lcd_print>
 8002df6:	e01e      	b.n	8002e36 <menu+0x1b8a>
 8002df8:	200010b2 	.word	0x200010b2
 8002dfc:	20001638 	.word	0x20001638
 8002e00:	40010800 	.word	0x40010800
 8002e04:	200010cf 	.word	0x200010cf
 8002e08:	200010af 	.word	0x200010af
 8002e0c:	20000fc8 	.word	0x20000fc8
 8002e10:	200010cc 	.word	0x200010cc
 8002e14:	200010a0 	.word	0x200010a0
 8002e18:	2000164c 	.word	0x2000164c
 8002e1c:	200010b3 	.word	0x200010b3
 8002e20:	20001624 	.word	0x20001624
		} else if(platformSilindirTipi == 1) {
 8002e24:	4ba1      	ldr	r3, [pc, #644]	@ (80030ac <menu+0x1e00>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d104      	bne.n	8002e36 <menu+0x1b8a>
			lcd_print(2, 1, ciftTesirText);
 8002e2c:	4aa0      	ldr	r2, [pc, #640]	@ (80030b0 <menu+0x1e04>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f005 fcb7 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2102      	movs	r1, #2
 8002e38:	489e      	ldr	r0, [pc, #632]	@ (80030b4 <menu+0x1e08>)
 8002e3a:	f006 ffdd 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d115      	bne.n	8002e70 <menu+0x1bc4>
 8002e44:	4b9c      	ldr	r3, [pc, #624]	@ (80030b8 <menu+0x1e0c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002e52:	4b96      	ldr	r3, [pc, #600]	@ (80030ac <menu+0x1e00>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b94      	ldr	r3, [pc, #592]	@ (80030ac <menu+0x1e00>)
 8002e5c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002e5e:	4b93      	ldr	r3, [pc, #588]	@ (80030ac <menu+0x1e00>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d902      	bls.n	8002e6c <menu+0x1bc0>
				platformSilindirTipi = 0;
 8002e66:	4b91      	ldr	r3, [pc, #580]	@ (80030ac <menu+0x1e00>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e6c:	f000 ff42 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e70:	2104      	movs	r1, #4
 8002e72:	4890      	ldr	r0, [pc, #576]	@ (80030b4 <menu+0x1e08>)
 8002e74:	f006 ffc0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d115      	bne.n	8002eaa <menu+0x1bfe>
 8002e7e:	4b8e      	ldr	r3, [pc, #568]	@ (80030b8 <menu+0x1e0c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f083 0301 	eor.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002e8c:	4b87      	ldr	r3, [pc, #540]	@ (80030ac <menu+0x1e00>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b85      	ldr	r3, [pc, #532]	@ (80030ac <menu+0x1e00>)
 8002e96:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002e98:	4b84      	ldr	r3, [pc, #528]	@ (80030ac <menu+0x1e00>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 8002ea0:	4b82      	ldr	r3, [pc, #520]	@ (80030ac <menu+0x1e00>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ea6:	f000 ff25 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4881      	ldr	r0, [pc, #516]	@ (80030b4 <menu+0x1e08>)
 8002eae:	f006 ffa3 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d118      	bne.n	8002eea <menu+0x1c3e>
 8002eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80030b8 <menu+0x1e0c>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 8002ec6:	4b79      	ldr	r3, [pc, #484]	@ (80030ac <menu+0x1e00>)
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	4b7c      	ldr	r3, [pc, #496]	@ (80030bc <menu+0x1e10>)
 8002ecc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002ece:	4b77      	ldr	r3, [pc, #476]	@ (80030ac <menu+0x1e00>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <menu+0x1c38>
				altLimit = 1;
 8002ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80030c0 <menu+0x1e14>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002edc:	4b78      	ldr	r3, [pc, #480]	@ (80030c0 <menu+0x1e14>)
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <menu+0x1e10>)
 8002ee2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002ee4:	4b77      	ldr	r3, [pc, #476]	@ (80030c4 <menu+0x1e18>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002eea:	4b77      	ldr	r3, [pc, #476]	@ (80030c8 <menu+0x1e1c>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b16      	cmp	r3, #22
 8002ef0:	d164      	bne.n	8002fbc <menu+0x1d10>
		lcd_print(1, 1, yukariValfSureText);
 8002ef2:	4a76      	ldr	r2, [pc, #472]	@ (80030cc <menu+0x1e20>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f005 fc54 	bl	80087a4 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002efc:	4a74      	ldr	r2, [pc, #464]	@ (80030d0 <menu+0x1e24>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f005 fc4f 	bl	80087a4 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002f06:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <menu+0x1e28>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	220a      	movs	r2, #10
 8002f0c:	4972      	ldr	r1, [pc, #456]	@ (80030d8 <menu+0x1e2c>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f009 ff9e 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 8002f14:	4a70      	ldr	r2, [pc, #448]	@ (80030d8 <menu+0x1e2c>)
 8002f16:	2110      	movs	r1, #16
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f005 fc43 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4864      	ldr	r0, [pc, #400]	@ (80030b4 <menu+0x1e08>)
 8002f22:	f006 ff69 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d115      	bne.n	8002f58 <menu+0x1cac>
 8002f2c:	4b62      	ldr	r3, [pc, #392]	@ (80030b8 <menu+0x1e0c>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00e      	beq.n	8002f58 <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 8002f3a:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <menu+0x1e28>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b64      	ldr	r3, [pc, #400]	@ (80030d4 <menu+0x1e28>)
 8002f44:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002f46:	4b63      	ldr	r3, [pc, #396]	@ (80030d4 <menu+0x1e28>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d902      	bls.n	8002f54 <menu+0x1ca8>
				yukariValfTmr = 0;
 8002f4e:	4b61      	ldr	r3, [pc, #388]	@ (80030d4 <menu+0x1e28>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f54:	f000 fece 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4856      	ldr	r0, [pc, #344]	@ (80030b4 <menu+0x1e08>)
 8002f5c:	f006 ff4c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d115      	bne.n	8002f92 <menu+0x1ce6>
 8002f66:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <menu+0x1e0c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f083 0301 	eor.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 8002f74:	4b57      	ldr	r3, [pc, #348]	@ (80030d4 <menu+0x1e28>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b55      	ldr	r3, [pc, #340]	@ (80030d4 <menu+0x1e28>)
 8002f7e:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002f80:	4b54      	ldr	r3, [pc, #336]	@ (80030d4 <menu+0x1e28>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d902      	bls.n	8002f8e <menu+0x1ce2>
		   		yukariValfTmr = 5;
 8002f88:	4b52      	ldr	r3, [pc, #328]	@ (80030d4 <menu+0x1e28>)
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f8e:	f000 feb1 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f92:	2108      	movs	r1, #8
 8002f94:	4847      	ldr	r0, [pc, #284]	@ (80030b4 <menu+0x1e08>)
 8002f96:	f006 ff2f 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10d      	bne.n	8002fbc <menu+0x1d10>
 8002fa0:	4b45      	ldr	r3, [pc, #276]	@ (80030b8 <menu+0x1e0c>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <menu+0x1e28>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b42      	ldr	r3, [pc, #264]	@ (80030bc <menu+0x1e10>)
 8002fb4:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002fb6:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <menu+0x1e18>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002fbc:	4b42      	ldr	r3, [pc, #264]	@ (80030c8 <menu+0x1e1c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b17      	cmp	r3, #23
 8002fc2:	d164      	bne.n	800308e <menu+0x1de2>
		lcd_print(1, 1, asagiValfSureText);
 8002fc4:	4a45      	ldr	r2, [pc, #276]	@ (80030dc <menu+0x1e30>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f005 fbeb 	bl	80087a4 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fce:	4a40      	ldr	r2, [pc, #256]	@ (80030d0 <menu+0x1e24>)
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	f005 fbe6 	bl	80087a4 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002fd8:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <menu+0x1e34>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	220a      	movs	r2, #10
 8002fde:	493e      	ldr	r1, [pc, #248]	@ (80030d8 <menu+0x1e2c>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f009 ff35 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 8002fe6:	4a3c      	ldr	r2, [pc, #240]	@ (80030d8 <menu+0x1e2c>)
 8002fe8:	2110      	movs	r1, #16
 8002fea:	2002      	movs	r0, #2
 8002fec:	f005 fbda 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4830      	ldr	r0, [pc, #192]	@ (80030b4 <menu+0x1e08>)
 8002ff4:	f006 ff00 	bl	8009df8 <HAL_GPIO_ReadPin>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d115      	bne.n	800302a <menu+0x1d7e>
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <menu+0x1e0c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 800300c:	4b34      	ldr	r3, [pc, #208]	@ (80030e0 <menu+0x1e34>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b32      	ldr	r3, [pc, #200]	@ (80030e0 <menu+0x1e34>)
 8003016:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003018:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <menu+0x1e34>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d902      	bls.n	8003026 <menu+0x1d7a>
				asagiValfTmr = 0;
 8003020:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <menu+0x1e34>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003026:	f000 fe65 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800302a:	2104      	movs	r1, #4
 800302c:	4821      	ldr	r0, [pc, #132]	@ (80030b4 <menu+0x1e08>)
 800302e:	f006 fee3 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003032:	4603      	mov	r3, r0
 8003034:	2b01      	cmp	r3, #1
 8003036:	d115      	bne.n	8003064 <menu+0x1db8>
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <menu+0x1e0c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f083 0301 	eor.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <menu+0x1e34>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <menu+0x1e34>)
 8003050:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003052:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <menu+0x1e34>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d902      	bls.n	8003060 <menu+0x1db4>
		   		asagiValfTmr = 5;
 800305a:	4b21      	ldr	r3, [pc, #132]	@ (80030e0 <menu+0x1e34>)
 800305c:	2205      	movs	r2, #5
 800305e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003060:	f000 fe48 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003064:	2108      	movs	r1, #8
 8003066:	4813      	ldr	r0, [pc, #76]	@ (80030b4 <menu+0x1e08>)
 8003068:	f006 fec6 	bl	8009df8 <HAL_GPIO_ReadPin>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10d      	bne.n	800308e <menu+0x1de2>
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <menu+0x1e0c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 8003080:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <menu+0x1e34>)
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <menu+0x1e10>)
 8003086:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003088:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <menu+0x1e18>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <menu+0x1e1c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b18      	cmp	r3, #24
 8003094:	f040 8093 	bne.w	80031be <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 8003098:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <menu+0x1e38>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d125      	bne.n	80030ec <menu+0x1e40>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80030a0:	4a11      	ldr	r2, [pc, #68]	@ (80030e8 <menu+0x1e3c>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	2001      	movs	r0, #1
 80030a6:	f005 fb7d 	bl	80087a4 <lcd_print>
 80030aa:	e028      	b.n	80030fe <menu+0x1e52>
 80030ac:	200010b3 	.word	0x200010b3
 80030b0:	20001638 	.word	0x20001638
 80030b4:	40010800 	.word	0x40010800
 80030b8:	200010cf 	.word	0x200010cf
 80030bc:	20000fc8 	.word	0x20000fc8
 80030c0:	200010a6 	.word	0x200010a6
 80030c4:	200010cc 	.word	0x200010cc
 80030c8:	200010a0 	.word	0x200010a0
 80030cc:	20001660 	.word	0x20001660
 80030d0:	200014a8 	.word	0x200014a8
 80030d4:	200010b4 	.word	0x200010b4
 80030d8:	20001038 	.word	0x20001038
 80030dc:	20001674 	.word	0x20001674
 80030e0:	200010b5 	.word	0x200010b5
 80030e4:	200010af 	.word	0x200010af
 80030e8:	20001688 	.word	0x20001688
		} else if(devirmeYuruyusSecim == 1) {
 80030ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003320 <menu+0x2074>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d104      	bne.n	80030fe <menu+0x1e52>
			lcd_print(1, 1, ileriValfSureText);
 80030f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003324 <menu+0x2078>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2001      	movs	r0, #1
 80030fa:	f005 fb53 	bl	80087a4 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80030fe:	4a8a      	ldr	r2, [pc, #552]	@ (8003328 <menu+0x207c>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f005 fb4e 	bl	80087a4 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003108:	4b88      	ldr	r3, [pc, #544]	@ (800332c <menu+0x2080>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	220a      	movs	r2, #10
 800310e:	4988      	ldr	r1, [pc, #544]	@ (8003330 <menu+0x2084>)
 8003110:	4618      	mov	r0, r3
 8003112:	f009 fe9d 	bl	800ce50 <itoa>
		lcd_print(2, 16, snum);
 8003116:	4a86      	ldr	r2, [pc, #536]	@ (8003330 <menu+0x2084>)
 8003118:	2110      	movs	r1, #16
 800311a:	2002      	movs	r0, #2
 800311c:	f005 fb42 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003120:	2102      	movs	r1, #2
 8003122:	4884      	ldr	r0, [pc, #528]	@ (8003334 <menu+0x2088>)
 8003124:	f006 fe68 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d115      	bne.n	800315a <menu+0x1eae>
 800312e:	4b82      	ldr	r3, [pc, #520]	@ (8003338 <menu+0x208c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800313c:	4b7b      	ldr	r3, [pc, #492]	@ (800332c <menu+0x2080>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b79      	ldr	r3, [pc, #484]	@ (800332c <menu+0x2080>)
 8003146:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003148:	4b78      	ldr	r3, [pc, #480]	@ (800332c <menu+0x2080>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b05      	cmp	r3, #5
 800314e:	d902      	bls.n	8003156 <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 8003150:	4b76      	ldr	r3, [pc, #472]	@ (800332c <menu+0x2080>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003156:	f000 fdcd 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800315a:	2104      	movs	r1, #4
 800315c:	4875      	ldr	r0, [pc, #468]	@ (8003334 <menu+0x2088>)
 800315e:	f006 fe4b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d115      	bne.n	8003194 <menu+0x1ee8>
 8003168:	4b73      	ldr	r3, [pc, #460]	@ (8003338 <menu+0x208c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003176:	4b6d      	ldr	r3, [pc, #436]	@ (800332c <menu+0x2080>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b6b      	ldr	r3, [pc, #428]	@ (800332c <menu+0x2080>)
 8003180:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003182:	4b6a      	ldr	r3, [pc, #424]	@ (800332c <menu+0x2080>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 800318a:	4b68      	ldr	r3, [pc, #416]	@ (800332c <menu+0x2080>)
 800318c:	2205      	movs	r2, #5
 800318e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003190:	f000 fdb0 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003194:	2108      	movs	r1, #8
 8003196:	4867      	ldr	r0, [pc, #412]	@ (8003334 <menu+0x2088>)
 8003198:	f006 fe2e 	bl	8009df8 <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <menu+0x1f12>
 80031a2:	4b65      	ldr	r3, [pc, #404]	@ (8003338 <menu+0x208c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 80031b0:	4b5e      	ldr	r3, [pc, #376]	@ (800332c <menu+0x2080>)
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4b61      	ldr	r3, [pc, #388]	@ (800333c <menu+0x2090>)
 80031b6:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80031b8:	4b61      	ldr	r3, [pc, #388]	@ (8003340 <menu+0x2094>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80031be:	4b61      	ldr	r3, [pc, #388]	@ (8003344 <menu+0x2098>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b19      	cmp	r3, #25
 80031c4:	d172      	bne.n	80032ac <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 80031c6:	4b56      	ldr	r3, [pc, #344]	@ (8003320 <menu+0x2074>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d105      	bne.n	80031da <menu+0x1f2e>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80031ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003348 <menu+0x209c>)
 80031d0:	2101      	movs	r1, #1
 80031d2:	2001      	movs	r0, #1
 80031d4:	f005 fae6 	bl	80087a4 <lcd_print>
 80031d8:	e008      	b.n	80031ec <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 80031da:	4b51      	ldr	r3, [pc, #324]	@ (8003320 <menu+0x2074>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d104      	bne.n	80031ec <menu+0x1f40>
			lcd_print(1, 1, geriValfSureText);
 80031e2:	4a5a      	ldr	r2, [pc, #360]	@ (800334c <menu+0x20a0>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	2001      	movs	r0, #1
 80031e8:	f005 fadc 	bl	80087a4 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003328 <menu+0x207c>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2002      	movs	r0, #2
 80031f2:	f005 fad7 	bl	80087a4 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80031f6:	4b56      	ldr	r3, [pc, #344]	@ (8003350 <menu+0x20a4>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	220a      	movs	r2, #10
 80031fc:	494c      	ldr	r1, [pc, #304]	@ (8003330 <menu+0x2084>)
 80031fe:	4618      	mov	r0, r3
 8003200:	f009 fe26 	bl	800ce50 <itoa>
		lcd_print(2,16,snum);
 8003204:	4a4a      	ldr	r2, [pc, #296]	@ (8003330 <menu+0x2084>)
 8003206:	2110      	movs	r1, #16
 8003208:	2002      	movs	r0, #2
 800320a:	f005 facb 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800320e:	2102      	movs	r1, #2
 8003210:	4848      	ldr	r0, [pc, #288]	@ (8003334 <menu+0x2088>)
 8003212:	f006 fdf1 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <menu+0x1f9c>
 800321c:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <menu+0x208c>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800322a:	4b49      	ldr	r3, [pc, #292]	@ (8003350 <menu+0x20a4>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <menu+0x20a4>)
 8003234:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003236:	4b46      	ldr	r3, [pc, #280]	@ (8003350 <menu+0x20a4>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d902      	bls.n	8003244 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 800323e:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <menu+0x20a4>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003244:	f000 fd56 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003248:	2104      	movs	r1, #4
 800324a:	483a      	ldr	r0, [pc, #232]	@ (8003334 <menu+0x2088>)
 800324c:	f006 fdd4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d115      	bne.n	8003282 <menu+0x1fd6>
 8003256:	4b38      	ldr	r3, [pc, #224]	@ (8003338 <menu+0x208c>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003264:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <menu+0x20a4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <menu+0x20a4>)
 800326e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003270:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <menu+0x20a4>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d902      	bls.n	800327e <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 8003278:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <menu+0x20a4>)
 800327a:	2205      	movs	r2, #5
 800327c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800327e:	f000 fd39 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2108      	movs	r1, #8
 8003284:	482b      	ldr	r0, [pc, #172]	@ (8003334 <menu+0x2088>)
 8003286:	f006 fdb7 	bl	8009df8 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <menu+0x2000>
 8003290:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <menu+0x208c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 800329e:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <menu+0x20a4>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	4b26      	ldr	r3, [pc, #152]	@ (800333c <menu+0x2090>)
 80032a4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <menu+0x2094>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <menu+0x2098>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b1a      	cmp	r3, #26
 80032b2:	f040 80b7 	bne.w	8003424 <menu+0x2178>
		lcd_print(1, 1, calismaSuresiText);
 80032b6:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <menu+0x20a8>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	2001      	movs	r0, #1
 80032bc:	f005 fa72 	bl	80087a4 <lcd_print>

		if(makineCalismaTmr > 99) {
 80032c0:	4b25      	ldr	r3, [pc, #148]	@ (8003358 <menu+0x20ac>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b63      	cmp	r3, #99	@ 0x63
 80032c6:	d911      	bls.n	80032ec <menu+0x2040>
			lcd_print(2, 1, kacSaniyeText);
 80032c8:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <menu+0x207c>)
 80032ca:	2101      	movs	r1, #1
 80032cc:	2002      	movs	r0, #2
 80032ce:	f005 fa69 	bl	80087a4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80032d2:	4b21      	ldr	r3, [pc, #132]	@ (8003358 <menu+0x20ac>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	220a      	movs	r2, #10
 80032d8:	4915      	ldr	r1, [pc, #84]	@ (8003330 <menu+0x2084>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f009 fdb8 	bl	800ce50 <itoa>
			lcd_print(2,14,snum);
 80032e0:	4a13      	ldr	r2, [pc, #76]	@ (8003330 <menu+0x2084>)
 80032e2:	210e      	movs	r1, #14
 80032e4:	2002      	movs	r0, #2
 80032e6:	f005 fa5d 	bl	80087a4 <lcd_print>
 80032ea:	e04c      	b.n	8003386 <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80032ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <menu+0x20ac>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d933      	bls.n	800335c <menu+0x20b0>
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <menu+0x20ac>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b63      	cmp	r3, #99	@ 0x63
 80032fa:	d82f      	bhi.n	800335c <menu+0x20b0>
			lcd_print(2, 1, kacSaniyeText);
 80032fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <menu+0x207c>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f005 fa4f 	bl	80087a4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <menu+0x20ac>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	220a      	movs	r2, #10
 800330c:	4908      	ldr	r1, [pc, #32]	@ (8003330 <menu+0x2084>)
 800330e:	4618      	mov	r0, r3
 8003310:	f009 fd9e 	bl	800ce50 <itoa>
			lcd_print(2, 15, snum);
 8003314:	4a06      	ldr	r2, [pc, #24]	@ (8003330 <menu+0x2084>)
 8003316:	210f      	movs	r1, #15
 8003318:	2002      	movs	r0, #2
 800331a:	f005 fa43 	bl	80087a4 <lcd_print>
 800331e:	e032      	b.n	8003386 <menu+0x20da>
 8003320:	200010af 	.word	0x200010af
 8003324:	2000169c 	.word	0x2000169c
 8003328:	200014a8 	.word	0x200014a8
 800332c:	200010b6 	.word	0x200010b6
 8003330:	20001038 	.word	0x20001038
 8003334:	40010800 	.word	0x40010800
 8003338:	200010cf 	.word	0x200010cf
 800333c:	20000fc8 	.word	0x20000fc8
 8003340:	200010cc 	.word	0x200010cc
 8003344:	200010a0 	.word	0x200010a0
 8003348:	200016b0 	.word	0x200016b0
 800334c:	200016c4 	.word	0x200016c4
 8003350:	200010b7 	.word	0x200010b7
 8003354:	200016d8 	.word	0x200016d8
 8003358:	200010b8 	.word	0x200010b8
		} else if(makineCalismaTmr <=  9) {
 800335c:	4b72      	ldr	r3, [pc, #456]	@ (8003528 <menu+0x227c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d810      	bhi.n	8003386 <menu+0x20da>
			lcd_print(2, 1, kacSaniyeText);
 8003364:	4a71      	ldr	r2, [pc, #452]	@ (800352c <menu+0x2280>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f005 fa1b 	bl	80087a4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800336e:	4b6e      	ldr	r3, [pc, #440]	@ (8003528 <menu+0x227c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	220a      	movs	r2, #10
 8003374:	496e      	ldr	r1, [pc, #440]	@ (8003530 <menu+0x2284>)
 8003376:	4618      	mov	r0, r3
 8003378:	f009 fd6a 	bl	800ce50 <itoa>
			lcd_print(2, 16, snum);
 800337c:	4a6c      	ldr	r2, [pc, #432]	@ (8003530 <menu+0x2284>)
 800337e:	2110      	movs	r1, #16
 8003380:	2002      	movs	r0, #2
 8003382:	f005 fa0f 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003386:	2102      	movs	r1, #2
 8003388:	486a      	ldr	r0, [pc, #424]	@ (8003534 <menu+0x2288>)
 800338a:	f006 fd35 	bl	8009df8 <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d115      	bne.n	80033c0 <menu+0x2114>
 8003394:	4b68      	ldr	r3, [pc, #416]	@ (8003538 <menu+0x228c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00e      	beq.n	80033c0 <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 80033a2:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <menu+0x227c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003528 <menu+0x227c>)
 80033ac:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80033ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003528 <menu+0x227c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2bb4      	cmp	r3, #180	@ 0xb4
 80033b4:	d902      	bls.n	80033bc <menu+0x2110>
				makineCalismaTmr = 0;
 80033b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003528 <menu+0x227c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033bc:	f000 fc9a 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c0:	2104      	movs	r1, #4
 80033c2:	485c      	ldr	r0, [pc, #368]	@ (8003534 <menu+0x2288>)
 80033c4:	f006 fd18 	bl	8009df8 <HAL_GPIO_ReadPin>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d115      	bne.n	80033fa <menu+0x214e>
 80033ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003538 <menu+0x228c>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	f083 0301 	eor.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00e      	beq.n	80033fa <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 80033dc:	4b52      	ldr	r3, [pc, #328]	@ (8003528 <menu+0x227c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <menu+0x227c>)
 80033e6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80033e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <menu+0x227c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2bb5      	cmp	r3, #181	@ 0xb5
 80033ee:	d902      	bls.n	80033f6 <menu+0x214a>
		   		makineCalismaTmr = 180;
 80033f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003528 <menu+0x227c>)
 80033f2:	22b4      	movs	r2, #180	@ 0xb4
 80033f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033f6:	f000 fc7d 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fa:	2108      	movs	r1, #8
 80033fc:	484d      	ldr	r0, [pc, #308]	@ (8003534 <menu+0x2288>)
 80033fe:	f006 fcfb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10d      	bne.n	8003424 <menu+0x2178>
 8003408:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <menu+0x228c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 8003416:	4b44      	ldr	r3, [pc, #272]	@ (8003528 <menu+0x227c>)
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	4b48      	ldr	r3, [pc, #288]	@ (800353c <menu+0x2290>)
 800341c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800341e:	4b48      	ldr	r3, [pc, #288]	@ (8003540 <menu+0x2294>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003424:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <menu+0x2298>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b1b      	cmp	r3, #27
 800342a:	d166      	bne.n	80034fa <menu+0x224e>
		lcd_print(1, 1, buzzerTextGN);
 800342c:	4a46      	ldr	r2, [pc, #280]	@ (8003548 <menu+0x229c>)
 800342e:	2101      	movs	r1, #1
 8003430:	2001      	movs	r0, #1
 8003432:	f005 f9b7 	bl	80087a4 <lcd_print>

		if(buzzer == 0) {
 8003436:	4b45      	ldr	r3, [pc, #276]	@ (800354c <menu+0x22a0>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <menu+0x219e>
			lcd_print(2, 1, pasifText);
 800343e:	4a44      	ldr	r2, [pc, #272]	@ (8003550 <menu+0x22a4>)
 8003440:	2101      	movs	r1, #1
 8003442:	2002      	movs	r0, #2
 8003444:	f005 f9ae 	bl	80087a4 <lcd_print>
 8003448:	e008      	b.n	800345c <menu+0x21b0>
		} else if(buzzer == 1) {
 800344a:	4b40      	ldr	r3, [pc, #256]	@ (800354c <menu+0x22a0>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d104      	bne.n	800345c <menu+0x21b0>
			lcd_print(2, 1, aktifText);
 8003452:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <menu+0x22a8>)
 8003454:	2101      	movs	r1, #1
 8003456:	2002      	movs	r0, #2
 8003458:	f005 f9a4 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800345c:	2102      	movs	r1, #2
 800345e:	4835      	ldr	r0, [pc, #212]	@ (8003534 <menu+0x2288>)
 8003460:	f006 fcca 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d115      	bne.n	8003496 <menu+0x21ea>
 800346a:	4b33      	ldr	r3, [pc, #204]	@ (8003538 <menu+0x228c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	f083 0301 	eor.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <menu+0x21ea>
			buzzer = buzzer + 1;
 8003478:	4b34      	ldr	r3, [pc, #208]	@ (800354c <menu+0x22a0>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b32      	ldr	r3, [pc, #200]	@ (800354c <menu+0x22a0>)
 8003482:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003484:	4b31      	ldr	r3, [pc, #196]	@ (800354c <menu+0x22a0>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d902      	bls.n	8003492 <menu+0x21e6>
				buzzer = 0;
 800348c:	4b2f      	ldr	r3, [pc, #188]	@ (800354c <menu+0x22a0>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003492:	f000 fc2f 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2104      	movs	r1, #4
 8003498:	4826      	ldr	r0, [pc, #152]	@ (8003534 <menu+0x2288>)
 800349a:	f006 fcad 	bl	8009df8 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <menu+0x2224>
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <menu+0x228c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <menu+0x2224>
			buzzer = buzzer - 1;
 80034b2:	4b26      	ldr	r3, [pc, #152]	@ (800354c <menu+0x22a0>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <menu+0x22a0>)
 80034bc:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <menu+0x22a0>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <menu+0x2220>
		   		buzzer = 1;
 80034c6:	4b21      	ldr	r3, [pc, #132]	@ (800354c <menu+0x22a0>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034cc:	f000 fc12 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d0:	2108      	movs	r1, #8
 80034d2:	4818      	ldr	r0, [pc, #96]	@ (8003534 <menu+0x2288>)
 80034d4:	f006 fc90 	bl	8009df8 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10d      	bne.n	80034fa <menu+0x224e>
 80034de:	4b16      	ldr	r3, [pc, #88]	@ (8003538 <menu+0x228c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <menu+0x224e>
			eepromData[25] = buzzer;
 80034ec:	4b17      	ldr	r3, [pc, #92]	@ (800354c <menu+0x22a0>)
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	@ (800353c <menu+0x2290>)
 80034f2:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <menu+0x2294>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80034fa:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <menu+0x2298>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b1c      	cmp	r3, #28
 8003500:	f040 8088 	bne.w	8003614 <menu+0x2368>
		calismaSayModu = 0;
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <menu+0x22ac>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800350a:	4a14      	ldr	r2, [pc, #80]	@ (800355c <menu+0x22b0>)
 800350c:	2101      	movs	r1, #1
 800350e:	2001      	movs	r0, #1
 8003510:	f005 f948 	bl	80087a4 <lcd_print>

		if(demoMode == 0) {
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <menu+0x22b4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d123      	bne.n	8003564 <menu+0x22b8>
			lcd_print(2, 1, pasifText);
 800351c:	4a0c      	ldr	r2, [pc, #48]	@ (8003550 <menu+0x22a4>)
 800351e:	2101      	movs	r1, #1
 8003520:	2002      	movs	r0, #2
 8003522:	f005 f93f 	bl	80087a4 <lcd_print>
 8003526:	e026      	b.n	8003576 <menu+0x22ca>
 8003528:	200010b8 	.word	0x200010b8
 800352c:	200014a8 	.word	0x200014a8
 8003530:	20001038 	.word	0x20001038
 8003534:	40010800 	.word	0x40010800
 8003538:	200010cf 	.word	0x200010cf
 800353c:	20000fc8 	.word	0x20000fc8
 8003540:	200010cc 	.word	0x200010cc
 8003544:	200010a0 	.word	0x200010a0
 8003548:	2000012c 	.word	0x2000012c
 800354c:	200010bc 	.word	0x200010bc
 8003550:	2000137c 	.word	0x2000137c
 8003554:	20001390 	.word	0x20001390
 8003558:	200010c0 	.word	0x200010c0
 800355c:	20000140 	.word	0x20000140
 8003560:	200010be 	.word	0x200010be
		} else if(demoMode == 1) {
 8003564:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <menu+0x2440>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d104      	bne.n	8003576 <menu+0x22ca>
			lcd_print(2, 1, aktifText);
 800356c:	4a60      	ldr	r2, [pc, #384]	@ (80036f0 <menu+0x2444>)
 800356e:	2101      	movs	r1, #1
 8003570:	2002      	movs	r0, #2
 8003572:	f005 f917 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003576:	2102      	movs	r1, #2
 8003578:	485e      	ldr	r0, [pc, #376]	@ (80036f4 <menu+0x2448>)
 800357a:	f006 fc3d 	bl	8009df8 <HAL_GPIO_ReadPin>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d115      	bne.n	80035b0 <menu+0x2304>
 8003584:	4b5c      	ldr	r3, [pc, #368]	@ (80036f8 <menu+0x244c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <menu+0x2304>
			demoMode = demoMode + 1;
 8003592:	4b56      	ldr	r3, [pc, #344]	@ (80036ec <menu+0x2440>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <menu+0x2440>)
 800359c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800359e:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <menu+0x2440>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d902      	bls.n	80035ac <menu+0x2300>
				demoMode = 0;
 80035a6:	4b51      	ldr	r3, [pc, #324]	@ (80036ec <menu+0x2440>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035ac:	f000 fba2 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035b0:	2104      	movs	r1, #4
 80035b2:	4850      	ldr	r0, [pc, #320]	@ (80036f4 <menu+0x2448>)
 80035b4:	f006 fc20 	bl	8009df8 <HAL_GPIO_ReadPin>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d115      	bne.n	80035ea <menu+0x233e>
 80035be:	4b4e      	ldr	r3, [pc, #312]	@ (80036f8 <menu+0x244c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	f083 0301 	eor.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <menu+0x233e>
			demoMode = demoMode - 1;
 80035cc:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <menu+0x2440>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b45      	ldr	r3, [pc, #276]	@ (80036ec <menu+0x2440>)
 80035d6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80035d8:	4b44      	ldr	r3, [pc, #272]	@ (80036ec <menu+0x2440>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <menu+0x233a>
		   		demoMode = 1;
 80035e0:	4b42      	ldr	r3, [pc, #264]	@ (80036ec <menu+0x2440>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035e6:	f000 fb85 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ea:	2108      	movs	r1, #8
 80035ec:	4841      	ldr	r0, [pc, #260]	@ (80036f4 <menu+0x2448>)
 80035ee:	f006 fc03 	bl	8009df8 <HAL_GPIO_ReadPin>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10d      	bne.n	8003614 <menu+0x2368>
 80035f8:	4b3f      	ldr	r3, [pc, #252]	@ (80036f8 <menu+0x244c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f083 0301 	eor.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <menu+0x2368>
			eepromData[26] = demoMode;
 8003606:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <menu+0x2440>)
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	4b3c      	ldr	r3, [pc, #240]	@ (80036fc <menu+0x2450>)
 800360c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800360e:	4b3c      	ldr	r3, [pc, #240]	@ (8003700 <menu+0x2454>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003614:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <menu+0x2458>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b1d      	cmp	r3, #29
 800361a:	f040 810c 	bne.w	8003836 <menu+0x258a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800361e:	4b3a      	ldr	r3, [pc, #232]	@ (8003708 <menu+0x245c>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <menu+0x23a2>
 8003626:	4b39      	ldr	r3, [pc, #228]	@ (800370c <menu+0x2460>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <menu+0x23a2>
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <menu+0x2464>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <menu+0x23a2>
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <menu+0x2468>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <menu+0x23a2>
 800363e:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <menu+0x246c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <menu+0x23a2>
			calismaSayisiYar = 0;
 8003646:	4b35      	ldr	r3, [pc, #212]	@ (800371c <menu+0x2470>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e002      	b.n	8003654 <menu+0x23a8>
		} else {
			calismaSayisiYar = 1;
 800364e:	4b33      	ldr	r3, [pc, #204]	@ (800371c <menu+0x2470>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003654:	4b32      	ldr	r3, [pc, #200]	@ (8003720 <menu+0x2474>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d169      	bne.n	8003730 <menu+0x2484>
			lcd_print(1, 1, calismaSayisiText);
 800365c:	4a31      	ldr	r2, [pc, #196]	@ (8003724 <menu+0x2478>)
 800365e:	2101      	movs	r1, #1
 8003660:	2001      	movs	r0, #1
 8003662:	f005 f89f 	bl	80087a4 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 8003666:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <menu+0x246c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	220a      	movs	r2, #10
 800366c:	492e      	ldr	r1, [pc, #184]	@ (8003728 <menu+0x247c>)
 800366e:	4618      	mov	r0, r3
 8003670:	f009 fbee 	bl	800ce50 <itoa>
			lcd_print(2, 12, snum);
 8003674:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <menu+0x247c>)
 8003676:	210c      	movs	r1, #12
 8003678:	2002      	movs	r0, #2
 800367a:	f005 f893 	bl	80087a4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <menu+0x2468>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	220a      	movs	r2, #10
 8003684:	4928      	ldr	r1, [pc, #160]	@ (8003728 <menu+0x247c>)
 8003686:	4618      	mov	r0, r3
 8003688:	f009 fbe2 	bl	800ce50 <itoa>
			lcd_print(2, 13, snum);
 800368c:	4a26      	ldr	r2, [pc, #152]	@ (8003728 <menu+0x247c>)
 800368e:	210d      	movs	r1, #13
 8003690:	2002      	movs	r0, #2
 8003692:	f005 f887 	bl	80087a4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8003696:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <menu+0x2464>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	220a      	movs	r2, #10
 800369c:	4922      	ldr	r1, [pc, #136]	@ (8003728 <menu+0x247c>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f009 fbd6 	bl	800ce50 <itoa>
			lcd_print(2, 14, snum);
 80036a4:	4a20      	ldr	r2, [pc, #128]	@ (8003728 <menu+0x247c>)
 80036a6:	210e      	movs	r1, #14
 80036a8:	2002      	movs	r0, #2
 80036aa:	f005 f87b 	bl	80087a4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80036ae:	4b17      	ldr	r3, [pc, #92]	@ (800370c <menu+0x2460>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	220a      	movs	r2, #10
 80036b4:	491c      	ldr	r1, [pc, #112]	@ (8003728 <menu+0x247c>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f009 fbca 	bl	800ce50 <itoa>
			lcd_print(2, 15, snum);
 80036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <menu+0x247c>)
 80036be:	210f      	movs	r1, #15
 80036c0:	2002      	movs	r0, #2
 80036c2:	f005 f86f 	bl	80087a4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <menu+0x245c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	220a      	movs	r2, #10
 80036cc:	4916      	ldr	r1, [pc, #88]	@ (8003728 <menu+0x247c>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f009 fbbe 	bl	800ce50 <itoa>
			lcd_print(2, 16, snum);
 80036d4:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <menu+0x247c>)
 80036d6:	2110      	movs	r1, #16
 80036d8:	2002      	movs	r0, #2
 80036da:	f005 f863 	bl	80087a4 <lcd_print>

			lcd_print(2, 1, "           ");
 80036de:	4a13      	ldr	r2, [pc, #76]	@ (800372c <menu+0x2480>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	2002      	movs	r0, #2
 80036e4:	f005 f85e 	bl	80087a4 <lcd_print>
 80036e8:	e030      	b.n	800374c <menu+0x24a0>
 80036ea:	bf00      	nop
 80036ec:	200010be 	.word	0x200010be
 80036f0:	20001390 	.word	0x20001390
 80036f4:	40010800 	.word	0x40010800
 80036f8:	200010cf 	.word	0x200010cf
 80036fc:	20000fc8 	.word	0x20000fc8
 8003700:	200010cc 	.word	0x200010cc
 8003704:	200010a0 	.word	0x200010a0
 8003708:	2000109d 	.word	0x2000109d
 800370c:	2000109e 	.word	0x2000109e
 8003710:	20000000 	.word	0x20000000
 8003714:	20000001 	.word	0x20000001
 8003718:	2000109f 	.word	0x2000109f
 800371c:	200010e1 	.word	0x200010e1
 8003720:	200010c0 	.word	0x200010c0
 8003724:	200016ec 	.word	0x200016ec
 8003728:	20001038 	.word	0x20001038
 800372c:	0800db48 	.word	0x0800db48
		} else if(calismaSayModu == 1) {
 8003730:	4b82      	ldr	r3, [pc, #520]	@ (800393c <menu+0x2690>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d109      	bne.n	800374c <menu+0x24a0>
			lcd_print(1, 1, calismaSayisiText);
 8003738:	4a81      	ldr	r2, [pc, #516]	@ (8003940 <menu+0x2694>)
 800373a:	2101      	movs	r1, #1
 800373c:	2001      	movs	r0, #1
 800373e:	f005 f831 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003742:	4a80      	ldr	r2, [pc, #512]	@ (8003944 <menu+0x2698>)
 8003744:	2101      	movs	r1, #1
 8003746:	2002      	movs	r0, #2
 8003748:	f005 f82c 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800374c:	2102      	movs	r1, #2
 800374e:	487e      	ldr	r0, [pc, #504]	@ (8003948 <menu+0x269c>)
 8003750:	f006 fb52 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d119      	bne.n	800378e <menu+0x24e2>
 800375a:	4b7c      	ldr	r3, [pc, #496]	@ (800394c <menu+0x26a0>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	f083 0301 	eor.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <menu+0x24e2>
 8003768:	4b79      	ldr	r3, [pc, #484]	@ (8003950 <menu+0x26a4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <menu+0x24e2>
			calismaSayModu = calismaSayModu + 1;
 8003770:	4b72      	ldr	r3, [pc, #456]	@ (800393c <menu+0x2690>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	4b70      	ldr	r3, [pc, #448]	@ (800393c <menu+0x2690>)
 800377a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <menu+0x2690>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d902      	bls.n	800378a <menu+0x24de>
				calismaSayModu = 0;
 8003784:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <menu+0x2690>)
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800378a:	f000 fab3 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800378e:	2104      	movs	r1, #4
 8003790:	486d      	ldr	r0, [pc, #436]	@ (8003948 <menu+0x269c>)
 8003792:	f006 fb31 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d119      	bne.n	80037d0 <menu+0x2524>
 800379c:	4b6b      	ldr	r3, [pc, #428]	@ (800394c <menu+0x26a0>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f083 0301 	eor.w	r3, r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d012      	beq.n	80037d0 <menu+0x2524>
 80037aa:	4b69      	ldr	r3, [pc, #420]	@ (8003950 <menu+0x26a4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00e      	beq.n	80037d0 <menu+0x2524>
			calismaSayModu = calismaSayModu - 1;
 80037b2:	4b62      	ldr	r3, [pc, #392]	@ (800393c <menu+0x2690>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b60      	ldr	r3, [pc, #384]	@ (800393c <menu+0x2690>)
 80037bc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80037be:	4b5f      	ldr	r3, [pc, #380]	@ (800393c <menu+0x2690>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <menu+0x2520>
		   		calismaSayModu = 1;
 80037c6:	4b5d      	ldr	r3, [pc, #372]	@ (800393c <menu+0x2690>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037cc:	f000 fa92 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d0:	2108      	movs	r1, #8
 80037d2:	485d      	ldr	r0, [pc, #372]	@ (8003948 <menu+0x269c>)
 80037d4:	f006 fb10 	bl	8009df8 <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d12b      	bne.n	8003836 <menu+0x258a>
 80037de:	4b5b      	ldr	r3, [pc, #364]	@ (800394c <menu+0x26a0>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d024      	beq.n	8003836 <menu+0x258a>
			eepromData[32] = 0;
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <menu+0x26a8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80037f4:	4b57      	ldr	r3, [pc, #348]	@ (8003954 <menu+0x26a8>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80037fa:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <menu+0x26a8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003800:	4b54      	ldr	r3, [pc, #336]	@ (8003954 <menu+0x26a8>)
 8003802:	2200      	movs	r2, #0
 8003804:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003806:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <menu+0x26a8>)
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800380c:	4b52      	ldr	r3, [pc, #328]	@ (8003958 <menu+0x26ac>)
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003812:	4b52      	ldr	r3, [pc, #328]	@ (800395c <menu+0x26b0>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003818:	4b51      	ldr	r3, [pc, #324]	@ (8003960 <menu+0x26b4>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800381e:	4b51      	ldr	r3, [pc, #324]	@ (8003964 <menu+0x26b8>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003824:	4b50      	ldr	r3, [pc, #320]	@ (8003968 <menu+0x26bc>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800382a:	4b44      	ldr	r3, [pc, #272]	@ (800393c <menu+0x2690>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003830:	4b4e      	ldr	r3, [pc, #312]	@ (800396c <menu+0x26c0>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <menu+0x26c4>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b1e      	cmp	r3, #30
 800383c:	d166      	bne.n	800390c <menu+0x2660>
		calismaSayModu = 0;
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <menu+0x2690>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003844:	4a4b      	ldr	r2, [pc, #300]	@ (8003974 <menu+0x26c8>)
 8003846:	2101      	movs	r1, #1
 8003848:	2001      	movs	r0, #1
 800384a:	f004 ffab 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 800384e:	4a4a      	ldr	r2, [pc, #296]	@ (8003978 <menu+0x26cc>)
 8003850:	2101      	movs	r1, #1
 8003852:	2002      	movs	r0, #2
 8003854:	f004 ffa6 	bl	80087a4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003858:	2102      	movs	r1, #2
 800385a:	483b      	ldr	r0, [pc, #236]	@ (8003948 <menu+0x269c>)
 800385c:	f006 facc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d11a      	bne.n	800389c <menu+0x25f0>
 8003866:	4b39      	ldr	r3, [pc, #228]	@ (800394c <menu+0x26a0>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	f083 0301 	eor.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <menu+0x25f0>
			dilSecim = dilSecim + 1;
 8003874:	4b41      	ldr	r3, [pc, #260]	@ (800397c <menu+0x26d0>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b3f      	ldr	r3, [pc, #252]	@ (800397c <menu+0x26d0>)
 800387e:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003880:	4b3e      	ldr	r3, [pc, #248]	@ (800397c <menu+0x26d0>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d902      	bls.n	800388e <menu+0x25e2>
				dilSecim = 0;
 8003888:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <menu+0x26d0>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 800388e:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <menu+0x26d0>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fb1e 	bl	8005ed4 <loadMenuTexts>

			bekle();
 8003898:	f000 fa2c 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800389c:	2104      	movs	r1, #4
 800389e:	482a      	ldr	r0, [pc, #168]	@ (8003948 <menu+0x269c>)
 80038a0:	f006 faaa 	bl	8009df8 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d11a      	bne.n	80038e0 <menu+0x2634>
 80038aa:	4b28      	ldr	r3, [pc, #160]	@ (800394c <menu+0x26a0>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <menu+0x2634>
			dilSecim = dilSecim - 1;
 80038b8:	4b30      	ldr	r3, [pc, #192]	@ (800397c <menu+0x26d0>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b2e      	ldr	r3, [pc, #184]	@ (800397c <menu+0x26d0>)
 80038c2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80038c4:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <menu+0x26d0>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <menu+0x2626>
		   		dilSecim = 1;
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <menu+0x26d0>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 80038d2:	4b2a      	ldr	r3, [pc, #168]	@ (800397c <menu+0x26d0>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fafc 	bl	8005ed4 <loadMenuTexts>

			bekle();
 80038dc:	f000 fa0a 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e0:	2108      	movs	r1, #8
 80038e2:	4819      	ldr	r0, [pc, #100]	@ (8003948 <menu+0x269c>)
 80038e4:	f006 fa88 	bl	8009df8 <HAL_GPIO_ReadPin>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10e      	bne.n	800390c <menu+0x2660>
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <menu+0x26a0>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	f083 0301 	eor.w	r3, r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <menu+0x2660>
			eepromData[33] = dilSecim;
 80038fc:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <menu+0x26d0>)
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <menu+0x26a8>)
 8003902:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <menu+0x26c0>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <menu+0x26c4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b1f      	cmp	r3, #31
 8003912:	f040 8094 	bne.w	8003a3e <menu+0x2792>
		calismaSayModu = 0;
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <menu+0x2690>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 800391c:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <menu+0x26d4>)
 800391e:	2101      	movs	r1, #1
 8003920:	2001      	movs	r0, #1
 8003922:	f004 ff3f 	bl	80087a4 <lcd_print>

		if(iotMode == 0) {
 8003926:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <menu+0x26d8>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d12e      	bne.n	800398c <menu+0x26e0>
			lcd_print(2, 1, pasifText);
 800392e:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <menu+0x26dc>)
 8003930:	2101      	movs	r1, #1
 8003932:	2002      	movs	r0, #2
 8003934:	f004 ff36 	bl	80087a4 <lcd_print>
 8003938:	e031      	b.n	800399e <menu+0x26f2>
 800393a:	bf00      	nop
 800393c:	200010c0 	.word	0x200010c0
 8003940:	200016ec 	.word	0x200016ec
 8003944:	20001700 	.word	0x20001700
 8003948:	40010800 	.word	0x40010800
 800394c:	200010cf 	.word	0x200010cf
 8003950:	200010e1 	.word	0x200010e1
 8003954:	20000fc8 	.word	0x20000fc8
 8003958:	2000109f 	.word	0x2000109f
 800395c:	20000001 	.word	0x20000001
 8003960:	20000000 	.word	0x20000000
 8003964:	2000109e 	.word	0x2000109e
 8003968:	2000109d 	.word	0x2000109d
 800396c:	200010cc 	.word	0x200010cc
 8003970:	200010a0 	.word	0x200010a0
 8003974:	20001714 	.word	0x20001714
 8003978:	20001728 	.word	0x20001728
 800397c:	200010c1 	.word	0x200010c1
 8003980:	20000154 	.word	0x20000154
 8003984:	200010bf 	.word	0x200010bf
 8003988:	2000137c 	.word	0x2000137c
		} else if(iotMode == 1) {
 800398c:	4b97      	ldr	r3, [pc, #604]	@ (8003bec <menu+0x2940>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d104      	bne.n	800399e <menu+0x26f2>
			lcd_print(2, 1, aktifText);
 8003994:	4a96      	ldr	r2, [pc, #600]	@ (8003bf0 <menu+0x2944>)
 8003996:	2101      	movs	r1, #1
 8003998:	2002      	movs	r0, #2
 800399a:	f004 ff03 	bl	80087a4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800399e:	2102      	movs	r1, #2
 80039a0:	4894      	ldr	r0, [pc, #592]	@ (8003bf4 <menu+0x2948>)
 80039a2:	f006 fa29 	bl	8009df8 <HAL_GPIO_ReadPin>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d115      	bne.n	80039d8 <menu+0x272c>
 80039ac:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <menu+0x294c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f083 0301 	eor.w	r3, r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <menu+0x272c>
			iotMode = iotMode + 1;
 80039ba:	4b8c      	ldr	r3, [pc, #560]	@ (8003bec <menu+0x2940>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b8a      	ldr	r3, [pc, #552]	@ (8003bec <menu+0x2940>)
 80039c4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80039c6:	4b89      	ldr	r3, [pc, #548]	@ (8003bec <menu+0x2940>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d902      	bls.n	80039d4 <menu+0x2728>
				iotMode = 0;
 80039ce:	4b87      	ldr	r3, [pc, #540]	@ (8003bec <menu+0x2940>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80039d4:	f000 f98e 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d8:	2104      	movs	r1, #4
 80039da:	4886      	ldr	r0, [pc, #536]	@ (8003bf4 <menu+0x2948>)
 80039dc:	f006 fa0c 	bl	8009df8 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d115      	bne.n	8003a12 <menu+0x2766>
 80039e6:	4b84      	ldr	r3, [pc, #528]	@ (8003bf8 <menu+0x294c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <menu+0x2766>
			iotMode = iotMode - 1;
 80039f4:	4b7d      	ldr	r3, [pc, #500]	@ (8003bec <menu+0x2940>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b7b      	ldr	r3, [pc, #492]	@ (8003bec <menu+0x2940>)
 80039fe:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a00:	4b7a      	ldr	r3, [pc, #488]	@ (8003bec <menu+0x2940>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <menu+0x2762>
		   		iotMode = 1;
 8003a08:	4b78      	ldr	r3, [pc, #480]	@ (8003bec <menu+0x2940>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a0e:	f000 f971 	bl	8003cf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a12:	2108      	movs	r1, #8
 8003a14:	4877      	ldr	r0, [pc, #476]	@ (8003bf4 <menu+0x2948>)
 8003a16:	f006 f9ef 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <menu+0x2792>
 8003a20:	4b75      	ldr	r3, [pc, #468]	@ (8003bf8 <menu+0x294c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	f083 0301 	eor.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <menu+0x2792>
			eepromData[48] = iotMode;
 8003a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bec <menu+0x2940>)
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	4b72      	ldr	r3, [pc, #456]	@ (8003bfc <menu+0x2950>)
 8003a34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003a38:	4b71      	ldr	r3, [pc, #452]	@ (8003c00 <menu+0x2954>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003a3e:	4b71      	ldr	r3, [pc, #452]	@ (8003c04 <menu+0x2958>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d122      	bne.n	8003a8c <menu+0x27e0>
		calismaSayModu = 0;
 8003a46:	4b70      	ldr	r3, [pc, #448]	@ (8003c08 <menu+0x295c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7fc fe77 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003a52:	2032      	movs	r0, #50	@ 0x32
 8003a54:	f005 fc00 	bl	8009258 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7fd fb79 	bl	8001150 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4864      	ldr	r0, [pc, #400]	@ (8003bf4 <menu+0x2948>)
 8003a62:	f006 f9c9 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10f      	bne.n	8003a8c <menu+0x27e0>
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	4861      	ldr	r0, [pc, #388]	@ (8003bf4 <menu+0x2948>)
 8003a70:	f006 f9c2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <menu+0x27e0>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <menu+0x294c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	f083 0301 	eor.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <menu+0x27e0>
			takeMachineIDWithConfirmation();
 8003a88:	f003 fe84 	bl	8007794 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8003c04 <menu+0x2958>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b21      	cmp	r3, #33	@ 0x21
 8003a92:	d132      	bne.n	8003afa <menu+0x284e>
		calismaSayModu = 0;
 8003a94:	4b5c      	ldr	r3, [pc, #368]	@ (8003c08 <menu+0x295c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7fc fe50 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003aa0:	2032      	movs	r0, #50	@ 0x32
 8003aa2:	f005 fbd9 	bl	8009258 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f7fd fb52 	bl	8001150 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003aac:	2102      	movs	r1, #2
 8003aae:	4851      	ldr	r0, [pc, #324]	@ (8003bf4 <menu+0x2948>)
 8003ab0:	f006 f9a2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10d      	bne.n	8003ad6 <menu+0x282a>
 8003aba:	2104      	movs	r1, #4
 8003abc:	484d      	ldr	r0, [pc, #308]	@ (8003bf4 <menu+0x2948>)
 8003abe:	f006 f99b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <menu+0x282a>
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <menu+0x294c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <menu+0x2832>
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <menu+0x2960>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10d      	bne.n	8003afa <menu+0x284e>
			editMode = 0;
 8003ade:	4b4b      	ldr	r3, [pc, #300]	@ (8003c0c <menu+0x2960>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 8003ae4:	f004 f80e 	bl	8007b04 <takeWifiSSID>

			convertArrays(2);
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f7fc fe29 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003aee:	2032      	movs	r0, #50	@ 0x32
 8003af0:	f005 fbb2 	bl	8009258 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003af4:	2002      	movs	r0, #2
 8003af6:	f7fd fb2b 	bl	8001150 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003afa:	4b42      	ldr	r3, [pc, #264]	@ (8003c04 <menu+0x2958>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b22      	cmp	r3, #34	@ 0x22
 8003b00:	d132      	bne.n	8003b68 <menu+0x28bc>
		calismaSayModu = 0;
 8003b02:	4b41      	ldr	r3, [pc, #260]	@ (8003c08 <menu+0x295c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f7fc fe19 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b0e:	2032      	movs	r0, #50	@ 0x32
 8003b10:	f005 fba2 	bl	8009258 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b14:	2003      	movs	r0, #3
 8003b16:	f7fd fb1b 	bl	8001150 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4835      	ldr	r0, [pc, #212]	@ (8003bf4 <menu+0x2948>)
 8003b1e:	f006 f96b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10d      	bne.n	8003b44 <menu+0x2898>
 8003b28:	2104      	movs	r1, #4
 8003b2a:	4832      	ldr	r0, [pc, #200]	@ (8003bf4 <menu+0x2948>)
 8003b2c:	f006 f964 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <menu+0x2898>
 8003b36:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <menu+0x294c>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <menu+0x28a0>
 8003b44:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <menu+0x2960>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10d      	bne.n	8003b68 <menu+0x28bc>
			editMode = 0;
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <menu+0x2960>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8003b52:	f004 f961 	bl	8007e18 <takeWifiPass>

			convertArrays(3);
 8003b56:	2003      	movs	r0, #3
 8003b58:	f7fc fdf2 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b5c:	2032      	movs	r0, #50	@ 0x32
 8003b5e:	f005 fb7b 	bl	8009258 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003b62:	2003      	movs	r0, #3
 8003b64:	f7fd faf4 	bl	8001150 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003b68:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <menu+0x2958>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b23      	cmp	r3, #35	@ 0x23
 8003b6e:	d13a      	bne.n	8003be6 <menu+0x293a>
		lcd_print(1, 1, menudenCikisText);
 8003b70:	4a27      	ldr	r2, [pc, #156]	@ (8003c10 <menu+0x2964>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	2001      	movs	r0, #1
 8003b76:	f004 fe15 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003b7a:	4a26      	ldr	r2, [pc, #152]	@ (8003c14 <menu+0x2968>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f004 fe10 	bl	80087a4 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003b84:	2108      	movs	r1, #8
 8003b86:	481b      	ldr	r0, [pc, #108]	@ (8003bf4 <menu+0x2948>)
 8003b88:	f006 f936 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d129      	bne.n	8003be6 <menu+0x293a>
			menuGiris = 0;
 8003b92:	4b21      	ldr	r3, [pc, #132]	@ (8003c18 <menu+0x296c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003b98:	bf00      	nop
 8003b9a:	4820      	ldr	r0, [pc, #128]	@ (8003c1c <menu+0x2970>)
 8003b9c:	f006 ff55 	bl	800aa4a <HAL_I2C_GetError>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d0f9      	beq.n	8003b9a <menu+0x28ee>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003ba6:	bf00      	nop
 8003ba8:	481c      	ldr	r0, [pc, #112]	@ (8003c1c <menu+0x2970>)
 8003baa:	f006 ff41 	bl	800aa30 <HAL_I2C_GetState>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d1f9      	bne.n	8003ba8 <menu+0x28fc>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003bb4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	236e      	movs	r3, #110	@ 0x6e
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <menu+0x2950>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	236e      	movs	r3, #110	@ 0x6e
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	21a0      	movs	r1, #160	@ 0xa0
 8003bc8:	4814      	ldr	r0, [pc, #80]	@ (8003c1c <menu+0x2970>)
 8003bca:	f006 fbcf 	bl	800a36c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003bce:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003bd2:	f005 fb41 	bl	8009258 <HAL_Delay>

			lcd_clear();
 8003bd6:	f004 fe11 	bl	80087fc <lcd_clear>
			HAL_Delay(500);
 8003bda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bde:	f005 fb3b 	bl	8009258 <HAL_Delay>
			NVIC_SystemReset();
 8003be2:	f7fd fb4d 	bl	8001280 <__NVIC_SystemReset>
		}
	}
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200010bf 	.word	0x200010bf
 8003bf0:	20001390 	.word	0x20001390
 8003bf4:	40010800 	.word	0x40010800
 8003bf8:	200010cf 	.word	0x200010cf
 8003bfc:	20000fc8 	.word	0x20000fc8
 8003c00:	200010cc 	.word	0x200010cc
 8003c04:	200010a0 	.word	0x200010a0
 8003c08:	200010c0 	.word	0x200010c0
 8003c0c:	20001098 	.word	0x20001098
 8003c10:	2000173c 	.word	0x2000173c
 8003c14:	20001750 	.word	0x20001750
 8003c18:	200010bd 	.word	0x200010bd
 8003c1c:	20001908 	.word	0x20001908

08003c20 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	2002      	movs	r0, #2
 8003c36:	f004 fdb5 	bl	80087a4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003c3a:	e03b      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if(y==2) {
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d105      	bne.n	8003c4e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003c42:	4a1e      	ldr	r2, [pc, #120]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c44:	2102      	movs	r1, #2
 8003c46:	2002      	movs	r0, #2
 8003c48:	f004 fdac 	bl	80087a4 <lcd_print>
}
 8003c4c:	e032      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if(y==3) {
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d105      	bne.n	8003c60 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003c54:	4a19      	ldr	r2, [pc, #100]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c56:	2103      	movs	r1, #3
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f004 fda3 	bl	80087a4 <lcd_print>
}
 8003c5e:	e029      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if(y==4) {
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d105      	bne.n	8003c72 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003c66:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c68:	2104      	movs	r1, #4
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f004 fd9a 	bl	80087a4 <lcd_print>
}
 8003c70:	e020      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if(y==5) {
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d105      	bne.n	8003c84 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003c78:	4a10      	ldr	r2, [pc, #64]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c7a:	2105      	movs	r1, #5
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f004 fd91 	bl	80087a4 <lcd_print>
}
 8003c82:	e017      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if(y==6) {
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d105      	bne.n	8003c96 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <lcdUpdate+0x9c>)
 8003c8c:	2106      	movs	r1, #6
 8003c8e:	2002      	movs	r0, #2
 8003c90:	f004 fd88 	bl	80087a4 <lcd_print>
}
 8003c94:	e00e      	b.n	8003cb4 <lcdUpdate+0x94>
	} else if (y==7) {
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	d10b      	bne.n	8003cb4 <lcdUpdate+0x94>
		lcd_clear();
 8003c9c:	f004 fdae 	bl	80087fc <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003ca0:	4a07      	ldr	r2, [pc, #28]	@ (8003cc0 <lcdUpdate+0xa0>)
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f004 fd7d 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003caa:	4a06      	ldr	r2, [pc, #24]	@ (8003cc4 <lcdUpdate+0xa4>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f004 fd78 	bl	80087a4 <lcd_print>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0800db54 	.word	0x0800db54
 8003cc0:	200000c8 	.word	0x200000c8
 8003cc4:	200000dc 	.word	0x200000dc

08003cc8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <checkLCDBacklight+0x24>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <checkLCDBacklight+0x28>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b3b      	cmp	r3, #59	@ 0x3b
 8003cd8:	d903      	bls.n	8003ce2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f004 fdae 	bl	800883c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003ce0:	e002      	b.n	8003ce8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f004 fdaa 	bl	800883c <lcd_backlight>
}
 8003ce8:	bf00      	nop
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20001078 	.word	0x20001078
 8003cf0:	20001094 	.word	0x20001094

08003cf4 <bekle>:

void bekle() {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	timer1=millis;
 8003cf8:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <bekle+0x124>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a47      	ldr	r2, [pc, #284]	@ (8003e1c <bekle+0x128>)
 8003cfe:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d00:	e002      	b.n	8003d08 <bekle+0x14>
    	butonKontrol = 1;
 8003d02:	4b47      	ldr	r3, [pc, #284]	@ (8003e20 <bekle+0x12c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4846      	ldr	r0, [pc, #280]	@ (8003e24 <bekle+0x130>)
 8003d0c:	f006 f874 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d109      	bne.n	8003d2a <bekle+0x36>
 8003d16:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <bekle+0x124>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b40      	ldr	r3, [pc, #256]	@ (8003e1c <bekle+0x128>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d0ef      	beq.n	8003d02 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d22:	e002      	b.n	8003d2a <bekle+0x36>
    	butonKontrol = 1;
 8003d24:	4b3e      	ldr	r3, [pc, #248]	@ (8003e20 <bekle+0x12c>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	483e      	ldr	r0, [pc, #248]	@ (8003e28 <bekle+0x134>)
 8003d2e:	f006 f863 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d109      	bne.n	8003d4c <bekle+0x58>
 8003d38:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <bekle+0x124>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b37      	ldr	r3, [pc, #220]	@ (8003e1c <bekle+0x128>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d0ef      	beq.n	8003d24 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d44:	e002      	b.n	8003d4c <bekle+0x58>
    	butonKontrol = 1;
 8003d46:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <bekle+0x12c>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4835      	ldr	r0, [pc, #212]	@ (8003e24 <bekle+0x130>)
 8003d50:	f006 f852 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d109      	bne.n	8003d6e <bekle+0x7a>
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <bekle+0x124>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <bekle+0x128>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d0ef      	beq.n	8003d46 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d66:	e002      	b.n	8003d6e <bekle+0x7a>
    	butonKontrol = 1;
 8003d68:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <bekle+0x12c>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d6e:	2104      	movs	r1, #4
 8003d70:	482c      	ldr	r0, [pc, #176]	@ (8003e24 <bekle+0x130>)
 8003d72:	f006 f841 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <bekle+0x9c>
 8003d7c:	4b26      	ldr	r3, [pc, #152]	@ (8003e18 <bekle+0x124>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <bekle+0x128>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d0ef      	beq.n	8003d68 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d88:	e002      	b.n	8003d90 <bekle+0x9c>
    	butonKontrol = 1;
 8003d8a:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <bekle+0x12c>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d90:	2108      	movs	r1, #8
 8003d92:	4824      	ldr	r0, [pc, #144]	@ (8003e24 <bekle+0x130>)
 8003d94:	f006 f830 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d109      	bne.n	8003db2 <bekle+0xbe>
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <bekle+0x124>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <bekle+0x128>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d0ef      	beq.n	8003d8a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003daa:	e002      	b.n	8003db2 <bekle+0xbe>
    	butonKontrol = 1;
 8003dac:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <bekle+0x12c>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003db2:	2180      	movs	r1, #128	@ 0x80
 8003db4:	481c      	ldr	r0, [pc, #112]	@ (8003e28 <bekle+0x134>)
 8003db6:	f006 f81f 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <bekle+0xe0>
 8003dc0:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <bekle+0x124>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <bekle+0x128>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d0ef      	beq.n	8003dac <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dcc:	e002      	b.n	8003dd4 <bekle+0xe0>
    	butonKontrol = 1;
 8003dce:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <bekle+0x12c>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dd8:	4813      	ldr	r0, [pc, #76]	@ (8003e28 <bekle+0x134>)
 8003dda:	f006 f80d 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <bekle+0x104>
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <bekle+0x124>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <bekle+0x128>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0ee      	beq.n	8003dce <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003df0:	e002      	b.n	8003df8 <bekle+0x104>
    	butonKontrol = 1;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <bekle+0x12c>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dfc:	480a      	ldr	r0, [pc, #40]	@ (8003e28 <bekle+0x134>)
 8003dfe:	f005 fffb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <bekle+0x120>
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <bekle+0x124>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <bekle+0x128>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0ee      	beq.n	8003df2 <bekle+0xfe>
    }

}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20001078 	.word	0x20001078
 8003e1c:	20001080 	.word	0x20001080
 8003e20:	200010cf 	.word	0x200010cf
 8003e24:	40010800 	.word	0x40010800
 8003e28:	40011000 	.word	0x40011000

08003e2c <buttonCheck>:

uint8_t buttonCheck(void) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003e30:	2101      	movs	r1, #1
 8003e32:	4815      	ldr	r0, [pc, #84]	@ (8003e88 <buttonCheck+0x5c>)
 8003e34:	f005 ffe0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d01b      	beq.n	8003e76 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003e3e:	2108      	movs	r1, #8
 8003e40:	4812      	ldr	r0, [pc, #72]	@ (8003e8c <buttonCheck+0x60>)
 8003e42:	f005 ffd9 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d014      	beq.n	8003e76 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	480e      	ldr	r0, [pc, #56]	@ (8003e88 <buttonCheck+0x5c>)
 8003e50:	f005 ffd2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d00d      	beq.n	8003e76 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	480a      	ldr	r0, [pc, #40]	@ (8003e88 <buttonCheck+0x5c>)
 8003e5e:	f005 ffcb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d006      	beq.n	8003e76 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003e68:	2108      	movs	r1, #8
 8003e6a:	4807      	ldr	r0, [pc, #28]	@ (8003e88 <buttonCheck+0x5c>)
 8003e6c:	f005 ffc4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d104      	bne.n	8003e80 <buttonCheck+0x54>
		backLightTimer = 0;
 8003e76:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <buttonCheck+0x64>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
		return 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <buttonCheck+0x56>
	}
	return 0;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40010800 	.word	0x40010800
 8003e8c:	40011000 	.word	0x40011000
 8003e90:	20001094 	.word	0x20001094

08003e94 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003e98:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <checkBasincSalteri+0x54>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <checkBasincSalteri+0x12>
		basincVar=1;
 8003ea0:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <checkBasincSalteri+0x58>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <checkBasincSalteri+0x54>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d119      	bne.n	8003ee2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003eae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eb2:	480f      	ldr	r0, [pc, #60]	@ (8003ef0 <checkBasincSalteri+0x5c>)
 8003eb4:	f005 ffa0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <checkBasincSalteri+0x60>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <checkBasincSalteri+0x64>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d90a      	bls.n	8003ee2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <checkBasincSalteri+0x58>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003ed2:	e006      	b.n	8003ee2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003ed4:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <checkBasincSalteri+0x60>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a07      	ldr	r2, [pc, #28]	@ (8003ef8 <checkBasincSalteri+0x64>)
 8003eda:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003edc:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <checkBasincSalteri+0x58>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200010a7 	.word	0x200010a7
 8003eec:	200010a3 	.word	0x200010a3
 8003ef0:	40011000 	.word	0x40011000
 8003ef4:	20001078 	.word	0x20001078
 8003ef8:	20001090 	.word	0x20001090

08003efc <checkBasGonder>:

void checkBasGonder() {
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <checkBasGonder+0x74>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10b      	bne.n	8003f20 <checkBasGonder+0x24>
 8003f08:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <checkBasGonder+0x78>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <checkBasGonder+0x24>
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <checkBasGonder+0x7c>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003f18:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <checkBasGonder+0x80>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e009      	b.n	8003f34 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <checkBasGonder+0x78>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	f083 0301 	eor.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003f2e:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <checkBasGonder+0x80>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f34:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <checkBasGonder+0x74>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10b      	bne.n	8003f54 <checkBasGonder+0x58>
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <checkBasGonder+0x84>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <checkBasGonder+0x58>
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <checkBasGonder+0x7c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <checkBasGonder+0x88>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003f52:	e009      	b.n	8003f68 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <checkBasGonder+0x84>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f083 0301 	eor.w	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <checkBasGonder+0x88>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	200010a1 	.word	0x200010a1
 8003f74:	200010d5 	.word	0x200010d5
 8003f78:	200010af 	.word	0x200010af
 8003f7c:	200010dc 	.word	0x200010dc
 8003f80:	200010d8 	.word	0x200010d8
 8003f84:	200010dd 	.word	0x200010dd

08003f88 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003f8c:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <checkKapiSecimleri+0x98>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003f94:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <checkKapiSecimleri+0x98>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10e      	bne.n	8003fc0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003fa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa6:	4820      	ldr	r0, [pc, #128]	@ (8004028 <checkKapiSecimleri+0xa0>)
 8003fa8:	f005 ff26 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e002      	b.n	8003fc0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003fc0:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <checkKapiSecimleri+0x98>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d10e      	bne.n	8003fe6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003fc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fcc:	4816      	ldr	r0, [pc, #88]	@ (8004028 <checkKapiSecimleri+0xa0>)
 8003fce:	f005 ff13 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e002      	b.n	8003fe6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003fe0:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <checkKapiSecimleri+0x98>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d116      	bne.n	800401c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003fee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ff2:	480d      	ldr	r0, [pc, #52]	@ (8004028 <checkKapiSecimleri+0xa0>)
 8003ff4:	f005 ff00 	bl	8009df8 <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <checkKapiSecimleri+0x8e>
 8003ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004002:	4809      	ldr	r0, [pc, #36]	@ (8004028 <checkKapiSecimleri+0xa0>)
 8004004:	f005 fef8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004014:	e002      	b.n	800401c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004016:	4b03      	ldr	r3, [pc, #12]	@ (8004024 <checkKapiSecimleri+0x9c>)
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200010a8 	.word	0x200010a8
 8004024:	200010f3 	.word	0x200010f3
 8004028:	40010800 	.word	0x40010800

0800402c <checkAktifCalisma>:

void checkAktifCalisma() {
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004030:	4b62      	ldr	r3, [pc, #392]	@ (80041bc <checkAktifCalisma+0x190>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f041 833e 	bne.w	80056b6 <checkAktifCalisma+0x168a>
 800403a:	4b61      	ldr	r3, [pc, #388]	@ (80041c0 <checkAktifCalisma+0x194>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f041 8339 	bne.w	80056b6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004044:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <checkAktifCalisma+0x198>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11a      	bne.n	8004082 <checkAktifCalisma+0x56>
 800404c:	4b5e      	ldr	r3, [pc, #376]	@ (80041c8 <checkAktifCalisma+0x19c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d116      	bne.n	8004082 <checkAktifCalisma+0x56>
 8004054:	4b5d      	ldr	r3, [pc, #372]	@ (80041cc <checkAktifCalisma+0x1a0>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <checkAktifCalisma+0x46>
 800405c:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <checkAktifCalisma+0x1a4>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	f083 0301 	eor.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <checkAktifCalisma+0x46>
 800406a:	4b5a      	ldr	r3, [pc, #360]	@ (80041d4 <checkAktifCalisma+0x1a8>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <checkAktifCalisma+0x56>
 8004072:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <checkAktifCalisma+0x1ac>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <checkAktifCalisma+0x80>
 800407a:	4b58      	ldr	r3, [pc, #352]	@ (80041dc <checkAktifCalisma+0x1b0>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d114      	bne.n	80040ac <checkAktifCalisma+0x80>
 8004082:	4b57      	ldr	r3, [pc, #348]	@ (80041e0 <checkAktifCalisma+0x1b4>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <checkAktifCalisma+0x80>
 800408a:	4b56      	ldr	r3, [pc, #344]	@ (80041e4 <checkAktifCalisma+0x1b8>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004092:	2201      	movs	r2, #1
 8004094:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004098:	4853      	ldr	r0, [pc, #332]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 800409a:	f005 fec4 	bl	8009e26 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800409e:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <checkAktifCalisma+0x1c0>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80040a4:	4b52      	ldr	r3, [pc, #328]	@ (80041f0 <checkAktifCalisma+0x1c4>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040b2:	484d      	ldr	r0, [pc, #308]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 80040b4:	f005 feb7 	bl	8009e26 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80040b8:	4b4c      	ldr	r3, [pc, #304]	@ (80041ec <checkAktifCalisma+0x1c0>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80040be:	4b40      	ldr	r3, [pc, #256]	@ (80041c0 <checkAktifCalisma+0x194>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d160      	bne.n	8004188 <checkAktifCalisma+0x15c>
 80040c6:	4b46      	ldr	r3, [pc, #280]	@ (80041e0 <checkAktifCalisma+0x1b4>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d05c      	beq.n	8004188 <checkAktifCalisma+0x15c>
 80040ce:	4b45      	ldr	r3, [pc, #276]	@ (80041e4 <checkAktifCalisma+0x1b8>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d058      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80040d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040da:	4843      	ldr	r0, [pc, #268]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 80040dc:	f005 fe8c 	bl	8009df8 <HAL_GPIO_ReadPin>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <checkAktifCalisma+0xc2>
 80040e6:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <checkAktifCalisma+0x1c8>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04c      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80040ee:	2102      	movs	r1, #2
 80040f0:	4841      	ldr	r0, [pc, #260]	@ (80041f8 <checkAktifCalisma+0x1cc>)
 80040f2:	f005 fe81 	bl	8009df8 <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d145      	bne.n	8004188 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80040fc:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <checkAktifCalisma+0x1d0>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d041      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004104:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004108:	4837      	ldr	r0, [pc, #220]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 800410a:	f005 fe75 	bl	8009df8 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10e      	bne.n	8004132 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004118:	4833      	ldr	r0, [pc, #204]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 800411a:	f005 fe6d 	bl	8009df8 <HAL_GPIO_ReadPin>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d106      	bne.n	8004132 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004124:	2140      	movs	r1, #64	@ 0x40
 8004126:	4834      	ldr	r0, [pc, #208]	@ (80041f8 <checkAktifCalisma+0x1cc>)
 8004128:	f005 fe66 	bl	8009df8 <HAL_GPIO_ReadPin>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d003      	beq.n	800413a <checkAktifCalisma+0x10e>
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <checkAktifCalisma+0x198>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d026      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800413a:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <checkAktifCalisma+0x1a0>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	f083 0301 	eor.w	r3, r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01f      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004148:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <checkAktifCalisma+0x19c>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f083 0301 	eor.w	r3, r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004156:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <checkAktifCalisma+0x1ac>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f083 0301 	eor.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004164:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <checkAktifCalisma+0x1d4>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004172:	4b24      	ldr	r3, [pc, #144]	@ (8004204 <checkAktifCalisma+0x1d8>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	f083 0301 	eor.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004180:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <checkAktifCalisma+0x198>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e002      	b.n	800418e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004188:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <checkAktifCalisma+0x198>)
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <checkAktifCalisma+0x198>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03a      	beq.n	800420c <checkAktifCalisma+0x1e0>
 8004196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800419a:	4817      	ldr	r0, [pc, #92]	@ (80041f8 <checkAktifCalisma+0x1cc>)
 800419c:	f005 fe2c 	bl	8009df8 <HAL_GPIO_ReadPin>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d132      	bne.n	800420c <checkAktifCalisma+0x1e0>
 80041a6:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <checkAktifCalisma+0x1dc>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02e      	beq.n	800420c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80041ae:	2201      	movs	r2, #1
 80041b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041b4:	480c      	ldr	r0, [pc, #48]	@ (80041e8 <checkAktifCalisma+0x1bc>)
 80041b6:	f005 fe36 	bl	8009e26 <HAL_GPIO_WritePin>
 80041ba:	e02d      	b.n	8004218 <checkAktifCalisma+0x1ec>
 80041bc:	200010be 	.word	0x200010be
 80041c0:	200010bd 	.word	0x200010bd
 80041c4:	200010d5 	.word	0x200010d5
 80041c8:	200010d6 	.word	0x200010d6
 80041cc:	200010d8 	.word	0x200010d8
 80041d0:	200010d0 	.word	0x200010d0
 80041d4:	200010b3 	.word	0x200010b3
 80041d8:	200010d7 	.word	0x200010d7
 80041dc:	200010b2 	.word	0x200010b2
 80041e0:	200010f2 	.word	0x200010f2
 80041e4:	200010f3 	.word	0x200010f3
 80041e8:	40010c00 	.word	0x40010c00
 80041ec:	200010f4 	.word	0x200010f4
 80041f0:	200010df 	.word	0x200010df
 80041f4:	200010dc 	.word	0x200010dc
 80041f8:	40011000 	.word	0x40011000
 80041fc:	200010a3 	.word	0x200010a3
 8004200:	200010da 	.word	0x200010da
 8004204:	200010db 	.word	0x200010db
 8004208:	200010ae 	.word	0x200010ae
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004212:	4860      	ldr	r0, [pc, #384]	@ (8004394 <checkAktifCalisma+0x368>)
 8004214:	f005 fe07 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004218:	4b5f      	ldr	r3, [pc, #380]	@ (8004398 <checkAktifCalisma+0x36c>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <checkAktifCalisma+0x21c>
 8004220:	4b5e      	ldr	r3, [pc, #376]	@ (800439c <checkAktifCalisma+0x370>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d007      	beq.n	8004238 <checkAktifCalisma+0x20c>
 8004228:	4b5c      	ldr	r3, [pc, #368]	@ (800439c <checkAktifCalisma+0x370>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d003      	beq.n	8004238 <checkAktifCalisma+0x20c>
 8004230:	4b5b      	ldr	r3, [pc, #364]	@ (80043a0 <checkAktifCalisma+0x374>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004238:	2201      	movs	r2, #1
 800423a:	2104      	movs	r1, #4
 800423c:	4855      	ldr	r0, [pc, #340]	@ (8004394 <checkAktifCalisma+0x368>)
 800423e:	f005 fdf2 	bl	8009e26 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004242:	4b58      	ldr	r3, [pc, #352]	@ (80043a4 <checkAktifCalisma+0x378>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004248:	4b56      	ldr	r3, [pc, #344]	@ (80043a4 <checkAktifCalisma+0x378>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02f      	beq.n	80042b0 <checkAktifCalisma+0x284>
 8004250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004254:	484f      	ldr	r0, [pc, #316]	@ (8004394 <checkAktifCalisma+0x368>)
 8004256:	f005 fdcf 	bl	8009df8 <HAL_GPIO_ReadPin>
 800425a:	4603      	mov	r3, r0
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <checkAktifCalisma+0x242>
 8004260:	4b51      	ldr	r3, [pc, #324]	@ (80043a8 <checkAktifCalisma+0x37c>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <checkAktifCalisma+0x250>
 800426e:	2102      	movs	r1, #2
 8004270:	484e      	ldr	r0, [pc, #312]	@ (80043ac <checkAktifCalisma+0x380>)
 8004272:	f005 fdc1 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d119      	bne.n	80042b0 <checkAktifCalisma+0x284>
 800427c:	4b4c      	ldr	r3, [pc, #304]	@ (80043b0 <checkAktifCalisma+0x384>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <checkAktifCalisma+0x284>
 8004284:	4b4b      	ldr	r3, [pc, #300]	@ (80043b4 <checkAktifCalisma+0x388>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d011      	beq.n	80042b0 <checkAktifCalisma+0x284>
 800428c:	4b4a      	ldr	r3, [pc, #296]	@ (80043b8 <checkAktifCalisma+0x38c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <checkAktifCalisma+0x284>
 8004294:	4b49      	ldr	r3, [pc, #292]	@ (80043bc <checkAktifCalisma+0x390>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <checkAktifCalisma+0x284>
			timer2=millis;
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <checkAktifCalisma+0x394>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a47      	ldr	r2, [pc, #284]	@ (80043c4 <checkAktifCalisma+0x398>)
 80042a8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80042aa:	4b44      	ldr	r3, [pc, #272]	@ (80043bc <checkAktifCalisma+0x390>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80042b0:	4b43      	ldr	r3, [pc, #268]	@ (80043c0 <checkAktifCalisma+0x394>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b43      	ldr	r3, [pc, #268]	@ (80043c4 <checkAktifCalisma+0x398>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	4a43      	ldr	r2, [pc, #268]	@ (80043c8 <checkAktifCalisma+0x39c>)
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	4293      	cmp	r3, r2
 80042c0:	d303      	bcc.n	80042ca <checkAktifCalisma+0x29e>
 80042c2:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <checkAktifCalisma+0x390>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d111      	bne.n	80042ee <checkAktifCalisma+0x2c2>
 80042ca:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <checkAktifCalisma+0x384>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f083 0301 	eor.w	r3, r3, #1
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <checkAktifCalisma+0x2c2>
 80042d8:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <checkAktifCalisma+0x388>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f083 0301 	eor.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <checkAktifCalisma+0x2c2>
 80042e6:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <checkAktifCalisma+0x38c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2104      	movs	r1, #4
 80042f2:	4828      	ldr	r0, [pc, #160]	@ (8004394 <checkAktifCalisma+0x368>)
 80042f4:	f005 fd97 	bl	8009e26 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80042f8:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <checkAktifCalisma+0x378>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80042fe:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <checkAktifCalisma+0x390>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004304:	4b31      	ldr	r3, [pc, #196]	@ (80043cc <checkAktifCalisma+0x3a0>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800430c:	4b30      	ldr	r3, [pc, #192]	@ (80043d0 <checkAktifCalisma+0x3a4>)
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004312:	4b2e      	ldr	r3, [pc, #184]	@ (80043cc <checkAktifCalisma+0x3a0>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d116      	bne.n	8004348 <checkAktifCalisma+0x31c>
 800431a:	4b2e      	ldr	r3, [pc, #184]	@ (80043d4 <checkAktifCalisma+0x3a8>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d112      	bne.n	8004348 <checkAktifCalisma+0x31c>
 8004322:	2101      	movs	r1, #1
 8004324:	4821      	ldr	r0, [pc, #132]	@ (80043ac <checkAktifCalisma+0x380>)
 8004326:	f005 fd67 	bl	8009df8 <HAL_GPIO_ReadPin>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <checkAktifCalisma+0x31c>
 8004330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004334:	4817      	ldr	r0, [pc, #92]	@ (8004394 <checkAktifCalisma+0x368>)
 8004336:	f005 fd5f 	bl	8009df8 <HAL_GPIO_ReadPin>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004340:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <checkAktifCalisma+0x3a4>)
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e011      	b.n	800436c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004348:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <checkAktifCalisma+0x3a0>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10d      	bne.n	800436c <checkAktifCalisma+0x340>
 8004350:	2101      	movs	r1, #1
 8004352:	4816      	ldr	r0, [pc, #88]	@ (80043ac <checkAktifCalisma+0x380>)
 8004354:	f005 fd50 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <checkAktifCalisma+0x340>
 800435e:	4b1d      	ldr	r3, [pc, #116]	@ (80043d4 <checkAktifCalisma+0x3a8>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004366:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <checkAktifCalisma+0x3a4>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800436c:	4b17      	ldr	r3, [pc, #92]	@ (80043cc <checkAktifCalisma+0x3a0>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d134      	bne.n	80043de <checkAktifCalisma+0x3b2>
 8004374:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <checkAktifCalisma+0x3a8>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d130      	bne.n	80043de <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800437c:	2101      	movs	r1, #1
 800437e:	480b      	ldr	r0, [pc, #44]	@ (80043ac <checkAktifCalisma+0x380>)
 8004380:	f005 fd3a 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d126      	bne.n	80043d8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800438a:	4b11      	ldr	r3, [pc, #68]	@ (80043d0 <checkAktifCalisma+0x3a4>)
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e025      	b.n	80043de <checkAktifCalisma+0x3b2>
 8004392:	bf00      	nop
 8004394:	40010c00 	.word	0x40010c00
 8004398:	200010d5 	.word	0x200010d5
 800439c:	200010af 	.word	0x200010af
 80043a0:	200010b3 	.word	0x200010b3
 80043a4:	200010d9 	.word	0x200010d9
 80043a8:	200010dc 	.word	0x200010dc
 80043ac:	40011000 	.word	0x40011000
 80043b0:	200010f2 	.word	0x200010f2
 80043b4:	200010f3 	.word	0x200010f3
 80043b8:	200010a3 	.word	0x200010a3
 80043bc:	200010d1 	.word	0x200010d1
 80043c0:	20001078 	.word	0x20001078
 80043c4:	20001084 	.word	0x20001084
 80043c8:	200010b4 	.word	0x200010b4
 80043cc:	200010a4 	.word	0x200010a4
 80043d0:	200010f7 	.word	0x200010f7
 80043d4:	200010a1 	.word	0x200010a1
			} else {
				cerceveVar=0;
 80043d8:	4b7f      	ldr	r3, [pc, #508]	@ (80045d8 <checkAktifCalisma+0x5ac>)
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80043de:	4b7f      	ldr	r3, [pc, #508]	@ (80045dc <checkAktifCalisma+0x5b0>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d17c      	bne.n	80044e0 <checkAktifCalisma+0x4b4>
 80043e6:	4b7e      	ldr	r3, [pc, #504]	@ (80045e0 <checkAktifCalisma+0x5b4>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d078      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
 80043ee:	4b7d      	ldr	r3, [pc, #500]	@ (80045e4 <checkAktifCalisma+0x5b8>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d074      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80043f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043fa:	487b      	ldr	r0, [pc, #492]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 80043fc:	f005 fcfc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <checkAktifCalisma+0x3e2>
 8004406:	4b79      	ldr	r3, [pc, #484]	@ (80045ec <checkAktifCalisma+0x5c0>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d068      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800440e:	4b72      	ldr	r3, [pc, #456]	@ (80045d8 <checkAktifCalisma+0x5ac>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d064      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
 8004416:	4b76      	ldr	r3, [pc, #472]	@ (80045f0 <checkAktifCalisma+0x5c4>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	f083 0301 	eor.w	r3, r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05d      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004424:	2104      	movs	r1, #4
 8004426:	4873      	ldr	r0, [pc, #460]	@ (80045f4 <checkAktifCalisma+0x5c8>)
 8004428:	f005 fce6 	bl	8009df8 <HAL_GPIO_ReadPin>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <checkAktifCalisma+0x40e>
 8004432:	4b71      	ldr	r3, [pc, #452]	@ (80045f8 <checkAktifCalisma+0x5cc>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d152      	bne.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800443a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800443e:	486a      	ldr	r0, [pc, #424]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 8004440:	f005 fcda 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10e      	bne.n	8004468 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800444a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800444e:	4866      	ldr	r0, [pc, #408]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 8004450:	f005 fcd2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800445a:	2140      	movs	r1, #64	@ 0x40
 800445c:	4865      	ldr	r0, [pc, #404]	@ (80045f4 <checkAktifCalisma+0x5c8>)
 800445e:	f005 fccb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d003      	beq.n	8004470 <checkAktifCalisma+0x444>
 8004468:	4b64      	ldr	r3, [pc, #400]	@ (80045fc <checkAktifCalisma+0x5d0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d037      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004470:	4b63      	ldr	r3, [pc, #396]	@ (8004600 <checkAktifCalisma+0x5d4>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f083 0301 	eor.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d030      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800447e:	4b61      	ldr	r3, [pc, #388]	@ (8004604 <checkAktifCalisma+0x5d8>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d029      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800448c:	4b5e      	ldr	r3, [pc, #376]	@ (8004608 <checkAktifCalisma+0x5dc>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	f083 0301 	eor.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800449a:	4b5c      	ldr	r3, [pc, #368]	@ (800460c <checkAktifCalisma+0x5e0>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f083 0301 	eor.w	r3, r3, #1
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80044a8:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <checkAktifCalisma+0x5e4>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f083 0301 	eor.w	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80044b6:	4b57      	ldr	r3, [pc, #348]	@ (8004614 <checkAktifCalisma+0x5e8>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	f083 0301 	eor.w	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00d      	beq.n	80044e0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80044c4:	2201      	movs	r2, #1
 80044c6:	2102      	movs	r1, #2
 80044c8:	4847      	ldr	r0, [pc, #284]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 80044ca:	f005 fcac 	bl	8009e26 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <checkAktifCalisma+0x5d0>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80044d4:	4b50      	ldr	r3, [pc, #320]	@ (8004618 <checkAktifCalisma+0x5ec>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80044da:	4b50      	ldr	r3, [pc, #320]	@ (800461c <checkAktifCalisma+0x5f0>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80044e0:	4b46      	ldr	r3, [pc, #280]	@ (80045fc <checkAktifCalisma+0x5d0>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d033      	beq.n	8004550 <checkAktifCalisma+0x524>
 80044e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044ec:	483e      	ldr	r0, [pc, #248]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 80044ee:	f005 fc83 	bl	8009df8 <HAL_GPIO_ReadPin>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <checkAktifCalisma+0x4da>
 80044f8:	4b3c      	ldr	r3, [pc, #240]	@ (80045ec <checkAktifCalisma+0x5c0>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f083 0301 	eor.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <checkAktifCalisma+0x4f0>
 8004506:	2104      	movs	r1, #4
 8004508:	483a      	ldr	r0, [pc, #232]	@ (80045f4 <checkAktifCalisma+0x5c8>)
 800450a:	f005 fc75 	bl	8009df8 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b01      	cmp	r3, #1
 8004512:	d11d      	bne.n	8004550 <checkAktifCalisma+0x524>
 8004514:	4b38      	ldr	r3, [pc, #224]	@ (80045f8 <checkAktifCalisma+0x5cc>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d019      	beq.n	8004550 <checkAktifCalisma+0x524>
 800451c:	4b30      	ldr	r3, [pc, #192]	@ (80045e0 <checkAktifCalisma+0x5b4>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <checkAktifCalisma+0x524>
 8004524:	4b2f      	ldr	r3, [pc, #188]	@ (80045e4 <checkAktifCalisma+0x5b8>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <checkAktifCalisma+0x524>
 800452c:	4b2a      	ldr	r3, [pc, #168]	@ (80045d8 <checkAktifCalisma+0x5ac>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <checkAktifCalisma+0x524>
 8004534:	4b3a      	ldr	r3, [pc, #232]	@ (8004620 <checkAktifCalisma+0x5f4>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f083 0301 	eor.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <checkAktifCalisma+0x524>
			timer2=millis;
 8004542:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <checkAktifCalisma+0x5f8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a38      	ldr	r2, [pc, #224]	@ (8004628 <checkAktifCalisma+0x5fc>)
 8004548:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800454a:	4b35      	ldr	r3, [pc, #212]	@ (8004620 <checkAktifCalisma+0x5f4>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004550:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <checkAktifCalisma+0x5f8>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b34      	ldr	r3, [pc, #208]	@ (8004628 <checkAktifCalisma+0x5fc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	4a34      	ldr	r2, [pc, #208]	@ (800462c <checkAktifCalisma+0x600>)
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	4293      	cmp	r3, r2
 8004560:	d303      	bcc.n	800456a <checkAktifCalisma+0x53e>
 8004562:	4b2f      	ldr	r3, [pc, #188]	@ (8004620 <checkAktifCalisma+0x5f4>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d114      	bne.n	8004594 <checkAktifCalisma+0x568>
 800456a:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <checkAktifCalisma+0x5b4>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f083 0301 	eor.w	r3, r3, #1
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <checkAktifCalisma+0x568>
 8004578:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <checkAktifCalisma+0x5b8>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f083 0301 	eor.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <checkAktifCalisma+0x568>
 8004586:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <checkAktifCalisma+0x5ac>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	f083 0301 	eor.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004594:	2200      	movs	r2, #0
 8004596:	2102      	movs	r1, #2
 8004598:	4813      	ldr	r0, [pc, #76]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 800459a:	f005 fc44 	bl	8009e26 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800459e:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <checkAktifCalisma+0x5d0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80045a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004620 <checkAktifCalisma+0x5f4>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80045aa:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <checkAktifCalisma+0x5d0>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d040      	beq.n	8004634 <checkAktifCalisma+0x608>
 80045b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045b6:	480f      	ldr	r0, [pc, #60]	@ (80045f4 <checkAktifCalisma+0x5c8>)
 80045b8:	f005 fc1e 	bl	8009df8 <HAL_GPIO_ReadPin>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d138      	bne.n	8004634 <checkAktifCalisma+0x608>
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <checkAktifCalisma+0x604>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d034      	beq.n	8004634 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80045ca:	2201      	movs	r2, #1
 80045cc:	2101      	movs	r1, #1
 80045ce:	4806      	ldr	r0, [pc, #24]	@ (80045e8 <checkAktifCalisma+0x5bc>)
 80045d0:	f005 fc29 	bl	8009e26 <HAL_GPIO_WritePin>
 80045d4:	e033      	b.n	800463e <checkAktifCalisma+0x612>
 80045d6:	bf00      	nop
 80045d8:	200010f7 	.word	0x200010f7
 80045dc:	200010bd 	.word	0x200010bd
 80045e0:	200010f2 	.word	0x200010f2
 80045e4:	200010f3 	.word	0x200010f3
 80045e8:	40010c00 	.word	0x40010c00
 80045ec:	200010dd 	.word	0x200010dd
 80045f0:	200010f1 	.word	0x200010f1
 80045f4:	40011000 	.word	0x40011000
 80045f8:	200010a6 	.word	0x200010a6
 80045fc:	200010d8 	.word	0x200010d8
 8004600:	200010d5 	.word	0x200010d5
 8004604:	200010d9 	.word	0x200010d9
 8004608:	200010d6 	.word	0x200010d6
 800460c:	200010d7 	.word	0x200010d7
 8004610:	200010da 	.word	0x200010da
 8004614:	200010db 	.word	0x200010db
 8004618:	200010e0 	.word	0x200010e0
 800461c:	20001101 	.word	0x20001101
 8004620:	200010d0 	.word	0x200010d0
 8004624:	20001078 	.word	0x20001078
 8004628:	20001084 	.word	0x20001084
 800462c:	200010b5 	.word	0x200010b5
 8004630:	200010a5 	.word	0x200010a5
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004634:	2200      	movs	r2, #0
 8004636:	2101      	movs	r1, #1
 8004638:	4836      	ldr	r0, [pc, #216]	@ (8004714 <checkAktifCalisma+0x6e8>)
 800463a:	f005 fbf4 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800463e:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <checkAktifCalisma+0x6ec>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8080 	bne.w	8004748 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004648:	4b34      	ldr	r3, [pc, #208]	@ (800471c <checkAktifCalisma+0x6f0>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d003      	beq.n	8004658 <checkAktifCalisma+0x62c>
 8004650:	4b32      	ldr	r3, [pc, #200]	@ (800471c <checkAktifCalisma+0x6f0>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d177      	bne.n	8004748 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8004658:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <checkAktifCalisma+0x6f4>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d073      	beq.n	8004748 <checkAktifCalisma+0x71c>
 8004660:	4b30      	ldr	r3, [pc, #192]	@ (8004724 <checkAktifCalisma+0x6f8>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d06f      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800466c:	4829      	ldr	r0, [pc, #164]	@ (8004714 <checkAktifCalisma+0x6e8>)
 800466e:	f005 fbc3 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d167      	bne.n	8004748 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800467c:	482a      	ldr	r0, [pc, #168]	@ (8004728 <checkAktifCalisma+0x6fc>)
 800467e:	f005 fbbb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <checkAktifCalisma+0x664>
 8004688:	4b28      	ldr	r3, [pc, #160]	@ (800472c <checkAktifCalisma+0x700>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d15b      	bne.n	8004748 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004690:	2140      	movs	r1, #64	@ 0x40
 8004692:	4825      	ldr	r0, [pc, #148]	@ (8004728 <checkAktifCalisma+0x6fc>)
 8004694:	f005 fbb0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10f      	bne.n	80046be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800469e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046a2:	481c      	ldr	r0, [pc, #112]	@ (8004714 <checkAktifCalisma+0x6e8>)
 80046a4:	f005 fba8 	bl	8009df8 <HAL_GPIO_ReadPin>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80046ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046b2:	4818      	ldr	r0, [pc, #96]	@ (8004714 <checkAktifCalisma+0x6e8>)
 80046b4:	f005 fba0 	bl	8009df8 <HAL_GPIO_ReadPin>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d003      	beq.n	80046c6 <checkAktifCalisma+0x69a>
 80046be:	4b1c      	ldr	r3, [pc, #112]	@ (8004730 <checkAktifCalisma+0x704>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d040      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80046c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <checkAktifCalisma+0x708>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d039      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80046d4:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <checkAktifCalisma+0x70c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f083 0301 	eor.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d032      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80046e2:	4b16      	ldr	r3, [pc, #88]	@ (800473c <checkAktifCalisma+0x710>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	f083 0301 	eor.w	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02b      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <checkAktifCalisma+0x714>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f083 0301 	eor.w	r3, r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d024      	beq.n	8004748 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80046fe:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <checkAktifCalisma+0x718>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	f083 0301 	eor.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01d      	beq.n	8004748 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800470c:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <checkAktifCalisma+0x704>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e01c      	b.n	800474e <checkAktifCalisma+0x722>
 8004714:	40010c00 	.word	0x40010c00
 8004718:	200010bd 	.word	0x200010bd
 800471c:	200010af 	.word	0x200010af
 8004720:	200010f2 	.word	0x200010f2
 8004724:	200010f3 	.word	0x200010f3
 8004728:	40011000 	.word	0x40011000
 800472c:	200010b0 	.word	0x200010b0
 8004730:	200010d6 	.word	0x200010d6
 8004734:	200010d5 	.word	0x200010d5
 8004738:	200010d9 	.word	0x200010d9
 800473c:	200010d8 	.word	0x200010d8
 8004740:	200010d7 	.word	0x200010d7
 8004744:	200010db 	.word	0x200010db
		} else {
			devmotoryukaricalisiyor=0;
 8004748:	4b64      	ldr	r3, [pc, #400]	@ (80048dc <checkAktifCalisma+0x8b0>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800474e:	4b63      	ldr	r3, [pc, #396]	@ (80048dc <checkAktifCalisma+0x8b0>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004756:	2201      	movs	r2, #1
 8004758:	2120      	movs	r1, #32
 800475a:	4861      	ldr	r0, [pc, #388]	@ (80048e0 <checkAktifCalisma+0x8b4>)
 800475c:	f005 fb63 	bl	8009e26 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8004760:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <checkAktifCalisma+0x8b8>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004766:	4b5f      	ldr	r3, [pc, #380]	@ (80048e4 <checkAktifCalisma+0x8b8>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d025      	beq.n	80047ba <checkAktifCalisma+0x78e>
 800476e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004772:	485d      	ldr	r0, [pc, #372]	@ (80048e8 <checkAktifCalisma+0x8bc>)
 8004774:	f005 fb40 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d007      	beq.n	800478e <checkAktifCalisma+0x762>
 800477e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004782:	4857      	ldr	r0, [pc, #348]	@ (80048e0 <checkAktifCalisma+0x8b4>)
 8004784:	f005 fb38 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <checkAktifCalisma+0x78e>
 800478e:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <checkAktifCalisma+0x8c0>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d011      	beq.n	80047ba <checkAktifCalisma+0x78e>
 8004796:	4b56      	ldr	r3, [pc, #344]	@ (80048f0 <checkAktifCalisma+0x8c4>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <checkAktifCalisma+0x78e>
 800479e:	4b55      	ldr	r3, [pc, #340]	@ (80048f4 <checkAktifCalisma+0x8c8>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <checkAktifCalisma+0x78e>
			timer2=millis;
 80047ac:	4b52      	ldr	r3, [pc, #328]	@ (80048f8 <checkAktifCalisma+0x8cc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a52      	ldr	r2, [pc, #328]	@ (80048fc <checkAktifCalisma+0x8d0>)
 80047b2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80047b4:	4b4f      	ldr	r3, [pc, #316]	@ (80048f4 <checkAktifCalisma+0x8c8>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80047ba:	4b4f      	ldr	r3, [pc, #316]	@ (80048f8 <checkAktifCalisma+0x8cc>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b4f      	ldr	r3, [pc, #316]	@ (80048fc <checkAktifCalisma+0x8d0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004900 <checkAktifCalisma+0x8d4>)
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d303      	bcc.n	80047d4 <checkAktifCalisma+0x7a8>
 80047cc:	4b49      	ldr	r3, [pc, #292]	@ (80048f4 <checkAktifCalisma+0x8c8>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <checkAktifCalisma+0x7c4>
 80047d4:	4b45      	ldr	r3, [pc, #276]	@ (80048ec <checkAktifCalisma+0x8c0>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f083 0301 	eor.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <checkAktifCalisma+0x7c4>
 80047e2:	4b43      	ldr	r3, [pc, #268]	@ (80048f0 <checkAktifCalisma+0x8c4>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2120      	movs	r1, #32
 80047f4:	483a      	ldr	r0, [pc, #232]	@ (80048e0 <checkAktifCalisma+0x8b4>)
 80047f6:	f005 fb16 	bl	8009e26 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80047fa:	4b3a      	ldr	r3, [pc, #232]	@ (80048e4 <checkAktifCalisma+0x8b8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8004800:	4b3c      	ldr	r3, [pc, #240]	@ (80048f4 <checkAktifCalisma+0x8c8>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8004806:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <checkAktifCalisma+0x8d8>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 8088 	bne.w	8004920 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004810:	4b3d      	ldr	r3, [pc, #244]	@ (8004908 <checkAktifCalisma+0x8dc>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d003      	beq.n	8004820 <checkAktifCalisma+0x7f4>
 8004818:	4b3b      	ldr	r3, [pc, #236]	@ (8004908 <checkAktifCalisma+0x8dc>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d17f      	bne.n	8004920 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8004820:	4b32      	ldr	r3, [pc, #200]	@ (80048ec <checkAktifCalisma+0x8c0>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d07b      	beq.n	8004920 <checkAktifCalisma+0x8f4>
 8004828:	4b31      	ldr	r3, [pc, #196]	@ (80048f0 <checkAktifCalisma+0x8c4>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d077      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004830:	2140      	movs	r1, #64	@ 0x40
 8004832:	482b      	ldr	r0, [pc, #172]	@ (80048e0 <checkAktifCalisma+0x8b4>)
 8004834:	f005 fae0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d170      	bne.n	8004920 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800483e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004842:	4827      	ldr	r0, [pc, #156]	@ (80048e0 <checkAktifCalisma+0x8b4>)
 8004844:	f005 fad8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <checkAktifCalisma+0x82a>
 800484e:	4b2f      	ldr	r3, [pc, #188]	@ (800490c <checkAktifCalisma+0x8e0>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d164      	bne.n	8004920 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004856:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800485a:	4823      	ldr	r0, [pc, #140]	@ (80048e8 <checkAktifCalisma+0x8bc>)
 800485c:	f005 facc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10f      	bne.n	8004886 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004866:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800486a:	481f      	ldr	r0, [pc, #124]	@ (80048e8 <checkAktifCalisma+0x8bc>)
 800486c:	f005 fac4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800487a:	481b      	ldr	r0, [pc, #108]	@ (80048e8 <checkAktifCalisma+0x8bc>)
 800487c:	f005 fabc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d003      	beq.n	800488e <checkAktifCalisma+0x862>
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <checkAktifCalisma+0x8e4>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d048      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800488e:	4b21      	ldr	r3, [pc, #132]	@ (8004914 <checkAktifCalisma+0x8e8>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d041      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800489c:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <checkAktifCalisma+0x8ec>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d03a      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80048aa:	4b1c      	ldr	r3, [pc, #112]	@ (800491c <checkAktifCalisma+0x8f0>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f083 0301 	eor.w	r3, r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d033      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <checkAktifCalisma+0x8b8>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f083 0301 	eor.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d02c      	beq.n	8004920 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80048c6:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <checkAktifCalisma+0x8b0>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f083 0301 	eor.w	r3, r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d025      	beq.n	8004920 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80048d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <checkAktifCalisma+0x8e4>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e024      	b.n	8004926 <checkAktifCalisma+0x8fa>
 80048dc:	200010d6 	.word	0x200010d6
 80048e0:	40011000 	.word	0x40011000
 80048e4:	200010da 	.word	0x200010da
 80048e8:	40010c00 	.word	0x40010c00
 80048ec:	200010f2 	.word	0x200010f2
 80048f0:	200010f3 	.word	0x200010f3
 80048f4:	200010d2 	.word	0x200010d2
 80048f8:	20001078 	.word	0x20001078
 80048fc:	20001084 	.word	0x20001084
 8004900:	200010b6 	.word	0x200010b6
 8004904:	200010bd 	.word	0x200010bd
 8004908:	200010af 	.word	0x200010af
 800490c:	200010b1 	.word	0x200010b1
 8004910:	200010d7 	.word	0x200010d7
 8004914:	200010d5 	.word	0x200010d5
 8004918:	200010d9 	.word	0x200010d9
 800491c:	200010d8 	.word	0x200010d8
		} else {
			devmotorasagicalisiyor=0;
 8004920:	4b96      	ldr	r3, [pc, #600]	@ (8004b7c <checkAktifCalisma+0xb50>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8004926:	4b95      	ldr	r3, [pc, #596]	@ (8004b7c <checkAktifCalisma+0xb50>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800492e:	2201      	movs	r2, #1
 8004930:	2110      	movs	r1, #16
 8004932:	4893      	ldr	r0, [pc, #588]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004934:	f005 fa77 	bl	8009e26 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8004938:	4b92      	ldr	r3, [pc, #584]	@ (8004b84 <checkAktifCalisma+0xb58>)
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800493e:	4b91      	ldr	r3, [pc, #580]	@ (8004b84 <checkAktifCalisma+0xb58>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d024      	beq.n	8004990 <checkAktifCalisma+0x964>
 8004946:	2140      	movs	r1, #64	@ 0x40
 8004948:	488d      	ldr	r0, [pc, #564]	@ (8004b80 <checkAktifCalisma+0xb54>)
 800494a:	f005 fa55 	bl	8009df8 <HAL_GPIO_ReadPin>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d007      	beq.n	8004964 <checkAktifCalisma+0x938>
 8004954:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004958:	4889      	ldr	r0, [pc, #548]	@ (8004b80 <checkAktifCalisma+0xb54>)
 800495a:	f005 fa4d 	bl	8009df8 <HAL_GPIO_ReadPin>
 800495e:	4603      	mov	r3, r0
 8004960:	2b01      	cmp	r3, #1
 8004962:	d115      	bne.n	8004990 <checkAktifCalisma+0x964>
 8004964:	4b88      	ldr	r3, [pc, #544]	@ (8004b88 <checkAktifCalisma+0xb5c>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d011      	beq.n	8004990 <checkAktifCalisma+0x964>
 800496c:	4b87      	ldr	r3, [pc, #540]	@ (8004b8c <checkAktifCalisma+0xb60>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <checkAktifCalisma+0x964>
 8004974:	4b86      	ldr	r3, [pc, #536]	@ (8004b90 <checkAktifCalisma+0xb64>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f083 0301 	eor.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <checkAktifCalisma+0x964>
			timer2=millis;
 8004982:	4b84      	ldr	r3, [pc, #528]	@ (8004b94 <checkAktifCalisma+0xb68>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a84      	ldr	r2, [pc, #528]	@ (8004b98 <checkAktifCalisma+0xb6c>)
 8004988:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800498a:	4b81      	ldr	r3, [pc, #516]	@ (8004b90 <checkAktifCalisma+0xb64>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004990:	4b80      	ldr	r3, [pc, #512]	@ (8004b94 <checkAktifCalisma+0xb68>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b80      	ldr	r3, [pc, #512]	@ (8004b98 <checkAktifCalisma+0xb6c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	4a80      	ldr	r2, [pc, #512]	@ (8004b9c <checkAktifCalisma+0xb70>)
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	4293      	cmp	r3, r2
 80049a0:	d303      	bcc.n	80049aa <checkAktifCalisma+0x97e>
 80049a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004b90 <checkAktifCalisma+0xb64>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <checkAktifCalisma+0x99a>
 80049aa:	4b77      	ldr	r3, [pc, #476]	@ (8004b88 <checkAktifCalisma+0xb5c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <checkAktifCalisma+0x99a>
 80049b8:	4b74      	ldr	r3, [pc, #464]	@ (8004b8c <checkAktifCalisma+0xb60>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f083 0301 	eor.w	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2110      	movs	r1, #16
 80049ca:	486d      	ldr	r0, [pc, #436]	@ (8004b80 <checkAktifCalisma+0xb54>)
 80049cc:	f005 fa2b 	bl	8009e26 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80049d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b84 <checkAktifCalisma+0xb58>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80049d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004b90 <checkAktifCalisma+0xb64>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80049dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049e0:	486f      	ldr	r0, [pc, #444]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 80049e2:	f005 fa09 	bl	8009df8 <HAL_GPIO_ReadPin>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d120      	bne.n	8004a2e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80049ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049f0:	486b      	ldr	r0, [pc, #428]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 80049f2:	f005 fa01 	bl	8009df8 <HAL_GPIO_ReadPin>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d118      	bne.n	8004a2e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80049fc:	2104      	movs	r1, #4
 80049fe:	4868      	ldr	r0, [pc, #416]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 8004a00:	f005 f9fa 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d111      	bne.n	8004a2e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4864      	ldr	r0, [pc, #400]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 8004a0e:	f005 f9f3 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4861      	ldr	r0, [pc, #388]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 8004a1c:	f005 f9ec 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <checkAktifCalisma+0xa02>
			makineStop=1;
 8004a26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba4 <checkAktifCalisma+0xb78>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e002      	b.n	8004a34 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ba4 <checkAktifCalisma+0xb78>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba8 <checkAktifCalisma+0xb7c>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d144      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
 8004a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bac <checkAktifCalisma+0xb80>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d003      	beq.n	8004a4c <checkAktifCalisma+0xa20>
 8004a44:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <checkAktifCalisma+0xb80>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d13c      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a4c:	2180      	movs	r1, #128	@ 0x80
 8004a4e:	484c      	ldr	r0, [pc, #304]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004a50:	f005 f9d2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <checkAktifCalisma+0xa36>
 8004a5a:	4b55      	ldr	r3, [pc, #340]	@ (8004bb0 <checkAktifCalisma+0xb84>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <checkAktifCalisma+0xa4e>
 8004a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a66:	484e      	ldr	r0, [pc, #312]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 8004a68:	f005 f9c6 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d129      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
 8004a72:	4b4f      	ldr	r3, [pc, #316]	@ (8004bb0 <checkAktifCalisma+0xb84>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d125      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4840      	ldr	r0, [pc, #256]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004a7e:	f005 f9bb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d003      	beq.n	8004a90 <checkAktifCalisma+0xa64>
 8004a88:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb4 <checkAktifCalisma+0xb88>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11a      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004a90:	2102      	movs	r1, #2
 8004a92:	483b      	ldr	r0, [pc, #236]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004a94:	f005 f9b0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004a9e:	4b46      	ldr	r3, [pc, #280]	@ (8004bb8 <checkAktifCalisma+0xb8c>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f083 0301 	eor.w	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004aac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba4 <checkAktifCalisma+0xb78>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004ab4:	4b41      	ldr	r3, [pc, #260]	@ (8004bbc <checkAktifCalisma+0xb90>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004aba:	4b36      	ldr	r3, [pc, #216]	@ (8004b94 <checkAktifCalisma+0xb68>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a40      	ldr	r2, [pc, #256]	@ (8004bc0 <checkAktifCalisma+0xb94>)
 8004ac0:	6013      	str	r3, [r2, #0]
			bekle();
 8004ac2:	f7ff f917 	bl	8003cf4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004ac6:	4b33      	ldr	r3, [pc, #204]	@ (8004b94 <checkAktifCalisma+0xb68>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc0 <checkAktifCalisma+0xb94>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc4 <checkAktifCalisma+0xb98>)
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d211      	bcs.n	8004afc <checkAktifCalisma+0xad0>
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4829      	ldr	r0, [pc, #164]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004adc:	f005 f98c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <checkAktifCalisma+0xad0>
 8004ae6:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <checkAktifCalisma+0xb88>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <checkAktifCalisma+0xad0>
 8004aee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba4 <checkAktifCalisma+0xb78>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f083 0301 	eor.w	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004afc:	4b2f      	ldr	r3, [pc, #188]	@ (8004bbc <checkAktifCalisma+0xb90>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b02:	4b29      	ldr	r3, [pc, #164]	@ (8004ba8 <checkAktifCalisma+0xb7c>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d160      	bne.n	8004bcc <checkAktifCalisma+0xba0>
 8004b0a:	4b28      	ldr	r3, [pc, #160]	@ (8004bac <checkAktifCalisma+0xb80>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d003      	beq.n	8004b1a <checkAktifCalisma+0xaee>
 8004b12:	4b26      	ldr	r3, [pc, #152]	@ (8004bac <checkAktifCalisma+0xb80>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d158      	bne.n	8004bcc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4818      	ldr	r0, [pc, #96]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004b1e:	f005 f96b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d003      	beq.n	8004b30 <checkAktifCalisma+0xb04>
 8004b28:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <checkAktifCalisma+0xb88>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d14d      	bne.n	8004bcc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b30:	2102      	movs	r1, #2
 8004b32:	4813      	ldr	r0, [pc, #76]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004b34:	f005 f960 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d146      	bne.n	8004bcc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	480f      	ldr	r0, [pc, #60]	@ (8004b80 <checkAktifCalisma+0xb54>)
 8004b42:	f005 f959 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <checkAktifCalisma+0xb28>
 8004b4c:	4b18      	ldr	r3, [pc, #96]	@ (8004bb0 <checkAktifCalisma+0xb84>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <checkAktifCalisma+0xb40>
 8004b54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b58:	4811      	ldr	r0, [pc, #68]	@ (8004ba0 <checkAktifCalisma+0xb74>)
 8004b5a:	f005 f94d 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d133      	bne.n	8004bcc <checkAktifCalisma+0xba0>
 8004b64:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <checkAktifCalisma+0xb84>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d12f      	bne.n	8004bcc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <checkAktifCalisma+0xb78>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02b      	beq.n	8004bcc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004b74:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <checkAktifCalisma+0xb9c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e02a      	b.n	8004bd2 <checkAktifCalisma+0xba6>
 8004b7c:	200010d7 	.word	0x200010d7
 8004b80:	40011000 	.word	0x40011000
 8004b84:	200010db 	.word	0x200010db
 8004b88:	200010f2 	.word	0x200010f2
 8004b8c:	200010f3 	.word	0x200010f3
 8004b90:	200010d3 	.word	0x200010d3
 8004b94:	20001078 	.word	0x20001078
 8004b98:	20001084 	.word	0x20001084
 8004b9c:	200010b6 	.word	0x200010b6
 8004ba0:	40010c00 	.word	0x40010c00
 8004ba4:	200010e2 	.word	0x200010e2
 8004ba8:	200010a9 	.word	0x200010a9
 8004bac:	200010a8 	.word	0x200010a8
 8004bb0:	200010ac 	.word	0x200010ac
 8004bb4:	200010a6 	.word	0x200010a6
 8004bb8:	200010cf 	.word	0x200010cf
 8004bbc:	200010e3 	.word	0x200010e3
 8004bc0:	2000107c 	.word	0x2000107c
 8004bc4:	200010b9 	.word	0x200010b9
 8004bc8:	200010e4 	.word	0x200010e4
		} else {
			kapi1butonkontrol=0;
 8004bcc:	4b8b      	ldr	r3, [pc, #556]	@ (8004dfc <checkAktifCalisma+0xdd0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004e00 <checkAktifCalisma+0xdd4>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d121      	bne.n	8004c1e <checkAktifCalisma+0xbf2>
 8004bda:	4b8a      	ldr	r3, [pc, #552]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d003      	beq.n	8004bea <checkAktifCalisma+0xbbe>
 8004be2:	4b88      	ldr	r3, [pc, #544]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d119      	bne.n	8004c1e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bea:	2104      	movs	r1, #4
 8004bec:	4886      	ldr	r0, [pc, #536]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004bee:	f005 f903 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d003      	beq.n	8004c00 <checkAktifCalisma+0xbd4>
 8004bf8:	4b84      	ldr	r3, [pc, #528]	@ (8004e0c <checkAktifCalisma+0xde0>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10e      	bne.n	8004c1e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c00:	2102      	movs	r1, #2
 8004c02:	4881      	ldr	r0, [pc, #516]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004c04:	f005 f8f8 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004c0e:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <checkAktifCalisma+0xde4>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004c16:	4b7f      	ldr	r3, [pc, #508]	@ (8004e14 <checkAktifCalisma+0xde8>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e002      	b.n	8004c24 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e14 <checkAktifCalisma+0xde8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004c24:	4b75      	ldr	r3, [pc, #468]	@ (8004dfc <checkAktifCalisma+0xdd0>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <checkAktifCalisma+0xc10>
 8004c2c:	4b79      	ldr	r3, [pc, #484]	@ (8004e14 <checkAktifCalisma+0xde8>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <checkAktifCalisma+0xc10>
 8004c34:	4b78      	ldr	r3, [pc, #480]	@ (8004e18 <checkAktifCalisma+0xdec>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	4876      	ldr	r0, [pc, #472]	@ (8004e1c <checkAktifCalisma+0xdf0>)
 8004c42:	f005 f8f0 	bl	8009e26 <HAL_GPIO_WritePin>
 8004c46:	e004      	b.n	8004c52 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	@ 0x80
 8004c4c:	4873      	ldr	r0, [pc, #460]	@ (8004e1c <checkAktifCalisma+0xdf0>)
 8004c4e:	f005 f8ea 	bl	8009e26 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c52:	4b73      	ldr	r3, [pc, #460]	@ (8004e20 <checkAktifCalisma+0xdf4>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d141      	bne.n	8004cde <checkAktifCalisma+0xcb2>
 8004c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d003      	beq.n	8004c6a <checkAktifCalisma+0xc3e>
 8004c62:	4b68      	ldr	r3, [pc, #416]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d139      	bne.n	8004cde <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c6e:	4866      	ldr	r0, [pc, #408]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004c70:	f005 f8c2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <checkAktifCalisma+0xc56>
 8004c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <checkAktifCalisma+0xdf8>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <checkAktifCalisma+0xc6e>
 8004c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c86:	4868      	ldr	r0, [pc, #416]	@ (8004e28 <checkAktifCalisma+0xdfc>)
 8004c88:	f005 f8b6 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d125      	bne.n	8004cde <checkAktifCalisma+0xcb2>
 8004c92:	4b64      	ldr	r3, [pc, #400]	@ (8004e24 <checkAktifCalisma+0xdf8>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d121      	bne.n	8004cde <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	485a      	ldr	r0, [pc, #360]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004c9e:	f005 f8ab 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11a      	bne.n	8004cde <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4857      	ldr	r0, [pc, #348]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004cac:	f005 f8a4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004cb6:	4b56      	ldr	r3, [pc, #344]	@ (8004e10 <checkAktifCalisma+0xde4>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <checkAktifCalisma+0xe00>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f083 0301 	eor.w	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004ccc:	4b58      	ldr	r3, [pc, #352]	@ (8004e30 <checkAktifCalisma+0xe04>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004cd2:	4b58      	ldr	r3, [pc, #352]	@ (8004e34 <checkAktifCalisma+0xe08>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a58      	ldr	r2, [pc, #352]	@ (8004e38 <checkAktifCalisma+0xe0c>)
 8004cd8:	6013      	str	r3, [r2, #0]
			bekle();
 8004cda:	f7ff f80b 	bl	8003cf4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004cde:	4b55      	ldr	r3, [pc, #340]	@ (8004e34 <checkAktifCalisma+0xe08>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b55      	ldr	r3, [pc, #340]	@ (8004e38 <checkAktifCalisma+0xe0c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4a54      	ldr	r2, [pc, #336]	@ (8004e3c <checkAktifCalisma+0xe10>)
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d20d      	bcs.n	8004d0c <checkAktifCalisma+0xce0>
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4845      	ldr	r0, [pc, #276]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004cf4:	f005 f880 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <checkAktifCalisma+0xce0>
 8004cfe:	4b44      	ldr	r3, [pc, #272]	@ (8004e10 <checkAktifCalisma+0xde4>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f083 0301 	eor.w	r3, r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004d0c:	4b48      	ldr	r3, [pc, #288]	@ (8004e30 <checkAktifCalisma+0xe04>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d12:	4b43      	ldr	r3, [pc, #268]	@ (8004e20 <checkAktifCalisma+0xdf4>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d135      	bne.n	8004d86 <checkAktifCalisma+0xd5a>
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d003      	beq.n	8004d2a <checkAktifCalisma+0xcfe>
 8004d22:	4b38      	ldr	r3, [pc, #224]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d12d      	bne.n	8004d86 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d2e:	4836      	ldr	r0, [pc, #216]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004d30:	f005 f862 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <checkAktifCalisma+0xd16>
 8004d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e24 <checkAktifCalisma+0xdf8>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <checkAktifCalisma+0xd2e>
 8004d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d46:	4838      	ldr	r0, [pc, #224]	@ (8004e28 <checkAktifCalisma+0xdfc>)
 8004d48:	f005 f856 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <checkAktifCalisma+0xd5a>
 8004d52:	4b34      	ldr	r3, [pc, #208]	@ (8004e24 <checkAktifCalisma+0xdf8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d115      	bne.n	8004d86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	482a      	ldr	r0, [pc, #168]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004d5e:	f005 f84b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10e      	bne.n	8004d86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4827      	ldr	r0, [pc, #156]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004d6c:	f005 f844 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004d76:	4b26      	ldr	r3, [pc, #152]	@ (8004e10 <checkAktifCalisma+0xde4>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004d7e:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <checkAktifCalisma+0xe14>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e002      	b.n	8004d8c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004d86:	4b2e      	ldr	r3, [pc, #184]	@ (8004e40 <checkAktifCalisma+0xe14>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d8c:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <checkAktifCalisma+0xdf4>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d11d      	bne.n	8004dd0 <checkAktifCalisma+0xda4>
 8004d94:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d003      	beq.n	8004da4 <checkAktifCalisma+0xd78>
 8004d9c:	4b19      	ldr	r3, [pc, #100]	@ (8004e04 <checkAktifCalisma+0xdd8>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d115      	bne.n	8004dd0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004da4:	2102      	movs	r1, #2
 8004da6:	4818      	ldr	r0, [pc, #96]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004da8:	f005 f826 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10e      	bne.n	8004dd0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004db2:	2104      	movs	r1, #4
 8004db4:	4814      	ldr	r0, [pc, #80]	@ (8004e08 <checkAktifCalisma+0xddc>)
 8004db6:	f005 f81f 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004dc0:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <checkAktifCalisma+0xde4>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <checkAktifCalisma+0xe18>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e002      	b.n	8004dd6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e44 <checkAktifCalisma+0xe18>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <checkAktifCalisma+0xe14>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <checkAktifCalisma+0xdc2>
 8004dde:	4b19      	ldr	r3, [pc, #100]	@ (8004e44 <checkAktifCalisma+0xe18>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <checkAktifCalisma+0xdc2>
 8004de6:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <checkAktifCalisma+0xe04>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02c      	beq.n	8004e48 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004dee:	2201      	movs	r2, #1
 8004df0:	2140      	movs	r1, #64	@ 0x40
 8004df2:	480a      	ldr	r0, [pc, #40]	@ (8004e1c <checkAktifCalisma+0xdf0>)
 8004df4:	f005 f817 	bl	8009e26 <HAL_GPIO_WritePin>
 8004df8:	e02b      	b.n	8004e52 <checkAktifCalisma+0xe26>
 8004dfa:	bf00      	nop
 8004dfc:	200010e4 	.word	0x200010e4
 8004e00:	200010a9 	.word	0x200010a9
 8004e04:	200010a8 	.word	0x200010a8
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	200010a6 	.word	0x200010a6
 8004e10:	200010e2 	.word	0x200010e2
 8004e14:	200010e5 	.word	0x200010e5
 8004e18:	200010e3 	.word	0x200010e3
 8004e1c:	40010800 	.word	0x40010800
 8004e20:	200010aa 	.word	0x200010aa
 8004e24:	200010ac 	.word	0x200010ac
 8004e28:	40010c00 	.word	0x40010c00
 8004e2c:	200010cf 	.word	0x200010cf
 8004e30:	200010e6 	.word	0x200010e6
 8004e34:	20001078 	.word	0x20001078
 8004e38:	2000107c 	.word	0x2000107c
 8004e3c:	200010ba 	.word	0x200010ba
 8004e40:	200010e7 	.word	0x200010e7
 8004e44:	200010e8 	.word	0x200010e8
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2140      	movs	r1, #64	@ 0x40
 8004e4c:	488d      	ldr	r0, [pc, #564]	@ (8005084 <checkAktifCalisma+0x1058>)
 8004e4e:	f004 ffea 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004e52:	4b8d      	ldr	r3, [pc, #564]	@ (8005088 <checkAktifCalisma+0x105c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <checkAktifCalisma+0xe36>
 8004e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8005088 <checkAktifCalisma+0x105c>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d115      	bne.n	8004e8e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e62:	2104      	movs	r1, #4
 8004e64:	4889      	ldr	r0, [pc, #548]	@ (800508c <checkAktifCalisma+0x1060>)
 8004e66:	f004 ffc7 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d003      	beq.n	8004e78 <checkAktifCalisma+0xe4c>
 8004e70:	4b87      	ldr	r3, [pc, #540]	@ (8005090 <checkAktifCalisma+0x1064>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4884      	ldr	r0, [pc, #528]	@ (800508c <checkAktifCalisma+0x1060>)
 8004e7c:	f004 ffbc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004e86:	4b83      	ldr	r3, [pc, #524]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e002      	b.n	8004e94 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004e8e:	4b81      	ldr	r3, [pc, #516]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004e94:	4b7c      	ldr	r3, [pc, #496]	@ (8005088 <checkAktifCalisma+0x105c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d003      	beq.n	8004ea4 <checkAktifCalisma+0xe78>
 8004e9c:	4b7a      	ldr	r3, [pc, #488]	@ (8005088 <checkAktifCalisma+0x105c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d111      	bne.n	8004ec8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4879      	ldr	r0, [pc, #484]	@ (800508c <checkAktifCalisma+0x1060>)
 8004ea8:	f004 ffa6 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10a      	bne.n	8004ec8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	4875      	ldr	r0, [pc, #468]	@ (800508c <checkAktifCalisma+0x1060>)
 8004eb6:	f004 ff9f 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004ec0:	4b75      	ldr	r3, [pc, #468]	@ (8005098 <checkAktifCalisma+0x106c>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004ec8:	4b73      	ldr	r3, [pc, #460]	@ (8005098 <checkAktifCalisma+0x106c>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004ece:	4b71      	ldr	r3, [pc, #452]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004ed6:	4b71      	ldr	r3, [pc, #452]	@ (800509c <checkAktifCalisma+0x1070>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10b      	bne.n	8004ef6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004ede:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ee2:	486f      	ldr	r0, [pc, #444]	@ (80050a0 <checkAktifCalisma+0x1074>)
 8004ee4:	f004 ff88 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004eee:	4b6d      	ldr	r3, [pc, #436]	@ (80050a4 <checkAktifCalisma+0x1078>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80050a4 <checkAktifCalisma+0x1078>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004efc:	4b66      	ldr	r3, [pc, #408]	@ (8005098 <checkAktifCalisma+0x106c>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00f      	beq.n	8004f24 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004f04:	4b65      	ldr	r3, [pc, #404]	@ (800509c <checkAktifCalisma+0x1070>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10b      	bne.n	8004f24 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f10:	4863      	ldr	r0, [pc, #396]	@ (80050a0 <checkAktifCalisma+0x1074>)
 8004f12:	f004 ff71 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004f1c:	4b62      	ldr	r3, [pc, #392]	@ (80050a8 <checkAktifCalisma+0x107c>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004f24:	4b60      	ldr	r3, [pc, #384]	@ (80050a8 <checkAktifCalisma+0x107c>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f2a:	4b60      	ldr	r3, [pc, #384]	@ (80050ac <checkAktifCalisma+0x1080>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d137      	bne.n	8004fa2 <checkAktifCalisma+0xf76>
 8004f32:	4b5f      	ldr	r3, [pc, #380]	@ (80050b0 <checkAktifCalisma+0x1084>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d003      	beq.n	8004f42 <checkAktifCalisma+0xf16>
 8004f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80050b0 <checkAktifCalisma+0x1084>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d12f      	bne.n	8004fa2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f42:	4b54      	ldr	r3, [pc, #336]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <checkAktifCalisma+0xf26>
 8004f4a:	4b53      	ldr	r3, [pc, #332]	@ (8005098 <checkAktifCalisma+0x106c>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d027      	beq.n	8004fa2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8004f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f56:	484d      	ldr	r0, [pc, #308]	@ (800508c <checkAktifCalisma+0x1060>)
 8004f58:	f004 ff4e 	bl	8009df8 <HAL_GPIO_ReadPin>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <checkAktifCalisma+0xf3e>
 8004f62:	4b4e      	ldr	r3, [pc, #312]	@ (800509c <checkAktifCalisma+0x1070>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80050a4 <checkAktifCalisma+0x1078>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <checkAktifCalisma+0xf4e>
 8004f72:	4b4d      	ldr	r3, [pc, #308]	@ (80050a8 <checkAktifCalisma+0x107c>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d013      	beq.n	8004fa2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80050b4 <checkAktifCalisma+0x1088>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00f      	beq.n	8004fa2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8004f82:	4b4d      	ldr	r3, [pc, #308]	@ (80050b8 <checkAktifCalisma+0x108c>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8004f90:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <checkAktifCalisma+0x1090>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <checkAktifCalisma+0x1094>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80050c4 <checkAktifCalisma+0x1098>)
 8004f9c:	6013      	str	r3, [r2, #0]
			bekle();
 8004f9e:	f7fe fea9 	bl	8003cf4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004fa2:	4b47      	ldr	r3, [pc, #284]	@ (80050c0 <checkAktifCalisma+0x1094>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <checkAktifCalisma+0x1098>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	4a46      	ldr	r2, [pc, #280]	@ (80050c8 <checkAktifCalisma+0x109c>)
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d214      	bcs.n	8004fde <checkAktifCalisma+0xfb2>
 8004fb4:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f083 0301 	eor.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <checkAktifCalisma+0xfa4>
 8004fc2:	4b35      	ldr	r3, [pc, #212]	@ (8005098 <checkAktifCalisma+0x106c>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	f083 0301 	eor.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <checkAktifCalisma+0xfb2>
 8004fd0:	4b38      	ldr	r3, [pc, #224]	@ (80050b4 <checkAktifCalisma+0x1088>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f083 0301 	eor.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8004fde:	4b37      	ldr	r3, [pc, #220]	@ (80050bc <checkAktifCalisma+0x1090>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004fe4:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <checkAktifCalisma+0x1080>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d12b      	bne.n	8005044 <checkAktifCalisma+0x1018>
 8004fec:	4b30      	ldr	r3, [pc, #192]	@ (80050b0 <checkAktifCalisma+0x1084>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d003      	beq.n	8004ffc <checkAktifCalisma+0xfd0>
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80050b0 <checkAktifCalisma+0x1084>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d123      	bne.n	8005044 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <checkAktifCalisma+0x1068>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <checkAktifCalisma+0xfe0>
 8005004:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <checkAktifCalisma+0x106c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800500c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005010:	481e      	ldr	r0, [pc, #120]	@ (800508c <checkAktifCalisma+0x1060>)
 8005012:	f004 fef1 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <checkAktifCalisma+0xff8>
 800501c:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <checkAktifCalisma+0x1070>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005024:	4b1f      	ldr	r3, [pc, #124]	@ (80050a4 <checkAktifCalisma+0x1078>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <checkAktifCalisma+0x1008>
 800502c:	4b1e      	ldr	r3, [pc, #120]	@ (80050a8 <checkAktifCalisma+0x107c>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005034:	4b1f      	ldr	r3, [pc, #124]	@ (80050b4 <checkAktifCalisma+0x1088>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 800503c:	4b23      	ldr	r3, [pc, #140]	@ (80050cc <checkAktifCalisma+0x10a0>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e002      	b.n	800504a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005044:	4b21      	ldr	r3, [pc, #132]	@ (80050cc <checkAktifCalisma+0x10a0>)
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800504a:	4b18      	ldr	r3, [pc, #96]	@ (80050ac <checkAktifCalisma+0x1080>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d140      	bne.n	80050d4 <checkAktifCalisma+0x10a8>
 8005052:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <checkAktifCalisma+0x1084>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d003      	beq.n	8005062 <checkAktifCalisma+0x1036>
 800505a:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <checkAktifCalisma+0x1084>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d138      	bne.n	80050d4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005062:	4b0c      	ldr	r3, [pc, #48]	@ (8005094 <checkAktifCalisma+0x1068>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <checkAktifCalisma+0x1046>
 800506a:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <checkAktifCalisma+0x106c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d030      	beq.n	80050d4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <checkAktifCalisma+0x1088>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02c      	beq.n	80050d4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <checkAktifCalisma+0x10a4>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e02b      	b.n	80050da <checkAktifCalisma+0x10ae>
 8005082:	bf00      	nop
 8005084:	40010800 	.word	0x40010800
 8005088:	200010ad 	.word	0x200010ad
 800508c:	40011000 	.word	0x40011000
 8005090:	200010a6 	.word	0x200010a6
 8005094:	200010ec 	.word	0x200010ec
 8005098:	200010ed 	.word	0x200010ed
 800509c:	200010ac 	.word	0x200010ac
 80050a0:	40010c00 	.word	0x40010c00
 80050a4:	200010fc 	.word	0x200010fc
 80050a8:	200010fd 	.word	0x200010fd
 80050ac:	200010ab 	.word	0x200010ab
 80050b0:	200010a8 	.word	0x200010a8
 80050b4:	200010e2 	.word	0x200010e2
 80050b8:	200010cf 	.word	0x200010cf
 80050bc:	200010e9 	.word	0x200010e9
 80050c0:	20001078 	.word	0x20001078
 80050c4:	2000107c 	.word	0x2000107c
 80050c8:	200010bb 	.word	0x200010bb
 80050cc:	200010ea 	.word	0x200010ea
 80050d0:	200010eb 	.word	0x200010eb
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80050d4:	4b8b      	ldr	r3, [pc, #556]	@ (8005304 <checkAktifCalisma+0x12d8>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80050da:	4b8b      	ldr	r3, [pc, #556]	@ (8005308 <checkAktifCalisma+0x12dc>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <checkAktifCalisma+0x10c6>
 80050e2:	4b8a      	ldr	r3, [pc, #552]	@ (800530c <checkAktifCalisma+0x12e0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <checkAktifCalisma+0x10c6>
 80050ea:	4b86      	ldr	r3, [pc, #536]	@ (8005304 <checkAktifCalisma+0x12d8>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80050f2:	2201      	movs	r2, #1
 80050f4:	2120      	movs	r1, #32
 80050f6:	4886      	ldr	r0, [pc, #536]	@ (8005310 <checkAktifCalisma+0x12e4>)
 80050f8:	f004 fe95 	bl	8009e26 <HAL_GPIO_WritePin>
 80050fc:	e004      	b.n	8005108 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80050fe:	2200      	movs	r2, #0
 8005100:	2120      	movs	r1, #32
 8005102:	4883      	ldr	r0, [pc, #524]	@ (8005310 <checkAktifCalisma+0x12e4>)
 8005104:	f004 fe8f 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005108:	4b82      	ldr	r3, [pc, #520]	@ (8005314 <checkAktifCalisma+0x12e8>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <checkAktifCalisma+0x1102>
 8005110:	2102      	movs	r1, #2
 8005112:	4881      	ldr	r0, [pc, #516]	@ (8005318 <checkAktifCalisma+0x12ec>)
 8005114:	f004 fe70 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d107      	bne.n	800512e <checkAktifCalisma+0x1102>
 800511e:	4b7f      	ldr	r3, [pc, #508]	@ (800531c <checkAktifCalisma+0x12f0>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <checkAktifCalisma+0x1102>
 8005126:	4b7e      	ldr	r3, [pc, #504]	@ (8005320 <checkAktifCalisma+0x12f4>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d112      	bne.n	8005154 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800512e:	4b7d      	ldr	r3, [pc, #500]	@ (8005324 <checkAktifCalisma+0x12f8>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d066      	beq.n	8005204 <checkAktifCalisma+0x11d8>
 8005136:	2104      	movs	r1, #4
 8005138:	4877      	ldr	r0, [pc, #476]	@ (8005318 <checkAktifCalisma+0x12ec>)
 800513a:	f004 fe5d 	bl	8009df8 <HAL_GPIO_ReadPin>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d15f      	bne.n	8005204 <checkAktifCalisma+0x11d8>
 8005144:	4b75      	ldr	r3, [pc, #468]	@ (800531c <checkAktifCalisma+0x12f0>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d05b      	beq.n	8005204 <checkAktifCalisma+0x11d8>
 800514c:	4b74      	ldr	r3, [pc, #464]	@ (8005320 <checkAktifCalisma+0x12f4>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d057      	beq.n	8005204 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005154:	4b74      	ldr	r3, [pc, #464]	@ (8005328 <checkAktifCalisma+0x12fc>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	4b72      	ldr	r3, [pc, #456]	@ (8005328 <checkAktifCalisma+0x12fc>)
 800515e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005160:	4b71      	ldr	r3, [pc, #452]	@ (8005328 <checkAktifCalisma+0x12fc>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d908      	bls.n	800517a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005168:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <checkAktifCalisma+0x12fc>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800516e:	4b6f      	ldr	r3, [pc, #444]	@ (800532c <checkAktifCalisma+0x1300>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <checkAktifCalisma+0x1300>)
 8005178:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800517a:	4b6c      	ldr	r3, [pc, #432]	@ (800532c <checkAktifCalisma+0x1300>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b09      	cmp	r3, #9
 8005180:	d908      	bls.n	8005194 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005182:	4b6a      	ldr	r3, [pc, #424]	@ (800532c <checkAktifCalisma+0x1300>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005188:	4b69      	ldr	r3, [pc, #420]	@ (8005330 <checkAktifCalisma+0x1304>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <checkAktifCalisma+0x1304>)
 8005192:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005194:	4b66      	ldr	r3, [pc, #408]	@ (8005330 <checkAktifCalisma+0x1304>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b09      	cmp	r3, #9
 800519a:	d908      	bls.n	80051ae <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800519c:	4b64      	ldr	r3, [pc, #400]	@ (8005330 <checkAktifCalisma+0x1304>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80051a2:	4b64      	ldr	r3, [pc, #400]	@ (8005334 <checkAktifCalisma+0x1308>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b62      	ldr	r3, [pc, #392]	@ (8005334 <checkAktifCalisma+0x1308>)
 80051ac:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80051ae:	4b61      	ldr	r3, [pc, #388]	@ (8005334 <checkAktifCalisma+0x1308>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b09      	cmp	r3, #9
 80051b4:	d908      	bls.n	80051c8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80051b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005334 <checkAktifCalisma+0x1308>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80051bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005338 <checkAktifCalisma+0x130c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005338 <checkAktifCalisma+0x130c>)
 80051c6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80051c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005338 <checkAktifCalisma+0x130c>)
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <checkAktifCalisma+0x1310>)
 80051ce:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80051d2:	4b58      	ldr	r3, [pc, #352]	@ (8005334 <checkAktifCalisma+0x1308>)
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	4b59      	ldr	r3, [pc, #356]	@ (800533c <checkAktifCalisma+0x1310>)
 80051d8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80051da:	4b55      	ldr	r3, [pc, #340]	@ (8005330 <checkAktifCalisma+0x1304>)
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	4b57      	ldr	r3, [pc, #348]	@ (800533c <checkAktifCalisma+0x1310>)
 80051e0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80051e2:	4b52      	ldr	r3, [pc, #328]	@ (800532c <checkAktifCalisma+0x1300>)
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	4b55      	ldr	r3, [pc, #340]	@ (800533c <checkAktifCalisma+0x1310>)
 80051e8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80051ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005328 <checkAktifCalisma+0x12fc>)
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	4b53      	ldr	r3, [pc, #332]	@ (800533c <checkAktifCalisma+0x1310>)
 80051f0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80051f2:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <checkAktifCalisma+0x1314>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80051f8:	4b46      	ldr	r3, [pc, #280]	@ (8005314 <checkAktifCalisma+0x12e8>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80051fe:	4b49      	ldr	r3, [pc, #292]	@ (8005324 <checkAktifCalisma+0x12f8>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005204:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005208:	484e      	ldr	r0, [pc, #312]	@ (8005344 <checkAktifCalisma+0x1318>)
 800520a:	f004 fdf5 	bl	8009df8 <HAL_GPIO_ReadPin>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d016      	beq.n	8005242 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005214:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005218:	484a      	ldr	r0, [pc, #296]	@ (8005344 <checkAktifCalisma+0x1318>)
 800521a:	f004 fded 	bl	8009df8 <HAL_GPIO_ReadPin>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00e      	beq.n	8005242 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005228:	4846      	ldr	r0, [pc, #280]	@ (8005344 <checkAktifCalisma+0x1318>)
 800522a:	f004 fde5 	bl	8009df8 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	4838      	ldr	r0, [pc, #224]	@ (8005318 <checkAktifCalisma+0x12ec>)
 8005238:	f004 fdde 	bl	8009df8 <HAL_GPIO_ReadPin>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005242:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <checkAktifCalisma+0x131c>)
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e002      	b.n	8005250 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800524a:	4b3f      	ldr	r3, [pc, #252]	@ (8005348 <checkAktifCalisma+0x131c>)
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005250:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <checkAktifCalisma+0x131c>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d016      	beq.n	8005286 <checkAktifCalisma+0x125a>
 8005258:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800525c:	4839      	ldr	r0, [pc, #228]	@ (8005344 <checkAktifCalisma+0x1318>)
 800525e:	f004 fdcb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d10e      	bne.n	8005286 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005268:	4b38      	ldr	r3, [pc, #224]	@ (800534c <checkAktifCalisma+0x1320>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800526e:	2001      	movs	r0, #1
 8005270:	f7fb fbe0 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005274:	2001      	movs	r0, #1
 8005276:	f7fb fb85 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800527a:	f003 f875 	bl	8008368 <convertAndSendData>
			acilstophatasi=1;
 800527e:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <checkAktifCalisma+0x1324>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e018      	b.n	80052b8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005286:	4b32      	ldr	r3, [pc, #200]	@ (8005350 <checkAktifCalisma+0x1324>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <checkAktifCalisma+0x128c>
 800528e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005292:	482c      	ldr	r0, [pc, #176]	@ (8005344 <checkAktifCalisma+0x1318>)
 8005294:	f004 fdb0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <checkAktifCalisma+0x128c>
 800529e:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <checkAktifCalisma+0x131c>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f083 0301 	eor.w	r3, r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <checkAktifCalisma+0x1324>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80052b2:	2001      	movs	r0, #1
 80052b4:	f7fe fcb4 	bl	8003c20 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80052b8:	4b26      	ldr	r3, [pc, #152]	@ (8005354 <checkAktifCalisma+0x1328>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04e      	beq.n	8005364 <checkAktifCalisma+0x1338>
 80052c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052ca:	481e      	ldr	r0, [pc, #120]	@ (8005344 <checkAktifCalisma+0x1318>)
 80052cc:	f004 fd94 	bl	8009df8 <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <checkAktifCalisma+0x12b2>
 80052d6:	4b20      	ldr	r3, [pc, #128]	@ (8005358 <checkAktifCalisma+0x132c>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d042      	beq.n	8005364 <checkAktifCalisma+0x1338>
 80052de:	4b1f      	ldr	r3, [pc, #124]	@ (800535c <checkAktifCalisma+0x1330>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d13e      	bne.n	8005364 <checkAktifCalisma+0x1338>
			hataVar=1;
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <checkAktifCalisma+0x1320>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80052ec:	2002      	movs	r0, #2
 80052ee:	f7fb fba1 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80052f2:	2002      	movs	r0, #2
 80052f4:	f7fb fb46 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80052f8:	f003 f836 	bl	8008368 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80052fc:	4b18      	ldr	r3, [pc, #96]	@ (8005360 <checkAktifCalisma+0x1334>)
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e047      	b.n	8005394 <checkAktifCalisma+0x1368>
 8005304:	200010eb 	.word	0x200010eb
 8005308:	200010ea 	.word	0x200010ea
 800530c:	200010e9 	.word	0x200010e9
 8005310:	40010800 	.word	0x40010800
 8005314:	200010df 	.word	0x200010df
 8005318:	40011000 	.word	0x40011000
 800531c:	200010a6 	.word	0x200010a6
 8005320:	200010e2 	.word	0x200010e2
 8005324:	200010e0 	.word	0x200010e0
 8005328:	2000109d 	.word	0x2000109d
 800532c:	2000109e 	.word	0x2000109e
 8005330:	20000000 	.word	0x20000000
 8005334:	20000001 	.word	0x20000001
 8005338:	2000109f 	.word	0x2000109f
 800533c:	20000fc8 	.word	0x20000fc8
 8005340:	200010cc 	.word	0x200010cc
 8005344:	40010c00 	.word	0x40010c00
 8005348:	200010ee 	.word	0x200010ee
 800534c:	200010f5 	.word	0x200010f5
 8005350:	200010f0 	.word	0x200010f0
 8005354:	200010f7 	.word	0x200010f7
 8005358:	20001101 	.word	0x20001101
 800535c:	200010a4 	.word	0x200010a4
 8005360:	200010f1 	.word	0x200010f1
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005364:	4b9b      	ldr	r3, [pc, #620]	@ (80055d4 <checkAktifCalisma+0x15a8>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <checkAktifCalisma+0x1368>
 800536c:	4b9a      	ldr	r3, [pc, #616]	@ (80055d8 <checkAktifCalisma+0x15ac>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00f      	beq.n	8005394 <checkAktifCalisma+0x1368>
 8005374:	4b99      	ldr	r3, [pc, #612]	@ (80055dc <checkAktifCalisma+0x15b0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005382:	4b94      	ldr	r3, [pc, #592]	@ (80055d4 <checkAktifCalisma+0x15a8>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005388:	4b95      	ldr	r3, [pc, #596]	@ (80055e0 <checkAktifCalisma+0x15b4>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800538e:	2002      	movs	r0, #2
 8005390:	f7fe fc46 	bl	8003c20 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005394:	4b93      	ldr	r3, [pc, #588]	@ (80055e4 <checkAktifCalisma+0x15b8>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11e      	bne.n	80053da <checkAktifCalisma+0x13ae>
 800539c:	4b92      	ldr	r3, [pc, #584]	@ (80055e8 <checkAktifCalisma+0x15bc>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11a      	bne.n	80053da <checkAktifCalisma+0x13ae>
 80053a4:	4b91      	ldr	r3, [pc, #580]	@ (80055ec <checkAktifCalisma+0x15c0>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <checkAktifCalisma+0x13ae>
 80053ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053b0:	488f      	ldr	r0, [pc, #572]	@ (80055f0 <checkAktifCalisma+0x15c4>)
 80053b2:	f004 fd21 	bl	8009df8 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10e      	bne.n	80053da <checkAktifCalisma+0x13ae>
			hataVar=1;
 80053bc:	4b8d      	ldr	r3, [pc, #564]	@ (80055f4 <checkAktifCalisma+0x15c8>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80053c2:	2003      	movs	r0, #3
 80053c4:	f7fb fb36 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80053c8:	2003      	movs	r0, #3
 80053ca:	f7fb fadb 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80053ce:	f002 ffcb 	bl	8008368 <convertAndSendData>
			basinchatasi=1;
 80053d2:	4b89      	ldr	r3, [pc, #548]	@ (80055f8 <checkAktifCalisma+0x15cc>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e015      	b.n	8005406 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80053da:	4b87      	ldr	r3, [pc, #540]	@ (80055f8 <checkAktifCalisma+0x15cc>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d011      	beq.n	8005406 <checkAktifCalisma+0x13da>
 80053e2:	4b80      	ldr	r3, [pc, #512]	@ (80055e4 <checkAktifCalisma+0x15b8>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10d      	bne.n	8005406 <checkAktifCalisma+0x13da>
 80053ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053ee:	4883      	ldr	r0, [pc, #524]	@ (80055fc <checkAktifCalisma+0x15d0>)
 80053f0:	f004 fd02 	bl	8009df8 <HAL_GPIO_ReadPin>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80053fa:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <checkAktifCalisma+0x15cc>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005400:	2003      	movs	r0, #3
 8005402:	f7fe fc0d 	bl	8003c20 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005406:	4b7e      	ldr	r3, [pc, #504]	@ (8005600 <checkAktifCalisma+0x15d4>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <checkAktifCalisma+0x13ea>
 800540e:	4b7d      	ldr	r3, [pc, #500]	@ (8005604 <checkAktifCalisma+0x15d8>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01e      	beq.n	8005454 <checkAktifCalisma+0x1428>
 8005416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800541a:	487b      	ldr	r0, [pc, #492]	@ (8005608 <checkAktifCalisma+0x15dc>)
 800541c:	f004 fcec 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d116      	bne.n	8005454 <checkAktifCalisma+0x1428>
 8005426:	4b79      	ldr	r3, [pc, #484]	@ (800560c <checkAktifCalisma+0x15e0>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d003      	beq.n	8005436 <checkAktifCalisma+0x140a>
 800542e:	4b77      	ldr	r3, [pc, #476]	@ (800560c <checkAktifCalisma+0x15e0>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d10e      	bne.n	8005454 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005436:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <checkAktifCalisma+0x15c8>)
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800543c:	2004      	movs	r0, #4
 800543e:	f7fb faf9 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005442:	2004      	movs	r0, #4
 8005444:	f7fb fa9e 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005448:	f002 ff8e 	bl	8008368 <convertAndSendData>
			katkapisivicihatasi=1;
 800544c:	4b70      	ldr	r3, [pc, #448]	@ (8005610 <checkAktifCalisma+0x15e4>)
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e01f      	b.n	8005494 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005454:	4b6e      	ldr	r3, [pc, #440]	@ (8005610 <checkAktifCalisma+0x15e4>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <checkAktifCalisma+0x1468>
 800545c:	4b6d      	ldr	r3, [pc, #436]	@ (8005614 <checkAktifCalisma+0x15e8>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <checkAktifCalisma+0x1468>
 8005464:	4b66      	ldr	r3, [pc, #408]	@ (8005600 <checkAktifCalisma+0x15d4>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f083 0301 	eor.w	r3, r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <checkAktifCalisma+0x1468>
 8005472:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005476:	4864      	ldr	r0, [pc, #400]	@ (8005608 <checkAktifCalisma+0x15dc>)
 8005478:	f004 fcbe 	bl	8009df8 <HAL_GPIO_ReadPin>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005482:	4b63      	ldr	r3, [pc, #396]	@ (8005610 <checkAktifCalisma+0x15e4>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005488:	4b5e      	ldr	r3, [pc, #376]	@ (8005604 <checkAktifCalisma+0x15d8>)
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800548e:	2004      	movs	r0, #4
 8005490:	f7fe fbc6 	bl	8003c20 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005494:	4b5a      	ldr	r3, [pc, #360]	@ (8005600 <checkAktifCalisma+0x15d4>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d103      	bne.n	80054a4 <checkAktifCalisma+0x1478>
 800549c:	4b5e      	ldr	r3, [pc, #376]	@ (8005618 <checkAktifCalisma+0x15ec>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01e      	beq.n	80054e2 <checkAktifCalisma+0x14b6>
 80054a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054a8:	4857      	ldr	r0, [pc, #348]	@ (8005608 <checkAktifCalisma+0x15dc>)
 80054aa:	f004 fca5 	bl	8009df8 <HAL_GPIO_ReadPin>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d116      	bne.n	80054e2 <checkAktifCalisma+0x14b6>
 80054b4:	4b55      	ldr	r3, [pc, #340]	@ (800560c <checkAktifCalisma+0x15e0>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d003      	beq.n	80054c4 <checkAktifCalisma+0x1498>
 80054bc:	4b53      	ldr	r3, [pc, #332]	@ (800560c <checkAktifCalisma+0x15e0>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d10e      	bne.n	80054e2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80054c4:	4b4b      	ldr	r3, [pc, #300]	@ (80055f4 <checkAktifCalisma+0x15c8>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80054ca:	2005      	movs	r0, #5
 80054cc:	f7fb fab2 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80054d0:	2005      	movs	r0, #5
 80054d2:	f7fb fa57 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80054d6:	f002 ff47 	bl	8008368 <convertAndSendData>
			tablakapisivicihatasi=1;
 80054da:	4b50      	ldr	r3, [pc, #320]	@ (800561c <checkAktifCalisma+0x15f0>)
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e023      	b.n	800552a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80054e2:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <checkAktifCalisma+0x15f0>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01f      	beq.n	800552a <checkAktifCalisma+0x14fe>
 80054ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005614 <checkAktifCalisma+0x15e8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <checkAktifCalisma+0x14fe>
 80054f2:	4b43      	ldr	r3, [pc, #268]	@ (8005600 <checkAktifCalisma+0x15d4>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f083 0301 	eor.w	r3, r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d014      	beq.n	800552a <checkAktifCalisma+0x14fe>
 8005500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005504:	4840      	ldr	r0, [pc, #256]	@ (8005608 <checkAktifCalisma+0x15dc>)
 8005506:	f004 fc77 	bl	8009df8 <HAL_GPIO_ReadPin>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10c      	bne.n	800552a <checkAktifCalisma+0x14fe>
 8005510:	4b40      	ldr	r3, [pc, #256]	@ (8005614 <checkAktifCalisma+0x15e8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005518:	4b40      	ldr	r3, [pc, #256]	@ (800561c <checkAktifCalisma+0x15f0>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <checkAktifCalisma+0x15ec>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005524:	2005      	movs	r0, #5
 8005526:	f7fe fb7b 	bl	8003c20 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800552a:	4b30      	ldr	r3, [pc, #192]	@ (80055ec <checkAktifCalisma+0x15c0>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <checkAktifCalisma+0x1516>
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <checkAktifCalisma+0x15b0>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <checkAktifCalisma+0x1516>
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <checkAktifCalisma+0x15f4>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8005542:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <checkAktifCalisma+0x15f8>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b38      	ldr	r3, [pc, #224]	@ (8005628 <checkAktifCalisma+0x15fc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	4a37      	ldr	r2, [pc, #220]	@ (800562c <checkAktifCalisma+0x1600>)
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	4293      	cmp	r3, r2
 8005552:	d30d      	bcc.n	8005570 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8005554:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <checkAktifCalisma+0x15c8>)
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800555a:	2006      	movs	r0, #6
 800555c:	f7fb fa6a 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005560:	2006      	movs	r0, #6
 8005562:	f7fb fa0f 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 8005566:	f002 feff 	bl	8008368 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800556a:	4b31      	ldr	r3, [pc, #196]	@ (8005630 <checkAktifCalisma+0x1604>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005570:	4b2f      	ldr	r3, [pc, #188]	@ (8005630 <checkAktifCalisma+0x1604>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <checkAktifCalisma+0x1574>
 8005578:	2108      	movs	r1, #8
 800557a:	4823      	ldr	r0, [pc, #140]	@ (8005608 <checkAktifCalisma+0x15dc>)
 800557c:	f004 fc3c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <checkAktifCalisma+0x1574>
 8005586:	4b1e      	ldr	r3, [pc, #120]	@ (8005600 <checkAktifCalisma+0x15d4>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f083 0301 	eor.w	r3, r3, #1
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8005594:	4b26      	ldr	r3, [pc, #152]	@ (8005630 <checkAktifCalisma+0x1604>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800559a:	2006      	movs	r0, #6
 800559c:	f7fe fb40 	bl	8003c20 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80055a0:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <checkAktifCalisma+0x1608>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <checkAktifCalisma+0x1594>
 80055a8:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <checkAktifCalisma+0x15b0>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <checkAktifCalisma+0x1594>
 80055b0:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <checkAktifCalisma+0x160c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d103      	bne.n	80055c0 <checkAktifCalisma+0x1594>
 80055b8:	4b19      	ldr	r3, [pc, #100]	@ (8005620 <checkAktifCalisma+0x15f4>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d03f      	beq.n	8005640 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80055c0:	4b1e      	ldr	r3, [pc, #120]	@ (800563c <checkAktifCalisma+0x1610>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80055c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <checkAktifCalisma+0x15d8>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80055cc:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <checkAktifCalisma+0x15ec>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e03c      	b.n	800564e <checkAktifCalisma+0x1622>
 80055d4:	200010f1 	.word	0x200010f1
 80055d8:	200010f7 	.word	0x200010f7
 80055dc:	200010d8 	.word	0x200010d8
 80055e0:	20001101 	.word	0x20001101
 80055e4:	200010a3 	.word	0x200010a3
 80055e8:	200010a7 	.word	0x200010a7
 80055ec:	200010f4 	.word	0x200010f4
 80055f0:	40011000 	.word	0x40011000
 80055f4:	200010f5 	.word	0x200010f5
 80055f8:	200010fe 	.word	0x200010fe
 80055fc:	40010c00 	.word	0x40010c00
 8005600:	200010ee 	.word	0x200010ee
 8005604:	20001102 	.word	0x20001102
 8005608:	40010800 	.word	0x40010800
 800560c:	200010a8 	.word	0x200010a8
 8005610:	200010ff 	.word	0x200010ff
 8005614:	200010e2 	.word	0x200010e2
 8005618:	20001103 	.word	0x20001103
 800561c:	20001100 	.word	0x20001100
 8005620:	200010d7 	.word	0x200010d7
 8005624:	20001078 	.word	0x20001078
 8005628:	2000108c 	.word	0x2000108c
 800562c:	200010b8 	.word	0x200010b8
 8005630:	200010ef 	.word	0x200010ef
 8005634:	200010d5 	.word	0x200010d5
 8005638:	200010d6 	.word	0x200010d6
 800563c:	200010f6 	.word	0x200010f6
		} else {
			makineCalisiyor=1;
 8005640:	4b1e      	ldr	r3, [pc, #120]	@ (80056bc <checkAktifCalisma+0x1690>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8005646:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <checkAktifCalisma+0x1694>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <checkAktifCalisma+0x1698>)
 800564c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800564e:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <checkAktifCalisma+0x169c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02f      	beq.n	80056b6 <checkAktifCalisma+0x168a>
 8005656:	4b1d      	ldr	r3, [pc, #116]	@ (80056cc <checkAktifCalisma+0x16a0>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	f083 0301 	eor.w	r3, r3, #1
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d028      	beq.n	80056b6 <checkAktifCalisma+0x168a>
 8005664:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <checkAktifCalisma+0x16a4>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f083 0301 	eor.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d021      	beq.n	80056b6 <checkAktifCalisma+0x168a>
 8005672:	4b18      	ldr	r3, [pc, #96]	@ (80056d4 <checkAktifCalisma+0x16a8>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f083 0301 	eor.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01a      	beq.n	80056b6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005680:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <checkAktifCalisma+0x16ac>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d013      	beq.n	80056b6 <checkAktifCalisma+0x168a>
 800568e:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <checkAktifCalisma+0x16b0>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f083 0301 	eor.w	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <checkAktifCalisma+0x168a>
 800569c:	4b10      	ldr	r3, [pc, #64]	@ (80056e0 <checkAktifCalisma+0x16b4>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f083 0301 	eor.w	r3, r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80056aa:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <checkAktifCalisma+0x169c>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80056b0:	2007      	movs	r0, #7
 80056b2:	f7fe fab5 	bl	8003c20 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	200010f6 	.word	0x200010f6
 80056c0:	20001078 	.word	0x20001078
 80056c4:	2000108c 	.word	0x2000108c
 80056c8:	200010f5 	.word	0x200010f5
 80056cc:	200010f0 	.word	0x200010f0
 80056d0:	200010f1 	.word	0x200010f1
 80056d4:	200010fe 	.word	0x200010fe
 80056d8:	200010ff 	.word	0x200010ff
 80056dc:	20001100 	.word	0x20001100
 80056e0:	200010ef 	.word	0x200010ef

080056e4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80056e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005918 <checkDemoModCalisma+0x234>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	f040 8229 	bne.w	8005b44 <checkDemoModCalisma+0x460>
 80056f2:	4b8a      	ldr	r3, [pc, #552]	@ (800591c <checkDemoModCalisma+0x238>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8224 	beq.w	8005b44 <checkDemoModCalisma+0x460>
 80056fc:	4b88      	ldr	r3, [pc, #544]	@ (8005920 <checkDemoModCalisma+0x23c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 821f 	bne.w	8005b44 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005706:	2102      	movs	r1, #2
 8005708:	4886      	ldr	r0, [pc, #536]	@ (8005924 <checkDemoModCalisma+0x240>)
 800570a:	f004 fb75 	bl	8009df8 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11d      	bne.n	8005750 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8005714:	4b84      	ldr	r3, [pc, #528]	@ (8005928 <checkDemoModCalisma+0x244>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f083 0301 	eor.w	r3, r3, #1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8005722:	4b82      	ldr	r3, [pc, #520]	@ (800592c <checkDemoModCalisma+0x248>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f083 0301 	eor.w	r3, r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005730:	4b7f      	ldr	r3, [pc, #508]	@ (8005930 <checkDemoModCalisma+0x24c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f083 0301 	eor.w	r3, r3, #1
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800573e:	2201      	movs	r2, #1
 8005740:	2104      	movs	r1, #4
 8005742:	487c      	ldr	r0, [pc, #496]	@ (8005934 <checkDemoModCalisma+0x250>)
 8005744:	f004 fb6f 	bl	8009e26 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8005748:	4b7b      	ldr	r3, [pc, #492]	@ (8005938 <checkDemoModCalisma+0x254>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e00e      	b.n	800576e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005750:	2102      	movs	r1, #2
 8005752:	4874      	ldr	r0, [pc, #464]	@ (8005924 <checkDemoModCalisma+0x240>)
 8005754:	f004 fb50 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d107      	bne.n	800576e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800575e:	2200      	movs	r2, #0
 8005760:	2104      	movs	r1, #4
 8005762:	4874      	ldr	r0, [pc, #464]	@ (8005934 <checkDemoModCalisma+0x250>)
 8005764:	f004 fb5f 	bl	8009e26 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8005768:	4b73      	ldr	r3, [pc, #460]	@ (8005938 <checkDemoModCalisma+0x254>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800576e:	4b72      	ldr	r3, [pc, #456]	@ (8005938 <checkDemoModCalisma+0x254>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <checkDemoModCalisma+0xaa>
 8005776:	4b6d      	ldr	r3, [pc, #436]	@ (800592c <checkDemoModCalisma+0x248>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d107      	bne.n	800578e <checkDemoModCalisma+0xaa>
 800577e:	4b6c      	ldr	r3, [pc, #432]	@ (8005930 <checkDemoModCalisma+0x24c>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <checkDemoModCalisma+0xaa>
 8005786:	4b68      	ldr	r3, [pc, #416]	@ (8005928 <checkDemoModCalisma+0x244>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800578e:	2201      	movs	r2, #1
 8005790:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005794:	4867      	ldr	r0, [pc, #412]	@ (8005934 <checkDemoModCalisma+0x250>)
 8005796:	f004 fb46 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800579a:	2201      	movs	r2, #1
 800579c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057a0:	4864      	ldr	r0, [pc, #400]	@ (8005934 <checkDemoModCalisma+0x250>)
 80057a2:	f004 fb40 	bl	8009e26 <HAL_GPIO_WritePin>
 80057a6:	e00b      	b.n	80057c0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80057a8:	2200      	movs	r2, #0
 80057aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057ae:	4861      	ldr	r0, [pc, #388]	@ (8005934 <checkDemoModCalisma+0x250>)
 80057b0:	f004 fb39 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80057b4:	2200      	movs	r2, #0
 80057b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ba:	485e      	ldr	r0, [pc, #376]	@ (8005934 <checkDemoModCalisma+0x250>)
 80057bc:	f004 fb33 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057c0:	2102      	movs	r1, #2
 80057c2:	4858      	ldr	r0, [pc, #352]	@ (8005924 <checkDemoModCalisma+0x240>)
 80057c4:	f004 fb18 	bl	8009df8 <HAL_GPIO_ReadPin>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10d      	bne.n	80057ea <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80057ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057d2:	4854      	ldr	r0, [pc, #336]	@ (8005924 <checkDemoModCalisma+0x240>)
 80057d4:	f004 fb10 	bl	8009df8 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80057de:	4b56      	ldr	r3, [pc, #344]	@ (8005938 <checkDemoModCalisma+0x254>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057ea:	2102      	movs	r1, #2
 80057ec:	484d      	ldr	r0, [pc, #308]	@ (8005924 <checkDemoModCalisma+0x240>)
 80057ee:	f004 fb03 	bl	8009df8 <HAL_GPIO_ReadPin>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d125      	bne.n	8005844 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80057f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057fc:	4849      	ldr	r0, [pc, #292]	@ (8005924 <checkDemoModCalisma+0x240>)
 80057fe:	f004 fafb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11d      	bne.n	8005844 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8005808:	4b4b      	ldr	r3, [pc, #300]	@ (8005938 <checkDemoModCalisma+0x254>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8005816:	4b44      	ldr	r3, [pc, #272]	@ (8005928 <checkDemoModCalisma+0x244>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f083 0301 	eor.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8005824:	4b42      	ldr	r3, [pc, #264]	@ (8005930 <checkDemoModCalisma+0x24c>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005832:	2201      	movs	r2, #1
 8005834:	2120      	movs	r1, #32
 8005836:	483b      	ldr	r0, [pc, #236]	@ (8005924 <checkDemoModCalisma+0x240>)
 8005838:	f004 faf5 	bl	8009e26 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800583c:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <checkDemoModCalisma+0x248>)
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e007      	b.n	8005854 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005844:	2200      	movs	r2, #0
 8005846:	2120      	movs	r1, #32
 8005848:	4836      	ldr	r0, [pc, #216]	@ (8005924 <checkDemoModCalisma+0x240>)
 800584a:	f004 faec 	bl	8009e26 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800584e:	4b37      	ldr	r3, [pc, #220]	@ (800592c <checkDemoModCalisma+0x248>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005854:	2102      	movs	r1, #2
 8005856:	4833      	ldr	r0, [pc, #204]	@ (8005924 <checkDemoModCalisma+0x240>)
 8005858:	f004 face 	bl	8009df8 <HAL_GPIO_ReadPin>
 800585c:	4603      	mov	r3, r0
 800585e:	2b01      	cmp	r3, #1
 8005860:	d125      	bne.n	80058ae <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005862:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005866:	482f      	ldr	r0, [pc, #188]	@ (8005924 <checkDemoModCalisma+0x240>)
 8005868:	f004 fac6 	bl	8009df8 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d11d      	bne.n	80058ae <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8005872:	4b31      	ldr	r3, [pc, #196]	@ (8005938 <checkDemoModCalisma+0x254>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f083 0301 	eor.w	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8005880:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <checkDemoModCalisma+0x248>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00f      	beq.n	80058ae <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800588e:	4b26      	ldr	r3, [pc, #152]	@ (8005928 <checkDemoModCalisma+0x244>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f083 0301 	eor.w	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800589c:	2201      	movs	r2, #1
 800589e:	2110      	movs	r1, #16
 80058a0:	4820      	ldr	r0, [pc, #128]	@ (8005924 <checkDemoModCalisma+0x240>)
 80058a2:	f004 fac0 	bl	8009e26 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80058a6:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <checkDemoModCalisma+0x24c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e007      	b.n	80058be <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058ae:	2200      	movs	r2, #0
 80058b0:	2110      	movs	r1, #16
 80058b2:	481c      	ldr	r0, [pc, #112]	@ (8005924 <checkDemoModCalisma+0x240>)
 80058b4:	f004 fab7 	bl	8009e26 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <checkDemoModCalisma+0x24c>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058be:	2104      	movs	r1, #4
 80058c0:	4818      	ldr	r0, [pc, #96]	@ (8005924 <checkDemoModCalisma+0x240>)
 80058c2:	f004 fa99 	bl	8009df8 <HAL_GPIO_ReadPin>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d139      	bne.n	8005940 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <checkDemoModCalisma+0x254>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f083 0301 	eor.w	r3, r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d032      	beq.n	8005940 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80058da:	4b15      	ldr	r3, [pc, #84]	@ (8005930 <checkDemoModCalisma+0x24c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02b      	beq.n	8005940 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80058e8:	4b10      	ldr	r3, [pc, #64]	@ (800592c <checkDemoModCalisma+0x248>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f083 0301 	eor.w	r3, r3, #1
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d024      	beq.n	8005940 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80058f6:	2201      	movs	r2, #1
 80058f8:	2102      	movs	r1, #2
 80058fa:	480e      	ldr	r0, [pc, #56]	@ (8005934 <checkDemoModCalisma+0x250>)
 80058fc:	f004 fa93 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005900:	2201      	movs	r2, #1
 8005902:	2101      	movs	r1, #1
 8005904:	480b      	ldr	r0, [pc, #44]	@ (8005934 <checkDemoModCalisma+0x250>)
 8005906:	f004 fa8e 	bl	8009e26 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800590a:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <checkDemoModCalisma+0x244>)
 800590c:	2201      	movs	r2, #1
 800590e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8005910:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <checkDemoModCalisma+0x258>)
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e027      	b.n	8005968 <checkDemoModCalisma+0x284>
 8005918:	200010be 	.word	0x200010be
 800591c:	200010f2 	.word	0x200010f2
 8005920:	200010bd 	.word	0x200010bd
 8005924:	40011000 	.word	0x40011000
 8005928:	200010f9 	.word	0x200010f9
 800592c:	200010fa 	.word	0x200010fa
 8005930:	200010fb 	.word	0x200010fb
 8005934:	40010c00 	.word	0x40010c00
 8005938:	200010f8 	.word	0x200010f8
 800593c:	200010de 	.word	0x200010de
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005940:	2104      	movs	r1, #4
 8005942:	48a0      	ldr	r0, [pc, #640]	@ (8005bc4 <checkDemoModCalisma+0x4e0>)
 8005944:	f004 fa58 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10c      	bne.n	8005968 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800594e:	2200      	movs	r2, #0
 8005950:	2102      	movs	r1, #2
 8005952:	489d      	ldr	r0, [pc, #628]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005954:	f004 fa67 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005958:	2200      	movs	r2, #0
 800595a:	2101      	movs	r1, #1
 800595c:	489a      	ldr	r0, [pc, #616]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 800595e:	f004 fa62 	bl	8009e26 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005962:	4b9a      	ldr	r3, [pc, #616]	@ (8005bcc <checkDemoModCalisma+0x4e8>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005968:	2104      	movs	r1, #4
 800596a:	4896      	ldr	r0, [pc, #600]	@ (8005bc4 <checkDemoModCalisma+0x4e0>)
 800596c:	f004 fa44 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d10d      	bne.n	8005992 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005976:	2201      	movs	r2, #1
 8005978:	2180      	movs	r1, #128	@ 0x80
 800597a:	4895      	ldr	r0, [pc, #596]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 800597c:	f004 fa53 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005980:	2201      	movs	r2, #1
 8005982:	2120      	movs	r1, #32
 8005984:	4892      	ldr	r0, [pc, #584]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 8005986:	f004 fa4e 	bl	8009e26 <HAL_GPIO_WritePin>
			timer3 = millis;
 800598a:	4b92      	ldr	r3, [pc, #584]	@ (8005bd4 <checkDemoModCalisma+0x4f0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a92      	ldr	r2, [pc, #584]	@ (8005bd8 <checkDemoModCalisma+0x4f4>)
 8005990:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005992:	4b90      	ldr	r3, [pc, #576]	@ (8005bd4 <checkDemoModCalisma+0x4f0>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b90      	ldr	r3, [pc, #576]	@ (8005bd8 <checkDemoModCalisma+0x4f4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b04      	cmp	r3, #4
 800599e:	d909      	bls.n	80059b4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2180      	movs	r1, #128	@ 0x80
 80059a4:	488a      	ldr	r0, [pc, #552]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 80059a6:	f004 fa3e 	bl	8009e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2120      	movs	r1, #32
 80059ae:	4888      	ldr	r0, [pc, #544]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 80059b0:	f004 fa39 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80059b4:	2102      	movs	r1, #2
 80059b6:	4883      	ldr	r0, [pc, #524]	@ (8005bc4 <checkDemoModCalisma+0x4e0>)
 80059b8:	f004 fa1e 	bl	8009df8 <HAL_GPIO_ReadPin>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d108      	bne.n	80059d4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059c2:	2201      	movs	r2, #1
 80059c4:	2140      	movs	r1, #64	@ 0x40
 80059c6:	4882      	ldr	r0, [pc, #520]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 80059c8:	f004 fa2d 	bl	8009e26 <HAL_GPIO_WritePin>
			timer3 = millis;
 80059cc:	4b81      	ldr	r3, [pc, #516]	@ (8005bd4 <checkDemoModCalisma+0x4f0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a81      	ldr	r2, [pc, #516]	@ (8005bd8 <checkDemoModCalisma+0x4f4>)
 80059d2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80059d4:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd4 <checkDemoModCalisma+0x4f0>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd8 <checkDemoModCalisma+0x4f4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d904      	bls.n	80059ec <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80059e2:	2200      	movs	r2, #0
 80059e4:	2140      	movs	r1, #64	@ 0x40
 80059e6:	487a      	ldr	r0, [pc, #488]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 80059e8:	f004 fa1d 	bl	8009e26 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80059ec:	4b7b      	ldr	r3, [pc, #492]	@ (8005bdc <checkDemoModCalisma+0x4f8>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d058      	beq.n	8005aa6 <checkDemoModCalisma+0x3c2>
 80059f4:	4b7a      	ldr	r3, [pc, #488]	@ (8005be0 <checkDemoModCalisma+0x4fc>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d054      	beq.n	8005aa6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80059fc:	4b79      	ldr	r3, [pc, #484]	@ (8005be4 <checkDemoModCalisma+0x500>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b77      	ldr	r3, [pc, #476]	@ (8005be4 <checkDemoModCalisma+0x500>)
 8005a06:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005a08:	4b76      	ldr	r3, [pc, #472]	@ (8005be4 <checkDemoModCalisma+0x500>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d908      	bls.n	8005a22 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005a10:	4b74      	ldr	r3, [pc, #464]	@ (8005be4 <checkDemoModCalisma+0x500>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005a16:	4b74      	ldr	r3, [pc, #464]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	4b72      	ldr	r3, [pc, #456]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005a20:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005a22:	4b71      	ldr	r3, [pc, #452]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d908      	bls.n	8005a3c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005a30:	4b6e      	ldr	r3, [pc, #440]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4b6c      	ldr	r3, [pc, #432]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005a3a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d908      	bls.n	8005a56 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005a44:	4b69      	ldr	r3, [pc, #420]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005a4a:	4b69      	ldr	r3, [pc, #420]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b67      	ldr	r3, [pc, #412]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005a54:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005a56:	4b66      	ldr	r3, [pc, #408]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d908      	bls.n	8005a70 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005a5e:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005a64:	4b63      	ldr	r3, [pc, #396]	@ (8005bf4 <checkDemoModCalisma+0x510>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <checkDemoModCalisma+0x510>)
 8005a6e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005a70:	4b60      	ldr	r3, [pc, #384]	@ (8005bf4 <checkDemoModCalisma+0x510>)
 8005a72:	781a      	ldrb	r2, [r3, #0]
 8005a74:	4b60      	ldr	r3, [pc, #384]	@ (8005bf8 <checkDemoModCalisma+0x514>)
 8005a76:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf8 <checkDemoModCalisma+0x514>)
 8005a80:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005a82:	4b5a      	ldr	r3, [pc, #360]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf8 <checkDemoModCalisma+0x514>)
 8005a88:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005a8a:	4b57      	ldr	r3, [pc, #348]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005a8c:	781a      	ldrb	r2, [r3, #0]
 8005a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf8 <checkDemoModCalisma+0x514>)
 8005a90:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005a92:	4b54      	ldr	r3, [pc, #336]	@ (8005be4 <checkDemoModCalisma+0x500>)
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	4b58      	ldr	r3, [pc, #352]	@ (8005bf8 <checkDemoModCalisma+0x514>)
 8005a98:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005a9a:	4b58      	ldr	r3, [pc, #352]	@ (8005bfc <checkDemoModCalisma+0x518>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8005be0 <checkDemoModCalisma+0x4fc>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005aa6:	4b56      	ldr	r3, [pc, #344]	@ (8005c00 <checkDemoModCalisma+0x51c>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f040 8087 	bne.w	8005bbe <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005ab0:	4a54      	ldr	r2, [pc, #336]	@ (8005c04 <checkDemoModCalisma+0x520>)
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f002 fe75 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005aba:	4a53      	ldr	r2, [pc, #332]	@ (8005c08 <checkDemoModCalisma+0x524>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	2002      	movs	r0, #2
 8005ac0:	f002 fe70 	bl	80087a4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf4 <checkDemoModCalisma+0x510>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	220a      	movs	r2, #10
 8005aca:	4950      	ldr	r1, [pc, #320]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005acc:	4618      	mov	r0, r3
 8005ace:	f007 f9bf 	bl	800ce50 <itoa>
			lcd_print(2,12,snum);
 8005ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005ad4:	210c      	movs	r1, #12
 8005ad6:	2002      	movs	r0, #2
 8005ad8:	f002 fe64 	bl	80087a4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005adc:	4b44      	ldr	r3, [pc, #272]	@ (8005bf0 <checkDemoModCalisma+0x50c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	494a      	ldr	r1, [pc, #296]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f007 f9b3 	bl	800ce50 <itoa>
			lcd_print(2,13,snum);
 8005aea:	4a48      	ldr	r2, [pc, #288]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005aec:	210d      	movs	r1, #13
 8005aee:	2002      	movs	r0, #2
 8005af0:	f002 fe58 	bl	80087a4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005af4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bec <checkDemoModCalisma+0x508>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	220a      	movs	r2, #10
 8005afa:	4944      	ldr	r1, [pc, #272]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005afc:	4618      	mov	r0, r3
 8005afe:	f007 f9a7 	bl	800ce50 <itoa>
			lcd_print(2,14,snum);
 8005b02:	4a42      	ldr	r2, [pc, #264]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005b04:	210e      	movs	r1, #14
 8005b06:	2002      	movs	r0, #2
 8005b08:	f002 fe4c 	bl	80087a4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005b0c:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <checkDemoModCalisma+0x504>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	220a      	movs	r2, #10
 8005b12:	493e      	ldr	r1, [pc, #248]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f007 f99b 	bl	800ce50 <itoa>
			lcd_print(2,15,snum);
 8005b1a:	4a3c      	ldr	r2, [pc, #240]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005b1c:	210f      	movs	r1, #15
 8005b1e:	2002      	movs	r0, #2
 8005b20:	f002 fe40 	bl	80087a4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005b24:	4b2f      	ldr	r3, [pc, #188]	@ (8005be4 <checkDemoModCalisma+0x500>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4938      	ldr	r1, [pc, #224]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f007 f98f 	bl	800ce50 <itoa>
			lcd_print(2,16,snum);
 8005b32:	4a36      	ldr	r2, [pc, #216]	@ (8005c0c <checkDemoModCalisma+0x528>)
 8005b34:	2110      	movs	r1, #16
 8005b36:	2002      	movs	r0, #2
 8005b38:	f002 fe34 	bl	80087a4 <lcd_print>
			mesajYazildi=1;
 8005b3c:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <checkDemoModCalisma+0x52c>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005b42:	e03c      	b.n	8005bbe <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005b44:	4b33      	ldr	r3, [pc, #204]	@ (8005c14 <checkDemoModCalisma+0x530>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d003      	beq.n	8005b54 <checkDemoModCalisma+0x470>
 8005b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c00 <checkDemoModCalisma+0x51c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d134      	bne.n	8005bbe <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b5a:	481b      	ldr	r0, [pc, #108]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005b5c:	f004 f963 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b66:	4818      	ldr	r0, [pc, #96]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005b68:	f004 f95d 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2104      	movs	r1, #4
 8005b70:	4815      	ldr	r0, [pc, #84]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005b72:	f004 f958 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4813      	ldr	r0, [pc, #76]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005b7c:	f004 f953 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b80:	2200      	movs	r2, #0
 8005b82:	2101      	movs	r1, #1
 8005b84:	4810      	ldr	r0, [pc, #64]	@ (8005bc8 <checkDemoModCalisma+0x4e4>)
 8005b86:	f004 f94e 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2120      	movs	r1, #32
 8005b8e:	480d      	ldr	r0, [pc, #52]	@ (8005bc4 <checkDemoModCalisma+0x4e0>)
 8005b90:	f004 f949 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005b94:	2200      	movs	r2, #0
 8005b96:	2110      	movs	r1, #16
 8005b98:	480a      	ldr	r0, [pc, #40]	@ (8005bc4 <checkDemoModCalisma+0x4e0>)
 8005b9a:	f004 f944 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2180      	movs	r1, #128	@ 0x80
 8005ba2:	480b      	ldr	r0, [pc, #44]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 8005ba4:	f004 f93f 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2140      	movs	r1, #64	@ 0x40
 8005bac:	4808      	ldr	r0, [pc, #32]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 8005bae:	f004 f93a 	bl	8009e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2120      	movs	r1, #32
 8005bb6:	4806      	ldr	r0, [pc, #24]	@ (8005bd0 <checkDemoModCalisma+0x4ec>)
 8005bb8:	f004 f935 	bl	8009e26 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005bbc:	e7ff      	b.n	8005bbe <checkDemoModCalisma+0x4da>
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40011000 	.word	0x40011000
 8005bc8:	40010c00 	.word	0x40010c00
 8005bcc:	200010f9 	.word	0x200010f9
 8005bd0:	40010800 	.word	0x40010800
 8005bd4:	20001078 	.word	0x20001078
 8005bd8:	20001088 	.word	0x20001088
 8005bdc:	200010f8 	.word	0x200010f8
 8005be0:	200010de 	.word	0x200010de
 8005be4:	2000109d 	.word	0x2000109d
 8005be8:	2000109e 	.word	0x2000109e
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	20000001 	.word	0x20000001
 8005bf4:	2000109f 	.word	0x2000109f
 8005bf8:	20000fc8 	.word	0x20000fc8
 8005bfc:	200010cc 	.word	0x200010cc
 8005c00:	200010bd 	.word	0x200010bd
 8005c04:	20000140 	.word	0x20000140
 8005c08:	20000168 	.word	0x20000168
 8005c0c:	20001038 	.word	0x20001038
 8005c10:	200010d4 	.word	0x200010d4
 8005c14:	200010be 	.word	0x200010be

08005c18 <mainLoop>:

void mainLoop() {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005c1e:	f7fe f853 	bl	8003cc8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c22:	2101      	movs	r1, #1
 8005c24:	4894      	ldr	r0, [pc, #592]	@ (8005e78 <mainLoop+0x260>)
 8005c26:	f004 f8e7 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d136      	bne.n	8005c9e <mainLoop+0x86>
 8005c30:	2108      	movs	r1, #8
 8005c32:	4892      	ldr	r0, [pc, #584]	@ (8005e7c <mainLoop+0x264>)
 8005c34:	f004 f8e0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12f      	bne.n	8005c9e <mainLoop+0x86>
 8005c3e:	2102      	movs	r1, #2
 8005c40:	488d      	ldr	r0, [pc, #564]	@ (8005e78 <mainLoop+0x260>)
 8005c42:	f004 f8d9 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d128      	bne.n	8005c9e <mainLoop+0x86>
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	488a      	ldr	r0, [pc, #552]	@ (8005e78 <mainLoop+0x260>)
 8005c50:	f004 f8d2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d121      	bne.n	8005c9e <mainLoop+0x86>
 8005c5a:	2108      	movs	r1, #8
 8005c5c:	4886      	ldr	r0, [pc, #536]	@ (8005e78 <mainLoop+0x260>)
 8005c5e:	f004 f8cb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11a      	bne.n	8005c9e <mainLoop+0x86>
 8005c68:	2180      	movs	r1, #128	@ 0x80
 8005c6a:	4884      	ldr	r0, [pc, #528]	@ (8005e7c <mainLoop+0x264>)
 8005c6c:	f004 f8c4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d113      	bne.n	8005c9e <mainLoop+0x86>
 8005c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c7a:	4880      	ldr	r0, [pc, #512]	@ (8005e7c <mainLoop+0x264>)
 8005c7c:	f004 f8bc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10b      	bne.n	8005c9e <mainLoop+0x86>
 8005c86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c8a:	487c      	ldr	r0, [pc, #496]	@ (8005e7c <mainLoop+0x264>)
 8005c8c:	f004 f8b4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d103      	bne.n	8005c9e <mainLoop+0x86>
			butonKontrol=0;
 8005c96:	4b7a      	ldr	r3, [pc, #488]	@ (8005e80 <mainLoop+0x268>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e003      	b.n	8005ca6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005c9e:	4b79      	ldr	r3, [pc, #484]	@ (8005e84 <mainLoop+0x26c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a79      	ldr	r2, [pc, #484]	@ (8005e88 <mainLoop+0x270>)
 8005ca4:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005ca6:	f7fe f8c1 	bl	8003e2c <buttonCheck>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d103      	bne.n	8005cb8 <mainLoop+0xa0>
			backLightTimer = millis;
 8005cb0:	4b74      	ldr	r3, [pc, #464]	@ (8005e84 <mainLoop+0x26c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a74      	ldr	r2, [pc, #464]	@ (8005e88 <mainLoop+0x270>)
 8005cb6:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005cb8:	4b74      	ldr	r3, [pc, #464]	@ (8005e8c <mainLoop+0x274>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d02c      	beq.n	8005d1a <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005cc0:	bf00      	nop
 8005cc2:	4873      	ldr	r0, [pc, #460]	@ (8005e90 <mainLoop+0x278>)
 8005cc4:	f004 fec1 	bl	800aa4a <HAL_I2C_GetError>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d0f9      	beq.n	8005cc2 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005cce:	bf00      	nop
 8005cd0:	486f      	ldr	r0, [pc, #444]	@ (8005e90 <mainLoop+0x278>)
 8005cd2:	f004 fead 	bl	800aa30 <HAL_I2C_GetState>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d1f9      	bne.n	8005cd0 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005cdc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	236e      	movs	r3, #110	@ 0x6e
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8005e94 <mainLoop+0x27c>)
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	236e      	movs	r3, #110	@ 0x6e
 8005cec:	2200      	movs	r2, #0
 8005cee:	21a0      	movs	r1, #160	@ 0xa0
 8005cf0:	4867      	ldr	r0, [pc, #412]	@ (8005e90 <mainLoop+0x278>)
 8005cf2:	f004 fb3b 	bl	800a36c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005cfa:	f003 faad 	bl	8009258 <HAL_Delay>

		  hafizaYaz=0;
 8005cfe:	4b63      	ldr	r3, [pc, #396]	@ (8005e8c <mainLoop+0x274>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005d04:	4a64      	ldr	r2, [pc, #400]	@ (8005e98 <mainLoop+0x280>)
 8005d06:	2101      	movs	r1, #1
 8005d08:	2002      	movs	r0, #2
 8005d0a:	f002 fd4b 	bl	80087a4 <lcd_print>

		  HAL_Delay(1000);
 8005d0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d12:	f003 faa1 	bl	8009258 <HAL_Delay>
		  lcd_clear();
 8005d16:	f002 fd71 	bl	80087fc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005d1a:	4b60      	ldr	r3, [pc, #384]	@ (8005e9c <mainLoop+0x284>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f083 0301 	eor.w	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d043      	beq.n	8005db0 <mainLoop+0x198>
 8005d28:	4859      	ldr	r0, [pc, #356]	@ (8005e90 <mainLoop+0x278>)
 8005d2a:	f004 fe81 	bl	800aa30 <HAL_I2C_GetState>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d13d      	bne.n	8005db0 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005d34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea0 <mainLoop+0x288>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f083 0301 	eor.w	r3, r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d028      	beq.n	8005d94 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005d42:	4a58      	ldr	r2, [pc, #352]	@ (8005ea4 <mainLoop+0x28c>)
 8005d44:	2101      	movs	r1, #1
 8005d46:	2001      	movs	r0, #1
 8005d48:	f002 fd2c 	bl	80087a4 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005d4c:	4a56      	ldr	r2, [pc, #344]	@ (8005ea8 <mainLoop+0x290>)
 8005d4e:	2101      	movs	r1, #1
 8005d50:	2002      	movs	r0, #2
 8005d52:	f002 fd27 	bl	80087a4 <lcd_print>
			  HAL_Delay(1000);
 8005d56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d5a:	f003 fa7d 	bl	8009258 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d5e:	bf00      	nop
 8005d60:	484b      	ldr	r0, [pc, #300]	@ (8005e90 <mainLoop+0x278>)
 8005d62:	f004 fe72 	bl	800aa4a <HAL_I2C_GetError>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d0f9      	beq.n	8005d60 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d6c:	e003      	b.n	8005d76 <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d72:	f003 fa71 	bl	8009258 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d76:	4846      	ldr	r0, [pc, #280]	@ (8005e90 <mainLoop+0x278>)
 8005d78:	f004 fe5a 	bl	800aa30 <HAL_I2C_GetState>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d1f5      	bne.n	8005d6e <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005d82:	4a4a      	ldr	r2, [pc, #296]	@ (8005eac <mainLoop+0x294>)
 8005d84:	2101      	movs	r1, #1
 8005d86:	2002      	movs	r0, #2
 8005d88:	f002 fd0c 	bl	80087a4 <lcd_print>

			  ilkOkuma=1;
 8005d8c:	4b44      	ldr	r3, [pc, #272]	@ (8005ea0 <mainLoop+0x288>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e006      	b.n	8005da2 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005d94:	4a46      	ldr	r2, [pc, #280]	@ (8005eb0 <mainLoop+0x298>)
 8005d96:	2101      	movs	r1, #1
 8005d98:	2002      	movs	r0, #2
 8005d9a:	f002 fd03 	bl	80087a4 <lcd_print>
			  lcd_clear();
 8005d9e:	f002 fd2d 	bl	80087fc <lcd_clear>
		  }

		  lcd_clear();
 8005da2:	f002 fd2b 	bl	80087fc <lcd_clear>

		  eepromKontrol();
 8005da6:	f7fa fa45 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005daa:	4b3c      	ldr	r3, [pc, #240]	@ (8005e9c <mainLoop+0x284>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005db0:	4b40      	ldr	r3, [pc, #256]	@ (8005eb4 <mainLoop+0x29c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11c      	bne.n	8005df2 <mainLoop+0x1da>
 8005db8:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb8 <mainLoop+0x2a0>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f083 0301 	eor.w	r3, r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d015      	beq.n	8005df2 <mainLoop+0x1da>
 8005dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ebc <mainLoop+0x2a4>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d111      	bne.n	8005df2 <mainLoop+0x1da>
			lcd_clear();
 8005dce:	f002 fd15 	bl	80087fc <lcd_clear>
			HAL_Delay(10);
 8005dd2:	200a      	movs	r0, #10
 8005dd4:	f003 fa40 	bl	8009258 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005dd8:	4a39      	ldr	r2, [pc, #228]	@ (8005ec0 <mainLoop+0x2a8>)
 8005dda:	2101      	movs	r1, #1
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f002 fce1 	bl	80087a4 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005de2:	4a38      	ldr	r2, [pc, #224]	@ (8005ec4 <mainLoop+0x2ac>)
 8005de4:	2101      	movs	r1, #1
 8005de6:	2002      	movs	r0, #2
 8005de8:	f002 fcdc 	bl	80087a4 <lcd_print>
			mesajYazildi=1;
 8005dec:	4b32      	ldr	r3, [pc, #200]	@ (8005eb8 <mainLoop+0x2a0>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005df2:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <mainLoop+0x29c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <mainLoop+0x208>
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	481e      	ldr	r0, [pc, #120]	@ (8005e78 <mainLoop+0x260>)
 8005dfe:	f003 fffb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10b      	bne.n	8005e20 <mainLoop+0x208>
 8005e08:	2104      	movs	r1, #4
 8005e0a:	481b      	ldr	r0, [pc, #108]	@ (8005e78 <mainLoop+0x260>)
 8005e0c:	f003 fff4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d104      	bne.n	8005e20 <mainLoop+0x208>
			menuGiris=1;
 8005e16:	4b27      	ldr	r3, [pc, #156]	@ (8005eb4 <mainLoop+0x29c>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005e1c:	f002 fcee 	bl	80087fc <lcd_clear>
		}

		if(menuGiris==1) {
 8005e20:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <mainLoop+0x29c>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <mainLoop+0x214>
			menu();
 8005e28:	f7fb fa40 	bl	80012ac <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e30:	4812      	ldr	r0, [pc, #72]	@ (8005e7c <mainLoop+0x264>)
 8005e32:	f004 f810 	bl	8009e56 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005e36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e3a:	4823      	ldr	r0, [pc, #140]	@ (8005ec8 <mainLoop+0x2b0>)
 8005e3c:	f003 ffdc 	bl	8009df8 <HAL_GPIO_ReadPin>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <mainLoop+0x244>
 8005e46:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <mainLoop+0x2b4>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f083 0301 	eor.w	r3, r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <mainLoop+0x244>
			stopVar=1;
 8005e54:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed0 <mainLoop+0x2b8>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed0 <mainLoop+0x2b8>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005e62:	f7fe f817 	bl	8003e94 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005e66:	f7fe f849 	bl	8003efc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005e6a:	f7fe f88d 	bl	8003f88 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005e6e:	f7fe f8dd 	bl	800402c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005e72:	f7ff fc37 	bl	80056e4 <checkDemoModCalisma>
		checkLCDBacklight();
 8005e76:	e6d2      	b.n	8005c1e <mainLoop+0x6>
 8005e78:	40010800 	.word	0x40010800
 8005e7c:	40011000 	.word	0x40011000
 8005e80:	200010cf 	.word	0x200010cf
 8005e84:	20001078 	.word	0x20001078
 8005e88:	20001094 	.word	0x20001094
 8005e8c:	200010cc 	.word	0x200010cc
 8005e90:	20001908 	.word	0x20001908
 8005e94:	20000fc8 	.word	0x20000fc8
 8005e98:	20001840 	.word	0x20001840
 8005e9c:	200010cd 	.word	0x200010cd
 8005ea0:	200010ce 	.word	0x200010ce
 8005ea4:	2000017c 	.word	0x2000017c
 8005ea8:	20001854 	.word	0x20001854
 8005eac:	20001868 	.word	0x20001868
 8005eb0:	2000187c 	.word	0x2000187c
 8005eb4:	200010bd 	.word	0x200010bd
 8005eb8:	200010d4 	.word	0x200010d4
 8005ebc:	200010be 	.word	0x200010be
 8005ec0:	200000c8 	.word	0x200000c8
 8005ec4:	200000dc 	.word	0x200000dc
 8005ec8:	40010c00 	.word	0x40010c00
 8005ecc:	200010f5 	.word	0x200010f5
 8005ed0:	200010f2 	.word	0x200010f2

08005ed4 <loadMenuTexts>:

//Confirmation Texts:
char idConfirmationText[17];
char idConfirmationSubText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005ed4:	b5b0      	push	{r4, r5, r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 852d 	bne.w	8006940 <loadMenuTexts+0xa6c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005ee6:	4ac7      	ldr	r2, [pc, #796]	@ (8006204 <loadMenuTexts+0x330>)
 8005ee8:	4bc7      	ldr	r3, [pc, #796]	@ (8006208 <loadMenuTexts+0x334>)
 8005eea:	4614      	mov	r4, r2
 8005eec:	461d      	mov	r5, r3
 8005eee:	6828      	ldr	r0, [r5, #0]
 8005ef0:	6869      	ldr	r1, [r5, #4]
 8005ef2:	68aa      	ldr	r2, [r5, #8]
 8005ef4:	68eb      	ldr	r3, [r5, #12]
 8005ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef8:	7c2b      	ldrb	r3, [r5, #16]
 8005efa:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005efc:	4ac3      	ldr	r2, [pc, #780]	@ (800620c <loadMenuTexts+0x338>)
 8005efe:	4bc4      	ldr	r3, [pc, #784]	@ (8006210 <loadMenuTexts+0x33c>)
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	6828      	ldr	r0, [r5, #0]
 8005f06:	6869      	ldr	r1, [r5, #4]
 8005f08:	68aa      	ldr	r2, [r5, #8]
 8005f0a:	68eb      	ldr	r3, [r5, #12]
 8005f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0e:	7c2b      	ldrb	r3, [r5, #16]
 8005f10:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005f12:	4ac0      	ldr	r2, [pc, #768]	@ (8006214 <loadMenuTexts+0x340>)
 8005f14:	4bc0      	ldr	r3, [pc, #768]	@ (8006218 <loadMenuTexts+0x344>)
 8005f16:	4614      	mov	r4, r2
 8005f18:	461d      	mov	r5, r3
 8005f1a:	6828      	ldr	r0, [r5, #0]
 8005f1c:	6869      	ldr	r1, [r5, #4]
 8005f1e:	68aa      	ldr	r2, [r5, #8]
 8005f20:	68eb      	ldr	r3, [r5, #12]
 8005f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f24:	7c2b      	ldrb	r3, [r5, #16]
 8005f26:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f28:	4abc      	ldr	r2, [pc, #752]	@ (800621c <loadMenuTexts+0x348>)
 8005f2a:	4bbd      	ldr	r3, [pc, #756]	@ (8006220 <loadMenuTexts+0x34c>)
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	461d      	mov	r5, r3
 8005f30:	6828      	ldr	r0, [r5, #0]
 8005f32:	6869      	ldr	r1, [r5, #4]
 8005f34:	68aa      	ldr	r2, [r5, #8]
 8005f36:	68eb      	ldr	r3, [r5, #12]
 8005f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f3a:	7c2b      	ldrb	r3, [r5, #16]
 8005f3c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005f3e:	4ab9      	ldr	r2, [pc, #740]	@ (8006224 <loadMenuTexts+0x350>)
 8005f40:	4bb9      	ldr	r3, [pc, #740]	@ (8006228 <loadMenuTexts+0x354>)
 8005f42:	4614      	mov	r4, r2
 8005f44:	461d      	mov	r5, r3
 8005f46:	6828      	ldr	r0, [r5, #0]
 8005f48:	6869      	ldr	r1, [r5, #4]
 8005f4a:	68aa      	ldr	r2, [r5, #8]
 8005f4c:	68eb      	ldr	r3, [r5, #12]
 8005f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f50:	7c2b      	ldrb	r3, [r5, #16]
 8005f52:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005f54:	4ab5      	ldr	r2, [pc, #724]	@ (800622c <loadMenuTexts+0x358>)
 8005f56:	4bb6      	ldr	r3, [pc, #728]	@ (8006230 <loadMenuTexts+0x35c>)
 8005f58:	4614      	mov	r4, r2
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	6828      	ldr	r0, [r5, #0]
 8005f5e:	6869      	ldr	r1, [r5, #4]
 8005f60:	68aa      	ldr	r2, [r5, #8]
 8005f62:	68eb      	ldr	r3, [r5, #12]
 8005f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f66:	7c2b      	ldrb	r3, [r5, #16]
 8005f68:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005f6a:	4ab2      	ldr	r2, [pc, #712]	@ (8006234 <loadMenuTexts+0x360>)
 8005f6c:	4bb2      	ldr	r3, [pc, #712]	@ (8006238 <loadMenuTexts+0x364>)
 8005f6e:	4614      	mov	r4, r2
 8005f70:	461d      	mov	r5, r3
 8005f72:	6828      	ldr	r0, [r5, #0]
 8005f74:	6869      	ldr	r1, [r5, #4]
 8005f76:	68aa      	ldr	r2, [r5, #8]
 8005f78:	68eb      	ldr	r3, [r5, #12]
 8005f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f7c:	7c2b      	ldrb	r3, [r5, #16]
 8005f7e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005f80:	4aae      	ldr	r2, [pc, #696]	@ (800623c <loadMenuTexts+0x368>)
 8005f82:	4baf      	ldr	r3, [pc, #700]	@ (8006240 <loadMenuTexts+0x36c>)
 8005f84:	4614      	mov	r4, r2
 8005f86:	461d      	mov	r5, r3
 8005f88:	6828      	ldr	r0, [r5, #0]
 8005f8a:	6869      	ldr	r1, [r5, #4]
 8005f8c:	68aa      	ldr	r2, [r5, #8]
 8005f8e:	68eb      	ldr	r3, [r5, #12]
 8005f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f92:	7c2b      	ldrb	r3, [r5, #16]
 8005f94:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005f96:	4aab      	ldr	r2, [pc, #684]	@ (8006244 <loadMenuTexts+0x370>)
 8005f98:	4bab      	ldr	r3, [pc, #684]	@ (8006248 <loadMenuTexts+0x374>)
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	461d      	mov	r5, r3
 8005f9e:	6828      	ldr	r0, [r5, #0]
 8005fa0:	6869      	ldr	r1, [r5, #4]
 8005fa2:	68aa      	ldr	r2, [r5, #8]
 8005fa4:	68eb      	ldr	r3, [r5, #12]
 8005fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa8:	7c2b      	ldrb	r3, [r5, #16]
 8005faa:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005fac:	4aa7      	ldr	r2, [pc, #668]	@ (800624c <loadMenuTexts+0x378>)
 8005fae:	4ba8      	ldr	r3, [pc, #672]	@ (8006250 <loadMenuTexts+0x37c>)
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	6828      	ldr	r0, [r5, #0]
 8005fb6:	6869      	ldr	r1, [r5, #4]
 8005fb8:	68aa      	ldr	r2, [r5, #8]
 8005fba:	68eb      	ldr	r3, [r5, #12]
 8005fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fbe:	7c2b      	ldrb	r3, [r5, #16]
 8005fc0:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005fc2:	4aa4      	ldr	r2, [pc, #656]	@ (8006254 <loadMenuTexts+0x380>)
 8005fc4:	4ba4      	ldr	r3, [pc, #656]	@ (8006258 <loadMenuTexts+0x384>)
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	461d      	mov	r5, r3
 8005fca:	6828      	ldr	r0, [r5, #0]
 8005fcc:	6869      	ldr	r1, [r5, #4]
 8005fce:	68aa      	ldr	r2, [r5, #8]
 8005fd0:	68eb      	ldr	r3, [r5, #12]
 8005fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd4:	7c2b      	ldrb	r3, [r5, #16]
 8005fd6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8005fd8:	4aa0      	ldr	r2, [pc, #640]	@ (800625c <loadMenuTexts+0x388>)
 8005fda:	4ba1      	ldr	r3, [pc, #644]	@ (8006260 <loadMenuTexts+0x38c>)
 8005fdc:	4614      	mov	r4, r2
 8005fde:	461d      	mov	r5, r3
 8005fe0:	6828      	ldr	r0, [r5, #0]
 8005fe2:	6869      	ldr	r1, [r5, #4]
 8005fe4:	68aa      	ldr	r2, [r5, #8]
 8005fe6:	68eb      	ldr	r3, [r5, #12]
 8005fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fea:	7c2b      	ldrb	r3, [r5, #16]
 8005fec:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8005fee:	4a9d      	ldr	r2, [pc, #628]	@ (8006264 <loadMenuTexts+0x390>)
 8005ff0:	4b9d      	ldr	r3, [pc, #628]	@ (8006268 <loadMenuTexts+0x394>)
 8005ff2:	4614      	mov	r4, r2
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	6828      	ldr	r0, [r5, #0]
 8005ff8:	6869      	ldr	r1, [r5, #4]
 8005ffa:	68aa      	ldr	r2, [r5, #8]
 8005ffc:	68eb      	ldr	r3, [r5, #12]
 8005ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006000:	7c2b      	ldrb	r3, [r5, #16]
 8006002:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006004:	4a99      	ldr	r2, [pc, #612]	@ (800626c <loadMenuTexts+0x398>)
 8006006:	4b9a      	ldr	r3, [pc, #616]	@ (8006270 <loadMenuTexts+0x39c>)
 8006008:	4614      	mov	r4, r2
 800600a:	461d      	mov	r5, r3
 800600c:	6828      	ldr	r0, [r5, #0]
 800600e:	6869      	ldr	r1, [r5, #4]
 8006010:	68aa      	ldr	r2, [r5, #8]
 8006012:	68eb      	ldr	r3, [r5, #12]
 8006014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006016:	7c2b      	ldrb	r3, [r5, #16]
 8006018:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800601a:	4a96      	ldr	r2, [pc, #600]	@ (8006274 <loadMenuTexts+0x3a0>)
 800601c:	4b96      	ldr	r3, [pc, #600]	@ (8006278 <loadMenuTexts+0x3a4>)
 800601e:	4614      	mov	r4, r2
 8006020:	461d      	mov	r5, r3
 8006022:	6828      	ldr	r0, [r5, #0]
 8006024:	6869      	ldr	r1, [r5, #4]
 8006026:	68aa      	ldr	r2, [r5, #8]
 8006028:	68eb      	ldr	r3, [r5, #12]
 800602a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800602c:	7c2b      	ldrb	r3, [r5, #16]
 800602e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006030:	4a92      	ldr	r2, [pc, #584]	@ (800627c <loadMenuTexts+0x3a8>)
 8006032:	4b93      	ldr	r3, [pc, #588]	@ (8006280 <loadMenuTexts+0x3ac>)
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	6828      	ldr	r0, [r5, #0]
 800603a:	6869      	ldr	r1, [r5, #4]
 800603c:	68aa      	ldr	r2, [r5, #8]
 800603e:	68eb      	ldr	r3, [r5, #12]
 8006040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006042:	7c2b      	ldrb	r3, [r5, #16]
 8006044:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006046:	4a8f      	ldr	r2, [pc, #572]	@ (8006284 <loadMenuTexts+0x3b0>)
 8006048:	4b8f      	ldr	r3, [pc, #572]	@ (8006288 <loadMenuTexts+0x3b4>)
 800604a:	4614      	mov	r4, r2
 800604c:	461d      	mov	r5, r3
 800604e:	6828      	ldr	r0, [r5, #0]
 8006050:	6869      	ldr	r1, [r5, #4]
 8006052:	68aa      	ldr	r2, [r5, #8]
 8006054:	68eb      	ldr	r3, [r5, #12]
 8006056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006058:	7c2b      	ldrb	r3, [r5, #16]
 800605a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800605c:	4a8b      	ldr	r2, [pc, #556]	@ (800628c <loadMenuTexts+0x3b8>)
 800605e:	4b8c      	ldr	r3, [pc, #560]	@ (8006290 <loadMenuTexts+0x3bc>)
 8006060:	4614      	mov	r4, r2
 8006062:	461d      	mov	r5, r3
 8006064:	6828      	ldr	r0, [r5, #0]
 8006066:	6869      	ldr	r1, [r5, #4]
 8006068:	68aa      	ldr	r2, [r5, #8]
 800606a:	68eb      	ldr	r3, [r5, #12]
 800606c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800606e:	7c2b      	ldrb	r3, [r5, #16]
 8006070:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006072:	4a88      	ldr	r2, [pc, #544]	@ (8006294 <loadMenuTexts+0x3c0>)
 8006074:	4b88      	ldr	r3, [pc, #544]	@ (8006298 <loadMenuTexts+0x3c4>)
 8006076:	4614      	mov	r4, r2
 8006078:	461d      	mov	r5, r3
 800607a:	6828      	ldr	r0, [r5, #0]
 800607c:	6869      	ldr	r1, [r5, #4]
 800607e:	68aa      	ldr	r2, [r5, #8]
 8006080:	68eb      	ldr	r3, [r5, #12]
 8006082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006084:	7c2b      	ldrb	r3, [r5, #16]
 8006086:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006088:	4a84      	ldr	r2, [pc, #528]	@ (800629c <loadMenuTexts+0x3c8>)
 800608a:	4b85      	ldr	r3, [pc, #532]	@ (80062a0 <loadMenuTexts+0x3cc>)
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	6828      	ldr	r0, [r5, #0]
 8006092:	6869      	ldr	r1, [r5, #4]
 8006094:	68aa      	ldr	r2, [r5, #8]
 8006096:	68eb      	ldr	r3, [r5, #12]
 8006098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800609a:	7c2b      	ldrb	r3, [r5, #16]
 800609c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800609e:	4a81      	ldr	r2, [pc, #516]	@ (80062a4 <loadMenuTexts+0x3d0>)
 80060a0:	4b81      	ldr	r3, [pc, #516]	@ (80062a8 <loadMenuTexts+0x3d4>)
 80060a2:	4614      	mov	r4, r2
 80060a4:	461d      	mov	r5, r3
 80060a6:	6828      	ldr	r0, [r5, #0]
 80060a8:	6869      	ldr	r1, [r5, #4]
 80060aa:	68aa      	ldr	r2, [r5, #8]
 80060ac:	68eb      	ldr	r3, [r5, #12]
 80060ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b0:	7c2b      	ldrb	r3, [r5, #16]
 80060b2:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80060b4:	4a7d      	ldr	r2, [pc, #500]	@ (80062ac <loadMenuTexts+0x3d8>)
 80060b6:	4b7e      	ldr	r3, [pc, #504]	@ (80062b0 <loadMenuTexts+0x3dc>)
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	6828      	ldr	r0, [r5, #0]
 80060be:	6869      	ldr	r1, [r5, #4]
 80060c0:	68aa      	ldr	r2, [r5, #8]
 80060c2:	68eb      	ldr	r3, [r5, #12]
 80060c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060c6:	7c2b      	ldrb	r3, [r5, #16]
 80060c8:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80060ca:	4a7a      	ldr	r2, [pc, #488]	@ (80062b4 <loadMenuTexts+0x3e0>)
 80060cc:	4b7a      	ldr	r3, [pc, #488]	@ (80062b8 <loadMenuTexts+0x3e4>)
 80060ce:	4614      	mov	r4, r2
 80060d0:	461d      	mov	r5, r3
 80060d2:	6828      	ldr	r0, [r5, #0]
 80060d4:	6869      	ldr	r1, [r5, #4]
 80060d6:	68aa      	ldr	r2, [r5, #8]
 80060d8:	68eb      	ldr	r3, [r5, #12]
 80060da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060dc:	7c2b      	ldrb	r3, [r5, #16]
 80060de:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80060e0:	4a76      	ldr	r2, [pc, #472]	@ (80062bc <loadMenuTexts+0x3e8>)
 80060e2:	4b77      	ldr	r3, [pc, #476]	@ (80062c0 <loadMenuTexts+0x3ec>)
 80060e4:	4614      	mov	r4, r2
 80060e6:	461d      	mov	r5, r3
 80060e8:	6828      	ldr	r0, [r5, #0]
 80060ea:	6869      	ldr	r1, [r5, #4]
 80060ec:	68aa      	ldr	r2, [r5, #8]
 80060ee:	68eb      	ldr	r3, [r5, #12]
 80060f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060f2:	7c2b      	ldrb	r3, [r5, #16]
 80060f4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80060f6:	4a73      	ldr	r2, [pc, #460]	@ (80062c4 <loadMenuTexts+0x3f0>)
 80060f8:	4b73      	ldr	r3, [pc, #460]	@ (80062c8 <loadMenuTexts+0x3f4>)
 80060fa:	4614      	mov	r4, r2
 80060fc:	461d      	mov	r5, r3
 80060fe:	6828      	ldr	r0, [r5, #0]
 8006100:	6869      	ldr	r1, [r5, #4]
 8006102:	68aa      	ldr	r2, [r5, #8]
 8006104:	68eb      	ldr	r3, [r5, #12]
 8006106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006108:	7c2b      	ldrb	r3, [r5, #16]
 800610a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 800610c:	4a6f      	ldr	r2, [pc, #444]	@ (80062cc <loadMenuTexts+0x3f8>)
 800610e:	4b70      	ldr	r3, [pc, #448]	@ (80062d0 <loadMenuTexts+0x3fc>)
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	6828      	ldr	r0, [r5, #0]
 8006116:	6869      	ldr	r1, [r5, #4]
 8006118:	68aa      	ldr	r2, [r5, #8]
 800611a:	68eb      	ldr	r3, [r5, #12]
 800611c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611e:	7c2b      	ldrb	r3, [r5, #16]
 8006120:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006122:	4a6c      	ldr	r2, [pc, #432]	@ (80062d4 <loadMenuTexts+0x400>)
 8006124:	4b6c      	ldr	r3, [pc, #432]	@ (80062d8 <loadMenuTexts+0x404>)
 8006126:	4614      	mov	r4, r2
 8006128:	461d      	mov	r5, r3
 800612a:	6828      	ldr	r0, [r5, #0]
 800612c:	6869      	ldr	r1, [r5, #4]
 800612e:	68aa      	ldr	r2, [r5, #8]
 8006130:	68eb      	ldr	r3, [r5, #12]
 8006132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006134:	7c2b      	ldrb	r3, [r5, #16]
 8006136:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006138:	4a68      	ldr	r2, [pc, #416]	@ (80062dc <loadMenuTexts+0x408>)
 800613a:	4b69      	ldr	r3, [pc, #420]	@ (80062e0 <loadMenuTexts+0x40c>)
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	6828      	ldr	r0, [r5, #0]
 8006142:	6869      	ldr	r1, [r5, #4]
 8006144:	68aa      	ldr	r2, [r5, #8]
 8006146:	68eb      	ldr	r3, [r5, #12]
 8006148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614a:	7c2b      	ldrb	r3, [r5, #16]
 800614c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800614e:	4a65      	ldr	r2, [pc, #404]	@ (80062e4 <loadMenuTexts+0x410>)
 8006150:	4b65      	ldr	r3, [pc, #404]	@ (80062e8 <loadMenuTexts+0x414>)
 8006152:	4614      	mov	r4, r2
 8006154:	461d      	mov	r5, r3
 8006156:	6828      	ldr	r0, [r5, #0]
 8006158:	6869      	ldr	r1, [r5, #4]
 800615a:	68aa      	ldr	r2, [r5, #8]
 800615c:	68eb      	ldr	r3, [r5, #12]
 800615e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006160:	7c2b      	ldrb	r3, [r5, #16]
 8006162:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006164:	4a61      	ldr	r2, [pc, #388]	@ (80062ec <loadMenuTexts+0x418>)
 8006166:	4b62      	ldr	r3, [pc, #392]	@ (80062f0 <loadMenuTexts+0x41c>)
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	6828      	ldr	r0, [r5, #0]
 800616e:	6869      	ldr	r1, [r5, #4]
 8006170:	68aa      	ldr	r2, [r5, #8]
 8006172:	68eb      	ldr	r3, [r5, #12]
 8006174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006176:	7c2b      	ldrb	r3, [r5, #16]
 8006178:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800617a:	4a5e      	ldr	r2, [pc, #376]	@ (80062f4 <loadMenuTexts+0x420>)
 800617c:	4b5e      	ldr	r3, [pc, #376]	@ (80062f8 <loadMenuTexts+0x424>)
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	6828      	ldr	r0, [r5, #0]
 8006184:	6869      	ldr	r1, [r5, #4]
 8006186:	68aa      	ldr	r2, [r5, #8]
 8006188:	68eb      	ldr	r3, [r5, #12]
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	7c2b      	ldrb	r3, [r5, #16]
 800618e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006190:	4a5a      	ldr	r2, [pc, #360]	@ (80062fc <loadMenuTexts+0x428>)
 8006192:	4b5b      	ldr	r3, [pc, #364]	@ (8006300 <loadMenuTexts+0x42c>)
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	6828      	ldr	r0, [r5, #0]
 800619a:	6869      	ldr	r1, [r5, #4]
 800619c:	68aa      	ldr	r2, [r5, #8]
 800619e:	68eb      	ldr	r3, [r5, #12]
 80061a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a2:	7c2b      	ldrb	r3, [r5, #16]
 80061a4:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80061a6:	4a57      	ldr	r2, [pc, #348]	@ (8006304 <loadMenuTexts+0x430>)
 80061a8:	4b57      	ldr	r3, [pc, #348]	@ (8006308 <loadMenuTexts+0x434>)
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	6828      	ldr	r0, [r5, #0]
 80061b0:	6869      	ldr	r1, [r5, #4]
 80061b2:	68aa      	ldr	r2, [r5, #8]
 80061b4:	68eb      	ldr	r3, [r5, #12]
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	7c2b      	ldrb	r3, [r5, #16]
 80061ba:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80061bc:	4a53      	ldr	r2, [pc, #332]	@ (800630c <loadMenuTexts+0x438>)
 80061be:	4b54      	ldr	r3, [pc, #336]	@ (8006310 <loadMenuTexts+0x43c>)
 80061c0:	4614      	mov	r4, r2
 80061c2:	461d      	mov	r5, r3
 80061c4:	6828      	ldr	r0, [r5, #0]
 80061c6:	6869      	ldr	r1, [r5, #4]
 80061c8:	68aa      	ldr	r2, [r5, #8]
 80061ca:	68eb      	ldr	r3, [r5, #12]
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	7c2b      	ldrb	r3, [r5, #16]
 80061d0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80061d2:	4a50      	ldr	r2, [pc, #320]	@ (8006314 <loadMenuTexts+0x440>)
 80061d4:	4b50      	ldr	r3, [pc, #320]	@ (8006318 <loadMenuTexts+0x444>)
 80061d6:	4614      	mov	r4, r2
 80061d8:	461d      	mov	r5, r3
 80061da:	6828      	ldr	r0, [r5, #0]
 80061dc:	6869      	ldr	r1, [r5, #4]
 80061de:	68aa      	ldr	r2, [r5, #8]
 80061e0:	68eb      	ldr	r3, [r5, #12]
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	7c2b      	ldrb	r3, [r5, #16]
 80061e6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80061e8:	4a4c      	ldr	r2, [pc, #304]	@ (800631c <loadMenuTexts+0x448>)
 80061ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006320 <loadMenuTexts+0x44c>)
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	6828      	ldr	r0, [r5, #0]
 80061f2:	6869      	ldr	r1, [r5, #4]
 80061f4:	68aa      	ldr	r2, [r5, #8]
 80061f6:	68eb      	ldr	r3, [r5, #12]
 80061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fa:	7c2b      	ldrb	r3, [r5, #16]
 80061fc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80061fe:	4a49      	ldr	r2, [pc, #292]	@ (8006324 <loadMenuTexts+0x450>)
 8006200:	e092      	b.n	8006328 <loadMenuTexts+0x454>
 8006202:	bf00      	nop
 8006204:	20001200 	.word	0x20001200
 8006208:	20000190 	.word	0x20000190
 800620c:	20001214 	.word	0x20001214
 8006210:	200001a4 	.word	0x200001a4
 8006214:	20001228 	.word	0x20001228
 8006218:	200001b8 	.word	0x200001b8
 800621c:	2000123c 	.word	0x2000123c
 8006220:	200001cc 	.word	0x200001cc
 8006224:	20001250 	.word	0x20001250
 8006228:	200001e0 	.word	0x200001e0
 800622c:	20001264 	.word	0x20001264
 8006230:	200001f4 	.word	0x200001f4
 8006234:	20001278 	.word	0x20001278
 8006238:	20000208 	.word	0x20000208
 800623c:	2000128c 	.word	0x2000128c
 8006240:	2000021c 	.word	0x2000021c
 8006244:	200012a0 	.word	0x200012a0
 8006248:	20000230 	.word	0x20000230
 800624c:	200012b4 	.word	0x200012b4
 8006250:	20000244 	.word	0x20000244
 8006254:	200012c8 	.word	0x200012c8
 8006258:	20000258 	.word	0x20000258
 800625c:	200012dc 	.word	0x200012dc
 8006260:	2000026c 	.word	0x2000026c
 8006264:	200012f0 	.word	0x200012f0
 8006268:	20000280 	.word	0x20000280
 800626c:	20001304 	.word	0x20001304
 8006270:	20000294 	.word	0x20000294
 8006274:	20001318 	.word	0x20001318
 8006278:	200002a8 	.word	0x200002a8
 800627c:	2000132c 	.word	0x2000132c
 8006280:	200002bc 	.word	0x200002bc
 8006284:	20001340 	.word	0x20001340
 8006288:	200002d0 	.word	0x200002d0
 800628c:	20001354 	.word	0x20001354
 8006290:	200002e4 	.word	0x200002e4
 8006294:	20001368 	.word	0x20001368
 8006298:	200002f8 	.word	0x200002f8
 800629c:	2000137c 	.word	0x2000137c
 80062a0:	2000030c 	.word	0x2000030c
 80062a4:	20001390 	.word	0x20001390
 80062a8:	20000320 	.word	0x20000320
 80062ac:	200013a4 	.word	0x200013a4
 80062b0:	20000334 	.word	0x20000334
 80062b4:	200013b8 	.word	0x200013b8
 80062b8:	20000348 	.word	0x20000348
 80062bc:	200013cc 	.word	0x200013cc
 80062c0:	2000035c 	.word	0x2000035c
 80062c4:	200013e0 	.word	0x200013e0
 80062c8:	20000370 	.word	0x20000370
 80062cc:	200013f4 	.word	0x200013f4
 80062d0:	20000384 	.word	0x20000384
 80062d4:	20001408 	.word	0x20001408
 80062d8:	20000398 	.word	0x20000398
 80062dc:	2000141c 	.word	0x2000141c
 80062e0:	200003ac 	.word	0x200003ac
 80062e4:	20001430 	.word	0x20001430
 80062e8:	200003c0 	.word	0x200003c0
 80062ec:	20001444 	.word	0x20001444
 80062f0:	200003d4 	.word	0x200003d4
 80062f4:	20001458 	.word	0x20001458
 80062f8:	200003e8 	.word	0x200003e8
 80062fc:	2000146c 	.word	0x2000146c
 8006300:	200003fc 	.word	0x200003fc
 8006304:	20001480 	.word	0x20001480
 8006308:	20000410 	.word	0x20000410
 800630c:	20001494 	.word	0x20001494
 8006310:	20000424 	.word	0x20000424
 8006314:	200014a8 	.word	0x200014a8
 8006318:	20000438 	.word	0x20000438
 800631c:	200014bc 	.word	0x200014bc
 8006320:	2000044c 	.word	0x2000044c
 8006324:	200014d0 	.word	0x200014d0
 8006328:	4bc7      	ldr	r3, [pc, #796]	@ (8006648 <loadMenuTexts+0x774>)
 800632a:	4614      	mov	r4, r2
 800632c:	461d      	mov	r5, r3
 800632e:	6828      	ldr	r0, [r5, #0]
 8006330:	6869      	ldr	r1, [r5, #4]
 8006332:	68aa      	ldr	r2, [r5, #8]
 8006334:	68eb      	ldr	r3, [r5, #12]
 8006336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006338:	7c2b      	ldrb	r3, [r5, #16]
 800633a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800633c:	4ac3      	ldr	r2, [pc, #780]	@ (800664c <loadMenuTexts+0x778>)
 800633e:	4bc4      	ldr	r3, [pc, #784]	@ (8006650 <loadMenuTexts+0x77c>)
 8006340:	4614      	mov	r4, r2
 8006342:	461d      	mov	r5, r3
 8006344:	6828      	ldr	r0, [r5, #0]
 8006346:	6869      	ldr	r1, [r5, #4]
 8006348:	68aa      	ldr	r2, [r5, #8]
 800634a:	68eb      	ldr	r3, [r5, #12]
 800634c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800634e:	7c2b      	ldrb	r3, [r5, #16]
 8006350:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006352:	4ac0      	ldr	r2, [pc, #768]	@ (8006654 <loadMenuTexts+0x780>)
 8006354:	4bc0      	ldr	r3, [pc, #768]	@ (8006658 <loadMenuTexts+0x784>)
 8006356:	4614      	mov	r4, r2
 8006358:	461d      	mov	r5, r3
 800635a:	6828      	ldr	r0, [r5, #0]
 800635c:	6869      	ldr	r1, [r5, #4]
 800635e:	68aa      	ldr	r2, [r5, #8]
 8006360:	68eb      	ldr	r3, [r5, #12]
 8006362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006364:	7c2b      	ldrb	r3, [r5, #16]
 8006366:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006368:	4abc      	ldr	r2, [pc, #752]	@ (800665c <loadMenuTexts+0x788>)
 800636a:	4bbd      	ldr	r3, [pc, #756]	@ (8006660 <loadMenuTexts+0x78c>)
 800636c:	4614      	mov	r4, r2
 800636e:	461d      	mov	r5, r3
 8006370:	6828      	ldr	r0, [r5, #0]
 8006372:	6869      	ldr	r1, [r5, #4]
 8006374:	68aa      	ldr	r2, [r5, #8]
 8006376:	68eb      	ldr	r3, [r5, #12]
 8006378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800637a:	7c2b      	ldrb	r3, [r5, #16]
 800637c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800637e:	4ab9      	ldr	r2, [pc, #740]	@ (8006664 <loadMenuTexts+0x790>)
 8006380:	4bb9      	ldr	r3, [pc, #740]	@ (8006668 <loadMenuTexts+0x794>)
 8006382:	4614      	mov	r4, r2
 8006384:	461d      	mov	r5, r3
 8006386:	6828      	ldr	r0, [r5, #0]
 8006388:	6869      	ldr	r1, [r5, #4]
 800638a:	68aa      	ldr	r2, [r5, #8]
 800638c:	68eb      	ldr	r3, [r5, #12]
 800638e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006390:	7c2b      	ldrb	r3, [r5, #16]
 8006392:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006394:	4ab5      	ldr	r2, [pc, #724]	@ (800666c <loadMenuTexts+0x798>)
 8006396:	4bb6      	ldr	r3, [pc, #728]	@ (8006670 <loadMenuTexts+0x79c>)
 8006398:	4614      	mov	r4, r2
 800639a:	461d      	mov	r5, r3
 800639c:	6828      	ldr	r0, [r5, #0]
 800639e:	6869      	ldr	r1, [r5, #4]
 80063a0:	68aa      	ldr	r2, [r5, #8]
 80063a2:	68eb      	ldr	r3, [r5, #12]
 80063a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063a6:	7c2b      	ldrb	r3, [r5, #16]
 80063a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80063aa:	4ab2      	ldr	r2, [pc, #712]	@ (8006674 <loadMenuTexts+0x7a0>)
 80063ac:	4bb2      	ldr	r3, [pc, #712]	@ (8006678 <loadMenuTexts+0x7a4>)
 80063ae:	4614      	mov	r4, r2
 80063b0:	461d      	mov	r5, r3
 80063b2:	6828      	ldr	r0, [r5, #0]
 80063b4:	6869      	ldr	r1, [r5, #4]
 80063b6:	68aa      	ldr	r2, [r5, #8]
 80063b8:	68eb      	ldr	r3, [r5, #12]
 80063ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063bc:	7c2b      	ldrb	r3, [r5, #16]
 80063be:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80063c0:	4aae      	ldr	r2, [pc, #696]	@ (800667c <loadMenuTexts+0x7a8>)
 80063c2:	4baf      	ldr	r3, [pc, #700]	@ (8006680 <loadMenuTexts+0x7ac>)
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	6828      	ldr	r0, [r5, #0]
 80063ca:	6869      	ldr	r1, [r5, #4]
 80063cc:	68aa      	ldr	r2, [r5, #8]
 80063ce:	68eb      	ldr	r3, [r5, #12]
 80063d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d2:	7c2b      	ldrb	r3, [r5, #16]
 80063d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80063d6:	4aab      	ldr	r2, [pc, #684]	@ (8006684 <loadMenuTexts+0x7b0>)
 80063d8:	4bab      	ldr	r3, [pc, #684]	@ (8006688 <loadMenuTexts+0x7b4>)
 80063da:	4614      	mov	r4, r2
 80063dc:	461d      	mov	r5, r3
 80063de:	6828      	ldr	r0, [r5, #0]
 80063e0:	6869      	ldr	r1, [r5, #4]
 80063e2:	68aa      	ldr	r2, [r5, #8]
 80063e4:	68eb      	ldr	r3, [r5, #12]
 80063e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e8:	7c2b      	ldrb	r3, [r5, #16]
 80063ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80063ec:	4aa7      	ldr	r2, [pc, #668]	@ (800668c <loadMenuTexts+0x7b8>)
 80063ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006690 <loadMenuTexts+0x7bc>)
 80063f0:	4614      	mov	r4, r2
 80063f2:	461d      	mov	r5, r3
 80063f4:	6828      	ldr	r0, [r5, #0]
 80063f6:	6869      	ldr	r1, [r5, #4]
 80063f8:	68aa      	ldr	r2, [r5, #8]
 80063fa:	68eb      	ldr	r3, [r5, #12]
 80063fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063fe:	7c2b      	ldrb	r3, [r5, #16]
 8006400:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006402:	4aa4      	ldr	r2, [pc, #656]	@ (8006694 <loadMenuTexts+0x7c0>)
 8006404:	4ba4      	ldr	r3, [pc, #656]	@ (8006698 <loadMenuTexts+0x7c4>)
 8006406:	4614      	mov	r4, r2
 8006408:	461d      	mov	r5, r3
 800640a:	6828      	ldr	r0, [r5, #0]
 800640c:	6869      	ldr	r1, [r5, #4]
 800640e:	68aa      	ldr	r2, [r5, #8]
 8006410:	68eb      	ldr	r3, [r5, #12]
 8006412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006414:	7c2b      	ldrb	r3, [r5, #16]
 8006416:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006418:	4aa0      	ldr	r2, [pc, #640]	@ (800669c <loadMenuTexts+0x7c8>)
 800641a:	4ba1      	ldr	r3, [pc, #644]	@ (80066a0 <loadMenuTexts+0x7cc>)
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	6828      	ldr	r0, [r5, #0]
 8006422:	6869      	ldr	r1, [r5, #4]
 8006424:	68aa      	ldr	r2, [r5, #8]
 8006426:	68eb      	ldr	r3, [r5, #12]
 8006428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800642a:	7c2b      	ldrb	r3, [r5, #16]
 800642c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800642e:	4a9d      	ldr	r2, [pc, #628]	@ (80066a4 <loadMenuTexts+0x7d0>)
 8006430:	4b9d      	ldr	r3, [pc, #628]	@ (80066a8 <loadMenuTexts+0x7d4>)
 8006432:	4614      	mov	r4, r2
 8006434:	461d      	mov	r5, r3
 8006436:	6828      	ldr	r0, [r5, #0]
 8006438:	6869      	ldr	r1, [r5, #4]
 800643a:	68aa      	ldr	r2, [r5, #8]
 800643c:	68eb      	ldr	r3, [r5, #12]
 800643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006440:	7c2b      	ldrb	r3, [r5, #16]
 8006442:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006444:	4a99      	ldr	r2, [pc, #612]	@ (80066ac <loadMenuTexts+0x7d8>)
 8006446:	4b9a      	ldr	r3, [pc, #616]	@ (80066b0 <loadMenuTexts+0x7dc>)
 8006448:	4614      	mov	r4, r2
 800644a:	461d      	mov	r5, r3
 800644c:	6828      	ldr	r0, [r5, #0]
 800644e:	6869      	ldr	r1, [r5, #4]
 8006450:	68aa      	ldr	r2, [r5, #8]
 8006452:	68eb      	ldr	r3, [r5, #12]
 8006454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006456:	7c2b      	ldrb	r3, [r5, #16]
 8006458:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800645a:	4a96      	ldr	r2, [pc, #600]	@ (80066b4 <loadMenuTexts+0x7e0>)
 800645c:	4b96      	ldr	r3, [pc, #600]	@ (80066b8 <loadMenuTexts+0x7e4>)
 800645e:	4614      	mov	r4, r2
 8006460:	461d      	mov	r5, r3
 8006462:	6828      	ldr	r0, [r5, #0]
 8006464:	6869      	ldr	r1, [r5, #4]
 8006466:	68aa      	ldr	r2, [r5, #8]
 8006468:	68eb      	ldr	r3, [r5, #12]
 800646a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646c:	7c2b      	ldrb	r3, [r5, #16]
 800646e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006470:	4a92      	ldr	r2, [pc, #584]	@ (80066bc <loadMenuTexts+0x7e8>)
 8006472:	4b93      	ldr	r3, [pc, #588]	@ (80066c0 <loadMenuTexts+0x7ec>)
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	6828      	ldr	r0, [r5, #0]
 800647a:	6869      	ldr	r1, [r5, #4]
 800647c:	68aa      	ldr	r2, [r5, #8]
 800647e:	68eb      	ldr	r3, [r5, #12]
 8006480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006482:	7c2b      	ldrb	r3, [r5, #16]
 8006484:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006486:	4a8f      	ldr	r2, [pc, #572]	@ (80066c4 <loadMenuTexts+0x7f0>)
 8006488:	4b8f      	ldr	r3, [pc, #572]	@ (80066c8 <loadMenuTexts+0x7f4>)
 800648a:	4614      	mov	r4, r2
 800648c:	461d      	mov	r5, r3
 800648e:	6828      	ldr	r0, [r5, #0]
 8006490:	6869      	ldr	r1, [r5, #4]
 8006492:	68aa      	ldr	r2, [r5, #8]
 8006494:	68eb      	ldr	r3, [r5, #12]
 8006496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006498:	7c2b      	ldrb	r3, [r5, #16]
 800649a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800649c:	4a8b      	ldr	r2, [pc, #556]	@ (80066cc <loadMenuTexts+0x7f8>)
 800649e:	4b8c      	ldr	r3, [pc, #560]	@ (80066d0 <loadMenuTexts+0x7fc>)
 80064a0:	4614      	mov	r4, r2
 80064a2:	461d      	mov	r5, r3
 80064a4:	6828      	ldr	r0, [r5, #0]
 80064a6:	6869      	ldr	r1, [r5, #4]
 80064a8:	68aa      	ldr	r2, [r5, #8]
 80064aa:	68eb      	ldr	r3, [r5, #12]
 80064ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ae:	7c2b      	ldrb	r3, [r5, #16]
 80064b0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80064b2:	4a88      	ldr	r2, [pc, #544]	@ (80066d4 <loadMenuTexts+0x800>)
 80064b4:	4b88      	ldr	r3, [pc, #544]	@ (80066d8 <loadMenuTexts+0x804>)
 80064b6:	4614      	mov	r4, r2
 80064b8:	461d      	mov	r5, r3
 80064ba:	6828      	ldr	r0, [r5, #0]
 80064bc:	6869      	ldr	r1, [r5, #4]
 80064be:	68aa      	ldr	r2, [r5, #8]
 80064c0:	68eb      	ldr	r3, [r5, #12]
 80064c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c4:	7c2b      	ldrb	r3, [r5, #16]
 80064c6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80064c8:	4a84      	ldr	r2, [pc, #528]	@ (80066dc <loadMenuTexts+0x808>)
 80064ca:	4b85      	ldr	r3, [pc, #532]	@ (80066e0 <loadMenuTexts+0x80c>)
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	6828      	ldr	r0, [r5, #0]
 80064d2:	6869      	ldr	r1, [r5, #4]
 80064d4:	68aa      	ldr	r2, [r5, #8]
 80064d6:	68eb      	ldr	r3, [r5, #12]
 80064d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064da:	7c2b      	ldrb	r3, [r5, #16]
 80064dc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80064de:	4a81      	ldr	r2, [pc, #516]	@ (80066e4 <loadMenuTexts+0x810>)
 80064e0:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <loadMenuTexts+0x814>)
 80064e2:	4614      	mov	r4, r2
 80064e4:	461d      	mov	r5, r3
 80064e6:	6828      	ldr	r0, [r5, #0]
 80064e8:	6869      	ldr	r1, [r5, #4]
 80064ea:	68aa      	ldr	r2, [r5, #8]
 80064ec:	68eb      	ldr	r3, [r5, #12]
 80064ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f0:	7c2b      	ldrb	r3, [r5, #16]
 80064f2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80064f4:	4a7d      	ldr	r2, [pc, #500]	@ (80066ec <loadMenuTexts+0x818>)
 80064f6:	4b7e      	ldr	r3, [pc, #504]	@ (80066f0 <loadMenuTexts+0x81c>)
 80064f8:	4614      	mov	r4, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	6828      	ldr	r0, [r5, #0]
 80064fe:	6869      	ldr	r1, [r5, #4]
 8006500:	68aa      	ldr	r2, [r5, #8]
 8006502:	68eb      	ldr	r3, [r5, #12]
 8006504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006506:	7c2b      	ldrb	r3, [r5, #16]
 8006508:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800650a:	4a7a      	ldr	r2, [pc, #488]	@ (80066f4 <loadMenuTexts+0x820>)
 800650c:	4b7a      	ldr	r3, [pc, #488]	@ (80066f8 <loadMenuTexts+0x824>)
 800650e:	4614      	mov	r4, r2
 8006510:	461d      	mov	r5, r3
 8006512:	6828      	ldr	r0, [r5, #0]
 8006514:	6869      	ldr	r1, [r5, #4]
 8006516:	68aa      	ldr	r2, [r5, #8]
 8006518:	68eb      	ldr	r3, [r5, #12]
 800651a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651c:	7c2b      	ldrb	r3, [r5, #16]
 800651e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006520:	4a76      	ldr	r2, [pc, #472]	@ (80066fc <loadMenuTexts+0x828>)
 8006522:	4b77      	ldr	r3, [pc, #476]	@ (8006700 <loadMenuTexts+0x82c>)
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	6828      	ldr	r0, [r5, #0]
 800652a:	6869      	ldr	r1, [r5, #4]
 800652c:	68aa      	ldr	r2, [r5, #8]
 800652e:	68eb      	ldr	r3, [r5, #12]
 8006530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006532:	7c2b      	ldrb	r3, [r5, #16]
 8006534:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006536:	4a73      	ldr	r2, [pc, #460]	@ (8006704 <loadMenuTexts+0x830>)
 8006538:	4b73      	ldr	r3, [pc, #460]	@ (8006708 <loadMenuTexts+0x834>)
 800653a:	4614      	mov	r4, r2
 800653c:	461d      	mov	r5, r3
 800653e:	6828      	ldr	r0, [r5, #0]
 8006540:	6869      	ldr	r1, [r5, #4]
 8006542:	68aa      	ldr	r2, [r5, #8]
 8006544:	68eb      	ldr	r3, [r5, #12]
 8006546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006548:	7c2b      	ldrb	r3, [r5, #16]
 800654a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800654c:	4a6f      	ldr	r2, [pc, #444]	@ (800670c <loadMenuTexts+0x838>)
 800654e:	4b70      	ldr	r3, [pc, #448]	@ (8006710 <loadMenuTexts+0x83c>)
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	6828      	ldr	r0, [r5, #0]
 8006556:	6869      	ldr	r1, [r5, #4]
 8006558:	68aa      	ldr	r2, [r5, #8]
 800655a:	68eb      	ldr	r3, [r5, #12]
 800655c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655e:	7c2b      	ldrb	r3, [r5, #16]
 8006560:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006562:	4a6c      	ldr	r2, [pc, #432]	@ (8006714 <loadMenuTexts+0x840>)
 8006564:	4b6c      	ldr	r3, [pc, #432]	@ (8006718 <loadMenuTexts+0x844>)
 8006566:	4614      	mov	r4, r2
 8006568:	461d      	mov	r5, r3
 800656a:	6828      	ldr	r0, [r5, #0]
 800656c:	6869      	ldr	r1, [r5, #4]
 800656e:	68aa      	ldr	r2, [r5, #8]
 8006570:	68eb      	ldr	r3, [r5, #12]
 8006572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006574:	7c2b      	ldrb	r3, [r5, #16]
 8006576:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006578:	4a68      	ldr	r2, [pc, #416]	@ (800671c <loadMenuTexts+0x848>)
 800657a:	4b69      	ldr	r3, [pc, #420]	@ (8006720 <loadMenuTexts+0x84c>)
 800657c:	4614      	mov	r4, r2
 800657e:	461d      	mov	r5, r3
 8006580:	6828      	ldr	r0, [r5, #0]
 8006582:	6869      	ldr	r1, [r5, #4]
 8006584:	68aa      	ldr	r2, [r5, #8]
 8006586:	68eb      	ldr	r3, [r5, #12]
 8006588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658a:	7c2b      	ldrb	r3, [r5, #16]
 800658c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800658e:	4a65      	ldr	r2, [pc, #404]	@ (8006724 <loadMenuTexts+0x850>)
 8006590:	4b65      	ldr	r3, [pc, #404]	@ (8006728 <loadMenuTexts+0x854>)
 8006592:	4614      	mov	r4, r2
 8006594:	461d      	mov	r5, r3
 8006596:	6828      	ldr	r0, [r5, #0]
 8006598:	6869      	ldr	r1, [r5, #4]
 800659a:	68aa      	ldr	r2, [r5, #8]
 800659c:	68eb      	ldr	r3, [r5, #12]
 800659e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a0:	7c2b      	ldrb	r3, [r5, #16]
 80065a2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80065a4:	4a61      	ldr	r2, [pc, #388]	@ (800672c <loadMenuTexts+0x858>)
 80065a6:	4b62      	ldr	r3, [pc, #392]	@ (8006730 <loadMenuTexts+0x85c>)
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	6828      	ldr	r0, [r5, #0]
 80065ae:	6869      	ldr	r1, [r5, #4]
 80065b0:	68aa      	ldr	r2, [r5, #8]
 80065b2:	68eb      	ldr	r3, [r5, #12]
 80065b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b6:	7c2b      	ldrb	r3, [r5, #16]
 80065b8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80065ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006734 <loadMenuTexts+0x860>)
 80065bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006738 <loadMenuTexts+0x864>)
 80065be:	4614      	mov	r4, r2
 80065c0:	461d      	mov	r5, r3
 80065c2:	6828      	ldr	r0, [r5, #0]
 80065c4:	6869      	ldr	r1, [r5, #4]
 80065c6:	68aa      	ldr	r2, [r5, #8]
 80065c8:	68eb      	ldr	r3, [r5, #12]
 80065ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065cc:	7c2b      	ldrb	r3, [r5, #16]
 80065ce:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80065d0:	4a5a      	ldr	r2, [pc, #360]	@ (800673c <loadMenuTexts+0x868>)
 80065d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006740 <loadMenuTexts+0x86c>)
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	6828      	ldr	r0, [r5, #0]
 80065da:	6869      	ldr	r1, [r5, #4]
 80065dc:	68aa      	ldr	r2, [r5, #8]
 80065de:	68eb      	ldr	r3, [r5, #12]
 80065e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e2:	7c2b      	ldrb	r3, [r5, #16]
 80065e4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80065e6:	4a57      	ldr	r2, [pc, #348]	@ (8006744 <loadMenuTexts+0x870>)
 80065e8:	4b57      	ldr	r3, [pc, #348]	@ (8006748 <loadMenuTexts+0x874>)
 80065ea:	4614      	mov	r4, r2
 80065ec:	461d      	mov	r5, r3
 80065ee:	6828      	ldr	r0, [r5, #0]
 80065f0:	6869      	ldr	r1, [r5, #4]
 80065f2:	68aa      	ldr	r2, [r5, #8]
 80065f4:	68eb      	ldr	r3, [r5, #12]
 80065f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f8:	7c2b      	ldrb	r3, [r5, #16]
 80065fa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80065fc:	4a53      	ldr	r2, [pc, #332]	@ (800674c <loadMenuTexts+0x878>)
 80065fe:	4b54      	ldr	r3, [pc, #336]	@ (8006750 <loadMenuTexts+0x87c>)
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	6828      	ldr	r0, [r5, #0]
 8006606:	6869      	ldr	r1, [r5, #4]
 8006608:	68aa      	ldr	r2, [r5, #8]
 800660a:	68eb      	ldr	r3, [r5, #12]
 800660c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660e:	7c2b      	ldrb	r3, [r5, #16]
 8006610:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006612:	4a50      	ldr	r2, [pc, #320]	@ (8006754 <loadMenuTexts+0x880>)
 8006614:	4b50      	ldr	r3, [pc, #320]	@ (8006758 <loadMenuTexts+0x884>)
 8006616:	4614      	mov	r4, r2
 8006618:	461d      	mov	r5, r3
 800661a:	6828      	ldr	r0, [r5, #0]
 800661c:	6869      	ldr	r1, [r5, #4]
 800661e:	68aa      	ldr	r2, [r5, #8]
 8006620:	68eb      	ldr	r3, [r5, #12]
 8006622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006624:	7c2b      	ldrb	r3, [r5, #16]
 8006626:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006628:	4a4c      	ldr	r2, [pc, #304]	@ (800675c <loadMenuTexts+0x888>)
 800662a:	4b4d      	ldr	r3, [pc, #308]	@ (8006760 <loadMenuTexts+0x88c>)
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	6828      	ldr	r0, [r5, #0]
 8006632:	6869      	ldr	r1, [r5, #4]
 8006634:	68aa      	ldr	r2, [r5, #8]
 8006636:	68eb      	ldr	r3, [r5, #12]
 8006638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663a:	7c2b      	ldrb	r3, [r5, #16]
 800663c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800663e:	4a49      	ldr	r2, [pc, #292]	@ (8006764 <loadMenuTexts+0x890>)
 8006640:	4b49      	ldr	r3, [pc, #292]	@ (8006768 <loadMenuTexts+0x894>)
 8006642:	4614      	mov	r4, r2
 8006644:	461d      	mov	r5, r3
 8006646:	e091      	b.n	800676c <loadMenuTexts+0x898>
 8006648:	20000460 	.word	0x20000460
 800664c:	200014e4 	.word	0x200014e4
 8006650:	20000474 	.word	0x20000474
 8006654:	200014f8 	.word	0x200014f8
 8006658:	20000488 	.word	0x20000488
 800665c:	2000150c 	.word	0x2000150c
 8006660:	2000049c 	.word	0x2000049c
 8006664:	20001520 	.word	0x20001520
 8006668:	200004b0 	.word	0x200004b0
 800666c:	20001534 	.word	0x20001534
 8006670:	200004c4 	.word	0x200004c4
 8006674:	20001548 	.word	0x20001548
 8006678:	200004d8 	.word	0x200004d8
 800667c:	2000155c 	.word	0x2000155c
 8006680:	200004ec 	.word	0x200004ec
 8006684:	20001570 	.word	0x20001570
 8006688:	20000500 	.word	0x20000500
 800668c:	20001584 	.word	0x20001584
 8006690:	20000514 	.word	0x20000514
 8006694:	20001598 	.word	0x20001598
 8006698:	20000528 	.word	0x20000528
 800669c:	200015ac 	.word	0x200015ac
 80066a0:	2000053c 	.word	0x2000053c
 80066a4:	200015c0 	.word	0x200015c0
 80066a8:	20000550 	.word	0x20000550
 80066ac:	200015d4 	.word	0x200015d4
 80066b0:	20000564 	.word	0x20000564
 80066b4:	200015e8 	.word	0x200015e8
 80066b8:	20000578 	.word	0x20000578
 80066bc:	200015fc 	.word	0x200015fc
 80066c0:	2000058c 	.word	0x2000058c
 80066c4:	20001610 	.word	0x20001610
 80066c8:	200005a0 	.word	0x200005a0
 80066cc:	20001624 	.word	0x20001624
 80066d0:	200005b4 	.word	0x200005b4
 80066d4:	20001638 	.word	0x20001638
 80066d8:	200005c8 	.word	0x200005c8
 80066dc:	2000164c 	.word	0x2000164c
 80066e0:	200005dc 	.word	0x200005dc
 80066e4:	20001660 	.word	0x20001660
 80066e8:	200005f0 	.word	0x200005f0
 80066ec:	20001674 	.word	0x20001674
 80066f0:	20000604 	.word	0x20000604
 80066f4:	20001688 	.word	0x20001688
 80066f8:	20000618 	.word	0x20000618
 80066fc:	2000169c 	.word	0x2000169c
 8006700:	2000062c 	.word	0x2000062c
 8006704:	200016b0 	.word	0x200016b0
 8006708:	20000640 	.word	0x20000640
 800670c:	200016c4 	.word	0x200016c4
 8006710:	20000654 	.word	0x20000654
 8006714:	200016d8 	.word	0x200016d8
 8006718:	20000668 	.word	0x20000668
 800671c:	200016ec 	.word	0x200016ec
 8006720:	2000067c 	.word	0x2000067c
 8006724:	20001700 	.word	0x20001700
 8006728:	20000690 	.word	0x20000690
 800672c:	20001714 	.word	0x20001714
 8006730:	200006a4 	.word	0x200006a4
 8006734:	20001728 	.word	0x20001728
 8006738:	200006b8 	.word	0x200006b8
 800673c:	2000173c 	.word	0x2000173c
 8006740:	200006cc 	.word	0x200006cc
 8006744:	20001750 	.word	0x20001750
 8006748:	200006e0 	.word	0x200006e0
 800674c:	20001764 	.word	0x20001764
 8006750:	200006f4 	.word	0x200006f4
 8006754:	20001778 	.word	0x20001778
 8006758:	20000c80 	.word	0x20000c80
 800675c:	2000178c 	.word	0x2000178c
 8006760:	20000c94 	.word	0x20000c94
 8006764:	200017a0 	.word	0x200017a0
 8006768:	20000ca8 	.word	0x20000ca8
 800676c:	6828      	ldr	r0, [r5, #0]
 800676e:	6869      	ldr	r1, [r5, #4]
 8006770:	68aa      	ldr	r2, [r5, #8]
 8006772:	68eb      	ldr	r3, [r5, #12]
 8006774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006776:	7c2b      	ldrb	r3, [r5, #16]
 8006778:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800677a:	4a53      	ldr	r2, [pc, #332]	@ (80068c8 <loadMenuTexts+0x9f4>)
 800677c:	4b53      	ldr	r3, [pc, #332]	@ (80068cc <loadMenuTexts+0x9f8>)
 800677e:	4614      	mov	r4, r2
 8006780:	461d      	mov	r5, r3
 8006782:	6828      	ldr	r0, [r5, #0]
 8006784:	6869      	ldr	r1, [r5, #4]
 8006786:	68aa      	ldr	r2, [r5, #8]
 8006788:	68eb      	ldr	r3, [r5, #12]
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678c:	7c2b      	ldrb	r3, [r5, #16]
 800678e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006790:	4a4f      	ldr	r2, [pc, #316]	@ (80068d0 <loadMenuTexts+0x9fc>)
 8006792:	4b50      	ldr	r3, [pc, #320]	@ (80068d4 <loadMenuTexts+0xa00>)
 8006794:	4614      	mov	r4, r2
 8006796:	461d      	mov	r5, r3
 8006798:	6828      	ldr	r0, [r5, #0]
 800679a:	6869      	ldr	r1, [r5, #4]
 800679c:	68aa      	ldr	r2, [r5, #8]
 800679e:	68eb      	ldr	r3, [r5, #12]
 80067a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a2:	7c2b      	ldrb	r3, [r5, #16]
 80067a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80067a6:	4a4c      	ldr	r2, [pc, #304]	@ (80068d8 <loadMenuTexts+0xa04>)
 80067a8:	4b4c      	ldr	r3, [pc, #304]	@ (80068dc <loadMenuTexts+0xa08>)
 80067aa:	4614      	mov	r4, r2
 80067ac:	461d      	mov	r5, r3
 80067ae:	6828      	ldr	r0, [r5, #0]
 80067b0:	6869      	ldr	r1, [r5, #4]
 80067b2:	68aa      	ldr	r2, [r5, #8]
 80067b4:	68eb      	ldr	r3, [r5, #12]
 80067b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b8:	7c2b      	ldrb	r3, [r5, #16]
 80067ba:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80067bc:	4a48      	ldr	r2, [pc, #288]	@ (80068e0 <loadMenuTexts+0xa0c>)
 80067be:	4b49      	ldr	r3, [pc, #292]	@ (80068e4 <loadMenuTexts+0xa10>)
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	6828      	ldr	r0, [r5, #0]
 80067c6:	6869      	ldr	r1, [r5, #4]
 80067c8:	68aa      	ldr	r2, [r5, #8]
 80067ca:	68eb      	ldr	r3, [r5, #12]
 80067cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ce:	7c2b      	ldrb	r3, [r5, #16]
 80067d0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80067d2:	4a45      	ldr	r2, [pc, #276]	@ (80068e8 <loadMenuTexts+0xa14>)
 80067d4:	4b45      	ldr	r3, [pc, #276]	@ (80068ec <loadMenuTexts+0xa18>)
 80067d6:	4614      	mov	r4, r2
 80067d8:	461d      	mov	r5, r3
 80067da:	6828      	ldr	r0, [r5, #0]
 80067dc:	6869      	ldr	r1, [r5, #4]
 80067de:	68aa      	ldr	r2, [r5, #8]
 80067e0:	68eb      	ldr	r3, [r5, #12]
 80067e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e4:	7c2b      	ldrb	r3, [r5, #16]
 80067e6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80067e8:	4a41      	ldr	r2, [pc, #260]	@ (80068f0 <loadMenuTexts+0xa1c>)
 80067ea:	4b42      	ldr	r3, [pc, #264]	@ (80068f4 <loadMenuTexts+0xa20>)
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	6828      	ldr	r0, [r5, #0]
 80067f2:	6869      	ldr	r1, [r5, #4]
 80067f4:	68aa      	ldr	r2, [r5, #8]
 80067f6:	68eb      	ldr	r3, [r5, #12]
 80067f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067fa:	7c2b      	ldrb	r3, [r5, #16]
 80067fc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80067fe:	4a3e      	ldr	r2, [pc, #248]	@ (80068f8 <loadMenuTexts+0xa24>)
 8006800:	4b3e      	ldr	r3, [pc, #248]	@ (80068fc <loadMenuTexts+0xa28>)
 8006802:	4614      	mov	r4, r2
 8006804:	461d      	mov	r5, r3
 8006806:	6828      	ldr	r0, [r5, #0]
 8006808:	6869      	ldr	r1, [r5, #4]
 800680a:	68aa      	ldr	r2, [r5, #8]
 800680c:	68eb      	ldr	r3, [r5, #12]
 800680e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006810:	7c2b      	ldrb	r3, [r5, #16]
 8006812:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006814:	4a3a      	ldr	r2, [pc, #232]	@ (8006900 <loadMenuTexts+0xa2c>)
 8006816:	4b3b      	ldr	r3, [pc, #236]	@ (8006904 <loadMenuTexts+0xa30>)
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	6828      	ldr	r0, [r5, #0]
 800681e:	6869      	ldr	r1, [r5, #4]
 8006820:	68aa      	ldr	r2, [r5, #8]
 8006822:	68eb      	ldr	r3, [r5, #12]
 8006824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006826:	7c2b      	ldrb	r3, [r5, #16]
 8006828:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800682a:	4a37      	ldr	r2, [pc, #220]	@ (8006908 <loadMenuTexts+0xa34>)
 800682c:	4b37      	ldr	r3, [pc, #220]	@ (800690c <loadMenuTexts+0xa38>)
 800682e:	4614      	mov	r4, r2
 8006830:	461d      	mov	r5, r3
 8006832:	6828      	ldr	r0, [r5, #0]
 8006834:	6869      	ldr	r1, [r5, #4]
 8006836:	68aa      	ldr	r2, [r5, #8]
 8006838:	68eb      	ldr	r3, [r5, #12]
 800683a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683c:	7c2b      	ldrb	r3, [r5, #16]
 800683e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <loadMenuTexts+0xa3c>)
 8006842:	4b34      	ldr	r3, [pc, #208]	@ (8006914 <loadMenuTexts+0xa40>)
 8006844:	4614      	mov	r4, r2
 8006846:	461d      	mov	r5, r3
 8006848:	6828      	ldr	r0, [r5, #0]
 800684a:	6869      	ldr	r1, [r5, #4]
 800684c:	68aa      	ldr	r2, [r5, #8]
 800684e:	68eb      	ldr	r3, [r5, #12]
 8006850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006852:	7c2b      	ldrb	r3, [r5, #16]
 8006854:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006856:	4a30      	ldr	r2, [pc, #192]	@ (8006918 <loadMenuTexts+0xa44>)
 8006858:	4b30      	ldr	r3, [pc, #192]	@ (800691c <loadMenuTexts+0xa48>)
 800685a:	4614      	mov	r4, r2
 800685c:	461d      	mov	r5, r3
 800685e:	6828      	ldr	r0, [r5, #0]
 8006860:	6869      	ldr	r1, [r5, #4]
 8006862:	68aa      	ldr	r2, [r5, #8]
 8006864:	68eb      	ldr	r3, [r5, #12]
 8006866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006868:	7c2b      	ldrb	r3, [r5, #16]
 800686a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 800686c:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <loadMenuTexts+0xa4c>)
 800686e:	4b2d      	ldr	r3, [pc, #180]	@ (8006924 <loadMenuTexts+0xa50>)
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	6828      	ldr	r0, [r5, #0]
 8006876:	6869      	ldr	r1, [r5, #4]
 8006878:	68aa      	ldr	r2, [r5, #8]
 800687a:	68eb      	ldr	r3, [r5, #12]
 800687c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800687e:	7c2b      	ldrb	r3, [r5, #16]
 8006880:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006882:	4a29      	ldr	r2, [pc, #164]	@ (8006928 <loadMenuTexts+0xa54>)
 8006884:	4b29      	ldr	r3, [pc, #164]	@ (800692c <loadMenuTexts+0xa58>)
 8006886:	4614      	mov	r4, r2
 8006888:	461d      	mov	r5, r3
 800688a:	6828      	ldr	r0, [r5, #0]
 800688c:	6869      	ldr	r1, [r5, #4]
 800688e:	68aa      	ldr	r2, [r5, #8]
 8006890:	68eb      	ldr	r3, [r5, #12]
 8006892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006894:	7c2b      	ldrb	r3, [r5, #16]
 8006896:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006898:	4a25      	ldr	r2, [pc, #148]	@ (8006930 <loadMenuTexts+0xa5c>)
 800689a:	4b26      	ldr	r3, [pc, #152]	@ (8006934 <loadMenuTexts+0xa60>)
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	6828      	ldr	r0, [r5, #0]
 80068a2:	6869      	ldr	r1, [r5, #4]
 80068a4:	68aa      	ldr	r2, [r5, #8]
 80068a6:	68eb      	ldr	r3, [r5, #12]
 80068a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068aa:	7c2b      	ldrb	r3, [r5, #16]
 80068ac:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80068ae:	4a22      	ldr	r2, [pc, #136]	@ (8006938 <loadMenuTexts+0xa64>)
 80068b0:	4b22      	ldr	r3, [pc, #136]	@ (800693c <loadMenuTexts+0xa68>)
 80068b2:	4614      	mov	r4, r2
 80068b4:	461d      	mov	r5, r3
 80068b6:	6828      	ldr	r0, [r5, #0]
 80068b8:	6869      	ldr	r1, [r5, #4]
 80068ba:	68aa      	ldr	r2, [r5, #8]
 80068bc:	68eb      	ldr	r3, [r5, #12]
 80068be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c0:	7c2b      	ldrb	r3, [r5, #16]
 80068c2:	7023      	strb	r3, [r4, #0]
 80068c4:	f000 bd2a 	b.w	800731c <loadMenuTexts+0x1448>
 80068c8:	200017b4 	.word	0x200017b4
 80068cc:	20000cbc 	.word	0x20000cbc
 80068d0:	200017c8 	.word	0x200017c8
 80068d4:	20000d20 	.word	0x20000d20
 80068d8:	200017dc 	.word	0x200017dc
 80068dc:	20000d34 	.word	0x20000d34
 80068e0:	200017f0 	.word	0x200017f0
 80068e4:	20000d70 	.word	0x20000d70
 80068e8:	20001804 	.word	0x20001804
 80068ec:	20000d84 	.word	0x20000d84
 80068f0:	20001818 	.word	0x20001818
 80068f4:	20000dc0 	.word	0x20000dc0
 80068f8:	2000182c 	.word	0x2000182c
 80068fc:	20000dd4 	.word	0x20000dd4
 8006900:	20001840 	.word	0x20001840
 8006904:	20000e10 	.word	0x20000e10
 8006908:	20001854 	.word	0x20001854
 800690c:	20000e38 	.word	0x20000e38
 8006910:	20001868 	.word	0x20001868
 8006914:	20000e60 	.word	0x20000e60
 8006918:	2000187c 	.word	0x2000187c
 800691c:	20000e88 	.word	0x20000e88
 8006920:	20001890 	.word	0x20001890
 8006924:	20000eb0 	.word	0x20000eb0
 8006928:	200018a4 	.word	0x200018a4
 800692c:	20000ed8 	.word	0x20000ed8
 8006930:	200018b8 	.word	0x200018b8
 8006934:	20000f00 	.word	0x20000f00
 8006938:	200018cc 	.word	0x200018cc
 800693c:	20000f28 	.word	0x20000f28
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006940:	4ac6      	ldr	r2, [pc, #792]	@ (8006c5c <loadMenuTexts+0xd88>)
 8006942:	4bc7      	ldr	r3, [pc, #796]	@ (8006c60 <loadMenuTexts+0xd8c>)
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	6828      	ldr	r0, [r5, #0]
 800694a:	6869      	ldr	r1, [r5, #4]
 800694c:	68aa      	ldr	r2, [r5, #8]
 800694e:	68eb      	ldr	r3, [r5, #12]
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	7c2b      	ldrb	r3, [r5, #16]
 8006954:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006956:	4ac3      	ldr	r2, [pc, #780]	@ (8006c64 <loadMenuTexts+0xd90>)
 8006958:	4bc3      	ldr	r3, [pc, #780]	@ (8006c68 <loadMenuTexts+0xd94>)
 800695a:	4614      	mov	r4, r2
 800695c:	461d      	mov	r5, r3
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	6869      	ldr	r1, [r5, #4]
 8006962:	68aa      	ldr	r2, [r5, #8]
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	7c2b      	ldrb	r3, [r5, #16]
 800696a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 800696c:	4abf      	ldr	r2, [pc, #764]	@ (8006c6c <loadMenuTexts+0xd98>)
 800696e:	4bc0      	ldr	r3, [pc, #768]	@ (8006c70 <loadMenuTexts+0xd9c>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006982:	4abc      	ldr	r2, [pc, #752]	@ (8006c74 <loadMenuTexts+0xda0>)
 8006984:	4bbc      	ldr	r3, [pc, #752]	@ (8006c78 <loadMenuTexts+0xda4>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006998:	4ab8      	ldr	r2, [pc, #736]	@ (8006c7c <loadMenuTexts+0xda8>)
 800699a:	4bb9      	ldr	r3, [pc, #740]	@ (8006c80 <loadMenuTexts+0xdac>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069ae:	4ab5      	ldr	r2, [pc, #724]	@ (8006c84 <loadMenuTexts+0xdb0>)
 80069b0:	4bb5      	ldr	r3, [pc, #724]	@ (8006c88 <loadMenuTexts+0xdb4>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	6869      	ldr	r1, [r5, #4]
 80069ba:	68aa      	ldr	r2, [r5, #8]
 80069bc:	68eb      	ldr	r3, [r5, #12]
 80069be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c0:	7c2b      	ldrb	r3, [r5, #16]
 80069c2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80069c4:	4ab1      	ldr	r2, [pc, #708]	@ (8006c8c <loadMenuTexts+0xdb8>)
 80069c6:	4bb2      	ldr	r3, [pc, #712]	@ (8006c90 <loadMenuTexts+0xdbc>)
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	6869      	ldr	r1, [r5, #4]
 80069d0:	68aa      	ldr	r2, [r5, #8]
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d6:	7c2b      	ldrb	r3, [r5, #16]
 80069d8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80069da:	4aae      	ldr	r2, [pc, #696]	@ (8006c94 <loadMenuTexts+0xdc0>)
 80069dc:	4bae      	ldr	r3, [pc, #696]	@ (8006c98 <loadMenuTexts+0xdc4>)
 80069de:	4614      	mov	r4, r2
 80069e0:	461d      	mov	r5, r3
 80069e2:	6828      	ldr	r0, [r5, #0]
 80069e4:	6869      	ldr	r1, [r5, #4]
 80069e6:	68aa      	ldr	r2, [r5, #8]
 80069e8:	68eb      	ldr	r3, [r5, #12]
 80069ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ec:	7c2b      	ldrb	r3, [r5, #16]
 80069ee:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80069f0:	4aaa      	ldr	r2, [pc, #680]	@ (8006c9c <loadMenuTexts+0xdc8>)
 80069f2:	4bab      	ldr	r3, [pc, #684]	@ (8006ca0 <loadMenuTexts+0xdcc>)
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	6828      	ldr	r0, [r5, #0]
 80069fa:	6869      	ldr	r1, [r5, #4]
 80069fc:	68aa      	ldr	r2, [r5, #8]
 80069fe:	68eb      	ldr	r3, [r5, #12]
 8006a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a02:	7c2b      	ldrb	r3, [r5, #16]
 8006a04:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a06:	4aa7      	ldr	r2, [pc, #668]	@ (8006ca4 <loadMenuTexts+0xdd0>)
 8006a08:	4ba7      	ldr	r3, [pc, #668]	@ (8006ca8 <loadMenuTexts+0xdd4>)
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	461d      	mov	r5, r3
 8006a0e:	6828      	ldr	r0, [r5, #0]
 8006a10:	6869      	ldr	r1, [r5, #4]
 8006a12:	68aa      	ldr	r2, [r5, #8]
 8006a14:	68eb      	ldr	r3, [r5, #12]
 8006a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a18:	7c2b      	ldrb	r3, [r5, #16]
 8006a1a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a1c:	4aa3      	ldr	r2, [pc, #652]	@ (8006cac <loadMenuTexts+0xdd8>)
 8006a1e:	4ba4      	ldr	r3, [pc, #656]	@ (8006cb0 <loadMenuTexts+0xddc>)
 8006a20:	4614      	mov	r4, r2
 8006a22:	461d      	mov	r5, r3
 8006a24:	6828      	ldr	r0, [r5, #0]
 8006a26:	6869      	ldr	r1, [r5, #4]
 8006a28:	68aa      	ldr	r2, [r5, #8]
 8006a2a:	68eb      	ldr	r3, [r5, #12]
 8006a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2e:	7c2b      	ldrb	r3, [r5, #16]
 8006a30:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a32:	4aa0      	ldr	r2, [pc, #640]	@ (8006cb4 <loadMenuTexts+0xde0>)
 8006a34:	4ba0      	ldr	r3, [pc, #640]	@ (8006cb8 <loadMenuTexts+0xde4>)
 8006a36:	4614      	mov	r4, r2
 8006a38:	461d      	mov	r5, r3
 8006a3a:	6828      	ldr	r0, [r5, #0]
 8006a3c:	6869      	ldr	r1, [r5, #4]
 8006a3e:	68aa      	ldr	r2, [r5, #8]
 8006a40:	68eb      	ldr	r3, [r5, #12]
 8006a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a44:	7c2b      	ldrb	r3, [r5, #16]
 8006a46:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a48:	4a9c      	ldr	r2, [pc, #624]	@ (8006cbc <loadMenuTexts+0xde8>)
 8006a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc0 <loadMenuTexts+0xdec>)
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	6828      	ldr	r0, [r5, #0]
 8006a52:	6869      	ldr	r1, [r5, #4]
 8006a54:	68aa      	ldr	r2, [r5, #8]
 8006a56:	68eb      	ldr	r3, [r5, #12]
 8006a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5a:	7c2b      	ldrb	r3, [r5, #16]
 8006a5c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006a5e:	4a99      	ldr	r2, [pc, #612]	@ (8006cc4 <loadMenuTexts+0xdf0>)
 8006a60:	4b99      	ldr	r3, [pc, #612]	@ (8006cc8 <loadMenuTexts+0xdf4>)
 8006a62:	4614      	mov	r4, r2
 8006a64:	461d      	mov	r5, r3
 8006a66:	6828      	ldr	r0, [r5, #0]
 8006a68:	6869      	ldr	r1, [r5, #4]
 8006a6a:	68aa      	ldr	r2, [r5, #8]
 8006a6c:	68eb      	ldr	r3, [r5, #12]
 8006a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a70:	7c2b      	ldrb	r3, [r5, #16]
 8006a72:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006a74:	4a95      	ldr	r2, [pc, #596]	@ (8006ccc <loadMenuTexts+0xdf8>)
 8006a76:	4b96      	ldr	r3, [pc, #600]	@ (8006cd0 <loadMenuTexts+0xdfc>)
 8006a78:	4614      	mov	r4, r2
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	6828      	ldr	r0, [r5, #0]
 8006a7e:	6869      	ldr	r1, [r5, #4]
 8006a80:	68aa      	ldr	r2, [r5, #8]
 8006a82:	68eb      	ldr	r3, [r5, #12]
 8006a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a86:	7c2b      	ldrb	r3, [r5, #16]
 8006a88:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006a8a:	4a92      	ldr	r2, [pc, #584]	@ (8006cd4 <loadMenuTexts+0xe00>)
 8006a8c:	4b92      	ldr	r3, [pc, #584]	@ (8006cd8 <loadMenuTexts+0xe04>)
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	6828      	ldr	r0, [r5, #0]
 8006a94:	6869      	ldr	r1, [r5, #4]
 8006a96:	68aa      	ldr	r2, [r5, #8]
 8006a98:	68eb      	ldr	r3, [r5, #12]
 8006a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9c:	7c2b      	ldrb	r3, [r5, #16]
 8006a9e:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006aa0:	4a8e      	ldr	r2, [pc, #568]	@ (8006cdc <loadMenuTexts+0xe08>)
 8006aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce0 <loadMenuTexts+0xe0c>)
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	461d      	mov	r5, r3
 8006aa8:	6828      	ldr	r0, [r5, #0]
 8006aaa:	6869      	ldr	r1, [r5, #4]
 8006aac:	68aa      	ldr	r2, [r5, #8]
 8006aae:	68eb      	ldr	r3, [r5, #12]
 8006ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab2:	7c2b      	ldrb	r3, [r5, #16]
 8006ab4:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006ab6:	4a8b      	ldr	r2, [pc, #556]	@ (8006ce4 <loadMenuTexts+0xe10>)
 8006ab8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce8 <loadMenuTexts+0xe14>)
 8006aba:	4614      	mov	r4, r2
 8006abc:	461d      	mov	r5, r3
 8006abe:	6828      	ldr	r0, [r5, #0]
 8006ac0:	6869      	ldr	r1, [r5, #4]
 8006ac2:	68aa      	ldr	r2, [r5, #8]
 8006ac4:	68eb      	ldr	r3, [r5, #12]
 8006ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac8:	7c2b      	ldrb	r3, [r5, #16]
 8006aca:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006acc:	4a87      	ldr	r2, [pc, #540]	@ (8006cec <loadMenuTexts+0xe18>)
 8006ace:	4b88      	ldr	r3, [pc, #544]	@ (8006cf0 <loadMenuTexts+0xe1c>)
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	6828      	ldr	r0, [r5, #0]
 8006ad6:	6869      	ldr	r1, [r5, #4]
 8006ad8:	68aa      	ldr	r2, [r5, #8]
 8006ada:	68eb      	ldr	r3, [r5, #12]
 8006adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ade:	7c2b      	ldrb	r3, [r5, #16]
 8006ae0:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006ae2:	4a84      	ldr	r2, [pc, #528]	@ (8006cf4 <loadMenuTexts+0xe20>)
 8006ae4:	4b84      	ldr	r3, [pc, #528]	@ (8006cf8 <loadMenuTexts+0xe24>)
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461d      	mov	r5, r3
 8006aea:	6828      	ldr	r0, [r5, #0]
 8006aec:	6869      	ldr	r1, [r5, #4]
 8006aee:	68aa      	ldr	r2, [r5, #8]
 8006af0:	68eb      	ldr	r3, [r5, #12]
 8006af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af4:	7c2b      	ldrb	r3, [r5, #16]
 8006af6:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006af8:	4a80      	ldr	r2, [pc, #512]	@ (8006cfc <loadMenuTexts+0xe28>)
 8006afa:	4b81      	ldr	r3, [pc, #516]	@ (8006d00 <loadMenuTexts+0xe2c>)
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	6828      	ldr	r0, [r5, #0]
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	68aa      	ldr	r2, [r5, #8]
 8006b06:	68eb      	ldr	r3, [r5, #12]
 8006b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0a:	7c2b      	ldrb	r3, [r5, #16]
 8006b0c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8006d04 <loadMenuTexts+0xe30>)
 8006b10:	4b7d      	ldr	r3, [pc, #500]	@ (8006d08 <loadMenuTexts+0xe34>)
 8006b12:	4614      	mov	r4, r2
 8006b14:	461d      	mov	r5, r3
 8006b16:	6828      	ldr	r0, [r5, #0]
 8006b18:	6869      	ldr	r1, [r5, #4]
 8006b1a:	68aa      	ldr	r2, [r5, #8]
 8006b1c:	68eb      	ldr	r3, [r5, #12]
 8006b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b20:	7c2b      	ldrb	r3, [r5, #16]
 8006b22:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b24:	4a79      	ldr	r2, [pc, #484]	@ (8006d0c <loadMenuTexts+0xe38>)
 8006b26:	4b7a      	ldr	r3, [pc, #488]	@ (8006d10 <loadMenuTexts+0xe3c>)
 8006b28:	4614      	mov	r4, r2
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	6828      	ldr	r0, [r5, #0]
 8006b2e:	6869      	ldr	r1, [r5, #4]
 8006b30:	68aa      	ldr	r2, [r5, #8]
 8006b32:	68eb      	ldr	r3, [r5, #12]
 8006b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b36:	7c2b      	ldrb	r3, [r5, #16]
 8006b38:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b3a:	4a76      	ldr	r2, [pc, #472]	@ (8006d14 <loadMenuTexts+0xe40>)
 8006b3c:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <loadMenuTexts+0xe44>)
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	6828      	ldr	r0, [r5, #0]
 8006b44:	6869      	ldr	r1, [r5, #4]
 8006b46:	68aa      	ldr	r2, [r5, #8]
 8006b48:	68eb      	ldr	r3, [r5, #12]
 8006b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4c:	7c2b      	ldrb	r3, [r5, #16]
 8006b4e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b50:	4a72      	ldr	r2, [pc, #456]	@ (8006d1c <loadMenuTexts+0xe48>)
 8006b52:	4b73      	ldr	r3, [pc, #460]	@ (8006d20 <loadMenuTexts+0xe4c>)
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	6828      	ldr	r0, [r5, #0]
 8006b5a:	6869      	ldr	r1, [r5, #4]
 8006b5c:	68aa      	ldr	r2, [r5, #8]
 8006b5e:	68eb      	ldr	r3, [r5, #12]
 8006b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b62:	7c2b      	ldrb	r3, [r5, #16]
 8006b64:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006b66:	4a6f      	ldr	r2, [pc, #444]	@ (8006d24 <loadMenuTexts+0xe50>)
 8006b68:	4b6f      	ldr	r3, [pc, #444]	@ (8006d28 <loadMenuTexts+0xe54>)
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	6828      	ldr	r0, [r5, #0]
 8006b70:	6869      	ldr	r1, [r5, #4]
 8006b72:	68aa      	ldr	r2, [r5, #8]
 8006b74:	68eb      	ldr	r3, [r5, #12]
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	7c2b      	ldrb	r3, [r5, #16]
 8006b7a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8006d2c <loadMenuTexts+0xe58>)
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8006d30 <loadMenuTexts+0xe5c>)
 8006b80:	4614      	mov	r4, r2
 8006b82:	461d      	mov	r5, r3
 8006b84:	6828      	ldr	r0, [r5, #0]
 8006b86:	6869      	ldr	r1, [r5, #4]
 8006b88:	68aa      	ldr	r2, [r5, #8]
 8006b8a:	68eb      	ldr	r3, [r5, #12]
 8006b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8e:	7c2b      	ldrb	r3, [r5, #16]
 8006b90:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006b92:	4a68      	ldr	r2, [pc, #416]	@ (8006d34 <loadMenuTexts+0xe60>)
 8006b94:	4b68      	ldr	r3, [pc, #416]	@ (8006d38 <loadMenuTexts+0xe64>)
 8006b96:	4614      	mov	r4, r2
 8006b98:	461d      	mov	r5, r3
 8006b9a:	6828      	ldr	r0, [r5, #0]
 8006b9c:	6869      	ldr	r1, [r5, #4]
 8006b9e:	68aa      	ldr	r2, [r5, #8]
 8006ba0:	68eb      	ldr	r3, [r5, #12]
 8006ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba4:	7c2b      	ldrb	r3, [r5, #16]
 8006ba6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006ba8:	4a64      	ldr	r2, [pc, #400]	@ (8006d3c <loadMenuTexts+0xe68>)
 8006baa:	4b65      	ldr	r3, [pc, #404]	@ (8006d40 <loadMenuTexts+0xe6c>)
 8006bac:	4614      	mov	r4, r2
 8006bae:	461d      	mov	r5, r3
 8006bb0:	6828      	ldr	r0, [r5, #0]
 8006bb2:	6869      	ldr	r1, [r5, #4]
 8006bb4:	68aa      	ldr	r2, [r5, #8]
 8006bb6:	68eb      	ldr	r3, [r5, #12]
 8006bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bba:	7c2b      	ldrb	r3, [r5, #16]
 8006bbc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006bbe:	4a61      	ldr	r2, [pc, #388]	@ (8006d44 <loadMenuTexts+0xe70>)
 8006bc0:	4b61      	ldr	r3, [pc, #388]	@ (8006d48 <loadMenuTexts+0xe74>)
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	461d      	mov	r5, r3
 8006bc6:	6828      	ldr	r0, [r5, #0]
 8006bc8:	6869      	ldr	r1, [r5, #4]
 8006bca:	68aa      	ldr	r2, [r5, #8]
 8006bcc:	68eb      	ldr	r3, [r5, #12]
 8006bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd0:	7c2b      	ldrb	r3, [r5, #16]
 8006bd2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8006d4c <loadMenuTexts+0xe78>)
 8006bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8006d50 <loadMenuTexts+0xe7c>)
 8006bd8:	4614      	mov	r4, r2
 8006bda:	461d      	mov	r5, r3
 8006bdc:	6828      	ldr	r0, [r5, #0]
 8006bde:	6869      	ldr	r1, [r5, #4]
 8006be0:	68aa      	ldr	r2, [r5, #8]
 8006be2:	68eb      	ldr	r3, [r5, #12]
 8006be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be6:	7c2b      	ldrb	r3, [r5, #16]
 8006be8:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006bea:	4a5a      	ldr	r2, [pc, #360]	@ (8006d54 <loadMenuTexts+0xe80>)
 8006bec:	4b5a      	ldr	r3, [pc, #360]	@ (8006d58 <loadMenuTexts+0xe84>)
 8006bee:	4614      	mov	r4, r2
 8006bf0:	461d      	mov	r5, r3
 8006bf2:	6828      	ldr	r0, [r5, #0]
 8006bf4:	6869      	ldr	r1, [r5, #4]
 8006bf6:	68aa      	ldr	r2, [r5, #8]
 8006bf8:	68eb      	ldr	r3, [r5, #12]
 8006bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfc:	7c2b      	ldrb	r3, [r5, #16]
 8006bfe:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c00:	4a56      	ldr	r2, [pc, #344]	@ (8006d5c <loadMenuTexts+0xe88>)
 8006c02:	4b57      	ldr	r3, [pc, #348]	@ (8006d60 <loadMenuTexts+0xe8c>)
 8006c04:	4614      	mov	r4, r2
 8006c06:	461d      	mov	r5, r3
 8006c08:	6828      	ldr	r0, [r5, #0]
 8006c0a:	6869      	ldr	r1, [r5, #4]
 8006c0c:	68aa      	ldr	r2, [r5, #8]
 8006c0e:	68eb      	ldr	r3, [r5, #12]
 8006c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c12:	7c2b      	ldrb	r3, [r5, #16]
 8006c14:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c16:	4a53      	ldr	r2, [pc, #332]	@ (8006d64 <loadMenuTexts+0xe90>)
 8006c18:	4b53      	ldr	r3, [pc, #332]	@ (8006d68 <loadMenuTexts+0xe94>)
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	6828      	ldr	r0, [r5, #0]
 8006c20:	6869      	ldr	r1, [r5, #4]
 8006c22:	68aa      	ldr	r2, [r5, #8]
 8006c24:	68eb      	ldr	r3, [r5, #12]
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	7c2b      	ldrb	r3, [r5, #16]
 8006c2a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8006d6c <loadMenuTexts+0xe98>)
 8006c2e:	4b50      	ldr	r3, [pc, #320]	@ (8006d70 <loadMenuTexts+0xe9c>)
 8006c30:	4614      	mov	r4, r2
 8006c32:	461d      	mov	r5, r3
 8006c34:	6828      	ldr	r0, [r5, #0]
 8006c36:	6869      	ldr	r1, [r5, #4]
 8006c38:	68aa      	ldr	r2, [r5, #8]
 8006c3a:	68eb      	ldr	r3, [r5, #12]
 8006c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3e:	7c2b      	ldrb	r3, [r5, #16]
 8006c40:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c42:	4a4c      	ldr	r2, [pc, #304]	@ (8006d74 <loadMenuTexts+0xea0>)
 8006c44:	4b4c      	ldr	r3, [pc, #304]	@ (8006d78 <loadMenuTexts+0xea4>)
 8006c46:	4614      	mov	r4, r2
 8006c48:	461d      	mov	r5, r3
 8006c4a:	6828      	ldr	r0, [r5, #0]
 8006c4c:	6869      	ldr	r1, [r5, #4]
 8006c4e:	68aa      	ldr	r2, [r5, #8]
 8006c50:	68eb      	ldr	r3, [r5, #12]
 8006c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c54:	7c2b      	ldrb	r3, [r5, #16]
 8006c56:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006c58:	4a48      	ldr	r2, [pc, #288]	@ (8006d7c <loadMenuTexts+0xea8>)
 8006c5a:	e091      	b.n	8006d80 <loadMenuTexts+0xeac>
 8006c5c:	20001200 	.word	0x20001200
 8006c60:	20000708 	.word	0x20000708
 8006c64:	20001214 	.word	0x20001214
 8006c68:	2000071c 	.word	0x2000071c
 8006c6c:	20001228 	.word	0x20001228
 8006c70:	20000730 	.word	0x20000730
 8006c74:	2000123c 	.word	0x2000123c
 8006c78:	20000744 	.word	0x20000744
 8006c7c:	20001250 	.word	0x20001250
 8006c80:	20000758 	.word	0x20000758
 8006c84:	20001264 	.word	0x20001264
 8006c88:	2000076c 	.word	0x2000076c
 8006c8c:	20001278 	.word	0x20001278
 8006c90:	20000780 	.word	0x20000780
 8006c94:	2000128c 	.word	0x2000128c
 8006c98:	20000794 	.word	0x20000794
 8006c9c:	200012a0 	.word	0x200012a0
 8006ca0:	200007a8 	.word	0x200007a8
 8006ca4:	200012b4 	.word	0x200012b4
 8006ca8:	200007bc 	.word	0x200007bc
 8006cac:	200012c8 	.word	0x200012c8
 8006cb0:	200007d0 	.word	0x200007d0
 8006cb4:	200012dc 	.word	0x200012dc
 8006cb8:	200007e4 	.word	0x200007e4
 8006cbc:	200012f0 	.word	0x200012f0
 8006cc0:	200007f8 	.word	0x200007f8
 8006cc4:	20001304 	.word	0x20001304
 8006cc8:	2000080c 	.word	0x2000080c
 8006ccc:	20001318 	.word	0x20001318
 8006cd0:	20000820 	.word	0x20000820
 8006cd4:	2000132c 	.word	0x2000132c
 8006cd8:	20000834 	.word	0x20000834
 8006cdc:	20001340 	.word	0x20001340
 8006ce0:	20000848 	.word	0x20000848
 8006ce4:	20001354 	.word	0x20001354
 8006ce8:	2000085c 	.word	0x2000085c
 8006cec:	20001368 	.word	0x20001368
 8006cf0:	20000870 	.word	0x20000870
 8006cf4:	2000137c 	.word	0x2000137c
 8006cf8:	20000884 	.word	0x20000884
 8006cfc:	20001390 	.word	0x20001390
 8006d00:	20000898 	.word	0x20000898
 8006d04:	200013a4 	.word	0x200013a4
 8006d08:	200008ac 	.word	0x200008ac
 8006d0c:	200013b8 	.word	0x200013b8
 8006d10:	200008c0 	.word	0x200008c0
 8006d14:	200013cc 	.word	0x200013cc
 8006d18:	200008d4 	.word	0x200008d4
 8006d1c:	200013e0 	.word	0x200013e0
 8006d20:	200008e8 	.word	0x200008e8
 8006d24:	200013f4 	.word	0x200013f4
 8006d28:	200008fc 	.word	0x200008fc
 8006d2c:	20001408 	.word	0x20001408
 8006d30:	20000910 	.word	0x20000910
 8006d34:	2000141c 	.word	0x2000141c
 8006d38:	20000924 	.word	0x20000924
 8006d3c:	20001430 	.word	0x20001430
 8006d40:	20000938 	.word	0x20000938
 8006d44:	20001444 	.word	0x20001444
 8006d48:	2000094c 	.word	0x2000094c
 8006d4c:	20001458 	.word	0x20001458
 8006d50:	20000960 	.word	0x20000960
 8006d54:	2000146c 	.word	0x2000146c
 8006d58:	20000974 	.word	0x20000974
 8006d5c:	20001480 	.word	0x20001480
 8006d60:	20000988 	.word	0x20000988
 8006d64:	20001494 	.word	0x20001494
 8006d68:	2000099c 	.word	0x2000099c
 8006d6c:	200014a8 	.word	0x200014a8
 8006d70:	200009b0 	.word	0x200009b0
 8006d74:	200014bc 	.word	0x200014bc
 8006d78:	200009c4 	.word	0x200009c4
 8006d7c:	200014d0 	.word	0x200014d0
 8006d80:	4bc7      	ldr	r3, [pc, #796]	@ (80070a0 <loadMenuTexts+0x11cc>)
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	6828      	ldr	r0, [r5, #0]
 8006d88:	6869      	ldr	r1, [r5, #4]
 8006d8a:	68aa      	ldr	r2, [r5, #8]
 8006d8c:	68eb      	ldr	r3, [r5, #12]
 8006d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d90:	7c2b      	ldrb	r3, [r5, #16]
 8006d92:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006d94:	4ac3      	ldr	r2, [pc, #780]	@ (80070a4 <loadMenuTexts+0x11d0>)
 8006d96:	4bc4      	ldr	r3, [pc, #784]	@ (80070a8 <loadMenuTexts+0x11d4>)
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	6828      	ldr	r0, [r5, #0]
 8006d9e:	6869      	ldr	r1, [r5, #4]
 8006da0:	68aa      	ldr	r2, [r5, #8]
 8006da2:	68eb      	ldr	r3, [r5, #12]
 8006da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da6:	7c2b      	ldrb	r3, [r5, #16]
 8006da8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006daa:	4ac0      	ldr	r2, [pc, #768]	@ (80070ac <loadMenuTexts+0x11d8>)
 8006dac:	4bc0      	ldr	r3, [pc, #768]	@ (80070b0 <loadMenuTexts+0x11dc>)
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	6828      	ldr	r0, [r5, #0]
 8006db4:	6869      	ldr	r1, [r5, #4]
 8006db6:	68aa      	ldr	r2, [r5, #8]
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbc:	7c2b      	ldrb	r3, [r5, #16]
 8006dbe:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006dc0:	4abc      	ldr	r2, [pc, #752]	@ (80070b4 <loadMenuTexts+0x11e0>)
 8006dc2:	4bbd      	ldr	r3, [pc, #756]	@ (80070b8 <loadMenuTexts+0x11e4>)
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	6828      	ldr	r0, [r5, #0]
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	68aa      	ldr	r2, [r5, #8]
 8006dce:	68eb      	ldr	r3, [r5, #12]
 8006dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd2:	7c2b      	ldrb	r3, [r5, #16]
 8006dd4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006dd6:	4ab9      	ldr	r2, [pc, #740]	@ (80070bc <loadMenuTexts+0x11e8>)
 8006dd8:	4bb9      	ldr	r3, [pc, #740]	@ (80070c0 <loadMenuTexts+0x11ec>)
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	6828      	ldr	r0, [r5, #0]
 8006de0:	6869      	ldr	r1, [r5, #4]
 8006de2:	68aa      	ldr	r2, [r5, #8]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	7c2b      	ldrb	r3, [r5, #16]
 8006dea:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006dec:	4ab5      	ldr	r2, [pc, #724]	@ (80070c4 <loadMenuTexts+0x11f0>)
 8006dee:	4bb6      	ldr	r3, [pc, #728]	@ (80070c8 <loadMenuTexts+0x11f4>)
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	6828      	ldr	r0, [r5, #0]
 8006df6:	6869      	ldr	r1, [r5, #4]
 8006df8:	68aa      	ldr	r2, [r5, #8]
 8006dfa:	68eb      	ldr	r3, [r5, #12]
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	7c2b      	ldrb	r3, [r5, #16]
 8006e00:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e02:	4ab2      	ldr	r2, [pc, #712]	@ (80070cc <loadMenuTexts+0x11f8>)
 8006e04:	4bb2      	ldr	r3, [pc, #712]	@ (80070d0 <loadMenuTexts+0x11fc>)
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	68aa      	ldr	r2, [r5, #8]
 8006e10:	68eb      	ldr	r3, [r5, #12]
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	7c2b      	ldrb	r3, [r5, #16]
 8006e16:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e18:	4aae      	ldr	r2, [pc, #696]	@ (80070d4 <loadMenuTexts+0x1200>)
 8006e1a:	4baf      	ldr	r3, [pc, #700]	@ (80070d8 <loadMenuTexts+0x1204>)
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	6828      	ldr	r0, [r5, #0]
 8006e22:	6869      	ldr	r1, [r5, #4]
 8006e24:	68aa      	ldr	r2, [r5, #8]
 8006e26:	68eb      	ldr	r3, [r5, #12]
 8006e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2a:	7c2b      	ldrb	r3, [r5, #16]
 8006e2c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e2e:	4aab      	ldr	r2, [pc, #684]	@ (80070dc <loadMenuTexts+0x1208>)
 8006e30:	4bab      	ldr	r3, [pc, #684]	@ (80070e0 <loadMenuTexts+0x120c>)
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	6828      	ldr	r0, [r5, #0]
 8006e38:	6869      	ldr	r1, [r5, #4]
 8006e3a:	68aa      	ldr	r2, [r5, #8]
 8006e3c:	68eb      	ldr	r3, [r5, #12]
 8006e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e40:	7c2b      	ldrb	r3, [r5, #16]
 8006e42:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e44:	4aa7      	ldr	r2, [pc, #668]	@ (80070e4 <loadMenuTexts+0x1210>)
 8006e46:	4ba8      	ldr	r3, [pc, #672]	@ (80070e8 <loadMenuTexts+0x1214>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	6828      	ldr	r0, [r5, #0]
 8006e4e:	6869      	ldr	r1, [r5, #4]
 8006e50:	68aa      	ldr	r2, [r5, #8]
 8006e52:	68eb      	ldr	r3, [r5, #12]
 8006e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e56:	7c2b      	ldrb	r3, [r5, #16]
 8006e58:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006e5a:	4aa4      	ldr	r2, [pc, #656]	@ (80070ec <loadMenuTexts+0x1218>)
 8006e5c:	4ba4      	ldr	r3, [pc, #656]	@ (80070f0 <loadMenuTexts+0x121c>)
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461d      	mov	r5, r3
 8006e62:	6828      	ldr	r0, [r5, #0]
 8006e64:	6869      	ldr	r1, [r5, #4]
 8006e66:	68aa      	ldr	r2, [r5, #8]
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	7c2b      	ldrb	r3, [r5, #16]
 8006e6e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006e70:	4aa0      	ldr	r2, [pc, #640]	@ (80070f4 <loadMenuTexts+0x1220>)
 8006e72:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <loadMenuTexts+0x1224>)
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	6828      	ldr	r0, [r5, #0]
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	68aa      	ldr	r2, [r5, #8]
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e82:	7c2b      	ldrb	r3, [r5, #16]
 8006e84:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006e86:	4a9d      	ldr	r2, [pc, #628]	@ (80070fc <loadMenuTexts+0x1228>)
 8006e88:	4b9d      	ldr	r3, [pc, #628]	@ (8007100 <loadMenuTexts+0x122c>)
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	6828      	ldr	r0, [r5, #0]
 8006e90:	6869      	ldr	r1, [r5, #4]
 8006e92:	68aa      	ldr	r2, [r5, #8]
 8006e94:	68eb      	ldr	r3, [r5, #12]
 8006e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e98:	7c2b      	ldrb	r3, [r5, #16]
 8006e9a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006e9c:	4a99      	ldr	r2, [pc, #612]	@ (8007104 <loadMenuTexts+0x1230>)
 8006e9e:	4b9a      	ldr	r3, [pc, #616]	@ (8007108 <loadMenuTexts+0x1234>)
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	6828      	ldr	r0, [r5, #0]
 8006ea6:	6869      	ldr	r1, [r5, #4]
 8006ea8:	68aa      	ldr	r2, [r5, #8]
 8006eaa:	68eb      	ldr	r3, [r5, #12]
 8006eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eae:	7c2b      	ldrb	r3, [r5, #16]
 8006eb0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006eb2:	4a96      	ldr	r2, [pc, #600]	@ (800710c <loadMenuTexts+0x1238>)
 8006eb4:	4b96      	ldr	r3, [pc, #600]	@ (8007110 <loadMenuTexts+0x123c>)
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	461d      	mov	r5, r3
 8006eba:	6828      	ldr	r0, [r5, #0]
 8006ebc:	6869      	ldr	r1, [r5, #4]
 8006ebe:	68aa      	ldr	r2, [r5, #8]
 8006ec0:	68eb      	ldr	r3, [r5, #12]
 8006ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec4:	7c2b      	ldrb	r3, [r5, #16]
 8006ec6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006ec8:	4a92      	ldr	r2, [pc, #584]	@ (8007114 <loadMenuTexts+0x1240>)
 8006eca:	4b93      	ldr	r3, [pc, #588]	@ (8007118 <loadMenuTexts+0x1244>)
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	6828      	ldr	r0, [r5, #0]
 8006ed2:	6869      	ldr	r1, [r5, #4]
 8006ed4:	68aa      	ldr	r2, [r5, #8]
 8006ed6:	68eb      	ldr	r3, [r5, #12]
 8006ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eda:	7c2b      	ldrb	r3, [r5, #16]
 8006edc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006ede:	4a8f      	ldr	r2, [pc, #572]	@ (800711c <loadMenuTexts+0x1248>)
 8006ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8007120 <loadMenuTexts+0x124c>)
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	6828      	ldr	r0, [r5, #0]
 8006ee8:	6869      	ldr	r1, [r5, #4]
 8006eea:	68aa      	ldr	r2, [r5, #8]
 8006eec:	68eb      	ldr	r3, [r5, #12]
 8006eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef0:	7c2b      	ldrb	r3, [r5, #16]
 8006ef2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006ef4:	4a8b      	ldr	r2, [pc, #556]	@ (8007124 <loadMenuTexts+0x1250>)
 8006ef6:	4b8c      	ldr	r3, [pc, #560]	@ (8007128 <loadMenuTexts+0x1254>)
 8006ef8:	4614      	mov	r4, r2
 8006efa:	461d      	mov	r5, r3
 8006efc:	6828      	ldr	r0, [r5, #0]
 8006efe:	6869      	ldr	r1, [r5, #4]
 8006f00:	68aa      	ldr	r2, [r5, #8]
 8006f02:	68eb      	ldr	r3, [r5, #12]
 8006f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f06:	7c2b      	ldrb	r3, [r5, #16]
 8006f08:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f0a:	4a88      	ldr	r2, [pc, #544]	@ (800712c <loadMenuTexts+0x1258>)
 8006f0c:	4b88      	ldr	r3, [pc, #544]	@ (8007130 <loadMenuTexts+0x125c>)
 8006f0e:	4614      	mov	r4, r2
 8006f10:	461d      	mov	r5, r3
 8006f12:	6828      	ldr	r0, [r5, #0]
 8006f14:	6869      	ldr	r1, [r5, #4]
 8006f16:	68aa      	ldr	r2, [r5, #8]
 8006f18:	68eb      	ldr	r3, [r5, #12]
 8006f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1c:	7c2b      	ldrb	r3, [r5, #16]
 8006f1e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f20:	4a84      	ldr	r2, [pc, #528]	@ (8007134 <loadMenuTexts+0x1260>)
 8006f22:	4b85      	ldr	r3, [pc, #532]	@ (8007138 <loadMenuTexts+0x1264>)
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	6828      	ldr	r0, [r5, #0]
 8006f2a:	6869      	ldr	r1, [r5, #4]
 8006f2c:	68aa      	ldr	r2, [r5, #8]
 8006f2e:	68eb      	ldr	r3, [r5, #12]
 8006f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f32:	7c2b      	ldrb	r3, [r5, #16]
 8006f34:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f36:	4a81      	ldr	r2, [pc, #516]	@ (800713c <loadMenuTexts+0x1268>)
 8006f38:	4b81      	ldr	r3, [pc, #516]	@ (8007140 <loadMenuTexts+0x126c>)
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	461d      	mov	r5, r3
 8006f3e:	6828      	ldr	r0, [r5, #0]
 8006f40:	6869      	ldr	r1, [r5, #4]
 8006f42:	68aa      	ldr	r2, [r5, #8]
 8006f44:	68eb      	ldr	r3, [r5, #12]
 8006f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f48:	7c2b      	ldrb	r3, [r5, #16]
 8006f4a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f4c:	4a7d      	ldr	r2, [pc, #500]	@ (8007144 <loadMenuTexts+0x1270>)
 8006f4e:	4b7e      	ldr	r3, [pc, #504]	@ (8007148 <loadMenuTexts+0x1274>)
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	6828      	ldr	r0, [r5, #0]
 8006f56:	6869      	ldr	r1, [r5, #4]
 8006f58:	68aa      	ldr	r2, [r5, #8]
 8006f5a:	68eb      	ldr	r3, [r5, #12]
 8006f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5e:	7c2b      	ldrb	r3, [r5, #16]
 8006f60:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006f62:	4a7a      	ldr	r2, [pc, #488]	@ (800714c <loadMenuTexts+0x1278>)
 8006f64:	4b7a      	ldr	r3, [pc, #488]	@ (8007150 <loadMenuTexts+0x127c>)
 8006f66:	4614      	mov	r4, r2
 8006f68:	461d      	mov	r5, r3
 8006f6a:	6828      	ldr	r0, [r5, #0]
 8006f6c:	6869      	ldr	r1, [r5, #4]
 8006f6e:	68aa      	ldr	r2, [r5, #8]
 8006f70:	68eb      	ldr	r3, [r5, #12]
 8006f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f74:	7c2b      	ldrb	r3, [r5, #16]
 8006f76:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006f78:	4a76      	ldr	r2, [pc, #472]	@ (8007154 <loadMenuTexts+0x1280>)
 8006f7a:	4b77      	ldr	r3, [pc, #476]	@ (8007158 <loadMenuTexts+0x1284>)
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	6828      	ldr	r0, [r5, #0]
 8006f82:	6869      	ldr	r1, [r5, #4]
 8006f84:	68aa      	ldr	r2, [r5, #8]
 8006f86:	68eb      	ldr	r3, [r5, #12]
 8006f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8a:	7c2b      	ldrb	r3, [r5, #16]
 8006f8c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006f8e:	4a73      	ldr	r2, [pc, #460]	@ (800715c <loadMenuTexts+0x1288>)
 8006f90:	4b73      	ldr	r3, [pc, #460]	@ (8007160 <loadMenuTexts+0x128c>)
 8006f92:	4614      	mov	r4, r2
 8006f94:	461d      	mov	r5, r3
 8006f96:	6828      	ldr	r0, [r5, #0]
 8006f98:	6869      	ldr	r1, [r5, #4]
 8006f9a:	68aa      	ldr	r2, [r5, #8]
 8006f9c:	68eb      	ldr	r3, [r5, #12]
 8006f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa0:	7c2b      	ldrb	r3, [r5, #16]
 8006fa2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006fa4:	4a6f      	ldr	r2, [pc, #444]	@ (8007164 <loadMenuTexts+0x1290>)
 8006fa6:	4b70      	ldr	r3, [pc, #448]	@ (8007168 <loadMenuTexts+0x1294>)
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	6828      	ldr	r0, [r5, #0]
 8006fae:	6869      	ldr	r1, [r5, #4]
 8006fb0:	68aa      	ldr	r2, [r5, #8]
 8006fb2:	68eb      	ldr	r3, [r5, #12]
 8006fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb6:	7c2b      	ldrb	r3, [r5, #16]
 8006fb8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006fba:	4a6c      	ldr	r2, [pc, #432]	@ (800716c <loadMenuTexts+0x1298>)
 8006fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8007170 <loadMenuTexts+0x129c>)
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	6828      	ldr	r0, [r5, #0]
 8006fc4:	6869      	ldr	r1, [r5, #4]
 8006fc6:	68aa      	ldr	r2, [r5, #8]
 8006fc8:	68eb      	ldr	r3, [r5, #12]
 8006fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fcc:	7c2b      	ldrb	r3, [r5, #16]
 8006fce:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8006fd0:	4a68      	ldr	r2, [pc, #416]	@ (8007174 <loadMenuTexts+0x12a0>)
 8006fd2:	4b69      	ldr	r3, [pc, #420]	@ (8007178 <loadMenuTexts+0x12a4>)
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	461d      	mov	r5, r3
 8006fd8:	6828      	ldr	r0, [r5, #0]
 8006fda:	6869      	ldr	r1, [r5, #4]
 8006fdc:	68aa      	ldr	r2, [r5, #8]
 8006fde:	68eb      	ldr	r3, [r5, #12]
 8006fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe2:	7c2b      	ldrb	r3, [r5, #16]
 8006fe4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8006fe6:	4a65      	ldr	r2, [pc, #404]	@ (800717c <loadMenuTexts+0x12a8>)
 8006fe8:	4b65      	ldr	r3, [pc, #404]	@ (8007180 <loadMenuTexts+0x12ac>)
 8006fea:	4614      	mov	r4, r2
 8006fec:	461d      	mov	r5, r3
 8006fee:	6828      	ldr	r0, [r5, #0]
 8006ff0:	6869      	ldr	r1, [r5, #4]
 8006ff2:	68aa      	ldr	r2, [r5, #8]
 8006ff4:	68eb      	ldr	r3, [r5, #12]
 8006ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff8:	7c2b      	ldrb	r3, [r5, #16]
 8006ffa:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8006ffc:	4a61      	ldr	r2, [pc, #388]	@ (8007184 <loadMenuTexts+0x12b0>)
 8006ffe:	4b62      	ldr	r3, [pc, #392]	@ (8007188 <loadMenuTexts+0x12b4>)
 8007000:	4614      	mov	r4, r2
 8007002:	461d      	mov	r5, r3
 8007004:	6828      	ldr	r0, [r5, #0]
 8007006:	6869      	ldr	r1, [r5, #4]
 8007008:	68aa      	ldr	r2, [r5, #8]
 800700a:	68eb      	ldr	r3, [r5, #12]
 800700c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700e:	7c2b      	ldrb	r3, [r5, #16]
 8007010:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007012:	4a5e      	ldr	r2, [pc, #376]	@ (800718c <loadMenuTexts+0x12b8>)
 8007014:	4b5e      	ldr	r3, [pc, #376]	@ (8007190 <loadMenuTexts+0x12bc>)
 8007016:	4614      	mov	r4, r2
 8007018:	461d      	mov	r5, r3
 800701a:	6828      	ldr	r0, [r5, #0]
 800701c:	6869      	ldr	r1, [r5, #4]
 800701e:	68aa      	ldr	r2, [r5, #8]
 8007020:	68eb      	ldr	r3, [r5, #12]
 8007022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007024:	7c2b      	ldrb	r3, [r5, #16]
 8007026:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007028:	4a5a      	ldr	r2, [pc, #360]	@ (8007194 <loadMenuTexts+0x12c0>)
 800702a:	4b5b      	ldr	r3, [pc, #364]	@ (8007198 <loadMenuTexts+0x12c4>)
 800702c:	4614      	mov	r4, r2
 800702e:	461d      	mov	r5, r3
 8007030:	6828      	ldr	r0, [r5, #0]
 8007032:	6869      	ldr	r1, [r5, #4]
 8007034:	68aa      	ldr	r2, [r5, #8]
 8007036:	68eb      	ldr	r3, [r5, #12]
 8007038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703a:	7c2b      	ldrb	r3, [r5, #16]
 800703c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800703e:	4a57      	ldr	r2, [pc, #348]	@ (800719c <loadMenuTexts+0x12c8>)
 8007040:	4b57      	ldr	r3, [pc, #348]	@ (80071a0 <loadMenuTexts+0x12cc>)
 8007042:	4614      	mov	r4, r2
 8007044:	461d      	mov	r5, r3
 8007046:	6828      	ldr	r0, [r5, #0]
 8007048:	6869      	ldr	r1, [r5, #4]
 800704a:	68aa      	ldr	r2, [r5, #8]
 800704c:	68eb      	ldr	r3, [r5, #12]
 800704e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007050:	7c2b      	ldrb	r3, [r5, #16]
 8007052:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007054:	4a53      	ldr	r2, [pc, #332]	@ (80071a4 <loadMenuTexts+0x12d0>)
 8007056:	4b54      	ldr	r3, [pc, #336]	@ (80071a8 <loadMenuTexts+0x12d4>)
 8007058:	4614      	mov	r4, r2
 800705a:	461d      	mov	r5, r3
 800705c:	6828      	ldr	r0, [r5, #0]
 800705e:	6869      	ldr	r1, [r5, #4]
 8007060:	68aa      	ldr	r2, [r5, #8]
 8007062:	68eb      	ldr	r3, [r5, #12]
 8007064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007066:	7c2b      	ldrb	r3, [r5, #16]
 8007068:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800706a:	4a50      	ldr	r2, [pc, #320]	@ (80071ac <loadMenuTexts+0x12d8>)
 800706c:	4b50      	ldr	r3, [pc, #320]	@ (80071b0 <loadMenuTexts+0x12dc>)
 800706e:	4614      	mov	r4, r2
 8007070:	461d      	mov	r5, r3
 8007072:	6828      	ldr	r0, [r5, #0]
 8007074:	6869      	ldr	r1, [r5, #4]
 8007076:	68aa      	ldr	r2, [r5, #8]
 8007078:	68eb      	ldr	r3, [r5, #12]
 800707a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707c:	7c2b      	ldrb	r3, [r5, #16]
 800707e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007080:	4a4c      	ldr	r2, [pc, #304]	@ (80071b4 <loadMenuTexts+0x12e0>)
 8007082:	4b4d      	ldr	r3, [pc, #308]	@ (80071b8 <loadMenuTexts+0x12e4>)
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	6828      	ldr	r0, [r5, #0]
 800708a:	6869      	ldr	r1, [r5, #4]
 800708c:	68aa      	ldr	r2, [r5, #8]
 800708e:	68eb      	ldr	r3, [r5, #12]
 8007090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007092:	7c2b      	ldrb	r3, [r5, #16]
 8007094:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8007096:	4a49      	ldr	r2, [pc, #292]	@ (80071bc <loadMenuTexts+0x12e8>)
 8007098:	4b49      	ldr	r3, [pc, #292]	@ (80071c0 <loadMenuTexts+0x12ec>)
 800709a:	4614      	mov	r4, r2
 800709c:	461d      	mov	r5, r3
 800709e:	e091      	b.n	80071c4 <loadMenuTexts+0x12f0>
 80070a0:	200009d8 	.word	0x200009d8
 80070a4:	200014e4 	.word	0x200014e4
 80070a8:	200009ec 	.word	0x200009ec
 80070ac:	200014f8 	.word	0x200014f8
 80070b0:	20000a00 	.word	0x20000a00
 80070b4:	2000150c 	.word	0x2000150c
 80070b8:	20000a14 	.word	0x20000a14
 80070bc:	20001520 	.word	0x20001520
 80070c0:	20000a28 	.word	0x20000a28
 80070c4:	20001534 	.word	0x20001534
 80070c8:	20000a3c 	.word	0x20000a3c
 80070cc:	20001548 	.word	0x20001548
 80070d0:	20000a50 	.word	0x20000a50
 80070d4:	2000155c 	.word	0x2000155c
 80070d8:	20000a64 	.word	0x20000a64
 80070dc:	20001570 	.word	0x20001570
 80070e0:	20000a78 	.word	0x20000a78
 80070e4:	20001584 	.word	0x20001584
 80070e8:	20000a8c 	.word	0x20000a8c
 80070ec:	20001598 	.word	0x20001598
 80070f0:	20000aa0 	.word	0x20000aa0
 80070f4:	200015ac 	.word	0x200015ac
 80070f8:	20000ab4 	.word	0x20000ab4
 80070fc:	200015c0 	.word	0x200015c0
 8007100:	20000ac8 	.word	0x20000ac8
 8007104:	200015d4 	.word	0x200015d4
 8007108:	20000adc 	.word	0x20000adc
 800710c:	200015e8 	.word	0x200015e8
 8007110:	20000af0 	.word	0x20000af0
 8007114:	200015fc 	.word	0x200015fc
 8007118:	20000b04 	.word	0x20000b04
 800711c:	20001610 	.word	0x20001610
 8007120:	20000b18 	.word	0x20000b18
 8007124:	20001624 	.word	0x20001624
 8007128:	20000b2c 	.word	0x20000b2c
 800712c:	20001638 	.word	0x20001638
 8007130:	20000b40 	.word	0x20000b40
 8007134:	2000164c 	.word	0x2000164c
 8007138:	20000b54 	.word	0x20000b54
 800713c:	20001660 	.word	0x20001660
 8007140:	20000b68 	.word	0x20000b68
 8007144:	20001674 	.word	0x20001674
 8007148:	20000b7c 	.word	0x20000b7c
 800714c:	20001688 	.word	0x20001688
 8007150:	20000b90 	.word	0x20000b90
 8007154:	2000169c 	.word	0x2000169c
 8007158:	20000ba4 	.word	0x20000ba4
 800715c:	200016b0 	.word	0x200016b0
 8007160:	20000bb8 	.word	0x20000bb8
 8007164:	200016c4 	.word	0x200016c4
 8007168:	20000bcc 	.word	0x20000bcc
 800716c:	200016d8 	.word	0x200016d8
 8007170:	20000be0 	.word	0x20000be0
 8007174:	200016ec 	.word	0x200016ec
 8007178:	20000bf4 	.word	0x20000bf4
 800717c:	20001700 	.word	0x20001700
 8007180:	20000c08 	.word	0x20000c08
 8007184:	20001714 	.word	0x20001714
 8007188:	20000c1c 	.word	0x20000c1c
 800718c:	20001728 	.word	0x20001728
 8007190:	20000c30 	.word	0x20000c30
 8007194:	2000173c 	.word	0x2000173c
 8007198:	20000c44 	.word	0x20000c44
 800719c:	20001750 	.word	0x20001750
 80071a0:	20000c58 	.word	0x20000c58
 80071a4:	20001764 	.word	0x20001764
 80071a8:	20000c6c 	.word	0x20000c6c
 80071ac:	20001778 	.word	0x20001778
 80071b0:	20000cf8 	.word	0x20000cf8
 80071b4:	2000178c 	.word	0x2000178c
 80071b8:	20000d0c 	.word	0x20000d0c
 80071bc:	200017a0 	.word	0x200017a0
 80071c0:	20000cd0 	.word	0x20000cd0
 80071c4:	6828      	ldr	r0, [r5, #0]
 80071c6:	6869      	ldr	r1, [r5, #4]
 80071c8:	68aa      	ldr	r2, [r5, #8]
 80071ca:	68eb      	ldr	r3, [r5, #12]
 80071cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ce:	7c2b      	ldrb	r3, [r5, #16]
 80071d0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80071d2:	4a55      	ldr	r2, [pc, #340]	@ (8007328 <loadMenuTexts+0x1454>)
 80071d4:	4b55      	ldr	r3, [pc, #340]	@ (800732c <loadMenuTexts+0x1458>)
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	6828      	ldr	r0, [r5, #0]
 80071dc:	6869      	ldr	r1, [r5, #4]
 80071de:	68aa      	ldr	r2, [r5, #8]
 80071e0:	68eb      	ldr	r3, [r5, #12]
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	7c2b      	ldrb	r3, [r5, #16]
 80071e6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80071e8:	4a51      	ldr	r2, [pc, #324]	@ (8007330 <loadMenuTexts+0x145c>)
 80071ea:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <loadMenuTexts+0x1460>)
 80071ec:	4614      	mov	r4, r2
 80071ee:	461d      	mov	r5, r3
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	6869      	ldr	r1, [r5, #4]
 80071f4:	68aa      	ldr	r2, [r5, #8]
 80071f6:	68eb      	ldr	r3, [r5, #12]
 80071f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fa:	7c2b      	ldrb	r3, [r5, #16]
 80071fc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80071fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007338 <loadMenuTexts+0x1464>)
 8007200:	4b4e      	ldr	r3, [pc, #312]	@ (800733c <loadMenuTexts+0x1468>)
 8007202:	4614      	mov	r4, r2
 8007204:	461d      	mov	r5, r3
 8007206:	6828      	ldr	r0, [r5, #0]
 8007208:	6869      	ldr	r1, [r5, #4]
 800720a:	68aa      	ldr	r2, [r5, #8]
 800720c:	68eb      	ldr	r3, [r5, #12]
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	7c2b      	ldrb	r3, [r5, #16]
 8007212:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007214:	4a4a      	ldr	r2, [pc, #296]	@ (8007340 <loadMenuTexts+0x146c>)
 8007216:	4b4b      	ldr	r3, [pc, #300]	@ (8007344 <loadMenuTexts+0x1470>)
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	6869      	ldr	r1, [r5, #4]
 8007220:	68aa      	ldr	r2, [r5, #8]
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	7c2b      	ldrb	r3, [r5, #16]
 8007228:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800722a:	4a47      	ldr	r2, [pc, #284]	@ (8007348 <loadMenuTexts+0x1474>)
 800722c:	4b47      	ldr	r3, [pc, #284]	@ (800734c <loadMenuTexts+0x1478>)
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	6869      	ldr	r1, [r5, #4]
 8007236:	68aa      	ldr	r2, [r5, #8]
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	7c2b      	ldrb	r3, [r5, #16]
 800723e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007240:	4a43      	ldr	r2, [pc, #268]	@ (8007350 <loadMenuTexts+0x147c>)
 8007242:	4b44      	ldr	r3, [pc, #272]	@ (8007354 <loadMenuTexts+0x1480>)
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	6828      	ldr	r0, [r5, #0]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	68aa      	ldr	r2, [r5, #8]
 800724e:	68eb      	ldr	r3, [r5, #12]
 8007250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007252:	7c2b      	ldrb	r3, [r5, #16]
 8007254:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007256:	4a40      	ldr	r2, [pc, #256]	@ (8007358 <loadMenuTexts+0x1484>)
 8007258:	4b40      	ldr	r3, [pc, #256]	@ (800735c <loadMenuTexts+0x1488>)
 800725a:	4614      	mov	r4, r2
 800725c:	461d      	mov	r5, r3
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	6869      	ldr	r1, [r5, #4]
 8007262:	68aa      	ldr	r2, [r5, #8]
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007268:	7c2b      	ldrb	r3, [r5, #16]
 800726a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800726c:	4a3c      	ldr	r2, [pc, #240]	@ (8007360 <loadMenuTexts+0x148c>)
 800726e:	4b3d      	ldr	r3, [pc, #244]	@ (8007364 <loadMenuTexts+0x1490>)
 8007270:	4614      	mov	r4, r2
 8007272:	461d      	mov	r5, r3
 8007274:	6828      	ldr	r0, [r5, #0]
 8007276:	6869      	ldr	r1, [r5, #4]
 8007278:	68aa      	ldr	r2, [r5, #8]
 800727a:	68eb      	ldr	r3, [r5, #12]
 800727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727e:	7c2b      	ldrb	r3, [r5, #16]
 8007280:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007282:	4a39      	ldr	r2, [pc, #228]	@ (8007368 <loadMenuTexts+0x1494>)
 8007284:	4b39      	ldr	r3, [pc, #228]	@ (800736c <loadMenuTexts+0x1498>)
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	6869      	ldr	r1, [r5, #4]
 800728e:	68aa      	ldr	r2, [r5, #8]
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	7c2b      	ldrb	r3, [r5, #16]
 8007296:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007298:	4a35      	ldr	r2, [pc, #212]	@ (8007370 <loadMenuTexts+0x149c>)
 800729a:	4b36      	ldr	r3, [pc, #216]	@ (8007374 <loadMenuTexts+0x14a0>)
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	6828      	ldr	r0, [r5, #0]
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	68eb      	ldr	r3, [r5, #12]
 80072a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072aa:	7c2b      	ldrb	r3, [r5, #16]
 80072ac:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80072ae:	4a32      	ldr	r2, [pc, #200]	@ (8007378 <loadMenuTexts+0x14a4>)
 80072b0:	4b32      	ldr	r3, [pc, #200]	@ (800737c <loadMenuTexts+0x14a8>)
 80072b2:	4614      	mov	r4, r2
 80072b4:	461d      	mov	r5, r3
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	6869      	ldr	r1, [r5, #4]
 80072ba:	68aa      	ldr	r2, [r5, #8]
 80072bc:	68eb      	ldr	r3, [r5, #12]
 80072be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c0:	7c2b      	ldrb	r3, [r5, #16]
 80072c2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80072c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007380 <loadMenuTexts+0x14ac>)
 80072c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007384 <loadMenuTexts+0x14b0>)
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	68aa      	ldr	r2, [r5, #8]
 80072d2:	68eb      	ldr	r3, [r5, #12]
 80072d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d6:	7c2b      	ldrb	r3, [r5, #16]
 80072d8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80072da:	4a2b      	ldr	r2, [pc, #172]	@ (8007388 <loadMenuTexts+0x14b4>)
 80072dc:	4b2b      	ldr	r3, [pc, #172]	@ (800738c <loadMenuTexts+0x14b8>)
 80072de:	4614      	mov	r4, r2
 80072e0:	461d      	mov	r5, r3
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	68aa      	ldr	r2, [r5, #8]
 80072e8:	68eb      	ldr	r3, [r5, #12]
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ec:	7c2b      	ldrb	r3, [r5, #16]
 80072ee:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80072f0:	4a27      	ldr	r2, [pc, #156]	@ (8007390 <loadMenuTexts+0x14bc>)
 80072f2:	4b28      	ldr	r3, [pc, #160]	@ (8007394 <loadMenuTexts+0x14c0>)
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	6828      	ldr	r0, [r5, #0]
 80072fa:	6869      	ldr	r1, [r5, #4]
 80072fc:	68aa      	ldr	r2, [r5, #8]
 80072fe:	68eb      	ldr	r3, [r5, #12]
 8007300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007302:	7c2b      	ldrb	r3, [r5, #16]
 8007304:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007306:	4a24      	ldr	r2, [pc, #144]	@ (8007398 <loadMenuTexts+0x14c4>)
 8007308:	4b24      	ldr	r3, [pc, #144]	@ (800739c <loadMenuTexts+0x14c8>)
 800730a:	4614      	mov	r4, r2
 800730c:	461d      	mov	r5, r3
 800730e:	6828      	ldr	r0, [r5, #0]
 8007310:	6869      	ldr	r1, [r5, #4]
 8007312:	68aa      	ldr	r2, [r5, #8]
 8007314:	68eb      	ldr	r3, [r5, #12]
 8007316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007318:	7c2b      	ldrb	r3, [r5, #16]
 800731a:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 800731c:	f000 f840 	bl	80073a0 <menuVariableFinisher>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bdb0      	pop	{r4, r5, r7, pc}
 8007328:	200017b4 	.word	0x200017b4
 800732c:	20000ce4 	.word	0x20000ce4
 8007330:	200017c8 	.word	0x200017c8
 8007334:	20000d48 	.word	0x20000d48
 8007338:	200017dc 	.word	0x200017dc
 800733c:	20000d5c 	.word	0x20000d5c
 8007340:	200017f0 	.word	0x200017f0
 8007344:	20000d98 	.word	0x20000d98
 8007348:	20001804 	.word	0x20001804
 800734c:	20000dac 	.word	0x20000dac
 8007350:	20001818 	.word	0x20001818
 8007354:	20000de8 	.word	0x20000de8
 8007358:	2000182c 	.word	0x2000182c
 800735c:	20000dfc 	.word	0x20000dfc
 8007360:	20001840 	.word	0x20001840
 8007364:	20000e24 	.word	0x20000e24
 8007368:	20001854 	.word	0x20001854
 800736c:	20000e4c 	.word	0x20000e4c
 8007370:	20001868 	.word	0x20001868
 8007374:	20000e74 	.word	0x20000e74
 8007378:	2000187c 	.word	0x2000187c
 800737c:	20000e9c 	.word	0x20000e9c
 8007380:	20001890 	.word	0x20001890
 8007384:	20000ec4 	.word	0x20000ec4
 8007388:	200018a4 	.word	0x200018a4
 800738c:	20000eec 	.word	0x20000eec
 8007390:	200018b8 	.word	0x200018b8
 8007394:	20000f14 	.word	0x20000f14
 8007398:	200018cc 	.word	0x200018cc
 800739c:	20000f3c 	.word	0x20000f3c

080073a0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80073a4:	4b97      	ldr	r3, [pc, #604]	@ (8007604 <menuVariableFinisher+0x264>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80073aa:	4b97      	ldr	r3, [pc, #604]	@ (8007608 <menuVariableFinisher+0x268>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80073b0:	4b96      	ldr	r3, [pc, #600]	@ (800760c <menuVariableFinisher+0x26c>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80073b6:	4b96      	ldr	r3, [pc, #600]	@ (8007610 <menuVariableFinisher+0x270>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80073bc:	4b95      	ldr	r3, [pc, #596]	@ (8007614 <menuVariableFinisher+0x274>)
 80073be:	2200      	movs	r2, #0
 80073c0:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80073c2:	4b95      	ldr	r3, [pc, #596]	@ (8007618 <menuVariableFinisher+0x278>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80073c8:	4b94      	ldr	r3, [pc, #592]	@ (800761c <menuVariableFinisher+0x27c>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80073ce:	4b94      	ldr	r3, [pc, #592]	@ (8007620 <menuVariableFinisher+0x280>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80073d4:	4b93      	ldr	r3, [pc, #588]	@ (8007624 <menuVariableFinisher+0x284>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80073da:	4b93      	ldr	r3, [pc, #588]	@ (8007628 <menuVariableFinisher+0x288>)
 80073dc:	2200      	movs	r2, #0
 80073de:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80073e0:	4b92      	ldr	r3, [pc, #584]	@ (800762c <menuVariableFinisher+0x28c>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80073e6:	4b92      	ldr	r3, [pc, #584]	@ (8007630 <menuVariableFinisher+0x290>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80073ec:	4b91      	ldr	r3, [pc, #580]	@ (8007634 <menuVariableFinisher+0x294>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80073f2:	4b91      	ldr	r3, [pc, #580]	@ (8007638 <menuVariableFinisher+0x298>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80073f8:	4b90      	ldr	r3, [pc, #576]	@ (800763c <menuVariableFinisher+0x29c>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80073fe:	4b90      	ldr	r3, [pc, #576]	@ (8007640 <menuVariableFinisher+0x2a0>)
 8007400:	2200      	movs	r2, #0
 8007402:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007404:	4b8f      	ldr	r3, [pc, #572]	@ (8007644 <menuVariableFinisher+0x2a4>)
 8007406:	2200      	movs	r2, #0
 8007408:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800740a:	4b8f      	ldr	r3, [pc, #572]	@ (8007648 <menuVariableFinisher+0x2a8>)
 800740c:	2200      	movs	r2, #0
 800740e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007410:	4b8e      	ldr	r3, [pc, #568]	@ (800764c <menuVariableFinisher+0x2ac>)
 8007412:	2200      	movs	r2, #0
 8007414:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007416:	4b8e      	ldr	r3, [pc, #568]	@ (8007650 <menuVariableFinisher+0x2b0>)
 8007418:	2200      	movs	r2, #0
 800741a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800741c:	4b8d      	ldr	r3, [pc, #564]	@ (8007654 <menuVariableFinisher+0x2b4>)
 800741e:	2200      	movs	r2, #0
 8007420:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007422:	4b8d      	ldr	r3, [pc, #564]	@ (8007658 <menuVariableFinisher+0x2b8>)
 8007424:	2200      	movs	r2, #0
 8007426:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007428:	4b8c      	ldr	r3, [pc, #560]	@ (800765c <menuVariableFinisher+0x2bc>)
 800742a:	2200      	movs	r2, #0
 800742c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800742e:	4b8c      	ldr	r3, [pc, #560]	@ (8007660 <menuVariableFinisher+0x2c0>)
 8007430:	2200      	movs	r2, #0
 8007432:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007434:	4b8b      	ldr	r3, [pc, #556]	@ (8007664 <menuVariableFinisher+0x2c4>)
 8007436:	2200      	movs	r2, #0
 8007438:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800743a:	4b8b      	ldr	r3, [pc, #556]	@ (8007668 <menuVariableFinisher+0x2c8>)
 800743c:	2200      	movs	r2, #0
 800743e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007440:	4b8a      	ldr	r3, [pc, #552]	@ (800766c <menuVariableFinisher+0x2cc>)
 8007442:	2200      	movs	r2, #0
 8007444:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007446:	4b8a      	ldr	r3, [pc, #552]	@ (8007670 <menuVariableFinisher+0x2d0>)
 8007448:	2200      	movs	r2, #0
 800744a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800744c:	4b89      	ldr	r3, [pc, #548]	@ (8007674 <menuVariableFinisher+0x2d4>)
 800744e:	2200      	movs	r2, #0
 8007450:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007452:	4b89      	ldr	r3, [pc, #548]	@ (8007678 <menuVariableFinisher+0x2d8>)
 8007454:	2200      	movs	r2, #0
 8007456:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007458:	4b88      	ldr	r3, [pc, #544]	@ (800767c <menuVariableFinisher+0x2dc>)
 800745a:	2200      	movs	r2, #0
 800745c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800745e:	4b88      	ldr	r3, [pc, #544]	@ (8007680 <menuVariableFinisher+0x2e0>)
 8007460:	2200      	movs	r2, #0
 8007462:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007464:	4b87      	ldr	r3, [pc, #540]	@ (8007684 <menuVariableFinisher+0x2e4>)
 8007466:	2200      	movs	r2, #0
 8007468:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800746a:	4b87      	ldr	r3, [pc, #540]	@ (8007688 <menuVariableFinisher+0x2e8>)
 800746c:	2200      	movs	r2, #0
 800746e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007470:	4b86      	ldr	r3, [pc, #536]	@ (800768c <menuVariableFinisher+0x2ec>)
 8007472:	2200      	movs	r2, #0
 8007474:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007476:	4b86      	ldr	r3, [pc, #536]	@ (8007690 <menuVariableFinisher+0x2f0>)
 8007478:	2200      	movs	r2, #0
 800747a:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 800747c:	4b85      	ldr	r3, [pc, #532]	@ (8007694 <menuVariableFinisher+0x2f4>)
 800747e:	2200      	movs	r2, #0
 8007480:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007482:	4b85      	ldr	r3, [pc, #532]	@ (8007698 <menuVariableFinisher+0x2f8>)
 8007484:	2200      	movs	r2, #0
 8007486:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007488:	4b84      	ldr	r3, [pc, #528]	@ (800769c <menuVariableFinisher+0x2fc>)
 800748a:	2200      	movs	r2, #0
 800748c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800748e:	4b84      	ldr	r3, [pc, #528]	@ (80076a0 <menuVariableFinisher+0x300>)
 8007490:	2200      	movs	r2, #0
 8007492:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007494:	4b83      	ldr	r3, [pc, #524]	@ (80076a4 <menuVariableFinisher+0x304>)
 8007496:	2200      	movs	r2, #0
 8007498:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800749a:	4b83      	ldr	r3, [pc, #524]	@ (80076a8 <menuVariableFinisher+0x308>)
 800749c:	2200      	movs	r2, #0
 800749e:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80074a0:	4b82      	ldr	r3, [pc, #520]	@ (80076ac <menuVariableFinisher+0x30c>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80074a6:	4b82      	ldr	r3, [pc, #520]	@ (80076b0 <menuVariableFinisher+0x310>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80074ac:	4b81      	ldr	r3, [pc, #516]	@ (80076b4 <menuVariableFinisher+0x314>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80074b2:	4b81      	ldr	r3, [pc, #516]	@ (80076b8 <menuVariableFinisher+0x318>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80074b8:	4b80      	ldr	r3, [pc, #512]	@ (80076bc <menuVariableFinisher+0x31c>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80074be:	4b80      	ldr	r3, [pc, #512]	@ (80076c0 <menuVariableFinisher+0x320>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80074c4:	4b7f      	ldr	r3, [pc, #508]	@ (80076c4 <menuVariableFinisher+0x324>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80074ca:	4b7f      	ldr	r3, [pc, #508]	@ (80076c8 <menuVariableFinisher+0x328>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80074d0:	4b7e      	ldr	r3, [pc, #504]	@ (80076cc <menuVariableFinisher+0x32c>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80074d6:	4b7e      	ldr	r3, [pc, #504]	@ (80076d0 <menuVariableFinisher+0x330>)
 80074d8:	2200      	movs	r2, #0
 80074da:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80074dc:	4b7d      	ldr	r3, [pc, #500]	@ (80076d4 <menuVariableFinisher+0x334>)
 80074de:	2200      	movs	r2, #0
 80074e0:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80074e2:	4b7d      	ldr	r3, [pc, #500]	@ (80076d8 <menuVariableFinisher+0x338>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80074e8:	4b7c      	ldr	r3, [pc, #496]	@ (80076dc <menuVariableFinisher+0x33c>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80074ee:	4b7c      	ldr	r3, [pc, #496]	@ (80076e0 <menuVariableFinisher+0x340>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80074f4:	4b7b      	ldr	r3, [pc, #492]	@ (80076e4 <menuVariableFinisher+0x344>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80074fa:	4b7b      	ldr	r3, [pc, #492]	@ (80076e8 <menuVariableFinisher+0x348>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007500:	4b7a      	ldr	r3, [pc, #488]	@ (80076ec <menuVariableFinisher+0x34c>)
 8007502:	2200      	movs	r2, #0
 8007504:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007506:	4b7a      	ldr	r3, [pc, #488]	@ (80076f0 <menuVariableFinisher+0x350>)
 8007508:	2200      	movs	r2, #0
 800750a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 800750c:	4b79      	ldr	r3, [pc, #484]	@ (80076f4 <menuVariableFinisher+0x354>)
 800750e:	2200      	movs	r2, #0
 8007510:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007512:	4b79      	ldr	r3, [pc, #484]	@ (80076f8 <menuVariableFinisher+0x358>)
 8007514:	2200      	movs	r2, #0
 8007516:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007518:	4b78      	ldr	r3, [pc, #480]	@ (80076fc <menuVariableFinisher+0x35c>)
 800751a:	2200      	movs	r2, #0
 800751c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800751e:	4b78      	ldr	r3, [pc, #480]	@ (8007700 <menuVariableFinisher+0x360>)
 8007520:	2200      	movs	r2, #0
 8007522:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007524:	4b77      	ldr	r3, [pc, #476]	@ (8007704 <menuVariableFinisher+0x364>)
 8007526:	2200      	movs	r2, #0
 8007528:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800752a:	4b77      	ldr	r3, [pc, #476]	@ (8007708 <menuVariableFinisher+0x368>)
 800752c:	2200      	movs	r2, #0
 800752e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007530:	4b76      	ldr	r3, [pc, #472]	@ (800770c <menuVariableFinisher+0x36c>)
 8007532:	2200      	movs	r2, #0
 8007534:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007536:	4b76      	ldr	r3, [pc, #472]	@ (8007710 <menuVariableFinisher+0x370>)
 8007538:	2200      	movs	r2, #0
 800753a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 800753c:	4b75      	ldr	r3, [pc, #468]	@ (8007714 <menuVariableFinisher+0x374>)
 800753e:	2200      	movs	r2, #0
 8007540:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007542:	4b75      	ldr	r3, [pc, #468]	@ (8007718 <menuVariableFinisher+0x378>)
 8007544:	2200      	movs	r2, #0
 8007546:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007548:	4b74      	ldr	r3, [pc, #464]	@ (800771c <menuVariableFinisher+0x37c>)
 800754a:	2200      	movs	r2, #0
 800754c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 800754e:	4b74      	ldr	r3, [pc, #464]	@ (8007720 <menuVariableFinisher+0x380>)
 8007550:	2200      	movs	r2, #0
 8007552:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007554:	4b73      	ldr	r3, [pc, #460]	@ (8007724 <menuVariableFinisher+0x384>)
 8007556:	2200      	movs	r2, #0
 8007558:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800755a:	4b73      	ldr	r3, [pc, #460]	@ (8007728 <menuVariableFinisher+0x388>)
 800755c:	2200      	movs	r2, #0
 800755e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007560:	4b72      	ldr	r3, [pc, #456]	@ (800772c <menuVariableFinisher+0x38c>)
 8007562:	2200      	movs	r2, #0
 8007564:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007566:	4b72      	ldr	r3, [pc, #456]	@ (8007730 <menuVariableFinisher+0x390>)
 8007568:	2200      	movs	r2, #0
 800756a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 800756c:	4b71      	ldr	r3, [pc, #452]	@ (8007734 <menuVariableFinisher+0x394>)
 800756e:	2200      	movs	r2, #0
 8007570:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007572:	4b71      	ldr	r3, [pc, #452]	@ (8007738 <menuVariableFinisher+0x398>)
 8007574:	2200      	movs	r2, #0
 8007576:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007578:	4b70      	ldr	r3, [pc, #448]	@ (800773c <menuVariableFinisher+0x39c>)
 800757a:	2200      	movs	r2, #0
 800757c:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 800757e:	4b70      	ldr	r3, [pc, #448]	@ (8007740 <menuVariableFinisher+0x3a0>)
 8007580:	2200      	movs	r2, #0
 8007582:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007584:	4b6f      	ldr	r3, [pc, #444]	@ (8007744 <menuVariableFinisher+0x3a4>)
 8007586:	2200      	movs	r2, #0
 8007588:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800758a:	4b6f      	ldr	r3, [pc, #444]	@ (8007748 <menuVariableFinisher+0x3a8>)
 800758c:	2200      	movs	r2, #0
 800758e:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007590:	4b6e      	ldr	r3, [pc, #440]	@ (800774c <menuVariableFinisher+0x3ac>)
 8007592:	2200      	movs	r2, #0
 8007594:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8007596:	4b6e      	ldr	r3, [pc, #440]	@ (8007750 <menuVariableFinisher+0x3b0>)
 8007598:	2200      	movs	r2, #0
 800759a:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 800759c:	4b6d      	ldr	r3, [pc, #436]	@ (8007754 <menuVariableFinisher+0x3b4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80075a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007758 <menuVariableFinisher+0x3b8>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80075a8:	4b6c      	ldr	r3, [pc, #432]	@ (800775c <menuVariableFinisher+0x3bc>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80075ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007760 <menuVariableFinisher+0x3c0>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80075b4:	4b6b      	ldr	r3, [pc, #428]	@ (8007764 <menuVariableFinisher+0x3c4>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80075ba:	4b6b      	ldr	r3, [pc, #428]	@ (8007768 <menuVariableFinisher+0x3c8>)
 80075bc:	2200      	movs	r2, #0
 80075be:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80075c0:	4b6a      	ldr	r3, [pc, #424]	@ (800776c <menuVariableFinisher+0x3cc>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80075c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007770 <menuVariableFinisher+0x3d0>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 80075cc:	4b69      	ldr	r3, [pc, #420]	@ (8007774 <menuVariableFinisher+0x3d4>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 80075d2:	4b69      	ldr	r3, [pc, #420]	@ (8007778 <menuVariableFinisher+0x3d8>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 80075d8:	4b68      	ldr	r3, [pc, #416]	@ (800777c <menuVariableFinisher+0x3dc>)
 80075da:	2200      	movs	r2, #0
 80075dc:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 80075de:	4b68      	ldr	r3, [pc, #416]	@ (8007780 <menuVariableFinisher+0x3e0>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 80075e4:	4b67      	ldr	r3, [pc, #412]	@ (8007784 <menuVariableFinisher+0x3e4>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 80075ea:	4b67      	ldr	r3, [pc, #412]	@ (8007788 <menuVariableFinisher+0x3e8>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 80075f0:	4b66      	ldr	r3, [pc, #408]	@ (800778c <menuVariableFinisher+0x3ec>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 80075f6:	4b66      	ldr	r3, [pc, #408]	@ (8007790 <menuVariableFinisher+0x3f0>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	741a      	strb	r2, [r3, #16]
}
 80075fc:	bf00      	nop
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	200000a0 	.word	0x200000a0
 8007608:	200000b4 	.word	0x200000b4
 800760c:	200000c8 	.word	0x200000c8
 8007610:	200000dc 	.word	0x200000dc
 8007614:	200000f0 	.word	0x200000f0
 8007618:	20000104 	.word	0x20000104
 800761c:	20000118 	.word	0x20000118
 8007620:	2000012c 	.word	0x2000012c
 8007624:	20000140 	.word	0x20000140
 8007628:	20000154 	.word	0x20000154
 800762c:	20000168 	.word	0x20000168
 8007630:	2000017c 	.word	0x2000017c
 8007634:	20001200 	.word	0x20001200
 8007638:	20001214 	.word	0x20001214
 800763c:	20001228 	.word	0x20001228
 8007640:	2000123c 	.word	0x2000123c
 8007644:	20001250 	.word	0x20001250
 8007648:	20001264 	.word	0x20001264
 800764c:	20001278 	.word	0x20001278
 8007650:	2000128c 	.word	0x2000128c
 8007654:	200012a0 	.word	0x200012a0
 8007658:	200012b4 	.word	0x200012b4
 800765c:	200012c8 	.word	0x200012c8
 8007660:	200012dc 	.word	0x200012dc
 8007664:	200012f0 	.word	0x200012f0
 8007668:	20001304 	.word	0x20001304
 800766c:	20001318 	.word	0x20001318
 8007670:	2000132c 	.word	0x2000132c
 8007674:	20001340 	.word	0x20001340
 8007678:	20001354 	.word	0x20001354
 800767c:	20001368 	.word	0x20001368
 8007680:	2000137c 	.word	0x2000137c
 8007684:	20001390 	.word	0x20001390
 8007688:	200013a4 	.word	0x200013a4
 800768c:	200013b8 	.word	0x200013b8
 8007690:	200013cc 	.word	0x200013cc
 8007694:	200013e0 	.word	0x200013e0
 8007698:	200013f4 	.word	0x200013f4
 800769c:	20001408 	.word	0x20001408
 80076a0:	2000141c 	.word	0x2000141c
 80076a4:	20001430 	.word	0x20001430
 80076a8:	20001444 	.word	0x20001444
 80076ac:	20001458 	.word	0x20001458
 80076b0:	2000146c 	.word	0x2000146c
 80076b4:	20001480 	.word	0x20001480
 80076b8:	20001494 	.word	0x20001494
 80076bc:	200014a8 	.word	0x200014a8
 80076c0:	200014bc 	.word	0x200014bc
 80076c4:	200014d0 	.word	0x200014d0
 80076c8:	200014e4 	.word	0x200014e4
 80076cc:	200014f8 	.word	0x200014f8
 80076d0:	2000150c 	.word	0x2000150c
 80076d4:	20001520 	.word	0x20001520
 80076d8:	20001534 	.word	0x20001534
 80076dc:	20001548 	.word	0x20001548
 80076e0:	2000155c 	.word	0x2000155c
 80076e4:	20001570 	.word	0x20001570
 80076e8:	20001584 	.word	0x20001584
 80076ec:	20001598 	.word	0x20001598
 80076f0:	200015ac 	.word	0x200015ac
 80076f4:	200015c0 	.word	0x200015c0
 80076f8:	200015d4 	.word	0x200015d4
 80076fc:	200015e8 	.word	0x200015e8
 8007700:	200015fc 	.word	0x200015fc
 8007704:	20001610 	.word	0x20001610
 8007708:	20001624 	.word	0x20001624
 800770c:	20001638 	.word	0x20001638
 8007710:	2000164c 	.word	0x2000164c
 8007714:	20001660 	.word	0x20001660
 8007718:	20001674 	.word	0x20001674
 800771c:	20001688 	.word	0x20001688
 8007720:	2000169c 	.word	0x2000169c
 8007724:	200016b0 	.word	0x200016b0
 8007728:	200016c4 	.word	0x200016c4
 800772c:	200016d8 	.word	0x200016d8
 8007730:	200016ec 	.word	0x200016ec
 8007734:	20001700 	.word	0x20001700
 8007738:	20001714 	.word	0x20001714
 800773c:	20001728 	.word	0x20001728
 8007740:	2000173c 	.word	0x2000173c
 8007744:	20001750 	.word	0x20001750
 8007748:	20001764 	.word	0x20001764
 800774c:	20001778 	.word	0x20001778
 8007750:	2000178c 	.word	0x2000178c
 8007754:	200017a0 	.word	0x200017a0
 8007758:	200017b4 	.word	0x200017b4
 800775c:	200017c8 	.word	0x200017c8
 8007760:	200017dc 	.word	0x200017dc
 8007764:	200017f0 	.word	0x200017f0
 8007768:	20001804 	.word	0x20001804
 800776c:	20001818 	.word	0x20001818
 8007770:	2000182c 	.word	0x2000182c
 8007774:	20001840 	.word	0x20001840
 8007778:	20001854 	.word	0x20001854
 800777c:	20001868 	.word	0x20001868
 8007780:	2000187c 	.word	0x2000187c
 8007784:	20001890 	.word	0x20001890
 8007788:	200018a4 	.word	0x200018a4
 800778c:	200018b8 	.word	0x200018b8
 8007790:	200018cc 	.word	0x200018cc

08007794 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800779a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800779e:	f001 fd5b 	bl	8009258 <HAL_Delay>
	int confirmationVal = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80077a6:	e012      	b.n	80077ce <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 80077a8:	4a12      	ldr	r2, [pc, #72]	@ (80077f4 <takeMachineIDWithConfirmation+0x60>)
 80077aa:	2101      	movs	r1, #1
 80077ac:	2001      	movs	r0, #1
 80077ae:	f000 fff9 	bl	80087a4 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 80077b2:	4a11      	ldr	r2, [pc, #68]	@ (80077f8 <takeMachineIDWithConfirmation+0x64>)
 80077b4:	2101      	movs	r1, #1
 80077b6:	2002      	movs	r0, #2
 80077b8:	f000 fff4 	bl	80087a4 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 80077bc:	2102      	movs	r1, #2
 80077be:	480f      	ldr	r0, [pc, #60]	@ (80077fc <takeMachineIDWithConfirmation+0x68>)
 80077c0:	f002 fb1a 	bl	8009df8 <HAL_GPIO_ReadPin>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0e9      	beq.n	80077a8 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 80077d4:	f000 f814 	bl	8007800 <takeMachineID>

	convertArrays(1);
 80077d8:	2001      	movs	r0, #1
 80077da:	f7f8 ffb1 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 80077de:	2032      	movs	r0, #50	@ 0x32
 80077e0:	f001 fd3a 	bl	8009258 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7f9 fcb3 	bl	8001150 <printCredentials>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200018b8 	.word	0x200018b8
 80077f8:	200018cc 	.word	0x200018cc
 80077fc:	40010800 	.word	0x40010800

08007800 <takeMachineID>:

void takeMachineID() {
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8007806:	2001      	movs	r0, #1
 8007808:	f001 f82a 	bl	8008860 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 800780c:	220c      	movs	r2, #12
 800780e:	2100      	movs	r1, #0
 8007810:	48a2      	ldr	r0, [pc, #648]	@ (8007a9c <takeMachineID+0x29c>)
 8007812:	f005 fc59 	bl	800d0c8 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007816:	2305      	movs	r3, #5
 8007818:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800781a:	2303      	movs	r3, #3
 800781c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007822:	4b9f      	ldr	r3, [pc, #636]	@ (8007aa0 <takeMachineID+0x2a0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007828:	2100      	movs	r1, #0
 800782a:	2001      	movs	r0, #1
 800782c:	f7f9 fa5c 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007830:	2108      	movs	r1, #8
 8007832:	489c      	ldr	r0, [pc, #624]	@ (8007aa4 <takeMachineID+0x2a4>)
 8007834:	f002 fae0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007838:	4603      	mov	r3, r0
 800783a:	2b01      	cmp	r3, #1
 800783c:	d128      	bne.n	8007890 <takeMachineID+0x90>
        	lcd_cursor(0);
 800783e:	2000      	movs	r0, #0
 8007840:	f001 f80e 	bl	8008860 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007844:	f000 fdf0 	bl	8008428 <checkEEPROM4ID>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d00e      	beq.n	800786c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 800784e:	4a96      	ldr	r2, [pc, #600]	@ (8007aa8 <takeMachineID+0x2a8>)
 8007850:	2101      	movs	r1, #1
 8007852:	2001      	movs	r0, #1
 8007854:	f000 ffa6 	bl	80087a4 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007858:	4a94      	ldr	r2, [pc, #592]	@ (8007aac <takeMachineID+0x2ac>)
 800785a:	2101      	movs	r1, #1
 800785c:	2002      	movs	r0, #2
 800785e:	f000 ffa1 	bl	80087a4 <lcd_print>
        		HAL_Delay(1250);
 8007862:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007866:	f001 fcf7 	bl	8009258 <HAL_Delay>

        		goto mainSection;
 800786a:	e7cc      	b.n	8007806 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800786c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007870:	9302      	str	r3, [sp, #8]
 8007872:	236e      	movs	r3, #110	@ 0x6e
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	4b8e      	ldr	r3, [pc, #568]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	236e      	movs	r3, #110	@ 0x6e
 800787c:	2200      	movs	r2, #0
 800787e:	21a0      	movs	r1, #160	@ 0xa0
 8007880:	488c      	ldr	r0, [pc, #560]	@ (8007ab4 <takeMachineID+0x2b4>)
 8007882:	f002 fd73 	bl	800a36c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800788a:	f001 fce5 	bl	8009258 <HAL_Delay>

            	break;
 800788e:	e132      	b.n	8007af6 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007890:	2101      	movs	r1, #1
 8007892:	4884      	ldr	r0, [pc, #528]	@ (8007aa4 <takeMachineID+0x2a4>)
 8007894:	f002 fab0 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007898:	4603      	mov	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d111      	bne.n	80078c2 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b07      	cmp	r3, #7
 80078a2:	d102      	bne.n	80078aa <takeMachineID+0xaa>
        		cursorPosition = 10;
 80078a4:	230a      	movs	r3, #10
 80078a6:	60bb      	str	r3, [r7, #8]
 80078a8:	e008      	b.n	80078bc <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b0e      	cmp	r3, #14
 80078ae:	d102      	bne.n	80078b6 <takeMachineID+0xb6>
                cursorPosition = 3;
 80078b0:	2303      	movs	r3, #3
 80078b2:	60bb      	str	r3, [r7, #8]
 80078b4:	e002      	b.n	80078bc <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 80078bc:	2096      	movs	r0, #150	@ 0x96
 80078be:	f001 fccb 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80078c2:	2108      	movs	r1, #8
 80078c4:	487c      	ldr	r0, [pc, #496]	@ (8007ab8 <takeMachineID+0x2b8>)
 80078c6:	f002 fa97 	bl	8009df8 <HAL_GPIO_ReadPin>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d111      	bne.n	80078f4 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d102      	bne.n	80078dc <takeMachineID+0xdc>
                cursorPosition = 14;
 80078d6:	230e      	movs	r3, #14
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	e008      	b.n	80078ee <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b0a      	cmp	r3, #10
 80078e0:	d102      	bne.n	80078e8 <takeMachineID+0xe8>
            	cursorPosition = 7;
 80078e2:	2307      	movs	r3, #7
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	e002      	b.n	80078ee <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 80078ee:	20fa      	movs	r0, #250	@ 0xfa
 80078f0:	f001 fcb2 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80078f4:	2102      	movs	r1, #2
 80078f6:	486b      	ldr	r0, [pc, #428]	@ (8007aa4 <takeMachineID+0x2a4>)
 80078f8:	f002 fa7e 	bl	8009df8 <HAL_GPIO_ReadPin>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	f040 80a1 	bne.w	8007a46 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d10a      	bne.n	8007920 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 800790a:	4a64      	ldr	r2, [pc, #400]	@ (8007a9c <takeMachineID+0x29c>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	2230      	movs	r2, #48	@ 0x30
 8007912:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007914:	4a66      	ldr	r2, [pc, #408]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	4413      	add	r3, r2
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e07c      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d10a      	bne.n	800793c <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8007926:	4a5d      	ldr	r2, [pc, #372]	@ (8007a9c <takeMachineID+0x29c>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	2231      	movs	r2, #49	@ 0x31
 800792e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007930:	4a5f      	ldr	r2, [pc, #380]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	4413      	add	r3, r2
 8007936:	2201      	movs	r2, #1
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	e06e      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b05      	cmp	r3, #5
 8007940:	d10a      	bne.n	8007958 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8007942:	4a56      	ldr	r2, [pc, #344]	@ (8007a9c <takeMachineID+0x29c>)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	2232      	movs	r2, #50	@ 0x32
 800794a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800794c:	4a58      	ldr	r2, [pc, #352]	@ (8007ab0 <takeMachineID+0x2b0>)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	4413      	add	r3, r2
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e060      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d10a      	bne.n	8007974 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 800795e:	4a4f      	ldr	r2, [pc, #316]	@ (8007a9c <takeMachineID+0x29c>)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	2233      	movs	r2, #51	@ 0x33
 8007966:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007968:	4a51      	ldr	r2, [pc, #324]	@ (8007ab0 <takeMachineID+0x2b0>)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	4413      	add	r3, r2
 800796e:	2203      	movs	r2, #3
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	e052      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b07      	cmp	r3, #7
 8007978:	d10a      	bne.n	8007990 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 800797a:	4a48      	ldr	r2, [pc, #288]	@ (8007a9c <takeMachineID+0x29c>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	2234      	movs	r2, #52	@ 0x34
 8007982:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007984:	4a4a      	ldr	r2, [pc, #296]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	4413      	add	r3, r2
 800798a:	2204      	movs	r2, #4
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e044      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b0a      	cmp	r3, #10
 8007994:	d10a      	bne.n	80079ac <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007996:	4a41      	ldr	r2, [pc, #260]	@ (8007a9c <takeMachineID+0x29c>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4413      	add	r3, r2
 800799c:	2235      	movs	r2, #53	@ 0x35
 800799e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80079a0:	4a43      	ldr	r2, [pc, #268]	@ (8007ab0 <takeMachineID+0x2b0>)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	4413      	add	r3, r2
 80079a6:	2205      	movs	r2, #5
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	e036      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b0b      	cmp	r3, #11
 80079b0:	d10a      	bne.n	80079c8 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 80079b2:	4a3a      	ldr	r2, [pc, #232]	@ (8007a9c <takeMachineID+0x29c>)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	2236      	movs	r2, #54	@ 0x36
 80079ba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80079bc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ab0 <takeMachineID+0x2b0>)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	4413      	add	r3, r2
 80079c2:	2206      	movs	r2, #6
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e028      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	d10a      	bne.n	80079e4 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 80079ce:	4a33      	ldr	r2, [pc, #204]	@ (8007a9c <takeMachineID+0x29c>)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	2237      	movs	r2, #55	@ 0x37
 80079d6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80079d8:	4a35      	ldr	r2, [pc, #212]	@ (8007ab0 <takeMachineID+0x2b0>)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	2207      	movs	r2, #7
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e01a      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b0d      	cmp	r3, #13
 80079e8:	d10a      	bne.n	8007a00 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 80079ea:	4a2c      	ldr	r2, [pc, #176]	@ (8007a9c <takeMachineID+0x29c>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	2238      	movs	r2, #56	@ 0x38
 80079f2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80079f4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab0 <takeMachineID+0x2b0>)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e00c      	b.n	8007a1a <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b0e      	cmp	r3, #14
 8007a04:	d109      	bne.n	8007a1a <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007a06:	4a25      	ldr	r2, [pc, #148]	@ (8007a9c <takeMachineID+0x29c>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	2239      	movs	r2, #57	@ 0x39
 8007a0e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007a10:	4a27      	ldr	r2, [pc, #156]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	2209      	movs	r2, #9
 8007a18:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	b2d9      	uxtb	r1, r3
 8007a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a9c <takeMachineID+0x29c>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f000 fed0 	bl	80087ce <lcd_print_char>

        	writeLoc++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3301      	adds	r3, #1
 8007a38:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007a40:	2096      	movs	r0, #150	@ 0x96
 8007a42:	f001 fc09 	bl	8009258 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007a46:	2104      	movs	r1, #4
 8007a48:	4816      	ldr	r0, [pc, #88]	@ (8007aa4 <takeMachineID+0x2a4>)
 8007a4a:	f002 f9d5 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d149      	bne.n	8007ae8 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <takeMachineID+0x29c>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d042      	beq.n	8007ae2 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8007a9c <takeMachineID+0x29c>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007a66:	4a12      	ldr	r2, [pc, #72]	@ (8007ab0 <takeMachineID+0x2b0>)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	dd03      	ble.n	8007a7e <takeMachineID+0x27e>
                	writeLoc--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e004      	b.n	8007a88 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	dc01      	bgt.n	8007a88 <takeMachineID+0x288>
                	writeLoc = 5;
 8007a84:	2305      	movs	r3, #5
 8007a86:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd16      	ble.n	8007abc <takeMachineID+0x2bc>
                	arrayPos--;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	e017      	b.n	8007acc <takeMachineID+0x2cc>
 8007a9c:	20001040 	.word	0x20001040
 8007aa0:	20000004 	.word	0x20000004
 8007aa4:	40010800 	.word	0x40010800
 8007aa8:	200017c8 	.word	0x200017c8
 8007aac:	200017dc 	.word	0x200017dc
 8007ab0:	20000fc8 	.word	0x20000fc8
 8007ab4:	20001908 	.word	0x20001908
 8007ab8:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da04      	bge.n	8007acc <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b00 <takeMachineID+0x300>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	3305      	adds	r3, #5
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	f000 fe9a 	bl	8008810 <lcd_delete_char>
                HAL_Delay(50);
 8007adc:	2032      	movs	r0, #50	@ 0x32
 8007ade:	f001 fbbb 	bl	8009258 <HAL_Delay>
            }

            HAL_Delay(150);
 8007ae2:	2096      	movs	r0, #150	@ 0x96
 8007ae4:	f001 fbb8 	bl	8009258 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	2002      	movs	r0, #2
 8007af0:	f000 fe39 	bl	8008766 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007af4:	e69c      	b.n	8007830 <takeMachineID+0x30>
    }
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000004 	.word	0x20000004

08007b04 <takeWifiSSID>:

void takeWifiSSID() {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	@ 0x28
 8007b08:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f000 fea8 	bl	8008860 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007b10:	2214      	movs	r2, #20
 8007b12:	2100      	movs	r1, #0
 8007b14:	48a5      	ldr	r0, [pc, #660]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007b16:	f005 fad7 	bl	800d0c8 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007b1e:	2307      	movs	r3, #7
 8007b20:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007b22:	2301      	movs	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007b2a:	4ba1      	ldr	r3, [pc, #644]	@ (8007db0 <takeWifiSSID+0x2ac>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007b30:	2101      	movs	r1, #1
 8007b32:	2002      	movs	r0, #2
 8007b34:	f7f9 f8d8 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007b38:	2108      	movs	r1, #8
 8007b3a:	489e      	ldr	r0, [pc, #632]	@ (8007db4 <takeWifiSSID+0x2b0>)
 8007b3c:	f002 f95c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d129      	bne.n	8007b9a <takeWifiSSID+0x96>
            lcd_cursor(0);
 8007b46:	2000      	movs	r0, #0
 8007b48:	f000 fe8a 	bl	8008860 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007b4c:	4897      	ldr	r0, [pc, #604]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007b4e:	f7f8 fb69 	bl	8000224 <strlen>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b14      	cmp	r3, #20
 8007b56:	d90e      	bls.n	8007b76 <takeWifiSSID+0x72>
            	lcd_print(1, 1, ssidExceedErrorText);
 8007b58:	4a97      	ldr	r2, [pc, #604]	@ (8007db8 <takeWifiSSID+0x2b4>)
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f000 fe21 	bl	80087a4 <lcd_print>
            	lcd_print(2, 1, ssidExceedError2Text);
 8007b62:	4a96      	ldr	r2, [pc, #600]	@ (8007dbc <takeWifiSSID+0x2b8>)
 8007b64:	2101      	movs	r1, #1
 8007b66:	2002      	movs	r0, #2
 8007b68:	f000 fe1c 	bl	80087a4 <lcd_print>
                HAL_Delay(1250);
 8007b6c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007b70:	f001 fb72 	bl	8009258 <HAL_Delay>

                goto mainSSIDSection;
 8007b74:	e7c9      	b.n	8007b0a <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b76:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	236e      	movs	r3, #110	@ 0x6e
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	4b8f      	ldr	r3, [pc, #572]	@ (8007dc0 <takeWifiSSID+0x2bc>)
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	236e      	movs	r3, #110	@ 0x6e
 8007b86:	2200      	movs	r2, #0
 8007b88:	21a0      	movs	r1, #160	@ 0xa0
 8007b8a:	488e      	ldr	r0, [pc, #568]	@ (8007dc4 <takeWifiSSID+0x2c0>)
 8007b8c:	f002 fbee 	bl	800a36c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007b90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b94:	f001 fb60 	bl	8009258 <HAL_Delay>

            	break;
 8007b98:	e137      	b.n	8007e0a <takeWifiSSID+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	4885      	ldr	r0, [pc, #532]	@ (8007db4 <takeWifiSSID+0x2b0>)
 8007b9e:	f002 f92b 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d14d      	bne.n	8007c44 <takeWifiSSID+0x140>
        	if(cursorPosition > 80) {
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b50      	cmp	r3, #80	@ 0x50
 8007bac:	dd01      	ble.n	8007bb2 <takeWifiSSID+0xae>
        		cursorPosition = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d13f      	bne.n	8007c38 <takeWifiSSID+0x134>
            	if(page == 1) {
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d109      	bne.n	8007bd2 <takeWifiSSID+0xce>
            		cursorPosition = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
            		page++;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007bc8:	2102      	movs	r1, #2
 8007bca:	2002      	movs	r0, #2
 8007bcc:	f7f9 f88c 	bl	8000ce8 <printTemplate>
 8007bd0:	e035      	b.n	8007c3e <takeWifiSSID+0x13a>
            	} else if(page == 2) {
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d109      	bne.n	8007bec <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
            		page++;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3301      	adds	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007be2:	2103      	movs	r1, #3
 8007be4:	2002      	movs	r0, #2
 8007be6:	f7f9 f87f 	bl	8000ce8 <printTemplate>
 8007bea:	e028      	b.n	8007c3e <takeWifiSSID+0x13a>
            	} else if(page == 3) {
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d109      	bne.n	8007c06 <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
            		page++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007bfc:	2104      	movs	r1, #4
 8007bfe:	2002      	movs	r0, #2
 8007c00:	f7f9 f872 	bl	8000ce8 <printTemplate>
 8007c04:	e01b      	b.n	8007c3e <takeWifiSSID+0x13a>
            	} else if(page == 4) {
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d109      	bne.n	8007c20 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3301      	adds	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007c16:	2105      	movs	r1, #5
 8007c18:	2002      	movs	r0, #2
 8007c1a:	f7f9 f865 	bl	8000ce8 <printTemplate>
 8007c1e:	e00e      	b.n	8007c3e <takeWifiSSID+0x13a>
            	} else if(page == 5) {
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d10b      	bne.n	8007c3e <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 8007c26:	2301      	movs	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007c2e:	2101      	movs	r1, #1
 8007c30:	2002      	movs	r0, #2
 8007c32:	f7f9 f859 	bl	8000ce8 <printTemplate>
 8007c36:	e002      	b.n	8007c3e <takeWifiSSID+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007c3e:	2096      	movs	r0, #150	@ 0x96
 8007c40:	f001 fb0a 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007c44:	2108      	movs	r1, #8
 8007c46:	4860      	ldr	r0, [pc, #384]	@ (8007dc8 <takeWifiSSID+0x2c4>)
 8007c48:	f002 f8d6 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d149      	bne.n	8007ce6 <takeWifiSSID+0x1e2>
        	if(cursorPosition < 1) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dc01      	bgt.n	8007c5c <takeWifiSSID+0x158>
        		cursorPosition = 80;
 8007c58:	2350      	movs	r3, #80	@ 0x50
 8007c5a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d13b      	bne.n	8007cda <takeWifiSSID+0x1d6>
            	if(page == 1) {
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d108      	bne.n	8007c7a <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8007c68:	2310      	movs	r3, #16
 8007c6a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007c6c:	2305      	movs	r3, #5
 8007c6e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007c70:	2105      	movs	r1, #5
 8007c72:	2002      	movs	r0, #2
 8007c74:	f7f9 f838 	bl	8000ce8 <printTemplate>
 8007c78:	e032      	b.n	8007ce0 <takeWifiSSID+0x1dc>
            	} else if(page == 2) {
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d108      	bne.n	8007c92 <takeWifiSSID+0x18e>
            		cursorPosition = 16;
 8007c80:	2310      	movs	r3, #16
 8007c82:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007c84:	2301      	movs	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	2002      	movs	r0, #2
 8007c8c:	f7f9 f82c 	bl	8000ce8 <printTemplate>
 8007c90:	e026      	b.n	8007ce0 <takeWifiSSID+0x1dc>
            	} else if(page == 3) {
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d108      	bne.n	8007caa <takeWifiSSID+0x1a6>
            		cursorPosition = 16;
 8007c98:	2310      	movs	r3, #16
 8007c9a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	2002      	movs	r0, #2
 8007ca4:	f7f9 f820 	bl	8000ce8 <printTemplate>
 8007ca8:	e01a      	b.n	8007ce0 <takeWifiSSID+0x1dc>
            	} else if(page == 4) {
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d108      	bne.n	8007cc2 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007cb8:	2103      	movs	r1, #3
 8007cba:	2002      	movs	r0, #2
 8007cbc:	f7f9 f814 	bl	8000ce8 <printTemplate>
 8007cc0:	e00e      	b.n	8007ce0 <takeWifiSSID+0x1dc>
            	} else if(page == 5) {
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d10b      	bne.n	8007ce0 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 8007cc8:	2310      	movs	r3, #16
 8007cca:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007ccc:	2304      	movs	r3, #4
 8007cce:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f7f9 f808 	bl	8000ce8 <printTemplate>
 8007cd8:	e002      	b.n	8007ce0 <takeWifiSSID+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007ce0:	2096      	movs	r0, #150	@ 0x96
 8007ce2:	f001 fab9 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4832      	ldr	r0, [pc, #200]	@ (8007db4 <takeWifiSSID+0x2b0>)
 8007cea:	f002 f885 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d12f      	bne.n	8007d54 <takeWifiSSID+0x250>
            eepromData[eepromVal] = cursorPosition;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	b2d9      	uxtb	r1, r3
 8007cf8:	4a31      	ldr	r2, [pc, #196]	@ (8007dc0 <takeWifiSSID+0x2bc>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	460a      	mov	r2, r1
 8007d00:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007d02:	4a32      	ldr	r2, [pc, #200]	@ (8007dcc <takeWifiSSID+0x2c8>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	7819      	ldrb	r1, [r3, #0]
 8007d0a:	4a28      	ldr	r2, [pc, #160]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	460a      	mov	r2, r1
 8007d12:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	b2d9      	uxtb	r1, r3
 8007d18:	4a2c      	ldr	r2, [pc, #176]	@ (8007dcc <takeWifiSSID+0x2c8>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	2001      	movs	r0, #1
 8007d24:	f000 fd53 	bl	80087ce <lcd_print_char>

            writeLoc++;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3301      	adds	r3, #1
 8007d32:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3301      	adds	r3, #1
 8007d38:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007d3a:	4a21      	ldr	r2, [pc, #132]	@ (8007dc0 <takeWifiSSID+0x2bc>)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4413      	add	r3, r2
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007d44:	4a19      	ldr	r2, [pc, #100]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007d4e:	2096      	movs	r0, #150	@ 0x96
 8007d50:	f001 fa82 	bl	8009258 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007d54:	2104      	movs	r1, #4
 8007d56:	4817      	ldr	r0, [pc, #92]	@ (8007db4 <takeWifiSSID+0x2b0>)
 8007d58:	f002 f84e 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d14c      	bne.n	8007dfc <takeWifiSSID+0x2f8>
        	if(strlen(wifiSSID) >= 1) {
 8007d62:	4b12      	ldr	r3, [pc, #72]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d045      	beq.n	8007df6 <takeWifiSSID+0x2f2>
        		eepromData[eepromVal] = '\0';
 8007d6a:	4a15      	ldr	r2, [pc, #84]	@ (8007dc0 <takeWifiSSID+0x2bc>)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007d74:	4a0d      	ldr	r2, [pc, #52]	@ (8007dac <takeWifiSSID+0x2a8>)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b07      	cmp	r3, #7
 8007d82:	dd03      	ble.n	8007d8c <takeWifiSSID+0x288>
        			writeLoc--;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e004      	b.n	8007d96 <takeWifiSSID+0x292>
        		} else if(writeLoc < 7) {
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b06      	cmp	r3, #6
 8007d90:	dc01      	bgt.n	8007d96 <takeWifiSSID+0x292>
        			writeLoc = 7;
 8007d92:	2307      	movs	r3, #7
 8007d94:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dd19      	ble.n	8007dd0 <takeWifiSSID+0x2cc>
        			arrayPosition--;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	607b      	str	r3, [r7, #4]
 8007da8:	e01a      	b.n	8007de0 <takeWifiSSID+0x2dc>
 8007daa:	bf00      	nop
 8007dac:	2000104c 	.word	0x2000104c
 8007db0:	20000008 	.word	0x20000008
 8007db4:	40010800 	.word	0x40010800
 8007db8:	200017f0 	.word	0x200017f0
 8007dbc:	20001804 	.word	0x20001804
 8007dc0:	20000fc8 	.word	0x20000fc8
 8007dc4:	20001908 	.word	0x20001908
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da04      	bge.n	8007de0 <takeWifiSSID+0x2dc>
        			arrayPosition = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007dda:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <takeWifiSSID+0x310>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	3307      	adds	r3, #7
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	4619      	mov	r1, r3
 8007dea:	2001      	movs	r0, #1
 8007dec:	f000 fd10 	bl	8008810 <lcd_delete_char>
        		HAL_Delay(50);
 8007df0:	2032      	movs	r0, #50	@ 0x32
 8007df2:	f001 fa31 	bl	8009258 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007df6:	2096      	movs	r0, #150	@ 0x96
 8007df8:	f001 fa2e 	bl	8009258 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	4619      	mov	r1, r3
 8007e02:	2002      	movs	r0, #2
 8007e04:	f000 fcaf 	bl	8008766 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007e08:	e696      	b.n	8007b38 <takeWifiSSID+0x34>
    }
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000008 	.word	0x20000008

08007e18 <takeWifiPass>:

void takeWifiPass() {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f000 fd1e 	bl	8008860 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007e24:	2214      	movs	r2, #20
 8007e26:	2100      	movs	r1, #0
 8007e28:	48a5      	ldr	r0, [pc, #660]	@ (80080c0 <takeWifiPass+0x2a8>)
 8007e2a:	f005 f94d 	bl	800d0c8 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007e2e:	2301      	movs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007e32:	2307      	movs	r3, #7
 8007e34:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007e36:	2301      	movs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007e3e:	4ba1      	ldr	r3, [pc, #644]	@ (80080c4 <takeWifiPass+0x2ac>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007e44:	2101      	movs	r1, #1
 8007e46:	2003      	movs	r0, #3
 8007e48:	f7f8 ff4e 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	489e      	ldr	r0, [pc, #632]	@ (80080c8 <takeWifiPass+0x2b0>)
 8007e50:	f001 ffd2 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d129      	bne.n	8007eae <takeWifiPass+0x96>
            lcd_cursor(0);
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	f000 fd00 	bl	8008860 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007e60:	4897      	ldr	r0, [pc, #604]	@ (80080c0 <takeWifiPass+0x2a8>)
 8007e62:	f7f8 f9df 	bl	8000224 <strlen>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b14      	cmp	r3, #20
 8007e6a:	d90e      	bls.n	8007e8a <takeWifiPass+0x72>
            	lcd_print(1, 1, passExceedErrorText);
 8007e6c:	4a97      	ldr	r2, [pc, #604]	@ (80080cc <takeWifiPass+0x2b4>)
 8007e6e:	2101      	movs	r1, #1
 8007e70:	2001      	movs	r0, #1
 8007e72:	f000 fc97 	bl	80087a4 <lcd_print>
            	lcd_print(2, 1, passExceedError2Text);
 8007e76:	4a96      	ldr	r2, [pc, #600]	@ (80080d0 <takeWifiPass+0x2b8>)
 8007e78:	2101      	movs	r1, #1
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f000 fc92 	bl	80087a4 <lcd_print>
                HAL_Delay(1250);
 8007e80:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007e84:	f001 f9e8 	bl	8009258 <HAL_Delay>

                goto mainPassSection;
 8007e88:	e7c9      	b.n	8007e1e <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007e8a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	236e      	movs	r3, #110	@ 0x6e
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	4b8f      	ldr	r3, [pc, #572]	@ (80080d4 <takeWifiPass+0x2bc>)
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	236e      	movs	r3, #110	@ 0x6e
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	21a0      	movs	r1, #160	@ 0xa0
 8007e9e:	488e      	ldr	r0, [pc, #568]	@ (80080d8 <takeWifiPass+0x2c0>)
 8007ea0:	f002 fa64 	bl	800a36c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007ea8:	f001 f9d6 	bl	8009258 <HAL_Delay>

            	break;
 8007eac:	e137      	b.n	800811e <takeWifiPass+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4885      	ldr	r0, [pc, #532]	@ (80080c8 <takeWifiPass+0x2b0>)
 8007eb2:	f001 ffa1 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d14d      	bne.n	8007f58 <takeWifiPass+0x140>
        	if(cursorPosition > 80) {
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b50      	cmp	r3, #80	@ 0x50
 8007ec0:	dd01      	ble.n	8007ec6 <takeWifiPass+0xae>
        		cursorPosition = 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	d13f      	bne.n	8007f4c <takeWifiPass+0x134>
            	if(page == 1) {
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d109      	bne.n	8007ee6 <takeWifiPass+0xce>
            		cursorPosition = 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
            		page++;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007edc:	2102      	movs	r1, #2
 8007ede:	2003      	movs	r0, #3
 8007ee0:	f7f8 ff02 	bl	8000ce8 <printTemplate>
 8007ee4:	e035      	b.n	8007f52 <takeWifiPass+0x13a>
            	} else if(page == 2) {
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d109      	bne.n	8007f00 <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8007eec:	2301      	movs	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
            		page++;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007ef6:	2103      	movs	r1, #3
 8007ef8:	2003      	movs	r0, #3
 8007efa:	f7f8 fef5 	bl	8000ce8 <printTemplate>
 8007efe:	e028      	b.n	8007f52 <takeWifiPass+0x13a>
            	} else if(page == 3) {
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d109      	bne.n	8007f1a <takeWifiPass+0x102>
            		cursorPosition = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007f10:	2104      	movs	r1, #4
 8007f12:	2003      	movs	r0, #3
 8007f14:	f7f8 fee8 	bl	8000ce8 <printTemplate>
 8007f18:	e01b      	b.n	8007f52 <takeWifiPass+0x13a>
            	} else if(page == 4) {
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d109      	bne.n	8007f34 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3301      	adds	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007f2a:	2105      	movs	r1, #5
 8007f2c:	2003      	movs	r0, #3
 8007f2e:	f7f8 fedb 	bl	8000ce8 <printTemplate>
 8007f32:	e00e      	b.n	8007f52 <takeWifiPass+0x13a>
            	} else if(page == 5) {
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	d10b      	bne.n	8007f52 <takeWifiPass+0x13a>
            		cursorPosition = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007f42:	2101      	movs	r1, #1
 8007f44:	2003      	movs	r0, #3
 8007f46:	f7f8 fecf 	bl	8000ce8 <printTemplate>
 8007f4a:	e002      	b.n	8007f52 <takeWifiPass+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007f52:	2096      	movs	r0, #150	@ 0x96
 8007f54:	f001 f980 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007f58:	2108      	movs	r1, #8
 8007f5a:	4860      	ldr	r0, [pc, #384]	@ (80080dc <takeWifiPass+0x2c4>)
 8007f5c:	f001 ff4c 	bl	8009df8 <HAL_GPIO_ReadPin>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d149      	bne.n	8007ffa <takeWifiPass+0x1e2>
        	if(cursorPosition < 1) {
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dc01      	bgt.n	8007f70 <takeWifiPass+0x158>
        		cursorPosition = 80;
 8007f6c:	2350      	movs	r3, #80	@ 0x50
 8007f6e:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d13b      	bne.n	8007fee <takeWifiPass+0x1d6>
            	if(page == 1) {
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d108      	bne.n	8007f8e <takeWifiPass+0x176>
            		cursorPosition = 16;
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007f80:	2305      	movs	r3, #5
 8007f82:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007f84:	2105      	movs	r1, #5
 8007f86:	2003      	movs	r0, #3
 8007f88:	f7f8 feae 	bl	8000ce8 <printTemplate>
 8007f8c:	e032      	b.n	8007ff4 <takeWifiPass+0x1dc>
            	} else if(page == 2) {
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d108      	bne.n	8007fa6 <takeWifiPass+0x18e>
            		cursorPosition = 16;
 8007f94:	2310      	movs	r3, #16
 8007f96:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	2003      	movs	r0, #3
 8007fa0:	f7f8 fea2 	bl	8000ce8 <printTemplate>
 8007fa4:	e026      	b.n	8007ff4 <takeWifiPass+0x1dc>
            	} else if(page == 3) {
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d108      	bne.n	8007fbe <takeWifiPass+0x1a6>
            		cursorPosition = 16;
 8007fac:	2310      	movs	r3, #16
 8007fae:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	2003      	movs	r0, #3
 8007fb8:	f7f8 fe96 	bl	8000ce8 <printTemplate>
 8007fbc:	e01a      	b.n	8007ff4 <takeWifiPass+0x1dc>
            	} else if(page == 4) {
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d108      	bne.n	8007fd6 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007fcc:	2103      	movs	r1, #3
 8007fce:	2003      	movs	r0, #3
 8007fd0:	f7f8 fe8a 	bl	8000ce8 <printTemplate>
 8007fd4:	e00e      	b.n	8007ff4 <takeWifiPass+0x1dc>
            	} else if(page == 5) {
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d10b      	bne.n	8007ff4 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8007fdc:	2310      	movs	r3, #16
 8007fde:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007fe4:	2104      	movs	r1, #4
 8007fe6:	2003      	movs	r0, #3
 8007fe8:	f7f8 fe7e 	bl	8000ce8 <printTemplate>
 8007fec:	e002      	b.n	8007ff4 <takeWifiPass+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007ff4:	2096      	movs	r0, #150	@ 0x96
 8007ff6:	f001 f92f 	bl	8009258 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	4832      	ldr	r0, [pc, #200]	@ (80080c8 <takeWifiPass+0x2b0>)
 8007ffe:	f001 fefb 	bl	8009df8 <HAL_GPIO_ReadPin>
 8008002:	4603      	mov	r3, r0
 8008004:	2b01      	cmp	r3, #1
 8008006:	d12f      	bne.n	8008068 <takeWifiPass+0x250>
            eepromData[eepromVal] = cursorPosition;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	b2d9      	uxtb	r1, r3
 800800c:	4a31      	ldr	r2, [pc, #196]	@ (80080d4 <takeWifiPass+0x2bc>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	460a      	mov	r2, r1
 8008014:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008016:	4a32      	ldr	r2, [pc, #200]	@ (80080e0 <takeWifiPass+0x2c8>)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	7819      	ldrb	r1, [r3, #0]
 800801e:	4a28      	ldr	r2, [pc, #160]	@ (80080c0 <takeWifiPass+0x2a8>)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4413      	add	r3, r2
 8008024:	460a      	mov	r2, r1
 8008026:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	b2d9      	uxtb	r1, r3
 800802c:	4a2c      	ldr	r2, [pc, #176]	@ (80080e0 <takeWifiPass+0x2c8>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	2001      	movs	r0, #1
 8008038:	f000 fbc9 	bl	80087ce <lcd_print_char>

            writeLoc++;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	3301      	adds	r3, #1
 8008040:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3301      	adds	r3, #1
 8008046:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800804e:	4a21      	ldr	r2, [pc, #132]	@ (80080d4 <takeWifiPass+0x2bc>)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008058:	4a19      	ldr	r2, [pc, #100]	@ (80080c0 <takeWifiPass+0x2a8>)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008062:	2096      	movs	r0, #150	@ 0x96
 8008064:	f001 f8f8 	bl	8009258 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008068:	2104      	movs	r1, #4
 800806a:	4817      	ldr	r0, [pc, #92]	@ (80080c8 <takeWifiPass+0x2b0>)
 800806c:	f001 fec4 	bl	8009df8 <HAL_GPIO_ReadPin>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d14c      	bne.n	8008110 <takeWifiPass+0x2f8>
        	if(strlen(wifiPass) >= 1) {
 8008076:	4b12      	ldr	r3, [pc, #72]	@ (80080c0 <takeWifiPass+0x2a8>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d045      	beq.n	800810a <takeWifiPass+0x2f2>
        		eepromData[eepromVal] = '\0';
 800807e:	4a15      	ldr	r2, [pc, #84]	@ (80080d4 <takeWifiPass+0x2bc>)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008088:	4a0d      	ldr	r2, [pc, #52]	@ (80080c0 <takeWifiPass+0x2a8>)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b07      	cmp	r3, #7
 8008096:	dd03      	ble.n	80080a0 <takeWifiPass+0x288>
        			writeLoc--;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3b01      	subs	r3, #1
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e004      	b.n	80080aa <takeWifiPass+0x292>
        		} else if(writeLoc < 7) {
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	dc01      	bgt.n	80080aa <takeWifiPass+0x292>
        			writeLoc = 7;
 80080a6:	2307      	movs	r3, #7
 80080a8:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dd19      	ble.n	80080e4 <takeWifiPass+0x2cc>
        			arrayPosition--;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	e01a      	b.n	80080f4 <takeWifiPass+0x2dc>
 80080be:	bf00      	nop
 80080c0:	20001060 	.word	0x20001060
 80080c4:	2000000c 	.word	0x2000000c
 80080c8:	40010800 	.word	0x40010800
 80080cc:	20001818 	.word	0x20001818
 80080d0:	2000182c 	.word	0x2000182c
 80080d4:	20000fc8 	.word	0x20000fc8
 80080d8:	20001908 	.word	0x20001908
 80080dc:	40011000 	.word	0x40011000
 80080e0:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da04      	bge.n	80080f4 <takeWifiPass+0x2dc>
        			arrayPosition = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80080ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008128 <takeWifiPass+0x310>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	3307      	adds	r3, #7
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	4619      	mov	r1, r3
 80080fe:	2001      	movs	r0, #1
 8008100:	f000 fb86 	bl	8008810 <lcd_delete_char>
        		HAL_Delay(50);
 8008104:	2032      	movs	r0, #50	@ 0x32
 8008106:	f001 f8a7 	bl	8009258 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800810a:	2096      	movs	r0, #150	@ 0x96
 800810c:	f001 f8a4 	bl	8009258 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	2002      	movs	r0, #2
 8008118:	f000 fb25 	bl	8008766 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800811c:	e696      	b.n	8007e4c <takeWifiPass+0x34>
    }
}
 800811e:	bf00      	nop
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	2000000c 	.word	0x2000000c

0800812c <mergeData>:

char* mergeData() {
 800812c:	b580      	push	{r7, lr}
 800812e:	b09c      	sub	sp, #112	@ 0x70
 8008130:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008132:	2300      	movs	r3, #0
 8008134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008136:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800813a:	2229      	movs	r2, #41	@ 0x29
 800813c:	2100      	movs	r1, #0
 800813e:	4618      	mov	r0, r3
 8008140:	f004 ffc2 	bl	800d0c8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008144:	4b65      	ldr	r3, [pc, #404]	@ (80082dc <mergeData+0x1b0>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	703b      	strb	r3, [r7, #0]
 800814a:	4b65      	ldr	r3, [pc, #404]	@ (80082e0 <mergeData+0x1b4>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	707b      	strb	r3, [r7, #1]
 8008150:	4b64      	ldr	r3, [pc, #400]	@ (80082e4 <mergeData+0x1b8>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	70bb      	strb	r3, [r7, #2]
 8008156:	4b64      	ldr	r3, [pc, #400]	@ (80082e8 <mergeData+0x1bc>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	70fb      	strb	r3, [r7, #3]
 800815c:	4b63      	ldr	r3, [pc, #396]	@ (80082ec <mergeData+0x1c0>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	713b      	strb	r3, [r7, #4]
 8008162:	4b63      	ldr	r3, [pc, #396]	@ (80082f0 <mergeData+0x1c4>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	717b      	strb	r3, [r7, #5]
 8008168:	4b62      	ldr	r3, [pc, #392]	@ (80082f4 <mergeData+0x1c8>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	71bb      	strb	r3, [r7, #6]
 800816e:	4b62      	ldr	r3, [pc, #392]	@ (80082f8 <mergeData+0x1cc>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
 8008174:	4b61      	ldr	r3, [pc, #388]	@ (80082fc <mergeData+0x1d0>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	723b      	strb	r3, [r7, #8]
 800817a:	4b61      	ldr	r3, [pc, #388]	@ (8008300 <mergeData+0x1d4>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	727b      	strb	r3, [r7, #9]
 8008180:	4b60      	ldr	r3, [pc, #384]	@ (8008304 <mergeData+0x1d8>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	72bb      	strb	r3, [r7, #10]
 8008186:	4b60      	ldr	r3, [pc, #384]	@ (8008308 <mergeData+0x1dc>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	72fb      	strb	r3, [r7, #11]
 800818c:	4b5f      	ldr	r3, [pc, #380]	@ (800830c <mergeData+0x1e0>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	733b      	strb	r3, [r7, #12]
 8008192:	4b5f      	ldr	r3, [pc, #380]	@ (8008310 <mergeData+0x1e4>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	737b      	strb	r3, [r7, #13]
 8008198:	4b5e      	ldr	r3, [pc, #376]	@ (8008314 <mergeData+0x1e8>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	73bb      	strb	r3, [r7, #14]
 800819e:	4b5e      	ldr	r3, [pc, #376]	@ (8008318 <mergeData+0x1ec>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	4b5d      	ldr	r3, [pc, #372]	@ (800831c <mergeData+0x1f0>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	743b      	strb	r3, [r7, #16]
 80081aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008320 <mergeData+0x1f4>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	747b      	strb	r3, [r7, #17]
 80081b0:	4b5c      	ldr	r3, [pc, #368]	@ (8008324 <mergeData+0x1f8>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	74bb      	strb	r3, [r7, #18]
 80081b6:	4b5c      	ldr	r3, [pc, #368]	@ (8008328 <mergeData+0x1fc>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	74fb      	strb	r3, [r7, #19]
 80081bc:	4b5b      	ldr	r3, [pc, #364]	@ (800832c <mergeData+0x200>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	753b      	strb	r3, [r7, #20]
 80081c2:	4b5b      	ldr	r3, [pc, #364]	@ (8008330 <mergeData+0x204>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	757b      	strb	r3, [r7, #21]
 80081c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008334 <mergeData+0x208>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	75bb      	strb	r3, [r7, #22]
 80081ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008338 <mergeData+0x20c>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	75fb      	strb	r3, [r7, #23]
 80081d4:	4b59      	ldr	r3, [pc, #356]	@ (800833c <mergeData+0x210>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	763b      	strb	r3, [r7, #24]
 80081da:	4b59      	ldr	r3, [pc, #356]	@ (8008340 <mergeData+0x214>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	767b      	strb	r3, [r7, #25]
 80081e0:	4b58      	ldr	r3, [pc, #352]	@ (8008344 <mergeData+0x218>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	76bb      	strb	r3, [r7, #26]
 80081e6:	4b58      	ldr	r3, [pc, #352]	@ (8008348 <mergeData+0x21c>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	76fb      	strb	r3, [r7, #27]
 80081ec:	4b57      	ldr	r3, [pc, #348]	@ (800834c <mergeData+0x220>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	773b      	strb	r3, [r7, #28]
 80081f2:	4b57      	ldr	r3, [pc, #348]	@ (8008350 <mergeData+0x224>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	777b      	strb	r3, [r7, #29]
 80081f8:	4b56      	ldr	r3, [pc, #344]	@ (8008354 <mergeData+0x228>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	77bb      	strb	r3, [r7, #30]
 80081fe:	4b56      	ldr	r3, [pc, #344]	@ (8008358 <mergeData+0x22c>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	4b55      	ldr	r3, [pc, #340]	@ (800835c <mergeData+0x230>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800820c:	4b54      	ldr	r3, [pc, #336]	@ (8008360 <mergeData+0x234>)
 800820e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008212:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 8008216:	4b52      	ldr	r3, [pc, #328]	@ (8008360 <mergeData+0x234>)
 8008218:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 800821c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 8008220:	4b4f      	ldr	r3, [pc, #316]	@ (8008360 <mergeData+0x234>)
 8008222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 800822a:	4b4d      	ldr	r3, [pc, #308]	@ (8008360 <mergeData+0x234>)
 800822c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008230:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8008234:	4b4a      	ldr	r3, [pc, #296]	@ (8008360 <mergeData+0x234>)
 8008236:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 800823a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 800823e:	4b48      	ldr	r3, [pc, #288]	@ (8008360 <mergeData+0x234>)
 8008240:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008244:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 8008248:	4b45      	ldr	r3, [pc, #276]	@ (8008360 <mergeData+0x234>)
 800824a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 800824e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 8008252:	4b43      	ldr	r3, [pc, #268]	@ (8008360 <mergeData+0x234>)
 8008254:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008258:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 800825c:	4b40      	ldr	r3, [pc, #256]	@ (8008360 <mergeData+0x234>)
 800825e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008262:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 8008266:	4b3e      	ldr	r3, [pc, #248]	@ (8008360 <mergeData+0x234>)
 8008268:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 800826c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008270:	2306      	movs	r3, #6
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008276:	2300      	movs	r3, #0
 8008278:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800827a:	e015      	b.n	80082a8 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 800827c:	463a      	mov	r2, r7
 800827e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008280:	4413      	add	r3, r2
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800828a:	4936      	ldr	r1, [pc, #216]	@ (8008364 <mergeData+0x238>)
 800828c:	4618      	mov	r0, r3
 800828e:	f004 fe97 	bl	800cfc0 <siprintf>
	    strcat(combinedString, temp);
 8008292:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008296:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f004 fef1 	bl	800d084 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80082a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082a4:	3301      	adds	r3, #1
 80082a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80082ac:	d9e6      	bls.n	800827c <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80082ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f7 ffb6 	bl	8000224 <strlen>
 80082b8:	4603      	mov	r3, r0
 80082ba:	3301      	adds	r3, #1
 80082bc:	4618      	mov	r0, r3
 80082be:	f004 fdc9 	bl	800ce54 <malloc>
 80082c2:	4603      	mov	r3, r0
 80082c4:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 80082c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082ca:	4619      	mov	r1, r3
 80082cc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80082ce:	f004 ff3f 	bl	800d150 <strcpy>
	return result;
 80082d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3770      	adds	r7, #112	@ 0x70
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200010af 	.word	0x200010af
 80082e0:	200010a1 	.word	0x200010a1
 80082e4:	200010a4 	.word	0x200010a4
 80082e8:	200010a5 	.word	0x200010a5
 80082ec:	200010a6 	.word	0x200010a6
 80082f0:	200010ad 	.word	0x200010ad
 80082f4:	200010a7 	.word	0x200010a7
 80082f8:	200010a8 	.word	0x200010a8
 80082fc:	200010ac 	.word	0x200010ac
 8008300:	200010a9 	.word	0x200010a9
 8008304:	200010b9 	.word	0x200010b9
 8008308:	200010aa 	.word	0x200010aa
 800830c:	200010ba 	.word	0x200010ba
 8008310:	200010ab 	.word	0x200010ab
 8008314:	200010bb 	.word	0x200010bb
 8008318:	200010ae 	.word	0x200010ae
 800831c:	200010b0 	.word	0x200010b0
 8008320:	200010b1 	.word	0x200010b1
 8008324:	200010b2 	.word	0x200010b2
 8008328:	200010b3 	.word	0x200010b3
 800832c:	200010b4 	.word	0x200010b4
 8008330:	200010b5 	.word	0x200010b5
 8008334:	200010b6 	.word	0x200010b6
 8008338:	200010b7 	.word	0x200010b7
 800833c:	200010b8 	.word	0x200010b8
 8008340:	200010bc 	.word	0x200010bc
 8008344:	200010be 	.word	0x200010be
 8008348:	2000109d 	.word	0x2000109d
 800834c:	2000109e 	.word	0x2000109e
 8008350:	20000000 	.word	0x20000000
 8008354:	20000001 	.word	0x20000001
 8008358:	2000109f 	.word	0x2000109f
 800835c:	200010c1 	.word	0x200010c1
 8008360:	20000fc8 	.word	0x20000fc8
 8008364:	0800db58 	.word	0x0800db58

08008368 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 800836e:	4a13      	ldr	r2, [pc, #76]	@ (80083bc <convertAndSendData+0x54>)
 8008370:	2101      	movs	r1, #1
 8008372:	2001      	movs	r0, #1
 8008374:	f000 fa16 	bl	80087a4 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <convertAndSendData+0x58>)
 800837a:	2101      	movs	r1, #1
 800837c:	2002      	movs	r0, #2
 800837e:	f000 fa11 	bl	80087a4 <lcd_print>

	for(int i=0; i<2; i++) {
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
 8008386:	e00c      	b.n	80083a2 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008388:	f7ff fed0 	bl	800812c <mergeData>
 800838c:	4603      	mov	r3, r0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4b0c      	ldr	r3, [pc, #48]	@ (80083c4 <convertAndSendData+0x5c>)
 8008392:	4a0d      	ldr	r2, [pc, #52]	@ (80083c8 <convertAndSendData+0x60>)
 8008394:	490d      	ldr	r1, [pc, #52]	@ (80083cc <convertAndSendData+0x64>)
 8008396:	480e      	ldr	r0, [pc, #56]	@ (80083d0 <convertAndSendData+0x68>)
 8008398:	f7f8 fa54 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3301      	adds	r3, #1
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	ddef      	ble.n	8008388 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 80083a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80083ac:	f000 ff54 	bl	8009258 <HAL_Delay>
	lcd_clear();
 80083b0:	f000 fa24 	bl	80087fc <lcd_clear>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20001778 	.word	0x20001778
 80083c0:	2000178c 	.word	0x2000178c
 80083c4:	20001060 	.word	0x20001060
 80083c8:	2000104c 	.word	0x2000104c
 80083cc:	20001040 	.word	0x20001040
 80083d0:	200019a4 	.word	0x200019a4

080083d4 <iotSetup>:

void iotSetup() {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80083d8:	4b10      	ldr	r3, [pc, #64]	@ (800841c <iotSetup+0x48>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d016      	beq.n	800840e <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 80083e0:	f000 f822 	bl	8008428 <checkEEPROM4ID>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d001      	beq.n	80083ee <iotSetup+0x1a>
			takeMachineID();
 80083ea:	f7ff fa09 	bl	8007800 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80083ee:	480c      	ldr	r0, [pc, #48]	@ (8008420 <iotSetup+0x4c>)
 80083f0:	f7f7 ff18 	bl	8000224 <strlen>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d801      	bhi.n	80083fe <iotSetup+0x2a>
			takeWifiSSID();
 80083fa:	f7ff fb83 	bl	8007b04 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80083fe:	4809      	ldr	r0, [pc, #36]	@ (8008424 <iotSetup+0x50>)
 8008400:	f7f7 ff10 	bl	8000224 <strlen>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d801      	bhi.n	800840e <iotSetup+0x3a>
			takeWifiPass();
 800840a:	f7ff fd05 	bl	8007e18 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 800840e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008412:	f000 ff21 	bl	8009258 <HAL_Delay>
	//convertAndSendData();
}
 8008416:	bf00      	nop
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200010bf 	.word	0x200010bf
 8008420:	2000104c 	.word	0x2000104c
 8008424:	20001060 	.word	0x20001060

08008428 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800842e:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <checkEEPROM4ID+0x44>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008434:	2301      	movs	r3, #1
 8008436:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008438:	2300      	movs	r3, #0
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	e00d      	b.n	800845a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800843e:	4a0c      	ldr	r2, [pc, #48]	@ (8008470 <checkEEPROM4ID+0x48>)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <checkEEPROM4ID+0x26>
			returnVal = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3301      	adds	r3, #1
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b0b      	cmp	r3, #11
 800845e:	ddee      	ble.n	800843e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008460:	68bb      	ldr	r3, [r7, #8]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	20000004 	.word	0x20000004
 8008470:	20000fc8 	.word	0x20000fc8

08008474 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af02      	add	r7, sp, #8
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	f023 030f 	bic.w	r3, r3, #15
 8008484:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800848c:	7b7b      	ldrb	r3, [r7, #13]
 800848e:	f043 030c 	orr.w	r3, r3, #12
 8008492:	b2db      	uxtb	r3, r3
 8008494:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008496:	7b7b      	ldrb	r3, [r7, #13]
 8008498:	f043 0308 	orr.w	r3, r3, #8
 800849c:	b2db      	uxtb	r3, r3
 800849e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80084a0:	7b3b      	ldrb	r3, [r7, #12]
 80084a2:	f043 030c 	orr.w	r3, r3, #12
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80084aa:	7b3b      	ldrb	r3, [r7, #12]
 80084ac:	f043 0308 	orr.w	r3, r3, #8
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80084b4:	bf00      	nop
 80084b6:	4825      	ldr	r0, [pc, #148]	@ (800854c <lcd_send_cmd+0xd8>)
 80084b8:	f002 fac7 	bl	800aa4a <HAL_I2C_GetError>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d0f9      	beq.n	80084b6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80084c2:	bf00      	nop
 80084c4:	4821      	ldr	r0, [pc, #132]	@ (800854c <lcd_send_cmd+0xd8>)
 80084c6:	f002 fab3 	bl	800aa30 <HAL_I2C_GetState>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d1f9      	bne.n	80084c4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80084d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008550 <lcd_send_cmd+0xdc>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d116      	bne.n	8008506 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
 80084dc:	e00f      	b.n	80084fe <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3310      	adds	r3, #16
 80084e2:	443b      	add	r3, r7
 80084e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	f022 0208 	bic.w	r2, r2, #8
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	3310      	adds	r3, #16
 80084f2:	443b      	add	r3, r7
 80084f4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	3301      	adds	r3, #1
 80084fc:	73fb      	strb	r3, [r7, #15]
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d9ec      	bls.n	80084de <lcd_send_cmd+0x6a>
 8008504:	e015      	b.n	8008532 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]
 800850a:	e00f      	b.n	800852c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	3310      	adds	r3, #16
 8008510:	443b      	add	r3, r7
 8008512:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	3310      	adds	r3, #16
 8008520:	443b      	add	r3, r7
 8008522:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	3301      	adds	r3, #1
 800852a:	73bb      	strb	r3, [r7, #14]
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d9ec      	bls.n	800850c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008532:	f107 0208 	add.w	r2, r7, #8
 8008536:	2364      	movs	r3, #100	@ 0x64
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	2304      	movs	r3, #4
 800853c:	214e      	movs	r1, #78	@ 0x4e
 800853e:	4803      	ldr	r0, [pc, #12]	@ (800854c <lcd_send_cmd+0xd8>)
 8008540:	f001 fe16 	bl	800a170 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20001908 	.word	0x20001908
 8008550:	200018dd 	.word	0x200018dd

08008554 <lcd_send_data>:

void lcd_send_data (char data) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af02      	add	r7, sp, #8
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	f023 030f 	bic.w	r3, r3, #15
 8008564:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800856c:	7b7b      	ldrb	r3, [r7, #13]
 800856e:	f043 030d 	orr.w	r3, r3, #13
 8008572:	b2db      	uxtb	r3, r3
 8008574:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008576:	7b7b      	ldrb	r3, [r7, #13]
 8008578:	f043 0309 	orr.w	r3, r3, #9
 800857c:	b2db      	uxtb	r3, r3
 800857e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008580:	7b3b      	ldrb	r3, [r7, #12]
 8008582:	f043 030d 	orr.w	r3, r3, #13
 8008586:	b2db      	uxtb	r3, r3
 8008588:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800858a:	7b3b      	ldrb	r3, [r7, #12]
 800858c:	f043 0309 	orr.w	r3, r3, #9
 8008590:	b2db      	uxtb	r3, r3
 8008592:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008594:	bf00      	nop
 8008596:	4825      	ldr	r0, [pc, #148]	@ (800862c <lcd_send_data+0xd8>)
 8008598:	f002 fa57 	bl	800aa4a <HAL_I2C_GetError>
 800859c:	4603      	mov	r3, r0
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d0f9      	beq.n	8008596 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80085a2:	bf00      	nop
 80085a4:	4821      	ldr	r0, [pc, #132]	@ (800862c <lcd_send_data+0xd8>)
 80085a6:	f002 fa43 	bl	800aa30 <HAL_I2C_GetState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d1f9      	bne.n	80085a4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80085b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008630 <lcd_send_data+0xdc>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d116      	bne.n	80085e6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e00f      	b.n	80085de <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	3310      	adds	r3, #16
 80085c2:	443b      	add	r3, r7
 80085c4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	f022 0208 	bic.w	r2, r2, #8
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	3310      	adds	r3, #16
 80085d2:	443b      	add	r3, r7
 80085d4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	3301      	adds	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d9ec      	bls.n	80085be <lcd_send_data+0x6a>
 80085e4:	e015      	b.n	8008612 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80085e6:	2300      	movs	r3, #0
 80085e8:	73bb      	strb	r3, [r7, #14]
 80085ea:	e00f      	b.n	800860c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	3310      	adds	r3, #16
 80085f0:	443b      	add	r3, r7
 80085f2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	f042 0208 	orr.w	r2, r2, #8
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	3310      	adds	r3, #16
 8008600:	443b      	add	r3, r7
 8008602:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	3301      	adds	r3, #1
 800860a:	73bb      	strb	r3, [r7, #14]
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d9ec      	bls.n	80085ec <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008612:	f107 0208 	add.w	r2, r7, #8
 8008616:	2364      	movs	r3, #100	@ 0x64
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	2304      	movs	r3, #4
 800861c:	214e      	movs	r1, #78	@ 0x4e
 800861e:	4803      	ldr	r0, [pc, #12]	@ (800862c <lcd_send_data+0xd8>)
 8008620:	f001 fda6 	bl	800a170 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20001908 	.word	0x20001908
 8008630:	200018dd 	.word	0x200018dd

08008634 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800863c:	e006      	b.n	800864c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff ff84 	bl	8008554 <lcd_send_data>
	while (*str) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f4      	bne.n	800863e <lcd_send_string+0xa>
	}
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af02      	add	r7, sp, #8
 8008666:	4603      	mov	r3, r0
 8008668:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	f023 030f 	bic.w	r3, r3, #15
 8008670:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008678:	7b7b      	ldrb	r3, [r7, #13]
 800867a:	f043 030d 	orr.w	r3, r3, #13
 800867e:	b2db      	uxtb	r3, r3
 8008680:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008682:	7b7b      	ldrb	r3, [r7, #13]
 8008684:	f043 0309 	orr.w	r3, r3, #9
 8008688:	b2db      	uxtb	r3, r3
 800868a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800868c:	7b3b      	ldrb	r3, [r7, #12]
 800868e:	f043 030d 	orr.w	r3, r3, #13
 8008692:	b2db      	uxtb	r3, r3
 8008694:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008696:	7b3b      	ldrb	r3, [r7, #12]
 8008698:	f043 0309 	orr.w	r3, r3, #9
 800869c:	b2db      	uxtb	r3, r3
 800869e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086a0:	bf00      	nop
 80086a2:	4825      	ldr	r0, [pc, #148]	@ (8008738 <lcd_send_char+0xd8>)
 80086a4:	f002 f9d1 	bl	800aa4a <HAL_I2C_GetError>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d0f9      	beq.n	80086a2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086ae:	bf00      	nop
 80086b0:	4821      	ldr	r0, [pc, #132]	@ (8008738 <lcd_send_char+0xd8>)
 80086b2:	f002 f9bd 	bl	800aa30 <HAL_I2C_GetState>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d1f9      	bne.n	80086b0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80086bc:	4b1f      	ldr	r3, [pc, #124]	@ (800873c <lcd_send_char+0xdc>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d116      	bne.n	80086f2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	e00f      	b.n	80086ea <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	3310      	adds	r3, #16
 80086ce:	443b      	add	r3, r7
 80086d0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	f022 0208 	bic.w	r2, r2, #8
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	3310      	adds	r3, #16
 80086de:	443b      	add	r3, r7
 80086e0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	3301      	adds	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d9ec      	bls.n	80086ca <lcd_send_char+0x6a>
 80086f0:	e015      	b.n	800871e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]
 80086f6:	e00f      	b.n	8008718 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	3310      	adds	r3, #16
 80086fc:	443b      	add	r3, r7
 80086fe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	f042 0208 	orr.w	r2, r2, #8
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	3310      	adds	r3, #16
 800870c:	443b      	add	r3, r7
 800870e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	3301      	adds	r3, #1
 8008716:	73bb      	strb	r3, [r7, #14]
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d9ec      	bls.n	80086f8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	2364      	movs	r3, #100	@ 0x64
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2304      	movs	r3, #4
 8008728:	214e      	movs	r1, #78	@ 0x4e
 800872a:	4803      	ldr	r0, [pc, #12]	@ (8008738 <lcd_send_char+0xd8>)
 800872c:	f001 fd20 	bl	800a170 <HAL_I2C_Master_Transmit>
}
 8008730:	bf00      	nop
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20001908 	.word	0x20001908
 800873c:	200018dd 	.word	0x200018dd

08008740 <lcd_init>:

void lcd_init (void) {
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008744:	2002      	movs	r0, #2
 8008746:	f7ff fe95 	bl	8008474 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800874a:	2028      	movs	r0, #40	@ 0x28
 800874c:	f7ff fe92 	bl	8008474 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008750:	200c      	movs	r0, #12
 8008752:	f7ff fe8f 	bl	8008474 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008756:	2080      	movs	r0, #128	@ 0x80
 8008758:	f7ff fe8c 	bl	8008474 <lcd_send_cmd>
	lcd_backlight(1);
 800875c:	2001      	movs	r0, #1
 800875e:	f000 f86d 	bl	800883c <lcd_backlight>
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}

08008766 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	4603      	mov	r3, r0
 800876e:	460a      	mov	r2, r1
 8008770:	71fb      	strb	r3, [r7, #7]
 8008772:	4613      	mov	r3, r2
 8008774:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d106      	bne.n	800878a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800877c:	79bb      	ldrb	r3, [r7, #6]
 800877e:	337f      	adds	r3, #127	@ 0x7f
 8008780:	b2db      	uxtb	r3, r3
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fe76 	bl	8008474 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008788:	e008      	b.n	800879c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d105      	bne.n	800879c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008790:	79bb      	ldrb	r3, [r7, #6]
 8008792:	3b41      	subs	r3, #65	@ 0x41
 8008794:	b2db      	uxtb	r3, r3
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fe6c 	bl	8008474 <lcd_send_cmd>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	603a      	str	r2, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
 80087b0:	460b      	mov	r3, r1
 80087b2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80087b4:	79ba      	ldrb	r2, [r7, #6]
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff ffd3 	bl	8008766 <lcd_gotoxy>
	lcd_send_string(str);
 80087c0:	6838      	ldr	r0, [r7, #0]
 80087c2:	f7ff ff37 	bl	8008634 <lcd_send_string>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	4603      	mov	r3, r0
 80087d6:	71fb      	strb	r3, [r7, #7]
 80087d8:	460b      	mov	r3, r1
 80087da:	71bb      	strb	r3, [r7, #6]
 80087dc:	4613      	mov	r3, r2
 80087de:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80087e0:	79ba      	ldrb	r2, [r7, #6]
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff ffbd 	bl	8008766 <lcd_gotoxy>
    lcd_send_char(ch);
 80087ec:	797b      	ldrb	r3, [r7, #5]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff ff36 	bl	8008660 <lcd_send_char>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <lcd_clear>:

void lcd_clear(void) {
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008800:	2001      	movs	r0, #1
 8008802:	f7ff fe37 	bl	8008474 <lcd_send_cmd>
    HAL_Delay(2);
 8008806:	2002      	movs	r0, #2
 8008808:	f000 fd26 	bl	8009258 <HAL_Delay>
}
 800880c:	bf00      	nop
 800880e:	bd80      	pop	{r7, pc}

08008810 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	460a      	mov	r2, r1
 800881a:	71fb      	strb	r3, [r7, #7]
 800881c:	4613      	mov	r3, r2
 800881e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008820:	79ba      	ldrb	r2, [r7, #6]
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff ff9d 	bl	8008766 <lcd_gotoxy>

    lcd_send_char(' ');
 800882c:	2020      	movs	r0, #32
 800882e:	f7ff ff17 	bl	8008660 <lcd_send_char>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008846:	4a05      	ldr	r2, [pc, #20]	@ (800885c <lcd_backlight+0x20>)
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800884c:	2000      	movs	r0, #0
 800884e:	f7ff fe11 	bl	8008474 <lcd_send_cmd>
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200018dd 	.word	0x200018dd

08008860 <lcd_cursor>:

void lcd_cursor(int state) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d106      	bne.n	800887c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800886e:	200e      	movs	r0, #14
 8008870:	f7ff fe00 	bl	8008474 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008874:	200f      	movs	r0, #15
 8008876:	f7ff fdfd 	bl	8008474 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800887a:	e002      	b.n	8008882 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800887c:	200c      	movs	r0, #12
 800887e:	f7ff fdf9 	bl	8008474 <lcd_send_cmd>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008894:	4b04      	ldr	r3, [pc, #16]	@ (80088a8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3301      	adds	r3, #1
 800889a:	4a03      	ldr	r2, [pc, #12]	@ (80088a8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800889c:	6013      	str	r3, [r2, #0]
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr
 80088a8:	20001078 	.word	0x20001078

080088ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088b0:	f000 fc70 	bl	8009194 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80088b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80088b8:	f000 fcce 	bl	8009258 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088bc:	f000 f89c 	bl	80089f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088c0:	f000 f9be 	bl	8008c40 <MX_GPIO_Init>
  MX_CAN_Init();
 80088c4:	f000 f8de 	bl	8008a84 <MX_CAN_Init>
  MX_I2C1_Init();
 80088c8:	f000 f910 	bl	8008aec <MX_I2C1_Init>
  MX_TIM1_Init();
 80088cc:	f000 f93c 	bl	8008b48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80088d0:	f000 f98c 	bl	8008bec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80088d4:	2201      	movs	r2, #1
 80088d6:	2140      	movs	r1, #64	@ 0x40
 80088d8:	483e      	ldr	r0, [pc, #248]	@ (80089d4 <main+0x128>)
 80088da:	f001 faa4 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80088de:	2201      	movs	r2, #1
 80088e0:	2180      	movs	r1, #128	@ 0x80
 80088e2:	483c      	ldr	r0, [pc, #240]	@ (80089d4 <main+0x128>)
 80088e4:	f001 fa9f 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80088e8:	200a      	movs	r0, #10
 80088ea:	f000 fcb5 	bl	8009258 <HAL_Delay>
  lcd_init();
 80088ee:	f7ff ff27 	bl	8008740 <lcd_init>
  HAL_Delay(10);
 80088f2:	200a      	movs	r0, #10
 80088f4:	f000 fcb0 	bl	8009258 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80088f8:	4837      	ldr	r0, [pc, #220]	@ (80089d8 <main+0x12c>)
 80088fa:	f003 f947 	bl	800bb8c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80088fe:	bf00      	nop
 8008900:	4836      	ldr	r0, [pc, #216]	@ (80089dc <main+0x130>)
 8008902:	f002 f8a2 	bl	800aa4a <HAL_I2C_GetError>
 8008906:	4603      	mov	r3, r0
 8008908:	2b04      	cmp	r3, #4
 800890a:	d0f9      	beq.n	8008900 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800890c:	bf00      	nop
 800890e:	4833      	ldr	r0, [pc, #204]	@ (80089dc <main+0x130>)
 8008910:	f002 f88e 	bl	800aa30 <HAL_I2C_GetState>
 8008914:	4603      	mov	r3, r0
 8008916:	2b20      	cmp	r3, #32
 8008918:	d1f9      	bne.n	800890e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800891a:	2200      	movs	r2, #0
 800891c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008920:	482c      	ldr	r0, [pc, #176]	@ (80089d4 <main+0x128>)
 8008922:	f001 fa80 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008926:	2200      	movs	r2, #0
 8008928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800892c:	4829      	ldr	r0, [pc, #164]	@ (80089d4 <main+0x128>)
 800892e:	f001 fa7a 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008932:	2200      	movs	r2, #0
 8008934:	2104      	movs	r1, #4
 8008936:	4827      	ldr	r0, [pc, #156]	@ (80089d4 <main+0x128>)
 8008938:	f001 fa75 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800893c:	2200      	movs	r2, #0
 800893e:	2102      	movs	r1, #2
 8008940:	4824      	ldr	r0, [pc, #144]	@ (80089d4 <main+0x128>)
 8008942:	f001 fa70 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008946:	2200      	movs	r2, #0
 8008948:	2101      	movs	r1, #1
 800894a:	4822      	ldr	r0, [pc, #136]	@ (80089d4 <main+0x128>)
 800894c:	f001 fa6b 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008950:	2200      	movs	r2, #0
 8008952:	2120      	movs	r1, #32
 8008954:	4822      	ldr	r0, [pc, #136]	@ (80089e0 <main+0x134>)
 8008956:	f001 fa66 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800895a:	2200      	movs	r2, #0
 800895c:	2110      	movs	r1, #16
 800895e:	4820      	ldr	r0, [pc, #128]	@ (80089e0 <main+0x134>)
 8008960:	f001 fa61 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008964:	2200      	movs	r2, #0
 8008966:	2180      	movs	r1, #128	@ 0x80
 8008968:	481e      	ldr	r0, [pc, #120]	@ (80089e4 <main+0x138>)
 800896a:	f001 fa5c 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800896e:	2200      	movs	r2, #0
 8008970:	2140      	movs	r1, #64	@ 0x40
 8008972:	481c      	ldr	r0, [pc, #112]	@ (80089e4 <main+0x138>)
 8008974:	f001 fa57 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008978:	2200      	movs	r2, #0
 800897a:	2120      	movs	r1, #32
 800897c:	4819      	ldr	r0, [pc, #100]	@ (80089e4 <main+0x138>)
 800897e:	f001 fa52 	bl	8009e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008982:	2200      	movs	r2, #0
 8008984:	2110      	movs	r1, #16
 8008986:	4817      	ldr	r0, [pc, #92]	@ (80089e4 <main+0x138>)
 8008988:	f001 fa4d 	bl	8009e26 <HAL_GPIO_WritePin>

  i2cTest();
 800898c:	f7f8 f8fe 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 8008990:	2064      	movs	r0, #100	@ 0x64
 8008992:	f000 fc61 	bl	8009258 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008996:	4a14      	ldr	r2, [pc, #80]	@ (80089e8 <main+0x13c>)
 8008998:	2101      	movs	r1, #1
 800899a:	2001      	movs	r0, #1
 800899c:	f7ff ff02 	bl	80087a4 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80089a0:	4a12      	ldr	r2, [pc, #72]	@ (80089ec <main+0x140>)
 80089a2:	2101      	movs	r1, #1
 80089a4:	2002      	movs	r0, #2
 80089a6:	f7ff fefd 	bl	80087a4 <lcd_print>
  HAL_Delay(1000);
 80089aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089ae:	f000 fc53 	bl	8009258 <HAL_Delay>
  lcd_clear();
 80089b2:	f7ff ff23 	bl	80087fc <lcd_clear>

  eepromKontrol();
 80089b6:	f7f7 fc3d 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80089ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089be:	f000 fc4b 	bl	8009258 <HAL_Delay>

  backLightTimer = millis;
 80089c2:	4b0b      	ldr	r3, [pc, #44]	@ (80089f0 <main+0x144>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a0b      	ldr	r2, [pc, #44]	@ (80089f4 <main+0x148>)
 80089c8:	6013      	str	r3, [r2, #0]

  iotSetup();
 80089ca:	f7ff fd03 	bl	80083d4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80089ce:	f7fd f923 	bl	8005c18 <mainLoop>
 80089d2:	e7fc      	b.n	80089ce <main+0x122>
 80089d4:	40010c00 	.word	0x40010c00
 80089d8:	2000195c 	.word	0x2000195c
 80089dc:	20001908 	.word	0x20001908
 80089e0:	40011000 	.word	0x40011000
 80089e4:	40010800 	.word	0x40010800
 80089e8:	200000a0 	.word	0x200000a0
 80089ec:	200000b4 	.word	0x200000b4
 80089f0:	20001078 	.word	0x20001078
 80089f4:	20001094 	.word	0x20001094

080089f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b090      	sub	sp, #64	@ 0x40
 80089fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089fe:	f107 0318 	add.w	r3, r7, #24
 8008a02:	2228      	movs	r2, #40	@ 0x28
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f004 fb5e 	bl	800d0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	605a      	str	r2, [r3, #4]
 8008a14:	609a      	str	r2, [r3, #8]
 8008a16:	60da      	str	r2, [r3, #12]
 8008a18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008a24:	2300      	movs	r3, #0
 8008a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008a36:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a3c:	f107 0318 	add.w	r3, r7, #24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f002 fc43 	bl	800b2cc <HAL_RCC_OscConfig>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008a4c:	f000 f9a2 	bl	8008d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a50:	230f      	movs	r3, #15
 8008a52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a54:	2302      	movs	r3, #2
 8008a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	2102      	movs	r1, #2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 feb0 	bl	800b7d0 <HAL_RCC_ClockConfig>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008a76:	f000 f98d 	bl	8008d94 <Error_Handler>
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3740      	adds	r7, #64	@ 0x40
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008a88:	4b16      	ldr	r3, [pc, #88]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008a8a:	4a17      	ldr	r2, [pc, #92]	@ (8008ae8 <MX_CAN_Init+0x64>)
 8008a8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008a8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008a90:	2210      	movs	r2, #16
 8008a92:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008a94:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008a9a:	4b12      	ldr	r3, [pc, #72]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008aa0:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008aac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008abe:	4b09      	ldr	r3, [pc, #36]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008ac4:	4b07      	ldr	r3, [pc, #28]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008aca:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008ad0:	4804      	ldr	r0, [pc, #16]	@ (8008ae4 <MX_CAN_Init+0x60>)
 8008ad2:	f000 fbe5 	bl	80092a0 <HAL_CAN_Init>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008adc:	f000 f95a 	bl	8008d94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008ae0:	bf00      	nop
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200018e0 	.word	0x200018e0
 8008ae8:	40006400 	.word	0x40006400

08008aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008af0:	4b12      	ldr	r3, [pc, #72]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008af2:	4a13      	ldr	r2, [pc, #76]	@ (8008b40 <MX_I2C1_Init+0x54>)
 8008af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008af6:	4b11      	ldr	r3, [pc, #68]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008af8:	4a12      	ldr	r2, [pc, #72]	@ (8008b44 <MX_I2C1_Init+0x58>)
 8008afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008afc:	4b0f      	ldr	r3, [pc, #60]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008b02:	4b0e      	ldr	r3, [pc, #56]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b08:	4b0c      	ldr	r3, [pc, #48]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b16:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b22:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b28:	4804      	ldr	r0, [pc, #16]	@ (8008b3c <MX_I2C1_Init+0x50>)
 8008b2a:	f001 f9ad 	bl	8009e88 <HAL_I2C_Init>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b34:	f000 f92e 	bl	8008d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20001908 	.word	0x20001908
 8008b40:	40005400 	.word	0x40005400
 8008b44:	00061a80 	.word	0x00061a80

08008b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b4e:	f107 0308 	add.w	r3, r7, #8
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	605a      	str	r2, [r3, #4]
 8008b58:	609a      	str	r2, [r3, #8]
 8008b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008b64:	4b1f      	ldr	r3, [pc, #124]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b66:	4a20      	ldr	r2, [pc, #128]	@ (8008be8 <MX_TIM1_Init+0xa0>)
 8008b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b6c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008b78:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b7a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b80:	4b18      	ldr	r3, [pc, #96]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008b86:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b8c:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008b92:	4814      	ldr	r0, [pc, #80]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008b94:	f002 ffaa 	bl	800baec <HAL_TIM_Base_Init>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008b9e:	f000 f8f9 	bl	8008d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008ba8:	f107 0308 	add.w	r3, r7, #8
 8008bac:	4619      	mov	r1, r3
 8008bae:	480d      	ldr	r0, [pc, #52]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008bb0:	f003 f954 	bl	800be5c <HAL_TIM_ConfigClockSource>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008bba:	f000 f8eb 	bl	8008d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4806      	ldr	r0, [pc, #24]	@ (8008be4 <MX_TIM1_Init+0x9c>)
 8008bcc:	f003 fb42 	bl	800c254 <HAL_TIMEx_MasterConfigSynchronization>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008bd6:	f000 f8dd 	bl	8008d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008bda:	bf00      	nop
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	2000195c 	.word	0x2000195c
 8008be8:	40012c00 	.word	0x40012c00

08008bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008bf0:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008bf2:	4a12      	ldr	r2, [pc, #72]	@ (8008c3c <MX_USART1_UART_Init+0x50>)
 8008bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008bf6:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c04:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c10:	4b09      	ldr	r3, [pc, #36]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c12:	220c      	movs	r2, #12
 8008c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c16:	4b08      	ldr	r3, [pc, #32]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c22:	4805      	ldr	r0, [pc, #20]	@ (8008c38 <MX_USART1_UART_Init+0x4c>)
 8008c24:	f003 fb94 	bl	800c350 <HAL_UART_Init>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c2e:	f000 f8b1 	bl	8008d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c32:	bf00      	nop
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200019a4 	.word	0x200019a4
 8008c3c:	40013800 	.word	0x40013800

08008c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c46:	f107 0310 	add.w	r3, r7, #16
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	605a      	str	r2, [r3, #4]
 8008c50:	609a      	str	r2, [r3, #8]
 8008c52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c54:	4b4b      	ldr	r3, [pc, #300]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	4a4a      	ldr	r2, [pc, #296]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c5a:	f043 0310 	orr.w	r3, r3, #16
 8008c5e:	6193      	str	r3, [r2, #24]
 8008c60:	4b48      	ldr	r3, [pc, #288]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c6c:	4b45      	ldr	r3, [pc, #276]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	4a44      	ldr	r2, [pc, #272]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c72:	f043 0320 	orr.w	r3, r3, #32
 8008c76:	6193      	str	r3, [r2, #24]
 8008c78:	4b42      	ldr	r3, [pc, #264]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c84:	4b3f      	ldr	r3, [pc, #252]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	4a3e      	ldr	r2, [pc, #248]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c8a:	f043 0304 	orr.w	r3, r3, #4
 8008c8e:	6193      	str	r3, [r2, #24]
 8008c90:	4b3c      	ldr	r3, [pc, #240]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c9c:	4b39      	ldr	r3, [pc, #228]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	4a38      	ldr	r2, [pc, #224]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008ca2:	f043 0308 	orr.w	r3, r3, #8
 8008ca6:	6193      	str	r3, [r2, #24]
 8008ca8:	4b36      	ldr	r3, [pc, #216]	@ (8008d84 <MX_GPIO_Init+0x144>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	21f0      	movs	r1, #240	@ 0xf0
 8008cb8:	4833      	ldr	r0, [pc, #204]	@ (8008d88 <MX_GPIO_Init+0x148>)
 8008cba:	f001 f8b4 	bl	8009e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008cc4:	4831      	ldr	r0, [pc, #196]	@ (8008d8c <MX_GPIO_Init+0x14c>)
 8008cc6:	f001 f8ae 	bl	8009e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008cd0:	482f      	ldr	r0, [pc, #188]	@ (8008d90 <MX_GPIO_Init+0x150>)
 8008cd2:	f001 f8a8 	bl	8009e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008cd6:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008cda:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ce4:	f107 0310 	add.w	r3, r7, #16
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4828      	ldr	r0, [pc, #160]	@ (8008d8c <MX_GPIO_Init+0x14c>)
 8008cec:	f000 fe24 	bl	8009938 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008cf0:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008cf4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	4619      	mov	r1, r3
 8008d04:	4820      	ldr	r0, [pc, #128]	@ (8008d88 <MX_GPIO_Init+0x148>)
 8008d06:	f000 fe17 	bl	8009938 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008d0a:	23f0      	movs	r3, #240	@ 0xf0
 8008d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d16:	2302      	movs	r3, #2
 8008d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1a:	f107 0310 	add.w	r3, r7, #16
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4819      	ldr	r0, [pc, #100]	@ (8008d88 <MX_GPIO_Init+0x148>)
 8008d22:	f000 fe09 	bl	8009938 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008d26:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d34:	2302      	movs	r3, #2
 8008d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d38:	f107 0310 	add.w	r3, r7, #16
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4813      	ldr	r0, [pc, #76]	@ (8008d8c <MX_GPIO_Init+0x14c>)
 8008d40:	f000 fdfa 	bl	8009938 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d44:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008d48:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d52:	2302      	movs	r3, #2
 8008d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d56:	f107 0310 	add.w	r3, r7, #16
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	480c      	ldr	r0, [pc, #48]	@ (8008d90 <MX_GPIO_Init+0x150>)
 8008d5e:	f000 fdeb 	bl	8009938 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008d62:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d70:	f107 0310 	add.w	r3, r7, #16
 8008d74:	4619      	mov	r1, r3
 8008d76:	4806      	ldr	r0, [pc, #24]	@ (8008d90 <MX_GPIO_Init+0x150>)
 8008d78:	f000 fdde 	bl	8009938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008d7c:	bf00      	nop
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40021000 	.word	0x40021000
 8008d88:	40010800 	.word	0x40010800
 8008d8c:	40011000 	.word	0x40011000
 8008d90:	40010c00 	.word	0x40010c00

08008d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008da6:	4b15      	ldr	r3, [pc, #84]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	4a14      	ldr	r2, [pc, #80]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008dac:	f043 0301 	orr.w	r3, r3, #1
 8008db0:	6193      	str	r3, [r2, #24]
 8008db2:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	60bb      	str	r3, [r7, #8]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc8:	61d3      	str	r3, [r2, #28]
 8008dca:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <HAL_MspInit+0x5c>)
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e00 <HAL_MspInit+0x60>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	4a04      	ldr	r2, [pc, #16]	@ (8008e00 <HAL_MspInit+0x60>)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	40021000 	.word	0x40021000
 8008e00:	40010000 	.word	0x40010000

08008e04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008e90 <HAL_CAN_MspInit+0x8c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d131      	bne.n	8008e88 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008e24:	4b1b      	ldr	r3, [pc, #108]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e2e:	61d3      	str	r3, [r2, #28]
 8008e30:	4b18      	ldr	r3, [pc, #96]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3c:	4b15      	ldr	r3, [pc, #84]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	4a14      	ldr	r2, [pc, #80]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e42:	f043 0304 	orr.w	r3, r3, #4
 8008e46:	6193      	str	r3, [r2, #24]
 8008e48:	4b12      	ldr	r3, [pc, #72]	@ (8008e94 <HAL_CAN_MspInit+0x90>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	60bb      	str	r3, [r7, #8]
 8008e52:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e62:	f107 0310 	add.w	r3, r7, #16
 8008e66:	4619      	mov	r1, r3
 8008e68:	480b      	ldr	r0, [pc, #44]	@ (8008e98 <HAL_CAN_MspInit+0x94>)
 8008e6a:	f000 fd65 	bl	8009938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e74:	2302      	movs	r3, #2
 8008e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	4619      	mov	r1, r3
 8008e82:	4805      	ldr	r0, [pc, #20]	@ (8008e98 <HAL_CAN_MspInit+0x94>)
 8008e84:	f000 fd58 	bl	8009938 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008e88:	bf00      	nop
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40006400 	.word	0x40006400
 8008e94:	40021000 	.word	0x40021000
 8008e98:	40010800 	.word	0x40010800

08008e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea4:	f107 0310 	add.w	r3, r7, #16
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	605a      	str	r2, [r3, #4]
 8008eae:	609a      	str	r2, [r3, #8]
 8008eb0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a15      	ldr	r2, [pc, #84]	@ (8008f0c <HAL_I2C_MspInit+0x70>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d123      	bne.n	8008f04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ebc:	4b14      	ldr	r3, [pc, #80]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	4a13      	ldr	r2, [pc, #76]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008ec2:	f043 0308 	orr.w	r3, r3, #8
 8008ec6:	6193      	str	r3, [r2, #24]
 8008ec8:	4b11      	ldr	r3, [pc, #68]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ed4:	23c0      	movs	r3, #192	@ 0xc0
 8008ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ed8:	2312      	movs	r3, #18
 8008eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008edc:	2303      	movs	r3, #3
 8008ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ee0:	f107 0310 	add.w	r3, r7, #16
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	480b      	ldr	r0, [pc, #44]	@ (8008f14 <HAL_I2C_MspInit+0x78>)
 8008ee8:	f000 fd26 	bl	8009938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008eec:	4b08      	ldr	r3, [pc, #32]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	4a07      	ldr	r2, [pc, #28]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ef6:	61d3      	str	r3, [r2, #28]
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <HAL_I2C_MspInit+0x74>)
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f00:	60bb      	str	r3, [r7, #8]
 8008f02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008f04:	bf00      	nop
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40005400 	.word	0x40005400
 8008f10:	40021000 	.word	0x40021000
 8008f14:	40010c00 	.word	0x40010c00

08008f18 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a0a      	ldr	r2, [pc, #40]	@ (8008f50 <HAL_I2C_MspDeInit+0x38>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d10d      	bne.n	8008f46 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f54 <HAL_I2C_MspDeInit+0x3c>)
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	4a09      	ldr	r2, [pc, #36]	@ (8008f54 <HAL_I2C_MspDeInit+0x3c>)
 8008f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f34:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008f36:	2140      	movs	r1, #64	@ 0x40
 8008f38:	4807      	ldr	r0, [pc, #28]	@ (8008f58 <HAL_I2C_MspDeInit+0x40>)
 8008f3a:	f000 fe91 	bl	8009c60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008f3e:	2180      	movs	r1, #128	@ 0x80
 8008f40:	4805      	ldr	r0, [pc, #20]	@ (8008f58 <HAL_I2C_MspDeInit+0x40>)
 8008f42:	f000 fe8d 	bl	8009c60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40005400 	.word	0x40005400
 8008f54:	40021000 	.word	0x40021000
 8008f58:	40010c00 	.word	0x40010c00

08008f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a0d      	ldr	r2, [pc, #52]	@ (8008fa0 <HAL_TIM_Base_MspInit+0x44>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d113      	bne.n	8008f96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <HAL_TIM_Base_MspInit+0x48>)
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa4 <HAL_TIM_Base_MspInit+0x48>)
 8008f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008f78:	6193      	str	r3, [r2, #24]
 8008f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa4 <HAL_TIM_Base_MspInit+0x48>)
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008f86:	2200      	movs	r2, #0
 8008f88:	2100      	movs	r1, #0
 8008f8a:	2019      	movs	r0, #25
 8008f8c:	f000 fb5b 	bl	8009646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008f90:	2019      	movs	r0, #25
 8008f92:	f000 fb74 	bl	800967e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40012c00 	.word	0x40012c00
 8008fa4:	40021000 	.word	0x40021000

08008fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fb0:	f107 0310 	add.w	r3, r7, #16
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	605a      	str	r2, [r3, #4]
 8008fba:	609a      	str	r2, [r3, #8]
 8008fbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a20      	ldr	r2, [pc, #128]	@ (8009044 <HAL_UART_MspInit+0x9c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d139      	bne.n	800903c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008fd2:	6193      	str	r3, [r2, #24]
 8008fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fe0:	4b19      	ldr	r3, [pc, #100]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	4a18      	ldr	r2, [pc, #96]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fe6:	f043 0304 	orr.w	r3, r3, #4
 8008fea:	6193      	str	r3, [r2, #24]
 8008fec:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <HAL_UART_MspInit+0xa0>)
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	60bb      	str	r3, [r7, #8]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ffe:	2302      	movs	r3, #2
 8009000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009002:	2303      	movs	r3, #3
 8009004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009006:	f107 0310 	add.w	r3, r7, #16
 800900a:	4619      	mov	r1, r3
 800900c:	480f      	ldr	r0, [pc, #60]	@ (800904c <HAL_UART_MspInit+0xa4>)
 800900e:	f000 fc93 	bl	8009938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800901c:	2300      	movs	r3, #0
 800901e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	4619      	mov	r1, r3
 8009026:	4809      	ldr	r0, [pc, #36]	@ (800904c <HAL_UART_MspInit+0xa4>)
 8009028:	f000 fc86 	bl	8009938 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	2025      	movs	r0, #37	@ 0x25
 8009032:	f000 fb08 	bl	8009646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009036:	2025      	movs	r0, #37	@ 0x25
 8009038:	f000 fb21 	bl	800967e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800903c:	bf00      	nop
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40013800 	.word	0x40013800
 8009048:	40021000 	.word	0x40021000
 800904c:	40010800 	.word	0x40010800

08009050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <NMI_Handler+0x4>

08009058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800905c:	bf00      	nop
 800905e:	e7fd      	b.n	800905c <HardFault_Handler+0x4>

08009060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <MemManage_Handler+0x4>

08009068 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <BusFault_Handler+0x4>

08009070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <UsageFault_Handler+0x4>

08009078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800907c:	bf00      	nop
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr

08009084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	bc80      	pop	{r7}
 800908e:	4770      	bx	lr

08009090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090a0:	f000 f8be 	bl	8009220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090a4:	bf00      	nop
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80090ac:	4802      	ldr	r0, [pc, #8]	@ (80090b8 <TIM1_UP_IRQHandler+0x10>)
 80090ae:	f002 fdcd 	bl	800bc4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80090b2:	bf00      	nop
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	2000195c 	.word	0x2000195c

080090bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80090c0:	4802      	ldr	r0, [pc, #8]	@ (80090cc <USART1_IRQHandler+0x10>)
 80090c2:	f003 f9cb 	bl	800c45c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80090c6:	bf00      	nop
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	200019a4 	.word	0x200019a4

080090d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80090d8:	4a14      	ldr	r2, [pc, #80]	@ (800912c <_sbrk+0x5c>)
 80090da:	4b15      	ldr	r3, [pc, #84]	@ (8009130 <_sbrk+0x60>)
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090e4:	4b13      	ldr	r3, [pc, #76]	@ (8009134 <_sbrk+0x64>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80090ec:	4b11      	ldr	r3, [pc, #68]	@ (8009134 <_sbrk+0x64>)
 80090ee:	4a12      	ldr	r2, [pc, #72]	@ (8009138 <_sbrk+0x68>)
 80090f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <_sbrk+0x64>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d207      	bcs.n	8009110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009100:	f003 fffa 	bl	800d0f8 <__errno>
 8009104:	4603      	mov	r3, r0
 8009106:	220c      	movs	r2, #12
 8009108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800910e:	e009      	b.n	8009124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009110:	4b08      	ldr	r3, [pc, #32]	@ (8009134 <_sbrk+0x64>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009116:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <_sbrk+0x64>)
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	4a05      	ldr	r2, [pc, #20]	@ (8009134 <_sbrk+0x64>)
 8009120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009122:	68fb      	ldr	r3, [r7, #12]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	2000c000 	.word	0x2000c000
 8009130:	00000400 	.word	0x00000400
 8009134:	200019ec 	.word	0x200019ec
 8009138:	20001b40 	.word	0x20001b40

0800913c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009140:	bf00      	nop
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009148:	480c      	ldr	r0, [pc, #48]	@ (800917c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800914a:	490d      	ldr	r1, [pc, #52]	@ (8009180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800914c:	4a0d      	ldr	r2, [pc, #52]	@ (8009184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800914e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009150:	e002      	b.n	8009158 <LoopCopyDataInit>

08009152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009156:	3304      	adds	r3, #4

08009158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800915a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800915c:	d3f9      	bcc.n	8009152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800915e:	4a0a      	ldr	r2, [pc, #40]	@ (8009188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009160:	4c0a      	ldr	r4, [pc, #40]	@ (800918c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009164:	e001      	b.n	800916a <LoopFillZerobss>

08009166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009168:	3204      	adds	r2, #4

0800916a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800916a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800916c:	d3fb      	bcc.n	8009166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800916e:	f7ff ffe5 	bl	800913c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009172:	f003 ffc7 	bl	800d104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009176:	f7ff fb99 	bl	80088ac <main>
  bx lr
 800917a:	4770      	bx	lr
  ldr r0, =_sdata
 800917c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009180:	20000fac 	.word	0x20000fac
  ldr r2, =_sidata
 8009184:	0800dbf0 	.word	0x0800dbf0
  ldr r2, =_sbss
 8009188:	20000fac 	.word	0x20000fac
  ldr r4, =_ebss
 800918c:	20001b3c 	.word	0x20001b3c

08009190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009190:	e7fe      	b.n	8009190 <ADC1_2_IRQHandler>
	...

08009194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009198:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <HAL_Init+0x28>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a07      	ldr	r2, [pc, #28]	@ (80091bc <HAL_Init+0x28>)
 800919e:	f043 0310 	orr.w	r3, r3, #16
 80091a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091a4:	2003      	movs	r0, #3
 80091a6:	f000 fa43 	bl	8009630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091aa:	200f      	movs	r0, #15
 80091ac:	f000 f808 	bl	80091c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80091b0:	f7ff fdf6 	bl	8008da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40022000 	.word	0x40022000

080091c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091c8:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <HAL_InitTick+0x54>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <HAL_InitTick+0x58>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fa5b 	bl	800969a <HAL_SYSTICK_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e00e      	b.n	800920c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d80a      	bhi.n	800920a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091f4:	2200      	movs	r2, #0
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091fc:	f000 fa23 	bl	8009646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009200:	4a06      	ldr	r2, [pc, #24]	@ (800921c <HAL_InitTick+0x5c>)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e000      	b.n	800920c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000f50 	.word	0x20000f50
 8009218:	20000f58 	.word	0x20000f58
 800921c:	20000f54 	.word	0x20000f54

08009220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <HAL_IncTick+0x1c>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <HAL_IncTick+0x20>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4413      	add	r3, r2
 8009230:	4a03      	ldr	r2, [pc, #12]	@ (8009240 <HAL_IncTick+0x20>)
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr
 800923c:	20000f58 	.word	0x20000f58
 8009240:	200019f0 	.word	0x200019f0

08009244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  return uwTick;
 8009248:	4b02      	ldr	r3, [pc, #8]	@ (8009254 <HAL_GetTick+0x10>)
 800924a:	681b      	ldr	r3, [r3, #0]
}
 800924c:	4618      	mov	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr
 8009254:	200019f0 	.word	0x200019f0

08009258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009260:	f7ff fff0 	bl	8009244 <HAL_GetTick>
 8009264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009270:	d005      	beq.n	800927e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009272:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <HAL_Delay+0x44>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800927e:	bf00      	nop
 8009280:	f7ff ffe0 	bl	8009244 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	429a      	cmp	r2, r3
 800928e:	d8f7      	bhi.n	8009280 <HAL_Delay+0x28>
  {
  }
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000f58 	.word	0x20000f58

080092a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e0ed      	b.n	800948e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fda0 	bl	8008e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092d4:	f7ff ffb6 	bl	8009244 <HAL_GetTick>
 80092d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80092da:	e012      	b.n	8009302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092dc:	f7ff ffb2 	bl	8009244 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b0a      	cmp	r3, #10
 80092e8:	d90b      	bls.n	8009302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2205      	movs	r2, #5
 80092fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e0c5      	b.n	800948e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0e5      	beq.n	80092dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0202 	bic.w	r2, r2, #2
 800931e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009320:	f7ff ff90 	bl	8009244 <HAL_GetTick>
 8009324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009326:	e012      	b.n	800934e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009328:	f7ff ff8c 	bl	8009244 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b0a      	cmp	r3, #10
 8009334:	d90b      	bls.n	800934e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2205      	movs	r2, #5
 8009346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e09f      	b.n	800948e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e5      	bne.n	8009328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7e1b      	ldrb	r3, [r3, #24]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d108      	bne.n	8009376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e007      	b.n	8009386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7e5b      	ldrb	r3, [r3, #25]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d108      	bne.n	80093a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e007      	b.n	80093b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7e9b      	ldrb	r3, [r3, #26]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d108      	bne.n	80093ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0220 	orr.w	r2, r2, #32
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e007      	b.n	80093da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0220 	bic.w	r2, r2, #32
 80093d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7edb      	ldrb	r3, [r3, #27]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d108      	bne.n	80093f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0210 	bic.w	r2, r2, #16
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	e007      	b.n	8009404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0210 	orr.w	r2, r2, #16
 8009402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7f1b      	ldrb	r3, [r3, #28]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d108      	bne.n	800941e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0208 	orr.w	r2, r2, #8
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	e007      	b.n	800942e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0208 	bic.w	r2, r2, #8
 800942c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7f5b      	ldrb	r3, [r3, #29]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d108      	bne.n	8009448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f042 0204 	orr.w	r2, r2, #4
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	e007      	b.n	8009458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0204 	bic.w	r2, r2, #4
 8009456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	ea42 0103 	orr.w	r1, r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	1e5a      	subs	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <__NVIC_SetPriorityGrouping>:
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094a8:	4b0c      	ldr	r3, [pc, #48]	@ (80094dc <__NVIC_SetPriorityGrouping+0x44>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094b4:	4013      	ands	r3, r2
 80094b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80094c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094ca:	4a04      	ldr	r2, [pc, #16]	@ (80094dc <__NVIC_SetPriorityGrouping+0x44>)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	60d3      	str	r3, [r2, #12]
}
 80094d0:	bf00      	nop
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc80      	pop	{r7}
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	e000ed00 	.word	0xe000ed00

080094e0 <__NVIC_GetPriorityGrouping>:
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094e4:	4b04      	ldr	r3, [pc, #16]	@ (80094f8 <__NVIC_GetPriorityGrouping+0x18>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	0a1b      	lsrs	r3, r3, #8
 80094ea:	f003 0307 	and.w	r3, r3, #7
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	e000ed00 	.word	0xe000ed00

080094fc <__NVIC_EnableIRQ>:
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950a:	2b00      	cmp	r3, #0
 800950c:	db0b      	blt.n	8009526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	f003 021f 	and.w	r2, r3, #31
 8009514:	4906      	ldr	r1, [pc, #24]	@ (8009530 <__NVIC_EnableIRQ+0x34>)
 8009516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	2001      	movs	r0, #1
 800951e:	fa00 f202 	lsl.w	r2, r0, r2
 8009522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	bc80      	pop	{r7}
 800952e:	4770      	bx	lr
 8009530:	e000e100 	.word	0xe000e100

08009534 <__NVIC_SetPriority>:
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	db0a      	blt.n	800955e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	b2da      	uxtb	r2, r3
 800954c:	490c      	ldr	r1, [pc, #48]	@ (8009580 <__NVIC_SetPriority+0x4c>)
 800954e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009552:	0112      	lsls	r2, r2, #4
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	440b      	add	r3, r1
 8009558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800955c:	e00a      	b.n	8009574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	4908      	ldr	r1, [pc, #32]	@ (8009584 <__NVIC_SetPriority+0x50>)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	3b04      	subs	r3, #4
 800956c:	0112      	lsls	r2, r2, #4
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	440b      	add	r3, r1
 8009572:	761a      	strb	r2, [r3, #24]
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	e000e100 	.word	0xe000e100
 8009584:	e000ed00 	.word	0xe000ed00

08009588 <NVIC_EncodePriority>:
{
 8009588:	b480      	push	{r7}
 800958a:	b089      	sub	sp, #36	@ 0x24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	f1c3 0307 	rsb	r3, r3, #7
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	bf28      	it	cs
 80095a6:	2304      	movcs	r3, #4
 80095a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	3304      	adds	r3, #4
 80095ae:	2b06      	cmp	r3, #6
 80095b0:	d902      	bls.n	80095b8 <NVIC_EncodePriority+0x30>
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3b03      	subs	r3, #3
 80095b6:	e000      	b.n	80095ba <NVIC_EncodePriority+0x32>
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	fa02 f303 	lsl.w	r3, r2, r3
 80095c6:	43da      	mvns	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	401a      	ands	r2, r3
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	fa01 f303 	lsl.w	r3, r1, r3
 80095da:	43d9      	mvns	r1, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095e0:	4313      	orrs	r3, r2
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3724      	adds	r7, #36	@ 0x24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr

080095ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095fc:	d301      	bcc.n	8009602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80095fe:	2301      	movs	r3, #1
 8009600:	e00f      	b.n	8009622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009602:	4a0a      	ldr	r2, [pc, #40]	@ (800962c <SysTick_Config+0x40>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3b01      	subs	r3, #1
 8009608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800960a:	210f      	movs	r1, #15
 800960c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009610:	f7ff ff90 	bl	8009534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009614:	4b05      	ldr	r3, [pc, #20]	@ (800962c <SysTick_Config+0x40>)
 8009616:	2200      	movs	r2, #0
 8009618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800961a:	4b04      	ldr	r3, [pc, #16]	@ (800962c <SysTick_Config+0x40>)
 800961c:	2207      	movs	r2, #7
 800961e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	e000e010 	.word	0xe000e010

08009630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ff2d 	bl	8009498 <__NVIC_SetPriorityGrouping>
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	4603      	mov	r3, r0
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	607a      	str	r2, [r7, #4]
 8009652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009658:	f7ff ff42 	bl	80094e0 <__NVIC_GetPriorityGrouping>
 800965c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	6978      	ldr	r0, [r7, #20]
 8009664:	f7ff ff90 	bl	8009588 <NVIC_EncodePriority>
 8009668:	4602      	mov	r2, r0
 800966a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff ff5f 	bl	8009534 <__NVIC_SetPriority>
}
 8009676:	bf00      	nop
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	4603      	mov	r3, r0
 8009686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ff35 	bl	80094fc <__NVIC_EnableIRQ>
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ffa2 	bl	80095ec <SysTick_Config>
 80096a8:	4603      	mov	r3, r0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d008      	beq.n	80096dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e020      	b.n	800971e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 020e 	bic.w	r2, r2, #14
 80096ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0201 	bic.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009704:	2101      	movs	r1, #1
 8009706:	fa01 f202 	lsl.w	r2, r1, r2
 800970a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr

08009728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d005      	beq.n	800974c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2204      	movs	r2, #4
 8009744:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
 800974a:	e0d6      	b.n	80098fa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 020e 	bic.w	r2, r2, #14
 800975a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	4b64      	ldr	r3, [pc, #400]	@ (8009904 <HAL_DMA_Abort_IT+0x1dc>)
 8009774:	429a      	cmp	r2, r3
 8009776:	d958      	bls.n	800982a <HAL_DMA_Abort_IT+0x102>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a62      	ldr	r2, [pc, #392]	@ (8009908 <HAL_DMA_Abort_IT+0x1e0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d04f      	beq.n	8009822 <HAL_DMA_Abort_IT+0xfa>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a61      	ldr	r2, [pc, #388]	@ (800990c <HAL_DMA_Abort_IT+0x1e4>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d048      	beq.n	800981e <HAL_DMA_Abort_IT+0xf6>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a5f      	ldr	r2, [pc, #380]	@ (8009910 <HAL_DMA_Abort_IT+0x1e8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d040      	beq.n	8009818 <HAL_DMA_Abort_IT+0xf0>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a5e      	ldr	r2, [pc, #376]	@ (8009914 <HAL_DMA_Abort_IT+0x1ec>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d038      	beq.n	8009812 <HAL_DMA_Abort_IT+0xea>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a5c      	ldr	r2, [pc, #368]	@ (8009918 <HAL_DMA_Abort_IT+0x1f0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d030      	beq.n	800980c <HAL_DMA_Abort_IT+0xe4>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a5b      	ldr	r2, [pc, #364]	@ (800991c <HAL_DMA_Abort_IT+0x1f4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d028      	beq.n	8009806 <HAL_DMA_Abort_IT+0xde>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a52      	ldr	r2, [pc, #328]	@ (8009904 <HAL_DMA_Abort_IT+0x1dc>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d020      	beq.n	8009800 <HAL_DMA_Abort_IT+0xd8>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a57      	ldr	r2, [pc, #348]	@ (8009920 <HAL_DMA_Abort_IT+0x1f8>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d019      	beq.n	80097fc <HAL_DMA_Abort_IT+0xd4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a55      	ldr	r2, [pc, #340]	@ (8009924 <HAL_DMA_Abort_IT+0x1fc>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d012      	beq.n	80097f8 <HAL_DMA_Abort_IT+0xd0>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a54      	ldr	r2, [pc, #336]	@ (8009928 <HAL_DMA_Abort_IT+0x200>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00a      	beq.n	80097f2 <HAL_DMA_Abort_IT+0xca>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a52      	ldr	r2, [pc, #328]	@ (800992c <HAL_DMA_Abort_IT+0x204>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d102      	bne.n	80097ec <HAL_DMA_Abort_IT+0xc4>
 80097e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097ea:	e01b      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 80097ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80097f0:	e018      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 80097f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097f6:	e015      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 80097f8:	2310      	movs	r3, #16
 80097fa:	e013      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e011      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 8009800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009804:	e00e      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 8009806:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800980a:	e00b      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 800980c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009810:	e008      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 8009812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009816:	e005      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 8009818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800981c:	e002      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 800981e:	2310      	movs	r3, #16
 8009820:	e000      	b.n	8009824 <HAL_DMA_Abort_IT+0xfc>
 8009822:	2301      	movs	r3, #1
 8009824:	4a42      	ldr	r2, [pc, #264]	@ (8009930 <HAL_DMA_Abort_IT+0x208>)
 8009826:	6053      	str	r3, [r2, #4]
 8009828:	e057      	b.n	80098da <HAL_DMA_Abort_IT+0x1b2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a36      	ldr	r2, [pc, #216]	@ (8009908 <HAL_DMA_Abort_IT+0x1e0>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d04f      	beq.n	80098d4 <HAL_DMA_Abort_IT+0x1ac>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a34      	ldr	r2, [pc, #208]	@ (800990c <HAL_DMA_Abort_IT+0x1e4>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d048      	beq.n	80098d0 <HAL_DMA_Abort_IT+0x1a8>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a33      	ldr	r2, [pc, #204]	@ (8009910 <HAL_DMA_Abort_IT+0x1e8>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d040      	beq.n	80098ca <HAL_DMA_Abort_IT+0x1a2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a31      	ldr	r2, [pc, #196]	@ (8009914 <HAL_DMA_Abort_IT+0x1ec>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d038      	beq.n	80098c4 <HAL_DMA_Abort_IT+0x19c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a30      	ldr	r2, [pc, #192]	@ (8009918 <HAL_DMA_Abort_IT+0x1f0>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d030      	beq.n	80098be <HAL_DMA_Abort_IT+0x196>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a2e      	ldr	r2, [pc, #184]	@ (800991c <HAL_DMA_Abort_IT+0x1f4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d028      	beq.n	80098b8 <HAL_DMA_Abort_IT+0x190>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a26      	ldr	r2, [pc, #152]	@ (8009904 <HAL_DMA_Abort_IT+0x1dc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d020      	beq.n	80098b2 <HAL_DMA_Abort_IT+0x18a>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a2a      	ldr	r2, [pc, #168]	@ (8009920 <HAL_DMA_Abort_IT+0x1f8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d019      	beq.n	80098ae <HAL_DMA_Abort_IT+0x186>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a29      	ldr	r2, [pc, #164]	@ (8009924 <HAL_DMA_Abort_IT+0x1fc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d012      	beq.n	80098aa <HAL_DMA_Abort_IT+0x182>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a27      	ldr	r2, [pc, #156]	@ (8009928 <HAL_DMA_Abort_IT+0x200>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00a      	beq.n	80098a4 <HAL_DMA_Abort_IT+0x17c>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a26      	ldr	r2, [pc, #152]	@ (800992c <HAL_DMA_Abort_IT+0x204>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d102      	bne.n	800989e <HAL_DMA_Abort_IT+0x176>
 8009898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800989c:	e01b      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 800989e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80098a2:	e018      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098a8:	e015      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098aa:	2310      	movs	r3, #16
 80098ac:	e013      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e011      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098b6:	e00e      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80098bc:	e00b      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80098c2:	e008      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098c8:	e005      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098ce:	e002      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098d0:	2310      	movs	r3, #16
 80098d2:	e000      	b.n	80098d6 <HAL_DMA_Abort_IT+0x1ae>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4a17      	ldr	r2, [pc, #92]	@ (8009934 <HAL_DMA_Abort_IT+0x20c>)
 80098d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
    } 
  }
  return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40020080 	.word	0x40020080
 8009908:	40020008 	.word	0x40020008
 800990c:	4002001c 	.word	0x4002001c
 8009910:	40020030 	.word	0x40020030
 8009914:	40020044 	.word	0x40020044
 8009918:	40020058 	.word	0x40020058
 800991c:	4002006c 	.word	0x4002006c
 8009920:	40020408 	.word	0x40020408
 8009924:	4002041c 	.word	0x4002041c
 8009928:	40020430 	.word	0x40020430
 800992c:	40020444 	.word	0x40020444
 8009930:	40020400 	.word	0x40020400
 8009934:	40020000 	.word	0x40020000

08009938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009938:	b480      	push	{r7}
 800993a:	b08b      	sub	sp, #44	@ 0x2c
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009942:	2300      	movs	r3, #0
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009946:	2300      	movs	r3, #0
 8009948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800994a:	e179      	b.n	8009c40 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800994c:	2201      	movs	r2, #1
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	4013      	ands	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	429a      	cmp	r2, r3
 8009966:	f040 8168 	bne.w	8009c3a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	4a96      	ldr	r2, [pc, #600]	@ (8009bc8 <HAL_GPIO_Init+0x290>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d05e      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
 8009974:	4a94      	ldr	r2, [pc, #592]	@ (8009bc8 <HAL_GPIO_Init+0x290>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d875      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 800997a:	4a94      	ldr	r2, [pc, #592]	@ (8009bcc <HAL_GPIO_Init+0x294>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d058      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
 8009980:	4a92      	ldr	r2, [pc, #584]	@ (8009bcc <HAL_GPIO_Init+0x294>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d86f      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 8009986:	4a92      	ldr	r2, [pc, #584]	@ (8009bd0 <HAL_GPIO_Init+0x298>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d052      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
 800998c:	4a90      	ldr	r2, [pc, #576]	@ (8009bd0 <HAL_GPIO_Init+0x298>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d869      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 8009992:	4a90      	ldr	r2, [pc, #576]	@ (8009bd4 <HAL_GPIO_Init+0x29c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d04c      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
 8009998:	4a8e      	ldr	r2, [pc, #568]	@ (8009bd4 <HAL_GPIO_Init+0x29c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d863      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 800999e:	4a8e      	ldr	r2, [pc, #568]	@ (8009bd8 <HAL_GPIO_Init+0x2a0>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d046      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
 80099a4:	4a8c      	ldr	r2, [pc, #560]	@ (8009bd8 <HAL_GPIO_Init+0x2a0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d85d      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 80099aa:	2b12      	cmp	r3, #18
 80099ac:	d82a      	bhi.n	8009a04 <HAL_GPIO_Init+0xcc>
 80099ae:	2b12      	cmp	r3, #18
 80099b0:	d859      	bhi.n	8009a66 <HAL_GPIO_Init+0x12e>
 80099b2:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <HAL_GPIO_Init+0x80>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	08009a33 	.word	0x08009a33
 80099bc:	08009a0d 	.word	0x08009a0d
 80099c0:	08009a1f 	.word	0x08009a1f
 80099c4:	08009a61 	.word	0x08009a61
 80099c8:	08009a67 	.word	0x08009a67
 80099cc:	08009a67 	.word	0x08009a67
 80099d0:	08009a67 	.word	0x08009a67
 80099d4:	08009a67 	.word	0x08009a67
 80099d8:	08009a67 	.word	0x08009a67
 80099dc:	08009a67 	.word	0x08009a67
 80099e0:	08009a67 	.word	0x08009a67
 80099e4:	08009a67 	.word	0x08009a67
 80099e8:	08009a67 	.word	0x08009a67
 80099ec:	08009a67 	.word	0x08009a67
 80099f0:	08009a67 	.word	0x08009a67
 80099f4:	08009a67 	.word	0x08009a67
 80099f8:	08009a67 	.word	0x08009a67
 80099fc:	08009a15 	.word	0x08009a15
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	4a75      	ldr	r2, [pc, #468]	@ (8009bdc <HAL_GPIO_Init+0x2a4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d013      	beq.n	8009a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a0a:	e02c      	b.n	8009a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	623b      	str	r3, [r7, #32]
          break;
 8009a12:	e029      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	623b      	str	r3, [r7, #32]
          break;
 8009a1c:	e024      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	3308      	adds	r3, #8
 8009a24:	623b      	str	r3, [r7, #32]
          break;
 8009a26:	e01f      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	623b      	str	r3, [r7, #32]
          break;
 8009a30:	e01a      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009a3a:	2304      	movs	r3, #4
 8009a3c:	623b      	str	r3, [r7, #32]
          break;
 8009a3e:	e013      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d105      	bne.n	8009a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a48:	2308      	movs	r3, #8
 8009a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	611a      	str	r2, [r3, #16]
          break;
 8009a52:	e009      	b.n	8009a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a54:	2308      	movs	r3, #8
 8009a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	615a      	str	r2, [r3, #20]
          break;
 8009a5e:	e003      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009a60:	2300      	movs	r3, #0
 8009a62:	623b      	str	r3, [r7, #32]
          break;
 8009a64:	e000      	b.n	8009a68 <HAL_GPIO_Init+0x130>
          break;
 8009a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2bff      	cmp	r3, #255	@ 0xff
 8009a6c:	d801      	bhi.n	8009a72 <HAL_GPIO_Init+0x13a>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	e001      	b.n	8009a76 <HAL_GPIO_Init+0x13e>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	3304      	adds	r3, #4
 8009a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2bff      	cmp	r3, #255	@ 0xff
 8009a7c:	d802      	bhi.n	8009a84 <HAL_GPIO_Init+0x14c>
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	e002      	b.n	8009a8a <HAL_GPIO_Init+0x152>
 8009a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a86:	3b08      	subs	r3, #8
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	210f      	movs	r1, #15
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	fa01 f303 	lsl.w	r3, r1, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	401a      	ands	r2, r3
 8009a9c:	6a39      	ldr	r1, [r7, #32]
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 80c1 	beq.w	8009c3a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009ab8:	4b49      	ldr	r3, [pc, #292]	@ (8009be0 <HAL_GPIO_Init+0x2a8>)
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	4a48      	ldr	r2, [pc, #288]	@ (8009be0 <HAL_GPIO_Init+0x2a8>)
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	6193      	str	r3, [r2, #24]
 8009ac4:	4b46      	ldr	r3, [pc, #280]	@ (8009be0 <HAL_GPIO_Init+0x2a8>)
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009ad0:	4a44      	ldr	r2, [pc, #272]	@ (8009be4 <HAL_GPIO_Init+0x2ac>)
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	089b      	lsrs	r3, r3, #2
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	220f      	movs	r2, #15
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	43db      	mvns	r3, r3
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4013      	ands	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3c      	ldr	r2, [pc, #240]	@ (8009be8 <HAL_GPIO_Init+0x2b0>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d01f      	beq.n	8009b3c <HAL_GPIO_Init+0x204>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a3b      	ldr	r2, [pc, #236]	@ (8009bec <HAL_GPIO_Init+0x2b4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d019      	beq.n	8009b38 <HAL_GPIO_Init+0x200>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a3a      	ldr	r2, [pc, #232]	@ (8009bf0 <HAL_GPIO_Init+0x2b8>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <HAL_GPIO_Init+0x1fc>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a39      	ldr	r2, [pc, #228]	@ (8009bf4 <HAL_GPIO_Init+0x2bc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00d      	beq.n	8009b30 <HAL_GPIO_Init+0x1f8>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a38      	ldr	r2, [pc, #224]	@ (8009bf8 <HAL_GPIO_Init+0x2c0>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d007      	beq.n	8009b2c <HAL_GPIO_Init+0x1f4>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a37      	ldr	r2, [pc, #220]	@ (8009bfc <HAL_GPIO_Init+0x2c4>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d101      	bne.n	8009b28 <HAL_GPIO_Init+0x1f0>
 8009b24:	2305      	movs	r3, #5
 8009b26:	e00a      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b28:	2306      	movs	r3, #6
 8009b2a:	e008      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	e006      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b30:	2303      	movs	r3, #3
 8009b32:	e004      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e002      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e000      	b.n	8009b3e <HAL_GPIO_Init+0x206>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b40:	f002 0203 	and.w	r2, r2, #3
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	4093      	lsls	r3, r2
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009b4e:	4925      	ldr	r1, [pc, #148]	@ (8009be4 <HAL_GPIO_Init+0x2ac>)
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	089b      	lsrs	r3, r3, #2
 8009b54:	3302      	adds	r3, #2
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d006      	beq.n	8009b76 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009b68:	4b25      	ldr	r3, [pc, #148]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	4924      	ldr	r1, [pc, #144]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	608b      	str	r3, [r1, #8]
 8009b74:	e006      	b.n	8009b84 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009b76:	4b22      	ldr	r3, [pc, #136]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	4920      	ldr	r1, [pc, #128]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009b90:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	491a      	ldr	r1, [pc, #104]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	60cb      	str	r3, [r1, #12]
 8009b9c:	e006      	b.n	8009bac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009b9e:	4b18      	ldr	r3, [pc, #96]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	43db      	mvns	r3, r3
 8009ba6:	4916      	ldr	r1, [pc, #88]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d025      	beq.n	8009c04 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009bb8:	4b11      	ldr	r3, [pc, #68]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	4910      	ldr	r1, [pc, #64]	@ (8009c00 <HAL_GPIO_Init+0x2c8>)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	604b      	str	r3, [r1, #4]
 8009bc4:	e025      	b.n	8009c12 <HAL_GPIO_Init+0x2da>
 8009bc6:	bf00      	nop
 8009bc8:	10320000 	.word	0x10320000
 8009bcc:	10310000 	.word	0x10310000
 8009bd0:	10220000 	.word	0x10220000
 8009bd4:	10210000 	.word	0x10210000
 8009bd8:	10120000 	.word	0x10120000
 8009bdc:	10110000 	.word	0x10110000
 8009be0:	40021000 	.word	0x40021000
 8009be4:	40010000 	.word	0x40010000
 8009be8:	40010800 	.word	0x40010800
 8009bec:	40010c00 	.word	0x40010c00
 8009bf0:	40011000 	.word	0x40011000
 8009bf4:	40011400 	.word	0x40011400
 8009bf8:	40011800 	.word	0x40011800
 8009bfc:	40011c00 	.word	0x40011c00
 8009c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c04:	4b15      	ldr	r3, [pc, #84]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	4913      	ldr	r1, [pc, #76]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d006      	beq.n	8009c2c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	490e      	ldr	r1, [pc, #56]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	600b      	str	r3, [r1, #0]
 8009c2a:	e006      	b.n	8009c3a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	43db      	mvns	r3, r3
 8009c34:	4909      	ldr	r1, [pc, #36]	@ (8009c5c <HAL_GPIO_Init+0x324>)
 8009c36:	4013      	ands	r3, r2
 8009c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f47f ae7e 	bne.w	800994c <HAL_GPIO_Init+0x14>
  }
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	372c      	adds	r7, #44	@ 0x2c
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bc80      	pop	{r7}
 8009c5a:	4770      	bx	lr
 8009c5c:	40010400 	.word	0x40010400

08009c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b089      	sub	sp, #36	@ 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009c6e:	e0a6      	b.n	8009dbe <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009c70:	2201      	movs	r2, #1
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8099 	beq.w	8009db8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009c86:	4a54      	ldr	r2, [pc, #336]	@ (8009dd8 <HAL_GPIO_DeInit+0x178>)
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	089b      	lsrs	r3, r3, #2
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c92:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	220f      	movs	r2, #15
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a4c      	ldr	r2, [pc, #304]	@ (8009ddc <HAL_GPIO_DeInit+0x17c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d01f      	beq.n	8009cf0 <HAL_GPIO_DeInit+0x90>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8009de0 <HAL_GPIO_DeInit+0x180>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d019      	beq.n	8009cec <HAL_GPIO_DeInit+0x8c>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a4a      	ldr	r2, [pc, #296]	@ (8009de4 <HAL_GPIO_DeInit+0x184>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d013      	beq.n	8009ce8 <HAL_GPIO_DeInit+0x88>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a49      	ldr	r2, [pc, #292]	@ (8009de8 <HAL_GPIO_DeInit+0x188>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00d      	beq.n	8009ce4 <HAL_GPIO_DeInit+0x84>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a48      	ldr	r2, [pc, #288]	@ (8009dec <HAL_GPIO_DeInit+0x18c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d007      	beq.n	8009ce0 <HAL_GPIO_DeInit+0x80>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a47      	ldr	r2, [pc, #284]	@ (8009df0 <HAL_GPIO_DeInit+0x190>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d101      	bne.n	8009cdc <HAL_GPIO_DeInit+0x7c>
 8009cd8:	2305      	movs	r3, #5
 8009cda:	e00a      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009cdc:	2306      	movs	r3, #6
 8009cde:	e008      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	e006      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e004      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e002      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <HAL_GPIO_DeInit+0x92>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	f002 0203 	and.w	r2, r2, #3
 8009cf8:	0092      	lsls	r2, r2, #2
 8009cfa:	4093      	lsls	r3, r2
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d132      	bne.n	8009d68 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009d02:	4b3c      	ldr	r3, [pc, #240]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	493a      	ldr	r1, [pc, #232]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009d10:	4b38      	ldr	r3, [pc, #224]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	43db      	mvns	r3, r3
 8009d18:	4936      	ldr	r1, [pc, #216]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009d1e:	4b35      	ldr	r3, [pc, #212]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	43db      	mvns	r3, r3
 8009d26:	4933      	ldr	r1, [pc, #204]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009d2c:	4b31      	ldr	r3, [pc, #196]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	43db      	mvns	r3, r3
 8009d34:	492f      	ldr	r1, [pc, #188]	@ (8009df4 <HAL_GPIO_DeInit+0x194>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	220f      	movs	r2, #15
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009d4a:	4a23      	ldr	r2, [pc, #140]	@ (8009dd8 <HAL_GPIO_DeInit+0x178>)
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	089b      	lsrs	r3, r3, #2
 8009d50:	3302      	adds	r3, #2
 8009d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	43da      	mvns	r2, r3
 8009d5a:	481f      	ldr	r0, [pc, #124]	@ (8009dd8 <HAL_GPIO_DeInit+0x178>)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	400a      	ands	r2, r1
 8009d62:	3302      	adds	r3, #2
 8009d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2bff      	cmp	r3, #255	@ 0xff
 8009d6c:	d801      	bhi.n	8009d72 <HAL_GPIO_DeInit+0x112>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	e001      	b.n	8009d76 <HAL_GPIO_DeInit+0x116>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2bff      	cmp	r3, #255	@ 0xff
 8009d7c:	d802      	bhi.n	8009d84 <HAL_GPIO_DeInit+0x124>
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	e002      	b.n	8009d8a <HAL_GPIO_DeInit+0x12a>
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	3b08      	subs	r3, #8
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	210f      	movs	r1, #15
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	fa01 f303 	lsl.w	r3, r1, r3
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	401a      	ands	r2, r3
 8009d9c:	2104      	movs	r1, #4
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	fa01 f303 	lsl.w	r3, r1, r3
 8009da4:	431a      	orrs	r2, r3
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	43db      	mvns	r3, r3
 8009db2:	401a      	ands	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f47f af52 	bne.w	8009c70 <HAL_GPIO_DeInit+0x10>
  }
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3724      	adds	r7, #36	@ 0x24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40010800 	.word	0x40010800
 8009de0:	40010c00 	.word	0x40010c00
 8009de4:	40011000 	.word	0x40011000
 8009de8:	40011400 	.word	0x40011400
 8009dec:	40011800 	.word	0x40011800
 8009df0:	40011c00 	.word	0x40011c00
 8009df4:	40010400 	.word	0x40010400

08009df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	887b      	ldrh	r3, [r7, #2]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
 8009e14:	e001      	b.n	8009e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr

08009e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	807b      	strh	r3, [r7, #2]
 8009e32:	4613      	mov	r3, r2
 8009e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e36:	787b      	ldrb	r3, [r7, #1]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e3c:	887a      	ldrh	r2, [r7, #2]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009e42:	e003      	b.n	8009e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009e44:	887b      	ldrh	r3, [r7, #2]
 8009e46:	041a      	lsls	r2, r3, #16
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	611a      	str	r2, [r3, #16]
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e68:	887a      	ldrh	r2, [r7, #2]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	041a      	lsls	r2, r3, #16
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	43d9      	mvns	r1, r3
 8009e74:	887b      	ldrh	r3, [r7, #2]
 8009e76:	400b      	ands	r3, r1
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	611a      	str	r2, [r3, #16]
}
 8009e7e:	bf00      	nop
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e12b      	b.n	800a0f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7fe fff4 	bl	8008e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2224      	movs	r2, #36	@ 0x24
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009eec:	f001 fdb8 	bl	800ba60 <HAL_RCC_GetPCLK1Freq>
 8009ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4a81      	ldr	r2, [pc, #516]	@ (800a0fc <HAL_I2C_Init+0x274>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d807      	bhi.n	8009f0c <HAL_I2C_Init+0x84>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4a80      	ldr	r2, [pc, #512]	@ (800a100 <HAL_I2C_Init+0x278>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	bf94      	ite	ls
 8009f04:	2301      	movls	r3, #1
 8009f06:	2300      	movhi	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	e006      	b.n	8009f1a <HAL_I2C_Init+0x92>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a7d      	ldr	r2, [pc, #500]	@ (800a104 <HAL_I2C_Init+0x27c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	bf94      	ite	ls
 8009f14:	2301      	movls	r3, #1
 8009f16:	2300      	movhi	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0e7      	b.n	800a0f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a78      	ldr	r2, [pc, #480]	@ (800a108 <HAL_I2C_Init+0x280>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	0c9b      	lsrs	r3, r3, #18
 8009f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4a6a      	ldr	r2, [pc, #424]	@ (800a0fc <HAL_I2C_Init+0x274>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d802      	bhi.n	8009f5c <HAL_I2C_Init+0xd4>
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	e009      	b.n	8009f70 <HAL_I2C_Init+0xe8>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009f62:	fb02 f303 	mul.w	r3, r2, r3
 8009f66:	4a69      	ldr	r2, [pc, #420]	@ (800a10c <HAL_I2C_Init+0x284>)
 8009f68:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6c:	099b      	lsrs	r3, r3, #6
 8009f6e:	3301      	adds	r3, #1
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6812      	ldr	r2, [r2, #0]
 8009f74:	430b      	orrs	r3, r1
 8009f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	495c      	ldr	r1, [pc, #368]	@ (800a0fc <HAL_I2C_Init+0x274>)
 8009f8c:	428b      	cmp	r3, r1
 8009f8e:	d819      	bhi.n	8009fc4 <HAL_I2C_Init+0x13c>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	1e59      	subs	r1, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009fa4:	400b      	ands	r3, r1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <HAL_I2C_Init+0x138>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	1e59      	subs	r1, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fbe:	e051      	b.n	800a064 <HAL_I2C_Init+0x1dc>
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	e04f      	b.n	800a064 <HAL_I2C_Init+0x1dc>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d111      	bne.n	8009ff0 <HAL_I2C_Init+0x168>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	1e58      	subs	r0, r3, #1
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6859      	ldr	r1, [r3, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	440b      	add	r3, r1
 8009fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2301      	moveq	r3, #1
 8009fea:	2300      	movne	r3, #0
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	e012      	b.n	800a016 <HAL_I2C_Init+0x18e>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	1e58      	subs	r0, r3, #1
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6859      	ldr	r1, [r3, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	0099      	lsls	r1, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	fbb0 f3f3 	udiv	r3, r0, r3
 800a006:	3301      	adds	r3, #1
 800a008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	bf0c      	ite	eq
 800a010:	2301      	moveq	r3, #1
 800a012:	2300      	movne	r3, #0
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <HAL_I2C_Init+0x196>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e022      	b.n	800a064 <HAL_I2C_Init+0x1dc>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <HAL_I2C_Init+0x1bc>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1e58      	subs	r0, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6859      	ldr	r1, [r3, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	440b      	add	r3, r1
 800a034:	fbb0 f3f3 	udiv	r3, r0, r3
 800a038:	3301      	adds	r3, #1
 800a03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a042:	e00f      	b.n	800a064 <HAL_I2C_Init+0x1dc>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	1e58      	subs	r0, r3, #1
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6859      	ldr	r1, [r3, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	0099      	lsls	r1, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	fbb0 f3f3 	udiv	r3, r0, r3
 800a05a:	3301      	adds	r3, #1
 800a05c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	6809      	ldr	r1, [r1, #0]
 800a068:	4313      	orrs	r3, r2
 800a06a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69da      	ldr	r2, [r3, #28]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6911      	ldr	r1, [r2, #16]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68d2      	ldr	r2, [r2, #12]
 800a09e:	4311      	orrs	r1, r2
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695a      	ldr	r2, [r3, #20]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0201 	orr.w	r2, r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	000186a0 	.word	0x000186a0
 800a100:	001e847f 	.word	0x001e847f
 800a104:	003d08ff 	.word	0x003d08ff
 800a108:	431bde83 	.word	0x431bde83
 800a10c:	10624dd3 	.word	0x10624dd3

0800a110 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e021      	b.n	800a166 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2224      	movs	r2, #36	@ 0x24
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0201 	bic.w	r2, r2, #1
 800a138:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe feec 	bl	8008f18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	817b      	strh	r3, [r7, #10]
 800a180:	4613      	mov	r3, r2
 800a182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a184:	f7ff f85e 	bl	8009244 <HAL_GetTick>
 800a188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b20      	cmp	r3, #32
 800a194:	f040 80e0 	bne.w	800a358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	2319      	movs	r3, #25
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4970      	ldr	r1, [pc, #448]	@ (800a364 <HAL_I2C_Master_Transmit+0x1f4>)
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fe5c 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e0d3      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_I2C_Master_Transmit+0x50>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e0cc      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d007      	beq.n	800a1e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f042 0201 	orr.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2221      	movs	r2, #33	@ 0x21
 800a1fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2210      	movs	r2, #16
 800a202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	893a      	ldrh	r2, [r7, #8]
 800a216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4a50      	ldr	r2, [pc, #320]	@ (800a368 <HAL_I2C_Master_Transmit+0x1f8>)
 800a226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a228:	8979      	ldrh	r1, [r7, #10]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	6a3a      	ldr	r2, [r7, #32]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 fc16 	bl	800aa60 <I2C_MasterRequestWrite>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e08d      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	613b      	str	r3, [r7, #16]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a254:	e066      	b.n	800a324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	6a39      	ldr	r1, [r7, #32]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 ff1a 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00d      	beq.n	800a282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d107      	bne.n	800a27e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a27c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e06b      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d11b      	bne.n	800a2f8 <HAL_I2C_Master_Transmit+0x188>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d017      	beq.n	800a2f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	6a39      	ldr	r1, [r7, #32]
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 ff11 	bl	800b124 <I2C_WaitOnBTFFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00d      	beq.n	800a324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d107      	bne.n	800a320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a31e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e01a      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d194      	bne.n	800a256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a33a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2220      	movs	r2, #32
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e000      	b.n	800a35a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a358:	2302      	movs	r3, #2
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	00100002 	.word	0x00100002
 800a368:	ffff0000 	.word	0xffff0000

0800a36c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af02      	add	r7, sp, #8
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	4608      	mov	r0, r1
 800a376:	4611      	mov	r1, r2
 800a378:	461a      	mov	r2, r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	817b      	strh	r3, [r7, #10]
 800a37e:	460b      	mov	r3, r1
 800a380:	813b      	strh	r3, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a386:	f7fe ff5d 	bl	8009244 <HAL_GetTick>
 800a38a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b20      	cmp	r3, #32
 800a396:	f040 80d9 	bne.w	800a54c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2319      	movs	r3, #25
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	496d      	ldr	r1, [pc, #436]	@ (800a558 <HAL_I2C_Mem_Write+0x1ec>)
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fd5b 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e0cc      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_I2C_Mem_Write+0x56>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e0c5      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d007      	beq.n	800a3e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2221      	movs	r2, #33	@ 0x21
 800a3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2240      	movs	r2, #64	@ 0x40
 800a404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a3a      	ldr	r2, [r7, #32]
 800a412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a41e:	b29a      	uxth	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4a4d      	ldr	r2, [pc, #308]	@ (800a55c <HAL_I2C_Mem_Write+0x1f0>)
 800a428:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a42a:	88f8      	ldrh	r0, [r7, #6]
 800a42c:	893a      	ldrh	r2, [r7, #8]
 800a42e:	8979      	ldrh	r1, [r7, #10]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	4603      	mov	r3, r0
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fb92 	bl	800ab64 <I2C_RequestMemoryWrite>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d052      	beq.n	800a4ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e081      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fe20 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00d      	beq.n	800a476 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d107      	bne.n	800a472 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e06b      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b04      	cmp	r3, #4
 800a4b2:	d11b      	bne.n	800a4ec <HAL_I2C_Mem_Write+0x180>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d017      	beq.n	800a4ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	781a      	ldrb	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1aa      	bne.n	800a44a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fe13 	bl	800b124 <I2C_WaitOnBTFFlagUntilTimeout>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00d      	beq.n	800a520 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d107      	bne.n	800a51c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a51a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e016      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a52e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2220      	movs	r2, #32
 800a534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	e000      	b.n	800a54e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a54c:	2302      	movs	r3, #2
  }
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	00100002 	.word	0x00100002
 800a55c:	ffff0000 	.word	0xffff0000

0800a560 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08c      	sub	sp, #48	@ 0x30
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	461a      	mov	r2, r3
 800a56e:	4603      	mov	r3, r0
 800a570:	817b      	strh	r3, [r7, #10]
 800a572:	460b      	mov	r3, r1
 800a574:	813b      	strh	r3, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a57e:	f7fe fe61 	bl	8009244 <HAL_GetTick>
 800a582:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	f040 8244 	bne.w	800aa1a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	2319      	movs	r3, #25
 800a598:	2201      	movs	r2, #1
 800a59a:	4982      	ldr	r1, [pc, #520]	@ (800a7a4 <HAL_I2C_Mem_Read+0x244>)
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f000 fc5f 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e237      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_I2C_Mem_Read+0x5a>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e230      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d007      	beq.n	800a5e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0201 	orr.w	r2, r2, #1
 800a5de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2222      	movs	r2, #34	@ 0x22
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2240      	movs	r2, #64	@ 0x40
 800a5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a60a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a616:	b29a      	uxth	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4a62      	ldr	r2, [pc, #392]	@ (800a7a8 <HAL_I2C_Mem_Read+0x248>)
 800a620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a622:	88f8      	ldrh	r0, [r7, #6]
 800a624:	893a      	ldrh	r2, [r7, #8]
 800a626:	8979      	ldrh	r1, [r7, #10]
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	4603      	mov	r3, r0
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fb2c 	bl	800ac90 <I2C_RequestMemoryRead>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e1ec      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a646:	2b00      	cmp	r3, #0
 800a648:	d113      	bne.n	800a672 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a64a:	2300      	movs	r3, #0
 800a64c:	61fb      	str	r3, [r7, #28]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	e1c0      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a676:	2b01      	cmp	r3, #1
 800a678:	d11e      	bne.n	800a6b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a688:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a68a:	b672      	cpsid	i
}
 800a68c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a68e:	2300      	movs	r3, #0
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	61bb      	str	r3, [r7, #24]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	61bb      	str	r3, [r7, #24]
 800a6a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6b4:	b662      	cpsie	i
}
 800a6b6:	e035      	b.n	800a724 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d11e      	bne.n	800a6fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6d0:	b672      	cpsid	i
}
 800a6d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6fa:	b662      	cpsie	i
}
 800a6fc:	e012      	b.n	800a724 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a70c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a724:	e166      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	f200 811f 	bhi.w	800a96e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a734:	2b01      	cmp	r3, #1
 800a736:	d123      	bne.n	800a780 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 fd39 	bl	800b1b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e167      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a768:	3b01      	subs	r3, #1
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a774:	b29b      	uxth	r3, r3
 800a776:	3b01      	subs	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a77e:	e139      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a784:	2b02      	cmp	r3, #2
 800a786:	d152      	bne.n	800a82e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	2200      	movs	r2, #0
 800a790:	4906      	ldr	r1, [pc, #24]	@ (800a7ac <HAL_I2C_Mem_Read+0x24c>)
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fb64 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d008      	beq.n	800a7b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e13c      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
 800a7a2:	bf00      	nop
 800a7a4:	00100002 	.word	0x00100002
 800a7a8:	ffff0000 	.word	0xffff0000
 800a7ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b0:	b672      	cpsid	i
}
 800a7b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691a      	ldr	r2, [r3, #16]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7f6:	b662      	cpsie	i
}
 800a7f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a816:	3b01      	subs	r3, #1
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a822:	b29b      	uxth	r3, r3
 800a824:	3b01      	subs	r3, #1
 800a826:	b29a      	uxth	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a82c:	e0e2      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	2200      	movs	r2, #0
 800a836:	497b      	ldr	r1, [pc, #492]	@ (800aa24 <HAL_I2C_Mem_Read+0x4c4>)
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fb11 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e0e9      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a856:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a858:	b672      	cpsid	i
}
 800a85a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a878:	3b01      	subs	r3, #1
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a884:	b29b      	uxth	r3, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	b29a      	uxth	r2, r3
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a88e:	4b66      	ldr	r3, [pc, #408]	@ (800aa28 <HAL_I2C_Mem_Read+0x4c8>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	08db      	lsrs	r3, r3, #3
 800a894:	4a65      	ldr	r2, [pc, #404]	@ (800aa2c <HAL_I2C_Mem_Read+0x4cc>)
 800a896:	fba2 2303 	umull	r2, r3, r2, r3
 800a89a:	0a1a      	lsrs	r2, r3, #8
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	00da      	lsls	r2, r3, #3
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d118      	bne.n	800a8e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ce:	f043 0220 	orr.w	r2, r3, #32
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a8d6:	b662      	cpsie	i
}
 800a8d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e09a      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d1d9      	bne.n	800a8a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691a      	ldr	r2, [r3, #16]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	b2d2      	uxtb	r2, r2
 800a910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a920:	3b01      	subs	r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29a      	uxth	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a936:	b662      	cpsie	i
}
 800a938:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691a      	ldr	r2, [r3, #16]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a944:	b2d2      	uxtb	r2, r2
 800a946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a956:	3b01      	subs	r3, #1
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a962:	b29b      	uxth	r3, r3
 800a964:	3b01      	subs	r3, #1
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a96c:	e042      	b.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a970:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fc1e 	bl	800b1b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e04c      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	b2d2      	uxtb	r2, r2
 800a98e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d118      	bne.n	800a9f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	691a      	ldr	r2, [r3, #16]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9cc:	b2d2      	uxtb	r2, r2
 800a9ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f47f ae94 	bne.w	800a726 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e000      	b.n	800aa1c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800aa1a:	2302      	movs	r3, #2
  }
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3728      	adds	r7, #40	@ 0x28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	00010004 	.word	0x00010004
 800aa28:	20000f50 	.word	0x20000f50
 800aa2c:	14f8b589 	.word	0x14f8b589

0800aa30 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa3e:	b2db      	uxtb	r3, r3
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr

0800aa4a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bc80      	pop	{r7}
 800aa5e:	4770      	bx	lr

0800aa60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d006      	beq.n	800aa8a <I2C_MasterRequestWrite+0x2a>
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d003      	beq.n	800aa8a <I2C_MasterRequestWrite+0x2a>
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa88:	d108      	bne.n	800aa9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	e00b      	b.n	800aab4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa0:	2b12      	cmp	r3, #18
 800aaa2:	d107      	bne.n	800aab4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aab2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f9cd 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00d      	beq.n	800aae8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aada:	d103      	bne.n	800aae4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aae2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e035      	b.n	800ab54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaf0:	d108      	bne.n	800ab04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aaf2:	897b      	ldrh	r3, [r7, #10]
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ab00:	611a      	str	r2, [r3, #16]
 800ab02:	e01b      	b.n	800ab3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ab04:	897b      	ldrh	r3, [r7, #10]
 800ab06:	11db      	asrs	r3, r3, #7
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 0306 	and.w	r3, r3, #6
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f063 030f 	orn	r3, r3, #15
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	490e      	ldr	r1, [pc, #56]	@ (800ab5c <I2C_MasterRequestWrite+0xfc>)
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 fa16 	bl	800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e010      	b.n	800ab54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ab32:	897b      	ldrh	r3, [r7, #10]
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	4907      	ldr	r1, [pc, #28]	@ (800ab60 <I2C_MasterRequestWrite+0x100>)
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fa06 	bl	800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e000      	b.n	800ab54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	00010008 	.word	0x00010008
 800ab60:	00010002 	.word	0x00010002

0800ab64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	461a      	mov	r2, r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	817b      	strh	r3, [r7, #10]
 800ab76:	460b      	mov	r3, r1
 800ab78:	813b      	strh	r3, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f960 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abb4:	d103      	bne.n	800abbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e05f      	b.n	800ac82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abc2:	897b      	ldrh	r3, [r7, #10]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	6a3a      	ldr	r2, [r7, #32]
 800abd6:	492d      	ldr	r1, [pc, #180]	@ (800ac8c <I2C_RequestMemoryWrite+0x128>)
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 f9bb 	bl	800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e04c      	b.n	800ac82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abe8:	2300      	movs	r3, #0
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	617b      	str	r3, [r7, #20]
 800abfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac00:	6a39      	ldr	r1, [r7, #32]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 fa46 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00d      	beq.n	800ac2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d107      	bne.n	800ac26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e02b      	b.n	800ac82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d105      	bne.n	800ac3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac30:	893b      	ldrh	r3, [r7, #8]
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	611a      	str	r2, [r3, #16]
 800ac3a:	e021      	b.n	800ac80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac3c:	893b      	ldrh	r3, [r7, #8]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac4c:	6a39      	ldr	r1, [r7, #32]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 fa20 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00d      	beq.n	800ac76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d107      	bne.n	800ac72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e005      	b.n	800ac82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac76:	893b      	ldrh	r3, [r7, #8]
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	00010002 	.word	0x00010002

0800ac90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	817b      	strh	r3, [r7, #10]
 800aca2:	460b      	mov	r3, r1
 800aca4:	813b      	strh	r3, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800acb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f8c2 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00d      	beq.n	800acfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf0:	d103      	bne.n	800acfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e0aa      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acfe:	897b      	ldrh	r3, [r7, #10]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	6a3a      	ldr	r2, [r7, #32]
 800ad12:	4952      	ldr	r1, [pc, #328]	@ (800ae5c <I2C_RequestMemoryRead+0x1cc>)
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f91d 	bl	800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e097      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad3c:	6a39      	ldr	r1, [r7, #32]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f9a8 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00d      	beq.n	800ad66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d107      	bne.n	800ad62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e076      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d105      	bne.n	800ad78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad6c:	893b      	ldrh	r3, [r7, #8]
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	611a      	str	r2, [r3, #16]
 800ad76:	e021      	b.n	800adbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad78:	893b      	ldrh	r3, [r7, #8]
 800ad7a:	0a1b      	lsrs	r3, r3, #8
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad88:	6a39      	ldr	r1, [r7, #32]
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 f982 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00d      	beq.n	800adb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d107      	bne.n	800adae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e050      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adb2:	893b      	ldrh	r3, [r7, #8]
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adbe:	6a39      	ldr	r1, [r7, #32]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f967 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00d      	beq.n	800ade8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	2b04      	cmp	r3, #4
 800add2:	d107      	bne.n	800ade4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ade2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e035      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800adf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f82b 	bl	800ae60 <I2C_WaitOnFlagUntilTimeout>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00d      	beq.n	800ae2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae1e:	d103      	bne.n	800ae28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e013      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae2c:	897b      	ldrh	r3, [r7, #10]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f043 0301 	orr.w	r3, r3, #1
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	6a3a      	ldr	r2, [r7, #32]
 800ae40:	4906      	ldr	r1, [pc, #24]	@ (800ae5c <I2C_RequestMemoryRead+0x1cc>)
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f000 f886 	bl	800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e000      	b.n	800ae54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	00010002 	.word	0x00010002

0800ae60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae70:	e048      	b.n	800af04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae78:	d044      	beq.n	800af04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae7a:	f7fe f9e3 	bl	8009244 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d302      	bcc.n	800ae90 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d139      	bne.n	800af04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	0c1b      	lsrs	r3, r3, #16
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d10d      	bne.n	800aeb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	43da      	mvns	r2, r3
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4013      	ands	r3, r2
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bf0c      	ite	eq
 800aeac:	2301      	moveq	r3, #1
 800aeae:	2300      	movne	r3, #0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	e00c      	b.n	800aed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	43da      	mvns	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	4013      	ands	r3, r2
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bf0c      	ite	eq
 800aec8:	2301      	moveq	r3, #1
 800aeca:	2300      	movne	r3, #0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	461a      	mov	r2, r3
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d116      	bne.n	800af04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2220      	movs	r2, #32
 800aee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef0:	f043 0220 	orr.w	r2, r3, #32
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e023      	b.n	800af4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	0c1b      	lsrs	r3, r3, #16
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d10d      	bne.n	800af2a <I2C_WaitOnFlagUntilTimeout+0xca>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	43da      	mvns	r2, r3
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	4013      	ands	r3, r2
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bf0c      	ite	eq
 800af20:	2301      	moveq	r3, #1
 800af22:	2300      	movne	r3, #0
 800af24:	b2db      	uxtb	r3, r3
 800af26:	461a      	mov	r2, r3
 800af28:	e00c      	b.n	800af44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	43da      	mvns	r2, r3
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	4013      	ands	r3, r2
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bf0c      	ite	eq
 800af3c:	2301      	moveq	r3, #1
 800af3e:	2300      	movne	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	429a      	cmp	r2, r3
 800af48:	d093      	beq.n	800ae72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af62:	e071      	b.n	800b048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af72:	d123      	bne.n	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800af8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2220      	movs	r2, #32
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa8:	f043 0204 	orr.w	r2, r3, #4
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e067      	b.n	800b08c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afc2:	d041      	beq.n	800b048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afc4:	f7fe f93e 	bl	8009244 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d302      	bcc.n	800afda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d136      	bne.n	800b048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	0c1b      	lsrs	r3, r3, #16
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d10c      	bne.n	800affe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	43da      	mvns	r2, r3
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4013      	ands	r3, r2
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bf14      	ite	ne
 800aff6:	2301      	movne	r3, #1
 800aff8:	2300      	moveq	r3, #0
 800affa:	b2db      	uxtb	r3, r3
 800affc:	e00b      	b.n	800b016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	43da      	mvns	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	4013      	ands	r3, r2
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bf14      	ite	ne
 800b010:	2301      	movne	r3, #1
 800b012:	2300      	moveq	r3, #0
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d016      	beq.n	800b048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2220      	movs	r2, #32
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b034:	f043 0220 	orr.w	r2, r3, #32
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e021      	b.n	800b08c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10c      	bne.n	800b06c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	43da      	mvns	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4013      	ands	r3, r2
 800b05e:	b29b      	uxth	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	bf14      	ite	ne
 800b064:	2301      	movne	r3, #1
 800b066:	2300      	moveq	r3, #0
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	e00b      	b.n	800b084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	43da      	mvns	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4013      	ands	r3, r2
 800b078:	b29b      	uxth	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bf14      	ite	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	2300      	moveq	r3, #0
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	f47f af6d 	bne.w	800af64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0a0:	e034      	b.n	800b10c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f8e3 	bl	800b26e <I2C_IsAcknowledgeFailed>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e034      	b.n	800b11c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0b8:	d028      	beq.n	800b10c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ba:	f7fe f8c3 	bl	8009244 <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d11d      	bne.n	800b10c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0da:	2b80      	cmp	r3, #128	@ 0x80
 800b0dc:	d016      	beq.n	800b10c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f8:	f043 0220 	orr.w	r2, r3, #32
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e007      	b.n	800b11c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b116:	2b80      	cmp	r3, #128	@ 0x80
 800b118:	d1c3      	bne.n	800b0a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b130:	e034      	b.n	800b19c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f89b 	bl	800b26e <I2C_IsAcknowledgeFailed>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e034      	b.n	800b1ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b148:	d028      	beq.n	800b19c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b14a:	f7fe f87b 	bl	8009244 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	429a      	cmp	r2, r3
 800b158:	d302      	bcc.n	800b160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d11d      	bne.n	800b19c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	f003 0304 	and.w	r3, r3, #4
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d016      	beq.n	800b19c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2220      	movs	r2, #32
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b188:	f043 0220 	orr.w	r2, r3, #32
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e007      	b.n	800b1ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	f003 0304 	and.w	r3, r3, #4
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d1c3      	bne.n	800b132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1c0:	e049      	b.n	800b256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b10      	cmp	r3, #16
 800b1ce:	d119      	bne.n	800b204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f06f 0210 	mvn.w	r2, #16
 800b1d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e030      	b.n	800b266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b204:	f7fe f81e 	bl	8009244 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	d302      	bcc.n	800b21a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d11d      	bne.n	800b256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b224:	2b40      	cmp	r3, #64	@ 0x40
 800b226:	d016      	beq.n	800b256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2220      	movs	r2, #32
 800b232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b242:	f043 0220 	orr.w	r2, r3, #32
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e007      	b.n	800b266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b260:	2b40      	cmp	r3, #64	@ 0x40
 800b262:	d1ae      	bne.n	800b1c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b284:	d11b      	bne.n	800b2be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b28e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2aa:	f043 0204 	orr.w	r2, r3, #4
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e000      	b.n	800b2c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bc80      	pop	{r7}
 800b2c8:	4770      	bx	lr
	...

0800b2cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e272      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8087 	beq.w	800b3fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b2ec:	4b92      	ldr	r3, [pc, #584]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f003 030c 	and.w	r3, r3, #12
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d00c      	beq.n	800b312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b2f8:	4b8f      	ldr	r3, [pc, #572]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f003 030c 	and.w	r3, r3, #12
 800b300:	2b08      	cmp	r3, #8
 800b302:	d112      	bne.n	800b32a <HAL_RCC_OscConfig+0x5e>
 800b304:	4b8c      	ldr	r3, [pc, #560]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b310:	d10b      	bne.n	800b32a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b312:	4b89      	ldr	r3, [pc, #548]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d06c      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x12c>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d168      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e24c      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b332:	d106      	bne.n	800b342 <HAL_RCC_OscConfig+0x76>
 800b334:	4b80      	ldr	r3, [pc, #512]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a7f      	ldr	r2, [pc, #508]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b33a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	e02e      	b.n	800b3a0 <HAL_RCC_OscConfig+0xd4>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10c      	bne.n	800b364 <HAL_RCC_OscConfig+0x98>
 800b34a:	4b7b      	ldr	r3, [pc, #492]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a7a      	ldr	r2, [pc, #488]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4b78      	ldr	r3, [pc, #480]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a77      	ldr	r2, [pc, #476]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b35c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	e01d      	b.n	800b3a0 <HAL_RCC_OscConfig+0xd4>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b36c:	d10c      	bne.n	800b388 <HAL_RCC_OscConfig+0xbc>
 800b36e:	4b72      	ldr	r3, [pc, #456]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a71      	ldr	r2, [pc, #452]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	4b6f      	ldr	r3, [pc, #444]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a6e      	ldr	r2, [pc, #440]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	e00b      	b.n	800b3a0 <HAL_RCC_OscConfig+0xd4>
 800b388:	4b6b      	ldr	r3, [pc, #428]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a6a      	ldr	r2, [pc, #424]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b38e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	4b68      	ldr	r3, [pc, #416]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a67      	ldr	r2, [pc, #412]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b39a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b39e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d013      	beq.n	800b3d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3a8:	f7fd ff4c 	bl	8009244 <HAL_GetTick>
 800b3ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3b0:	f7fd ff48 	bl	8009244 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b64      	cmp	r3, #100	@ 0x64
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e200      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3c2:	4b5d      	ldr	r3, [pc, #372]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0f0      	beq.n	800b3b0 <HAL_RCC_OscConfig+0xe4>
 800b3ce:	e014      	b.n	800b3fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3d0:	f7fd ff38 	bl	8009244 <HAL_GetTick>
 800b3d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3d6:	e008      	b.n	800b3ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3d8:	f7fd ff34 	bl	8009244 <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b64      	cmp	r3, #100	@ 0x64
 800b3e4:	d901      	bls.n	800b3ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e1ec      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3ea:	4b53      	ldr	r3, [pc, #332]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1f0      	bne.n	800b3d8 <HAL_RCC_OscConfig+0x10c>
 800b3f6:	e000      	b.n	800b3fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0302 	and.w	r3, r3, #2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d063      	beq.n	800b4ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b406:	4b4c      	ldr	r3, [pc, #304]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f003 030c 	and.w	r3, r3, #12
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00b      	beq.n	800b42a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b412:	4b49      	ldr	r3, [pc, #292]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f003 030c 	and.w	r3, r3, #12
 800b41a:	2b08      	cmp	r3, #8
 800b41c:	d11c      	bne.n	800b458 <HAL_RCC_OscConfig+0x18c>
 800b41e:	4b46      	ldr	r3, [pc, #280]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d116      	bne.n	800b458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b42a:	4b43      	ldr	r3, [pc, #268]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <HAL_RCC_OscConfig+0x176>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d001      	beq.n	800b442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e1c0      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b442:	4b3d      	ldr	r3, [pc, #244]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	4939      	ldr	r1, [pc, #228]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b452:	4313      	orrs	r3, r2
 800b454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b456:	e03a      	b.n	800b4ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d020      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b460:	4b36      	ldr	r3, [pc, #216]	@ (800b53c <HAL_RCC_OscConfig+0x270>)
 800b462:	2201      	movs	r2, #1
 800b464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b466:	f7fd feed 	bl	8009244 <HAL_GetTick>
 800b46a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b46c:	e008      	b.n	800b480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b46e:	f7fd fee9 	bl	8009244 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e1a1      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b480:	4b2d      	ldr	r3, [pc, #180]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b48c:	4b2a      	ldr	r3, [pc, #168]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	4927      	ldr	r1, [pc, #156]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	600b      	str	r3, [r1, #0]
 800b4a0:	e015      	b.n	800b4ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4a2:	4b26      	ldr	r3, [pc, #152]	@ (800b53c <HAL_RCC_OscConfig+0x270>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4a8:	f7fd fecc 	bl	8009244 <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4b0:	f7fd fec8 	bl	8009244 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e180      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1f0      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d03a      	beq.n	800b550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d019      	beq.n	800b516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4e2:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <HAL_RCC_OscConfig+0x274>)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4e8:	f7fd feac 	bl	8009244 <HAL_GetTick>
 800b4ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4ee:	e008      	b.n	800b502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4f0:	f7fd fea8 	bl	8009244 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d901      	bls.n	800b502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e160      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b502:	4b0d      	ldr	r3, [pc, #52]	@ (800b538 <HAL_RCC_OscConfig+0x26c>)
 800b504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f0      	beq.n	800b4f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b50e:	2001      	movs	r0, #1
 800b510:	f000 face 	bl	800bab0 <RCC_Delay>
 800b514:	e01c      	b.n	800b550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b516:	4b0a      	ldr	r3, [pc, #40]	@ (800b540 <HAL_RCC_OscConfig+0x274>)
 800b518:	2200      	movs	r2, #0
 800b51a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b51c:	f7fd fe92 	bl	8009244 <HAL_GetTick>
 800b520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b522:	e00f      	b.n	800b544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b524:	f7fd fe8e 	bl	8009244 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d908      	bls.n	800b544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e146      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
 800b536:	bf00      	nop
 800b538:	40021000 	.word	0x40021000
 800b53c:	42420000 	.word	0x42420000
 800b540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b544:	4b92      	ldr	r3, [pc, #584]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b548:	f003 0302 	and.w	r3, r3, #2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e9      	bne.n	800b524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 80a6 	beq.w	800b6aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b55e:	2300      	movs	r3, #0
 800b560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b562:	4b8b      	ldr	r3, [pc, #556]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10d      	bne.n	800b58a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b56e:	4b88      	ldr	r3, [pc, #544]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	4a87      	ldr	r2, [pc, #540]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b578:	61d3      	str	r3, [r2, #28]
 800b57a:	4b85      	ldr	r3, [pc, #532]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b582:	60bb      	str	r3, [r7, #8]
 800b584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b586:	2301      	movs	r3, #1
 800b588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b58a:	4b82      	ldr	r3, [pc, #520]	@ (800b794 <HAL_RCC_OscConfig+0x4c8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b592:	2b00      	cmp	r3, #0
 800b594:	d118      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b596:	4b7f      	ldr	r3, [pc, #508]	@ (800b794 <HAL_RCC_OscConfig+0x4c8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a7e      	ldr	r2, [pc, #504]	@ (800b794 <HAL_RCC_OscConfig+0x4c8>)
 800b59c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5a2:	f7fd fe4f 	bl	8009244 <HAL_GetTick>
 800b5a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5a8:	e008      	b.n	800b5bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5aa:	f7fd fe4b 	bl	8009244 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b64      	cmp	r3, #100	@ 0x64
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e103      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5bc:	4b75      	ldr	r3, [pc, #468]	@ (800b794 <HAL_RCC_OscConfig+0x4c8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0f0      	beq.n	800b5aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d106      	bne.n	800b5de <HAL_RCC_OscConfig+0x312>
 800b5d0:	4b6f      	ldr	r3, [pc, #444]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	4a6e      	ldr	r2, [pc, #440]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	6213      	str	r3, [r2, #32]
 800b5dc:	e02d      	b.n	800b63a <HAL_RCC_OscConfig+0x36e>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10c      	bne.n	800b600 <HAL_RCC_OscConfig+0x334>
 800b5e6:	4b6a      	ldr	r3, [pc, #424]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	4a69      	ldr	r2, [pc, #420]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5ec:	f023 0301 	bic.w	r3, r3, #1
 800b5f0:	6213      	str	r3, [r2, #32]
 800b5f2:	4b67      	ldr	r3, [pc, #412]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	4a66      	ldr	r2, [pc, #408]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b5f8:	f023 0304 	bic.w	r3, r3, #4
 800b5fc:	6213      	str	r3, [r2, #32]
 800b5fe:	e01c      	b.n	800b63a <HAL_RCC_OscConfig+0x36e>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b05      	cmp	r3, #5
 800b606:	d10c      	bne.n	800b622 <HAL_RCC_OscConfig+0x356>
 800b608:	4b61      	ldr	r3, [pc, #388]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	4a60      	ldr	r2, [pc, #384]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b60e:	f043 0304 	orr.w	r3, r3, #4
 800b612:	6213      	str	r3, [r2, #32]
 800b614:	4b5e      	ldr	r3, [pc, #376]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	4a5d      	ldr	r2, [pc, #372]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	6213      	str	r3, [r2, #32]
 800b620:	e00b      	b.n	800b63a <HAL_RCC_OscConfig+0x36e>
 800b622:	4b5b      	ldr	r3, [pc, #364]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	4a5a      	ldr	r2, [pc, #360]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	6213      	str	r3, [r2, #32]
 800b62e:	4b58      	ldr	r3, [pc, #352]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	4a57      	ldr	r2, [pc, #348]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b634:	f023 0304 	bic.w	r3, r3, #4
 800b638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d015      	beq.n	800b66e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b642:	f7fd fdff 	bl	8009244 <HAL_GetTick>
 800b646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b648:	e00a      	b.n	800b660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b64a:	f7fd fdfb 	bl	8009244 <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b658:	4293      	cmp	r3, r2
 800b65a:	d901      	bls.n	800b660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e0b1      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b660:	4b4b      	ldr	r3, [pc, #300]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0ee      	beq.n	800b64a <HAL_RCC_OscConfig+0x37e>
 800b66c:	e014      	b.n	800b698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b66e:	f7fd fde9 	bl	8009244 <HAL_GetTick>
 800b672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b674:	e00a      	b.n	800b68c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b676:	f7fd fde5 	bl	8009244 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b684:	4293      	cmp	r3, r2
 800b686:	d901      	bls.n	800b68c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e09b      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b68c:	4b40      	ldr	r3, [pc, #256]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1ee      	bne.n	800b676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d105      	bne.n	800b6aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b69e:	4b3c      	ldr	r3, [pc, #240]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	4a3b      	ldr	r2, [pc, #236]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b6a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8087 	beq.w	800b7c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6b4:	4b36      	ldr	r3, [pc, #216]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f003 030c 	and.w	r3, r3, #12
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d061      	beq.n	800b784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d146      	bne.n	800b756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6c8:	4b33      	ldr	r3, [pc, #204]	@ (800b798 <HAL_RCC_OscConfig+0x4cc>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6ce:	f7fd fdb9 	bl	8009244 <HAL_GetTick>
 800b6d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6d4:	e008      	b.n	800b6e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6d6:	f7fd fdb5 	bl	8009244 <HAL_GetTick>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d901      	bls.n	800b6e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e06d      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6e8:	4b29      	ldr	r3, [pc, #164]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1f0      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6fc:	d108      	bne.n	800b710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b6fe:	4b24      	ldr	r3, [pc, #144]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	4921      	ldr	r1, [pc, #132]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b710:	4b1f      	ldr	r3, [pc, #124]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a19      	ldr	r1, [r3, #32]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b720:	430b      	orrs	r3, r1
 800b722:	491b      	ldr	r1, [pc, #108]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b724:	4313      	orrs	r3, r2
 800b726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b728:	4b1b      	ldr	r3, [pc, #108]	@ (800b798 <HAL_RCC_OscConfig+0x4cc>)
 800b72a:	2201      	movs	r2, #1
 800b72c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b72e:	f7fd fd89 	bl	8009244 <HAL_GetTick>
 800b732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b734:	e008      	b.n	800b748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b736:	f7fd fd85 	bl	8009244 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	2b02      	cmp	r3, #2
 800b742:	d901      	bls.n	800b748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e03d      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b748:	4b11      	ldr	r3, [pc, #68]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d0f0      	beq.n	800b736 <HAL_RCC_OscConfig+0x46a>
 800b754:	e035      	b.n	800b7c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b756:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <HAL_RCC_OscConfig+0x4cc>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b75c:	f7fd fd72 	bl	8009244 <HAL_GetTick>
 800b760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b762:	e008      	b.n	800b776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b764:	f7fd fd6e 	bl	8009244 <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d901      	bls.n	800b776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e026      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b776:	4b06      	ldr	r3, [pc, #24]	@ (800b790 <HAL_RCC_OscConfig+0x4c4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1f0      	bne.n	800b764 <HAL_RCC_OscConfig+0x498>
 800b782:	e01e      	b.n	800b7c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	69db      	ldr	r3, [r3, #28]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d107      	bne.n	800b79c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e019      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
 800b790:	40021000 	.word	0x40021000
 800b794:	40007000 	.word	0x40007000
 800b798:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b79c:	4b0b      	ldr	r3, [pc, #44]	@ (800b7cc <HAL_RCC_OscConfig+0x500>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d106      	bne.n	800b7be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d001      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	40021000 	.word	0x40021000

0800b7d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0d0      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7e4:	4b6a      	ldr	r3, [pc, #424]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d910      	bls.n	800b814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7f2:	4b67      	ldr	r3, [pc, #412]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f023 0207 	bic.w	r2, r3, #7
 800b7fa:	4965      	ldr	r1, [pc, #404]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b802:	4b63      	ldr	r3, [pc, #396]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d001      	beq.n	800b814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e0b8      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d020      	beq.n	800b862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b82c:	4b59      	ldr	r3, [pc, #356]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4a58      	ldr	r2, [pc, #352]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	2b00      	cmp	r3, #0
 800b842:	d005      	beq.n	800b850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b844:	4b53      	ldr	r3, [pc, #332]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4a52      	ldr	r2, [pc, #328]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b84a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b84e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b850:	4b50      	ldr	r3, [pc, #320]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	494d      	ldr	r1, [pc, #308]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d040      	beq.n	800b8f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d107      	bne.n	800b886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b876:	4b47      	ldr	r3, [pc, #284]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d115      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e07f      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d107      	bne.n	800b89e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b88e:	4b41      	ldr	r3, [pc, #260]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d109      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e073      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b89e:	4b3d      	ldr	r3, [pc, #244]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e06b      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8ae:	4b39      	ldr	r3, [pc, #228]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f023 0203 	bic.w	r2, r3, #3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4936      	ldr	r1, [pc, #216]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8c0:	f7fd fcc0 	bl	8009244 <HAL_GetTick>
 800b8c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8c6:	e00a      	b.n	800b8de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8c8:	f7fd fcbc 	bl	8009244 <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e053      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8de:	4b2d      	ldr	r3, [pc, #180]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f003 020c 	and.w	r2, r3, #12
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d1eb      	bne.n	800b8c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8f0:	4b27      	ldr	r3, [pc, #156]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d210      	bcs.n	800b920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8fe:	4b24      	ldr	r3, [pc, #144]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f023 0207 	bic.w	r2, r3, #7
 800b906:	4922      	ldr	r1, [pc, #136]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b90e:	4b20      	ldr	r3, [pc, #128]	@ (800b990 <HAL_RCC_ClockConfig+0x1c0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0307 	and.w	r3, r3, #7
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d001      	beq.n	800b920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e032      	b.n	800b986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d008      	beq.n	800b93e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b92c:	4b19      	ldr	r3, [pc, #100]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4916      	ldr	r1, [pc, #88]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d009      	beq.n	800b95e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b94a:	4b12      	ldr	r3, [pc, #72]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	490e      	ldr	r1, [pc, #56]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b95a:	4313      	orrs	r3, r2
 800b95c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b95e:	f000 f821 	bl	800b9a4 <HAL_RCC_GetSysClockFreq>
 800b962:	4602      	mov	r2, r0
 800b964:	4b0b      	ldr	r3, [pc, #44]	@ (800b994 <HAL_RCC_ClockConfig+0x1c4>)
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	091b      	lsrs	r3, r3, #4
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	490a      	ldr	r1, [pc, #40]	@ (800b998 <HAL_RCC_ClockConfig+0x1c8>)
 800b970:	5ccb      	ldrb	r3, [r1, r3]
 800b972:	fa22 f303 	lsr.w	r3, r2, r3
 800b976:	4a09      	ldr	r2, [pc, #36]	@ (800b99c <HAL_RCC_ClockConfig+0x1cc>)
 800b978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b97a:	4b09      	ldr	r3, [pc, #36]	@ (800b9a0 <HAL_RCC_ClockConfig+0x1d0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fd fc1e 	bl	80091c0 <HAL_InitTick>

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	40022000 	.word	0x40022000
 800b994:	40021000 	.word	0x40021000
 800b998:	0800db5c 	.word	0x0800db5c
 800b99c:	20000f50 	.word	0x20000f50
 800b9a0:	20000f54 	.word	0x20000f54

0800b9a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b9be:	4b1e      	ldr	r3, [pc, #120]	@ (800ba38 <HAL_RCC_GetSysClockFreq+0x94>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f003 030c 	and.w	r3, r3, #12
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	d002      	beq.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x30>
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	d003      	beq.n	800b9da <HAL_RCC_GetSysClockFreq+0x36>
 800b9d2:	e027      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b9d4:	4b19      	ldr	r3, [pc, #100]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0x98>)
 800b9d6:	613b      	str	r3, [r7, #16]
      break;
 800b9d8:	e027      	b.n	800ba2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	0c9b      	lsrs	r3, r3, #18
 800b9de:	f003 030f 	and.w	r3, r3, #15
 800b9e2:	4a17      	ldr	r2, [pc, #92]	@ (800ba40 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b9e4:	5cd3      	ldrb	r3, [r2, r3]
 800b9e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d010      	beq.n	800ba14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b9f2:	4b11      	ldr	r3, [pc, #68]	@ (800ba38 <HAL_RCC_GetSysClockFreq+0x94>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	0c5b      	lsrs	r3, r3, #17
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	4a11      	ldr	r2, [pc, #68]	@ (800ba44 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b9fe:	5cd3      	ldrb	r3, [r2, r3]
 800ba00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a0d      	ldr	r2, [pc, #52]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0x98>)
 800ba06:	fb03 f202 	mul.w	r2, r3, r2
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	e004      	b.n	800ba1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a0c      	ldr	r2, [pc, #48]	@ (800ba48 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
 800ba1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	613b      	str	r3, [r7, #16]
      break;
 800ba22:	e002      	b.n	800ba2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ba24:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0x98>)
 800ba26:	613b      	str	r3, [r7, #16]
      break;
 800ba28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba2a:	693b      	ldr	r3, [r7, #16]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bc80      	pop	{r7}
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40021000 	.word	0x40021000
 800ba3c:	007a1200 	.word	0x007a1200
 800ba40:	0800db74 	.word	0x0800db74
 800ba44:	0800db84 	.word	0x0800db84
 800ba48:	003d0900 	.word	0x003d0900

0800ba4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba50:	4b02      	ldr	r3, [pc, #8]	@ (800ba5c <HAL_RCC_GetHCLKFreq+0x10>)
 800ba52:	681b      	ldr	r3, [r3, #0]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr
 800ba5c:	20000f50 	.word	0x20000f50

0800ba60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba64:	f7ff fff2 	bl	800ba4c <HAL_RCC_GetHCLKFreq>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	4b05      	ldr	r3, [pc, #20]	@ (800ba80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	f003 0307 	and.w	r3, r3, #7
 800ba74:	4903      	ldr	r1, [pc, #12]	@ (800ba84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba76:	5ccb      	ldrb	r3, [r1, r3]
 800ba78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	40021000 	.word	0x40021000
 800ba84:	0800db6c 	.word	0x0800db6c

0800ba88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ba8c:	f7ff ffde 	bl	800ba4c <HAL_RCC_GetHCLKFreq>
 800ba90:	4602      	mov	r2, r0
 800ba92:	4b05      	ldr	r3, [pc, #20]	@ (800baa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	0adb      	lsrs	r3, r3, #11
 800ba98:	f003 0307 	and.w	r3, r3, #7
 800ba9c:	4903      	ldr	r1, [pc, #12]	@ (800baac <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba9e:	5ccb      	ldrb	r3, [r1, r3]
 800baa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	40021000 	.word	0x40021000
 800baac:	0800db6c 	.word	0x0800db6c

0800bab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bab8:	4b0a      	ldr	r3, [pc, #40]	@ (800bae4 <RCC_Delay+0x34>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a0a      	ldr	r2, [pc, #40]	@ (800bae8 <RCC_Delay+0x38>)
 800babe:	fba2 2303 	umull	r2, r3, r2, r3
 800bac2:	0a5b      	lsrs	r3, r3, #9
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
 800baca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bacc:	bf00      	nop
  }
  while (Delay --);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	60fa      	str	r2, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f9      	bne.n	800bacc <RCC_Delay+0x1c>
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	bc80      	pop	{r7}
 800bae2:	4770      	bx	lr
 800bae4:	20000f50 	.word	0x20000f50
 800bae8:	10624dd3 	.word	0x10624dd3

0800baec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e041      	b.n	800bb82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d106      	bne.n	800bb18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7fd fa22 	bl	8008f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3304      	adds	r3, #4
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f000 fa82 	bl	800c034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d001      	beq.n	800bba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e044      	b.n	800bc2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f042 0201 	orr.w	r2, r2, #1
 800bbba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc38 <HAL_TIM_Base_Start_IT+0xac>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d018      	beq.n	800bbf8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a1c      	ldr	r2, [pc, #112]	@ (800bc3c <HAL_TIM_Base_Start_IT+0xb0>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d013      	beq.n	800bbf8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd8:	d00e      	beq.n	800bbf8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a18      	ldr	r2, [pc, #96]	@ (800bc40 <HAL_TIM_Base_Start_IT+0xb4>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d009      	beq.n	800bbf8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a16      	ldr	r2, [pc, #88]	@ (800bc44 <HAL_TIM_Base_Start_IT+0xb8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d004      	beq.n	800bbf8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a15      	ldr	r2, [pc, #84]	@ (800bc48 <HAL_TIM_Base_Start_IT+0xbc>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d111      	bne.n	800bc1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f003 0307 	and.w	r3, r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b06      	cmp	r3, #6
 800bc08:	d010      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f042 0201 	orr.w	r2, r2, #1
 800bc18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc1a:	e007      	b.n	800bc2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0201 	orr.w	r2, r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bc80      	pop	{r7}
 800bc36:	4770      	bx	lr
 800bc38:	40012c00 	.word	0x40012c00
 800bc3c:	40013400 	.word	0x40013400
 800bc40:	40000400 	.word	0x40000400
 800bc44:	40000800 	.word	0x40000800
 800bc48:	40000c00 	.word	0x40000c00

0800bc4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	f003 0302 	and.w	r3, r3, #2
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d122      	bne.n	800bca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f003 0302 	and.w	r3, r3, #2
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d11b      	bne.n	800bca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f06f 0202 	mvn.w	r2, #2
 800bc78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	f003 0303 	and.w	r3, r3, #3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f9b4 	bl	800bffc <HAL_TIM_IC_CaptureCallback>
 800bc94:	e005      	b.n	800bca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f9a7 	bl	800bfea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f9b6 	bl	800c00e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d122      	bne.n	800bcfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d11b      	bne.n	800bcfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f06f 0204 	mvn.w	r2, #4
 800bccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f98a 	bl	800bffc <HAL_TIM_IC_CaptureCallback>
 800bce8:	e005      	b.n	800bcf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f97d 	bl	800bfea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f98c 	bl	800c00e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	f003 0308 	and.w	r3, r3, #8
 800bd06:	2b08      	cmp	r3, #8
 800bd08:	d122      	bne.n	800bd50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b08      	cmp	r3, #8
 800bd16:	d11b      	bne.n	800bd50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f06f 0208 	mvn.w	r2, #8
 800bd20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2204      	movs	r2, #4
 800bd26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f960 	bl	800bffc <HAL_TIM_IC_CaptureCallback>
 800bd3c:	e005      	b.n	800bd4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f953 	bl	800bfea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f962 	bl	800c00e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f003 0310 	and.w	r3, r3, #16
 800bd5a:	2b10      	cmp	r3, #16
 800bd5c:	d122      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b10      	cmp	r3, #16
 800bd6a:	d11b      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f06f 0210 	mvn.w	r2, #16
 800bd74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2208      	movs	r2, #8
 800bd7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f936 	bl	800bffc <HAL_TIM_IC_CaptureCallback>
 800bd90:	e005      	b.n	800bd9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f929 	bl	800bfea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f938 	bl	800c00e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d10e      	bne.n	800bdd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d107      	bne.n	800bdd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f06f 0201 	mvn.w	r2, #1
 800bdc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7fc fd5e 	bl	800888c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdda:	2b80      	cmp	r3, #128	@ 0x80
 800bddc:	d10e      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde8:	2b80      	cmp	r3, #128	@ 0x80
 800bdea:	d107      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bdf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 faa1 	bl	800c33e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be06:	2b40      	cmp	r3, #64	@ 0x40
 800be08:	d10e      	bne.n	800be28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be14:	2b40      	cmp	r3, #64	@ 0x40
 800be16:	d107      	bne.n	800be28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f8fc 	bl	800c020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0320 	and.w	r3, r3, #32
 800be32:	2b20      	cmp	r3, #32
 800be34:	d10e      	bne.n	800be54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f003 0320 	and.w	r3, r3, #32
 800be40:	2b20      	cmp	r3, #32
 800be42:	d107      	bne.n	800be54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f06f 0220 	mvn.w	r2, #32
 800be4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fa6c 	bl	800c32c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be70:	2b01      	cmp	r3, #1
 800be72:	d101      	bne.n	800be78 <HAL_TIM_ConfigClockSource+0x1c>
 800be74:	2302      	movs	r3, #2
 800be76:	e0b4      	b.n	800bfe2 <HAL_TIM_ConfigClockSource+0x186>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2202      	movs	r2, #2
 800be84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800be96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beb0:	d03e      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd4>
 800beb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beb6:	f200 8087 	bhi.w	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800beba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bebe:	f000 8086 	beq.w	800bfce <HAL_TIM_ConfigClockSource+0x172>
 800bec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bec6:	d87f      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bec8:	2b70      	cmp	r3, #112	@ 0x70
 800beca:	d01a      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0xa6>
 800becc:	2b70      	cmp	r3, #112	@ 0x70
 800bece:	d87b      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bed0:	2b60      	cmp	r3, #96	@ 0x60
 800bed2:	d050      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x11a>
 800bed4:	2b60      	cmp	r3, #96	@ 0x60
 800bed6:	d877      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bed8:	2b50      	cmp	r3, #80	@ 0x50
 800beda:	d03c      	beq.n	800bf56 <HAL_TIM_ConfigClockSource+0xfa>
 800bedc:	2b50      	cmp	r3, #80	@ 0x50
 800bede:	d873      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bee0:	2b40      	cmp	r3, #64	@ 0x40
 800bee2:	d058      	beq.n	800bf96 <HAL_TIM_ConfigClockSource+0x13a>
 800bee4:	2b40      	cmp	r3, #64	@ 0x40
 800bee6:	d86f      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bee8:	2b30      	cmp	r3, #48	@ 0x30
 800beea:	d064      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0x15a>
 800beec:	2b30      	cmp	r3, #48	@ 0x30
 800beee:	d86b      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bef0:	2b20      	cmp	r3, #32
 800bef2:	d060      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0x15a>
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	d867      	bhi.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d05c      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0x15a>
 800befc:	2b10      	cmp	r3, #16
 800befe:	d05a      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0x15a>
 800bf00:	e062      	b.n	800bfc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf12:	f000 f980 	bl	800c216 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	609a      	str	r2, [r3, #8]
      break;
 800bf2e:	e04f      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf40:	f000 f969 	bl	800c216 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf52:	609a      	str	r2, [r3, #8]
      break;
 800bf54:	e03c      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf62:	461a      	mov	r2, r3
 800bf64:	f000 f8e0 	bl	800c128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2150      	movs	r1, #80	@ 0x50
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f937 	bl	800c1e2 <TIM_ITRx_SetConfig>
      break;
 800bf74:	e02c      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf82:	461a      	mov	r2, r3
 800bf84:	f000 f8fe 	bl	800c184 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2160      	movs	r1, #96	@ 0x60
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 f927 	bl	800c1e2 <TIM_ITRx_SetConfig>
      break;
 800bf94:	e01c      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f000 f8c0 	bl	800c128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2140      	movs	r1, #64	@ 0x40
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f917 	bl	800c1e2 <TIM_ITRx_SetConfig>
      break;
 800bfb4:	e00c      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f000 f90e 	bl	800c1e2 <TIM_ITRx_SetConfig>
      break;
 800bfc6:	e003      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
      break;
 800bfcc:	e000      	b.n	800bfd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bfce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bc80      	pop	{r7}
 800bffa:	4770      	bx	lr

0800bffc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr

0800c00e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c016:	bf00      	nop
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bc80      	pop	{r7}
 800c01e:	4770      	bx	lr

0800c020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bc80      	pop	{r7}
 800c030:	4770      	bx	lr
	...

0800c034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a33      	ldr	r2, [pc, #204]	@ (800c114 <TIM_Base_SetConfig+0xe0>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d013      	beq.n	800c074 <TIM_Base_SetConfig+0x40>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a32      	ldr	r2, [pc, #200]	@ (800c118 <TIM_Base_SetConfig+0xe4>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d00f      	beq.n	800c074 <TIM_Base_SetConfig+0x40>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c05a:	d00b      	beq.n	800c074 <TIM_Base_SetConfig+0x40>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a2f      	ldr	r2, [pc, #188]	@ (800c11c <TIM_Base_SetConfig+0xe8>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d007      	beq.n	800c074 <TIM_Base_SetConfig+0x40>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a2e      	ldr	r2, [pc, #184]	@ (800c120 <TIM_Base_SetConfig+0xec>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d003      	beq.n	800c074 <TIM_Base_SetConfig+0x40>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a2d      	ldr	r2, [pc, #180]	@ (800c124 <TIM_Base_SetConfig+0xf0>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d108      	bne.n	800c086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c07a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a22      	ldr	r2, [pc, #136]	@ (800c114 <TIM_Base_SetConfig+0xe0>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d013      	beq.n	800c0b6 <TIM_Base_SetConfig+0x82>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a21      	ldr	r2, [pc, #132]	@ (800c118 <TIM_Base_SetConfig+0xe4>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00f      	beq.n	800c0b6 <TIM_Base_SetConfig+0x82>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c09c:	d00b      	beq.n	800c0b6 <TIM_Base_SetConfig+0x82>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a1e      	ldr	r2, [pc, #120]	@ (800c11c <TIM_Base_SetConfig+0xe8>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d007      	beq.n	800c0b6 <TIM_Base_SetConfig+0x82>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c120 <TIM_Base_SetConfig+0xec>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d003      	beq.n	800c0b6 <TIM_Base_SetConfig+0x82>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c124 <TIM_Base_SetConfig+0xf0>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d108      	bne.n	800c0c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	689a      	ldr	r2, [r3, #8]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a09      	ldr	r2, [pc, #36]	@ (800c114 <TIM_Base_SetConfig+0xe0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_Base_SetConfig+0xc8>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a08      	ldr	r2, [pc, #32]	@ (800c118 <TIM_Base_SetConfig+0xe4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d103      	bne.n	800c104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	615a      	str	r2, [r3, #20]
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	40012c00 	.word	0x40012c00
 800c118:	40013400 	.word	0x40013400
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00

0800c128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c128:	b480      	push	{r7}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	f023 0201 	bic.w	r2, r3, #1
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	011b      	lsls	r3, r3, #4
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f023 030a 	bic.w	r3, r3, #10
 800c164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	621a      	str	r2, [r3, #32]
}
 800c17a:	bf00      	nop
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	bc80      	pop	{r7}
 800c182:	4770      	bx	lr

0800c184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	f023 0210 	bic.w	r2, r3, #16
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	031b      	lsls	r3, r3, #12
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	621a      	str	r2, [r3, #32]
}
 800c1d8:	bf00      	nop
 800c1da:	371c      	adds	r7, #28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bc80      	pop	{r7}
 800c1e0:	4770      	bx	lr

0800c1e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b085      	sub	sp, #20
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	f043 0307 	orr.w	r3, r3, #7
 800c204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	609a      	str	r2, [r3, #8]
}
 800c20c:	bf00      	nop
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr

0800c216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c216:	b480      	push	{r7}
 800c218:	b087      	sub	sp, #28
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	60f8      	str	r0, [r7, #12]
 800c21e:	60b9      	str	r1, [r7, #8]
 800c220:	607a      	str	r2, [r7, #4]
 800c222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	021a      	lsls	r2, r3, #8
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	431a      	orrs	r2, r3
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	4313      	orrs	r3, r2
 800c242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	609a      	str	r2, [r3, #8]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	bc80      	pop	{r7}
 800c252:	4770      	bx	lr

0800c254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c264:	2b01      	cmp	r3, #1
 800c266:	d101      	bne.n	800c26c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c268:	2302      	movs	r3, #2
 800c26a:	e050      	b.n	800c30e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c318 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d018      	beq.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a19      	ldr	r2, [pc, #100]	@ (800c31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d013      	beq.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2c2:	d00e      	beq.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a15      	ldr	r2, [pc, #84]	@ (800c320 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d009      	beq.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a14      	ldr	r2, [pc, #80]	@ (800c324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d004      	beq.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a12      	ldr	r2, [pc, #72]	@ (800c328 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d10c      	bne.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	bc80      	pop	{r7}
 800c316:	4770      	bx	lr
 800c318:	40012c00 	.word	0x40012c00
 800c31c:	40013400 	.word	0x40013400
 800c320:	40000400 	.word	0x40000400
 800c324:	40000800 	.word	0x40000800
 800c328:	40000c00 	.word	0x40000c00

0800c32c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	bc80      	pop	{r7}
 800c33c:	4770      	bx	lr

0800c33e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c346:	bf00      	nop
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bc80      	pop	{r7}
 800c34e:	4770      	bx	lr

0800c350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e042      	b.n	800c3e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7fc fe16 	bl	8008fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2224      	movs	r2, #36	@ 0x24
 800c380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fcb5 	bl	800cd04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	691a      	ldr	r2, [r3, #16]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	695a      	ldr	r2, [r3, #20]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c3c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2220      	movs	r2, #32
 800c3d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b20      	cmp	r3, #32
 800c408:	d121      	bne.n	800c44e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <HAL_UART_Transmit_IT+0x26>
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e01a      	b.n	800c450 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	88fa      	ldrh	r2, [r7, #6]
 800c424:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2221      	movs	r2, #33	@ 0x21
 800c436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c448:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e000      	b.n	800c450 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c44e:	2302      	movs	r3, #2
  }
}
 800c450:	4618      	mov	r0, r3
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	bc80      	pop	{r7}
 800c458:	4770      	bx	lr
	...

0800c45c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b0ba      	sub	sp, #232	@ 0xe8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c482:	2300      	movs	r3, #0
 800c484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c488:	2300      	movs	r3, #0
 800c48a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c492:	f003 030f 	and.w	r3, r3, #15
 800c496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c49a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10f      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a6:	f003 0320 	and.w	r3, r3, #32
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d009      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x66>
 800c4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4b2:	f003 0320 	and.w	r3, r3, #32
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d003      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fb63 	bl	800cb86 <UART_Receive_IT>
      return;
 800c4c0:	e25b      	b.n	800c97a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80de 	beq.w	800c688 <HAL_UART_IRQHandler+0x22c>
 800c4cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d106      	bne.n	800c4e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 80d1 	beq.w	800c688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <HAL_UART_IRQHandler+0xae>
 800c4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c502:	f043 0201 	orr.w	r2, r3, #1
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50e:	f003 0304 	and.w	r3, r3, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00b      	beq.n	800c52e <HAL_UART_IRQHandler+0xd2>
 800c516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c526:	f043 0202 	orr.w	r2, r3, #2
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c532:	f003 0302 	and.w	r3, r3, #2
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00b      	beq.n	800c552 <HAL_UART_IRQHandler+0xf6>
 800c53a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c54a:	f043 0204 	orr.w	r2, r3, #4
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d011      	beq.n	800c582 <HAL_UART_IRQHandler+0x126>
 800c55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c562:	f003 0320 	and.w	r3, r3, #32
 800c566:	2b00      	cmp	r3, #0
 800c568:	d105      	bne.n	800c576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c56a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57a:	f043 0208 	orr.w	r2, r3, #8
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 81f2 	beq.w	800c970 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c590:	f003 0320 	and.w	r3, r3, #32
 800c594:	2b00      	cmp	r3, #0
 800c596:	d008      	beq.n	800c5aa <HAL_UART_IRQHandler+0x14e>
 800c598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c59c:	f003 0320 	and.w	r3, r3, #32
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 faee 	bl	800cb86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	bf14      	ite	ne
 800c5b8:	2301      	movne	r3, #1
 800c5ba:	2300      	moveq	r3, #0
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c6:	f003 0308 	and.w	r3, r3, #8
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d103      	bne.n	800c5d6 <HAL_UART_IRQHandler+0x17a>
 800c5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d04f      	beq.n	800c676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9f8 	bl	800c9cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d041      	beq.n	800c66e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3314      	adds	r3, #20
 800c5f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3314      	adds	r3, #20
 800c612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c61a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c62e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1d9      	bne.n	800c5ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d013      	beq.n	800c666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c642:	4a7e      	ldr	r2, [pc, #504]	@ (800c83c <HAL_UART_IRQHandler+0x3e0>)
 800c644:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd f86c 	bl	8009728 <HAL_DMA_Abort_IT>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d016      	beq.n	800c684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c660:	4610      	mov	r0, r2
 800c662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c664:	e00e      	b.n	800c684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f99c 	bl	800c9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c66c:	e00a      	b.n	800c684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f998 	bl	800c9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c674:	e006      	b.n	800c684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f994 	bl	800c9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c682:	e175      	b.n	800c970 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c684:	bf00      	nop
    return;
 800c686:	e173      	b.n	800c970 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	f040 814f 	bne.w	800c930 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c696:	f003 0310 	and.w	r3, r3, #16
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f000 8148 	beq.w	800c930 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6a4:	f003 0310 	and.w	r3, r3, #16
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f000 8141 	beq.w	800c930 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60bb      	str	r3, [r7, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60bb      	str	r3, [r7, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	60bb      	str	r3, [r7, #8]
 800c6c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 80b6 	beq.w	800c840 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8145 	beq.w	800c974 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	f080 813e 	bcs.w	800c974 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	2b20      	cmp	r3, #32
 800c708:	f000 8088 	beq.w	800c81c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	330c      	adds	r3, #12
 800c712:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c71a:	e853 3f00 	ldrex	r3, [r3]
 800c71e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c726:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c72a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	330c      	adds	r3, #12
 800c734:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c738:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c73c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c740:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c744:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1d9      	bne.n	800c70c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3314      	adds	r3, #20
 800c75e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c76a:	f023 0301 	bic.w	r3, r3, #1
 800c76e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3314      	adds	r3, #20
 800c778:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c77c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c780:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c784:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c788:	e841 2300 	strex	r3, r2, [r1]
 800c78c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c78e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e1      	bne.n	800c758 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3314      	adds	r3, #20
 800c79a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c79e:	e853 3f00 	ldrex	r3, [r3]
 800c7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3314      	adds	r3, #20
 800c7b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7c0:	e841 2300 	strex	r3, r2, [r1]
 800c7c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1e3      	bne.n	800c794 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2220      	movs	r2, #32
 800c7d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	330c      	adds	r3, #12
 800c7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7ec:	f023 0310 	bic.w	r3, r3, #16
 800c7f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c7fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c800:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e3      	bne.n	800c7da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c816:	4618      	mov	r0, r3
 800c818:	f7fc ff4b 	bl	80096b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f8bf 	bl	800c9b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c838:	e09c      	b.n	800c974 <HAL_UART_IRQHandler+0x518>
 800c83a:	bf00      	nop
 800c83c:	0800ca91 	.word	0x0800ca91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c848:	b29b      	uxth	r3, r3
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c854:	b29b      	uxth	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 808e 	beq.w	800c978 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c85c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 8089 	beq.w	800c978 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	330c      	adds	r3, #12
 800c86c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c870:	e853 3f00 	ldrex	r3, [r3]
 800c874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c87c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	330c      	adds	r3, #12
 800c886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c88a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c88c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e3      	bne.n	800c866 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3314      	adds	r3, #20
 800c8a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	f023 0301 	bic.w	r3, r3, #1
 800c8b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3314      	adds	r3, #20
 800c8be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e3      	bne.n	800c89e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f023 0310 	bic.w	r3, r3, #16
 800c8fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	330c      	adds	r3, #12
 800c904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c908:	61fa      	str	r2, [r7, #28]
 800c90a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	69b9      	ldr	r1, [r7, #24]
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	617b      	str	r3, [r7, #20]
   return(result);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e3      	bne.n	800c8e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f844 	bl	800c9b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c92e:	e023      	b.n	800c978 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <HAL_UART_IRQHandler+0x4f4>
 800c93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f8b5 	bl	800cab8 <UART_Transmit_IT>
    return;
 800c94e:	e014      	b.n	800c97a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00e      	beq.n	800c97a <HAL_UART_IRQHandler+0x51e>
 800c95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c964:	2b00      	cmp	r3, #0
 800c966:	d008      	beq.n	800c97a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f8f4 	bl	800cb56 <UART_EndTransmit_IT>
    return;
 800c96e:	e004      	b.n	800c97a <HAL_UART_IRQHandler+0x51e>
    return;
 800c970:	bf00      	nop
 800c972:	e002      	b.n	800c97a <HAL_UART_IRQHandler+0x51e>
      return;
 800c974:	bf00      	nop
 800c976:	e000      	b.n	800c97a <HAL_UART_IRQHandler+0x51e>
      return;
 800c978:	bf00      	nop
  }
}
 800c97a:	37e8      	adds	r7, #232	@ 0xe8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bc80      	pop	{r7}
 800c990:	4770      	bx	lr

0800c992 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c99a:	bf00      	nop
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bc80      	pop	{r7}
 800c9a2:	4770      	bx	lr

0800c9a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bc80      	pop	{r7}
 800c9b4:	4770      	bx	lr

0800c9b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr

0800c9cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b095      	sub	sp, #84	@ 0x54
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	330c      	adds	r3, #12
 800c9da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9de:	e853 3f00 	ldrex	r3, [r3]
 800c9e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	330c      	adds	r3, #12
 800c9f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9f4:	643a      	str	r2, [r7, #64]	@ 0x40
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9fc:	e841 2300 	strex	r3, r2, [r1]
 800ca00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e5      	bne.n	800c9d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3314      	adds	r3, #20
 800ca0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	e853 3f00 	ldrex	r3, [r3]
 800ca16:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	f023 0301 	bic.w	r3, r3, #1
 800ca1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3314      	adds	r3, #20
 800ca26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca30:	e841 2300 	strex	r3, r2, [r1]
 800ca34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e5      	bne.n	800ca08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d119      	bne.n	800ca78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	330c      	adds	r3, #12
 800ca4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	e853 3f00 	ldrex	r3, [r3]
 800ca52:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f023 0310 	bic.w	r3, r3, #16
 800ca5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	330c      	adds	r3, #12
 800ca62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca64:	61ba      	str	r2, [r7, #24]
 800ca66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca68:	6979      	ldr	r1, [r7, #20]
 800ca6a:	69ba      	ldr	r2, [r7, #24]
 800ca6c:	e841 2300 	strex	r3, r2, [r1]
 800ca70:	613b      	str	r3, [r7, #16]
   return(result);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e5      	bne.n	800ca44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2220      	movs	r2, #32
 800ca7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ca86:	bf00      	nop
 800ca88:	3754      	adds	r7, #84	@ 0x54
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr

0800ca90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff ff7a 	bl	800c9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cab0:	bf00      	nop
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b21      	cmp	r3, #33	@ 0x21
 800caca:	d13e      	bne.n	800cb4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cad4:	d114      	bne.n	800cb00 <UART_Transmit_IT+0x48>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d110      	bne.n	800cb00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caf2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	1c9a      	adds	r2, r3, #2
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	621a      	str	r2, [r3, #32]
 800cafe:	e008      	b.n	800cb12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	1c59      	adds	r1, r3, #1
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6211      	str	r1, [r2, #32]
 800cb0a:	781a      	ldrb	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d10f      	bne.n	800cb46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e000      	b.n	800cb4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cb4a:	2302      	movs	r3, #2
  }
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bc80      	pop	{r7}
 800cb54:	4770      	bx	lr

0800cb56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68da      	ldr	r2, [r3, #12]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff ff02 	bl	800c980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b08c      	sub	sp, #48	@ 0x30
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b22      	cmp	r3, #34	@ 0x22
 800cb98:	f040 80ae 	bne.w	800ccf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cba4:	d117      	bne.n	800cbd6 <UART_Receive_IT+0x50>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d113      	bne.n	800cbd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbce:	1c9a      	adds	r2, r3, #2
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	629a      	str	r2, [r3, #40]	@ 0x28
 800cbd4:	e026      	b.n	800cc24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe8:	d007      	beq.n	800cbfa <UART_Receive_IT+0x74>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <UART_Receive_IT+0x82>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	e008      	b.n	800cc1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	4619      	mov	r1, r3
 800cc32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d15d      	bne.n	800ccf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68da      	ldr	r2, [r3, #12]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0220 	bic.w	r2, r2, #32
 800cc46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	695a      	ldr	r2, [r3, #20]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f022 0201 	bic.w	r2, r2, #1
 800cc66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2220      	movs	r2, #32
 800cc6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d135      	bne.n	800ccea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	330c      	adds	r3, #12
 800cc8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	e853 3f00 	ldrex	r3, [r3]
 800cc92:	613b      	str	r3, [r7, #16]
   return(result);
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	f023 0310 	bic.w	r3, r3, #16
 800cc9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	330c      	adds	r3, #12
 800cca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cca4:	623a      	str	r2, [r7, #32]
 800cca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca8:	69f9      	ldr	r1, [r7, #28]
 800ccaa:	6a3a      	ldr	r2, [r7, #32]
 800ccac:	e841 2300 	strex	r3, r2, [r1]
 800ccb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1e5      	bne.n	800cc84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0310 	and.w	r3, r3, #16
 800ccc2:	2b10      	cmp	r3, #16
 800ccc4:	d10a      	bne.n	800ccdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fe67 	bl	800c9b6 <HAL_UARTEx_RxEventCallback>
 800cce8:	e002      	b.n	800ccf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff fe51 	bl	800c992 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e002      	b.n	800ccfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e000      	b.n	800ccfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ccf8:	2302      	movs	r3, #2
  }
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3730      	adds	r7, #48	@ 0x30
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68da      	ldr	r2, [r3, #12]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689a      	ldr	r2, [r3, #8]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	431a      	orrs	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cd3e:	f023 030c 	bic.w	r3, r3, #12
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	6812      	ldr	r2, [r2, #0]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	430b      	orrs	r3, r1
 800cd4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a2c      	ldr	r2, [pc, #176]	@ (800ce18 <UART_SetConfig+0x114>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d103      	bne.n	800cd74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cd6c:	f7fe fe8c 	bl	800ba88 <HAL_RCC_GetPCLK2Freq>
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	e002      	b.n	800cd7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cd74:	f7fe fe74 	bl	800ba60 <HAL_RCC_GetPCLK1Freq>
 800cd78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	009a      	lsls	r2, r3, #2
 800cd84:	441a      	add	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd90:	4a22      	ldr	r2, [pc, #136]	@ (800ce1c <UART_SetConfig+0x118>)
 800cd92:	fba2 2303 	umull	r2, r3, r2, r3
 800cd96:	095b      	lsrs	r3, r3, #5
 800cd98:	0119      	lsls	r1, r3, #4
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009a      	lsls	r2, r3, #2
 800cda4:	441a      	add	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	fbb2 f2f3 	udiv	r2, r2, r3
 800cdb0:	4b1a      	ldr	r3, [pc, #104]	@ (800ce1c <UART_SetConfig+0x118>)
 800cdb2:	fba3 0302 	umull	r0, r3, r3, r2
 800cdb6:	095b      	lsrs	r3, r3, #5
 800cdb8:	2064      	movs	r0, #100	@ 0x64
 800cdba:	fb00 f303 	mul.w	r3, r0, r3
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	011b      	lsls	r3, r3, #4
 800cdc2:	3332      	adds	r3, #50	@ 0x32
 800cdc4:	4a15      	ldr	r2, [pc, #84]	@ (800ce1c <UART_SetConfig+0x118>)
 800cdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdca:	095b      	lsrs	r3, r3, #5
 800cdcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdd0:	4419      	add	r1, r3
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	009a      	lsls	r2, r3, #2
 800cddc:	441a      	add	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cde8:	4b0c      	ldr	r3, [pc, #48]	@ (800ce1c <UART_SetConfig+0x118>)
 800cdea:	fba3 0302 	umull	r0, r3, r3, r2
 800cdee:	095b      	lsrs	r3, r3, #5
 800cdf0:	2064      	movs	r0, #100	@ 0x64
 800cdf2:	fb00 f303 	mul.w	r3, r0, r3
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	3332      	adds	r3, #50	@ 0x32
 800cdfc:	4a07      	ldr	r2, [pc, #28]	@ (800ce1c <UART_SetConfig+0x118>)
 800cdfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ce02:	095b      	lsrs	r3, r3, #5
 800ce04:	f003 020f 	and.w	r2, r3, #15
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	440a      	add	r2, r1
 800ce0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ce10:	bf00      	nop
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	40013800 	.word	0x40013800
 800ce1c:	51eb851f 	.word	0x51eb851f

0800ce20 <__itoa>:
 800ce20:	1e93      	subs	r3, r2, #2
 800ce22:	2b22      	cmp	r3, #34	@ 0x22
 800ce24:	b510      	push	{r4, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	d904      	bls.n	800ce34 <__itoa+0x14>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	700b      	strb	r3, [r1, #0]
 800ce30:	4620      	mov	r0, r4
 800ce32:	bd10      	pop	{r4, pc}
 800ce34:	2a0a      	cmp	r2, #10
 800ce36:	d109      	bne.n	800ce4c <__itoa+0x2c>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	da07      	bge.n	800ce4c <__itoa+0x2c>
 800ce3c:	232d      	movs	r3, #45	@ 0x2d
 800ce3e:	700b      	strb	r3, [r1, #0]
 800ce40:	2101      	movs	r1, #1
 800ce42:	4240      	negs	r0, r0
 800ce44:	4421      	add	r1, r4
 800ce46:	f000 f8db 	bl	800d000 <__utoa>
 800ce4a:	e7f1      	b.n	800ce30 <__itoa+0x10>
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	e7f9      	b.n	800ce44 <__itoa+0x24>

0800ce50 <itoa>:
 800ce50:	f7ff bfe6 	b.w	800ce20 <__itoa>

0800ce54 <malloc>:
 800ce54:	4b02      	ldr	r3, [pc, #8]	@ (800ce60 <malloc+0xc>)
 800ce56:	4601      	mov	r1, r0
 800ce58:	6818      	ldr	r0, [r3, #0]
 800ce5a:	f000 b825 	b.w	800cea8 <_malloc_r>
 800ce5e:	bf00      	nop
 800ce60:	20000f5c 	.word	0x20000f5c

0800ce64 <sbrk_aligned>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4e0f      	ldr	r6, [pc, #60]	@ (800cea4 <sbrk_aligned+0x40>)
 800ce68:	460c      	mov	r4, r1
 800ce6a:	6831      	ldr	r1, [r6, #0]
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	b911      	cbnz	r1, 800ce76 <sbrk_aligned+0x12>
 800ce70:	f000 f932 	bl	800d0d8 <_sbrk_r>
 800ce74:	6030      	str	r0, [r6, #0]
 800ce76:	4621      	mov	r1, r4
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f000 f92d 	bl	800d0d8 <_sbrk_r>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	d103      	bne.n	800ce8a <sbrk_aligned+0x26>
 800ce82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ce86:	4620      	mov	r0, r4
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	1cc4      	adds	r4, r0, #3
 800ce8c:	f024 0403 	bic.w	r4, r4, #3
 800ce90:	42a0      	cmp	r0, r4
 800ce92:	d0f8      	beq.n	800ce86 <sbrk_aligned+0x22>
 800ce94:	1a21      	subs	r1, r4, r0
 800ce96:	4628      	mov	r0, r5
 800ce98:	f000 f91e 	bl	800d0d8 <_sbrk_r>
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	d1f2      	bne.n	800ce86 <sbrk_aligned+0x22>
 800cea0:	e7ef      	b.n	800ce82 <sbrk_aligned+0x1e>
 800cea2:	bf00      	nop
 800cea4:	200019f4 	.word	0x200019f4

0800cea8 <_malloc_r>:
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceac:	1ccd      	adds	r5, r1, #3
 800ceae:	f025 0503 	bic.w	r5, r5, #3
 800ceb2:	3508      	adds	r5, #8
 800ceb4:	2d0c      	cmp	r5, #12
 800ceb6:	bf38      	it	cc
 800ceb8:	250c      	movcc	r5, #12
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	4606      	mov	r6, r0
 800cebe:	db01      	blt.n	800cec4 <_malloc_r+0x1c>
 800cec0:	42a9      	cmp	r1, r5
 800cec2:	d904      	bls.n	800cece <_malloc_r+0x26>
 800cec4:	230c      	movs	r3, #12
 800cec6:	6033      	str	r3, [r6, #0]
 800cec8:	2000      	movs	r0, #0
 800ceca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfa4 <_malloc_r+0xfc>
 800ced2:	f000 f869 	bl	800cfa8 <__malloc_lock>
 800ced6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceda:	461c      	mov	r4, r3
 800cedc:	bb44      	cbnz	r4, 800cf30 <_malloc_r+0x88>
 800cede:	4629      	mov	r1, r5
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7ff ffbf 	bl	800ce64 <sbrk_aligned>
 800cee6:	1c43      	adds	r3, r0, #1
 800cee8:	4604      	mov	r4, r0
 800ceea:	d158      	bne.n	800cf9e <_malloc_r+0xf6>
 800ceec:	f8d8 4000 	ldr.w	r4, [r8]
 800cef0:	4627      	mov	r7, r4
 800cef2:	2f00      	cmp	r7, #0
 800cef4:	d143      	bne.n	800cf7e <_malloc_r+0xd6>
 800cef6:	2c00      	cmp	r4, #0
 800cef8:	d04b      	beq.n	800cf92 <_malloc_r+0xea>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	4639      	mov	r1, r7
 800cefe:	4630      	mov	r0, r6
 800cf00:	eb04 0903 	add.w	r9, r4, r3
 800cf04:	f000 f8e8 	bl	800d0d8 <_sbrk_r>
 800cf08:	4581      	cmp	r9, r0
 800cf0a:	d142      	bne.n	800cf92 <_malloc_r+0xea>
 800cf0c:	6821      	ldr	r1, [r4, #0]
 800cf0e:	4630      	mov	r0, r6
 800cf10:	1a6d      	subs	r5, r5, r1
 800cf12:	4629      	mov	r1, r5
 800cf14:	f7ff ffa6 	bl	800ce64 <sbrk_aligned>
 800cf18:	3001      	adds	r0, #1
 800cf1a:	d03a      	beq.n	800cf92 <_malloc_r+0xea>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	442b      	add	r3, r5
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	f8d8 3000 	ldr.w	r3, [r8]
 800cf26:	685a      	ldr	r2, [r3, #4]
 800cf28:	bb62      	cbnz	r2, 800cf84 <_malloc_r+0xdc>
 800cf2a:	f8c8 7000 	str.w	r7, [r8]
 800cf2e:	e00f      	b.n	800cf50 <_malloc_r+0xa8>
 800cf30:	6822      	ldr	r2, [r4, #0]
 800cf32:	1b52      	subs	r2, r2, r5
 800cf34:	d420      	bmi.n	800cf78 <_malloc_r+0xd0>
 800cf36:	2a0b      	cmp	r2, #11
 800cf38:	d917      	bls.n	800cf6a <_malloc_r+0xc2>
 800cf3a:	1961      	adds	r1, r4, r5
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	6025      	str	r5, [r4, #0]
 800cf40:	bf18      	it	ne
 800cf42:	6059      	strne	r1, [r3, #4]
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	bf08      	it	eq
 800cf48:	f8c8 1000 	streq.w	r1, [r8]
 800cf4c:	5162      	str	r2, [r4, r5]
 800cf4e:	604b      	str	r3, [r1, #4]
 800cf50:	4630      	mov	r0, r6
 800cf52:	f000 f82f 	bl	800cfb4 <__malloc_unlock>
 800cf56:	f104 000b 	add.w	r0, r4, #11
 800cf5a:	1d23      	adds	r3, r4, #4
 800cf5c:	f020 0007 	bic.w	r0, r0, #7
 800cf60:	1ac2      	subs	r2, r0, r3
 800cf62:	bf1c      	itt	ne
 800cf64:	1a1b      	subne	r3, r3, r0
 800cf66:	50a3      	strne	r3, [r4, r2]
 800cf68:	e7af      	b.n	800ceca <_malloc_r+0x22>
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	42a3      	cmp	r3, r4
 800cf6e:	bf0c      	ite	eq
 800cf70:	f8c8 2000 	streq.w	r2, [r8]
 800cf74:	605a      	strne	r2, [r3, #4]
 800cf76:	e7eb      	b.n	800cf50 <_malloc_r+0xa8>
 800cf78:	4623      	mov	r3, r4
 800cf7a:	6864      	ldr	r4, [r4, #4]
 800cf7c:	e7ae      	b.n	800cedc <_malloc_r+0x34>
 800cf7e:	463c      	mov	r4, r7
 800cf80:	687f      	ldr	r7, [r7, #4]
 800cf82:	e7b6      	b.n	800cef2 <_malloc_r+0x4a>
 800cf84:	461a      	mov	r2, r3
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	d1fb      	bne.n	800cf84 <_malloc_r+0xdc>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	6053      	str	r3, [r2, #4]
 800cf90:	e7de      	b.n	800cf50 <_malloc_r+0xa8>
 800cf92:	230c      	movs	r3, #12
 800cf94:	4630      	mov	r0, r6
 800cf96:	6033      	str	r3, [r6, #0]
 800cf98:	f000 f80c 	bl	800cfb4 <__malloc_unlock>
 800cf9c:	e794      	b.n	800cec8 <_malloc_r+0x20>
 800cf9e:	6005      	str	r5, [r0, #0]
 800cfa0:	e7d6      	b.n	800cf50 <_malloc_r+0xa8>
 800cfa2:	bf00      	nop
 800cfa4:	200019f8 	.word	0x200019f8

0800cfa8 <__malloc_lock>:
 800cfa8:	4801      	ldr	r0, [pc, #4]	@ (800cfb0 <__malloc_lock+0x8>)
 800cfaa:	f000 b8cf 	b.w	800d14c <__retarget_lock_acquire_recursive>
 800cfae:	bf00      	nop
 800cfb0:	20001b34 	.word	0x20001b34

0800cfb4 <__malloc_unlock>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	@ (800cfbc <__malloc_unlock+0x8>)
 800cfb6:	f000 b8ca 	b.w	800d14e <__retarget_lock_release_recursive>
 800cfba:	bf00      	nop
 800cfbc:	20001b34 	.word	0x20001b34

0800cfc0 <siprintf>:
 800cfc0:	b40e      	push	{r1, r2, r3}
 800cfc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfc6:	b500      	push	{lr}
 800cfc8:	b09c      	sub	sp, #112	@ 0x70
 800cfca:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfcc:	9002      	str	r0, [sp, #8]
 800cfce:	9006      	str	r0, [sp, #24]
 800cfd0:	9107      	str	r1, [sp, #28]
 800cfd2:	9104      	str	r1, [sp, #16]
 800cfd4:	4808      	ldr	r0, [pc, #32]	@ (800cff8 <siprintf+0x38>)
 800cfd6:	4909      	ldr	r1, [pc, #36]	@ (800cffc <siprintf+0x3c>)
 800cfd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfdc:	9105      	str	r1, [sp, #20]
 800cfde:	6800      	ldr	r0, [r0, #0]
 800cfe0:	a902      	add	r1, sp, #8
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	f000 f960 	bl	800d2a8 <_svfiprintf_r>
 800cfe8:	2200      	movs	r2, #0
 800cfea:	9b02      	ldr	r3, [sp, #8]
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	b01c      	add	sp, #112	@ 0x70
 800cff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff4:	b003      	add	sp, #12
 800cff6:	4770      	bx	lr
 800cff8:	20000f5c 	.word	0x20000f5c
 800cffc:	ffff0208 	.word	0xffff0208

0800d000 <__utoa>:
 800d000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d002:	b08b      	sub	sp, #44	@ 0x2c
 800d004:	4605      	mov	r5, r0
 800d006:	460b      	mov	r3, r1
 800d008:	466e      	mov	r6, sp
 800d00a:	4c1d      	ldr	r4, [pc, #116]	@ (800d080 <__utoa+0x80>)
 800d00c:	f104 0c20 	add.w	ip, r4, #32
 800d010:	4637      	mov	r7, r6
 800d012:	6820      	ldr	r0, [r4, #0]
 800d014:	6861      	ldr	r1, [r4, #4]
 800d016:	3408      	adds	r4, #8
 800d018:	c703      	stmia	r7!, {r0, r1}
 800d01a:	4564      	cmp	r4, ip
 800d01c:	463e      	mov	r6, r7
 800d01e:	d1f7      	bne.n	800d010 <__utoa+0x10>
 800d020:	7921      	ldrb	r1, [r4, #4]
 800d022:	6820      	ldr	r0, [r4, #0]
 800d024:	7139      	strb	r1, [r7, #4]
 800d026:	1e91      	subs	r1, r2, #2
 800d028:	2922      	cmp	r1, #34	@ 0x22
 800d02a:	6038      	str	r0, [r7, #0]
 800d02c:	f04f 0100 	mov.w	r1, #0
 800d030:	d904      	bls.n	800d03c <__utoa+0x3c>
 800d032:	7019      	strb	r1, [r3, #0]
 800d034:	460b      	mov	r3, r1
 800d036:	4618      	mov	r0, r3
 800d038:	b00b      	add	sp, #44	@ 0x2c
 800d03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d03c:	1e58      	subs	r0, r3, #1
 800d03e:	4684      	mov	ip, r0
 800d040:	fbb5 f7f2 	udiv	r7, r5, r2
 800d044:	fb02 5617 	mls	r6, r2, r7, r5
 800d048:	3628      	adds	r6, #40	@ 0x28
 800d04a:	446e      	add	r6, sp
 800d04c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d050:	460c      	mov	r4, r1
 800d052:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d056:	462e      	mov	r6, r5
 800d058:	42b2      	cmp	r2, r6
 800d05a:	463d      	mov	r5, r7
 800d05c:	f101 0101 	add.w	r1, r1, #1
 800d060:	d9ee      	bls.n	800d040 <__utoa+0x40>
 800d062:	2200      	movs	r2, #0
 800d064:	545a      	strb	r2, [r3, r1]
 800d066:	1919      	adds	r1, r3, r4
 800d068:	1aa5      	subs	r5, r4, r2
 800d06a:	42aa      	cmp	r2, r5
 800d06c:	dae3      	bge.n	800d036 <__utoa+0x36>
 800d06e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d072:	780e      	ldrb	r6, [r1, #0]
 800d074:	3201      	adds	r2, #1
 800d076:	7006      	strb	r6, [r0, #0]
 800d078:	f801 5901 	strb.w	r5, [r1], #-1
 800d07c:	e7f4      	b.n	800d068 <__utoa+0x68>
 800d07e:	bf00      	nop
 800d080:	0800db86 	.word	0x0800db86

0800d084 <strcat>:
 800d084:	4602      	mov	r2, r0
 800d086:	b510      	push	{r4, lr}
 800d088:	7814      	ldrb	r4, [r2, #0]
 800d08a:	4613      	mov	r3, r2
 800d08c:	3201      	adds	r2, #1
 800d08e:	2c00      	cmp	r4, #0
 800d090:	d1fa      	bne.n	800d088 <strcat+0x4>
 800d092:	3b01      	subs	r3, #1
 800d094:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d098:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	d1f9      	bne.n	800d094 <strcat+0x10>
 800d0a0:	bd10      	pop	{r4, pc}

0800d0a2 <strncpy>:
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	3901      	subs	r1, #1
 800d0a8:	b132      	cbz	r2, 800d0b8 <strncpy+0x16>
 800d0aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0ae:	3a01      	subs	r2, #1
 800d0b0:	f803 4b01 	strb.w	r4, [r3], #1
 800d0b4:	2c00      	cmp	r4, #0
 800d0b6:	d1f7      	bne.n	800d0a8 <strncpy+0x6>
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	441a      	add	r2, r3
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d100      	bne.n	800d0c2 <strncpy+0x20>
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800d0c6:	e7f9      	b.n	800d0bc <strncpy+0x1a>

0800d0c8 <memset>:
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	4402      	add	r2, r0
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d100      	bne.n	800d0d2 <memset+0xa>
 800d0d0:	4770      	bx	lr
 800d0d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d6:	e7f9      	b.n	800d0cc <memset+0x4>

0800d0d8 <_sbrk_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	2300      	movs	r3, #0
 800d0dc:	4d05      	ldr	r5, [pc, #20]	@ (800d0f4 <_sbrk_r+0x1c>)
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	602b      	str	r3, [r5, #0]
 800d0e4:	f7fb fff4 	bl	80090d0 <_sbrk>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_sbrk_r+0x1a>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_sbrk_r+0x1a>
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	20001b38 	.word	0x20001b38

0800d0f8 <__errno>:
 800d0f8:	4b01      	ldr	r3, [pc, #4]	@ (800d100 <__errno+0x8>)
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20000f5c 	.word	0x20000f5c

0800d104 <__libc_init_array>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	2600      	movs	r6, #0
 800d108:	4d0c      	ldr	r5, [pc, #48]	@ (800d13c <__libc_init_array+0x38>)
 800d10a:	4c0d      	ldr	r4, [pc, #52]	@ (800d140 <__libc_init_array+0x3c>)
 800d10c:	1b64      	subs	r4, r4, r5
 800d10e:	10a4      	asrs	r4, r4, #2
 800d110:	42a6      	cmp	r6, r4
 800d112:	d109      	bne.n	800d128 <__libc_init_array+0x24>
 800d114:	f000 fbc2 	bl	800d89c <_init>
 800d118:	2600      	movs	r6, #0
 800d11a:	4d0a      	ldr	r5, [pc, #40]	@ (800d144 <__libc_init_array+0x40>)
 800d11c:	4c0a      	ldr	r4, [pc, #40]	@ (800d148 <__libc_init_array+0x44>)
 800d11e:	1b64      	subs	r4, r4, r5
 800d120:	10a4      	asrs	r4, r4, #2
 800d122:	42a6      	cmp	r6, r4
 800d124:	d105      	bne.n	800d132 <__libc_init_array+0x2e>
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	f855 3b04 	ldr.w	r3, [r5], #4
 800d12c:	4798      	blx	r3
 800d12e:	3601      	adds	r6, #1
 800d130:	e7ee      	b.n	800d110 <__libc_init_array+0xc>
 800d132:	f855 3b04 	ldr.w	r3, [r5], #4
 800d136:	4798      	blx	r3
 800d138:	3601      	adds	r6, #1
 800d13a:	e7f2      	b.n	800d122 <__libc_init_array+0x1e>
 800d13c:	0800dbe8 	.word	0x0800dbe8
 800d140:	0800dbe8 	.word	0x0800dbe8
 800d144:	0800dbe8 	.word	0x0800dbe8
 800d148:	0800dbec 	.word	0x0800dbec

0800d14c <__retarget_lock_acquire_recursive>:
 800d14c:	4770      	bx	lr

0800d14e <__retarget_lock_release_recursive>:
 800d14e:	4770      	bx	lr

0800d150 <strcpy>:
 800d150:	4603      	mov	r3, r0
 800d152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d156:	f803 2b01 	strb.w	r2, [r3], #1
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	d1f9      	bne.n	800d152 <strcpy+0x2>
 800d15e:	4770      	bx	lr

0800d160 <_free_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4605      	mov	r5, r0
 800d164:	2900      	cmp	r1, #0
 800d166:	d040      	beq.n	800d1ea <_free_r+0x8a>
 800d168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d16c:	1f0c      	subs	r4, r1, #4
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfb8      	it	lt
 800d172:	18e4      	addlt	r4, r4, r3
 800d174:	f7ff ff18 	bl	800cfa8 <__malloc_lock>
 800d178:	4a1c      	ldr	r2, [pc, #112]	@ (800d1ec <_free_r+0x8c>)
 800d17a:	6813      	ldr	r3, [r2, #0]
 800d17c:	b933      	cbnz	r3, 800d18c <_free_r+0x2c>
 800d17e:	6063      	str	r3, [r4, #4]
 800d180:	6014      	str	r4, [r2, #0]
 800d182:	4628      	mov	r0, r5
 800d184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d188:	f7ff bf14 	b.w	800cfb4 <__malloc_unlock>
 800d18c:	42a3      	cmp	r3, r4
 800d18e:	d908      	bls.n	800d1a2 <_free_r+0x42>
 800d190:	6820      	ldr	r0, [r4, #0]
 800d192:	1821      	adds	r1, r4, r0
 800d194:	428b      	cmp	r3, r1
 800d196:	bf01      	itttt	eq
 800d198:	6819      	ldreq	r1, [r3, #0]
 800d19a:	685b      	ldreq	r3, [r3, #4]
 800d19c:	1809      	addeq	r1, r1, r0
 800d19e:	6021      	streq	r1, [r4, #0]
 800d1a0:	e7ed      	b.n	800d17e <_free_r+0x1e>
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	b10b      	cbz	r3, 800d1ac <_free_r+0x4c>
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	d9fa      	bls.n	800d1a2 <_free_r+0x42>
 800d1ac:	6811      	ldr	r1, [r2, #0]
 800d1ae:	1850      	adds	r0, r2, r1
 800d1b0:	42a0      	cmp	r0, r4
 800d1b2:	d10b      	bne.n	800d1cc <_free_r+0x6c>
 800d1b4:	6820      	ldr	r0, [r4, #0]
 800d1b6:	4401      	add	r1, r0
 800d1b8:	1850      	adds	r0, r2, r1
 800d1ba:	4283      	cmp	r3, r0
 800d1bc:	6011      	str	r1, [r2, #0]
 800d1be:	d1e0      	bne.n	800d182 <_free_r+0x22>
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	4408      	add	r0, r1
 800d1c6:	6010      	str	r0, [r2, #0]
 800d1c8:	6053      	str	r3, [r2, #4]
 800d1ca:	e7da      	b.n	800d182 <_free_r+0x22>
 800d1cc:	d902      	bls.n	800d1d4 <_free_r+0x74>
 800d1ce:	230c      	movs	r3, #12
 800d1d0:	602b      	str	r3, [r5, #0]
 800d1d2:	e7d6      	b.n	800d182 <_free_r+0x22>
 800d1d4:	6820      	ldr	r0, [r4, #0]
 800d1d6:	1821      	adds	r1, r4, r0
 800d1d8:	428b      	cmp	r3, r1
 800d1da:	bf01      	itttt	eq
 800d1dc:	6819      	ldreq	r1, [r3, #0]
 800d1de:	685b      	ldreq	r3, [r3, #4]
 800d1e0:	1809      	addeq	r1, r1, r0
 800d1e2:	6021      	streq	r1, [r4, #0]
 800d1e4:	6063      	str	r3, [r4, #4]
 800d1e6:	6054      	str	r4, [r2, #4]
 800d1e8:	e7cb      	b.n	800d182 <_free_r+0x22>
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	200019f8 	.word	0x200019f8

0800d1f0 <__ssputs_r>:
 800d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f4:	461f      	mov	r7, r3
 800d1f6:	688e      	ldr	r6, [r1, #8]
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	42be      	cmp	r6, r7
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	4690      	mov	r8, r2
 800d200:	680b      	ldr	r3, [r1, #0]
 800d202:	d82d      	bhi.n	800d260 <__ssputs_r+0x70>
 800d204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d208:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d20c:	d026      	beq.n	800d25c <__ssputs_r+0x6c>
 800d20e:	6965      	ldr	r5, [r4, #20]
 800d210:	6909      	ldr	r1, [r1, #16]
 800d212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d216:	eba3 0901 	sub.w	r9, r3, r1
 800d21a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d21e:	1c7b      	adds	r3, r7, #1
 800d220:	444b      	add	r3, r9
 800d222:	106d      	asrs	r5, r5, #1
 800d224:	429d      	cmp	r5, r3
 800d226:	bf38      	it	cc
 800d228:	461d      	movcc	r5, r3
 800d22a:	0553      	lsls	r3, r2, #21
 800d22c:	d527      	bpl.n	800d27e <__ssputs_r+0x8e>
 800d22e:	4629      	mov	r1, r5
 800d230:	f7ff fe3a 	bl	800cea8 <_malloc_r>
 800d234:	4606      	mov	r6, r0
 800d236:	b360      	cbz	r0, 800d292 <__ssputs_r+0xa2>
 800d238:	464a      	mov	r2, r9
 800d23a:	6921      	ldr	r1, [r4, #16]
 800d23c:	f000 fb18 	bl	800d870 <memcpy>
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	6126      	str	r6, [r4, #16]
 800d24e:	444e      	add	r6, r9
 800d250:	6026      	str	r6, [r4, #0]
 800d252:	463e      	mov	r6, r7
 800d254:	6165      	str	r5, [r4, #20]
 800d256:	eba5 0509 	sub.w	r5, r5, r9
 800d25a:	60a5      	str	r5, [r4, #8]
 800d25c:	42be      	cmp	r6, r7
 800d25e:	d900      	bls.n	800d262 <__ssputs_r+0x72>
 800d260:	463e      	mov	r6, r7
 800d262:	4632      	mov	r2, r6
 800d264:	4641      	mov	r1, r8
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	f000 fada 	bl	800d820 <memmove>
 800d26c:	2000      	movs	r0, #0
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	1b9b      	subs	r3, r3, r6
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	4433      	add	r3, r6
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27e:	462a      	mov	r2, r5
 800d280:	f000 faa0 	bl	800d7c4 <_realloc_r>
 800d284:	4606      	mov	r6, r0
 800d286:	2800      	cmp	r0, #0
 800d288:	d1e0      	bne.n	800d24c <__ssputs_r+0x5c>
 800d28a:	4650      	mov	r0, sl
 800d28c:	6921      	ldr	r1, [r4, #16]
 800d28e:	f7ff ff67 	bl	800d160 <_free_r>
 800d292:	230c      	movs	r3, #12
 800d294:	f8ca 3000 	str.w	r3, [sl]
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d29e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	e7e9      	b.n	800d27a <__ssputs_r+0x8a>
	...

0800d2a8 <_svfiprintf_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	4698      	mov	r8, r3
 800d2ae:	898b      	ldrh	r3, [r1, #12]
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	061b      	lsls	r3, r3, #24
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	4614      	mov	r4, r2
 800d2b8:	b09d      	sub	sp, #116	@ 0x74
 800d2ba:	d510      	bpl.n	800d2de <_svfiprintf_r+0x36>
 800d2bc:	690b      	ldr	r3, [r1, #16]
 800d2be:	b973      	cbnz	r3, 800d2de <_svfiprintf_r+0x36>
 800d2c0:	2140      	movs	r1, #64	@ 0x40
 800d2c2:	f7ff fdf1 	bl	800cea8 <_malloc_r>
 800d2c6:	6028      	str	r0, [r5, #0]
 800d2c8:	6128      	str	r0, [r5, #16]
 800d2ca:	b930      	cbnz	r0, 800d2da <_svfiprintf_r+0x32>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2d4:	b01d      	add	sp, #116	@ 0x74
 800d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2da:	2340      	movs	r3, #64	@ 0x40
 800d2dc:	616b      	str	r3, [r5, #20]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2e2:	2320      	movs	r3, #32
 800d2e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2e8:	2330      	movs	r3, #48	@ 0x30
 800d2ea:	f04f 0901 	mov.w	r9, #1
 800d2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d48c <_svfiprintf_r+0x1e4>
 800d2f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	469a      	mov	sl, r3
 800d2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d302:	b10a      	cbz	r2, 800d308 <_svfiprintf_r+0x60>
 800d304:	2a25      	cmp	r2, #37	@ 0x25
 800d306:	d1f9      	bne.n	800d2fc <_svfiprintf_r+0x54>
 800d308:	ebba 0b04 	subs.w	fp, sl, r4
 800d30c:	d00b      	beq.n	800d326 <_svfiprintf_r+0x7e>
 800d30e:	465b      	mov	r3, fp
 800d310:	4622      	mov	r2, r4
 800d312:	4629      	mov	r1, r5
 800d314:	4638      	mov	r0, r7
 800d316:	f7ff ff6b 	bl	800d1f0 <__ssputs_r>
 800d31a:	3001      	adds	r0, #1
 800d31c:	f000 80a7 	beq.w	800d46e <_svfiprintf_r+0x1c6>
 800d320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d322:	445a      	add	r2, fp
 800d324:	9209      	str	r2, [sp, #36]	@ 0x24
 800d326:	f89a 3000 	ldrb.w	r3, [sl]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 809f 	beq.w	800d46e <_svfiprintf_r+0x1c6>
 800d330:	2300      	movs	r3, #0
 800d332:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d33a:	f10a 0a01 	add.w	sl, sl, #1
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	9307      	str	r3, [sp, #28]
 800d342:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d346:	931a      	str	r3, [sp, #104]	@ 0x68
 800d348:	4654      	mov	r4, sl
 800d34a:	2205      	movs	r2, #5
 800d34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d350:	484e      	ldr	r0, [pc, #312]	@ (800d48c <_svfiprintf_r+0x1e4>)
 800d352:	f000 fa7f 	bl	800d854 <memchr>
 800d356:	9a04      	ldr	r2, [sp, #16]
 800d358:	b9d8      	cbnz	r0, 800d392 <_svfiprintf_r+0xea>
 800d35a:	06d0      	lsls	r0, r2, #27
 800d35c:	bf44      	itt	mi
 800d35e:	2320      	movmi	r3, #32
 800d360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d364:	0711      	lsls	r1, r2, #28
 800d366:	bf44      	itt	mi
 800d368:	232b      	movmi	r3, #43	@ 0x2b
 800d36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d36e:	f89a 3000 	ldrb.w	r3, [sl]
 800d372:	2b2a      	cmp	r3, #42	@ 0x2a
 800d374:	d015      	beq.n	800d3a2 <_svfiprintf_r+0xfa>
 800d376:	4654      	mov	r4, sl
 800d378:	2000      	movs	r0, #0
 800d37a:	f04f 0c0a 	mov.w	ip, #10
 800d37e:	9a07      	ldr	r2, [sp, #28]
 800d380:	4621      	mov	r1, r4
 800d382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d386:	3b30      	subs	r3, #48	@ 0x30
 800d388:	2b09      	cmp	r3, #9
 800d38a:	d94b      	bls.n	800d424 <_svfiprintf_r+0x17c>
 800d38c:	b1b0      	cbz	r0, 800d3bc <_svfiprintf_r+0x114>
 800d38e:	9207      	str	r2, [sp, #28]
 800d390:	e014      	b.n	800d3bc <_svfiprintf_r+0x114>
 800d392:	eba0 0308 	sub.w	r3, r0, r8
 800d396:	fa09 f303 	lsl.w	r3, r9, r3
 800d39a:	4313      	orrs	r3, r2
 800d39c:	46a2      	mov	sl, r4
 800d39e:	9304      	str	r3, [sp, #16]
 800d3a0:	e7d2      	b.n	800d348 <_svfiprintf_r+0xa0>
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	1d19      	adds	r1, r3, #4
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	9103      	str	r1, [sp, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bfbb      	ittet	lt
 800d3ae:	425b      	neglt	r3, r3
 800d3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d3b4:	9307      	strge	r3, [sp, #28]
 800d3b6:	9307      	strlt	r3, [sp, #28]
 800d3b8:	bfb8      	it	lt
 800d3ba:	9204      	strlt	r2, [sp, #16]
 800d3bc:	7823      	ldrb	r3, [r4, #0]
 800d3be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3c0:	d10a      	bne.n	800d3d8 <_svfiprintf_r+0x130>
 800d3c2:	7863      	ldrb	r3, [r4, #1]
 800d3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3c6:	d132      	bne.n	800d42e <_svfiprintf_r+0x186>
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	3402      	adds	r4, #2
 800d3cc:	1d1a      	adds	r2, r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	9203      	str	r2, [sp, #12]
 800d3d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3d6:	9305      	str	r3, [sp, #20]
 800d3d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d490 <_svfiprintf_r+0x1e8>
 800d3dc:	2203      	movs	r2, #3
 800d3de:	4650      	mov	r0, sl
 800d3e0:	7821      	ldrb	r1, [r4, #0]
 800d3e2:	f000 fa37 	bl	800d854 <memchr>
 800d3e6:	b138      	cbz	r0, 800d3f8 <_svfiprintf_r+0x150>
 800d3e8:	2240      	movs	r2, #64	@ 0x40
 800d3ea:	9b04      	ldr	r3, [sp, #16]
 800d3ec:	eba0 000a 	sub.w	r0, r0, sl
 800d3f0:	4082      	lsls	r2, r0
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	3401      	adds	r4, #1
 800d3f6:	9304      	str	r3, [sp, #16]
 800d3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fc:	2206      	movs	r2, #6
 800d3fe:	4825      	ldr	r0, [pc, #148]	@ (800d494 <_svfiprintf_r+0x1ec>)
 800d400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d404:	f000 fa26 	bl	800d854 <memchr>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d036      	beq.n	800d47a <_svfiprintf_r+0x1d2>
 800d40c:	4b22      	ldr	r3, [pc, #136]	@ (800d498 <_svfiprintf_r+0x1f0>)
 800d40e:	bb1b      	cbnz	r3, 800d458 <_svfiprintf_r+0x1b0>
 800d410:	9b03      	ldr	r3, [sp, #12]
 800d412:	3307      	adds	r3, #7
 800d414:	f023 0307 	bic.w	r3, r3, #7
 800d418:	3308      	adds	r3, #8
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41e:	4433      	add	r3, r6
 800d420:	9309      	str	r3, [sp, #36]	@ 0x24
 800d422:	e76a      	b.n	800d2fa <_svfiprintf_r+0x52>
 800d424:	460c      	mov	r4, r1
 800d426:	2001      	movs	r0, #1
 800d428:	fb0c 3202 	mla	r2, ip, r2, r3
 800d42c:	e7a8      	b.n	800d380 <_svfiprintf_r+0xd8>
 800d42e:	2300      	movs	r3, #0
 800d430:	f04f 0c0a 	mov.w	ip, #10
 800d434:	4619      	mov	r1, r3
 800d436:	3401      	adds	r4, #1
 800d438:	9305      	str	r3, [sp, #20]
 800d43a:	4620      	mov	r0, r4
 800d43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d440:	3a30      	subs	r2, #48	@ 0x30
 800d442:	2a09      	cmp	r2, #9
 800d444:	d903      	bls.n	800d44e <_svfiprintf_r+0x1a6>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0c6      	beq.n	800d3d8 <_svfiprintf_r+0x130>
 800d44a:	9105      	str	r1, [sp, #20]
 800d44c:	e7c4      	b.n	800d3d8 <_svfiprintf_r+0x130>
 800d44e:	4604      	mov	r4, r0
 800d450:	2301      	movs	r3, #1
 800d452:	fb0c 2101 	mla	r1, ip, r1, r2
 800d456:	e7f0      	b.n	800d43a <_svfiprintf_r+0x192>
 800d458:	ab03      	add	r3, sp, #12
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	462a      	mov	r2, r5
 800d45e:	4638      	mov	r0, r7
 800d460:	4b0e      	ldr	r3, [pc, #56]	@ (800d49c <_svfiprintf_r+0x1f4>)
 800d462:	a904      	add	r1, sp, #16
 800d464:	f3af 8000 	nop.w
 800d468:	1c42      	adds	r2, r0, #1
 800d46a:	4606      	mov	r6, r0
 800d46c:	d1d6      	bne.n	800d41c <_svfiprintf_r+0x174>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	065b      	lsls	r3, r3, #25
 800d472:	f53f af2d 	bmi.w	800d2d0 <_svfiprintf_r+0x28>
 800d476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d478:	e72c      	b.n	800d2d4 <_svfiprintf_r+0x2c>
 800d47a:	ab03      	add	r3, sp, #12
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	462a      	mov	r2, r5
 800d480:	4638      	mov	r0, r7
 800d482:	4b06      	ldr	r3, [pc, #24]	@ (800d49c <_svfiprintf_r+0x1f4>)
 800d484:	a904      	add	r1, sp, #16
 800d486:	f000 f87d 	bl	800d584 <_printf_i>
 800d48a:	e7ed      	b.n	800d468 <_svfiprintf_r+0x1c0>
 800d48c:	0800dbab 	.word	0x0800dbab
 800d490:	0800dbb1 	.word	0x0800dbb1
 800d494:	0800dbb5 	.word	0x0800dbb5
 800d498:	00000000 	.word	0x00000000
 800d49c:	0800d1f1 	.word	0x0800d1f1

0800d4a0 <_printf_common>:
 800d4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a4:	4616      	mov	r6, r2
 800d4a6:	4698      	mov	r8, r3
 800d4a8:	688a      	ldr	r2, [r1, #8]
 800d4aa:	690b      	ldr	r3, [r1, #16]
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	bfb8      	it	lt
 800d4b2:	4613      	movlt	r3, r2
 800d4b4:	6033      	str	r3, [r6, #0]
 800d4b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_printf_common+0x26>
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	6033      	str	r3, [r6, #0]
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	0699      	lsls	r1, r3, #26
 800d4ca:	bf42      	ittt	mi
 800d4cc:	6833      	ldrmi	r3, [r6, #0]
 800d4ce:	3302      	addmi	r3, #2
 800d4d0:	6033      	strmi	r3, [r6, #0]
 800d4d2:	6825      	ldr	r5, [r4, #0]
 800d4d4:	f015 0506 	ands.w	r5, r5, #6
 800d4d8:	d106      	bne.n	800d4e8 <_printf_common+0x48>
 800d4da:	f104 0a19 	add.w	sl, r4, #25
 800d4de:	68e3      	ldr	r3, [r4, #12]
 800d4e0:	6832      	ldr	r2, [r6, #0]
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dc2b      	bgt.n	800d540 <_printf_common+0xa0>
 800d4e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	3b00      	subs	r3, #0
 800d4f0:	bf18      	it	ne
 800d4f2:	2301      	movne	r3, #1
 800d4f4:	0692      	lsls	r2, r2, #26
 800d4f6:	d430      	bmi.n	800d55a <_printf_common+0xba>
 800d4f8:	4641      	mov	r1, r8
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d500:	47c8      	blx	r9
 800d502:	3001      	adds	r0, #1
 800d504:	d023      	beq.n	800d54e <_printf_common+0xae>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	6922      	ldr	r2, [r4, #16]
 800d50a:	f003 0306 	and.w	r3, r3, #6
 800d50e:	2b04      	cmp	r3, #4
 800d510:	bf14      	ite	ne
 800d512:	2500      	movne	r5, #0
 800d514:	6833      	ldreq	r3, [r6, #0]
 800d516:	f04f 0600 	mov.w	r6, #0
 800d51a:	bf08      	it	eq
 800d51c:	68e5      	ldreq	r5, [r4, #12]
 800d51e:	f104 041a 	add.w	r4, r4, #26
 800d522:	bf08      	it	eq
 800d524:	1aed      	subeq	r5, r5, r3
 800d526:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d52a:	bf08      	it	eq
 800d52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d530:	4293      	cmp	r3, r2
 800d532:	bfc4      	itt	gt
 800d534:	1a9b      	subgt	r3, r3, r2
 800d536:	18ed      	addgt	r5, r5, r3
 800d538:	42b5      	cmp	r5, r6
 800d53a:	d11a      	bne.n	800d572 <_printf_common+0xd2>
 800d53c:	2000      	movs	r0, #0
 800d53e:	e008      	b.n	800d552 <_printf_common+0xb2>
 800d540:	2301      	movs	r3, #1
 800d542:	4652      	mov	r2, sl
 800d544:	4641      	mov	r1, r8
 800d546:	4638      	mov	r0, r7
 800d548:	47c8      	blx	r9
 800d54a:	3001      	adds	r0, #1
 800d54c:	d103      	bne.n	800d556 <_printf_common+0xb6>
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	3501      	adds	r5, #1
 800d558:	e7c1      	b.n	800d4de <_printf_common+0x3e>
 800d55a:	2030      	movs	r0, #48	@ 0x30
 800d55c:	18e1      	adds	r1, r4, r3
 800d55e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d568:	4422      	add	r2, r4
 800d56a:	3302      	adds	r3, #2
 800d56c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d570:	e7c2      	b.n	800d4f8 <_printf_common+0x58>
 800d572:	2301      	movs	r3, #1
 800d574:	4622      	mov	r2, r4
 800d576:	4641      	mov	r1, r8
 800d578:	4638      	mov	r0, r7
 800d57a:	47c8      	blx	r9
 800d57c:	3001      	adds	r0, #1
 800d57e:	d0e6      	beq.n	800d54e <_printf_common+0xae>
 800d580:	3601      	adds	r6, #1
 800d582:	e7d9      	b.n	800d538 <_printf_common+0x98>

0800d584 <_printf_i>:
 800d584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	7e0f      	ldrb	r7, [r1, #24]
 800d58a:	4691      	mov	r9, r2
 800d58c:	2f78      	cmp	r7, #120	@ 0x78
 800d58e:	4680      	mov	r8, r0
 800d590:	460c      	mov	r4, r1
 800d592:	469a      	mov	sl, r3
 800d594:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d59a:	d807      	bhi.n	800d5ac <_printf_i+0x28>
 800d59c:	2f62      	cmp	r7, #98	@ 0x62
 800d59e:	d80a      	bhi.n	800d5b6 <_printf_i+0x32>
 800d5a0:	2f00      	cmp	r7, #0
 800d5a2:	f000 80d3 	beq.w	800d74c <_printf_i+0x1c8>
 800d5a6:	2f58      	cmp	r7, #88	@ 0x58
 800d5a8:	f000 80ba 	beq.w	800d720 <_printf_i+0x19c>
 800d5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5b4:	e03a      	b.n	800d62c <_printf_i+0xa8>
 800d5b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5ba:	2b15      	cmp	r3, #21
 800d5bc:	d8f6      	bhi.n	800d5ac <_printf_i+0x28>
 800d5be:	a101      	add	r1, pc, #4	@ (adr r1, 800d5c4 <_printf_i+0x40>)
 800d5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5c4:	0800d61d 	.word	0x0800d61d
 800d5c8:	0800d631 	.word	0x0800d631
 800d5cc:	0800d5ad 	.word	0x0800d5ad
 800d5d0:	0800d5ad 	.word	0x0800d5ad
 800d5d4:	0800d5ad 	.word	0x0800d5ad
 800d5d8:	0800d5ad 	.word	0x0800d5ad
 800d5dc:	0800d631 	.word	0x0800d631
 800d5e0:	0800d5ad 	.word	0x0800d5ad
 800d5e4:	0800d5ad 	.word	0x0800d5ad
 800d5e8:	0800d5ad 	.word	0x0800d5ad
 800d5ec:	0800d5ad 	.word	0x0800d5ad
 800d5f0:	0800d733 	.word	0x0800d733
 800d5f4:	0800d65b 	.word	0x0800d65b
 800d5f8:	0800d6ed 	.word	0x0800d6ed
 800d5fc:	0800d5ad 	.word	0x0800d5ad
 800d600:	0800d5ad 	.word	0x0800d5ad
 800d604:	0800d755 	.word	0x0800d755
 800d608:	0800d5ad 	.word	0x0800d5ad
 800d60c:	0800d65b 	.word	0x0800d65b
 800d610:	0800d5ad 	.word	0x0800d5ad
 800d614:	0800d5ad 	.word	0x0800d5ad
 800d618:	0800d6f5 	.word	0x0800d6f5
 800d61c:	6833      	ldr	r3, [r6, #0]
 800d61e:	1d1a      	adds	r2, r3, #4
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6032      	str	r2, [r6, #0]
 800d624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d62c:	2301      	movs	r3, #1
 800d62e:	e09e      	b.n	800d76e <_printf_i+0x1ea>
 800d630:	6833      	ldr	r3, [r6, #0]
 800d632:	6820      	ldr	r0, [r4, #0]
 800d634:	1d19      	adds	r1, r3, #4
 800d636:	6031      	str	r1, [r6, #0]
 800d638:	0606      	lsls	r6, r0, #24
 800d63a:	d501      	bpl.n	800d640 <_printf_i+0xbc>
 800d63c:	681d      	ldr	r5, [r3, #0]
 800d63e:	e003      	b.n	800d648 <_printf_i+0xc4>
 800d640:	0645      	lsls	r5, r0, #25
 800d642:	d5fb      	bpl.n	800d63c <_printf_i+0xb8>
 800d644:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d648:	2d00      	cmp	r5, #0
 800d64a:	da03      	bge.n	800d654 <_printf_i+0xd0>
 800d64c:	232d      	movs	r3, #45	@ 0x2d
 800d64e:	426d      	negs	r5, r5
 800d650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d654:	230a      	movs	r3, #10
 800d656:	4859      	ldr	r0, [pc, #356]	@ (800d7bc <_printf_i+0x238>)
 800d658:	e011      	b.n	800d67e <_printf_i+0xfa>
 800d65a:	6821      	ldr	r1, [r4, #0]
 800d65c:	6833      	ldr	r3, [r6, #0]
 800d65e:	0608      	lsls	r0, r1, #24
 800d660:	f853 5b04 	ldr.w	r5, [r3], #4
 800d664:	d402      	bmi.n	800d66c <_printf_i+0xe8>
 800d666:	0649      	lsls	r1, r1, #25
 800d668:	bf48      	it	mi
 800d66a:	b2ad      	uxthmi	r5, r5
 800d66c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d66e:	6033      	str	r3, [r6, #0]
 800d670:	bf14      	ite	ne
 800d672:	230a      	movne	r3, #10
 800d674:	2308      	moveq	r3, #8
 800d676:	4851      	ldr	r0, [pc, #324]	@ (800d7bc <_printf_i+0x238>)
 800d678:	2100      	movs	r1, #0
 800d67a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d67e:	6866      	ldr	r6, [r4, #4]
 800d680:	2e00      	cmp	r6, #0
 800d682:	bfa8      	it	ge
 800d684:	6821      	ldrge	r1, [r4, #0]
 800d686:	60a6      	str	r6, [r4, #8]
 800d688:	bfa4      	itt	ge
 800d68a:	f021 0104 	bicge.w	r1, r1, #4
 800d68e:	6021      	strge	r1, [r4, #0]
 800d690:	b90d      	cbnz	r5, 800d696 <_printf_i+0x112>
 800d692:	2e00      	cmp	r6, #0
 800d694:	d04b      	beq.n	800d72e <_printf_i+0x1aa>
 800d696:	4616      	mov	r6, r2
 800d698:	fbb5 f1f3 	udiv	r1, r5, r3
 800d69c:	fb03 5711 	mls	r7, r3, r1, r5
 800d6a0:	5dc7      	ldrb	r7, [r0, r7]
 800d6a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6a6:	462f      	mov	r7, r5
 800d6a8:	42bb      	cmp	r3, r7
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	d9f4      	bls.n	800d698 <_printf_i+0x114>
 800d6ae:	2b08      	cmp	r3, #8
 800d6b0:	d10b      	bne.n	800d6ca <_printf_i+0x146>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	07df      	lsls	r7, r3, #31
 800d6b6:	d508      	bpl.n	800d6ca <_printf_i+0x146>
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	6861      	ldr	r1, [r4, #4]
 800d6bc:	4299      	cmp	r1, r3
 800d6be:	bfde      	ittt	le
 800d6c0:	2330      	movle	r3, #48	@ 0x30
 800d6c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d6ca:	1b92      	subs	r2, r2, r6
 800d6cc:	6122      	str	r2, [r4, #16]
 800d6ce:	464b      	mov	r3, r9
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	f8cd a000 	str.w	sl, [sp]
 800d6d8:	aa03      	add	r2, sp, #12
 800d6da:	f7ff fee1 	bl	800d4a0 <_printf_common>
 800d6de:	3001      	adds	r0, #1
 800d6e0:	d14a      	bne.n	800d778 <_printf_i+0x1f4>
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6e6:	b004      	add	sp, #16
 800d6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	f043 0320 	orr.w	r3, r3, #32
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	2778      	movs	r7, #120	@ 0x78
 800d6f6:	4832      	ldr	r0, [pc, #200]	@ (800d7c0 <_printf_i+0x23c>)
 800d6f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6fc:	6823      	ldr	r3, [r4, #0]
 800d6fe:	6831      	ldr	r1, [r6, #0]
 800d700:	061f      	lsls	r7, r3, #24
 800d702:	f851 5b04 	ldr.w	r5, [r1], #4
 800d706:	d402      	bmi.n	800d70e <_printf_i+0x18a>
 800d708:	065f      	lsls	r7, r3, #25
 800d70a:	bf48      	it	mi
 800d70c:	b2ad      	uxthmi	r5, r5
 800d70e:	6031      	str	r1, [r6, #0]
 800d710:	07d9      	lsls	r1, r3, #31
 800d712:	bf44      	itt	mi
 800d714:	f043 0320 	orrmi.w	r3, r3, #32
 800d718:	6023      	strmi	r3, [r4, #0]
 800d71a:	b11d      	cbz	r5, 800d724 <_printf_i+0x1a0>
 800d71c:	2310      	movs	r3, #16
 800d71e:	e7ab      	b.n	800d678 <_printf_i+0xf4>
 800d720:	4826      	ldr	r0, [pc, #152]	@ (800d7bc <_printf_i+0x238>)
 800d722:	e7e9      	b.n	800d6f8 <_printf_i+0x174>
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	f023 0320 	bic.w	r3, r3, #32
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	e7f6      	b.n	800d71c <_printf_i+0x198>
 800d72e:	4616      	mov	r6, r2
 800d730:	e7bd      	b.n	800d6ae <_printf_i+0x12a>
 800d732:	6833      	ldr	r3, [r6, #0]
 800d734:	6825      	ldr	r5, [r4, #0]
 800d736:	1d18      	adds	r0, r3, #4
 800d738:	6961      	ldr	r1, [r4, #20]
 800d73a:	6030      	str	r0, [r6, #0]
 800d73c:	062e      	lsls	r6, r5, #24
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	d501      	bpl.n	800d746 <_printf_i+0x1c2>
 800d742:	6019      	str	r1, [r3, #0]
 800d744:	e002      	b.n	800d74c <_printf_i+0x1c8>
 800d746:	0668      	lsls	r0, r5, #25
 800d748:	d5fb      	bpl.n	800d742 <_printf_i+0x1be>
 800d74a:	8019      	strh	r1, [r3, #0]
 800d74c:	2300      	movs	r3, #0
 800d74e:	4616      	mov	r6, r2
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	e7bc      	b.n	800d6ce <_printf_i+0x14a>
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	2100      	movs	r1, #0
 800d758:	1d1a      	adds	r2, r3, #4
 800d75a:	6032      	str	r2, [r6, #0]
 800d75c:	681e      	ldr	r6, [r3, #0]
 800d75e:	6862      	ldr	r2, [r4, #4]
 800d760:	4630      	mov	r0, r6
 800d762:	f000 f877 	bl	800d854 <memchr>
 800d766:	b108      	cbz	r0, 800d76c <_printf_i+0x1e8>
 800d768:	1b80      	subs	r0, r0, r6
 800d76a:	6060      	str	r0, [r4, #4]
 800d76c:	6863      	ldr	r3, [r4, #4]
 800d76e:	6123      	str	r3, [r4, #16]
 800d770:	2300      	movs	r3, #0
 800d772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d776:	e7aa      	b.n	800d6ce <_printf_i+0x14a>
 800d778:	4632      	mov	r2, r6
 800d77a:	4649      	mov	r1, r9
 800d77c:	4640      	mov	r0, r8
 800d77e:	6923      	ldr	r3, [r4, #16]
 800d780:	47d0      	blx	sl
 800d782:	3001      	adds	r0, #1
 800d784:	d0ad      	beq.n	800d6e2 <_printf_i+0x15e>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	079b      	lsls	r3, r3, #30
 800d78a:	d413      	bmi.n	800d7b4 <_printf_i+0x230>
 800d78c:	68e0      	ldr	r0, [r4, #12]
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	4298      	cmp	r0, r3
 800d792:	bfb8      	it	lt
 800d794:	4618      	movlt	r0, r3
 800d796:	e7a6      	b.n	800d6e6 <_printf_i+0x162>
 800d798:	2301      	movs	r3, #1
 800d79a:	4632      	mov	r2, r6
 800d79c:	4649      	mov	r1, r9
 800d79e:	4640      	mov	r0, r8
 800d7a0:	47d0      	blx	sl
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d09d      	beq.n	800d6e2 <_printf_i+0x15e>
 800d7a6:	3501      	adds	r5, #1
 800d7a8:	68e3      	ldr	r3, [r4, #12]
 800d7aa:	9903      	ldr	r1, [sp, #12]
 800d7ac:	1a5b      	subs	r3, r3, r1
 800d7ae:	42ab      	cmp	r3, r5
 800d7b0:	dcf2      	bgt.n	800d798 <_printf_i+0x214>
 800d7b2:	e7eb      	b.n	800d78c <_printf_i+0x208>
 800d7b4:	2500      	movs	r5, #0
 800d7b6:	f104 0619 	add.w	r6, r4, #25
 800d7ba:	e7f5      	b.n	800d7a8 <_printf_i+0x224>
 800d7bc:	0800dbbc 	.word	0x0800dbbc
 800d7c0:	0800dbcd 	.word	0x0800dbcd

0800d7c4 <_realloc_r>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4615      	mov	r5, r2
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	b921      	cbnz	r1, 800d7da <_realloc_r+0x16>
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	f7ff bb67 	b.w	800cea8 <_malloc_r>
 800d7da:	b92a      	cbnz	r2, 800d7e8 <_realloc_r+0x24>
 800d7dc:	f7ff fcc0 	bl	800d160 <_free_r>
 800d7e0:	2400      	movs	r4, #0
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e8:	f000 f850 	bl	800d88c <_malloc_usable_size_r>
 800d7ec:	4285      	cmp	r5, r0
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	d802      	bhi.n	800d7f8 <_realloc_r+0x34>
 800d7f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7f6:	d8f4      	bhi.n	800d7e2 <_realloc_r+0x1e>
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	f7ff fb54 	bl	800cea8 <_malloc_r>
 800d800:	4607      	mov	r7, r0
 800d802:	2800      	cmp	r0, #0
 800d804:	d0ec      	beq.n	800d7e0 <_realloc_r+0x1c>
 800d806:	42b5      	cmp	r5, r6
 800d808:	462a      	mov	r2, r5
 800d80a:	4621      	mov	r1, r4
 800d80c:	bf28      	it	cs
 800d80e:	4632      	movcs	r2, r6
 800d810:	f000 f82e 	bl	800d870 <memcpy>
 800d814:	4621      	mov	r1, r4
 800d816:	4640      	mov	r0, r8
 800d818:	f7ff fca2 	bl	800d160 <_free_r>
 800d81c:	463c      	mov	r4, r7
 800d81e:	e7e0      	b.n	800d7e2 <_realloc_r+0x1e>

0800d820 <memmove>:
 800d820:	4288      	cmp	r0, r1
 800d822:	b510      	push	{r4, lr}
 800d824:	eb01 0402 	add.w	r4, r1, r2
 800d828:	d902      	bls.n	800d830 <memmove+0x10>
 800d82a:	4284      	cmp	r4, r0
 800d82c:	4623      	mov	r3, r4
 800d82e:	d807      	bhi.n	800d840 <memmove+0x20>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	42a1      	cmp	r1, r4
 800d834:	d008      	beq.n	800d848 <memmove+0x28>
 800d836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d83e:	e7f8      	b.n	800d832 <memmove+0x12>
 800d840:	4601      	mov	r1, r0
 800d842:	4402      	add	r2, r0
 800d844:	428a      	cmp	r2, r1
 800d846:	d100      	bne.n	800d84a <memmove+0x2a>
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d852:	e7f7      	b.n	800d844 <memmove+0x24>

0800d854 <memchr>:
 800d854:	4603      	mov	r3, r0
 800d856:	b510      	push	{r4, lr}
 800d858:	b2c9      	uxtb	r1, r1
 800d85a:	4402      	add	r2, r0
 800d85c:	4293      	cmp	r3, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	d101      	bne.n	800d866 <memchr+0x12>
 800d862:	2000      	movs	r0, #0
 800d864:	e003      	b.n	800d86e <memchr+0x1a>
 800d866:	7804      	ldrb	r4, [r0, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	428c      	cmp	r4, r1
 800d86c:	d1f6      	bne.n	800d85c <memchr+0x8>
 800d86e:	bd10      	pop	{r4, pc}

0800d870 <memcpy>:
 800d870:	440a      	add	r2, r1
 800d872:	4291      	cmp	r1, r2
 800d874:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d878:	d100      	bne.n	800d87c <memcpy+0xc>
 800d87a:	4770      	bx	lr
 800d87c:	b510      	push	{r4, lr}
 800d87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d882:	4291      	cmp	r1, r2
 800d884:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d888:	d1f9      	bne.n	800d87e <memcpy+0xe>
 800d88a:	bd10      	pop	{r4, pc}

0800d88c <_malloc_usable_size_r>:
 800d88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d890:	1f18      	subs	r0, r3, #4
 800d892:	2b00      	cmp	r3, #0
 800d894:	bfbc      	itt	lt
 800d896:	580b      	ldrlt	r3, [r1, r0]
 800d898:	18c0      	addlt	r0, r0, r3
 800d89a:	4770      	bx	lr

0800d89c <_init>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <_fini>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	bf00      	nop
 800d8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ae:	bc08      	pop	{r3}
 800d8b0:	469e      	mov	lr, r3
 800d8b2:	4770      	bx	lr
