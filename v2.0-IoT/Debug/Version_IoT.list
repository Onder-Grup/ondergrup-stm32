
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d80c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800d9f0  0800d9f0  0000e9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd1c  0800dd1c  0000ffd4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd1c  0800dd1c  0000ed1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd24  0800dd24  0000ffd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd28  0800dd28  0000ed28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd4  20000000  0800dd2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba4  20000fd4  0800ed00  0000ffd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800ed00  00010b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d23  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003614  00000000  00000000  00028d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0002c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eaf  00000000  00000000  0002d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8e7  00000000  00000000  0004ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0478  00000000  00000000  0006765a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  00107b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd4 	.word	0x20000fd4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d9d8 	.word	0x0800d9d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd8 	.word	0x20000fd8
 8000220:	0800d9d8 	.word	0x0800d9d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fa24 	bl	800a69c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f009 f89c 	bl	8009394 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000ff0 	.word	0x20000ff0
 80004bc:	20001944 	.word	0x20001944
 80004c0:	2000109d 	.word	0x2000109d
 80004c4:	200010c9 	.word	0x200010c9
 80004c8:	200010cc 	.word	0x200010cc
 80004cc:	200010cd 	.word	0x200010cd
 80004d0:	200010ce 	.word	0x200010ce
 80004d4:	200010cf 	.word	0x200010cf
 80004d8:	200010d0 	.word	0x200010d0
 80004dc:	200010d1 	.word	0x200010d1
 80004e0:	200010e1 	.word	0x200010e1
 80004e4:	200010d2 	.word	0x200010d2
 80004e8:	200010e2 	.word	0x200010e2
 80004ec:	200010d3 	.word	0x200010d3
 80004f0:	200010e3 	.word	0x200010e3
 80004f4:	200010d6 	.word	0x200010d6
 80004f8:	200010d7 	.word	0x200010d7
 80004fc:	200010d8 	.word	0x200010d8
 8000500:	200010d9 	.word	0x200010d9
 8000504:	200010da 	.word	0x200010da
 8000508:	200010db 	.word	0x200010db
 800050c:	200010dc 	.word	0x200010dc
 8000510:	200010dd 	.word	0x200010dd
 8000514:	200010de 	.word	0x200010de
 8000518:	200010df 	.word	0x200010df
 800051c:	200010e0 	.word	0x200010e0
 8000520:	200010e4 	.word	0x200010e4
 8000524:	200010e6 	.word	0x200010e6
 8000528:	200010c4 	.word	0x200010c4
 800052c:	200010c5 	.word	0x200010c5
 8000530:	200010c6 	.word	0x200010c6
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200010c7 	.word	0x200010c7
 8000540:	200010e9 	.word	0x200010e9
 8000544:	200010e7 	.word	0x200010e7
 8000548:	200010d5 	.word	0x200010d5
 800054c:	200010e8 	.word	0x200010e8
 8000550:	200010d4 	.word	0x200010d4
 8000554:	200010ea 	.word	0x200010ea
 8000558:	200010eb 	.word	0x200010eb
 800055c:	200010ec 	.word	0x200010ec
 8000560:	200010ed 	.word	0x200010ed
 8000564:	200010ee 	.word	0x200010ee
 8000568:	200010ef 	.word	0x200010ef
 800056c:	200010f0 	.word	0x200010f0
 8000570:	200010f1 	.word	0x200010f1
 8000574:	200010f2 	.word	0x200010f2
 8000578:	200010f3 	.word	0x200010f3
 800057c:	2000109c 	.word	0x2000109c
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fe6a 	bl	8009394 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fe64 	bl	8009394 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 fe5e 	bl	8009394 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fc2d 	bl	8005f3c <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010e1 	.word	0x200010e1
 80006ec:	200010d2 	.word	0x200010d2
 80006f0:	200010e2 	.word	0x200010e2
 80006f4:	200010d3 	.word	0x200010d3
 80006f8:	200010d5 	.word	0x200010d5
 80006fc:	200010e3 	.word	0x200010e3
 8000700:	200010d6 	.word	0x200010d6
 8000704:	200010d7 	.word	0x200010d7
 8000708:	200010d8 	.word	0x200010d8
 800070c:	200010d9 	.word	0x200010d9
 8000710:	200010da 	.word	0x200010da
 8000714:	200010db 	.word	0x200010db
 8000718:	200010dc 	.word	0x200010dc
 800071c:	200010dd 	.word	0x200010dd
 8000720:	200010de 	.word	0x200010de
 8000724:	200010df 	.word	0x200010df
 8000728:	200010e0 	.word	0x200010e0
 800072c:	200010e4 	.word	0x200010e4
 8000730:	200010e6 	.word	0x200010e6
 8000734:	200010e8 	.word	0x200010e8
 8000738:	200010e9 	.word	0x200010e9
 800073c:	200010e7 	.word	0x200010e7

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000ff0 	.word	0x20000ff0
 8000828:	20000010 	.word	0x20000010
 800082c:	20001068 	.word	0x20001068
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20001074 	.word	0x20001074
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001088 	.word	0x20001088

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fcab 	bl	800d1de <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fc2f 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fe3a 	bl	800c52c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fd6a 	bl	8009394 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fc06 	bl	800d0fc <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c fbf6 	bl	800d0fc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fdfe 	bl	800c52c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fd2e 	bl	8009394 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fdea 	bl	800c52c <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fd1a 	bl	8009394 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800da40 	.word	0x0800da40
 8000970:	0800da50 	.word	0x0800da50
 8000974:	2000112c 	.word	0x2000112c
 8000978:	0800dae4 	.word	0x0800dae4
 800097c:	0800da70 	.word	0x0800da70
 8000980:	0800daf8 	.word	0x0800daf8

08000984 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f8d1 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fd4c 	bl	800a4a8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fcbe 	bl	8009394 <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000ff0 	.word	0x20000ff0
 8000a30:	20001944 	.word	0x20001944

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10f      	bne.n	8000a64 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 ff49 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, "1");
 8000a4e:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <hataKoduLcdGoster+0xf8>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	2002      	movs	r0, #2
 8000a54:	f007 ff44 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f007 ff3f 	bl	80088e0 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a62:	e05d      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10f      	bne.n	8000a8a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 ff36 	bl	80088e0 <lcd_print>
		lcd_print(2, 2, "2");
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <hataKoduLcdGoster+0x100>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 ff31 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a80:	2107      	movs	r1, #7
 8000a82:	2002      	movs	r0, #2
 8000a84:	f007 ff2c 	bl	80088e0 <lcd_print>
}
 8000a88:	e04a      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10f      	bne.n	8000ab0 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f007 ff23 	bl	80088e0 <lcd_print>
		lcd_print(2, 3, "3");
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <hataKoduLcdGoster+0x104>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f007 ff1e 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f007 ff19 	bl	80088e0 <lcd_print>
}
 8000aae:	e037      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d10f      	bne.n	8000ad6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 ff10 	bl	80088e0 <lcd_print>
		lcd_print(2, 4, "4");
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <hataKoduLcdGoster+0x108>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 ff0b 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 ff06 	bl	80088e0 <lcd_print>
}
 8000ad4:	e024      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d10f      	bne.n	8000afc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 fefd 	bl	80088e0 <lcd_print>
		lcd_print(2, 5, "5");
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <hataKoduLcdGoster+0x10c>)
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 fef8 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f007 fef3 	bl	80088e0 <lcd_print>
}
 8000afa:	e011      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d10e      	bne.n	8000b20 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 feea 	bl	80088e0 <lcd_print>
		lcd_print(2, 6, "6");
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <hataKoduLcdGoster+0x110>)
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 fee5 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 fee0 	bl	80088e0 <lcd_print>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200018b8 	.word	0x200018b8
 8000b2c:	0800db6c 	.word	0x0800db6c
 8000b30:	0800db70 	.word	0x0800db70
 8000b34:	0800db7c 	.word	0x0800db7c
 8000b38:	0800db80 	.word	0x0800db80
 8000b3c:	0800db84 	.word	0x0800db84
 8000b40:	0800db88 	.word	0x0800db88
 8000b44:	0800db8c 	.word	0x0800db8c

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000070 	.word	0x20000070
 8000b84:	20000ff0 	.word	0x20000ff0
 8000b88:	20000098 	.word	0x20000098

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <i2cTest+0x154>)
 8000bb0:	f009 fb4c 	bl	800a24c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	@ 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 ff53 	bl	8009a74 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	@ (8000ce4 <i2cTest+0x158>)
 8000bd4:	f009 f9c5 	bl	8009f62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <i2cTest+0x158>)
 8000bde:	f009 f9c0 	bl	8009f62 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 fbd6 	bl	8009394 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <i2cTest+0x158>)
 8000bee:	f009 f9a1 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	@ (8000ce4 <i2cTest+0x158>)
 8000bfc:	f009 f99a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <i2cTest+0x158>)
 8000c0c:	f009 f9a9 	bl	8009f62 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f008 fbbf 	bl	8009394 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	@ (8000ce4 <i2cTest+0x158>)
 8000c1c:	f009 f98a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	@ 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <i2cTest+0x158>)
 8000c2c:	f009 f999 	bl	8009f62 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f008 fbaf 	bl	8009394 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <i2cTest+0x158>)
 8000c3c:	f009 f97a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <i2cTest+0x158>)
 8000c4c:	f009 f989 	bl	8009f62 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f008 fb9f 	bl	8009394 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <i2cTest+0x158>)
 8000c5c:	f009 f96a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <i2cTest+0x158>)
 8000c6c:	f009 f979 	bl	8009f62 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f008 fb8f 	bl	8009394 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <i2cTest+0x158>)
 8000c7c:	f009 f95a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <i2cTest+0x158>)
 8000c9c:	f008 feea 	bl	8009a74 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <i2cTest+0x154>)
 8000cd2:	f009 f977 	bl	8009fc4 <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001944 	.word	0x20001944
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f008 fb4e 	bl	8009394 <HAL_Delay>
	lcd_clear();
 8000cf8:	f007 fe1e 	bl	8008938 <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13e      	bne.n	8000d80 <printTemplate+0x98>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d13b      	bne.n	8000d80 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a8d      	ldr	r2, [pc, #564]	@ (8000f40 <printTemplate+0x258>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 fde7 	bl	80088e0 <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a8c      	ldr	r2, [pc, #560]	@ (8000f44 <printTemplate+0x25c>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 fde2 	bl	80088e0 <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a8a      	ldr	r2, [pc, #552]	@ (8000f48 <printTemplate+0x260>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 fddd 	bl	80088e0 <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a89      	ldr	r2, [pc, #548]	@ (8000f4c <printTemplate+0x264>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 fdd8 	bl	80088e0 <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a87      	ldr	r2, [pc, #540]	@ (8000f50 <printTemplate+0x268>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fdd3 	bl	80088e0 <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a86      	ldr	r2, [pc, #536]	@ (8000f54 <printTemplate+0x26c>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fdce 	bl	80088e0 <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a84      	ldr	r2, [pc, #528]	@ (8000f58 <printTemplate+0x270>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 fdc9 	bl	80088e0 <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a83      	ldr	r2, [pc, #524]	@ (8000f5c <printTemplate+0x274>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fdc4 	bl	80088e0 <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a81      	ldr	r2, [pc, #516]	@ (8000f60 <printTemplate+0x278>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f007 fdbf 	bl	80088e0 <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a80      	ldr	r2, [pc, #512]	@ (8000f64 <printTemplate+0x27c>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 fdba 	bl	80088e0 <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a7e      	ldr	r2, [pc, #504]	@ (8000f68 <printTemplate+0x280>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fdb5 	bl	80088e0 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f007 fd92 	bl	80088a2 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d7e:	e0db      	b.n	8000f38 <printTemplate+0x250>
	} else if(type == 2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d177      	bne.n	8000e76 <printTemplate+0x18e>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <printTemplate+0xce>
			lcd_clear();
 8000d8c:	f007 fdd4 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f008 faff 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d96:	4a75      	ldr	r2, [pc, #468]	@ (8000f6c <printTemplate+0x284>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 fda0 	bl	80088e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000da0:	4a73      	ldr	r2, [pc, #460]	@ (8000f70 <printTemplate+0x288>)
 8000da2:	2107      	movs	r1, #7
 8000da4:	2001      	movs	r0, #1
 8000da6:	f007 fd9b 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000daa:	4a72      	ldr	r2, [pc, #456]	@ (8000f74 <printTemplate+0x28c>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	2002      	movs	r0, #2
 8000db0:	f007 fd96 	bl	80088e0 <lcd_print>
}
 8000db4:	e0c0      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 2) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d114      	bne.n	8000de6 <printTemplate+0xfe>
			lcd_clear();
 8000dbc:	f007 fdbc 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000dc0:	2064      	movs	r0, #100	@ 0x64
 8000dc2:	f008 fae7 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dc6:	4a69      	ldr	r2, [pc, #420]	@ (8000f6c <printTemplate+0x284>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f007 fd88 	bl	80088e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dd0:	4a67      	ldr	r2, [pc, #412]	@ (8000f70 <printTemplate+0x288>)
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f007 fd83 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dda:	4a67      	ldr	r2, [pc, #412]	@ (8000f78 <printTemplate+0x290>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2002      	movs	r0, #2
 8000de0:	f007 fd7e 	bl	80088e0 <lcd_print>
}
 8000de4:	e0a8      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 3) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d114      	bne.n	8000e16 <printTemplate+0x12e>
			lcd_clear();
 8000dec:	f007 fda4 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f008 facf 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000df6:	4a5d      	ldr	r2, [pc, #372]	@ (8000f6c <printTemplate+0x284>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f007 fd70 	bl	80088e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e00:	4a5b      	ldr	r2, [pc, #364]	@ (8000f70 <printTemplate+0x288>)
 8000e02:	2107      	movs	r1, #7
 8000e04:	2001      	movs	r0, #1
 8000e06:	f007 fd6b 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000f7c <printTemplate+0x294>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f007 fd66 	bl	80088e0 <lcd_print>
}
 8000e14:	e090      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 4) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d114      	bne.n	8000e46 <printTemplate+0x15e>
			lcd_clear();
 8000e1c:	f007 fd8c 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f008 fab7 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e26:	4a51      	ldr	r2, [pc, #324]	@ (8000f6c <printTemplate+0x284>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f007 fd58 	bl	80088e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e30:	4a4f      	ldr	r2, [pc, #316]	@ (8000f70 <printTemplate+0x288>)
 8000e32:	2107      	movs	r1, #7
 8000e34:	2001      	movs	r0, #1
 8000e36:	f007 fd53 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e3a:	4a51      	ldr	r2, [pc, #324]	@ (8000f80 <printTemplate+0x298>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f007 fd4e 	bl	80088e0 <lcd_print>
}
 8000e44:	e078      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 5) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d175      	bne.n	8000f38 <printTemplate+0x250>
			lcd_clear();
 8000e4c:	f007 fd74 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f008 fa9f 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e56:	4a45      	ldr	r2, [pc, #276]	@ (8000f6c <printTemplate+0x284>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f007 fd40 	bl	80088e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e60:	4a43      	ldr	r2, [pc, #268]	@ (8000f70 <printTemplate+0x288>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	2001      	movs	r0, #1
 8000e66:	f007 fd3b 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e6a:	4a46      	ldr	r2, [pc, #280]	@ (8000f84 <printTemplate+0x29c>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f007 fd36 	bl	80088e0 <lcd_print>
}
 8000e74:	e060      	b.n	8000f38 <printTemplate+0x250>
	} else if(type == 3) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d15d      	bne.n	8000f38 <printTemplate+0x250>
		if(page == 1) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10f      	bne.n	8000ea2 <printTemplate+0x1ba>
			lcd_clear();
 8000e82:	f007 fd59 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000e86:	2064      	movs	r0, #100	@ 0x64
 8000e88:	f008 fa84 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f88 <printTemplate+0x2a0>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	2001      	movs	r0, #1
 8000e92:	f007 fd25 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e96:	4a37      	ldr	r2, [pc, #220]	@ (8000f74 <printTemplate+0x28c>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f007 fd20 	bl	80088e0 <lcd_print>
}
 8000ea0:	e04a      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 2) {
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d10f      	bne.n	8000ec8 <printTemplate+0x1e0>
			lcd_clear();
 8000ea8:	f007 fd46 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000eac:	2064      	movs	r0, #100	@ 0x64
 8000eae:	f008 fa71 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000eb2:	4a35      	ldr	r2, [pc, #212]	@ (8000f88 <printTemplate+0x2a0>)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f007 fd12 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f78 <printTemplate+0x290>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f007 fd0d 	bl	80088e0 <lcd_print>
}
 8000ec6:	e037      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 3) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d10f      	bne.n	8000eee <printTemplate+0x206>
			lcd_clear();
 8000ece:	f007 fd33 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000ed2:	2064      	movs	r0, #100	@ 0x64
 8000ed4:	f008 fa5e 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f88 <printTemplate+0x2a0>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	2001      	movs	r0, #1
 8000ede:	f007 fcff 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000ee2:	4a26      	ldr	r2, [pc, #152]	@ (8000f7c <printTemplate+0x294>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f007 fcfa 	bl	80088e0 <lcd_print>
}
 8000eec:	e024      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 4) {
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d10f      	bne.n	8000f14 <printTemplate+0x22c>
			lcd_clear();
 8000ef4:	f007 fd20 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f008 fa4b 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <printTemplate+0x2a0>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	2001      	movs	r0, #1
 8000f04:	f007 fcec 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <printTemplate+0x298>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f007 fce7 	bl	80088e0 <lcd_print>
}
 8000f12:	e011      	b.n	8000f38 <printTemplate+0x250>
		} else if(page == 5) {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10e      	bne.n	8000f38 <printTemplate+0x250>
			lcd_clear();
 8000f1a:	f007 fd0d 	bl	8008938 <lcd_clear>
			HAL_Delay(100);
 8000f1e:	2064      	movs	r0, #100	@ 0x64
 8000f20:	f008 fa38 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f24:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <printTemplate+0x2a0>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f007 fcd9 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f2e:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <printTemplate+0x29c>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	2002      	movs	r0, #2
 8000f34:	f007 fcd4 	bl	80088e0 <lcd_print>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	0800db90 	.word	0x0800db90
 8000f44:	0800db98 	.word	0x0800db98
 8000f48:	0800db9c 	.word	0x0800db9c
 8000f4c:	0800dba0 	.word	0x0800dba0
 8000f50:	0800dba4 	.word	0x0800dba4
 8000f54:	0800dba8 	.word	0x0800dba8
 8000f58:	0800dbac 	.word	0x0800dbac
 8000f5c:	0800dbb0 	.word	0x0800dbb0
 8000f60:	0800dbb4 	.word	0x0800dbb4
 8000f64:	0800dbb8 	.word	0x0800dbb8
 8000f68:	0800dbbc 	.word	0x0800dbbc
 8000f6c:	0800dbc0 	.word	0x0800dbc0
 8000f70:	20001074 	.word	0x20001074
 8000f74:	0800dbc8 	.word	0x0800dbc8
 8000f78:	0800dbdc 	.word	0x0800dbdc
 8000f7c:	0800dbf0 	.word	0x0800dbf0
 8000f80:	0800dc04 	.word	0x0800dc04
 8000f84:	0800dc18 	.word	0x0800dc18
 8000f88:	0800dc2c 	.word	0x0800dc2c

08000f8c <checkSlideVal>:

int checkSlideVal(int state) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d111      	bne.n	8000fbe <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <checkSlideVal+0x60>)
 8000f9e:	f008 ffc9 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <checkSlideVal+0x20>
			return 34;
 8000fa8:	2322      	movs	r3, #34	@ 0x22
 8000faa:	e01b      	b.n	8000fe4 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fac:	2108      	movs	r1, #8
 8000fae:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <checkSlideVal+0x64>)
 8000fb0:	f008 ffc0 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d113      	bne.n	8000fe2 <checkSlideVal+0x56>
			return 32;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	e012      	b.n	8000fe4 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	480a      	ldr	r0, [pc, #40]	@ (8000fec <checkSlideVal+0x60>)
 8000fc2:	f008 ffb7 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <checkSlideVal+0x44>
			return 35;
 8000fcc:	2323      	movs	r3, #35	@ 0x23
 8000fce:	e009      	b.n	8000fe4 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <checkSlideVal+0x64>)
 8000fd4:	f008 ffae 	bl	8009f34 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <checkSlideVal+0x56>
			return 33;
 8000fde:	2321      	movs	r3, #33	@ 0x21
 8000fe0:	e000      	b.n	8000fe4 <checkSlideVal+0x58>
		}
	}
	return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff f90e 	bl	8000224 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8001010:	e0aa      	b.n	8001168 <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f7ff ffba 	bl	8000f8c <checkSlideVal>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	dd07      	ble.n	800102e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f7ff ffb4 	bl	8000f8c <checkSlideVal>
 8001024:	4603      	mov	r3, r0
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b54      	ldr	r3, [pc, #336]	@ (800117c <slideText+0x188>)
 800102a:	701a      	strb	r2, [r3, #0]
			break;
 800102c:	e0a2      	b.n	8001174 <slideText+0x180>
		}
		checkEditMode();
 800102e:	f000 f927 	bl	8001280 <checkEditMode>
		if(editMode == 1) {
 8001032:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <slideText+0x18c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f000 809b 	beq.w	8001172 <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	e08b      	b.n	800115a <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f7ff ffa2 	bl	8000f8c <checkSlideVal>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	dd09      	ble.n	8001062 <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff ff9c 	bl	8000f8c <checkSlideVal>
 8001054:	4603      	mov	r3, r0
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <slideText+0x188>)
 800105a:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 8001060:	e082      	b.n	8001168 <slideText+0x174>
			}
			checkEditMode();
 8001062:	f000 f90d 	bl	8001280 <checkEditMode>
			if(editMode == 1) {
 8001066:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <slideText+0x18c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d07b      	beq.n	8001166 <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	4413      	add	r3, r2
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e02f      	b.n	80010d8 <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff ff87 	bl	8000f8c <checkSlideVal>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd0b      	ble.n	800109c <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f7ff ff81 	bl	8000f8c <checkSlideVal>
 800108a:	4603      	mov	r3, r0
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <slideText+0x188>)
 8001090:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800109a:	e025      	b.n	80010e8 <slideText+0xf4>
				}
				checkEditMode();
 800109c:	f000 f8f0 	bl	8001280 <checkEditMode>
				if(editMode == 1) {
 80010a0:	4b37      	ldr	r3, [pc, #220]	@ (8001180 <slideText+0x18c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d01e      	beq.n	80010e6 <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2d8      	uxtb	r0, r3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b2d9      	uxtb	r1, r3
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f007 fc1f 	bl	800890a <lcd_print_char>
				HAL_Delay(30);
 80010cc:	201e      	movs	r0, #30
 80010ce:	f008 f961 	bl	8009394 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	7dfa      	ldrb	r2, [r7, #23]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbc9      	blt.n	8001078 <slideText+0x84>
 80010e4:	e000      	b.n	80010e8 <slideText+0xf4>
					break;
 80010e6:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e029      	b.n	8001144 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f7ff ff4b 	bl	8000f8c <checkSlideVal>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd0b      	ble.n	8001114 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f7ff ff45 	bl	8000f8c <checkSlideVal>
 8001102:	4603      	mov	r3, r0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <slideText+0x188>)
 8001108:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001112:	e01f      	b.n	8001154 <slideText+0x160>
				}
				checkEditMode();
 8001114:	f000 f8b4 	bl	8001280 <checkEditMode>
				if(editMode == 1) {
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <slideText+0x18c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d018      	beq.n	8001152 <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	429a      	cmp	r2, r3
 8001126:	db0a      	blt.n	800113e <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	b2d1      	uxtb	r1, r2
 8001130:	2220      	movs	r2, #32
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fbe9 	bl	800890a <lcd_print_char>
			    	HAL_Delay(30);
 8001138:	201e      	movs	r0, #30
 800113a:	f008 f92b 	bl	8009394 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	3b01      	subs	r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	7dfa      	ldrb	r2, [r7, #23]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	429a      	cmp	r2, r3
 800114e:	dacf      	bge.n	80010f0 <slideText+0xfc>
 8001150:	e000      	b.n	8001154 <slideText+0x160>
					break;
 8001152:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	3301      	adds	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	6a3a      	ldr	r2, [r7, #32]
 800115e:	429a      	cmp	r2, r3
 8001160:	f6ff af6f 	blt.w	8001042 <slideText+0x4e>
 8001164:	e000      	b.n	8001168 <slideText+0x174>
				break;
 8001166:	bf00      	nop
	while(mainLoopVal == 1) {
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	2b01      	cmp	r3, #1
 800116c:	f43f af51 	beq.w	8001012 <slideText+0x1e>
			    }
			}
		}
	}
}
 8001170:	e000      	b.n	8001174 <slideText+0x180>
			break;
 8001172:	bf00      	nop
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	@ 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200010c8 	.word	0x200010c8
 8001180:	200010c0 	.word	0x200010c0

08001184 <printCredentials>:

void printCredentials(int type) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10f      	bne.n	80011b2 <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <printCredentials+0xdc>)
 8001194:	2101      	movs	r1, #1
 8001196:	2001      	movs	r0, #1
 8001198:	f007 fba2 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, machineID);
 800119c:	4a31      	ldr	r2, [pc, #196]	@ (8001264 <printCredentials+0xe0>)
 800119e:	2101      	movs	r1, #1
 80011a0:	2002      	movs	r0, #2
 80011a2:	f007 fb9d 	bl	80088e0 <lcd_print>
		lcd_print(2, 13, "    ");
 80011a6:	4a30      	ldr	r2, [pc, #192]	@ (8001268 <printCredentials+0xe4>)
 80011a8:	210d      	movs	r1, #13
 80011aa:	2002      	movs	r0, #2
 80011ac:	f007 fb98 	bl	80088e0 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80011b0:	e051      	b.n	8001256 <printCredentials+0xd2>
	} else if(type == 2) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d127      	bne.n	8001208 <printCredentials+0x84>
		int ssidLength = strlen(wifiSSID);
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <printCredentials+0xe8>)
 80011ba:	f7ff f833 	bl	8000224 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80011c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <printCredentials+0xec>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	2001      	movs	r0, #1
 80011c8:	f007 fb8a 	bl	80088e0 <lcd_print>
		if(ssidLength == 16) {
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d105      	bne.n	80011de <printCredentials+0x5a>
			lcd_print(2, 1, wifiSSID);
 80011d2:	4a26      	ldr	r2, [pc, #152]	@ (800126c <printCredentials+0xe8>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	2002      	movs	r0, #2
 80011d8:	f007 fb82 	bl	80088e0 <lcd_print>
}
 80011dc:	e03b      	b.n	8001256 <printCredentials+0xd2>
		} else if(ssidLength < 16) {
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	dc0a      	bgt.n	80011fa <printCredentials+0x76>
			lcd_print(2, 1, "                ");
 80011e4:	4a23      	ldr	r2, [pc, #140]	@ (8001274 <printCredentials+0xf0>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	2002      	movs	r0, #2
 80011ea:	f007 fb79 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80011ee:	4a1f      	ldr	r2, [pc, #124]	@ (800126c <printCredentials+0xe8>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2002      	movs	r0, #2
 80011f4:	f007 fb74 	bl	80088e0 <lcd_print>
}
 80011f8:	e02d      	b.n	8001256 <printCredentials+0xd2>
			slideText(wifiSSID, 1, 2, 0);
 80011fa:	2300      	movs	r3, #0
 80011fc:	2202      	movs	r2, #2
 80011fe:	2101      	movs	r1, #1
 8001200:	481a      	ldr	r0, [pc, #104]	@ (800126c <printCredentials+0xe8>)
 8001202:	f7ff fef7 	bl	8000ff4 <slideText>
}
 8001206:	e026      	b.n	8001256 <printCredentials+0xd2>
		int passLength = strlen(wifiPass);
 8001208:	481b      	ldr	r0, [pc, #108]	@ (8001278 <printCredentials+0xf4>)
 800120a:	f7ff f80b 	bl	8000224 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 8001212:	4a1a      	ldr	r2, [pc, #104]	@ (800127c <printCredentials+0xf8>)
 8001214:	2101      	movs	r1, #1
 8001216:	2001      	movs	r0, #1
 8001218:	f007 fb62 	bl	80088e0 <lcd_print>
		if(passLength == 16) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d105      	bne.n	800122e <printCredentials+0xaa>
			lcd_print(2, 1, wifiPass);
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <printCredentials+0xf4>)
 8001224:	2101      	movs	r1, #1
 8001226:	2002      	movs	r0, #2
 8001228:	f007 fb5a 	bl	80088e0 <lcd_print>
}
 800122c:	e013      	b.n	8001256 <printCredentials+0xd2>
		} else if(passLength < 16) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	dc0a      	bgt.n	800124a <printCredentials+0xc6>
			lcd_print(2, 1, "                ");
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <printCredentials+0xf0>)
 8001236:	2101      	movs	r1, #1
 8001238:	2002      	movs	r0, #2
 800123a:	f007 fb51 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <printCredentials+0xf4>)
 8001240:	2101      	movs	r1, #1
 8001242:	2002      	movs	r0, #2
 8001244:	f007 fb4c 	bl	80088e0 <lcd_print>
}
 8001248:	e005      	b.n	8001256 <printCredentials+0xd2>
			slideText(wifiPass, 1, 2, 1);
 800124a:	2301      	movs	r3, #1
 800124c:	2202      	movs	r2, #2
 800124e:	2101      	movs	r1, #1
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <printCredentials+0xf4>)
 8001252:	f7ff fecf 	bl	8000ff4 <slideText>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200018cc 	.word	0x200018cc
 8001264:	20001068 	.word	0x20001068
 8001268:	0800dc34 	.word	0x0800dc34
 800126c:	20001074 	.word	0x20001074
 8001270:	0800dc3c 	.word	0x0800dc3c
 8001274:	0800dc50 	.word	0x0800dc50
 8001278:	20001088 	.word	0x20001088
 800127c:	0800dc64 	.word	0x0800dc64

08001280 <checkEditMode>:

void checkEditMode(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 8001284:	2102      	movs	r1, #2
 8001286:	4809      	ldr	r0, [pc, #36]	@ (80012ac <checkEditMode+0x2c>)
 8001288:	f008 fe54 	bl	8009f34 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d109      	bne.n	80012a6 <checkEditMode+0x26>
 8001292:	2104      	movs	r1, #4
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <checkEditMode+0x2c>)
 8001296:	f008 fe4d 	bl	8009f34 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d102      	bne.n	80012a6 <checkEditMode+0x26>
		editMode = 1;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <checkEditMode+0x30>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
	}
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40010800 	.word	0x40010800
 80012b0:	200010c0 	.word	0x200010c0

080012b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <__NVIC_SystemReset+0x24>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012c6:	4904      	ldr	r1, [pc, #16]	@ (80012d8 <__NVIC_SystemReset+0x24>)
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_SystemReset+0x28>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012ce:	f3bf 8f4f 	dsb	sy
}
 80012d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <__NVIC_SystemReset+0x20>
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0004 	.word	0x05fa0004

080012e0 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012e6:	2101      	movs	r1, #1
 80012e8:	488e      	ldr	r0, [pc, #568]	@ (8001524 <menu+0x244>)
 80012ea:	f008 fe23 	bl	8009f34 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 8099 	bne.w	8001428 <menu+0x148>
 80012f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <menu+0x248>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	f083 0301 	eor.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8091 	beq.w	8001428 <menu+0x148>
		menuSayac = menuSayac+1;
 8001306:	4b89      	ldr	r3, [pc, #548]	@ (800152c <menu+0x24c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b87      	ldr	r3, [pc, #540]	@ (800152c <menu+0x24c>)
 8001310:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001312:	4b86      	ldr	r3, [pc, #536]	@ (800152c <menu+0x24c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b24      	cmp	r3, #36	@ 0x24
 8001318:	d102      	bne.n	8001320 <menu+0x40>
			menuSayac = 1;
 800131a:	4b84      	ldr	r3, [pc, #528]	@ (800152c <menu+0x24c>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001320:	4b82      	ldr	r3, [pc, #520]	@ (800152c <menu+0x24c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d106      	bne.n	8001336 <menu+0x56>
 8001328:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <menu+0x250>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <menu+0x56>
			menuSayac = 21;
 8001330:	4b7e      	ldr	r3, [pc, #504]	@ (800152c <menu+0x24c>)
 8001332:	2215      	movs	r2, #21
 8001334:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001336:	4b7d      	ldr	r3, [pc, #500]	@ (800152c <menu+0x24c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d106      	bne.n	800134c <menu+0x6c>
 800133e:	4b7d      	ldr	r3, [pc, #500]	@ (8001534 <menu+0x254>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <menu+0x6c>
			menuSayac = 16;
 8001346:	4b79      	ldr	r3, [pc, #484]	@ (800152c <menu+0x24c>)
 8001348:	2210      	movs	r2, #16
 800134a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800134c:	4b77      	ldr	r3, [pc, #476]	@ (800152c <menu+0x24c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b0d      	cmp	r3, #13
 8001352:	d106      	bne.n	8001362 <menu+0x82>
 8001354:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <menu+0x254>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <menu+0x82>
			menuSayac = 16;
 800135c:	4b73      	ldr	r3, [pc, #460]	@ (800152c <menu+0x24c>)
 800135e:	2210      	movs	r2, #16
 8001360:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001362:	4b72      	ldr	r3, [pc, #456]	@ (800152c <menu+0x24c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b09      	cmp	r3, #9
 8001368:	d106      	bne.n	8001378 <menu+0x98>
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <menu+0x254>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d102      	bne.n	8001378 <menu+0x98>
			menuSayac = 13;
 8001372:	4b6e      	ldr	r3, [pc, #440]	@ (800152c <menu+0x24c>)
 8001374:	220d      	movs	r2, #13
 8001376:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001378:	4b6c      	ldr	r3, [pc, #432]	@ (800152c <menu+0x24c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0a      	cmp	r3, #10
 800137e:	d10a      	bne.n	8001396 <menu+0xb6>
 8001380:	4b6d      	ldr	r3, [pc, #436]	@ (8001538 <menu+0x258>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d003      	beq.n	8001390 <menu+0xb0>
 8001388:	4b6b      	ldr	r3, [pc, #428]	@ (8001538 <menu+0x258>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d102      	bne.n	8001396 <menu+0xb6>
			menuSayac = 11;
 8001390:	4b66      	ldr	r3, [pc, #408]	@ (800152c <menu+0x24c>)
 8001392:	220b      	movs	r2, #11
 8001394:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001396:	4b65      	ldr	r3, [pc, #404]	@ (800152c <menu+0x24c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d10e      	bne.n	80013bc <menu+0xdc>
 800139e:	4b67      	ldr	r3, [pc, #412]	@ (800153c <menu+0x25c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <menu+0xce>
 80013a6:	4b65      	ldr	r3, [pc, #404]	@ (800153c <menu+0x25c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d106      	bne.n	80013bc <menu+0xdc>
 80013ae:	4b61      	ldr	r3, [pc, #388]	@ (8001534 <menu+0x254>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <menu+0xdc>
			menuSayac = 16;
 80013b6:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <menu+0x24c>)
 80013b8:	2210      	movs	r2, #16
 80013ba:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013bc:	4b5b      	ldr	r3, [pc, #364]	@ (800152c <menu+0x24c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d10e      	bne.n	80013e2 <menu+0x102>
 80013c4:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <menu+0x25c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d003      	beq.n	80013d4 <menu+0xf4>
 80013cc:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <menu+0x25c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d106      	bne.n	80013e2 <menu+0x102>
 80013d4:	4b57      	ldr	r3, [pc, #348]	@ (8001534 <menu+0x254>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d102      	bne.n	80013e2 <menu+0x102>
			menuSayac = 13;
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <menu+0x24c>)
 80013de:	220d      	movs	r2, #13
 80013e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013e2:	4b52      	ldr	r3, [pc, #328]	@ (800152c <menu+0x24c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	d106      	bne.n	80013f8 <menu+0x118>
 80013ea:	4b55      	ldr	r3, [pc, #340]	@ (8001540 <menu+0x260>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <menu+0x118>
			menuSayac = 16;
 80013f2:	4b4e      	ldr	r3, [pc, #312]	@ (800152c <menu+0x24c>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013f8:	4b4c      	ldr	r3, [pc, #304]	@ (800152c <menu+0x24c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b18      	cmp	r3, #24
 80013fe:	d106      	bne.n	800140e <menu+0x12e>
 8001400:	4b4b      	ldr	r3, [pc, #300]	@ (8001530 <menu+0x250>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <menu+0x12e>
			menuSayac = 26;
 8001408:	4b48      	ldr	r3, [pc, #288]	@ (800152c <menu+0x24c>)
 800140a:	221a      	movs	r2, #26
 800140c:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <menu+0x24c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b21      	cmp	r3, #33	@ 0x21
 8001414:	d106      	bne.n	8001424 <menu+0x144>
 8001416:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <menu+0x264>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <menu+0x144>
			menuSayac = 35;
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <menu+0x24c>)
 8001420:	2223      	movs	r2, #35	@ 0x23
 8001422:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001424:	f002 fc9a 	bl	8003d5c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001428:	2108      	movs	r1, #8
 800142a:	4847      	ldr	r0, [pc, #284]	@ (8001548 <menu+0x268>)
 800142c:	f008 fd82 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	f040 8097 	bne.w	8001566 <menu+0x286>
 8001438:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <menu+0x248>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	f083 0301 	eor.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 808f 	beq.w	8001566 <menu+0x286>
		if (menuSayac <= 1) {
 8001448:	4b38      	ldr	r3, [pc, #224]	@ (800152c <menu+0x24c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d802      	bhi.n	8001456 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <menu+0x24c>)
 8001452:	2224      	movs	r2, #36	@ 0x24
 8001454:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001456:	4b35      	ldr	r3, [pc, #212]	@ (800152c <menu+0x24c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3b01      	subs	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <menu+0x24c>)
 8001460:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001462:	4b32      	ldr	r3, [pc, #200]	@ (800152c <menu+0x24c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b14      	cmp	r3, #20
 8001468:	d106      	bne.n	8001478 <menu+0x198>
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <menu+0x250>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <menu+0x198>
			menuSayac = 17;
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <menu+0x24c>)
 8001474:	2211      	movs	r2, #17
 8001476:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001478:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <menu+0x24c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d106      	bne.n	800148e <menu+0x1ae>
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <menu+0x254>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <menu+0x1ae>
			menuSayac = 7;
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <menu+0x24c>)
 800148a:	2207      	movs	r2, #7
 800148c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <menu+0x24c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d106      	bne.n	80014a4 <menu+0x1c4>
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <menu+0x254>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <menu+0x1c4>
			menuSayac = 12;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <menu+0x24c>)
 80014a0:	220c      	movs	r2, #12
 80014a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <menu+0x24c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d106      	bne.n	80014ba <menu+0x1da>
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <menu+0x254>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d102      	bne.n	80014ba <menu+0x1da>
			menuSayac = 8;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <menu+0x24c>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <menu+0x24c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d10a      	bne.n	80014d8 <menu+0x1f8>
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <menu+0x258>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <menu+0x1f2>
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <menu+0x258>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d102      	bne.n	80014d8 <menu+0x1f8>
			menuSayac = 9;
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <menu+0x24c>)
 80014d4:	2209      	movs	r2, #9
 80014d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <menu+0x24c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d10a      	bne.n	80014f6 <menu+0x216>
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <menu+0x25c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d003      	beq.n	80014f0 <menu+0x210>
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <menu+0x25c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d102      	bne.n	80014f6 <menu+0x216>
			menuSayac = 11;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <menu+0x24c>)
 80014f2:	220b      	movs	r2, #11
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <menu+0x24c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	d106      	bne.n	800150c <menu+0x22c>
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <menu+0x260>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <menu+0x22c>
			menuSayac = 14;
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <menu+0x24c>)
 8001508:	220e      	movs	r2, #14
 800150a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <menu+0x24c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b19      	cmp	r3, #25
 8001512:	d11b      	bne.n	800154c <menu+0x26c>
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <menu+0x250>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d117      	bne.n	800154c <menu+0x26c>
			menuSayac = 23;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <menu+0x24c>)
 800151e:	2217      	movs	r2, #23
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e013      	b.n	800154c <menu+0x26c>
 8001524:	40010800 	.word	0x40010800
 8001528:	200010f7 	.word	0x200010f7
 800152c:	200010c8 	.word	0x200010c8
 8001530:	200010d7 	.word	0x200010d7
 8001534:	200010d0 	.word	0x200010d0
 8001538:	200010d1 	.word	0x200010d1
 800153c:	200010d2 	.word	0x200010d2
 8001540:	200010d3 	.word	0x200010d3
 8001544:	200010e7 	.word	0x200010e7
 8001548:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 800154c:	4bb0      	ldr	r3, [pc, #704]	@ (8001810 <menu+0x530>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b22      	cmp	r3, #34	@ 0x22
 8001552:	d106      	bne.n	8001562 <menu+0x282>
 8001554:	4baf      	ldr	r3, [pc, #700]	@ (8001814 <menu+0x534>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <menu+0x282>
			menuSayac = 32;
 800155c:	4bac      	ldr	r3, [pc, #688]	@ (8001810 <menu+0x530>)
 800155e:	2220      	movs	r2, #32
 8001560:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001562:	f002 fbfb 	bl	8003d5c <bekle>
	}

	if (menuSayac == 0) {
 8001566:	4baa      	ldr	r3, [pc, #680]	@ (8001810 <menu+0x530>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800156e:	4aaa      	ldr	r2, [pc, #680]	@ (8001818 <menu+0x538>)
 8001570:	2101      	movs	r1, #1
 8001572:	2001      	movs	r0, #1
 8001574:	f007 f9b4 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001578:	4aa8      	ldr	r2, [pc, #672]	@ (800181c <menu+0x53c>)
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f007 f9af 	bl	80088e0 <lcd_print>
	}

	if (menuSayac == 1) {
 8001582:	4ba3      	ldr	r3, [pc, #652]	@ (8001810 <menu+0x530>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	f040 81f4 	bne.w	8001974 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 800158c:	4aa4      	ldr	r2, [pc, #656]	@ (8001820 <menu+0x540>)
 800158e:	2101      	movs	r1, #1
 8001590:	2001      	movs	r0, #1
 8001592:	f007 f9a5 	bl	80088e0 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001596:	4ba3      	ldr	r3, [pc, #652]	@ (8001824 <menu+0x544>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800159e:	4aa2      	ldr	r2, [pc, #648]	@ (8001828 <menu+0x548>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	2002      	movs	r0, #2
 80015a4:	f007 f99c 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "   ");
 80015a8:	4aa0      	ldr	r2, [pc, #640]	@ (800182c <menu+0x54c>)
 80015aa:	210f      	movs	r1, #15
 80015ac:	2002      	movs	r0, #2
 80015ae:	f007 f997 	bl	80088e0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80015b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001830 <menu+0x550>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	220a      	movs	r2, #10
 80015b8:	499e      	ldr	r1, [pc, #632]	@ (8001834 <menu+0x554>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b fce6 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 80015c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001834 <menu+0x554>)
 80015c2:	210e      	movs	r1, #14
 80015c4:	2002      	movs	r0, #2
 80015c6:	f007 f98b 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80015ca:	4b96      	ldr	r3, [pc, #600]	@ (8001824 <menu+0x544>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d115      	bne.n	80015fe <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 80015d2:	4a99      	ldr	r2, [pc, #612]	@ (8001838 <menu+0x558>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	2002      	movs	r0, #2
 80015d8:	f007 f982 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 80015dc:	4a97      	ldr	r2, [pc, #604]	@ (800183c <menu+0x55c>)
 80015de:	210f      	movs	r1, #15
 80015e0:	2002      	movs	r0, #2
 80015e2:	f007 f97d 	bl	80088e0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015e6:	4b96      	ldr	r3, [pc, #600]	@ (8001840 <menu+0x560>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	220a      	movs	r2, #10
 80015ec:	4991      	ldr	r1, [pc, #580]	@ (8001834 <menu+0x554>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00b fccc 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 80015f4:	4a8f      	ldr	r2, [pc, #572]	@ (8001834 <menu+0x554>)
 80015f6:	210e      	movs	r1, #14
 80015f8:	2002      	movs	r0, #2
 80015fa:	f007 f971 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015fe:	4b89      	ldr	r3, [pc, #548]	@ (8001824 <menu+0x544>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d115      	bne.n	8001632 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001606:	4a8f      	ldr	r2, [pc, #572]	@ (8001844 <menu+0x564>)
 8001608:	2101      	movs	r1, #1
 800160a:	2002      	movs	r0, #2
 800160c:	f007 f968 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001610:	4a8a      	ldr	r2, [pc, #552]	@ (800183c <menu+0x55c>)
 8001612:	210f      	movs	r1, #15
 8001614:	2002      	movs	r0, #2
 8001616:	f007 f963 	bl	80088e0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800161a:	4b8b      	ldr	r3, [pc, #556]	@ (8001848 <menu+0x568>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	220a      	movs	r2, #10
 8001620:	4984      	ldr	r1, [pc, #528]	@ (8001834 <menu+0x554>)
 8001622:	4618      	mov	r0, r3
 8001624:	f00b fcb2 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 8001628:	4a82      	ldr	r2, [pc, #520]	@ (8001834 <menu+0x554>)
 800162a:	210e      	movs	r1, #14
 800162c:	2002      	movs	r0, #2
 800162e:	f007 f957 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001632:	4b7c      	ldr	r3, [pc, #496]	@ (8001824 <menu+0x544>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d115      	bne.n	8001666 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 800163a:	4a84      	ldr	r2, [pc, #528]	@ (800184c <menu+0x56c>)
 800163c:	2101      	movs	r1, #1
 800163e:	2002      	movs	r0, #2
 8001640:	f007 f94e 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001644:	4a7d      	ldr	r2, [pc, #500]	@ (800183c <menu+0x55c>)
 8001646:	210f      	movs	r1, #15
 8001648:	2002      	movs	r0, #2
 800164a:	f007 f949 	bl	80088e0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800164e:	4b80      	ldr	r3, [pc, #512]	@ (8001850 <menu+0x570>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	220a      	movs	r2, #10
 8001654:	4977      	ldr	r1, [pc, #476]	@ (8001834 <menu+0x554>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fc98 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 800165c:	4a75      	ldr	r2, [pc, #468]	@ (8001834 <menu+0x554>)
 800165e:	210e      	movs	r1, #14
 8001660:	2002      	movs	r0, #2
 8001662:	f007 f93d 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001666:	4b6f      	ldr	r3, [pc, #444]	@ (8001824 <menu+0x544>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d115      	bne.n	800169a <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 800166e:	4a79      	ldr	r2, [pc, #484]	@ (8001854 <menu+0x574>)
 8001670:	2101      	movs	r1, #1
 8001672:	2002      	movs	r0, #2
 8001674:	f007 f934 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001678:	4a70      	ldr	r2, [pc, #448]	@ (800183c <menu+0x55c>)
 800167a:	210f      	movs	r1, #15
 800167c:	2002      	movs	r0, #2
 800167e:	f007 f92f 	bl	80088e0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001682:	4b75      	ldr	r3, [pc, #468]	@ (8001858 <menu+0x578>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	220a      	movs	r2, #10
 8001688:	496a      	ldr	r1, [pc, #424]	@ (8001834 <menu+0x554>)
 800168a:	4618      	mov	r0, r3
 800168c:	f00b fc7e 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 8001690:	4a68      	ldr	r2, [pc, #416]	@ (8001834 <menu+0x554>)
 8001692:	210e      	movs	r1, #14
 8001694:	2002      	movs	r0, #2
 8001696:	f007 f923 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800169a:	4b62      	ldr	r3, [pc, #392]	@ (8001824 <menu+0x544>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d115      	bne.n	80016ce <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 80016a2:	4a6e      	ldr	r2, [pc, #440]	@ (800185c <menu+0x57c>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	2002      	movs	r0, #2
 80016a8:	f007 f91a 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 80016ac:	4a63      	ldr	r2, [pc, #396]	@ (800183c <menu+0x55c>)
 80016ae:	210f      	movs	r1, #15
 80016b0:	2002      	movs	r0, #2
 80016b2:	f007 f915 	bl	80088e0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80016b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001860 <menu+0x580>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	220a      	movs	r2, #10
 80016bc:	495d      	ldr	r1, [pc, #372]	@ (8001834 <menu+0x554>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fc64 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 80016c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <menu+0x554>)
 80016c6:	210e      	movs	r1, #14
 80016c8:	2002      	movs	r0, #2
 80016ca:	f007 f909 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016ce:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <menu+0x544>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d115      	bne.n	8001702 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 80016d6:	4a63      	ldr	r2, [pc, #396]	@ (8001864 <menu+0x584>)
 80016d8:	2101      	movs	r1, #1
 80016da:	2002      	movs	r0, #2
 80016dc:	f007 f900 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e0:	4a56      	ldr	r2, [pc, #344]	@ (800183c <menu+0x55c>)
 80016e2:	210f      	movs	r1, #15
 80016e4:	2002      	movs	r0, #2
 80016e6:	f007 f8fb 	bl	80088e0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <menu+0x588>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	220a      	movs	r2, #10
 80016f0:	4950      	ldr	r1, [pc, #320]	@ (8001834 <menu+0x554>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b fc4a 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 80016f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001834 <menu+0x554>)
 80016fa:	210e      	movs	r1, #14
 80016fc:	2002      	movs	r0, #2
 80016fe:	f007 f8ef 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001702:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <menu+0x544>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b07      	cmp	r3, #7
 8001708:	d115      	bne.n	8001736 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 800170a:	4a58      	ldr	r2, [pc, #352]	@ (800186c <menu+0x58c>)
 800170c:	2101      	movs	r1, #1
 800170e:	2002      	movs	r0, #2
 8001710:	f007 f8e6 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001714:	4a49      	ldr	r2, [pc, #292]	@ (800183c <menu+0x55c>)
 8001716:	210f      	movs	r1, #15
 8001718:	2002      	movs	r0, #2
 800171a:	f007 f8e1 	bl	80088e0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800171e:	4b54      	ldr	r3, [pc, #336]	@ (8001870 <menu+0x590>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	220a      	movs	r2, #10
 8001724:	4943      	ldr	r1, [pc, #268]	@ (8001834 <menu+0x554>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fc30 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 800172c:	4a41      	ldr	r2, [pc, #260]	@ (8001834 <menu+0x554>)
 800172e:	210e      	movs	r1, #14
 8001730:	2002      	movs	r0, #2
 8001732:	f007 f8d5 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001736:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <menu+0x544>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d115      	bne.n	800176a <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 800173e:	4a4d      	ldr	r2, [pc, #308]	@ (8001874 <menu+0x594>)
 8001740:	2101      	movs	r1, #1
 8001742:	2002      	movs	r0, #2
 8001744:	f007 f8cc 	bl	80088e0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001748:	4a3c      	ldr	r2, [pc, #240]	@ (800183c <menu+0x55c>)
 800174a:	210f      	movs	r1, #15
 800174c:	2002      	movs	r0, #2
 800174e:	f007 f8c7 	bl	80088e0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001752:	4b49      	ldr	r3, [pc, #292]	@ (8001878 <menu+0x598>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	220a      	movs	r2, #10
 8001758:	4936      	ldr	r1, [pc, #216]	@ (8001834 <menu+0x554>)
 800175a:	4618      	mov	r0, r3
 800175c:	f00b fc16 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 8001760:	4a34      	ldr	r2, [pc, #208]	@ (8001834 <menu+0x554>)
 8001762:	210e      	movs	r1, #14
 8001764:	2002      	movs	r0, #2
 8001766:	f007 f8bb 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <menu+0x544>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b09      	cmp	r3, #9
 8001770:	d115      	bne.n	800179e <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001772:	4a42      	ldr	r2, [pc, #264]	@ (800187c <menu+0x59c>)
 8001774:	2101      	movs	r1, #1
 8001776:	2002      	movs	r0, #2
 8001778:	f007 f8b2 	bl	80088e0 <lcd_print>
			lcd_print(2, 16, " ");
 800177c:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <menu+0x5a0>)
 800177e:	2110      	movs	r1, #16
 8001780:	2002      	movs	r0, #2
 8001782:	f007 f8ad 	bl	80088e0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001786:	4b3f      	ldr	r3, [pc, #252]	@ (8001884 <menu+0x5a4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	220a      	movs	r2, #10
 800178c:	4929      	ldr	r1, [pc, #164]	@ (8001834 <menu+0x554>)
 800178e:	4618      	mov	r0, r3
 8001790:	f00b fbfc 	bl	800cf8c <itoa>
			lcd_print(2, 15, snum);
 8001794:	4a27      	ldr	r2, [pc, #156]	@ (8001834 <menu+0x554>)
 8001796:	210f      	movs	r1, #15
 8001798:	2002      	movs	r0, #2
 800179a:	f007 f8a1 	bl	80088e0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800179e:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <menu+0x544>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d104      	bne.n	80017b0 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 80017a6:	4a38      	ldr	r2, [pc, #224]	@ (8001888 <menu+0x5a8>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	2002      	movs	r0, #2
 80017ac:	f007 f898 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017b0:	2102      	movs	r1, #2
 80017b2:	4836      	ldr	r0, [pc, #216]	@ (800188c <menu+0x5ac>)
 80017b4:	f008 fbbe 	bl	8009f34 <HAL_GPIO_ReadPin>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d119      	bne.n	80017f2 <menu+0x512>
 80017be:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <menu+0x5b0>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <menu+0x512>
 80017cc:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <menu+0x5b4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10e      	bne.n	80017f2 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <menu+0x544>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <menu+0x544>)
 80017de:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <menu+0x544>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d902      	bls.n	80017ee <menu+0x50e>
				hataGostermeSirasi = 0;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <menu+0x544>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017ee:	f002 fab5 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017f2:	2104      	movs	r1, #4
 80017f4:	4825      	ldr	r0, [pc, #148]	@ (800188c <menu+0x5ac>)
 80017f6:	f008 fb9d 	bl	8009f34 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d15e      	bne.n	80018be <menu+0x5de>
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <menu+0x5b0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d057      	beq.n	80018be <menu+0x5de>
 800180e:	e043      	b.n	8001898 <menu+0x5b8>
 8001810:	200010c8 	.word	0x200010c8
 8001814:	200010e7 	.word	0x200010e7
 8001818:	20001228 	.word	0x20001228
 800181c:	2000123c 	.word	0x2000123c
 8001820:	20001250 	.word	0x20001250
 8001824:	200010ca 	.word	0x200010ca
 8001828:	20001264 	.word	0x20001264
 800182c:	0800dc78 	.word	0x0800dc78
 8001830:	200010ea 	.word	0x200010ea
 8001834:	20001060 	.word	0x20001060
 8001838:	20001278 	.word	0x20001278
 800183c:	0800dc7c 	.word	0x0800dc7c
 8001840:	200010eb 	.word	0x200010eb
 8001844:	2000128c 	.word	0x2000128c
 8001848:	200010ec 	.word	0x200010ec
 800184c:	200012a0 	.word	0x200012a0
 8001850:	200010ed 	.word	0x200010ed
 8001854:	200012b4 	.word	0x200012b4
 8001858:	200010ee 	.word	0x200010ee
 800185c:	200012c8 	.word	0x200012c8
 8001860:	200010ef 	.word	0x200010ef
 8001864:	200012dc 	.word	0x200012dc
 8001868:	200010f0 	.word	0x200010f0
 800186c:	200012f0 	.word	0x200012f0
 8001870:	200010f1 	.word	0x200010f1
 8001874:	20001304 	.word	0x20001304
 8001878:	200010f2 	.word	0x200010f2
 800187c:	20001318 	.word	0x20001318
 8001880:	0800dc80 	.word	0x0800dc80
 8001884:	200010f3 	.word	0x200010f3
 8001888:	2000132c 	.word	0x2000132c
 800188c:	40010800 	.word	0x40010800
 8001890:	200010f7 	.word	0x200010f7
 8001894:	200010d7 	.word	0x200010d7
 8001898:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac4 <menu+0x7e4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10e      	bne.n	80018be <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018a0:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <menu+0x7e8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b87      	ldr	r3, [pc, #540]	@ (8001ac8 <menu+0x7e8>)
 80018aa:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018ac:	4b86      	ldr	r3, [pc, #536]	@ (8001ac8 <menu+0x7e8>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	d902      	bls.n	80018ba <menu+0x5da>
	    		hataGostermeSirasi = 10;
 80018b4:	4b84      	ldr	r3, [pc, #528]	@ (8001ac8 <menu+0x7e8>)
 80018b6:	220a      	movs	r2, #10
 80018b8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018ba:	f002 fa4f 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018be:	2108      	movs	r1, #8
 80018c0:	4882      	ldr	r0, [pc, #520]	@ (8001acc <menu+0x7ec>)
 80018c2:	f008 fb37 	bl	8009f34 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d153      	bne.n	8001974 <menu+0x694>
 80018cc:	4b80      	ldr	r3, [pc, #512]	@ (8001ad0 <menu+0x7f0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d04c      	beq.n	8001974 <menu+0x694>
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <menu+0x7e8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d148      	bne.n	8001974 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 80018e2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <menu+0x7f4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ad8 <menu+0x7f8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018f0:	4b7a      	ldr	r3, [pc, #488]	@ (8001adc <menu+0x7fc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	4b78      	ldr	r3, [pc, #480]	@ (8001ad8 <menu+0x7f8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018fe:	4b78      	ldr	r3, [pc, #480]	@ (8001ae0 <menu+0x800>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	4b74      	ldr	r3, [pc, #464]	@ (8001ad8 <menu+0x7f8>)
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800190c:	4b75      	ldr	r3, [pc, #468]	@ (8001ae4 <menu+0x804>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	4b71      	ldr	r3, [pc, #452]	@ (8001ad8 <menu+0x7f8>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800191a:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <menu+0x808>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad8 <menu+0x7f8>)
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001928:	4b70      	ldr	r3, [pc, #448]	@ (8001aec <menu+0x80c>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <menu+0x7f8>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001936:	4b6e      	ldr	r3, [pc, #440]	@ (8001af0 <menu+0x810>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	4b66      	ldr	r3, [pc, #408]	@ (8001ad8 <menu+0x7f8>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001944:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <menu+0x814>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <menu+0x7f8>)
 800194c:	2200      	movs	r2, #0
 800194e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001952:	4b69      	ldr	r3, [pc, #420]	@ (8001af8 <menu+0x818>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad8 <menu+0x7f8>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001960:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <menu+0x81c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad8 <menu+0x7f8>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 800196e:	4b64      	ldr	r3, [pc, #400]	@ (8001b00 <menu+0x820>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001974:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <menu+0x824>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 808e 	bne.w	8001a9a <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 800197e:	4a62      	ldr	r2, [pc, #392]	@ (8001b08 <menu+0x828>)
 8001980:	2101      	movs	r1, #1
 8001982:	2001      	movs	r0, #1
 8001984:	f006 ffac 	bl	80088e0 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001988:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <menu+0x7e4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d003      	beq.n	8001998 <menu+0x6b8>
 8001990:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <menu+0x7e4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d104      	bne.n	80019a2 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001998:	4a5c      	ldr	r2, [pc, #368]	@ (8001b0c <menu+0x82c>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 ff9f 	bl	80088e0 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80019a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b10 <menu+0x830>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <menu+0x6dc>
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <menu+0x7e4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d104      	bne.n	80019bc <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 80019b2:	4a58      	ldr	r2, [pc, #352]	@ (8001b14 <menu+0x834>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	2002      	movs	r0, #2
 80019b8:	f006 ff92 	bl	80088e0 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80019bc:	4b54      	ldr	r3, [pc, #336]	@ (8001b10 <menu+0x830>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <menu+0x6f6>
 80019c4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac4 <menu+0x7e4>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 80019cc:	4a52      	ldr	r2, [pc, #328]	@ (8001b18 <menu+0x838>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	2002      	movs	r0, #2
 80019d2:	f006 ff85 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019d6:	2102      	movs	r1, #2
 80019d8:	483c      	ldr	r0, [pc, #240]	@ (8001acc <menu+0x7ec>)
 80019da:	f008 faab 	bl	8009f34 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d119      	bne.n	8001a18 <menu+0x738>
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <menu+0x7f0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <menu+0x738>
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <menu+0x7e4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 80019fa:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <menu+0x830>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <menu+0x830>)
 8001a04:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <menu+0x830>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d902      	bls.n	8001a14 <menu+0x734>
				calismaSekli = 0;
 8001a0e:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <menu+0x830>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a14:	f002 f9a2 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a18:	2104      	movs	r1, #4
 8001a1a:	482c      	ldr	r0, [pc, #176]	@ (8001acc <menu+0x7ec>)
 8001a1c:	f008 fa8a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d119      	bne.n	8001a5a <menu+0x77a>
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <menu+0x7f0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <menu+0x77a>
 8001a34:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <menu+0x7e4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10e      	bne.n	8001a5a <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <menu+0x830>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <menu+0x830>)
 8001a46:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <menu+0x830>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <menu+0x776>
	    		calismaSekli = 1;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <menu+0x830>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a56:	f002 f981 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	481b      	ldr	r0, [pc, #108]	@ (8001acc <menu+0x7ec>)
 8001a5e:	f008 fa69 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d118      	bne.n	8001a9a <menu+0x7ba>
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <menu+0x7f0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d011      	beq.n	8001a9a <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001a76:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <menu+0x830>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <menu+0x7f8>)
 8001a7c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <menu+0x830>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d106      	bne.n	8001a94 <menu+0x7b4>
				altLimit = 1;
 8001a86:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <menu+0x83c>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <menu+0x83c>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <menu+0x7f8>)
 8001a92:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <menu+0x820>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <menu+0x824>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	f040 809c 	bne.w	8001bdc <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b20 <menu+0x840>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f006 ff19 	bl	80088e0 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <menu+0x844>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d13a      	bne.n	8001b2c <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <menu+0x848>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	2002      	movs	r0, #2
 8001abc:	f006 ff10 	bl	80088e0 <lcd_print>
 8001ac0:	e03d      	b.n	8001b3e <menu+0x85e>
 8001ac2:	bf00      	nop
 8001ac4:	200010d7 	.word	0x200010d7
 8001ac8:	200010ca 	.word	0x200010ca
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	200010f7 	.word	0x200010f7
 8001ad4:	200010ea 	.word	0x200010ea
 8001ad8:	20000ff0 	.word	0x20000ff0
 8001adc:	200010eb 	.word	0x200010eb
 8001ae0:	200010ec 	.word	0x200010ec
 8001ae4:	200010ed 	.word	0x200010ed
 8001ae8:	200010ee 	.word	0x200010ee
 8001aec:	200010ef 	.word	0x200010ef
 8001af0:	200010f0 	.word	0x200010f0
 8001af4:	200010f1 	.word	0x200010f1
 8001af8:	200010f2 	.word	0x200010f2
 8001afc:	200010f3 	.word	0x200010f3
 8001b00:	200010f4 	.word	0x200010f4
 8001b04:	200010c8 	.word	0x200010c8
 8001b08:	20001340 	.word	0x20001340
 8001b0c:	20001354 	.word	0x20001354
 8001b10:	200010c9 	.word	0x200010c9
 8001b14:	20001368 	.word	0x20001368
 8001b18:	2000137c 	.word	0x2000137c
 8001b1c:	200010ce 	.word	0x200010ce
 8001b20:	20001390 	.word	0x20001390
 8001b24:	200010cc 	.word	0x200010cc
 8001b28:	200013a4 	.word	0x200013a4
		} else if(emniyetCercevesi == 1) {
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cdc <menu+0x9fc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d104      	bne.n	8001b3e <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b34:	4a6a      	ldr	r2, [pc, #424]	@ (8001ce0 <menu+0xa00>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f006 fed1 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4868      	ldr	r0, [pc, #416]	@ (8001ce4 <menu+0xa04>)
 8001b42:	f008 f9f7 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d115      	bne.n	8001b78 <menu+0x898>
 8001b4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ce8 <menu+0xa08>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00e      	beq.n	8001b78 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b5a:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <menu+0x9fc>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <menu+0x9fc>)
 8001b64:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b66:	4b5d      	ldr	r3, [pc, #372]	@ (8001cdc <menu+0x9fc>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d902      	bls.n	8001b74 <menu+0x894>
				emniyetCercevesi = 0;
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cdc <menu+0x9fc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b74:	f002 f8f2 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b78:	2104      	movs	r1, #4
 8001b7a:	485a      	ldr	r0, [pc, #360]	@ (8001ce4 <menu+0xa04>)
 8001b7c:	f008 f9da 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d115      	bne.n	8001bb2 <menu+0x8d2>
 8001b86:	4b58      	ldr	r3, [pc, #352]	@ (8001ce8 <menu+0xa08>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00e      	beq.n	8001bb2 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b94:	4b51      	ldr	r3, [pc, #324]	@ (8001cdc <menu+0x9fc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cdc <menu+0x9fc>)
 8001b9e:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <menu+0x9fc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cdc <menu+0x9fc>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bae:	f002 f8d5 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	484b      	ldr	r0, [pc, #300]	@ (8001ce4 <menu+0xa04>)
 8001bb6:	f008 f9bd 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10d      	bne.n	8001bdc <menu+0x8fc>
 8001bc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <menu+0xa08>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <menu+0x9fc>)
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <menu+0xa0c>)
 8001bd4:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001bd6:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <menu+0xa10>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001bdc:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <menu+0xa14>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d166      	bne.n	8001cb2 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001be4:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <menu+0xa18>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2001      	movs	r0, #1
 8001bea:	f006 fe79 	bl	80088e0 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001bee:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <menu+0xa1c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001bf6:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <menu+0xa20>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f006 fe70 	bl	80088e0 <lcd_print>
 8001c00:	e008      	b.n	8001c14 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001c02:	4b3e      	ldr	r3, [pc, #248]	@ (8001cfc <menu+0xa1c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d04 <menu+0xa24>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f006 fe66 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c14:	2102      	movs	r1, #2
 8001c16:	4833      	ldr	r0, [pc, #204]	@ (8001ce4 <menu+0xa04>)
 8001c18:	f008 f98c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d115      	bne.n	8001c4e <menu+0x96e>
 8001c22:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <menu+0xa08>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <menu+0xa1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <menu+0xa1c>)
 8001c3a:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <menu+0xa1c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d902      	bls.n	8001c4a <menu+0x96a>
				yavaslamaLimit = 0;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <menu+0xa1c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c4a:	f002 f887 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4824      	ldr	r0, [pc, #144]	@ (8001ce4 <menu+0xa04>)
 8001c52:	f008 f96f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d115      	bne.n	8001c88 <menu+0x9a8>
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <menu+0xa08>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001c6a:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <menu+0xa1c>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <menu+0xa1c>)
 8001c74:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <menu+0xa1c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <menu+0xa1c>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c84:	f002 f86a 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c88:	2108      	movs	r1, #8
 8001c8a:	4816      	ldr	r0, [pc, #88]	@ (8001ce4 <menu+0xa04>)
 8001c8c:	f008 f952 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10d      	bne.n	8001cb2 <menu+0x9d2>
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <menu+0xa08>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <menu+0xa1c>)
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <menu+0xa0c>)
 8001caa:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001cac:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <menu+0xa10>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <menu+0xa14>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	f040 80aa 	bne.w	8001e10 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001cbc:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <menu+0xa28>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f006 fe0d 	bl	80088e0 <lcd_print>

		if(altLimit == 0) {
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <menu+0xa2c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d120      	bne.n	8001d10 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <menu+0xa20>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f006 fe04 	bl	80088e0 <lcd_print>
 8001cd8:	e023      	b.n	8001d22 <menu+0xa42>
 8001cda:	bf00      	nop
 8001cdc:	200010cc 	.word	0x200010cc
 8001ce0:	200000f0 	.word	0x200000f0
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	200010f7 	.word	0x200010f7
 8001cec:	20000ff0 	.word	0x20000ff0
 8001cf0:	200010f4 	.word	0x200010f4
 8001cf4:	200010c8 	.word	0x200010c8
 8001cf8:	200013cc 	.word	0x200013cc
 8001cfc:	200010cd 	.word	0x200010cd
 8001d00:	200013a4 	.word	0x200013a4
 8001d04:	200013b8 	.word	0x200013b8
 8001d08:	200013e0 	.word	0x200013e0
 8001d0c:	200010ce 	.word	0x200010ce
		} else if(altLimit == 1) {
 8001d10:	4b89      	ldr	r3, [pc, #548]	@ (8001f38 <menu+0xc58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d104      	bne.n	8001d22 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001d18:	4a88      	ldr	r2, [pc, #544]	@ (8001f3c <menu+0xc5c>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f006 fddf 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001d22:	2102      	movs	r1, #2
 8001d24:	4886      	ldr	r0, [pc, #536]	@ (8001f40 <menu+0xc60>)
 8001d26:	f008 f905 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d119      	bne.n	8001d64 <menu+0xa84>
 8001d30:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <menu+0xc64>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <menu+0xa84>
 8001d3e:	4b82      	ldr	r3, [pc, #520]	@ (8001f48 <menu+0xc68>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10e      	bne.n	8001d64 <menu+0xa84>
			altLimit = altLimit + 1;
 8001d46:	4b7c      	ldr	r3, [pc, #496]	@ (8001f38 <menu+0xc58>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f38 <menu+0xc58>)
 8001d50:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001d52:	4b79      	ldr	r3, [pc, #484]	@ (8001f38 <menu+0xc58>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d902      	bls.n	8001d60 <menu+0xa80>
				altLimit = 0;
 8001d5a:	4b77      	ldr	r3, [pc, #476]	@ (8001f38 <menu+0xc58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d60:	f001 fffc 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001d64:	2104      	movs	r1, #4
 8001d66:	4876      	ldr	r0, [pc, #472]	@ (8001f40 <menu+0xc60>)
 8001d68:	f008 f8e4 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d119      	bne.n	8001da6 <menu+0xac6>
 8001d72:	4b74      	ldr	r3, [pc, #464]	@ (8001f44 <menu+0xc64>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f083 0301 	eor.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d012      	beq.n	8001da6 <menu+0xac6>
 8001d80:	4b71      	ldr	r3, [pc, #452]	@ (8001f48 <menu+0xc68>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10e      	bne.n	8001da6 <menu+0xac6>
			altLimit = altLimit - 1;
 8001d88:	4b6b      	ldr	r3, [pc, #428]	@ (8001f38 <menu+0xc58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <menu+0xc58>)
 8001d92:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001d94:	4b68      	ldr	r3, [pc, #416]	@ (8001f38 <menu+0xc58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <menu+0xac2>
		   		altLimit = 1;
 8001d9c:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <menu+0xc58>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001da2:	f001 ffdb 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001da6:	2108      	movs	r1, #8
 8001da8:	4865      	ldr	r0, [pc, #404]	@ (8001f40 <menu+0xc60>)
 8001daa:	f008 f8c3 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d12d      	bne.n	8001e10 <menu+0xb30>
 8001db4:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <menu+0xc64>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d026      	beq.n	8001e10 <menu+0xb30>
			eepromData[5] = altLimit;
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f38 <menu+0xc58>)
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b61      	ldr	r3, [pc, #388]	@ (8001f4c <menu+0xc6c>)
 8001dc8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001dca:	4b5b      	ldr	r3, [pc, #364]	@ (8001f38 <menu+0xc58>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d110      	bne.n	8001df4 <menu+0xb14>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f50 <menu+0xc70>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <menu+0xb02>
 8001dda:	4b5d      	ldr	r3, [pc, #372]	@ (8001f50 <menu+0xc70>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d108      	bne.n	8001df4 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001de2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <menu+0xc70>)
 8001de4:	2203      	movs	r2, #3
 8001de6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001de8:	4b59      	ldr	r3, [pc, #356]	@ (8001f50 <menu+0xc70>)
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b57      	ldr	r3, [pc, #348]	@ (8001f4c <menu+0xc6c>)
 8001dee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001df2:	e00a      	b.n	8001e0a <menu+0xb2a>
			} else if(altLimit == 0) {
 8001df4:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <menu+0xc58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <menu+0xb2a>
				platformSilindirTipi = 0;
 8001dfc:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <menu+0xc74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e02:	4b54      	ldr	r3, [pc, #336]	@ (8001f54 <menu+0xc74>)
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b51      	ldr	r3, [pc, #324]	@ (8001f4c <menu+0xc6c>)
 8001e08:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e0a:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <menu+0xc78>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001e10:	4b52      	ldr	r3, [pc, #328]	@ (8001f5c <menu+0xc7c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d166      	bne.n	8001ee6 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001e18:	4a51      	ldr	r2, [pc, #324]	@ (8001f60 <menu+0xc80>)
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f006 fd5f 	bl	80088e0 <lcd_print>

		if(basincSalteri == 0) {
 8001e22:	4b50      	ldr	r3, [pc, #320]	@ (8001f64 <menu+0xc84>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f68 <menu+0xc88>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f006 fd56 	bl	80088e0 <lcd_print>
 8001e34:	e008      	b.n	8001e48 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001e36:	4b4b      	ldr	r3, [pc, #300]	@ (8001f64 <menu+0xc84>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d104      	bne.n	8001e48 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f3c <menu+0xc5c>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	2002      	movs	r0, #2
 8001e44:	f006 fd4c 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e48:	2102      	movs	r1, #2
 8001e4a:	483d      	ldr	r0, [pc, #244]	@ (8001f40 <menu+0xc60>)
 8001e4c:	f008 f872 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d115      	bne.n	8001e82 <menu+0xba2>
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <menu+0xc64>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001e64:	4b3f      	ldr	r3, [pc, #252]	@ (8001f64 <menu+0xc84>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <menu+0xc84>)
 8001e6e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001e70:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <menu+0xc84>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d902      	bls.n	8001e7e <menu+0xb9e>
				basincSalteri = 0;
 8001e78:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <menu+0xc84>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e7e:	f001 ff6d 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e82:	2104      	movs	r1, #4
 8001e84:	482e      	ldr	r0, [pc, #184]	@ (8001f40 <menu+0xc60>)
 8001e86:	f008 f855 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d115      	bne.n	8001ebc <menu+0xbdc>
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <menu+0xc64>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00e      	beq.n	8001ebc <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <menu+0xc84>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <menu+0xc84>)
 8001ea8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <menu+0xc84>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <menu+0xbd8>
		   		basincSalteri = 1;
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <menu+0xc84>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001eb8:	f001 ff50 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4820      	ldr	r0, [pc, #128]	@ (8001f40 <menu+0xc60>)
 8001ec0:	f008 f838 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10d      	bne.n	8001ee6 <menu+0xc06>
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <menu+0xc64>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f083 0301 	eor.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <menu+0xc84>)
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <menu+0xc6c>)
 8001ede:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <menu+0xc78>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <menu+0xc7c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b07      	cmp	r3, #7
 8001eec:	f040 80a9 	bne.w	8002042 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <menu+0xc8c>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f006 fcf3 	bl	80088e0 <lcd_print>

		if(kapiSecimleri == 0) {
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <menu+0xc90>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001f02:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <menu+0xc88>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	2002      	movs	r0, #2
 8001f08:	f006 fcea 	bl	80088e0 <lcd_print>
 8001f0c:	e03f      	b.n	8001f8e <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <menu+0xc90>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <menu+0xc94>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f006 fce0 	bl	80088e0 <lcd_print>
 8001f20:	e035      	b.n	8001f8e <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <menu+0xc90>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d128      	bne.n	8001f7c <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <menu+0xc98>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f006 fcd6 	bl	80088e0 <lcd_print>
 8001f34:	e02b      	b.n	8001f8e <menu+0xcae>
 8001f36:	bf00      	nop
 8001f38:	200010ce 	.word	0x200010ce
 8001f3c:	200013b8 	.word	0x200013b8
 8001f40:	40010800 	.word	0x40010800
 8001f44:	200010f7 	.word	0x200010f7
 8001f48:	200010c9 	.word	0x200010c9
 8001f4c:	20000ff0 	.word	0x20000ff0
 8001f50:	200010d5 	.word	0x200010d5
 8001f54:	200010db 	.word	0x200010db
 8001f58:	200010f4 	.word	0x200010f4
 8001f5c:	200010c8 	.word	0x200010c8
 8001f60:	200013f4 	.word	0x200013f4
 8001f64:	200010cf 	.word	0x200010cf
 8001f68:	200013a4 	.word	0x200013a4
 8001f6c:	20001408 	.word	0x20001408
 8001f70:	200010d0 	.word	0x200010d0
 8001f74:	2000141c 	.word	0x2000141c
 8001f78:	20001430 	.word	0x20001430
		} else if(kapiSecimleri == 3) {
 8001f7c:	4b76      	ldr	r3, [pc, #472]	@ (8002158 <menu+0xe78>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d104      	bne.n	8001f8e <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001f84:	4a75      	ldr	r2, [pc, #468]	@ (800215c <menu+0xe7c>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f006 fca9 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4873      	ldr	r0, [pc, #460]	@ (8002160 <menu+0xe80>)
 8001f92:	f007 ffcf 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d115      	bne.n	8001fc8 <menu+0xce8>
 8001f9c:	4b71      	ldr	r3, [pc, #452]	@ (8002164 <menu+0xe84>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001faa:	4b6b      	ldr	r3, [pc, #428]	@ (8002158 <menu+0xe78>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b69      	ldr	r3, [pc, #420]	@ (8002158 <menu+0xe78>)
 8001fb4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001fb6:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <menu+0xe78>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d902      	bls.n	8001fc4 <menu+0xce4>
				kapiSecimleri = 0;
 8001fbe:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <menu+0xe78>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fc4:	f001 feca 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fc8:	2104      	movs	r1, #4
 8001fca:	4865      	ldr	r0, [pc, #404]	@ (8002160 <menu+0xe80>)
 8001fcc:	f007 ffb2 	bl	8009f34 <HAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d115      	bne.n	8002002 <menu+0xd22>
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <menu+0xe84>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <menu+0xe78>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <menu+0xe78>)
 8001fee:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <menu+0xe78>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d902      	bls.n	8001ffe <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001ff8:	4b57      	ldr	r3, [pc, #348]	@ (8002158 <menu+0xe78>)
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ffe:	f001 fead 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002002:	2108      	movs	r1, #8
 8002004:	4856      	ldr	r0, [pc, #344]	@ (8002160 <menu+0xe80>)
 8002006:	f007 ff95 	bl	8009f34 <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	2b01      	cmp	r3, #1
 800200e:	d118      	bne.n	8002042 <menu+0xd62>
 8002010:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <menu+0xe84>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d011      	beq.n	8002042 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800201e:	4b4e      	ldr	r3, [pc, #312]	@ (8002158 <menu+0xe78>)
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	4b51      	ldr	r3, [pc, #324]	@ (8002168 <menu+0xe88>)
 8002024:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002026:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <menu+0xe78>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <menu+0xd5c>
				altLimit = 1;
 800202e:	4b4f      	ldr	r3, [pc, #316]	@ (800216c <menu+0xe8c>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002034:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <menu+0xe8c>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b4b      	ldr	r3, [pc, #300]	@ (8002168 <menu+0xe88>)
 800203a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800203c:	4b4c      	ldr	r3, [pc, #304]	@ (8002170 <menu+0xe90>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002042:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <menu+0xe94>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d167      	bne.n	800211a <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 800204a:	4a4b      	ldr	r2, [pc, #300]	@ (8002178 <menu+0xe98>)
 800204c:	2101      	movs	r1, #1
 800204e:	2001      	movs	r0, #1
 8002050:	f006 fc46 	bl	80088e0 <lcd_print>

		if(kapiAcTipi == 0) {
 8002054:	4b49      	ldr	r3, [pc, #292]	@ (800217c <menu+0xe9c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 800205c:	4a48      	ldr	r2, [pc, #288]	@ (8002180 <menu+0xea0>)
 800205e:	2101      	movs	r1, #1
 8002060:	2002      	movs	r0, #2
 8002062:	f006 fc3d 	bl	80088e0 <lcd_print>
 8002066:	e008      	b.n	800207a <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002068:	4b44      	ldr	r3, [pc, #272]	@ (800217c <menu+0xe9c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d104      	bne.n	800207a <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002070:	4a44      	ldr	r2, [pc, #272]	@ (8002184 <menu+0xea4>)
 8002072:	2101      	movs	r1, #1
 8002074:	2002      	movs	r0, #2
 8002076:	f006 fc33 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800207a:	2102      	movs	r1, #2
 800207c:	4838      	ldr	r0, [pc, #224]	@ (8002160 <menu+0xe80>)
 800207e:	f007 ff59 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	2b01      	cmp	r3, #1
 8002086:	d115      	bne.n	80020b4 <menu+0xdd4>
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <menu+0xe84>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <menu+0xe9c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b37      	ldr	r3, [pc, #220]	@ (800217c <menu+0xe9c>)
 80020a0:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <menu+0xe9c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d902      	bls.n	80020b0 <menu+0xdd0>
				kapiAcTipi = 0;
 80020aa:	4b34      	ldr	r3, [pc, #208]	@ (800217c <menu+0xe9c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020b0:	f001 fe54 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b4:	2104      	movs	r1, #4
 80020b6:	482a      	ldr	r0, [pc, #168]	@ (8002160 <menu+0xe80>)
 80020b8:	f007 ff3c 	bl	8009f34 <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d115      	bne.n	80020ee <menu+0xe0e>
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <menu+0xe84>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80020d0:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <menu+0xe9c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b28      	ldr	r3, [pc, #160]	@ (800217c <menu+0xe9c>)
 80020da:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <menu+0xe9c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <menu+0xe0a>
		   		kapiAcTipi = 1;
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <menu+0xe9c>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ea:	f001 fe37 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ee:	2108      	movs	r1, #8
 80020f0:	481b      	ldr	r0, [pc, #108]	@ (8002160 <menu+0xe80>)
 80020f2:	f007 ff1f 	bl	8009f34 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10e      	bne.n	800211a <menu+0xe3a>
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <menu+0xe84>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <menu+0xe9c>)
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <menu+0xe88>)
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <menu+0xe90>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <menu+0xe94>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b09      	cmp	r3, #9
 8002120:	f040 8092 	bne.w	8002248 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <menu+0xea8>)
 8002126:	2101      	movs	r1, #1
 8002128:	2001      	movs	r0, #1
 800212a:	f006 fbd9 	bl	80088e0 <lcd_print>

		if(kapi1Tip == 0) {
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <menu+0xeac>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002136:	4a16      	ldr	r2, [pc, #88]	@ (8002190 <menu+0xeb0>)
 8002138:	2101      	movs	r1, #1
 800213a:	2002      	movs	r0, #2
 800213c:	f006 fbd0 	bl	80088e0 <lcd_print>
 8002140:	e033      	b.n	80021aa <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <menu+0xeac>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d126      	bne.n	8002198 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <menu+0xeb4>)
 800214c:	2101      	movs	r1, #1
 800214e:	2002      	movs	r0, #2
 8002150:	f006 fbc6 	bl	80088e0 <lcd_print>
 8002154:	e029      	b.n	80021aa <menu+0xeca>
 8002156:	bf00      	nop
 8002158:	200010d0 	.word	0x200010d0
 800215c:	20001444 	.word	0x20001444
 8002160:	40010800 	.word	0x40010800
 8002164:	200010f7 	.word	0x200010f7
 8002168:	20000ff0 	.word	0x20000ff0
 800216c:	200010ce 	.word	0x200010ce
 8002170:	200010f4 	.word	0x200010f4
 8002174:	200010c8 	.word	0x200010c8
 8002178:	20001458 	.word	0x20001458
 800217c:	200010d4 	.word	0x200010d4
 8002180:	2000146c 	.word	0x2000146c
 8002184:	20001480 	.word	0x20001480
 8002188:	20001494 	.word	0x20001494
 800218c:	200010d1 	.word	0x200010d1
 8002190:	20000104 	.word	0x20000104
 8002194:	200014a8 	.word	0x200014a8
		} else if(kapi1Tip == 2) {
 8002198:	4b73      	ldr	r3, [pc, #460]	@ (8002368 <menu+0x1088>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d104      	bne.n	80021aa <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 80021a0:	4a72      	ldr	r2, [pc, #456]	@ (800236c <menu+0x108c>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	2002      	movs	r0, #2
 80021a6:	f006 fb9b 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021aa:	2102      	movs	r1, #2
 80021ac:	4870      	ldr	r0, [pc, #448]	@ (8002370 <menu+0x1090>)
 80021ae:	f007 fec1 	bl	8009f34 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d115      	bne.n	80021e4 <menu+0xf04>
 80021b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002374 <menu+0x1094>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00e      	beq.n	80021e4 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80021c6:	4b68      	ldr	r3, [pc, #416]	@ (8002368 <menu+0x1088>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b66      	ldr	r3, [pc, #408]	@ (8002368 <menu+0x1088>)
 80021d0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80021d2:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <menu+0x1088>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d902      	bls.n	80021e0 <menu+0xf00>
				kapi1Tip = 0;
 80021da:	4b63      	ldr	r3, [pc, #396]	@ (8002368 <menu+0x1088>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e0:	f001 fdbc 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e4:	2104      	movs	r1, #4
 80021e6:	4862      	ldr	r0, [pc, #392]	@ (8002370 <menu+0x1090>)
 80021e8:	f007 fea4 	bl	8009f34 <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d115      	bne.n	800221e <menu+0xf3e>
 80021f2:	4b60      	ldr	r3, [pc, #384]	@ (8002374 <menu+0x1094>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002200:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <menu+0x1088>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b57      	ldr	r3, [pc, #348]	@ (8002368 <menu+0x1088>)
 800220a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800220c:	4b56      	ldr	r3, [pc, #344]	@ (8002368 <menu+0x1088>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d902      	bls.n	800221a <menu+0xf3a>
		   		kapi1Tip = 2;
 8002214:	4b54      	ldr	r3, [pc, #336]	@ (8002368 <menu+0x1088>)
 8002216:	2202      	movs	r2, #2
 8002218:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800221a:	f001 fd9f 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800221e:	2108      	movs	r1, #8
 8002220:	4853      	ldr	r0, [pc, #332]	@ (8002370 <menu+0x1090>)
 8002222:	f007 fe87 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10d      	bne.n	8002248 <menu+0xf68>
 800222c:	4b51      	ldr	r3, [pc, #324]	@ (8002374 <menu+0x1094>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 800223a:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <menu+0x1088>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <menu+0x1098>)
 8002240:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002242:	4b4e      	ldr	r3, [pc, #312]	@ (800237c <menu+0x109c>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002248:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <menu+0x10a0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b0a      	cmp	r3, #10
 800224e:	d16c      	bne.n	800232a <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002250:	4a4c      	ldr	r2, [pc, #304]	@ (8002384 <menu+0x10a4>)
 8002252:	2101      	movs	r1, #1
 8002254:	2001      	movs	r0, #1
 8002256:	f006 fb43 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800225a:	4a4b      	ldr	r2, [pc, #300]	@ (8002388 <menu+0x10a8>)
 800225c:	2101      	movs	r1, #1
 800225e:	2002      	movs	r0, #2
 8002260:	f006 fb3e 	bl	80088e0 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002264:	4b49      	ldr	r3, [pc, #292]	@ (800238c <menu+0x10ac>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	220a      	movs	r2, #10
 800226a:	4949      	ldr	r1, [pc, #292]	@ (8002390 <menu+0x10b0>)
 800226c:	4618      	mov	r0, r3
 800226e:	f00a fe8d 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 8002272:	4a47      	ldr	r2, [pc, #284]	@ (8002390 <menu+0x10b0>)
 8002274:	2110      	movs	r1, #16
 8002276:	2002      	movs	r0, #2
 8002278:	f006 fb32 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800227c:	2102      	movs	r1, #2
 800227e:	483c      	ldr	r0, [pc, #240]	@ (8002370 <menu+0x1090>)
 8002280:	f007 fe58 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002284:	4603      	mov	r3, r0
 8002286:	2b01      	cmp	r3, #1
 8002288:	d119      	bne.n	80022be <menu+0xfde>
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <menu+0x1094>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <menu+0xfde>
 8002298:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <menu+0x1088>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10e      	bne.n	80022be <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80022a0:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <menu+0x10ac>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b38      	ldr	r3, [pc, #224]	@ (800238c <menu+0x10ac>)
 80022aa:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80022ac:	4b37      	ldr	r3, [pc, #220]	@ (800238c <menu+0x10ac>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d902      	bls.n	80022ba <menu+0xfda>
				kapi1AcSure = 0;
 80022b4:	4b35      	ldr	r3, [pc, #212]	@ (800238c <menu+0x10ac>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022ba:	f001 fd4f 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022be:	2104      	movs	r1, #4
 80022c0:	482b      	ldr	r0, [pc, #172]	@ (8002370 <menu+0x1090>)
 80022c2:	f007 fe37 	bl	8009f34 <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d119      	bne.n	8002300 <menu+0x1020>
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <menu+0x1094>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <menu+0x1020>
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <menu+0x1088>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10e      	bne.n	8002300 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <menu+0x10ac>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <menu+0x10ac>)
 80022ec:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80022ee:	4b27      	ldr	r3, [pc, #156]	@ (800238c <menu+0x10ac>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <menu+0x101c>
		   		kapi1AcSure = 5;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <menu+0x10ac>)
 80022f8:	2205      	movs	r2, #5
 80022fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022fc:	f001 fd2e 	bl	8003d5c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002300:	2108      	movs	r1, #8
 8002302:	481b      	ldr	r0, [pc, #108]	@ (8002370 <menu+0x1090>)
 8002304:	f007 fe16 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10d      	bne.n	800232a <menu+0x104a>
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <menu+0x1094>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <menu+0x10ac>)
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <menu+0x1098>)
 8002322:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <menu+0x109c>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <menu+0x10a0>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b0b      	cmp	r3, #11
 8002330:	f040 8090 	bne.w	8002454 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002334:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <menu+0x10b4>)
 8002336:	2101      	movs	r1, #1
 8002338:	2001      	movs	r0, #1
 800233a:	f006 fad1 	bl	80088e0 <lcd_print>

		if(kapi2Tip == 0) {
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <menu+0x10b8>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002346:	4a15      	ldr	r2, [pc, #84]	@ (800239c <menu+0x10bc>)
 8002348:	2101      	movs	r1, #1
 800234a:	2002      	movs	r0, #2
 800234c:	f006 fac8 	bl	80088e0 <lcd_print>
 8002350:	e031      	b.n	80023b6 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <menu+0x10b8>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d124      	bne.n	80023a4 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 800235a:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <menu+0x10c0>)
 800235c:	2101      	movs	r1, #1
 800235e:	2002      	movs	r0, #2
 8002360:	f006 fabe 	bl	80088e0 <lcd_print>
 8002364:	e027      	b.n	80023b6 <menu+0x10d6>
 8002366:	bf00      	nop
 8002368:	200010d1 	.word	0x200010d1
 800236c:	20000118 	.word	0x20000118
 8002370:	40010800 	.word	0x40010800
 8002374:	200010f7 	.word	0x200010f7
 8002378:	20000ff0 	.word	0x20000ff0
 800237c:	200010f4 	.word	0x200010f4
 8002380:	200010c8 	.word	0x200010c8
 8002384:	200014bc 	.word	0x200014bc
 8002388:	200014d0 	.word	0x200014d0
 800238c:	200010e1 	.word	0x200010e1
 8002390:	20001060 	.word	0x20001060
 8002394:	200014e4 	.word	0x200014e4
 8002398:	200010d2 	.word	0x200010d2
 800239c:	20000104 	.word	0x20000104
 80023a0:	200014a8 	.word	0x200014a8
		} else if(kapi2Tip == 2) {
 80023a4:	4b73      	ldr	r3, [pc, #460]	@ (8002574 <menu+0x1294>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d104      	bne.n	80023b6 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80023ac:	4a72      	ldr	r2, [pc, #456]	@ (8002578 <menu+0x1298>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2002      	movs	r0, #2
 80023b2:	f006 fa95 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b6:	2102      	movs	r1, #2
 80023b8:	4870      	ldr	r0, [pc, #448]	@ (800257c <menu+0x129c>)
 80023ba:	f007 fdbb 	bl	8009f34 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d115      	bne.n	80023f0 <menu+0x1110>
 80023c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002580 <menu+0x12a0>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80023d2:	4b68      	ldr	r3, [pc, #416]	@ (8002574 <menu+0x1294>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b66      	ldr	r3, [pc, #408]	@ (8002574 <menu+0x1294>)
 80023dc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80023de:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <menu+0x1294>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <menu+0x110c>
				kapi2Tip = 0;
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <menu+0x1294>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023ec:	f001 fcb6 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f0:	2104      	movs	r1, #4
 80023f2:	4862      	ldr	r0, [pc, #392]	@ (800257c <menu+0x129c>)
 80023f4:	f007 fd9e 	bl	8009f34 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d115      	bne.n	800242a <menu+0x114a>
 80023fe:	4b60      	ldr	r3, [pc, #384]	@ (8002580 <menu+0x12a0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 800240c:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <menu+0x1294>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	3b01      	subs	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b57      	ldr	r3, [pc, #348]	@ (8002574 <menu+0x1294>)
 8002416:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002418:	4b56      	ldr	r3, [pc, #344]	@ (8002574 <menu+0x1294>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d902      	bls.n	8002426 <menu+0x1146>
		   		kapi2Tip = 2;
 8002420:	4b54      	ldr	r3, [pc, #336]	@ (8002574 <menu+0x1294>)
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002426:	f001 fc99 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800242a:	2108      	movs	r1, #8
 800242c:	4853      	ldr	r0, [pc, #332]	@ (800257c <menu+0x129c>)
 800242e:	f007 fd81 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <menu+0x1174>
 8002438:	4b51      	ldr	r3, [pc, #324]	@ (8002580 <menu+0x12a0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f083 0301 	eor.w	r3, r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002446:	4b4b      	ldr	r3, [pc, #300]	@ (8002574 <menu+0x1294>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b4e      	ldr	r3, [pc, #312]	@ (8002584 <menu+0x12a4>)
 800244c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800244e:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <menu+0x12a8>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002454:	4b4d      	ldr	r3, [pc, #308]	@ (800258c <menu+0x12ac>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d16c      	bne.n	8002536 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 800245c:	4a4c      	ldr	r2, [pc, #304]	@ (8002590 <menu+0x12b0>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f006 fa3d 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002466:	4a4b      	ldr	r2, [pc, #300]	@ (8002594 <menu+0x12b4>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f006 fa38 	bl	80088e0 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002470:	4b49      	ldr	r3, [pc, #292]	@ (8002598 <menu+0x12b8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	220a      	movs	r2, #10
 8002476:	4949      	ldr	r1, [pc, #292]	@ (800259c <menu+0x12bc>)
 8002478:	4618      	mov	r0, r3
 800247a:	f00a fd87 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 800247e:	4a47      	ldr	r2, [pc, #284]	@ (800259c <menu+0x12bc>)
 8002480:	2110      	movs	r1, #16
 8002482:	2002      	movs	r0, #2
 8002484:	f006 fa2c 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002488:	2102      	movs	r1, #2
 800248a:	483c      	ldr	r0, [pc, #240]	@ (800257c <menu+0x129c>)
 800248c:	f007 fd52 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d119      	bne.n	80024ca <menu+0x11ea>
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <menu+0x12a0>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <menu+0x11ea>
 80024a4:	4b33      	ldr	r3, [pc, #204]	@ (8002574 <menu+0x1294>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10e      	bne.n	80024ca <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80024ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <menu+0x12b8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <menu+0x12b8>)
 80024b6:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80024b8:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <menu+0x12b8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d902      	bls.n	80024c6 <menu+0x11e6>
				kapi2AcSure = 0;
 80024c0:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <menu+0x12b8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024c6:	f001 fc49 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024ca:	2104      	movs	r1, #4
 80024cc:	482b      	ldr	r0, [pc, #172]	@ (800257c <menu+0x129c>)
 80024ce:	f007 fd31 	bl	8009f34 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d119      	bne.n	800250c <menu+0x122c>
 80024d8:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <menu+0x12a0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <menu+0x122c>
 80024e6:	4b23      	ldr	r3, [pc, #140]	@ (8002574 <menu+0x1294>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <menu+0x12b8>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <menu+0x12b8>)
 80024f8:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80024fa:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <menu+0x12b8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <menu+0x1228>
		   		kapi2AcSure = 5;
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <menu+0x12b8>)
 8002504:	2205      	movs	r2, #5
 8002506:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002508:	f001 fc28 	bl	8003d5c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800250c:	2108      	movs	r1, #8
 800250e:	481b      	ldr	r0, [pc, #108]	@ (800257c <menu+0x129c>)
 8002510:	f007 fd10 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10d      	bne.n	8002536 <menu+0x1256>
 800251a:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <menu+0x12a0>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <menu+0x12b8>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <menu+0x12a4>)
 800252e:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <menu+0x12a8>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <menu+0x12ac>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	f040 8090 	bne.w	8002660 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002540:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <menu+0x12c0>)
 8002542:	2101      	movs	r1, #1
 8002544:	2001      	movs	r0, #1
 8002546:	f006 f9cb 	bl	80088e0 <lcd_print>

		if(kapitablaTip == 0) {
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <menu+0x12c4>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <menu+0x12c8>)
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f006 f9c2 	bl	80088e0 <lcd_print>
 800255c:	e031      	b.n	80025c2 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <menu+0x12c4>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d124      	bne.n	80025b0 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <menu+0x12cc>)
 8002568:	2101      	movs	r1, #1
 800256a:	2002      	movs	r0, #2
 800256c:	f006 f9b8 	bl	80088e0 <lcd_print>
 8002570:	e027      	b.n	80025c2 <menu+0x12e2>
 8002572:	bf00      	nop
 8002574:	200010d2 	.word	0x200010d2
 8002578:	20000118 	.word	0x20000118
 800257c:	40010800 	.word	0x40010800
 8002580:	200010f7 	.word	0x200010f7
 8002584:	20000ff0 	.word	0x20000ff0
 8002588:	200010f4 	.word	0x200010f4
 800258c:	200010c8 	.word	0x200010c8
 8002590:	200014f8 	.word	0x200014f8
 8002594:	200014d0 	.word	0x200014d0
 8002598:	200010e2 	.word	0x200010e2
 800259c:	20001060 	.word	0x20001060
 80025a0:	2000150c 	.word	0x2000150c
 80025a4:	200010d3 	.word	0x200010d3
 80025a8:	20000104 	.word	0x20000104
 80025ac:	200014a8 	.word	0x200014a8
		} else if(kapitablaTip == 2) {
 80025b0:	4b3f      	ldr	r3, [pc, #252]	@ (80026b0 <menu+0x13d0>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d104      	bne.n	80025c2 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 80025b8:	4a3e      	ldr	r2, [pc, #248]	@ (80026b4 <menu+0x13d4>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f006 f98f 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c2:	2102      	movs	r1, #2
 80025c4:	483c      	ldr	r0, [pc, #240]	@ (80026b8 <menu+0x13d8>)
 80025c6:	f007 fcb5 	bl	8009f34 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d115      	bne.n	80025fc <menu+0x131c>
 80025d0:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <menu+0x13dc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80025de:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <menu+0x13d0>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <menu+0x13d0>)
 80025e8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80025ea:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <menu+0x13d0>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <menu+0x1318>
				kapitablaTip = 0;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <menu+0x13d0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025f8:	f001 fbb0 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fc:	2104      	movs	r1, #4
 80025fe:	482e      	ldr	r0, [pc, #184]	@ (80026b8 <menu+0x13d8>)
 8002600:	f007 fc98 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d115      	bne.n	8002636 <menu+0x1356>
 800260a:	4b2c      	ldr	r3, [pc, #176]	@ (80026bc <menu+0x13dc>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <menu+0x13d0>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	3b01      	subs	r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <menu+0x13d0>)
 8002622:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002624:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <menu+0x13d0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d902      	bls.n	8002632 <menu+0x1352>
		   		kapitablaTip = 2;
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <menu+0x13d0>)
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002632:	f001 fb93 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002636:	2108      	movs	r1, #8
 8002638:	481f      	ldr	r0, [pc, #124]	@ (80026b8 <menu+0x13d8>)
 800263a:	f007 fc7b 	bl	8009f34 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10d      	bne.n	8002660 <menu+0x1380>
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <menu+0x13dc>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002652:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <menu+0x13d0>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <menu+0x13e0>)
 8002658:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <menu+0x13e4>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <menu+0x13e8>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b0e      	cmp	r3, #14
 8002666:	f040 80a3 	bne.w	80027b0 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 800266a:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <menu+0x13ec>)
 800266c:	2101      	movs	r1, #1
 800266e:	2001      	movs	r0, #1
 8002670:	f006 f936 	bl	80088e0 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <menu+0x13f0>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 800267c:	4a15      	ldr	r2, [pc, #84]	@ (80026d4 <menu+0x13f4>)
 800267e:	2101      	movs	r1, #1
 8002680:	2002      	movs	r0, #2
 8002682:	f006 f92d 	bl	80088e0 <lcd_print>
 8002686:	e034      	b.n	80026f2 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <menu+0x13f0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <menu+0x13f8>)
 8002692:	2101      	movs	r1, #1
 8002694:	2002      	movs	r0, #2
 8002696:	f006 f923 	bl	80088e0 <lcd_print>
 800269a:	e02a      	b.n	80026f2 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <menu+0x13f0>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11d      	bne.n	80026e0 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <menu+0x13fc>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	2002      	movs	r0, #2
 80026aa:	f006 f919 	bl	80088e0 <lcd_print>
 80026ae:	e020      	b.n	80026f2 <menu+0x1412>
 80026b0:	200010d3 	.word	0x200010d3
 80026b4:	20000118 	.word	0x20000118
 80026b8:	40010800 	.word	0x40010800
 80026bc:	200010f7 	.word	0x200010f7
 80026c0:	20000ff0 	.word	0x20000ff0
 80026c4:	200010f4 	.word	0x200010f4
 80026c8:	200010c8 	.word	0x200010c8
 80026cc:	20001520 	.word	0x20001520
 80026d0:	200010d5 	.word	0x200010d5
 80026d4:	20001534 	.word	0x20001534
 80026d8:	20001548 	.word	0x20001548
 80026dc:	2000155c 	.word	0x2000155c
		} else if(kapiTablaAcKonum == 3) {
 80026e0:	4b76      	ldr	r3, [pc, #472]	@ (80028bc <menu+0x15dc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d104      	bne.n	80026f2 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80026e8:	4a75      	ldr	r2, [pc, #468]	@ (80028c0 <menu+0x15e0>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	2002      	movs	r0, #2
 80026ee:	f006 f8f7 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f2:	2102      	movs	r1, #2
 80026f4:	4873      	ldr	r0, [pc, #460]	@ (80028c4 <menu+0x15e4>)
 80026f6:	f007 fc1d 	bl	8009f34 <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d115      	bne.n	800272c <menu+0x144c>
 8002700:	4b71      	ldr	r3, [pc, #452]	@ (80028c8 <menu+0x15e8>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f083 0301 	eor.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800270e:	4b6b      	ldr	r3, [pc, #428]	@ (80028bc <menu+0x15dc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b69      	ldr	r3, [pc, #420]	@ (80028bc <menu+0x15dc>)
 8002718:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800271a:	4b68      	ldr	r3, [pc, #416]	@ (80028bc <menu+0x15dc>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002722:	4b66      	ldr	r3, [pc, #408]	@ (80028bc <menu+0x15dc>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002728:	f001 fb18 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800272c:	2104      	movs	r1, #4
 800272e:	4865      	ldr	r0, [pc, #404]	@ (80028c4 <menu+0x15e4>)
 8002730:	f007 fc00 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002734:	4603      	mov	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d115      	bne.n	8002766 <menu+0x1486>
 800273a:	4b63      	ldr	r3, [pc, #396]	@ (80028c8 <menu+0x15e8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002748:	4b5c      	ldr	r3, [pc, #368]	@ (80028bc <menu+0x15dc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b5a      	ldr	r3, [pc, #360]	@ (80028bc <menu+0x15dc>)
 8002752:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002754:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <menu+0x15dc>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d902      	bls.n	8002762 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 800275c:	4b57      	ldr	r3, [pc, #348]	@ (80028bc <menu+0x15dc>)
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002762:	f001 fafb 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002766:	2108      	movs	r1, #8
 8002768:	4856      	ldr	r0, [pc, #344]	@ (80028c4 <menu+0x15e4>)
 800276a:	f007 fbe3 	bl	8009f34 <HAL_GPIO_ReadPin>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d11d      	bne.n	80027b0 <menu+0x14d0>
 8002774:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <menu+0x15e8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002782:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <menu+0x15dc>)
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <menu+0x15ec>)
 8002788:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800278c:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <menu+0x15dc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <menu+0x14bc>
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <menu+0x15dc>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d106      	bne.n	80027aa <menu+0x14ca>
				altLimit = 1;
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <menu+0x15f0>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80027a2:	4b4b      	ldr	r3, [pc, #300]	@ (80028d0 <menu+0x15f0>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <menu+0x15ec>)
 80027a8:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80027aa:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <menu+0x15f4>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80027b0:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <menu+0x15f8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d16c      	bne.n	8002892 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 80027b8:	4a48      	ldr	r2, [pc, #288]	@ (80028dc <menu+0x15fc>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2001      	movs	r0, #1
 80027be:	f006 f88f 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80027c2:	4a47      	ldr	r2, [pc, #284]	@ (80028e0 <menu+0x1600>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2002      	movs	r0, #2
 80027c8:	f006 f88a 	bl	80088e0 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 80027cc:	4b45      	ldr	r3, [pc, #276]	@ (80028e4 <menu+0x1604>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	220a      	movs	r2, #10
 80027d2:	4945      	ldr	r1, [pc, #276]	@ (80028e8 <menu+0x1608>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00a fbd9 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 80027da:	4a43      	ldr	r2, [pc, #268]	@ (80028e8 <menu+0x1608>)
 80027dc:	2110      	movs	r1, #16
 80027de:	2002      	movs	r0, #2
 80027e0:	f006 f87e 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027e4:	2102      	movs	r1, #2
 80027e6:	4837      	ldr	r0, [pc, #220]	@ (80028c4 <menu+0x15e4>)
 80027e8:	f007 fba4 	bl	8009f34 <HAL_GPIO_ReadPin>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d119      	bne.n	8002826 <menu+0x1546>
 80027f2:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <menu+0x15e8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f083 0301 	eor.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <menu+0x1546>
 8002800:	4b3a      	ldr	r3, [pc, #232]	@ (80028ec <menu+0x160c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10e      	bne.n	8002826 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <menu+0x1604>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <menu+0x1604>)
 8002812:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <menu+0x1604>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d902      	bls.n	8002822 <menu+0x1542>
				kapiTablaAcSure = 0;
 800281c:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <menu+0x1604>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002822:	f001 fa9b 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002826:	2104      	movs	r1, #4
 8002828:	4826      	ldr	r0, [pc, #152]	@ (80028c4 <menu+0x15e4>)
 800282a:	f007 fb83 	bl	8009f34 <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d119      	bne.n	8002868 <menu+0x1588>
 8002834:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <menu+0x15e8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <menu+0x1588>
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <menu+0x160c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800284a:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <menu+0x1604>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <menu+0x1604>)
 8002854:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002856:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <menu+0x1604>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <menu+0x1604>)
 8002860:	2205      	movs	r2, #5
 8002862:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002864:	f001 fa7a 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002868:	2108      	movs	r1, #8
 800286a:	4816      	ldr	r0, [pc, #88]	@ (80028c4 <menu+0x15e4>)
 800286c:	f007 fb62 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <menu+0x15b2>
 8002876:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <menu+0x15e8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002884:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <menu+0x1604>)
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <menu+0x15ec>)
 800288a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <menu+0x15f4>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <menu+0x15f8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	f040 8086 	bne.w	80029a8 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <menu+0x1610>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2001      	movs	r0, #1
 80028a2:	f006 f81d 	bl	80088e0 <lcd_print>

		if(yukariYavasLimit == 0) {
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <menu+0x1614>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d124      	bne.n	80028f8 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 80028ae:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <menu+0x15e0>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2002      	movs	r0, #2
 80028b4:	f006 f814 	bl	80088e0 <lcd_print>
 80028b8:	e027      	b.n	800290a <menu+0x162a>
 80028ba:	bf00      	nop
 80028bc:	200010d5 	.word	0x200010d5
 80028c0:	200013a4 	.word	0x200013a4
 80028c4:	40010800 	.word	0x40010800
 80028c8:	200010f7 	.word	0x200010f7
 80028cc:	20000ff0 	.word	0x20000ff0
 80028d0:	200010ce 	.word	0x200010ce
 80028d4:	200010f4 	.word	0x200010f4
 80028d8:	200010c8 	.word	0x200010c8
 80028dc:	20001570 	.word	0x20001570
 80028e0:	200014d0 	.word	0x200014d0
 80028e4:	200010e3 	.word	0x200010e3
 80028e8:	20001060 	.word	0x20001060
 80028ec:	200010d3 	.word	0x200010d3
 80028f0:	20001584 	.word	0x20001584
 80028f4:	200010d6 	.word	0x200010d6
		} else if(yukariYavasLimit == 1) {
 80028f8:	4b84      	ldr	r3, [pc, #528]	@ (8002b0c <menu+0x182c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d104      	bne.n	800290a <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002900:	4a83      	ldr	r2, [pc, #524]	@ (8002b10 <menu+0x1830>)
 8002902:	2101      	movs	r1, #1
 8002904:	2002      	movs	r0, #2
 8002906:	f005 ffeb 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800290a:	2102      	movs	r1, #2
 800290c:	4881      	ldr	r0, [pc, #516]	@ (8002b14 <menu+0x1834>)
 800290e:	f007 fb11 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d115      	bne.n	8002944 <menu+0x1664>
 8002918:	4b7f      	ldr	r3, [pc, #508]	@ (8002b18 <menu+0x1838>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00e      	beq.n	8002944 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002926:	4b79      	ldr	r3, [pc, #484]	@ (8002b0c <menu+0x182c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b77      	ldr	r3, [pc, #476]	@ (8002b0c <menu+0x182c>)
 8002930:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002932:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <menu+0x182c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d902      	bls.n	8002940 <menu+0x1660>
				yukariYavasLimit = 0;
 800293a:	4b74      	ldr	r3, [pc, #464]	@ (8002b0c <menu+0x182c>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002940:	f001 fa0c 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002944:	2104      	movs	r1, #4
 8002946:	4873      	ldr	r0, [pc, #460]	@ (8002b14 <menu+0x1834>)
 8002948:	f007 faf4 	bl	8009f34 <HAL_GPIO_ReadPin>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d115      	bne.n	800297e <menu+0x169e>
 8002952:	4b71      	ldr	r3, [pc, #452]	@ (8002b18 <menu+0x1838>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002960:	4b6a      	ldr	r3, [pc, #424]	@ (8002b0c <menu+0x182c>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <menu+0x182c>)
 800296a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800296c:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <menu+0x182c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002974:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <menu+0x182c>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800297a:	f001 f9ef 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800297e:	2108      	movs	r1, #8
 8002980:	4864      	ldr	r0, [pc, #400]	@ (8002b14 <menu+0x1834>)
 8002982:	f007 fad7 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10d      	bne.n	80029a8 <menu+0x16c8>
 800298c:	4b62      	ldr	r3, [pc, #392]	@ (8002b18 <menu+0x1838>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 800299a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b0c <menu+0x182c>)
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <menu+0x183c>)
 80029a0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80029a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b20 <menu+0x1840>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80029a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b24 <menu+0x1844>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b11      	cmp	r3, #17
 80029ae:	f040 808b 	bne.w	8002ac8 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 80029b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b28 <menu+0x1848>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f005 ff92 	bl	80088e0 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 80029bc:	4b5b      	ldr	r3, [pc, #364]	@ (8002b2c <menu+0x184c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d105      	bne.n	80029d0 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 80029c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b30 <menu+0x1850>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	2002      	movs	r0, #2
 80029ca:	f005 ff89 	bl	80088e0 <lcd_print>
 80029ce:	e012      	b.n	80029f6 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 80029d0:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <menu+0x184c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 80029d8:	4a56      	ldr	r2, [pc, #344]	@ (8002b34 <menu+0x1854>)
 80029da:	2101      	movs	r1, #1
 80029dc:	2002      	movs	r0, #2
 80029de:	f005 ff7f 	bl	80088e0 <lcd_print>
 80029e2:	e008      	b.n	80029f6 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 80029e4:	4b51      	ldr	r3, [pc, #324]	@ (8002b2c <menu+0x184c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 80029ec:	4a52      	ldr	r2, [pc, #328]	@ (8002b38 <menu+0x1858>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2002      	movs	r0, #2
 80029f2:	f005 ff75 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f6:	2102      	movs	r1, #2
 80029f8:	4846      	ldr	r0, [pc, #280]	@ (8002b14 <menu+0x1834>)
 80029fa:	f007 fa9b 	bl	8009f34 <HAL_GPIO_ReadPin>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d115      	bne.n	8002a30 <menu+0x1750>
 8002a04:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <menu+0x1838>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002a12:	4b46      	ldr	r3, [pc, #280]	@ (8002b2c <menu+0x184c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <menu+0x184c>)
 8002a1c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002a1e:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <menu+0x184c>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002a26:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <menu+0x184c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a2c:	f001 f996 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a30:	2104      	movs	r1, #4
 8002a32:	4838      	ldr	r0, [pc, #224]	@ (8002b14 <menu+0x1834>)
 8002a34:	f007 fa7e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d115      	bne.n	8002a6a <menu+0x178a>
 8002a3e:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <menu+0x1838>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00e      	beq.n	8002a6a <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002a4c:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <menu+0x184c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <menu+0x184c>)
 8002a56:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002a58:	4b34      	ldr	r3, [pc, #208]	@ (8002b2c <menu+0x184c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d902      	bls.n	8002a66 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002a60:	4b32      	ldr	r3, [pc, #200]	@ (8002b2c <menu+0x184c>)
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a66:	f001 f979 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6a:	2108      	movs	r1, #8
 8002a6c:	4829      	ldr	r0, [pc, #164]	@ (8002b14 <menu+0x1834>)
 8002a6e:	f007 fa61 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d127      	bne.n	8002ac8 <menu+0x17e8>
 8002a78:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <menu+0x1838>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f083 0301 	eor.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002a86:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <menu+0x184c>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <menu+0x183c>)
 8002a8c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002a8e:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <menu+0x184c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <menu+0x17be>
 8002a96:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <menu+0x184c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d106      	bne.n	8002aac <menu+0x17cc>
				calismaSekli = 0;
 8002a9e:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <menu+0x185c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002aa4:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <menu+0x185c>)
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <menu+0x183c>)
 8002aaa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <menu+0x184c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <menu+0x1860>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <menu+0x1860>)
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <menu+0x183c>)
 8002ac0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <menu+0x1840>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002ac8:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <menu+0x1844>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	f040 8097 	bne.w	8002c00 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002ad2:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <menu+0x184c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d105      	bne.n	8002ae6 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <menu+0x1864>)
 8002adc:	2101      	movs	r1, #1
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f005 fefe 	bl	80088e0 <lcd_print>
 8002ae4:	e008      	b.n	8002af8 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <menu+0x184c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d104      	bne.n	8002af8 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <menu+0x1868>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2001      	movs	r0, #1
 8002af4:	f005 fef4 	bl	80088e0 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <menu+0x186c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d127      	bne.n	8002b50 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <menu+0x1858>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	2002      	movs	r0, #2
 8002b06:	f005 feeb 	bl	80088e0 <lcd_print>
 8002b0a:	e02a      	b.n	8002b62 <menu+0x1882>
 8002b0c:	200010d6 	.word	0x200010d6
 8002b10:	200013b8 	.word	0x200013b8
 8002b14:	40010800 	.word	0x40010800
 8002b18:	200010f7 	.word	0x200010f7
 8002b1c:	20000ff0 	.word	0x20000ff0
 8002b20:	200010f4 	.word	0x200010f4
 8002b24:	200010c8 	.word	0x200010c8
 8002b28:	20001598 	.word	0x20001598
 8002b2c:	200010d7 	.word	0x200010d7
 8002b30:	200015ac 	.word	0x200015ac
 8002b34:	200015c0 	.word	0x200015c0
 8002b38:	200013a4 	.word	0x200013a4
 8002b3c:	200010c9 	.word	0x200010c9
 8002b40:	200010da 	.word	0x200010da
 8002b44:	200015d4 	.word	0x200015d4
 8002b48:	200015e8 	.word	0x200015e8
 8002b4c:	200010d8 	.word	0x200010d8
		} else if(devirmeYukariIleriLimit == 1){
 8002b50:	4b79      	ldr	r3, [pc, #484]	@ (8002d38 <menu+0x1a58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d104      	bne.n	8002b62 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002b58:	4a78      	ldr	r2, [pc, #480]	@ (8002d3c <menu+0x1a5c>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f005 febf 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b62:	2102      	movs	r1, #2
 8002b64:	4876      	ldr	r0, [pc, #472]	@ (8002d40 <menu+0x1a60>)
 8002b66:	f007 f9e5 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d115      	bne.n	8002b9c <menu+0x18bc>
 8002b70:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <menu+0x1a64>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	f083 0301 	eor.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00e      	beq.n	8002b9c <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d38 <menu+0x1a58>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b6c      	ldr	r3, [pc, #432]	@ (8002d38 <menu+0x1a58>)
 8002b88:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d38 <menu+0x1a58>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d902      	bls.n	8002b98 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002b92:	4b69      	ldr	r3, [pc, #420]	@ (8002d38 <menu+0x1a58>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b98:	f001 f8e0 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4868      	ldr	r0, [pc, #416]	@ (8002d40 <menu+0x1a60>)
 8002ba0:	f007 f9c8 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d115      	bne.n	8002bd6 <menu+0x18f6>
 8002baa:	4b66      	ldr	r3, [pc, #408]	@ (8002d44 <menu+0x1a64>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <menu+0x1a58>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8002d38 <menu+0x1a58>)
 8002bc2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <menu+0x1a58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8002d38 <menu+0x1a58>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bd2:	f001 f8c3 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	4859      	ldr	r0, [pc, #356]	@ (8002d40 <menu+0x1a60>)
 8002bda:	f007 f9ab 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <menu+0x1920>
 8002be4:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <menu+0x1a64>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002bf2:	4b51      	ldr	r3, [pc, #324]	@ (8002d38 <menu+0x1a58>)
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	4b54      	ldr	r3, [pc, #336]	@ (8002d48 <menu+0x1a68>)
 8002bf8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002bfa:	4b54      	ldr	r3, [pc, #336]	@ (8002d4c <menu+0x1a6c>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002c00:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <menu+0x1a70>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b13      	cmp	r3, #19
 8002c06:	d174      	bne.n	8002cf2 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002c08:	4b52      	ldr	r3, [pc, #328]	@ (8002d54 <menu+0x1a74>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d105      	bne.n	8002c1c <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002c10:	4a51      	ldr	r2, [pc, #324]	@ (8002d58 <menu+0x1a78>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2001      	movs	r0, #1
 8002c16:	f005 fe63 	bl	80088e0 <lcd_print>
 8002c1a:	e008      	b.n	8002c2e <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d54 <menu+0x1a74>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d104      	bne.n	8002c2e <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002c24:	4a4d      	ldr	r2, [pc, #308]	@ (8002d5c <menu+0x1a7c>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f005 fe59 	bl	80088e0 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d60 <menu+0x1a80>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002c36:	4a4b      	ldr	r2, [pc, #300]	@ (8002d64 <menu+0x1a84>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f005 fe50 	bl	80088e0 <lcd_print>
 8002c40:	e008      	b.n	8002c54 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <menu+0x1a80>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d104      	bne.n	8002c54 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d3c <menu+0x1a5c>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f005 fe46 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c54:	2102      	movs	r1, #2
 8002c56:	483a      	ldr	r0, [pc, #232]	@ (8002d40 <menu+0x1a60>)
 8002c58:	f007 f96c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d115      	bne.n	8002c8e <menu+0x19ae>
 8002c62:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <menu+0x1a64>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00e      	beq.n	8002c8e <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002c70:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <menu+0x1a80>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <menu+0x1a80>)
 8002c7a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002c7c:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <menu+0x1a80>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d902      	bls.n	8002c8a <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <menu+0x1a80>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c8a:	f001 f867 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c8e:	2104      	movs	r1, #4
 8002c90:	482b      	ldr	r0, [pc, #172]	@ (8002d40 <menu+0x1a60>)
 8002c92:	f007 f94f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d115      	bne.n	8002cc8 <menu+0x19e8>
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <menu+0x1a64>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f083 0301 	eor.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <menu+0x1a80>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <menu+0x1a80>)
 8002cb4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <menu+0x1a80>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <menu+0x1a80>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cc4:	f001 f84a 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cc8:	2108      	movs	r1, #8
 8002cca:	481d      	ldr	r0, [pc, #116]	@ (8002d40 <menu+0x1a60>)
 8002ccc:	f007 f932 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d10d      	bne.n	8002cf2 <menu+0x1a12>
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <menu+0x1a64>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <menu+0x1a80>)
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <menu+0x1a68>)
 8002cea:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002cec:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <menu+0x1a6c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002cf2:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <menu+0x1a70>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b14      	cmp	r3, #20
 8002cf8:	f040 809e 	bne.w	8002e38 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002cfc:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <menu+0x1a74>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002d04:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <menu+0x1a88>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f005 fde9 	bl	80088e0 <lcd_print>
 8002d0e:	e008      	b.n	8002d22 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002d10:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <menu+0x1a74>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d104      	bne.n	8002d22 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <menu+0x1a8c>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f005 fddf 	bl	80088e0 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <menu+0x1a90>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d126      	bne.n	8002d78 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <menu+0x1a94>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	2002      	movs	r0, #2
 8002d30:	f005 fdd6 	bl	80088e0 <lcd_print>
 8002d34:	e029      	b.n	8002d8a <menu+0x1aaa>
 8002d36:	bf00      	nop
 8002d38:	200010d8 	.word	0x200010d8
 8002d3c:	200013b8 	.word	0x200013b8
 8002d40:	40010800 	.word	0x40010800
 8002d44:	200010f7 	.word	0x200010f7
 8002d48:	20000ff0 	.word	0x20000ff0
 8002d4c:	200010f4 	.word	0x200010f4
 8002d50:	200010c8 	.word	0x200010c8
 8002d54:	200010d7 	.word	0x200010d7
 8002d58:	200015fc 	.word	0x200015fc
 8002d5c:	20001610 	.word	0x20001610
 8002d60:	200010d9 	.word	0x200010d9
 8002d64:	200013a4 	.word	0x200013a4
 8002d68:	20001624 	.word	0x20001624
 8002d6c:	20001638 	.word	0x20001638
 8002d70:	200010da 	.word	0x200010da
 8002d74:	2000164c 	.word	0x2000164c
		} else if(devirmeSilindirTipi == 1) {
 8002d78:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <menu+0x1b80>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d104      	bne.n	8002d8a <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002d80:	4a38      	ldr	r2, [pc, #224]	@ (8002e64 <menu+0x1b84>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	2002      	movs	r0, #2
 8002d86:	f005 fdab 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4836      	ldr	r0, [pc, #216]	@ (8002e68 <menu+0x1b88>)
 8002d8e:	f007 f8d1 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d119      	bne.n	8002dcc <menu+0x1aec>
 8002d98:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <menu+0x1b8c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <menu+0x1aec>
 8002da6:	4b32      	ldr	r3, [pc, #200]	@ (8002e70 <menu+0x1b90>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d10e      	bne.n	8002dcc <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002dae:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <menu+0x1b80>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <menu+0x1b80>)
 8002db8:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002dba:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <menu+0x1b80>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d902      	bls.n	8002dc8 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <menu+0x1b80>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dc8:	f000 ffc8 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4826      	ldr	r0, [pc, #152]	@ (8002e68 <menu+0x1b88>)
 8002dd0:	f007 f8b0 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d119      	bne.n	8002e0e <menu+0x1b2e>
 8002dda:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <menu+0x1b8c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <menu+0x1b2e>
 8002de8:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <menu+0x1b90>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d10e      	bne.n	8002e0e <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <menu+0x1b80>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <menu+0x1b80>)
 8002dfa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002dfc:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <menu+0x1b80>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <menu+0x1b80>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e0a:	f000 ffa7 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e0e:	2108      	movs	r1, #8
 8002e10:	4815      	ldr	r0, [pc, #84]	@ (8002e68 <menu+0x1b88>)
 8002e12:	f007 f88f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10d      	bne.n	8002e38 <menu+0x1b58>
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <menu+0x1b8c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <menu+0x1b80>)
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <menu+0x1b94>)
 8002e30:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <menu+0x1b98>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002e38:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <menu+0x1b9c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b15      	cmp	r3, #21
 8002e3e:	f040 8088 	bne.w	8002f52 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002e42:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <menu+0x1ba0>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	2001      	movs	r0, #1
 8002e48:	f005 fd4a 	bl	80088e0 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <menu+0x1ba4>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11b      	bne.n	8002e8c <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002e54:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <menu+0x1ba8>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f005 fd41 	bl	80088e0 <lcd_print>
 8002e5e:	e01e      	b.n	8002e9e <menu+0x1bbe>
 8002e60:	200010da 	.word	0x200010da
 8002e64:	20001660 	.word	0x20001660
 8002e68:	40010800 	.word	0x40010800
 8002e6c:	200010f7 	.word	0x200010f7
 8002e70:	200010d7 	.word	0x200010d7
 8002e74:	20000ff0 	.word	0x20000ff0
 8002e78:	200010f4 	.word	0x200010f4
 8002e7c:	200010c8 	.word	0x200010c8
 8002e80:	20001674 	.word	0x20001674
 8002e84:	200010db 	.word	0x200010db
 8002e88:	2000164c 	.word	0x2000164c
		} else if(platformSilindirTipi == 1) {
 8002e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8003114 <menu+0x1e34>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d104      	bne.n	8002e9e <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002e94:	4aa0      	ldr	r2, [pc, #640]	@ (8003118 <menu+0x1e38>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f005 fd21 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	489e      	ldr	r0, [pc, #632]	@ (800311c <menu+0x1e3c>)
 8002ea2:	f007 f847 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d115      	bne.n	8002ed8 <menu+0x1bf8>
 8002eac:	4b9c      	ldr	r3, [pc, #624]	@ (8003120 <menu+0x1e40>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	f083 0301 	eor.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002eba:	4b96      	ldr	r3, [pc, #600]	@ (8003114 <menu+0x1e34>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b94      	ldr	r3, [pc, #592]	@ (8003114 <menu+0x1e34>)
 8002ec4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002ec6:	4b93      	ldr	r3, [pc, #588]	@ (8003114 <menu+0x1e34>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d902      	bls.n	8002ed4 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002ece:	4b91      	ldr	r3, [pc, #580]	@ (8003114 <menu+0x1e34>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ed4:	f000 ff42 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4890      	ldr	r0, [pc, #576]	@ (800311c <menu+0x1e3c>)
 8002edc:	f007 f82a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d115      	bne.n	8002f12 <menu+0x1c32>
 8002ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8003120 <menu+0x1e40>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002ef4:	4b87      	ldr	r3, [pc, #540]	@ (8003114 <menu+0x1e34>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b85      	ldr	r3, [pc, #532]	@ (8003114 <menu+0x1e34>)
 8002efe:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002f00:	4b84      	ldr	r3, [pc, #528]	@ (8003114 <menu+0x1e34>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002f08:	4b82      	ldr	r3, [pc, #520]	@ (8003114 <menu+0x1e34>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f0e:	f000 ff25 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f12:	2108      	movs	r1, #8
 8002f14:	4881      	ldr	r0, [pc, #516]	@ (800311c <menu+0x1e3c>)
 8002f16:	f007 f80d 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d118      	bne.n	8002f52 <menu+0x1c72>
 8002f20:	4b7f      	ldr	r3, [pc, #508]	@ (8003120 <menu+0x1e40>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d011      	beq.n	8002f52 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002f2e:	4b79      	ldr	r3, [pc, #484]	@ (8003114 <menu+0x1e34>)
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	4b7c      	ldr	r3, [pc, #496]	@ (8003124 <menu+0x1e44>)
 8002f34:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f36:	4b77      	ldr	r3, [pc, #476]	@ (8003114 <menu+0x1e34>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d106      	bne.n	8002f4c <menu+0x1c6c>
				altLimit = 1;
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003128 <menu+0x1e48>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f44:	4b78      	ldr	r3, [pc, #480]	@ (8003128 <menu+0x1e48>)
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <menu+0x1e44>)
 8002f4a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002f4c:	4b77      	ldr	r3, [pc, #476]	@ (800312c <menu+0x1e4c>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002f52:	4b77      	ldr	r3, [pc, #476]	@ (8003130 <menu+0x1e50>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b16      	cmp	r3, #22
 8002f58:	d164      	bne.n	8003024 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002f5a:	4a76      	ldr	r2, [pc, #472]	@ (8003134 <menu+0x1e54>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f005 fcbe 	bl	80088e0 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002f64:	4a74      	ldr	r2, [pc, #464]	@ (8003138 <menu+0x1e58>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f005 fcb9 	bl	80088e0 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002f6e:	4b73      	ldr	r3, [pc, #460]	@ (800313c <menu+0x1e5c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	220a      	movs	r2, #10
 8002f74:	4972      	ldr	r1, [pc, #456]	@ (8003140 <menu+0x1e60>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00a f808 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 8002f7c:	4a70      	ldr	r2, [pc, #448]	@ (8003140 <menu+0x1e60>)
 8002f7e:	2110      	movs	r1, #16
 8002f80:	2002      	movs	r0, #2
 8002f82:	f005 fcad 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f86:	2102      	movs	r1, #2
 8002f88:	4864      	ldr	r0, [pc, #400]	@ (800311c <menu+0x1e3c>)
 8002f8a:	f006 ffd3 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d115      	bne.n	8002fc0 <menu+0x1ce0>
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <menu+0x1e40>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00e      	beq.n	8002fc0 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002fa2:	4b66      	ldr	r3, [pc, #408]	@ (800313c <menu+0x1e5c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4b64      	ldr	r3, [pc, #400]	@ (800313c <menu+0x1e5c>)
 8002fac:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <menu+0x1e5c>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d902      	bls.n	8002fbc <menu+0x1cdc>
				yukariValfTmr = 0;
 8002fb6:	4b61      	ldr	r3, [pc, #388]	@ (800313c <menu+0x1e5c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fbc:	f000 fece 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	4856      	ldr	r0, [pc, #344]	@ (800311c <menu+0x1e3c>)
 8002fc4:	f006 ffb6 	bl	8009f34 <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <menu+0x1d1a>
 8002fce:	4b54      	ldr	r3, [pc, #336]	@ (8003120 <menu+0x1e40>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002fdc:	4b57      	ldr	r3, [pc, #348]	@ (800313c <menu+0x1e5c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b55      	ldr	r3, [pc, #340]	@ (800313c <menu+0x1e5c>)
 8002fe6:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002fe8:	4b54      	ldr	r3, [pc, #336]	@ (800313c <menu+0x1e5c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d902      	bls.n	8002ff6 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002ff0:	4b52      	ldr	r3, [pc, #328]	@ (800313c <menu+0x1e5c>)
 8002ff2:	2205      	movs	r2, #5
 8002ff4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ff6:	f000 feb1 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffa:	2108      	movs	r1, #8
 8002ffc:	4847      	ldr	r0, [pc, #284]	@ (800311c <menu+0x1e3c>)
 8002ffe:	f006 ff99 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10d      	bne.n	8003024 <menu+0x1d44>
 8003008:	4b45      	ldr	r3, [pc, #276]	@ (8003120 <menu+0x1e40>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003016:	4b49      	ldr	r3, [pc, #292]	@ (800313c <menu+0x1e5c>)
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	4b42      	ldr	r3, [pc, #264]	@ (8003124 <menu+0x1e44>)
 800301c:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800301e:	4b43      	ldr	r3, [pc, #268]	@ (800312c <menu+0x1e4c>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003024:	4b42      	ldr	r3, [pc, #264]	@ (8003130 <menu+0x1e50>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b17      	cmp	r3, #23
 800302a:	d164      	bne.n	80030f6 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 800302c:	4a45      	ldr	r2, [pc, #276]	@ (8003144 <menu+0x1e64>)
 800302e:	2101      	movs	r1, #1
 8003030:	2001      	movs	r0, #1
 8003032:	f005 fc55 	bl	80088e0 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003036:	4a40      	ldr	r2, [pc, #256]	@ (8003138 <menu+0x1e58>)
 8003038:	2101      	movs	r1, #1
 800303a:	2002      	movs	r0, #2
 800303c:	f005 fc50 	bl	80088e0 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003040:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <menu+0x1e68>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	220a      	movs	r2, #10
 8003046:	493e      	ldr	r1, [pc, #248]	@ (8003140 <menu+0x1e60>)
 8003048:	4618      	mov	r0, r3
 800304a:	f009 ff9f 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 800304e:	4a3c      	ldr	r2, [pc, #240]	@ (8003140 <menu+0x1e60>)
 8003050:	2110      	movs	r1, #16
 8003052:	2002      	movs	r0, #2
 8003054:	f005 fc44 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003058:	2102      	movs	r1, #2
 800305a:	4830      	ldr	r0, [pc, #192]	@ (800311c <menu+0x1e3c>)
 800305c:	f006 ff6a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d115      	bne.n	8003092 <menu+0x1db2>
 8003066:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <menu+0x1e40>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f083 0301 	eor.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003074:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <menu+0x1e68>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <menu+0x1e68>)
 800307e:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003080:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <menu+0x1e68>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d902      	bls.n	800308e <menu+0x1dae>
				asagiValfTmr = 0;
 8003088:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <menu+0x1e68>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800308e:	f000 fe65 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003092:	2104      	movs	r1, #4
 8003094:	4821      	ldr	r0, [pc, #132]	@ (800311c <menu+0x1e3c>)
 8003096:	f006 ff4d 	bl	8009f34 <HAL_GPIO_ReadPin>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d115      	bne.n	80030cc <menu+0x1dec>
 80030a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <menu+0x1e40>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <menu+0x1e68>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <menu+0x1e68>)
 80030b8:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80030ba:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <menu+0x1e68>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <menu+0x1de8>
		   		asagiValfTmr = 5;
 80030c2:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <menu+0x1e68>)
 80030c4:	2205      	movs	r2, #5
 80030c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030c8:	f000 fe48 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030cc:	2108      	movs	r1, #8
 80030ce:	4813      	ldr	r0, [pc, #76]	@ (800311c <menu+0x1e3c>)
 80030d0:	f006 ff30 	bl	8009f34 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10d      	bne.n	80030f6 <menu+0x1e16>
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <menu+0x1e40>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80030e8:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <menu+0x1e68>)
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <menu+0x1e44>)
 80030ee:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80030f0:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <menu+0x1e4c>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80030f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <menu+0x1e50>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b18      	cmp	r3, #24
 80030fc:	f040 8093 	bne.w	8003226 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <menu+0x1e6c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d125      	bne.n	8003154 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003108:	4a11      	ldr	r2, [pc, #68]	@ (8003150 <menu+0x1e70>)
 800310a:	2101      	movs	r1, #1
 800310c:	2001      	movs	r0, #1
 800310e:	f005 fbe7 	bl	80088e0 <lcd_print>
 8003112:	e028      	b.n	8003166 <menu+0x1e86>
 8003114:	200010db 	.word	0x200010db
 8003118:	20001660 	.word	0x20001660
 800311c:	40010800 	.word	0x40010800
 8003120:	200010f7 	.word	0x200010f7
 8003124:	20000ff0 	.word	0x20000ff0
 8003128:	200010ce 	.word	0x200010ce
 800312c:	200010f4 	.word	0x200010f4
 8003130:	200010c8 	.word	0x200010c8
 8003134:	20001688 	.word	0x20001688
 8003138:	200014d0 	.word	0x200014d0
 800313c:	200010dc 	.word	0x200010dc
 8003140:	20001060 	.word	0x20001060
 8003144:	2000169c 	.word	0x2000169c
 8003148:	200010dd 	.word	0x200010dd
 800314c:	200010d7 	.word	0x200010d7
 8003150:	200016b0 	.word	0x200016b0
		} else if(devirmeYuruyusSecim == 1) {
 8003154:	4b8c      	ldr	r3, [pc, #560]	@ (8003388 <menu+0x20a8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d104      	bne.n	8003166 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 800315c:	4a8b      	ldr	r2, [pc, #556]	@ (800338c <menu+0x20ac>)
 800315e:	2101      	movs	r1, #1
 8003160:	2001      	movs	r0, #1
 8003162:	f005 fbbd 	bl	80088e0 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003166:	4a8a      	ldr	r2, [pc, #552]	@ (8003390 <menu+0x20b0>)
 8003168:	2101      	movs	r1, #1
 800316a:	2002      	movs	r0, #2
 800316c:	f005 fbb8 	bl	80088e0 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003170:	4b88      	ldr	r3, [pc, #544]	@ (8003394 <menu+0x20b4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	220a      	movs	r2, #10
 8003176:	4988      	ldr	r1, [pc, #544]	@ (8003398 <menu+0x20b8>)
 8003178:	4618      	mov	r0, r3
 800317a:	f009 ff07 	bl	800cf8c <itoa>
		lcd_print(2, 16, snum);
 800317e:	4a86      	ldr	r2, [pc, #536]	@ (8003398 <menu+0x20b8>)
 8003180:	2110      	movs	r1, #16
 8003182:	2002      	movs	r0, #2
 8003184:	f005 fbac 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003188:	2102      	movs	r1, #2
 800318a:	4884      	ldr	r0, [pc, #528]	@ (800339c <menu+0x20bc>)
 800318c:	f006 fed2 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d115      	bne.n	80031c2 <menu+0x1ee2>
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <menu+0x20c0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	f083 0301 	eor.w	r3, r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80031a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003394 <menu+0x20b4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b79      	ldr	r3, [pc, #484]	@ (8003394 <menu+0x20b4>)
 80031ae:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80031b0:	4b78      	ldr	r3, [pc, #480]	@ (8003394 <menu+0x20b4>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d902      	bls.n	80031be <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 80031b8:	4b76      	ldr	r3, [pc, #472]	@ (8003394 <menu+0x20b4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031be:	f000 fdcd 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c2:	2104      	movs	r1, #4
 80031c4:	4875      	ldr	r0, [pc, #468]	@ (800339c <menu+0x20bc>)
 80031c6:	f006 feb5 	bl	8009f34 <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d115      	bne.n	80031fc <menu+0x1f1c>
 80031d0:	4b73      	ldr	r3, [pc, #460]	@ (80033a0 <menu+0x20c0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80031de:	4b6d      	ldr	r3, [pc, #436]	@ (8003394 <menu+0x20b4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003394 <menu+0x20b4>)
 80031e8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80031ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <menu+0x20b4>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80031f2:	4b68      	ldr	r3, [pc, #416]	@ (8003394 <menu+0x20b4>)
 80031f4:	2205      	movs	r2, #5
 80031f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031f8:	f000 fdb0 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fc:	2108      	movs	r1, #8
 80031fe:	4867      	ldr	r0, [pc, #412]	@ (800339c <menu+0x20bc>)
 8003200:	f006 fe98 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10d      	bne.n	8003226 <menu+0x1f46>
 800320a:	4b65      	ldr	r3, [pc, #404]	@ (80033a0 <menu+0x20c0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003218:	4b5e      	ldr	r3, [pc, #376]	@ (8003394 <menu+0x20b4>)
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <menu+0x20c4>)
 800321e:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003220:	4b61      	ldr	r3, [pc, #388]	@ (80033a8 <menu+0x20c8>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003226:	4b61      	ldr	r3, [pc, #388]	@ (80033ac <menu+0x20cc>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b19      	cmp	r3, #25
 800322c:	d172      	bne.n	8003314 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800322e:	4b56      	ldr	r3, [pc, #344]	@ (8003388 <menu+0x20a8>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d105      	bne.n	8003242 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003236:	4a5e      	ldr	r2, [pc, #376]	@ (80033b0 <menu+0x20d0>)
 8003238:	2101      	movs	r1, #1
 800323a:	2001      	movs	r0, #1
 800323c:	f005 fb50 	bl	80088e0 <lcd_print>
 8003240:	e008      	b.n	8003254 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8003242:	4b51      	ldr	r3, [pc, #324]	@ (8003388 <menu+0x20a8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d104      	bne.n	8003254 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 800324a:	4a5a      	ldr	r2, [pc, #360]	@ (80033b4 <menu+0x20d4>)
 800324c:	2101      	movs	r1, #1
 800324e:	2001      	movs	r0, #1
 8003250:	f005 fb46 	bl	80088e0 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003254:	4a4e      	ldr	r2, [pc, #312]	@ (8003390 <menu+0x20b0>)
 8003256:	2101      	movs	r1, #1
 8003258:	2002      	movs	r0, #2
 800325a:	f005 fb41 	bl	80088e0 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800325e:	4b56      	ldr	r3, [pc, #344]	@ (80033b8 <menu+0x20d8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	220a      	movs	r2, #10
 8003264:	494c      	ldr	r1, [pc, #304]	@ (8003398 <menu+0x20b8>)
 8003266:	4618      	mov	r0, r3
 8003268:	f009 fe90 	bl	800cf8c <itoa>
		lcd_print(2,16,snum);
 800326c:	4a4a      	ldr	r2, [pc, #296]	@ (8003398 <menu+0x20b8>)
 800326e:	2110      	movs	r1, #16
 8003270:	2002      	movs	r0, #2
 8003272:	f005 fb35 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003276:	2102      	movs	r1, #2
 8003278:	4848      	ldr	r0, [pc, #288]	@ (800339c <menu+0x20bc>)
 800327a:	f006 fe5b 	bl	8009f34 <HAL_GPIO_ReadPin>
 800327e:	4603      	mov	r3, r0
 8003280:	2b01      	cmp	r3, #1
 8003282:	d115      	bne.n	80032b0 <menu+0x1fd0>
 8003284:	4b46      	ldr	r3, [pc, #280]	@ (80033a0 <menu+0x20c0>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f083 0301 	eor.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00e      	beq.n	80032b0 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003292:	4b49      	ldr	r3, [pc, #292]	@ (80033b8 <menu+0x20d8>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <menu+0x20d8>)
 800329c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800329e:	4b46      	ldr	r3, [pc, #280]	@ (80033b8 <menu+0x20d8>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d902      	bls.n	80032ac <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80032a6:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <menu+0x20d8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032ac:	f000 fd56 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b0:	2104      	movs	r1, #4
 80032b2:	483a      	ldr	r0, [pc, #232]	@ (800339c <menu+0x20bc>)
 80032b4:	f006 fe3e 	bl	8009f34 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d115      	bne.n	80032ea <menu+0x200a>
 80032be:	4b38      	ldr	r3, [pc, #224]	@ (80033a0 <menu+0x20c0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80032cc:	4b3a      	ldr	r3, [pc, #232]	@ (80033b8 <menu+0x20d8>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b38      	ldr	r3, [pc, #224]	@ (80033b8 <menu+0x20d8>)
 80032d6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80032d8:	4b37      	ldr	r3, [pc, #220]	@ (80033b8 <menu+0x20d8>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d902      	bls.n	80032e6 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80032e0:	4b35      	ldr	r3, [pc, #212]	@ (80033b8 <menu+0x20d8>)
 80032e2:	2205      	movs	r2, #5
 80032e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032e6:	f000 fd39 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ea:	2108      	movs	r1, #8
 80032ec:	482b      	ldr	r0, [pc, #172]	@ (800339c <menu+0x20bc>)
 80032ee:	f006 fe21 	bl	8009f34 <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <menu+0x2034>
 80032f8:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <menu+0x20c0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003306:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <menu+0x20d8>)
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <menu+0x20c4>)
 800330c:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800330e:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <menu+0x20c8>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <menu+0x20cc>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b1a      	cmp	r3, #26
 800331a:	f040 80b7 	bne.w	800348c <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <menu+0x20dc>)
 8003320:	2101      	movs	r1, #1
 8003322:	2001      	movs	r0, #1
 8003324:	f005 fadc 	bl	80088e0 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <menu+0x20e0>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b63      	cmp	r3, #99	@ 0x63
 800332e:	d911      	bls.n	8003354 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <menu+0x20b0>)
 8003332:	2101      	movs	r1, #1
 8003334:	2002      	movs	r0, #2
 8003336:	f005 fad3 	bl	80088e0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800333a:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <menu+0x20e0>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	220a      	movs	r2, #10
 8003340:	4915      	ldr	r1, [pc, #84]	@ (8003398 <menu+0x20b8>)
 8003342:	4618      	mov	r0, r3
 8003344:	f009 fe22 	bl	800cf8c <itoa>
			lcd_print(2,14,snum);
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <menu+0x20b8>)
 800334a:	210e      	movs	r1, #14
 800334c:	2002      	movs	r0, #2
 800334e:	f005 fac7 	bl	80088e0 <lcd_print>
 8003352:	e04c      	b.n	80033ee <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <menu+0x20e0>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b09      	cmp	r3, #9
 800335a:	d933      	bls.n	80033c4 <menu+0x20e4>
 800335c:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <menu+0x20e0>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b63      	cmp	r3, #99	@ 0x63
 8003362:	d82f      	bhi.n	80033c4 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003364:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <menu+0x20b0>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f005 fab9 	bl	80088e0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800336e:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <menu+0x20e0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	220a      	movs	r2, #10
 8003374:	4908      	ldr	r1, [pc, #32]	@ (8003398 <menu+0x20b8>)
 8003376:	4618      	mov	r0, r3
 8003378:	f009 fe08 	bl	800cf8c <itoa>
			lcd_print(2, 15, snum);
 800337c:	4a06      	ldr	r2, [pc, #24]	@ (8003398 <menu+0x20b8>)
 800337e:	210f      	movs	r1, #15
 8003380:	2002      	movs	r0, #2
 8003382:	f005 faad 	bl	80088e0 <lcd_print>
 8003386:	e032      	b.n	80033ee <menu+0x210e>
 8003388:	200010d7 	.word	0x200010d7
 800338c:	200016c4 	.word	0x200016c4
 8003390:	200014d0 	.word	0x200014d0
 8003394:	200010de 	.word	0x200010de
 8003398:	20001060 	.word	0x20001060
 800339c:	40010800 	.word	0x40010800
 80033a0:	200010f7 	.word	0x200010f7
 80033a4:	20000ff0 	.word	0x20000ff0
 80033a8:	200010f4 	.word	0x200010f4
 80033ac:	200010c8 	.word	0x200010c8
 80033b0:	200016d8 	.word	0x200016d8
 80033b4:	200016ec 	.word	0x200016ec
 80033b8:	200010df 	.word	0x200010df
 80033bc:	20001700 	.word	0x20001700
 80033c0:	200010e0 	.word	0x200010e0
		} else if(makineCalismaTmr <=  9) {
 80033c4:	4b72      	ldr	r3, [pc, #456]	@ (8003590 <menu+0x22b0>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d810      	bhi.n	80033ee <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80033cc:	4a71      	ldr	r2, [pc, #452]	@ (8003594 <menu+0x22b4>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	2002      	movs	r0, #2
 80033d2:	f005 fa85 	bl	80088e0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003590 <menu+0x22b0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	220a      	movs	r2, #10
 80033dc:	496e      	ldr	r1, [pc, #440]	@ (8003598 <menu+0x22b8>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f009 fdd4 	bl	800cf8c <itoa>
			lcd_print(2, 16, snum);
 80033e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003598 <menu+0x22b8>)
 80033e6:	2110      	movs	r1, #16
 80033e8:	2002      	movs	r0, #2
 80033ea:	f005 fa79 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ee:	2102      	movs	r1, #2
 80033f0:	486a      	ldr	r0, [pc, #424]	@ (800359c <menu+0x22bc>)
 80033f2:	f006 fd9f 	bl	8009f34 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d115      	bne.n	8003428 <menu+0x2148>
 80033fc:	4b68      	ldr	r3, [pc, #416]	@ (80035a0 <menu+0x22c0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f083 0301 	eor.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800340a:	4b61      	ldr	r3, [pc, #388]	@ (8003590 <menu+0x22b0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b5f      	ldr	r3, [pc, #380]	@ (8003590 <menu+0x22b0>)
 8003414:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003416:	4b5e      	ldr	r3, [pc, #376]	@ (8003590 <menu+0x22b0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2bb4      	cmp	r3, #180	@ 0xb4
 800341c:	d902      	bls.n	8003424 <menu+0x2144>
				makineCalismaTmr = 0;
 800341e:	4b5c      	ldr	r3, [pc, #368]	@ (8003590 <menu+0x22b0>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003424:	f000 fc9a 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003428:	2104      	movs	r1, #4
 800342a:	485c      	ldr	r0, [pc, #368]	@ (800359c <menu+0x22bc>)
 800342c:	f006 fd82 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d115      	bne.n	8003462 <menu+0x2182>
 8003436:	4b5a      	ldr	r3, [pc, #360]	@ (80035a0 <menu+0x22c0>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003444:	4b52      	ldr	r3, [pc, #328]	@ (8003590 <menu+0x22b0>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <menu+0x22b0>)
 800344e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003450:	4b4f      	ldr	r3, [pc, #316]	@ (8003590 <menu+0x22b0>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2bb5      	cmp	r3, #181	@ 0xb5
 8003456:	d902      	bls.n	800345e <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003458:	4b4d      	ldr	r3, [pc, #308]	@ (8003590 <menu+0x22b0>)
 800345a:	22b4      	movs	r2, #180	@ 0xb4
 800345c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800345e:	f000 fc7d 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003462:	2108      	movs	r1, #8
 8003464:	484d      	ldr	r0, [pc, #308]	@ (800359c <menu+0x22bc>)
 8003466:	f006 fd65 	bl	8009f34 <HAL_GPIO_ReadPin>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10d      	bne.n	800348c <menu+0x21ac>
 8003470:	4b4b      	ldr	r3, [pc, #300]	@ (80035a0 <menu+0x22c0>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800347e:	4b44      	ldr	r3, [pc, #272]	@ (8003590 <menu+0x22b0>)
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	4b48      	ldr	r3, [pc, #288]	@ (80035a4 <menu+0x22c4>)
 8003484:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <menu+0x22c8>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800348c:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <menu+0x22cc>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b1b      	cmp	r3, #27
 8003492:	d166      	bne.n	8003562 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003494:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <menu+0x22d0>)
 8003496:	2101      	movs	r1, #1
 8003498:	2001      	movs	r0, #1
 800349a:	f005 fa21 	bl	80088e0 <lcd_print>

		if(buzzer == 0) {
 800349e:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <menu+0x22d4>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80034a6:	4a44      	ldr	r2, [pc, #272]	@ (80035b8 <menu+0x22d8>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2002      	movs	r0, #2
 80034ac:	f005 fa18 	bl	80088e0 <lcd_print>
 80034b0:	e008      	b.n	80034c4 <menu+0x21e4>
		} else if(buzzer == 1) {
 80034b2:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <menu+0x22d4>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d104      	bne.n	80034c4 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80034ba:	4a40      	ldr	r2, [pc, #256]	@ (80035bc <menu+0x22dc>)
 80034bc:	2101      	movs	r1, #1
 80034be:	2002      	movs	r0, #2
 80034c0:	f005 fa0e 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c4:	2102      	movs	r1, #2
 80034c6:	4835      	ldr	r0, [pc, #212]	@ (800359c <menu+0x22bc>)
 80034c8:	f006 fd34 	bl	8009f34 <HAL_GPIO_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d115      	bne.n	80034fe <menu+0x221e>
 80034d2:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <menu+0x22c0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	f083 0301 	eor.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <menu+0x221e>
			buzzer = buzzer + 1;
 80034e0:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <menu+0x22d4>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b32      	ldr	r3, [pc, #200]	@ (80035b4 <menu+0x22d4>)
 80034ea:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80034ec:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <menu+0x22d4>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d902      	bls.n	80034fa <menu+0x221a>
				buzzer = 0;
 80034f4:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <menu+0x22d4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034fa:	f000 fc2f 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034fe:	2104      	movs	r1, #4
 8003500:	4826      	ldr	r0, [pc, #152]	@ (800359c <menu+0x22bc>)
 8003502:	f006 fd17 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d115      	bne.n	8003538 <menu+0x2258>
 800350c:	4b24      	ldr	r3, [pc, #144]	@ (80035a0 <menu+0x22c0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f083 0301 	eor.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00e      	beq.n	8003538 <menu+0x2258>
			buzzer = buzzer - 1;
 800351a:	4b26      	ldr	r3, [pc, #152]	@ (80035b4 <menu+0x22d4>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <menu+0x22d4>)
 8003524:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003526:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <menu+0x22d4>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <menu+0x2254>
		   		buzzer = 1;
 800352e:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <menu+0x22d4>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003534:	f000 fc12 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003538:	2108      	movs	r1, #8
 800353a:	4818      	ldr	r0, [pc, #96]	@ (800359c <menu+0x22bc>)
 800353c:	f006 fcfa 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d10d      	bne.n	8003562 <menu+0x2282>
 8003546:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <menu+0x22c0>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f083 0301 	eor.w	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <menu+0x2282>
			eepromData[25] = buzzer;
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <menu+0x22d4>)
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	4b12      	ldr	r3, [pc, #72]	@ (80035a4 <menu+0x22c4>)
 800355a:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <menu+0x22c8>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <menu+0x22cc>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b1c      	cmp	r3, #28
 8003568:	f040 8088 	bne.w	800367c <menu+0x239c>
		calismaSayModu = 0;
 800356c:	4b14      	ldr	r3, [pc, #80]	@ (80035c0 <menu+0x22e0>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8003572:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <menu+0x22e4>)
 8003574:	2101      	movs	r1, #1
 8003576:	2001      	movs	r0, #1
 8003578:	f005 f9b2 	bl	80088e0 <lcd_print>

		if(demoMode == 0) {
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <menu+0x22e8>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d123      	bne.n	80035cc <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003584:	4a0c      	ldr	r2, [pc, #48]	@ (80035b8 <menu+0x22d8>)
 8003586:	2101      	movs	r1, #1
 8003588:	2002      	movs	r0, #2
 800358a:	f005 f9a9 	bl	80088e0 <lcd_print>
 800358e:	e026      	b.n	80035de <menu+0x22fe>
 8003590:	200010e0 	.word	0x200010e0
 8003594:	200014d0 	.word	0x200014d0
 8003598:	20001060 	.word	0x20001060
 800359c:	40010800 	.word	0x40010800
 80035a0:	200010f7 	.word	0x200010f7
 80035a4:	20000ff0 	.word	0x20000ff0
 80035a8:	200010f4 	.word	0x200010f4
 80035ac:	200010c8 	.word	0x200010c8
 80035b0:	2000012c 	.word	0x2000012c
 80035b4:	200010e4 	.word	0x200010e4
 80035b8:	200013a4 	.word	0x200013a4
 80035bc:	200013b8 	.word	0x200013b8
 80035c0:	200010e8 	.word	0x200010e8
 80035c4:	20000140 	.word	0x20000140
 80035c8:	200010e6 	.word	0x200010e6
		} else if(demoMode == 1) {
 80035cc:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <menu+0x2474>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d104      	bne.n	80035de <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80035d4:	4a60      	ldr	r2, [pc, #384]	@ (8003758 <menu+0x2478>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	2002      	movs	r0, #2
 80035da:	f005 f981 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035de:	2102      	movs	r1, #2
 80035e0:	485e      	ldr	r0, [pc, #376]	@ (800375c <menu+0x247c>)
 80035e2:	f006 fca7 	bl	8009f34 <HAL_GPIO_ReadPin>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d115      	bne.n	8003618 <menu+0x2338>
 80035ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003760 <menu+0x2480>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <menu+0x2338>
			demoMode = demoMode + 1;
 80035fa:	4b56      	ldr	r3, [pc, #344]	@ (8003754 <menu+0x2474>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b54      	ldr	r3, [pc, #336]	@ (8003754 <menu+0x2474>)
 8003604:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003606:	4b53      	ldr	r3, [pc, #332]	@ (8003754 <menu+0x2474>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d902      	bls.n	8003614 <menu+0x2334>
				demoMode = 0;
 800360e:	4b51      	ldr	r3, [pc, #324]	@ (8003754 <menu+0x2474>)
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003614:	f000 fba2 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003618:	2104      	movs	r1, #4
 800361a:	4850      	ldr	r0, [pc, #320]	@ (800375c <menu+0x247c>)
 800361c:	f006 fc8a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003620:	4603      	mov	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d115      	bne.n	8003652 <menu+0x2372>
 8003626:	4b4e      	ldr	r3, [pc, #312]	@ (8003760 <menu+0x2480>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <menu+0x2372>
			demoMode = demoMode - 1;
 8003634:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <menu+0x2474>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b45      	ldr	r3, [pc, #276]	@ (8003754 <menu+0x2474>)
 800363e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003640:	4b44      	ldr	r3, [pc, #272]	@ (8003754 <menu+0x2474>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <menu+0x236e>
		   		demoMode = 1;
 8003648:	4b42      	ldr	r3, [pc, #264]	@ (8003754 <menu+0x2474>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800364e:	f000 fb85 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003652:	2108      	movs	r1, #8
 8003654:	4841      	ldr	r0, [pc, #260]	@ (800375c <menu+0x247c>)
 8003656:	f006 fc6d 	bl	8009f34 <HAL_GPIO_ReadPin>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10d      	bne.n	800367c <menu+0x239c>
 8003660:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <menu+0x2480>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <menu+0x239c>
			eepromData[26] = demoMode;
 800366e:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <menu+0x2474>)
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	4b3c      	ldr	r3, [pc, #240]	@ (8003764 <menu+0x2484>)
 8003674:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003676:	4b3c      	ldr	r3, [pc, #240]	@ (8003768 <menu+0x2488>)
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800367c:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <menu+0x248c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b1d      	cmp	r3, #29
 8003682:	f040 810c 	bne.w	800389e <menu+0x25be>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003686:	4b3a      	ldr	r3, [pc, #232]	@ (8003770 <menu+0x2490>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <menu+0x23d6>
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <menu+0x2494>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <menu+0x23d6>
 8003696:	4b38      	ldr	r3, [pc, #224]	@ (8003778 <menu+0x2498>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <menu+0x23d6>
 800369e:	4b37      	ldr	r3, [pc, #220]	@ (800377c <menu+0x249c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <menu+0x23d6>
 80036a6:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <menu+0x24a0>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <menu+0x23d6>
			calismaSayisiYar = 0;
 80036ae:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <menu+0x24a4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e002      	b.n	80036bc <menu+0x23dc>
		} else {
			calismaSayisiYar = 1;
 80036b6:	4b33      	ldr	r3, [pc, #204]	@ (8003784 <menu+0x24a4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80036bc:	4b32      	ldr	r3, [pc, #200]	@ (8003788 <menu+0x24a8>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d169      	bne.n	8003798 <menu+0x24b8>
			lcd_print(1, 1, calismaSayisiText);
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <menu+0x24ac>)
 80036c6:	2101      	movs	r1, #1
 80036c8:	2001      	movs	r0, #1
 80036ca:	f005 f909 	bl	80088e0 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 80036ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003780 <menu+0x24a0>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	220a      	movs	r2, #10
 80036d4:	492e      	ldr	r1, [pc, #184]	@ (8003790 <menu+0x24b0>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f009 fc58 	bl	800cf8c <itoa>
			lcd_print(2, 12, snum);
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <menu+0x24b0>)
 80036de:	210c      	movs	r1, #12
 80036e0:	2002      	movs	r0, #2
 80036e2:	f005 f8fd 	bl	80088e0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80036e6:	4b25      	ldr	r3, [pc, #148]	@ (800377c <menu+0x249c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	220a      	movs	r2, #10
 80036ec:	4928      	ldr	r1, [pc, #160]	@ (8003790 <menu+0x24b0>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 fc4c 	bl	800cf8c <itoa>
			lcd_print(2, 13, snum);
 80036f4:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <menu+0x24b0>)
 80036f6:	210d      	movs	r1, #13
 80036f8:	2002      	movs	r0, #2
 80036fa:	f005 f8f1 	bl	80088e0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <menu+0x2498>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	220a      	movs	r2, #10
 8003704:	4922      	ldr	r1, [pc, #136]	@ (8003790 <menu+0x24b0>)
 8003706:	4618      	mov	r0, r3
 8003708:	f009 fc40 	bl	800cf8c <itoa>
			lcd_print(2, 14, snum);
 800370c:	4a20      	ldr	r2, [pc, #128]	@ (8003790 <menu+0x24b0>)
 800370e:	210e      	movs	r1, #14
 8003710:	2002      	movs	r0, #2
 8003712:	f005 f8e5 	bl	80088e0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <menu+0x2494>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	220a      	movs	r2, #10
 800371c:	491c      	ldr	r1, [pc, #112]	@ (8003790 <menu+0x24b0>)
 800371e:	4618      	mov	r0, r3
 8003720:	f009 fc34 	bl	800cf8c <itoa>
			lcd_print(2, 15, snum);
 8003724:	4a1a      	ldr	r2, [pc, #104]	@ (8003790 <menu+0x24b0>)
 8003726:	210f      	movs	r1, #15
 8003728:	2002      	movs	r0, #2
 800372a:	f005 f8d9 	bl	80088e0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <menu+0x2490>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	220a      	movs	r2, #10
 8003734:	4916      	ldr	r1, [pc, #88]	@ (8003790 <menu+0x24b0>)
 8003736:	4618      	mov	r0, r3
 8003738:	f009 fc28 	bl	800cf8c <itoa>
			lcd_print(2, 16, snum);
 800373c:	4a14      	ldr	r2, [pc, #80]	@ (8003790 <menu+0x24b0>)
 800373e:	2110      	movs	r1, #16
 8003740:	2002      	movs	r0, #2
 8003742:	f005 f8cd 	bl	80088e0 <lcd_print>

			lcd_print(2, 1, "           ");
 8003746:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <menu+0x24b4>)
 8003748:	2101      	movs	r1, #1
 800374a:	2002      	movs	r0, #2
 800374c:	f005 f8c8 	bl	80088e0 <lcd_print>
 8003750:	e030      	b.n	80037b4 <menu+0x24d4>
 8003752:	bf00      	nop
 8003754:	200010e6 	.word	0x200010e6
 8003758:	200013b8 	.word	0x200013b8
 800375c:	40010800 	.word	0x40010800
 8003760:	200010f7 	.word	0x200010f7
 8003764:	20000ff0 	.word	0x20000ff0
 8003768:	200010f4 	.word	0x200010f4
 800376c:	200010c8 	.word	0x200010c8
 8003770:	200010c5 	.word	0x200010c5
 8003774:	200010c6 	.word	0x200010c6
 8003778:	20000000 	.word	0x20000000
 800377c:	20000001 	.word	0x20000001
 8003780:	200010c7 	.word	0x200010c7
 8003784:	20001109 	.word	0x20001109
 8003788:	200010e8 	.word	0x200010e8
 800378c:	20001714 	.word	0x20001714
 8003790:	20001060 	.word	0x20001060
 8003794:	0800dc84 	.word	0x0800dc84
		} else if(calismaSayModu == 1) {
 8003798:	4b82      	ldr	r3, [pc, #520]	@ (80039a4 <menu+0x26c4>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d109      	bne.n	80037b4 <menu+0x24d4>
			lcd_print(1, 1, calismaSayisiText);
 80037a0:	4a81      	ldr	r2, [pc, #516]	@ (80039a8 <menu+0x26c8>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2001      	movs	r0, #1
 80037a6:	f005 f89b 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80037aa:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <menu+0x26cc>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	2002      	movs	r0, #2
 80037b0:	f005 f896 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037b4:	2102      	movs	r1, #2
 80037b6:	487e      	ldr	r0, [pc, #504]	@ (80039b0 <menu+0x26d0>)
 80037b8:	f006 fbbc 	bl	8009f34 <HAL_GPIO_ReadPin>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d119      	bne.n	80037f6 <menu+0x2516>
 80037c2:	4b7c      	ldr	r3, [pc, #496]	@ (80039b4 <menu+0x26d4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <menu+0x2516>
 80037d0:	4b79      	ldr	r3, [pc, #484]	@ (80039b8 <menu+0x26d8>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <menu+0x2516>
			calismaSayModu = calismaSayModu + 1;
 80037d8:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <menu+0x26c4>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <menu+0x26c4>)
 80037e2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80037e4:	4b6f      	ldr	r3, [pc, #444]	@ (80039a4 <menu+0x26c4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d902      	bls.n	80037f2 <menu+0x2512>
				calismaSayModu = 0;
 80037ec:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <menu+0x26c4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f2:	f000 fab3 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037f6:	2104      	movs	r1, #4
 80037f8:	486d      	ldr	r0, [pc, #436]	@ (80039b0 <menu+0x26d0>)
 80037fa:	f006 fb9b 	bl	8009f34 <HAL_GPIO_ReadPin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d119      	bne.n	8003838 <menu+0x2558>
 8003804:	4b6b      	ldr	r3, [pc, #428]	@ (80039b4 <menu+0x26d4>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <menu+0x2558>
 8003812:	4b69      	ldr	r3, [pc, #420]	@ (80039b8 <menu+0x26d8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00e      	beq.n	8003838 <menu+0x2558>
			calismaSayModu = calismaSayModu - 1;
 800381a:	4b62      	ldr	r3, [pc, #392]	@ (80039a4 <menu+0x26c4>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <menu+0x26c4>)
 8003824:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003826:	4b5f      	ldr	r3, [pc, #380]	@ (80039a4 <menu+0x26c4>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <menu+0x2554>
		   		calismaSayModu = 1;
 800382e:	4b5d      	ldr	r3, [pc, #372]	@ (80039a4 <menu+0x26c4>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003834:	f000 fa92 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003838:	2108      	movs	r1, #8
 800383a:	485d      	ldr	r0, [pc, #372]	@ (80039b0 <menu+0x26d0>)
 800383c:	f006 fb7a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d12b      	bne.n	800389e <menu+0x25be>
 8003846:	4b5b      	ldr	r3, [pc, #364]	@ (80039b4 <menu+0x26d4>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	f083 0301 	eor.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d024      	beq.n	800389e <menu+0x25be>
			eepromData[32] = 0;
 8003854:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <menu+0x26dc>)
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800385c:	4b57      	ldr	r3, [pc, #348]	@ (80039bc <menu+0x26dc>)
 800385e:	2200      	movs	r2, #0
 8003860:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003862:	4b56      	ldr	r3, [pc, #344]	@ (80039bc <menu+0x26dc>)
 8003864:	2200      	movs	r2, #0
 8003866:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003868:	4b54      	ldr	r3, [pc, #336]	@ (80039bc <menu+0x26dc>)
 800386a:	2200      	movs	r2, #0
 800386c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800386e:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <menu+0x26dc>)
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003874:	4b52      	ldr	r3, [pc, #328]	@ (80039c0 <menu+0x26e0>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800387a:	4b52      	ldr	r3, [pc, #328]	@ (80039c4 <menu+0x26e4>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003880:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <menu+0x26e8>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003886:	4b51      	ldr	r3, [pc, #324]	@ (80039cc <menu+0x26ec>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800388c:	4b50      	ldr	r3, [pc, #320]	@ (80039d0 <menu+0x26f0>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <menu+0x26c4>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003898:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <menu+0x26f4>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800389e:	4b4e      	ldr	r3, [pc, #312]	@ (80039d8 <menu+0x26f8>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b1e      	cmp	r3, #30
 80038a4:	d166      	bne.n	8003974 <menu+0x2694>
		calismaSayModu = 0;
 80038a6:	4b3f      	ldr	r3, [pc, #252]	@ (80039a4 <menu+0x26c4>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80038ac:	4a4b      	ldr	r2, [pc, #300]	@ (80039dc <menu+0x26fc>)
 80038ae:	2101      	movs	r1, #1
 80038b0:	2001      	movs	r0, #1
 80038b2:	f005 f815 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80038b6:	4a4a      	ldr	r2, [pc, #296]	@ (80039e0 <menu+0x2700>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	2002      	movs	r0, #2
 80038bc:	f005 f810 	bl	80088e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c0:	2102      	movs	r1, #2
 80038c2:	483b      	ldr	r0, [pc, #236]	@ (80039b0 <menu+0x26d0>)
 80038c4:	f006 fb36 	bl	8009f34 <HAL_GPIO_ReadPin>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d11a      	bne.n	8003904 <menu+0x2624>
 80038ce:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <menu+0x26d4>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f083 0301 	eor.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <menu+0x2624>
			dilSecim = dilSecim + 1;
 80038dc:	4b41      	ldr	r3, [pc, #260]	@ (80039e4 <menu+0x2704>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b3f      	ldr	r3, [pc, #252]	@ (80039e4 <menu+0x2704>)
 80038e6:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80038e8:	4b3e      	ldr	r3, [pc, #248]	@ (80039e4 <menu+0x2704>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d902      	bls.n	80038f6 <menu+0x2616>
				dilSecim = 0;
 80038f0:	4b3c      	ldr	r3, [pc, #240]	@ (80039e4 <menu+0x2704>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 80038f6:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <menu+0x2704>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fb1e 	bl	8005f3c <loadMenuTexts>

			bekle();
 8003900:	f000 fa2c 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2104      	movs	r1, #4
 8003906:	482a      	ldr	r0, [pc, #168]	@ (80039b0 <menu+0x26d0>)
 8003908:	f006 fb14 	bl	8009f34 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d11a      	bne.n	8003948 <menu+0x2668>
 8003912:	4b28      	ldr	r3, [pc, #160]	@ (80039b4 <menu+0x26d4>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <menu+0x2668>
			dilSecim = dilSecim - 1;
 8003920:	4b30      	ldr	r3, [pc, #192]	@ (80039e4 <menu+0x2704>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	3b01      	subs	r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b2e      	ldr	r3, [pc, #184]	@ (80039e4 <menu+0x2704>)
 800392a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800392c:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <menu+0x2704>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <menu+0x265a>
		   		dilSecim = 1;
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <menu+0x2704>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 800393a:	4b2a      	ldr	r3, [pc, #168]	@ (80039e4 <menu+0x2704>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f002 fafc 	bl	8005f3c <loadMenuTexts>

			bekle();
 8003944:	f000 fa0a 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003948:	2108      	movs	r1, #8
 800394a:	4819      	ldr	r0, [pc, #100]	@ (80039b0 <menu+0x26d0>)
 800394c:	f006 faf2 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10e      	bne.n	8003974 <menu+0x2694>
 8003956:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <menu+0x26d4>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <menu+0x2694>
			eepromData[33] = dilSecim;
 8003964:	4b1f      	ldr	r3, [pc, #124]	@ (80039e4 <menu+0x2704>)
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <menu+0x26dc>)
 800396a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 800396e:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <menu+0x26f4>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <menu+0x26f8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b1f      	cmp	r3, #31
 800397a:	f040 8094 	bne.w	8003aa6 <menu+0x27c6>
		calismaSayModu = 0;
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <menu+0x26c4>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003984:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <menu+0x2708>)
 8003986:	2101      	movs	r1, #1
 8003988:	2001      	movs	r0, #1
 800398a:	f004 ffa9 	bl	80088e0 <lcd_print>

		if(iotMode == 0) {
 800398e:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <menu+0x270c>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12e      	bne.n	80039f4 <menu+0x2714>
			lcd_print(2, 1, pasifText);
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <menu+0x2710>)
 8003998:	2101      	movs	r1, #1
 800399a:	2002      	movs	r0, #2
 800399c:	f004 ffa0 	bl	80088e0 <lcd_print>
 80039a0:	e031      	b.n	8003a06 <menu+0x2726>
 80039a2:	bf00      	nop
 80039a4:	200010e8 	.word	0x200010e8
 80039a8:	20001714 	.word	0x20001714
 80039ac:	20001728 	.word	0x20001728
 80039b0:	40010800 	.word	0x40010800
 80039b4:	200010f7 	.word	0x200010f7
 80039b8:	20001109 	.word	0x20001109
 80039bc:	20000ff0 	.word	0x20000ff0
 80039c0:	200010c7 	.word	0x200010c7
 80039c4:	20000001 	.word	0x20000001
 80039c8:	20000000 	.word	0x20000000
 80039cc:	200010c6 	.word	0x200010c6
 80039d0:	200010c5 	.word	0x200010c5
 80039d4:	200010f4 	.word	0x200010f4
 80039d8:	200010c8 	.word	0x200010c8
 80039dc:	2000173c 	.word	0x2000173c
 80039e0:	20001750 	.word	0x20001750
 80039e4:	200010e9 	.word	0x200010e9
 80039e8:	20000154 	.word	0x20000154
 80039ec:	200010e7 	.word	0x200010e7
 80039f0:	200013a4 	.word	0x200013a4
		} else if(iotMode == 1) {
 80039f4:	4b97      	ldr	r3, [pc, #604]	@ (8003c54 <menu+0x2974>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d104      	bne.n	8003a06 <menu+0x2726>
			lcd_print(2, 1, aktifText);
 80039fc:	4a96      	ldr	r2, [pc, #600]	@ (8003c58 <menu+0x2978>)
 80039fe:	2101      	movs	r1, #1
 8003a00:	2002      	movs	r0, #2
 8003a02:	f004 ff6d 	bl	80088e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a06:	2102      	movs	r1, #2
 8003a08:	4894      	ldr	r0, [pc, #592]	@ (8003c5c <menu+0x297c>)
 8003a0a:	f006 fa93 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d115      	bne.n	8003a40 <menu+0x2760>
 8003a14:	4b92      	ldr	r3, [pc, #584]	@ (8003c60 <menu+0x2980>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <menu+0x2760>
			iotMode = iotMode + 1;
 8003a22:	4b8c      	ldr	r3, [pc, #560]	@ (8003c54 <menu+0x2974>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c54 <menu+0x2974>)
 8003a2c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003a2e:	4b89      	ldr	r3, [pc, #548]	@ (8003c54 <menu+0x2974>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d902      	bls.n	8003a3c <menu+0x275c>
				iotMode = 0;
 8003a36:	4b87      	ldr	r3, [pc, #540]	@ (8003c54 <menu+0x2974>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a3c:	f000 f98e 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a40:	2104      	movs	r1, #4
 8003a42:	4886      	ldr	r0, [pc, #536]	@ (8003c5c <menu+0x297c>)
 8003a44:	f006 fa76 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d115      	bne.n	8003a7a <menu+0x279a>
 8003a4e:	4b84      	ldr	r3, [pc, #528]	@ (8003c60 <menu+0x2980>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <menu+0x279a>
			iotMode = iotMode - 1;
 8003a5c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <menu+0x2974>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <menu+0x2974>)
 8003a66:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a68:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <menu+0x2974>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <menu+0x2796>
		   		iotMode = 1;
 8003a70:	4b78      	ldr	r3, [pc, #480]	@ (8003c54 <menu+0x2974>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a76:	f000 f971 	bl	8003d5c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a7a:	2108      	movs	r1, #8
 8003a7c:	4877      	ldr	r0, [pc, #476]	@ (8003c5c <menu+0x297c>)
 8003a7e:	f006 fa59 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10e      	bne.n	8003aa6 <menu+0x27c6>
 8003a88:	4b75      	ldr	r3, [pc, #468]	@ (8003c60 <menu+0x2980>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f083 0301 	eor.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <menu+0x27c6>
			eepromData[48] = iotMode;
 8003a96:	4b6f      	ldr	r3, [pc, #444]	@ (8003c54 <menu+0x2974>)
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	4b72      	ldr	r3, [pc, #456]	@ (8003c64 <menu+0x2984>)
 8003a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003aa0:	4b71      	ldr	r3, [pc, #452]	@ (8003c68 <menu+0x2988>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003aa6:	4b71      	ldr	r3, [pc, #452]	@ (8003c6c <menu+0x298c>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d122      	bne.n	8003af4 <menu+0x2814>
		calismaSayModu = 0;
 8003aae:	4b70      	ldr	r3, [pc, #448]	@ (8003c70 <menu+0x2990>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f7fc fe43 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003aba:	2032      	movs	r0, #50	@ 0x32
 8003abc:	f005 fc6a 	bl	8009394 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7fd fb5f 	bl	8001184 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4864      	ldr	r0, [pc, #400]	@ (8003c5c <menu+0x297c>)
 8003aca:	f006 fa33 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10f      	bne.n	8003af4 <menu+0x2814>
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4861      	ldr	r0, [pc, #388]	@ (8003c5c <menu+0x297c>)
 8003ad8:	f006 fa2c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <menu+0x2814>
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <menu+0x2980>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <menu+0x2814>
			takeMachineIDWithConfirmation();
 8003af0:	f003 feaa 	bl	8007848 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003af4:	4b5d      	ldr	r3, [pc, #372]	@ (8003c6c <menu+0x298c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b21      	cmp	r3, #33	@ 0x21
 8003afa:	d132      	bne.n	8003b62 <menu+0x2882>
		calismaSayModu = 0;
 8003afc:	4b5c      	ldr	r3, [pc, #368]	@ (8003c70 <menu+0x2990>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003b02:	2002      	movs	r0, #2
 8003b04:	f7fc fe1c 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b08:	2032      	movs	r0, #50	@ 0x32
 8003b0a:	f005 fc43 	bl	8009394 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003b0e:	2002      	movs	r0, #2
 8003b10:	f7fd fb38 	bl	8001184 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b14:	2102      	movs	r1, #2
 8003b16:	4851      	ldr	r0, [pc, #324]	@ (8003c5c <menu+0x297c>)
 8003b18:	f006 fa0c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <menu+0x285e>
 8003b22:	2104      	movs	r1, #4
 8003b24:	484d      	ldr	r0, [pc, #308]	@ (8003c5c <menu+0x297c>)
 8003b26:	f006 fa05 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <menu+0x285e>
 8003b30:	4b4b      	ldr	r3, [pc, #300]	@ (8003c60 <menu+0x2980>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <menu+0x2866>
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c74 <menu+0x2994>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10d      	bne.n	8003b62 <menu+0x2882>
			editMode = 0;
 8003b46:	4b4b      	ldr	r3, [pc, #300]	@ (8003c74 <menu+0x2994>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 8003b4c:	f004 f89a 	bl	8007c84 <takeWifiSSID>

			convertArrays(2);
 8003b50:	2002      	movs	r0, #2
 8003b52:	f7fc fdf5 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b56:	2032      	movs	r0, #50	@ 0x32
 8003b58:	f005 fc1c 	bl	8009394 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f7fd fb11 	bl	8001184 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b62:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <menu+0x298c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b22      	cmp	r3, #34	@ 0x22
 8003b68:	d132      	bne.n	8003bd0 <menu+0x28f0>
		calismaSayModu = 0;
 8003b6a:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <menu+0x2990>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b70:	2003      	movs	r0, #3
 8003b72:	f7fc fde5 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b76:	2032      	movs	r0, #50	@ 0x32
 8003b78:	f005 fc0c 	bl	8009394 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b7c:	2003      	movs	r0, #3
 8003b7e:	f7fd fb01 	bl	8001184 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b82:	2102      	movs	r1, #2
 8003b84:	4835      	ldr	r0, [pc, #212]	@ (8003c5c <menu+0x297c>)
 8003b86:	f006 f9d5 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10d      	bne.n	8003bac <menu+0x28cc>
 8003b90:	2104      	movs	r1, #4
 8003b92:	4832      	ldr	r0, [pc, #200]	@ (8003c5c <menu+0x297c>)
 8003b94:	f006 f9ce 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d106      	bne.n	8003bac <menu+0x28cc>
 8003b9e:	4b30      	ldr	r3, [pc, #192]	@ (8003c60 <menu+0x2980>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f083 0301 	eor.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <menu+0x28d4>
 8003bac:	4b31      	ldr	r3, [pc, #196]	@ (8003c74 <menu+0x2994>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10d      	bne.n	8003bd0 <menu+0x28f0>
			editMode = 0;
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <menu+0x2994>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8003bba:	f004 f9cb 	bl	8007f54 <takeWifiPass>

			convertArrays(3);
 8003bbe:	2003      	movs	r0, #3
 8003bc0:	f7fc fdbe 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003bc4:	2032      	movs	r0, #50	@ 0x32
 8003bc6:	f005 fbe5 	bl	8009394 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003bca:	2003      	movs	r0, #3
 8003bcc:	f7fd fada 	bl	8001184 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <menu+0x298c>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b23      	cmp	r3, #35	@ 0x23
 8003bd6:	d13a      	bne.n	8003c4e <menu+0x296e>
		lcd_print(1, 1, menudenCikisText);
 8003bd8:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <menu+0x2998>)
 8003bda:	2101      	movs	r1, #1
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f004 fe7f 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003be2:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <menu+0x299c>)
 8003be4:	2101      	movs	r1, #1
 8003be6:	2002      	movs	r0, #2
 8003be8:	f004 fe7a 	bl	80088e0 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003bec:	2108      	movs	r1, #8
 8003bee:	481b      	ldr	r0, [pc, #108]	@ (8003c5c <menu+0x297c>)
 8003bf0:	f006 f9a0 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d129      	bne.n	8003c4e <menu+0x296e>
			menuGiris = 0;
 8003bfa:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <menu+0x29a0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003c00:	bf00      	nop
 8003c02:	4820      	ldr	r0, [pc, #128]	@ (8003c84 <menu+0x29a4>)
 8003c04:	f006 ffbf 	bl	800ab86 <HAL_I2C_GetError>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d0f9      	beq.n	8003c02 <menu+0x2922>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003c0e:	bf00      	nop
 8003c10:	481c      	ldr	r0, [pc, #112]	@ (8003c84 <menu+0x29a4>)
 8003c12:	f006 ffab 	bl	800ab6c <HAL_I2C_GetState>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d1f9      	bne.n	8003c10 <menu+0x2930>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003c1c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c20:	9302      	str	r3, [sp, #8]
 8003c22:	236e      	movs	r3, #110	@ 0x6e
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <menu+0x2984>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	236e      	movs	r3, #110	@ 0x6e
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	21a0      	movs	r1, #160	@ 0xa0
 8003c30:	4814      	ldr	r0, [pc, #80]	@ (8003c84 <menu+0x29a4>)
 8003c32:	f006 fc39 	bl	800a4a8 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003c36:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003c3a:	f005 fbab 	bl	8009394 <HAL_Delay>

			lcd_clear();
 8003c3e:	f004 fe7b 	bl	8008938 <lcd_clear>
			HAL_Delay(500);
 8003c42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c46:	f005 fba5 	bl	8009394 <HAL_Delay>
			NVIC_SystemReset();
 8003c4a:	f7fd fb33 	bl	80012b4 <__NVIC_SystemReset>
		}
	}
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200010e7 	.word	0x200010e7
 8003c58:	200013b8 	.word	0x200013b8
 8003c5c:	40010800 	.word	0x40010800
 8003c60:	200010f7 	.word	0x200010f7
 8003c64:	20000ff0 	.word	0x20000ff0
 8003c68:	200010f4 	.word	0x200010f4
 8003c6c:	200010c8 	.word	0x200010c8
 8003c70:	200010e8 	.word	0x200010e8
 8003c74:	200010c0 	.word	0x200010c0
 8003c78:	20001764 	.word	0x20001764
 8003c7c:	20001778 	.word	0x20001778
 8003c80:	200010e5 	.word	0x200010e5
 8003c84:	20001944 	.word	0x20001944

08003c88 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003c98:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <lcdUpdate+0x9c>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f004 fe1f 	bl	80088e0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003ca2:	e03b      	b.n	8003d1c <lcdUpdate+0x94>
	} else if(y==2) {
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d105      	bne.n	8003cb6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003caa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d24 <lcdUpdate+0x9c>)
 8003cac:	2102      	movs	r1, #2
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f004 fe16 	bl	80088e0 <lcd_print>
}
 8003cb4:	e032      	b.n	8003d1c <lcdUpdate+0x94>
	} else if(y==3) {
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d105      	bne.n	8003cc8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003cbc:	4a19      	ldr	r2, [pc, #100]	@ (8003d24 <lcdUpdate+0x9c>)
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f004 fe0d 	bl	80088e0 <lcd_print>
}
 8003cc6:	e029      	b.n	8003d1c <lcdUpdate+0x94>
	} else if(y==4) {
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d105      	bne.n	8003cda <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003cce:	4a15      	ldr	r2, [pc, #84]	@ (8003d24 <lcdUpdate+0x9c>)
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f004 fe04 	bl	80088e0 <lcd_print>
}
 8003cd8:	e020      	b.n	8003d1c <lcdUpdate+0x94>
	} else if(y==5) {
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d105      	bne.n	8003cec <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003ce0:	4a10      	ldr	r2, [pc, #64]	@ (8003d24 <lcdUpdate+0x9c>)
 8003ce2:	2105      	movs	r1, #5
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f004 fdfb 	bl	80088e0 <lcd_print>
}
 8003cea:	e017      	b.n	8003d1c <lcdUpdate+0x94>
	} else if(y==6) {
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d105      	bne.n	8003cfe <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d24 <lcdUpdate+0x9c>)
 8003cf4:	2106      	movs	r1, #6
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f004 fdf2 	bl	80088e0 <lcd_print>
}
 8003cfc:	e00e      	b.n	8003d1c <lcdUpdate+0x94>
	} else if (y==7) {
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d10b      	bne.n	8003d1c <lcdUpdate+0x94>
		lcd_clear();
 8003d04:	f004 fe18 	bl	8008938 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003d08:	4a07      	ldr	r2, [pc, #28]	@ (8003d28 <lcdUpdate+0xa0>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f004 fde7 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003d12:	4a06      	ldr	r2, [pc, #24]	@ (8003d2c <lcdUpdate+0xa4>)
 8003d14:	2101      	movs	r1, #1
 8003d16:	2002      	movs	r0, #2
 8003d18:	f004 fde2 	bl	80088e0 <lcd_print>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	0800dc90 	.word	0x0800dc90
 8003d28:	200000c8 	.word	0x200000c8
 8003d2c:	200000dc 	.word	0x200000dc

08003d30 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003d34:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <checkLCDBacklight+0x24>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <checkLCDBacklight+0x28>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003d40:	d903      	bls.n	8003d4a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003d42:	2000      	movs	r0, #0
 8003d44:	f004 fe18 	bl	8008978 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003d48:	e002      	b.n	8003d50 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f004 fe14 	bl	8008978 <lcd_backlight>
}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200010a0 	.word	0x200010a0
 8003d58:	200010bc 	.word	0x200010bc

08003d5c <bekle>:

void bekle() {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	timer1=millis;
 8003d60:	4b47      	ldr	r3, [pc, #284]	@ (8003e80 <bekle+0x124>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a47      	ldr	r2, [pc, #284]	@ (8003e84 <bekle+0x128>)
 8003d66:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d68:	e002      	b.n	8003d70 <bekle+0x14>
    	butonKontrol = 1;
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <bekle+0x12c>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d70:	2101      	movs	r1, #1
 8003d72:	4846      	ldr	r0, [pc, #280]	@ (8003e8c <bekle+0x130>)
 8003d74:	f006 f8de 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d109      	bne.n	8003d92 <bekle+0x36>
 8003d7e:	4b40      	ldr	r3, [pc, #256]	@ (8003e80 <bekle+0x124>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b40      	ldr	r3, [pc, #256]	@ (8003e84 <bekle+0x128>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d0ef      	beq.n	8003d6a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d8a:	e002      	b.n	8003d92 <bekle+0x36>
    	butonKontrol = 1;
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e88 <bekle+0x12c>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d92:	2108      	movs	r1, #8
 8003d94:	483e      	ldr	r0, [pc, #248]	@ (8003e90 <bekle+0x134>)
 8003d96:	f006 f8cd 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d109      	bne.n	8003db4 <bekle+0x58>
 8003da0:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <bekle+0x124>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <bekle+0x128>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0ef      	beq.n	8003d8c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dac:	e002      	b.n	8003db4 <bekle+0x58>
    	butonKontrol = 1;
 8003dae:	4b36      	ldr	r3, [pc, #216]	@ (8003e88 <bekle+0x12c>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003db4:	2102      	movs	r1, #2
 8003db6:	4835      	ldr	r0, [pc, #212]	@ (8003e8c <bekle+0x130>)
 8003db8:	f006 f8bc 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d109      	bne.n	8003dd6 <bekle+0x7a>
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <bekle+0x124>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <bekle+0x128>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d0ef      	beq.n	8003dae <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dce:	e002      	b.n	8003dd6 <bekle+0x7a>
    	butonKontrol = 1;
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <bekle+0x12c>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	482c      	ldr	r0, [pc, #176]	@ (8003e8c <bekle+0x130>)
 8003dda:	f006 f8ab 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d109      	bne.n	8003df8 <bekle+0x9c>
 8003de4:	4b26      	ldr	r3, [pc, #152]	@ (8003e80 <bekle+0x124>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <bekle+0x128>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0ef      	beq.n	8003dd0 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df0:	e002      	b.n	8003df8 <bekle+0x9c>
    	butonKontrol = 1;
 8003df2:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <bekle+0x12c>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df8:	2108      	movs	r1, #8
 8003dfa:	4824      	ldr	r0, [pc, #144]	@ (8003e8c <bekle+0x130>)
 8003dfc:	f006 f89a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d109      	bne.n	8003e1a <bekle+0xbe>
 8003e06:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <bekle+0x124>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <bekle+0x128>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d0ef      	beq.n	8003df2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e12:	e002      	b.n	8003e1a <bekle+0xbe>
    	butonKontrol = 1;
 8003e14:	4b1c      	ldr	r3, [pc, #112]	@ (8003e88 <bekle+0x12c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	481c      	ldr	r0, [pc, #112]	@ (8003e90 <bekle+0x134>)
 8003e1e:	f006 f889 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <bekle+0xe0>
 8003e28:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <bekle+0x124>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <bekle+0x128>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0ef      	beq.n	8003e14 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e34:	e002      	b.n	8003e3c <bekle+0xe0>
    	butonKontrol = 1;
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <bekle+0x12c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e40:	4813      	ldr	r0, [pc, #76]	@ (8003e90 <bekle+0x134>)
 8003e42:	f006 f877 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <bekle+0x104>
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <bekle+0x124>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <bekle+0x128>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d0ee      	beq.n	8003e36 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e58:	e002      	b.n	8003e60 <bekle+0x104>
    	butonKontrol = 1;
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <bekle+0x12c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e64:	480a      	ldr	r0, [pc, #40]	@ (8003e90 <bekle+0x134>)
 8003e66:	f006 f865 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <bekle+0x120>
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <bekle+0x124>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <bekle+0x128>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0ee      	beq.n	8003e5a <bekle+0xfe>
    }

}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200010a0 	.word	0x200010a0
 8003e84:	200010a8 	.word	0x200010a8
 8003e88:	200010f7 	.word	0x200010f7
 8003e8c:	40010800 	.word	0x40010800
 8003e90:	40011000 	.word	0x40011000

08003e94 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4815      	ldr	r0, [pc, #84]	@ (8003ef0 <buttonCheck+0x5c>)
 8003e9c:	f006 f84a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d01b      	beq.n	8003ede <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	4812      	ldr	r0, [pc, #72]	@ (8003ef4 <buttonCheck+0x60>)
 8003eaa:	f006 f843 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d014      	beq.n	8003ede <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	480e      	ldr	r0, [pc, #56]	@ (8003ef0 <buttonCheck+0x5c>)
 8003eb8:	f006 f83c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d00d      	beq.n	8003ede <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	480a      	ldr	r0, [pc, #40]	@ (8003ef0 <buttonCheck+0x5c>)
 8003ec6:	f006 f835 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d006      	beq.n	8003ede <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	4807      	ldr	r0, [pc, #28]	@ (8003ef0 <buttonCheck+0x5c>)
 8003ed4:	f006 f82e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d104      	bne.n	8003ee8 <buttonCheck+0x54>
		backLightTimer = 0;
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <buttonCheck+0x64>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
		return 1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <buttonCheck+0x56>
	}
	return 0;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40010800 	.word	0x40010800
 8003ef4:	40011000 	.word	0x40011000
 8003ef8:	200010bc 	.word	0x200010bc

08003efc <checkBasincSalteri>:

void checkBasincSalteri() {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <checkBasincSalteri+0x54>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <checkBasincSalteri+0x12>
		basincVar=1;
 8003f08:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <checkBasincSalteri+0x58>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003f0e:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <checkBasincSalteri+0x54>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d119      	bne.n	8003f4a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f1a:	480f      	ldr	r0, [pc, #60]	@ (8003f58 <checkBasincSalteri+0x5c>)
 8003f1c:	f006 f80a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <checkBasincSalteri+0x60>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <checkBasincSalteri+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d90a      	bls.n	8003f4a <checkBasincSalteri+0x4e>
				basincVar=1;
 8003f34:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <checkBasincSalteri+0x58>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003f3a:	e006      	b.n	8003f4a <checkBasincSalteri+0x4e>
			timer5=millis;
 8003f3c:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <checkBasincSalteri+0x60>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <checkBasincSalteri+0x64>)
 8003f42:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <checkBasincSalteri+0x58>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200010cf 	.word	0x200010cf
 8003f54:	200010cb 	.word	0x200010cb
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	200010a0 	.word	0x200010a0
 8003f60:	200010b8 	.word	0x200010b8

08003f64 <checkBasGonder>:

void checkBasGonder() {
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f68:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <checkBasGonder+0x74>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10b      	bne.n	8003f88 <checkBasGonder+0x24>
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <checkBasGonder+0x78>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <checkBasGonder+0x24>
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <checkBasGonder+0x7c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003f80:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <checkBasGonder+0x80>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e009      	b.n	8003f9c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003f88:	4b14      	ldr	r3, [pc, #80]	@ (8003fdc <checkBasGonder+0x78>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <checkBasGonder+0x80>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <checkBasGonder+0x74>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10b      	bne.n	8003fbc <checkBasGonder+0x58>
 8003fa4:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <checkBasGonder+0x84>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <checkBasGonder+0x58>
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <checkBasGonder+0x7c>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <checkBasGonder+0x88>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003fba:	e009      	b.n	8003fd0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <checkBasGonder+0x84>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <checkBasGonder+0x88>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	200010c9 	.word	0x200010c9
 8003fdc:	200010fd 	.word	0x200010fd
 8003fe0:	200010d7 	.word	0x200010d7
 8003fe4:	20001104 	.word	0x20001104
 8003fe8:	20001100 	.word	0x20001100
 8003fec:	20001105 	.word	0x20001105

08003ff0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003ff4:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <checkKapiSecimleri+0x98>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	@ (800408c <checkKapiSecimleri+0x9c>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004002:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <checkKapiSecimleri+0x98>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10e      	bne.n	8004028 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800400a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800400e:	4820      	ldr	r0, [pc, #128]	@ (8004090 <checkKapiSecimleri+0xa0>)
 8004010:	f005 ff90 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <checkKapiSecimleri+0x9c>)
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e002      	b.n	8004028 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004022:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <checkKapiSecimleri+0x9c>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <checkKapiSecimleri+0x98>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d10e      	bne.n	800404e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004030:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004034:	4816      	ldr	r0, [pc, #88]	@ (8004090 <checkKapiSecimleri+0xa0>)
 8004036:	f005 ff7d 	bl	8009f34 <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004040:	4b12      	ldr	r3, [pc, #72]	@ (800408c <checkKapiSecimleri+0x9c>)
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e002      	b.n	800404e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004048:	4b10      	ldr	r3, [pc, #64]	@ (800408c <checkKapiSecimleri+0x9c>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800404e:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <checkKapiSecimleri+0x98>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d116      	bne.n	8004084 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800405a:	480d      	ldr	r0, [pc, #52]	@ (8004090 <checkKapiSecimleri+0xa0>)
 800405c:	f005 ff6a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <checkKapiSecimleri+0x8e>
 8004066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800406a:	4809      	ldr	r0, [pc, #36]	@ (8004090 <checkKapiSecimleri+0xa0>)
 800406c:	f005 ff62 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <checkKapiSecimleri+0x9c>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800407c:	e002      	b.n	8004084 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800407e:	4b03      	ldr	r3, [pc, #12]	@ (800408c <checkKapiSecimleri+0x9c>)
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	200010d0 	.word	0x200010d0
 800408c:	2000111b 	.word	0x2000111b
 8004090:	40010800 	.word	0x40010800

08004094 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004098:	4b62      	ldr	r3, [pc, #392]	@ (8004224 <checkAktifCalisma+0x190>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f041 833e 	bne.w	800571e <checkAktifCalisma+0x168a>
 80040a2:	4b61      	ldr	r3, [pc, #388]	@ (8004228 <checkAktifCalisma+0x194>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f041 8339 	bne.w	800571e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80040ac:	4b5f      	ldr	r3, [pc, #380]	@ (800422c <checkAktifCalisma+0x198>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11a      	bne.n	80040ea <checkAktifCalisma+0x56>
 80040b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004230 <checkAktifCalisma+0x19c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <checkAktifCalisma+0x56>
 80040bc:	4b5d      	ldr	r3, [pc, #372]	@ (8004234 <checkAktifCalisma+0x1a0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <checkAktifCalisma+0x46>
 80040c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004238 <checkAktifCalisma+0x1a4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f083 0301 	eor.w	r3, r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <checkAktifCalisma+0x46>
 80040d2:	4b5a      	ldr	r3, [pc, #360]	@ (800423c <checkAktifCalisma+0x1a8>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d007      	beq.n	80040ea <checkAktifCalisma+0x56>
 80040da:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <checkAktifCalisma+0x1ac>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <checkAktifCalisma+0x80>
 80040e2:	4b58      	ldr	r3, [pc, #352]	@ (8004244 <checkAktifCalisma+0x1b0>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d114      	bne.n	8004114 <checkAktifCalisma+0x80>
 80040ea:	4b57      	ldr	r3, [pc, #348]	@ (8004248 <checkAktifCalisma+0x1b4>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <checkAktifCalisma+0x80>
 80040f2:	4b56      	ldr	r3, [pc, #344]	@ (800424c <checkAktifCalisma+0x1b8>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004100:	4853      	ldr	r0, [pc, #332]	@ (8004250 <checkAktifCalisma+0x1bc>)
 8004102:	f005 ff2e 	bl	8009f62 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004106:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <checkAktifCalisma+0x1c0>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800410c:	4b52      	ldr	r3, [pc, #328]	@ (8004258 <checkAktifCalisma+0x1c4>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e008      	b.n	8004126 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004114:	2200      	movs	r2, #0
 8004116:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800411a:	484d      	ldr	r0, [pc, #308]	@ (8004250 <checkAktifCalisma+0x1bc>)
 800411c:	f005 ff21 	bl	8009f62 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004120:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <checkAktifCalisma+0x1c0>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004126:	4b40      	ldr	r3, [pc, #256]	@ (8004228 <checkAktifCalisma+0x194>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d160      	bne.n	80041f0 <checkAktifCalisma+0x15c>
 800412e:	4b46      	ldr	r3, [pc, #280]	@ (8004248 <checkAktifCalisma+0x1b4>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d05c      	beq.n	80041f0 <checkAktifCalisma+0x15c>
 8004136:	4b45      	ldr	r3, [pc, #276]	@ (800424c <checkAktifCalisma+0x1b8>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d058      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800413e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004142:	4843      	ldr	r0, [pc, #268]	@ (8004250 <checkAktifCalisma+0x1bc>)
 8004144:	f005 fef6 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <checkAktifCalisma+0xc2>
 800414e:	4b43      	ldr	r3, [pc, #268]	@ (800425c <checkAktifCalisma+0x1c8>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04c      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004156:	2102      	movs	r1, #2
 8004158:	4841      	ldr	r0, [pc, #260]	@ (8004260 <checkAktifCalisma+0x1cc>)
 800415a:	f005 feeb 	bl	8009f34 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d145      	bne.n	80041f0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004164:	4b3f      	ldr	r3, [pc, #252]	@ (8004264 <checkAktifCalisma+0x1d0>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d041      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800416c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004170:	4837      	ldr	r0, [pc, #220]	@ (8004250 <checkAktifCalisma+0x1bc>)
 8004172:	f005 fedf 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10e      	bne.n	800419a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800417c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004180:	4833      	ldr	r0, [pc, #204]	@ (8004250 <checkAktifCalisma+0x1bc>)
 8004182:	f005 fed7 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800418c:	2140      	movs	r1, #64	@ 0x40
 800418e:	4834      	ldr	r0, [pc, #208]	@ (8004260 <checkAktifCalisma+0x1cc>)
 8004190:	f005 fed0 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d003      	beq.n	80041a2 <checkAktifCalisma+0x10e>
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <checkAktifCalisma+0x198>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d026      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <checkAktifCalisma+0x1a0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01f      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80041b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <checkAktifCalisma+0x19c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80041be:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <checkAktifCalisma+0x1ac>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f083 0301 	eor.w	r3, r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80041cc:	4b26      	ldr	r3, [pc, #152]	@ (8004268 <checkAktifCalisma+0x1d4>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f083 0301 	eor.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80041da:	4b24      	ldr	r3, [pc, #144]	@ (800426c <checkAktifCalisma+0x1d8>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80041e8:	4b10      	ldr	r3, [pc, #64]	@ (800422c <checkAktifCalisma+0x198>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <checkAktifCalisma+0x198>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <checkAktifCalisma+0x198>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d03a      	beq.n	8004274 <checkAktifCalisma+0x1e0>
 80041fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004202:	4817      	ldr	r0, [pc, #92]	@ (8004260 <checkAktifCalisma+0x1cc>)
 8004204:	f005 fe96 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d132      	bne.n	8004274 <checkAktifCalisma+0x1e0>
 800420e:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <checkAktifCalisma+0x1dc>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d02e      	beq.n	8004274 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004216:	2201      	movs	r2, #1
 8004218:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800421c:	480c      	ldr	r0, [pc, #48]	@ (8004250 <checkAktifCalisma+0x1bc>)
 800421e:	f005 fea0 	bl	8009f62 <HAL_GPIO_WritePin>
 8004222:	e02d      	b.n	8004280 <checkAktifCalisma+0x1ec>
 8004224:	200010e6 	.word	0x200010e6
 8004228:	200010e5 	.word	0x200010e5
 800422c:	200010fd 	.word	0x200010fd
 8004230:	200010fe 	.word	0x200010fe
 8004234:	20001100 	.word	0x20001100
 8004238:	200010f8 	.word	0x200010f8
 800423c:	200010db 	.word	0x200010db
 8004240:	200010ff 	.word	0x200010ff
 8004244:	200010da 	.word	0x200010da
 8004248:	2000111a 	.word	0x2000111a
 800424c:	2000111b 	.word	0x2000111b
 8004250:	40010c00 	.word	0x40010c00
 8004254:	2000111c 	.word	0x2000111c
 8004258:	20001107 	.word	0x20001107
 800425c:	20001104 	.word	0x20001104
 8004260:	40011000 	.word	0x40011000
 8004264:	200010cb 	.word	0x200010cb
 8004268:	20001102 	.word	0x20001102
 800426c:	20001103 	.word	0x20001103
 8004270:	200010d6 	.word	0x200010d6
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800427a:	4860      	ldr	r0, [pc, #384]	@ (80043fc <checkAktifCalisma+0x368>)
 800427c:	f005 fe71 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004280:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <checkAktifCalisma+0x36c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <checkAktifCalisma+0x21c>
 8004288:	4b5e      	ldr	r3, [pc, #376]	@ (8004404 <checkAktifCalisma+0x370>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d007      	beq.n	80042a0 <checkAktifCalisma+0x20c>
 8004290:	4b5c      	ldr	r3, [pc, #368]	@ (8004404 <checkAktifCalisma+0x370>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d003      	beq.n	80042a0 <checkAktifCalisma+0x20c>
 8004298:	4b5b      	ldr	r3, [pc, #364]	@ (8004408 <checkAktifCalisma+0x374>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80042a0:	2201      	movs	r2, #1
 80042a2:	2104      	movs	r1, #4
 80042a4:	4855      	ldr	r0, [pc, #340]	@ (80043fc <checkAktifCalisma+0x368>)
 80042a6:	f005 fe5c 	bl	8009f62 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80042aa:	4b58      	ldr	r3, [pc, #352]	@ (800440c <checkAktifCalisma+0x378>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80042b0:	4b56      	ldr	r3, [pc, #344]	@ (800440c <checkAktifCalisma+0x378>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02f      	beq.n	8004318 <checkAktifCalisma+0x284>
 80042b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042bc:	484f      	ldr	r0, [pc, #316]	@ (80043fc <checkAktifCalisma+0x368>)
 80042be:	f005 fe39 	bl	8009f34 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <checkAktifCalisma+0x242>
 80042c8:	4b51      	ldr	r3, [pc, #324]	@ (8004410 <checkAktifCalisma+0x37c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f083 0301 	eor.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <checkAktifCalisma+0x250>
 80042d6:	2102      	movs	r1, #2
 80042d8:	484e      	ldr	r0, [pc, #312]	@ (8004414 <checkAktifCalisma+0x380>)
 80042da:	f005 fe2b 	bl	8009f34 <HAL_GPIO_ReadPin>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d119      	bne.n	8004318 <checkAktifCalisma+0x284>
 80042e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004418 <checkAktifCalisma+0x384>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <checkAktifCalisma+0x284>
 80042ec:	4b4b      	ldr	r3, [pc, #300]	@ (800441c <checkAktifCalisma+0x388>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <checkAktifCalisma+0x284>
 80042f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <checkAktifCalisma+0x38c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <checkAktifCalisma+0x284>
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <checkAktifCalisma+0x390>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f083 0301 	eor.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <checkAktifCalisma+0x284>
			timer2=millis;
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <checkAktifCalisma+0x394>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a47      	ldr	r2, [pc, #284]	@ (800442c <checkAktifCalisma+0x398>)
 8004310:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004312:	4b44      	ldr	r3, [pc, #272]	@ (8004424 <checkAktifCalisma+0x390>)
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004318:	4b43      	ldr	r3, [pc, #268]	@ (8004428 <checkAktifCalisma+0x394>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b43      	ldr	r3, [pc, #268]	@ (800442c <checkAktifCalisma+0x398>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a43      	ldr	r2, [pc, #268]	@ (8004430 <checkAktifCalisma+0x39c>)
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	4293      	cmp	r3, r2
 8004328:	d303      	bcc.n	8004332 <checkAktifCalisma+0x29e>
 800432a:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <checkAktifCalisma+0x390>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d111      	bne.n	8004356 <checkAktifCalisma+0x2c2>
 8004332:	4b39      	ldr	r3, [pc, #228]	@ (8004418 <checkAktifCalisma+0x384>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f083 0301 	eor.w	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <checkAktifCalisma+0x2c2>
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <checkAktifCalisma+0x388>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f083 0301 	eor.w	r3, r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <checkAktifCalisma+0x2c2>
 800434e:	4b34      	ldr	r3, [pc, #208]	@ (8004420 <checkAktifCalisma+0x38c>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004356:	2200      	movs	r2, #0
 8004358:	2104      	movs	r1, #4
 800435a:	4828      	ldr	r0, [pc, #160]	@ (80043fc <checkAktifCalisma+0x368>)
 800435c:	f005 fe01 	bl	8009f62 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004360:	4b2a      	ldr	r3, [pc, #168]	@ (800440c <checkAktifCalisma+0x378>)
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004366:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <checkAktifCalisma+0x390>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800436c:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <checkAktifCalisma+0x3a0>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004374:	4b30      	ldr	r3, [pc, #192]	@ (8004438 <checkAktifCalisma+0x3a4>)
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800437a:	4b2e      	ldr	r3, [pc, #184]	@ (8004434 <checkAktifCalisma+0x3a0>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d116      	bne.n	80043b0 <checkAktifCalisma+0x31c>
 8004382:	4b2e      	ldr	r3, [pc, #184]	@ (800443c <checkAktifCalisma+0x3a8>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d112      	bne.n	80043b0 <checkAktifCalisma+0x31c>
 800438a:	2101      	movs	r1, #1
 800438c:	4821      	ldr	r0, [pc, #132]	@ (8004414 <checkAktifCalisma+0x380>)
 800438e:	f005 fdd1 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <checkAktifCalisma+0x31c>
 8004398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800439c:	4817      	ldr	r0, [pc, #92]	@ (80043fc <checkAktifCalisma+0x368>)
 800439e:	f005 fdc9 	bl	8009f34 <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80043a8:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <checkAktifCalisma+0x3a4>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e011      	b.n	80043d4 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <checkAktifCalisma+0x3a0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d10d      	bne.n	80043d4 <checkAktifCalisma+0x340>
 80043b8:	2101      	movs	r1, #1
 80043ba:	4816      	ldr	r0, [pc, #88]	@ (8004414 <checkAktifCalisma+0x380>)
 80043bc:	f005 fdba 	bl	8009f34 <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d106      	bne.n	80043d4 <checkAktifCalisma+0x340>
 80043c6:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <checkAktifCalisma+0x3a8>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <checkAktifCalisma+0x3a4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80043d4:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <checkAktifCalisma+0x3a0>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d134      	bne.n	8004446 <checkAktifCalisma+0x3b2>
 80043dc:	4b17      	ldr	r3, [pc, #92]	@ (800443c <checkAktifCalisma+0x3a8>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d130      	bne.n	8004446 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80043e4:	2101      	movs	r1, #1
 80043e6:	480b      	ldr	r0, [pc, #44]	@ (8004414 <checkAktifCalisma+0x380>)
 80043e8:	f005 fda4 	bl	8009f34 <HAL_GPIO_ReadPin>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d126      	bne.n	8004440 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80043f2:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <checkAktifCalisma+0x3a4>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e025      	b.n	8004446 <checkAktifCalisma+0x3b2>
 80043fa:	bf00      	nop
 80043fc:	40010c00 	.word	0x40010c00
 8004400:	200010fd 	.word	0x200010fd
 8004404:	200010d7 	.word	0x200010d7
 8004408:	200010db 	.word	0x200010db
 800440c:	20001101 	.word	0x20001101
 8004410:	20001104 	.word	0x20001104
 8004414:	40011000 	.word	0x40011000
 8004418:	2000111a 	.word	0x2000111a
 800441c:	2000111b 	.word	0x2000111b
 8004420:	200010cb 	.word	0x200010cb
 8004424:	200010f9 	.word	0x200010f9
 8004428:	200010a0 	.word	0x200010a0
 800442c:	200010ac 	.word	0x200010ac
 8004430:	200010dc 	.word	0x200010dc
 8004434:	200010cc 	.word	0x200010cc
 8004438:	2000111f 	.word	0x2000111f
 800443c:	200010c9 	.word	0x200010c9
			} else {
				cerceveVar=0;
 8004440:	4b7f      	ldr	r3, [pc, #508]	@ (8004640 <checkAktifCalisma+0x5ac>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004446:	4b7f      	ldr	r3, [pc, #508]	@ (8004644 <checkAktifCalisma+0x5b0>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d17c      	bne.n	8004548 <checkAktifCalisma+0x4b4>
 800444e:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <checkAktifCalisma+0x5b4>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d078      	beq.n	8004548 <checkAktifCalisma+0x4b4>
 8004456:	4b7d      	ldr	r3, [pc, #500]	@ (800464c <checkAktifCalisma+0x5b8>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d074      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800445e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004462:	487b      	ldr	r0, [pc, #492]	@ (8004650 <checkAktifCalisma+0x5bc>)
 8004464:	f005 fd66 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <checkAktifCalisma+0x3e2>
 800446e:	4b79      	ldr	r3, [pc, #484]	@ (8004654 <checkAktifCalisma+0x5c0>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d068      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004476:	4b72      	ldr	r3, [pc, #456]	@ (8004640 <checkAktifCalisma+0x5ac>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d064      	beq.n	8004548 <checkAktifCalisma+0x4b4>
 800447e:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <checkAktifCalisma+0x5c4>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05d      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800448c:	2104      	movs	r1, #4
 800448e:	4873      	ldr	r0, [pc, #460]	@ (800465c <checkAktifCalisma+0x5c8>)
 8004490:	f005 fd50 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <checkAktifCalisma+0x40e>
 800449a:	4b71      	ldr	r3, [pc, #452]	@ (8004660 <checkAktifCalisma+0x5cc>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d152      	bne.n	8004548 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80044a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044a6:	486a      	ldr	r0, [pc, #424]	@ (8004650 <checkAktifCalisma+0x5bc>)
 80044a8:	f005 fd44 	bl	8009f34 <HAL_GPIO_ReadPin>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10e      	bne.n	80044d0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80044b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044b6:	4866      	ldr	r0, [pc, #408]	@ (8004650 <checkAktifCalisma+0x5bc>)
 80044b8:	f005 fd3c 	bl	8009f34 <HAL_GPIO_ReadPin>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d106      	bne.n	80044d0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80044c2:	2140      	movs	r1, #64	@ 0x40
 80044c4:	4865      	ldr	r0, [pc, #404]	@ (800465c <checkAktifCalisma+0x5c8>)
 80044c6:	f005 fd35 	bl	8009f34 <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d003      	beq.n	80044d8 <checkAktifCalisma+0x444>
 80044d0:	4b64      	ldr	r3, [pc, #400]	@ (8004664 <checkAktifCalisma+0x5d0>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d037      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80044d8:	4b63      	ldr	r3, [pc, #396]	@ (8004668 <checkAktifCalisma+0x5d4>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f083 0301 	eor.w	r3, r3, #1
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d030      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80044e6:	4b61      	ldr	r3, [pc, #388]	@ (800466c <checkAktifCalisma+0x5d8>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f083 0301 	eor.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d029      	beq.n	8004548 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80044f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004670 <checkAktifCalisma+0x5dc>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d022      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004502:	4b5c      	ldr	r3, [pc, #368]	@ (8004674 <checkAktifCalisma+0x5e0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	f083 0301 	eor.w	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004510:	4b59      	ldr	r3, [pc, #356]	@ (8004678 <checkAktifCalisma+0x5e4>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800451e:	4b57      	ldr	r3, [pc, #348]	@ (800467c <checkAktifCalisma+0x5e8>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800452c:	2201      	movs	r2, #1
 800452e:	2102      	movs	r1, #2
 8004530:	4847      	ldr	r0, [pc, #284]	@ (8004650 <checkAktifCalisma+0x5bc>)
 8004532:	f005 fd16 	bl	8009f62 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004536:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <checkAktifCalisma+0x5d0>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <checkAktifCalisma+0x5ec>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8004542:	4b50      	ldr	r3, [pc, #320]	@ (8004684 <checkAktifCalisma+0x5f0>)
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004548:	4b46      	ldr	r3, [pc, #280]	@ (8004664 <checkAktifCalisma+0x5d0>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d033      	beq.n	80045b8 <checkAktifCalisma+0x524>
 8004550:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004554:	483e      	ldr	r0, [pc, #248]	@ (8004650 <checkAktifCalisma+0x5bc>)
 8004556:	f005 fced 	bl	8009f34 <HAL_GPIO_ReadPin>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <checkAktifCalisma+0x4da>
 8004560:	4b3c      	ldr	r3, [pc, #240]	@ (8004654 <checkAktifCalisma+0x5c0>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f083 0301 	eor.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <checkAktifCalisma+0x4f0>
 800456e:	2104      	movs	r1, #4
 8004570:	483a      	ldr	r0, [pc, #232]	@ (800465c <checkAktifCalisma+0x5c8>)
 8004572:	f005 fcdf 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d11d      	bne.n	80045b8 <checkAktifCalisma+0x524>
 800457c:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <checkAktifCalisma+0x5cc>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d019      	beq.n	80045b8 <checkAktifCalisma+0x524>
 8004584:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <checkAktifCalisma+0x5b4>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <checkAktifCalisma+0x524>
 800458c:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <checkAktifCalisma+0x5b8>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <checkAktifCalisma+0x524>
 8004594:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <checkAktifCalisma+0x5ac>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <checkAktifCalisma+0x524>
 800459c:	4b3a      	ldr	r3, [pc, #232]	@ (8004688 <checkAktifCalisma+0x5f4>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <checkAktifCalisma+0x524>
			timer2=millis;
 80045aa:	4b38      	ldr	r3, [pc, #224]	@ (800468c <checkAktifCalisma+0x5f8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a38      	ldr	r2, [pc, #224]	@ (8004690 <checkAktifCalisma+0x5fc>)
 80045b0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80045b2:	4b35      	ldr	r3, [pc, #212]	@ (8004688 <checkAktifCalisma+0x5f4>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80045b8:	4b34      	ldr	r3, [pc, #208]	@ (800468c <checkAktifCalisma+0x5f8>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b34      	ldr	r3, [pc, #208]	@ (8004690 <checkAktifCalisma+0x5fc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	4a34      	ldr	r2, [pc, #208]	@ (8004694 <checkAktifCalisma+0x600>)
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d303      	bcc.n	80045d2 <checkAktifCalisma+0x53e>
 80045ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004688 <checkAktifCalisma+0x5f4>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d114      	bne.n	80045fc <checkAktifCalisma+0x568>
 80045d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <checkAktifCalisma+0x5b4>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <checkAktifCalisma+0x568>
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <checkAktifCalisma+0x5b8>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <checkAktifCalisma+0x568>
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <checkAktifCalisma+0x5ac>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	f083 0301 	eor.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2102      	movs	r1, #2
 8004600:	4813      	ldr	r0, [pc, #76]	@ (8004650 <checkAktifCalisma+0x5bc>)
 8004602:	f005 fcae 	bl	8009f62 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8004606:	4b17      	ldr	r3, [pc, #92]	@ (8004664 <checkAktifCalisma+0x5d0>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800460c:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <checkAktifCalisma+0x5f4>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004612:	4b14      	ldr	r3, [pc, #80]	@ (8004664 <checkAktifCalisma+0x5d0>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d040      	beq.n	800469c <checkAktifCalisma+0x608>
 800461a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800461e:	480f      	ldr	r0, [pc, #60]	@ (800465c <checkAktifCalisma+0x5c8>)
 8004620:	f005 fc88 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d138      	bne.n	800469c <checkAktifCalisma+0x608>
 800462a:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <checkAktifCalisma+0x604>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d034      	beq.n	800469c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004632:	2201      	movs	r2, #1
 8004634:	2101      	movs	r1, #1
 8004636:	4806      	ldr	r0, [pc, #24]	@ (8004650 <checkAktifCalisma+0x5bc>)
 8004638:	f005 fc93 	bl	8009f62 <HAL_GPIO_WritePin>
 800463c:	e033      	b.n	80046a6 <checkAktifCalisma+0x612>
 800463e:	bf00      	nop
 8004640:	2000111f 	.word	0x2000111f
 8004644:	200010e5 	.word	0x200010e5
 8004648:	2000111a 	.word	0x2000111a
 800464c:	2000111b 	.word	0x2000111b
 8004650:	40010c00 	.word	0x40010c00
 8004654:	20001105 	.word	0x20001105
 8004658:	20001119 	.word	0x20001119
 800465c:	40011000 	.word	0x40011000
 8004660:	200010ce 	.word	0x200010ce
 8004664:	20001100 	.word	0x20001100
 8004668:	200010fd 	.word	0x200010fd
 800466c:	20001101 	.word	0x20001101
 8004670:	200010fe 	.word	0x200010fe
 8004674:	200010ff 	.word	0x200010ff
 8004678:	20001102 	.word	0x20001102
 800467c:	20001103 	.word	0x20001103
 8004680:	20001108 	.word	0x20001108
 8004684:	20001129 	.word	0x20001129
 8004688:	200010f8 	.word	0x200010f8
 800468c:	200010a0 	.word	0x200010a0
 8004690:	200010ac 	.word	0x200010ac
 8004694:	200010dd 	.word	0x200010dd
 8004698:	200010cd 	.word	0x200010cd
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800469c:	2200      	movs	r2, #0
 800469e:	2101      	movs	r1, #1
 80046a0:	4836      	ldr	r0, [pc, #216]	@ (800477c <checkAktifCalisma+0x6e8>)
 80046a2:	f005 fc5e 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <checkAktifCalisma+0x6ec>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 8080 	bne.w	80047b0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80046b0:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <checkAktifCalisma+0x6f0>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d003      	beq.n	80046c0 <checkAktifCalisma+0x62c>
 80046b8:	4b32      	ldr	r3, [pc, #200]	@ (8004784 <checkAktifCalisma+0x6f0>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d177      	bne.n	80047b0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80046c0:	4b31      	ldr	r3, [pc, #196]	@ (8004788 <checkAktifCalisma+0x6f4>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d073      	beq.n	80047b0 <checkAktifCalisma+0x71c>
 80046c8:	4b30      	ldr	r3, [pc, #192]	@ (800478c <checkAktifCalisma+0x6f8>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d06f      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80046d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046d4:	4829      	ldr	r0, [pc, #164]	@ (800477c <checkAktifCalisma+0x6e8>)
 80046d6:	f005 fc2d 	bl	8009f34 <HAL_GPIO_ReadPin>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d167      	bne.n	80047b0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80046e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80046e4:	482a      	ldr	r0, [pc, #168]	@ (8004790 <checkAktifCalisma+0x6fc>)
 80046e6:	f005 fc25 	bl	8009f34 <HAL_GPIO_ReadPin>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <checkAktifCalisma+0x664>
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <checkAktifCalisma+0x700>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d15b      	bne.n	80047b0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80046f8:	2140      	movs	r1, #64	@ 0x40
 80046fa:	4825      	ldr	r0, [pc, #148]	@ (8004790 <checkAktifCalisma+0x6fc>)
 80046fc:	f005 fc1a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d10f      	bne.n	8004726 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800470a:	481c      	ldr	r0, [pc, #112]	@ (800477c <checkAktifCalisma+0x6e8>)
 800470c:	f005 fc12 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800471a:	4818      	ldr	r0, [pc, #96]	@ (800477c <checkAktifCalisma+0x6e8>)
 800471c:	f005 fc0a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d003      	beq.n	800472e <checkAktifCalisma+0x69a>
 8004726:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <checkAktifCalisma+0x704>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d040      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800472e:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <checkAktifCalisma+0x708>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f083 0301 	eor.w	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d039      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <checkAktifCalisma+0x70c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f083 0301 	eor.w	r3, r3, #1
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d032      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800474a:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <checkAktifCalisma+0x710>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02b      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8004758:	4b13      	ldr	r3, [pc, #76]	@ (80047a8 <checkAktifCalisma+0x714>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d024      	beq.n	80047b0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8004766:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <checkAktifCalisma+0x718>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f083 0301 	eor.w	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01d      	beq.n	80047b0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <checkAktifCalisma+0x704>)
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e01c      	b.n	80047b6 <checkAktifCalisma+0x722>
 800477c:	40010c00 	.word	0x40010c00
 8004780:	200010e5 	.word	0x200010e5
 8004784:	200010d7 	.word	0x200010d7
 8004788:	2000111a 	.word	0x2000111a
 800478c:	2000111b 	.word	0x2000111b
 8004790:	40011000 	.word	0x40011000
 8004794:	200010d8 	.word	0x200010d8
 8004798:	200010fe 	.word	0x200010fe
 800479c:	200010fd 	.word	0x200010fd
 80047a0:	20001101 	.word	0x20001101
 80047a4:	20001100 	.word	0x20001100
 80047a8:	200010ff 	.word	0x200010ff
 80047ac:	20001103 	.word	0x20001103
		} else {
			devmotoryukaricalisiyor=0;
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <checkAktifCalisma+0x8b0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80047b6:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <checkAktifCalisma+0x8b0>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80047be:	2201      	movs	r2, #1
 80047c0:	2120      	movs	r1, #32
 80047c2:	4861      	ldr	r0, [pc, #388]	@ (8004948 <checkAktifCalisma+0x8b4>)
 80047c4:	f005 fbcd 	bl	8009f62 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80047c8:	4b60      	ldr	r3, [pc, #384]	@ (800494c <checkAktifCalisma+0x8b8>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80047ce:	4b5f      	ldr	r3, [pc, #380]	@ (800494c <checkAktifCalisma+0x8b8>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d025      	beq.n	8004822 <checkAktifCalisma+0x78e>
 80047d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047da:	485d      	ldr	r0, [pc, #372]	@ (8004950 <checkAktifCalisma+0x8bc>)
 80047dc:	f005 fbaa 	bl	8009f34 <HAL_GPIO_ReadPin>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d007      	beq.n	80047f6 <checkAktifCalisma+0x762>
 80047e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047ea:	4857      	ldr	r0, [pc, #348]	@ (8004948 <checkAktifCalisma+0x8b4>)
 80047ec:	f005 fba2 	bl	8009f34 <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <checkAktifCalisma+0x78e>
 80047f6:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <checkAktifCalisma+0x8c0>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <checkAktifCalisma+0x78e>
 80047fe:	4b56      	ldr	r3, [pc, #344]	@ (8004958 <checkAktifCalisma+0x8c4>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <checkAktifCalisma+0x78e>
 8004806:	4b55      	ldr	r3, [pc, #340]	@ (800495c <checkAktifCalisma+0x8c8>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f083 0301 	eor.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <checkAktifCalisma+0x78e>
			timer2=millis;
 8004814:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <checkAktifCalisma+0x8cc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a52      	ldr	r2, [pc, #328]	@ (8004964 <checkAktifCalisma+0x8d0>)
 800481a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800481c:	4b4f      	ldr	r3, [pc, #316]	@ (800495c <checkAktifCalisma+0x8c8>)
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004822:	4b4f      	ldr	r3, [pc, #316]	@ (8004960 <checkAktifCalisma+0x8cc>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b4f      	ldr	r3, [pc, #316]	@ (8004964 <checkAktifCalisma+0x8d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	4a4e      	ldr	r2, [pc, #312]	@ (8004968 <checkAktifCalisma+0x8d4>)
 800482e:	7812      	ldrb	r2, [r2, #0]
 8004830:	4293      	cmp	r3, r2
 8004832:	d303      	bcc.n	800483c <checkAktifCalisma+0x7a8>
 8004834:	4b49      	ldr	r3, [pc, #292]	@ (800495c <checkAktifCalisma+0x8c8>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <checkAktifCalisma+0x7c4>
 800483c:	4b45      	ldr	r3, [pc, #276]	@ (8004954 <checkAktifCalisma+0x8c0>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <checkAktifCalisma+0x7c4>
 800484a:	4b43      	ldr	r3, [pc, #268]	@ (8004958 <checkAktifCalisma+0x8c4>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f083 0301 	eor.w	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004858:	2200      	movs	r2, #0
 800485a:	2120      	movs	r1, #32
 800485c:	483a      	ldr	r0, [pc, #232]	@ (8004948 <checkAktifCalisma+0x8b4>)
 800485e:	f005 fb80 	bl	8009f62 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8004862:	4b3a      	ldr	r3, [pc, #232]	@ (800494c <checkAktifCalisma+0x8b8>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8004868:	4b3c      	ldr	r3, [pc, #240]	@ (800495c <checkAktifCalisma+0x8c8>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <checkAktifCalisma+0x8d8>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 8088 	bne.w	8004988 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004878:	4b3d      	ldr	r3, [pc, #244]	@ (8004970 <checkAktifCalisma+0x8dc>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d003      	beq.n	8004888 <checkAktifCalisma+0x7f4>
 8004880:	4b3b      	ldr	r3, [pc, #236]	@ (8004970 <checkAktifCalisma+0x8dc>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d17f      	bne.n	8004988 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8004888:	4b32      	ldr	r3, [pc, #200]	@ (8004954 <checkAktifCalisma+0x8c0>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d07b      	beq.n	8004988 <checkAktifCalisma+0x8f4>
 8004890:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <checkAktifCalisma+0x8c4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d077      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004898:	2140      	movs	r1, #64	@ 0x40
 800489a:	482b      	ldr	r0, [pc, #172]	@ (8004948 <checkAktifCalisma+0x8b4>)
 800489c:	f005 fb4a 	bl	8009f34 <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d170      	bne.n	8004988 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80048a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048aa:	4827      	ldr	r0, [pc, #156]	@ (8004948 <checkAktifCalisma+0x8b4>)
 80048ac:	f005 fb42 	bl	8009f34 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <checkAktifCalisma+0x82a>
 80048b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004974 <checkAktifCalisma+0x8e0>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d164      	bne.n	8004988 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048c2:	4823      	ldr	r0, [pc, #140]	@ (8004950 <checkAktifCalisma+0x8bc>)
 80048c4:	f005 fb36 	bl	8009f34 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10f      	bne.n	80048ee <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048d2:	481f      	ldr	r0, [pc, #124]	@ (8004950 <checkAktifCalisma+0x8bc>)
 80048d4:	f005 fb2e 	bl	8009f34 <HAL_GPIO_ReadPin>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80048de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048e2:	481b      	ldr	r0, [pc, #108]	@ (8004950 <checkAktifCalisma+0x8bc>)
 80048e4:	f005 fb26 	bl	8009f34 <HAL_GPIO_ReadPin>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d003      	beq.n	80048f6 <checkAktifCalisma+0x862>
 80048ee:	4b22      	ldr	r3, [pc, #136]	@ (8004978 <checkAktifCalisma+0x8e4>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d048      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80048f6:	4b21      	ldr	r3, [pc, #132]	@ (800497c <checkAktifCalisma+0x8e8>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	f083 0301 	eor.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d041      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8004904:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <checkAktifCalisma+0x8ec>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f083 0301 	eor.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d03a      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8004912:	4b1c      	ldr	r3, [pc, #112]	@ (8004984 <checkAktifCalisma+0x8f0>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f083 0301 	eor.w	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d033      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <checkAktifCalisma+0x8b8>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f083 0301 	eor.w	r3, r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02c      	beq.n	8004988 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <checkAktifCalisma+0x8b0>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	f083 0301 	eor.w	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d025      	beq.n	8004988 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800493c:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <checkAktifCalisma+0x8e4>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e024      	b.n	800498e <checkAktifCalisma+0x8fa>
 8004944:	200010fe 	.word	0x200010fe
 8004948:	40011000 	.word	0x40011000
 800494c:	20001102 	.word	0x20001102
 8004950:	40010c00 	.word	0x40010c00
 8004954:	2000111a 	.word	0x2000111a
 8004958:	2000111b 	.word	0x2000111b
 800495c:	200010fa 	.word	0x200010fa
 8004960:	200010a0 	.word	0x200010a0
 8004964:	200010ac 	.word	0x200010ac
 8004968:	200010de 	.word	0x200010de
 800496c:	200010e5 	.word	0x200010e5
 8004970:	200010d7 	.word	0x200010d7
 8004974:	200010d9 	.word	0x200010d9
 8004978:	200010ff 	.word	0x200010ff
 800497c:	200010fd 	.word	0x200010fd
 8004980:	20001101 	.word	0x20001101
 8004984:	20001100 	.word	0x20001100
		} else {
			devmotorasagicalisiyor=0;
 8004988:	4b96      	ldr	r3, [pc, #600]	@ (8004be4 <checkAktifCalisma+0xb50>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800498e:	4b95      	ldr	r3, [pc, #596]	@ (8004be4 <checkAktifCalisma+0xb50>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004996:	2201      	movs	r2, #1
 8004998:	2110      	movs	r1, #16
 800499a:	4893      	ldr	r0, [pc, #588]	@ (8004be8 <checkAktifCalisma+0xb54>)
 800499c:	f005 fae1 	bl	8009f62 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80049a0:	4b92      	ldr	r3, [pc, #584]	@ (8004bec <checkAktifCalisma+0xb58>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80049a6:	4b91      	ldr	r3, [pc, #580]	@ (8004bec <checkAktifCalisma+0xb58>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d024      	beq.n	80049f8 <checkAktifCalisma+0x964>
 80049ae:	2140      	movs	r1, #64	@ 0x40
 80049b0:	488d      	ldr	r0, [pc, #564]	@ (8004be8 <checkAktifCalisma+0xb54>)
 80049b2:	f005 fabf 	bl	8009f34 <HAL_GPIO_ReadPin>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d007      	beq.n	80049cc <checkAktifCalisma+0x938>
 80049bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049c0:	4889      	ldr	r0, [pc, #548]	@ (8004be8 <checkAktifCalisma+0xb54>)
 80049c2:	f005 fab7 	bl	8009f34 <HAL_GPIO_ReadPin>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d115      	bne.n	80049f8 <checkAktifCalisma+0x964>
 80049cc:	4b88      	ldr	r3, [pc, #544]	@ (8004bf0 <checkAktifCalisma+0xb5c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d011      	beq.n	80049f8 <checkAktifCalisma+0x964>
 80049d4:	4b87      	ldr	r3, [pc, #540]	@ (8004bf4 <checkAktifCalisma+0xb60>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <checkAktifCalisma+0x964>
 80049dc:	4b86      	ldr	r3, [pc, #536]	@ (8004bf8 <checkAktifCalisma+0xb64>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f083 0301 	eor.w	r3, r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <checkAktifCalisma+0x964>
			timer2=millis;
 80049ea:	4b84      	ldr	r3, [pc, #528]	@ (8004bfc <checkAktifCalisma+0xb68>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a84      	ldr	r2, [pc, #528]	@ (8004c00 <checkAktifCalisma+0xb6c>)
 80049f0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80049f2:	4b81      	ldr	r3, [pc, #516]	@ (8004bf8 <checkAktifCalisma+0xb64>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80049f8:	4b80      	ldr	r3, [pc, #512]	@ (8004bfc <checkAktifCalisma+0xb68>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b80      	ldr	r3, [pc, #512]	@ (8004c00 <checkAktifCalisma+0xb6c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	4a80      	ldr	r2, [pc, #512]	@ (8004c04 <checkAktifCalisma+0xb70>)
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d303      	bcc.n	8004a12 <checkAktifCalisma+0x97e>
 8004a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004bf8 <checkAktifCalisma+0xb64>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10d      	bne.n	8004a2e <checkAktifCalisma+0x99a>
 8004a12:	4b77      	ldr	r3, [pc, #476]	@ (8004bf0 <checkAktifCalisma+0xb5c>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	f083 0301 	eor.w	r3, r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <checkAktifCalisma+0x99a>
 8004a20:	4b74      	ldr	r3, [pc, #464]	@ (8004bf4 <checkAktifCalisma+0xb60>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	f083 0301 	eor.w	r3, r3, #1
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2110      	movs	r1, #16
 8004a32:	486d      	ldr	r0, [pc, #436]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004a34:	f005 fa95 	bl	8009f62 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004a38:	4b6c      	ldr	r3, [pc, #432]	@ (8004bec <checkAktifCalisma+0xb58>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf8 <checkAktifCalisma+0xb64>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a48:	486f      	ldr	r0, [pc, #444]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004a4a:	f005 fa73 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d120      	bne.n	8004a96 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a58:	486b      	ldr	r0, [pc, #428]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004a5a:	f005 fa6b 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d118      	bne.n	8004a96 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004a64:	2104      	movs	r1, #4
 8004a66:	4868      	ldr	r0, [pc, #416]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004a68:	f005 fa64 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d111      	bne.n	8004a96 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004a72:	2102      	movs	r1, #2
 8004a74:	4864      	ldr	r0, [pc, #400]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004a76:	f005 fa5d 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004a80:	2101      	movs	r1, #1
 8004a82:	4861      	ldr	r0, [pc, #388]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004a84:	f005 fa56 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <checkAktifCalisma+0xa02>
			makineStop=1;
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c0c <checkAktifCalisma+0xb78>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e002      	b.n	8004a9c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004a96:	4b5d      	ldr	r3, [pc, #372]	@ (8004c0c <checkAktifCalisma+0xb78>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004c10 <checkAktifCalisma+0xb7c>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d144      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
 8004aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c14 <checkAktifCalisma+0xb80>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d003      	beq.n	8004ab4 <checkAktifCalisma+0xa20>
 8004aac:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <checkAktifCalisma+0xb80>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d13c      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ab4:	2180      	movs	r1, #128	@ 0x80
 8004ab6:	484c      	ldr	r0, [pc, #304]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004ab8:	f005 fa3c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <checkAktifCalisma+0xa36>
 8004ac2:	4b55      	ldr	r3, [pc, #340]	@ (8004c18 <checkAktifCalisma+0xb84>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <checkAktifCalisma+0xa4e>
 8004aca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ace:	484e      	ldr	r0, [pc, #312]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004ad0:	f005 fa30 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d129      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
 8004ada:	4b4f      	ldr	r3, [pc, #316]	@ (8004c18 <checkAktifCalisma+0xb84>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d125      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	4840      	ldr	r0, [pc, #256]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004ae6:	f005 fa25 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d003      	beq.n	8004af8 <checkAktifCalisma+0xa64>
 8004af0:	4b4a      	ldr	r3, [pc, #296]	@ (8004c1c <checkAktifCalisma+0xb88>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11a      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004af8:	2102      	movs	r1, #2
 8004afa:	483b      	ldr	r0, [pc, #236]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004afc:	f005 fa1a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d113      	bne.n	8004b2e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004b06:	4b46      	ldr	r3, [pc, #280]	@ (8004c20 <checkAktifCalisma+0xb8c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f083 0301 	eor.w	r3, r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004b14:	4b3d      	ldr	r3, [pc, #244]	@ (8004c0c <checkAktifCalisma+0xb78>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004b1c:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <checkAktifCalisma+0xb90>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004b22:	4b36      	ldr	r3, [pc, #216]	@ (8004bfc <checkAktifCalisma+0xb68>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a40      	ldr	r2, [pc, #256]	@ (8004c28 <checkAktifCalisma+0xb94>)
 8004b28:	6013      	str	r3, [r2, #0]
			bekle();
 8004b2a:	f7ff f917 	bl	8003d5c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004b2e:	4b33      	ldr	r3, [pc, #204]	@ (8004bfc <checkAktifCalisma+0xb68>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <checkAktifCalisma+0xb94>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	4a3c      	ldr	r2, [pc, #240]	@ (8004c2c <checkAktifCalisma+0xb98>)
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d211      	bcs.n	8004b64 <checkAktifCalisma+0xad0>
 8004b40:	2104      	movs	r1, #4
 8004b42:	4829      	ldr	r0, [pc, #164]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004b44:	f005 f9f6 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <checkAktifCalisma+0xad0>
 8004b4e:	4b33      	ldr	r3, [pc, #204]	@ (8004c1c <checkAktifCalisma+0xb88>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <checkAktifCalisma+0xad0>
 8004b56:	4b2d      	ldr	r3, [pc, #180]	@ (8004c0c <checkAktifCalisma+0xb78>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004b64:	4b2f      	ldr	r3, [pc, #188]	@ (8004c24 <checkAktifCalisma+0xb90>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b6a:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <checkAktifCalisma+0xb7c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d160      	bne.n	8004c34 <checkAktifCalisma+0xba0>
 8004b72:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <checkAktifCalisma+0xb80>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d003      	beq.n	8004b82 <checkAktifCalisma+0xaee>
 8004b7a:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <checkAktifCalisma+0xb80>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d158      	bne.n	8004c34 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b82:	2104      	movs	r1, #4
 8004b84:	4818      	ldr	r0, [pc, #96]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004b86:	f005 f9d5 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d003      	beq.n	8004b98 <checkAktifCalisma+0xb04>
 8004b90:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <checkAktifCalisma+0xb88>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d14d      	bne.n	8004c34 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4813      	ldr	r0, [pc, #76]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004b9c:	f005 f9ca 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d146      	bne.n	8004c34 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ba6:	2180      	movs	r1, #128	@ 0x80
 8004ba8:	480f      	ldr	r0, [pc, #60]	@ (8004be8 <checkAktifCalisma+0xb54>)
 8004baa:	f005 f9c3 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d103      	bne.n	8004bbc <checkAktifCalisma+0xb28>
 8004bb4:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <checkAktifCalisma+0xb84>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <checkAktifCalisma+0xb40>
 8004bbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bc0:	4811      	ldr	r0, [pc, #68]	@ (8004c08 <checkAktifCalisma+0xb74>)
 8004bc2:	f005 f9b7 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d133      	bne.n	8004c34 <checkAktifCalisma+0xba0>
 8004bcc:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <checkAktifCalisma+0xb84>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d12f      	bne.n	8004c34 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c0c <checkAktifCalisma+0xb78>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02b      	beq.n	8004c34 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004bdc:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <checkAktifCalisma+0xb9c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e02a      	b.n	8004c3a <checkAktifCalisma+0xba6>
 8004be4:	200010ff 	.word	0x200010ff
 8004be8:	40011000 	.word	0x40011000
 8004bec:	20001103 	.word	0x20001103
 8004bf0:	2000111a 	.word	0x2000111a
 8004bf4:	2000111b 	.word	0x2000111b
 8004bf8:	200010fb 	.word	0x200010fb
 8004bfc:	200010a0 	.word	0x200010a0
 8004c00:	200010ac 	.word	0x200010ac
 8004c04:	200010de 	.word	0x200010de
 8004c08:	40010c00 	.word	0x40010c00
 8004c0c:	2000110a 	.word	0x2000110a
 8004c10:	200010d1 	.word	0x200010d1
 8004c14:	200010d0 	.word	0x200010d0
 8004c18:	200010d4 	.word	0x200010d4
 8004c1c:	200010ce 	.word	0x200010ce
 8004c20:	200010f7 	.word	0x200010f7
 8004c24:	2000110b 	.word	0x2000110b
 8004c28:	200010a4 	.word	0x200010a4
 8004c2c:	200010e1 	.word	0x200010e1
 8004c30:	2000110c 	.word	0x2000110c
		} else {
			kapi1butonkontrol=0;
 8004c34:	4b8b      	ldr	r3, [pc, #556]	@ (8004e64 <checkAktifCalisma+0xdd0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e68 <checkAktifCalisma+0xdd4>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d121      	bne.n	8004c86 <checkAktifCalisma+0xbf2>
 8004c42:	4b8a      	ldr	r3, [pc, #552]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d003      	beq.n	8004c52 <checkAktifCalisma+0xbbe>
 8004c4a:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d119      	bne.n	8004c86 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c52:	2104      	movs	r1, #4
 8004c54:	4886      	ldr	r0, [pc, #536]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004c56:	f005 f96d 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d003      	beq.n	8004c68 <checkAktifCalisma+0xbd4>
 8004c60:	4b84      	ldr	r3, [pc, #528]	@ (8004e74 <checkAktifCalisma+0xde0>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c68:	2102      	movs	r1, #2
 8004c6a:	4881      	ldr	r0, [pc, #516]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004c6c:	f005 f962 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004c76:	4b80      	ldr	r3, [pc, #512]	@ (8004e78 <checkAktifCalisma+0xde4>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e7c <checkAktifCalisma+0xde8>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004c86:	4b7d      	ldr	r3, [pc, #500]	@ (8004e7c <checkAktifCalisma+0xde8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004c8c:	4b75      	ldr	r3, [pc, #468]	@ (8004e64 <checkAktifCalisma+0xdd0>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <checkAktifCalisma+0xc10>
 8004c94:	4b79      	ldr	r3, [pc, #484]	@ (8004e7c <checkAktifCalisma+0xde8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <checkAktifCalisma+0xc10>
 8004c9c:	4b78      	ldr	r3, [pc, #480]	@ (8004e80 <checkAktifCalisma+0xdec>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2180      	movs	r1, #128	@ 0x80
 8004ca8:	4876      	ldr	r0, [pc, #472]	@ (8004e84 <checkAktifCalisma+0xdf0>)
 8004caa:	f005 f95a 	bl	8009f62 <HAL_GPIO_WritePin>
 8004cae:	e004      	b.n	8004cba <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2180      	movs	r1, #128	@ 0x80
 8004cb4:	4873      	ldr	r0, [pc, #460]	@ (8004e84 <checkAktifCalisma+0xdf0>)
 8004cb6:	f005 f954 	bl	8009f62 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004cba:	4b73      	ldr	r3, [pc, #460]	@ (8004e88 <checkAktifCalisma+0xdf4>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d141      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d003      	beq.n	8004cd2 <checkAktifCalisma+0xc3e>
 8004cca:	4b68      	ldr	r3, [pc, #416]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d139      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cd6:	4866      	ldr	r0, [pc, #408]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004cd8:	f005 f92c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <checkAktifCalisma+0xc56>
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e8c <checkAktifCalisma+0xdf8>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <checkAktifCalisma+0xc6e>
 8004cea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cee:	4868      	ldr	r0, [pc, #416]	@ (8004e90 <checkAktifCalisma+0xdfc>)
 8004cf0:	f005 f920 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d125      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
 8004cfa:	4b64      	ldr	r3, [pc, #400]	@ (8004e8c <checkAktifCalisma+0xdf8>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d121      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d02:	2102      	movs	r1, #2
 8004d04:	485a      	ldr	r0, [pc, #360]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004d06:	f005 f915 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11a      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d10:	2104      	movs	r1, #4
 8004d12:	4857      	ldr	r0, [pc, #348]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004d14:	f005 f90e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d113      	bne.n	8004d46 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004d1e:	4b56      	ldr	r3, [pc, #344]	@ (8004e78 <checkAktifCalisma+0xde4>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00f      	beq.n	8004d46 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004d26:	4b5b      	ldr	r3, [pc, #364]	@ (8004e94 <checkAktifCalisma+0xe00>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	f083 0301 	eor.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004d34:	4b58      	ldr	r3, [pc, #352]	@ (8004e98 <checkAktifCalisma+0xe04>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004d3a:	4b58      	ldr	r3, [pc, #352]	@ (8004e9c <checkAktifCalisma+0xe08>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a58      	ldr	r2, [pc, #352]	@ (8004ea0 <checkAktifCalisma+0xe0c>)
 8004d40:	6013      	str	r3, [r2, #0]
			bekle();
 8004d42:	f7ff f80b 	bl	8003d5c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004d46:	4b55      	ldr	r3, [pc, #340]	@ (8004e9c <checkAktifCalisma+0xe08>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b55      	ldr	r3, [pc, #340]	@ (8004ea0 <checkAktifCalisma+0xe0c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	4a54      	ldr	r2, [pc, #336]	@ (8004ea4 <checkAktifCalisma+0xe10>)
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d20d      	bcs.n	8004d74 <checkAktifCalisma+0xce0>
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4845      	ldr	r0, [pc, #276]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004d5c:	f005 f8ea 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <checkAktifCalisma+0xce0>
 8004d66:	4b44      	ldr	r3, [pc, #272]	@ (8004e78 <checkAktifCalisma+0xde4>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f083 0301 	eor.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004d74:	4b48      	ldr	r3, [pc, #288]	@ (8004e98 <checkAktifCalisma+0xe04>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d7a:	4b43      	ldr	r3, [pc, #268]	@ (8004e88 <checkAktifCalisma+0xdf4>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d135      	bne.n	8004dee <checkAktifCalisma+0xd5a>
 8004d82:	4b3a      	ldr	r3, [pc, #232]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d003      	beq.n	8004d92 <checkAktifCalisma+0xcfe>
 8004d8a:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d12d      	bne.n	8004dee <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d96:	4836      	ldr	r0, [pc, #216]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004d98:	f005 f8cc 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <checkAktifCalisma+0xd16>
 8004da2:	4b3a      	ldr	r3, [pc, #232]	@ (8004e8c <checkAktifCalisma+0xdf8>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <checkAktifCalisma+0xd2e>
 8004daa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dae:	4838      	ldr	r0, [pc, #224]	@ (8004e90 <checkAktifCalisma+0xdfc>)
 8004db0:	f005 f8c0 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d119      	bne.n	8004dee <checkAktifCalisma+0xd5a>
 8004dba:	4b34      	ldr	r3, [pc, #208]	@ (8004e8c <checkAktifCalisma+0xdf8>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d115      	bne.n	8004dee <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	482a      	ldr	r0, [pc, #168]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004dc6:	f005 f8b5 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10e      	bne.n	8004dee <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	4827      	ldr	r0, [pc, #156]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004dd4:	f005 f8ae 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004dde:	4b26      	ldr	r3, [pc, #152]	@ (8004e78 <checkAktifCalisma+0xde4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004de6:	4b30      	ldr	r3, [pc, #192]	@ (8004ea8 <checkAktifCalisma+0xe14>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e002      	b.n	8004df4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004dee:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea8 <checkAktifCalisma+0xe14>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004df4:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <checkAktifCalisma+0xdf4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11d      	bne.n	8004e38 <checkAktifCalisma+0xda4>
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d003      	beq.n	8004e0c <checkAktifCalisma+0xd78>
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <checkAktifCalisma+0xdd8>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d115      	bne.n	8004e38 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4818      	ldr	r0, [pc, #96]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004e10:	f005 f890 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10e      	bne.n	8004e38 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	4814      	ldr	r0, [pc, #80]	@ (8004e70 <checkAktifCalisma+0xddc>)
 8004e1e:	f005 f889 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004e28:	4b13      	ldr	r3, [pc, #76]	@ (8004e78 <checkAktifCalisma+0xde4>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004e30:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <checkAktifCalisma+0xe18>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004e38:	4b1c      	ldr	r3, [pc, #112]	@ (8004eac <checkAktifCalisma+0xe18>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <checkAktifCalisma+0xe14>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <checkAktifCalisma+0xdc2>
 8004e46:	4b19      	ldr	r3, [pc, #100]	@ (8004eac <checkAktifCalisma+0xe18>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <checkAktifCalisma+0xdc2>
 8004e4e:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <checkAktifCalisma+0xe04>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d02c      	beq.n	8004eb0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004e56:	2201      	movs	r2, #1
 8004e58:	2140      	movs	r1, #64	@ 0x40
 8004e5a:	480a      	ldr	r0, [pc, #40]	@ (8004e84 <checkAktifCalisma+0xdf0>)
 8004e5c:	f005 f881 	bl	8009f62 <HAL_GPIO_WritePin>
 8004e60:	e02b      	b.n	8004eba <checkAktifCalisma+0xe26>
 8004e62:	bf00      	nop
 8004e64:	2000110c 	.word	0x2000110c
 8004e68:	200010d1 	.word	0x200010d1
 8004e6c:	200010d0 	.word	0x200010d0
 8004e70:	40011000 	.word	0x40011000
 8004e74:	200010ce 	.word	0x200010ce
 8004e78:	2000110a 	.word	0x2000110a
 8004e7c:	2000110d 	.word	0x2000110d
 8004e80:	2000110b 	.word	0x2000110b
 8004e84:	40010800 	.word	0x40010800
 8004e88:	200010d2 	.word	0x200010d2
 8004e8c:	200010d4 	.word	0x200010d4
 8004e90:	40010c00 	.word	0x40010c00
 8004e94:	200010f7 	.word	0x200010f7
 8004e98:	2000110e 	.word	0x2000110e
 8004e9c:	200010a0 	.word	0x200010a0
 8004ea0:	200010a4 	.word	0x200010a4
 8004ea4:	200010e2 	.word	0x200010e2
 8004ea8:	2000110f 	.word	0x2000110f
 8004eac:	20001110 	.word	0x20001110
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2140      	movs	r1, #64	@ 0x40
 8004eb4:	488d      	ldr	r0, [pc, #564]	@ (80050ec <checkAktifCalisma+0x1058>)
 8004eb6:	f005 f854 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004eba:	4b8d      	ldr	r3, [pc, #564]	@ (80050f0 <checkAktifCalisma+0x105c>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <checkAktifCalisma+0xe36>
 8004ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80050f0 <checkAktifCalisma+0x105c>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d115      	bne.n	8004ef6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004eca:	2104      	movs	r1, #4
 8004ecc:	4889      	ldr	r0, [pc, #548]	@ (80050f4 <checkAktifCalisma+0x1060>)
 8004ece:	f005 f831 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d003      	beq.n	8004ee0 <checkAktifCalisma+0xe4c>
 8004ed8:	4b87      	ldr	r3, [pc, #540]	@ (80050f8 <checkAktifCalisma+0x1064>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4884      	ldr	r0, [pc, #528]	@ (80050f4 <checkAktifCalisma+0x1060>)
 8004ee4:	f005 f826 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004eee:	4b83      	ldr	r3, [pc, #524]	@ (80050fc <checkAktifCalisma+0x1068>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <checkAktifCalisma+0x1068>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004efc:	4b7c      	ldr	r3, [pc, #496]	@ (80050f0 <checkAktifCalisma+0x105c>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d003      	beq.n	8004f0c <checkAktifCalisma+0xe78>
 8004f04:	4b7a      	ldr	r3, [pc, #488]	@ (80050f0 <checkAktifCalisma+0x105c>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d111      	bne.n	8004f30 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4879      	ldr	r0, [pc, #484]	@ (80050f4 <checkAktifCalisma+0x1060>)
 8004f10:	f005 f810 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10a      	bne.n	8004f30 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	4875      	ldr	r0, [pc, #468]	@ (80050f4 <checkAktifCalisma+0x1060>)
 8004f1e:	f005 f809 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004f28:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <checkAktifCalisma+0x106c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004f30:	4b73      	ldr	r3, [pc, #460]	@ (8005100 <checkAktifCalisma+0x106c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004f36:	4b71      	ldr	r3, [pc, #452]	@ (80050fc <checkAktifCalisma+0x1068>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00f      	beq.n	8004f5e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004f3e:	4b71      	ldr	r3, [pc, #452]	@ (8005104 <checkAktifCalisma+0x1070>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10b      	bne.n	8004f5e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004f46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f4a:	486f      	ldr	r0, [pc, #444]	@ (8005108 <checkAktifCalisma+0x1074>)
 8004f4c:	f004 fff2 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004f56:	4b6d      	ldr	r3, [pc, #436]	@ (800510c <checkAktifCalisma+0x1078>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e002      	b.n	8004f64 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800510c <checkAktifCalisma+0x1078>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004f64:	4b66      	ldr	r3, [pc, #408]	@ (8005100 <checkAktifCalisma+0x106c>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00f      	beq.n	8004f8c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004f6c:	4b65      	ldr	r3, [pc, #404]	@ (8005104 <checkAktifCalisma+0x1070>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10b      	bne.n	8004f8c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004f74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f78:	4863      	ldr	r0, [pc, #396]	@ (8005108 <checkAktifCalisma+0x1074>)
 8004f7a:	f004 ffdb 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004f84:	4b62      	ldr	r3, [pc, #392]	@ (8005110 <checkAktifCalisma+0x107c>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004f8c:	4b60      	ldr	r3, [pc, #384]	@ (8005110 <checkAktifCalisma+0x107c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f92:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <checkAktifCalisma+0x1080>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d137      	bne.n	800500a <checkAktifCalisma+0xf76>
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005118 <checkAktifCalisma+0x1084>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d003      	beq.n	8004faa <checkAktifCalisma+0xf16>
 8004fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8005118 <checkAktifCalisma+0x1084>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d12f      	bne.n	800500a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004faa:	4b54      	ldr	r3, [pc, #336]	@ (80050fc <checkAktifCalisma+0x1068>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <checkAktifCalisma+0xf26>
 8004fb2:	4b53      	ldr	r3, [pc, #332]	@ (8005100 <checkAktifCalisma+0x106c>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d027      	beq.n	800500a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8004fba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004fbe:	484d      	ldr	r0, [pc, #308]	@ (80050f4 <checkAktifCalisma+0x1060>)
 8004fc0:	f004 ffb8 	bl	8009f34 <HAL_GPIO_ReadPin>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <checkAktifCalisma+0xf3e>
 8004fca:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <checkAktifCalisma+0x1070>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800510c <checkAktifCalisma+0x1078>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <checkAktifCalisma+0xf4e>
 8004fda:	4b4d      	ldr	r3, [pc, #308]	@ (8005110 <checkAktifCalisma+0x107c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8004fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800511c <checkAktifCalisma+0x1088>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00f      	beq.n	800500a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8004fea:	4b4d      	ldr	r3, [pc, #308]	@ (8005120 <checkAktifCalisma+0x108c>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f083 0301 	eor.w	r3, r3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8004ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8005124 <checkAktifCalisma+0x1090>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <checkAktifCalisma+0x1094>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4a      	ldr	r2, [pc, #296]	@ (800512c <checkAktifCalisma+0x1098>)
 8005004:	6013      	str	r3, [r2, #0]
			bekle();
 8005006:	f7fe fea9 	bl	8003d5c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800500a:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <checkAktifCalisma+0x1094>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b47      	ldr	r3, [pc, #284]	@ (800512c <checkAktifCalisma+0x1098>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	4a46      	ldr	r2, [pc, #280]	@ (8005130 <checkAktifCalisma+0x109c>)
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	4293      	cmp	r3, r2
 800501a:	d214      	bcs.n	8005046 <checkAktifCalisma+0xfb2>
 800501c:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <checkAktifCalisma+0x1068>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f083 0301 	eor.w	r3, r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <checkAktifCalisma+0xfa4>
 800502a:	4b35      	ldr	r3, [pc, #212]	@ (8005100 <checkAktifCalisma+0x106c>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <checkAktifCalisma+0xfb2>
 8005038:	4b38      	ldr	r3, [pc, #224]	@ (800511c <checkAktifCalisma+0x1088>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f083 0301 	eor.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005046:	4b37      	ldr	r3, [pc, #220]	@ (8005124 <checkAktifCalisma+0x1090>)
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800504c:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <checkAktifCalisma+0x1080>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d12b      	bne.n	80050ac <checkAktifCalisma+0x1018>
 8005054:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <checkAktifCalisma+0x1084>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d003      	beq.n	8005064 <checkAktifCalisma+0xfd0>
 800505c:	4b2e      	ldr	r3, [pc, #184]	@ (8005118 <checkAktifCalisma+0x1084>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d123      	bne.n	80050ac <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005064:	4b25      	ldr	r3, [pc, #148]	@ (80050fc <checkAktifCalisma+0x1068>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <checkAktifCalisma+0xfe0>
 800506c:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <checkAktifCalisma+0x106c>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01b      	beq.n	80050ac <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005074:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005078:	481e      	ldr	r0, [pc, #120]	@ (80050f4 <checkAktifCalisma+0x1060>)
 800507a:	f004 ff5b 	bl	8009f34 <HAL_GPIO_ReadPin>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <checkAktifCalisma+0xff8>
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <checkAktifCalisma+0x1070>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800508c:	4b1f      	ldr	r3, [pc, #124]	@ (800510c <checkAktifCalisma+0x1078>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <checkAktifCalisma+0x1008>
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <checkAktifCalisma+0x107c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800509c:	4b1f      	ldr	r3, [pc, #124]	@ (800511c <checkAktifCalisma+0x1088>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80050a4:	4b23      	ldr	r3, [pc, #140]	@ (8005134 <checkAktifCalisma+0x10a0>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <checkAktifCalisma+0x10a0>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80050b2:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <checkAktifCalisma+0x1080>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d140      	bne.n	800513c <checkAktifCalisma+0x10a8>
 80050ba:	4b17      	ldr	r3, [pc, #92]	@ (8005118 <checkAktifCalisma+0x1084>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <checkAktifCalisma+0x1036>
 80050c2:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <checkAktifCalisma+0x1084>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d138      	bne.n	800513c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <checkAktifCalisma+0x1068>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <checkAktifCalisma+0x1046>
 80050d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <checkAktifCalisma+0x106c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d030      	beq.n	800513c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <checkAktifCalisma+0x1088>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02c      	beq.n	800513c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <checkAktifCalisma+0x10a4>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e02b      	b.n	8005142 <checkAktifCalisma+0x10ae>
 80050ea:	bf00      	nop
 80050ec:	40010800 	.word	0x40010800
 80050f0:	200010d5 	.word	0x200010d5
 80050f4:	40011000 	.word	0x40011000
 80050f8:	200010ce 	.word	0x200010ce
 80050fc:	20001114 	.word	0x20001114
 8005100:	20001115 	.word	0x20001115
 8005104:	200010d4 	.word	0x200010d4
 8005108:	40010c00 	.word	0x40010c00
 800510c:	20001124 	.word	0x20001124
 8005110:	20001125 	.word	0x20001125
 8005114:	200010d3 	.word	0x200010d3
 8005118:	200010d0 	.word	0x200010d0
 800511c:	2000110a 	.word	0x2000110a
 8005120:	200010f7 	.word	0x200010f7
 8005124:	20001111 	.word	0x20001111
 8005128:	200010a0 	.word	0x200010a0
 800512c:	200010a4 	.word	0x200010a4
 8005130:	200010e3 	.word	0x200010e3
 8005134:	20001112 	.word	0x20001112
 8005138:	20001113 	.word	0x20001113
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800513c:	4b8b      	ldr	r3, [pc, #556]	@ (800536c <checkAktifCalisma+0x12d8>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005142:	4b8b      	ldr	r3, [pc, #556]	@ (8005370 <checkAktifCalisma+0x12dc>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d107      	bne.n	800515a <checkAktifCalisma+0x10c6>
 800514a:	4b8a      	ldr	r3, [pc, #552]	@ (8005374 <checkAktifCalisma+0x12e0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <checkAktifCalisma+0x10c6>
 8005152:	4b86      	ldr	r3, [pc, #536]	@ (800536c <checkAktifCalisma+0x12d8>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800515a:	2201      	movs	r2, #1
 800515c:	2120      	movs	r1, #32
 800515e:	4886      	ldr	r0, [pc, #536]	@ (8005378 <checkAktifCalisma+0x12e4>)
 8005160:	f004 feff 	bl	8009f62 <HAL_GPIO_WritePin>
 8005164:	e004      	b.n	8005170 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005166:	2200      	movs	r2, #0
 8005168:	2120      	movs	r1, #32
 800516a:	4883      	ldr	r0, [pc, #524]	@ (8005378 <checkAktifCalisma+0x12e4>)
 800516c:	f004 fef9 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005170:	4b82      	ldr	r3, [pc, #520]	@ (800537c <checkAktifCalisma+0x12e8>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <checkAktifCalisma+0x1102>
 8005178:	2102      	movs	r1, #2
 800517a:	4881      	ldr	r0, [pc, #516]	@ (8005380 <checkAktifCalisma+0x12ec>)
 800517c:	f004 feda 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <checkAktifCalisma+0x1102>
 8005186:	4b7f      	ldr	r3, [pc, #508]	@ (8005384 <checkAktifCalisma+0x12f0>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <checkAktifCalisma+0x1102>
 800518e:	4b7e      	ldr	r3, [pc, #504]	@ (8005388 <checkAktifCalisma+0x12f4>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d112      	bne.n	80051bc <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005196:	4b7d      	ldr	r3, [pc, #500]	@ (800538c <checkAktifCalisma+0x12f8>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d066      	beq.n	800526c <checkAktifCalisma+0x11d8>
 800519e:	2104      	movs	r1, #4
 80051a0:	4877      	ldr	r0, [pc, #476]	@ (8005380 <checkAktifCalisma+0x12ec>)
 80051a2:	f004 fec7 	bl	8009f34 <HAL_GPIO_ReadPin>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d15f      	bne.n	800526c <checkAktifCalisma+0x11d8>
 80051ac:	4b75      	ldr	r3, [pc, #468]	@ (8005384 <checkAktifCalisma+0x12f0>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05b      	beq.n	800526c <checkAktifCalisma+0x11d8>
 80051b4:	4b74      	ldr	r3, [pc, #464]	@ (8005388 <checkAktifCalisma+0x12f4>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d057      	beq.n	800526c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80051bc:	4b74      	ldr	r3, [pc, #464]	@ (8005390 <checkAktifCalisma+0x12fc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b72      	ldr	r3, [pc, #456]	@ (8005390 <checkAktifCalisma+0x12fc>)
 80051c6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80051c8:	4b71      	ldr	r3, [pc, #452]	@ (8005390 <checkAktifCalisma+0x12fc>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d908      	bls.n	80051e2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80051d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005390 <checkAktifCalisma+0x12fc>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80051d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005394 <checkAktifCalisma+0x1300>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b6d      	ldr	r3, [pc, #436]	@ (8005394 <checkAktifCalisma+0x1300>)
 80051e0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80051e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005394 <checkAktifCalisma+0x1300>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b09      	cmp	r3, #9
 80051e8:	d908      	bls.n	80051fc <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80051ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005394 <checkAktifCalisma+0x1300>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80051f0:	4b69      	ldr	r3, [pc, #420]	@ (8005398 <checkAktifCalisma+0x1304>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b67      	ldr	r3, [pc, #412]	@ (8005398 <checkAktifCalisma+0x1304>)
 80051fa:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80051fc:	4b66      	ldr	r3, [pc, #408]	@ (8005398 <checkAktifCalisma+0x1304>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b09      	cmp	r3, #9
 8005202:	d908      	bls.n	8005216 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005204:	4b64      	ldr	r3, [pc, #400]	@ (8005398 <checkAktifCalisma+0x1304>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800520a:	4b64      	ldr	r3, [pc, #400]	@ (800539c <checkAktifCalisma+0x1308>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b62      	ldr	r3, [pc, #392]	@ (800539c <checkAktifCalisma+0x1308>)
 8005214:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005216:	4b61      	ldr	r3, [pc, #388]	@ (800539c <checkAktifCalisma+0x1308>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b09      	cmp	r3, #9
 800521c:	d908      	bls.n	8005230 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800521e:	4b5f      	ldr	r3, [pc, #380]	@ (800539c <checkAktifCalisma+0x1308>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005224:	4b5e      	ldr	r3, [pc, #376]	@ (80053a0 <checkAktifCalisma+0x130c>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	4b5c      	ldr	r3, [pc, #368]	@ (80053a0 <checkAktifCalisma+0x130c>)
 800522e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005230:	4b5b      	ldr	r3, [pc, #364]	@ (80053a0 <checkAktifCalisma+0x130c>)
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	4b5b      	ldr	r3, [pc, #364]	@ (80053a4 <checkAktifCalisma+0x1310>)
 8005236:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800523a:	4b58      	ldr	r3, [pc, #352]	@ (800539c <checkAktifCalisma+0x1308>)
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <checkAktifCalisma+0x1310>)
 8005240:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005242:	4b55      	ldr	r3, [pc, #340]	@ (8005398 <checkAktifCalisma+0x1304>)
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	4b57      	ldr	r3, [pc, #348]	@ (80053a4 <checkAktifCalisma+0x1310>)
 8005248:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800524a:	4b52      	ldr	r3, [pc, #328]	@ (8005394 <checkAktifCalisma+0x1300>)
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	4b55      	ldr	r3, [pc, #340]	@ (80053a4 <checkAktifCalisma+0x1310>)
 8005250:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005252:	4b4f      	ldr	r3, [pc, #316]	@ (8005390 <checkAktifCalisma+0x12fc>)
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	4b53      	ldr	r3, [pc, #332]	@ (80053a4 <checkAktifCalisma+0x1310>)
 8005258:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800525a:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <checkAktifCalisma+0x1314>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005260:	4b46      	ldr	r3, [pc, #280]	@ (800537c <checkAktifCalisma+0x12e8>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005266:	4b49      	ldr	r3, [pc, #292]	@ (800538c <checkAktifCalisma+0x12f8>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800526c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005270:	484e      	ldr	r0, [pc, #312]	@ (80053ac <checkAktifCalisma+0x1318>)
 8005272:	f004 fe5f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d016      	beq.n	80052aa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800527c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005280:	484a      	ldr	r0, [pc, #296]	@ (80053ac <checkAktifCalisma+0x1318>)
 8005282:	f004 fe57 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00e      	beq.n	80052aa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800528c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005290:	4846      	ldr	r0, [pc, #280]	@ (80053ac <checkAktifCalisma+0x1318>)
 8005292:	f004 fe4f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800529c:	2140      	movs	r1, #64	@ 0x40
 800529e:	4838      	ldr	r0, [pc, #224]	@ (8005380 <checkAktifCalisma+0x12ec>)
 80052a0:	f004 fe48 	bl	8009f34 <HAL_GPIO_ReadPin>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <checkAktifCalisma+0x121e>
			startBasili=1;
 80052aa:	4b41      	ldr	r3, [pc, #260]	@ (80053b0 <checkAktifCalisma+0x131c>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80052b2:	4b3f      	ldr	r3, [pc, #252]	@ (80053b0 <checkAktifCalisma+0x131c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80052b8:	4b3d      	ldr	r3, [pc, #244]	@ (80053b0 <checkAktifCalisma+0x131c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <checkAktifCalisma+0x125a>
 80052c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052c4:	4839      	ldr	r0, [pc, #228]	@ (80053ac <checkAktifCalisma+0x1318>)
 80052c6:	f004 fe35 	bl	8009f34 <HAL_GPIO_ReadPin>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d10e      	bne.n	80052ee <checkAktifCalisma+0x125a>
			hataVar=1;
 80052d0:	4b38      	ldr	r3, [pc, #224]	@ (80053b4 <checkAktifCalisma+0x1320>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7fb fbac 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80052dc:	2001      	movs	r0, #1
 80052de:	f7fb fb51 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80052e2:	f003 f8df 	bl	80084a4 <convertAndSendData>
			acilstophatasi=1;
 80052e6:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <checkAktifCalisma+0x1324>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e018      	b.n	8005320 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80052ee:	4b32      	ldr	r3, [pc, #200]	@ (80053b8 <checkAktifCalisma+0x1324>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d014      	beq.n	8005320 <checkAktifCalisma+0x128c>
 80052f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052fa:	482c      	ldr	r0, [pc, #176]	@ (80053ac <checkAktifCalisma+0x1318>)
 80052fc:	f004 fe1a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10c      	bne.n	8005320 <checkAktifCalisma+0x128c>
 8005306:	4b2a      	ldr	r3, [pc, #168]	@ (80053b0 <checkAktifCalisma+0x131c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f083 0301 	eor.w	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005314:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <checkAktifCalisma+0x1324>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800531a:	2001      	movs	r0, #1
 800531c:	f7fe fcb4 	bl	8003c88 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005320:	4b26      	ldr	r3, [pc, #152]	@ (80053bc <checkAktifCalisma+0x1328>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f083 0301 	eor.w	r3, r3, #1
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d04e      	beq.n	80053cc <checkAktifCalisma+0x1338>
 800532e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005332:	481e      	ldr	r0, [pc, #120]	@ (80053ac <checkAktifCalisma+0x1318>)
 8005334:	f004 fdfe 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <checkAktifCalisma+0x12b2>
 800533e:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <checkAktifCalisma+0x132c>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d042      	beq.n	80053cc <checkAktifCalisma+0x1338>
 8005346:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <checkAktifCalisma+0x1330>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d13e      	bne.n	80053cc <checkAktifCalisma+0x1338>
			hataVar=1;
 800534e:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <checkAktifCalisma+0x1320>)
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005354:	2002      	movs	r0, #2
 8005356:	f7fb fb6d 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 800535a:	2002      	movs	r0, #2
 800535c:	f7fb fb12 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005360:	f003 f8a0 	bl	80084a4 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005364:	4b18      	ldr	r3, [pc, #96]	@ (80053c8 <checkAktifCalisma+0x1334>)
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e047      	b.n	80053fc <checkAktifCalisma+0x1368>
 800536c:	20001113 	.word	0x20001113
 8005370:	20001112 	.word	0x20001112
 8005374:	20001111 	.word	0x20001111
 8005378:	40010800 	.word	0x40010800
 800537c:	20001107 	.word	0x20001107
 8005380:	40011000 	.word	0x40011000
 8005384:	200010ce 	.word	0x200010ce
 8005388:	2000110a 	.word	0x2000110a
 800538c:	20001108 	.word	0x20001108
 8005390:	200010c5 	.word	0x200010c5
 8005394:	200010c6 	.word	0x200010c6
 8005398:	20000000 	.word	0x20000000
 800539c:	20000001 	.word	0x20000001
 80053a0:	200010c7 	.word	0x200010c7
 80053a4:	20000ff0 	.word	0x20000ff0
 80053a8:	200010f4 	.word	0x200010f4
 80053ac:	40010c00 	.word	0x40010c00
 80053b0:	20001116 	.word	0x20001116
 80053b4:	2000111d 	.word	0x2000111d
 80053b8:	20001118 	.word	0x20001118
 80053bc:	2000111f 	.word	0x2000111f
 80053c0:	20001129 	.word	0x20001129
 80053c4:	200010cc 	.word	0x200010cc
 80053c8:	20001119 	.word	0x20001119
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80053cc:	4b9b      	ldr	r3, [pc, #620]	@ (800563c <checkAktifCalisma+0x15a8>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <checkAktifCalisma+0x1368>
 80053d4:	4b9a      	ldr	r3, [pc, #616]	@ (8005640 <checkAktifCalisma+0x15ac>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00f      	beq.n	80053fc <checkAktifCalisma+0x1368>
 80053dc:	4b99      	ldr	r3, [pc, #612]	@ (8005644 <checkAktifCalisma+0x15b0>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80053ea:	4b94      	ldr	r3, [pc, #592]	@ (800563c <checkAktifCalisma+0x15a8>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80053f0:	4b95      	ldr	r3, [pc, #596]	@ (8005648 <checkAktifCalisma+0x15b4>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80053f6:	2002      	movs	r0, #2
 80053f8:	f7fe fc46 	bl	8003c88 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80053fc:	4b93      	ldr	r3, [pc, #588]	@ (800564c <checkAktifCalisma+0x15b8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11e      	bne.n	8005442 <checkAktifCalisma+0x13ae>
 8005404:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <checkAktifCalisma+0x15bc>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d11a      	bne.n	8005442 <checkAktifCalisma+0x13ae>
 800540c:	4b91      	ldr	r3, [pc, #580]	@ (8005654 <checkAktifCalisma+0x15c0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <checkAktifCalisma+0x13ae>
 8005414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005418:	488f      	ldr	r0, [pc, #572]	@ (8005658 <checkAktifCalisma+0x15c4>)
 800541a:	f004 fd8b 	bl	8009f34 <HAL_GPIO_ReadPin>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10e      	bne.n	8005442 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005424:	4b8d      	ldr	r3, [pc, #564]	@ (800565c <checkAktifCalisma+0x15c8>)
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800542a:	2003      	movs	r0, #3
 800542c:	f7fb fb02 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005430:	2003      	movs	r0, #3
 8005432:	f7fb faa7 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005436:	f003 f835 	bl	80084a4 <convertAndSendData>
			basinchatasi=1;
 800543a:	4b89      	ldr	r3, [pc, #548]	@ (8005660 <checkAktifCalisma+0x15cc>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e015      	b.n	800546e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005442:	4b87      	ldr	r3, [pc, #540]	@ (8005660 <checkAktifCalisma+0x15cc>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d011      	beq.n	800546e <checkAktifCalisma+0x13da>
 800544a:	4b80      	ldr	r3, [pc, #512]	@ (800564c <checkAktifCalisma+0x15b8>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10d      	bne.n	800546e <checkAktifCalisma+0x13da>
 8005452:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005456:	4883      	ldr	r0, [pc, #524]	@ (8005664 <checkAktifCalisma+0x15d0>)
 8005458:	f004 fd6c 	bl	8009f34 <HAL_GPIO_ReadPin>
 800545c:	4603      	mov	r3, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005462:	4b7f      	ldr	r3, [pc, #508]	@ (8005660 <checkAktifCalisma+0x15cc>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005468:	2003      	movs	r0, #3
 800546a:	f7fe fc0d 	bl	8003c88 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800546e:	4b7e      	ldr	r3, [pc, #504]	@ (8005668 <checkAktifCalisma+0x15d4>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <checkAktifCalisma+0x13ea>
 8005476:	4b7d      	ldr	r3, [pc, #500]	@ (800566c <checkAktifCalisma+0x15d8>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01e      	beq.n	80054bc <checkAktifCalisma+0x1428>
 800547e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005482:	487b      	ldr	r0, [pc, #492]	@ (8005670 <checkAktifCalisma+0x15dc>)
 8005484:	f004 fd56 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d116      	bne.n	80054bc <checkAktifCalisma+0x1428>
 800548e:	4b79      	ldr	r3, [pc, #484]	@ (8005674 <checkAktifCalisma+0x15e0>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d003      	beq.n	800549e <checkAktifCalisma+0x140a>
 8005496:	4b77      	ldr	r3, [pc, #476]	@ (8005674 <checkAktifCalisma+0x15e0>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d10e      	bne.n	80054bc <checkAktifCalisma+0x1428>
			hataVar=1;
 800549e:	4b6f      	ldr	r3, [pc, #444]	@ (800565c <checkAktifCalisma+0x15c8>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80054a4:	2004      	movs	r0, #4
 80054a6:	f7fb fac5 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80054aa:	2004      	movs	r0, #4
 80054ac:	f7fb fa6a 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80054b0:	f002 fff8 	bl	80084a4 <convertAndSendData>
			katkapisivicihatasi=1;
 80054b4:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <checkAktifCalisma+0x15e4>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e01f      	b.n	80054fc <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80054bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005678 <checkAktifCalisma+0x15e4>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <checkAktifCalisma+0x1468>
 80054c4:	4b6d      	ldr	r3, [pc, #436]	@ (800567c <checkAktifCalisma+0x15e8>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d017      	beq.n	80054fc <checkAktifCalisma+0x1468>
 80054cc:	4b66      	ldr	r3, [pc, #408]	@ (8005668 <checkAktifCalisma+0x15d4>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <checkAktifCalisma+0x1468>
 80054da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054de:	4864      	ldr	r0, [pc, #400]	@ (8005670 <checkAktifCalisma+0x15dc>)
 80054e0:	f004 fd28 	bl	8009f34 <HAL_GPIO_ReadPin>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d108      	bne.n	80054fc <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80054ea:	4b63      	ldr	r3, [pc, #396]	@ (8005678 <checkAktifCalisma+0x15e4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80054f0:	4b5e      	ldr	r3, [pc, #376]	@ (800566c <checkAktifCalisma+0x15d8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80054f6:	2004      	movs	r0, #4
 80054f8:	f7fe fbc6 	bl	8003c88 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80054fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005668 <checkAktifCalisma+0x15d4>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <checkAktifCalisma+0x1478>
 8005504:	4b5e      	ldr	r3, [pc, #376]	@ (8005680 <checkAktifCalisma+0x15ec>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01e      	beq.n	800554a <checkAktifCalisma+0x14b6>
 800550c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005510:	4857      	ldr	r0, [pc, #348]	@ (8005670 <checkAktifCalisma+0x15dc>)
 8005512:	f004 fd0f 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d116      	bne.n	800554a <checkAktifCalisma+0x14b6>
 800551c:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <checkAktifCalisma+0x15e0>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d003      	beq.n	800552c <checkAktifCalisma+0x1498>
 8005524:	4b53      	ldr	r3, [pc, #332]	@ (8005674 <checkAktifCalisma+0x15e0>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d10e      	bne.n	800554a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800552c:	4b4b      	ldr	r3, [pc, #300]	@ (800565c <checkAktifCalisma+0x15c8>)
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8005532:	2005      	movs	r0, #5
 8005534:	f7fb fa7e 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005538:	2005      	movs	r0, #5
 800553a:	f7fb fa23 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800553e:	f002 ffb1 	bl	80084a4 <convertAndSendData>
			tablakapisivicihatasi=1;
 8005542:	4b50      	ldr	r3, [pc, #320]	@ (8005684 <checkAktifCalisma+0x15f0>)
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e023      	b.n	8005592 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800554a:	4b4e      	ldr	r3, [pc, #312]	@ (8005684 <checkAktifCalisma+0x15f0>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01f      	beq.n	8005592 <checkAktifCalisma+0x14fe>
 8005552:	4b4a      	ldr	r3, [pc, #296]	@ (800567c <checkAktifCalisma+0x15e8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <checkAktifCalisma+0x14fe>
 800555a:	4b43      	ldr	r3, [pc, #268]	@ (8005668 <checkAktifCalisma+0x15d4>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d014      	beq.n	8005592 <checkAktifCalisma+0x14fe>
 8005568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800556c:	4840      	ldr	r0, [pc, #256]	@ (8005670 <checkAktifCalisma+0x15dc>)
 800556e:	f004 fce1 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <checkAktifCalisma+0x14fe>
 8005578:	4b40      	ldr	r3, [pc, #256]	@ (800567c <checkAktifCalisma+0x15e8>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005580:	4b40      	ldr	r3, [pc, #256]	@ (8005684 <checkAktifCalisma+0x15f0>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8005586:	4b3e      	ldr	r3, [pc, #248]	@ (8005680 <checkAktifCalisma+0x15ec>)
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800558c:	2005      	movs	r0, #5
 800558e:	f7fe fb7b 	bl	8003c88 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8005592:	4b30      	ldr	r3, [pc, #192]	@ (8005654 <checkAktifCalisma+0x15c0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <checkAktifCalisma+0x1516>
 800559a:	4b2a      	ldr	r3, [pc, #168]	@ (8005644 <checkAktifCalisma+0x15b0>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <checkAktifCalisma+0x1516>
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <checkAktifCalisma+0x15f4>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80055aa:	4b38      	ldr	r3, [pc, #224]	@ (800568c <checkAktifCalisma+0x15f8>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b38      	ldr	r3, [pc, #224]	@ (8005690 <checkAktifCalisma+0x15fc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	4a37      	ldr	r2, [pc, #220]	@ (8005694 <checkAktifCalisma+0x1600>)
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d30d      	bcc.n	80055d8 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <checkAktifCalisma+0x15c8>)
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80055c2:	2006      	movs	r0, #6
 80055c4:	f7fb fa36 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80055c8:	2006      	movs	r0, #6
 80055ca:	f7fb f9db 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 80055ce:	f002 ff69 	bl	80084a4 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80055d2:	4b31      	ldr	r3, [pc, #196]	@ (8005698 <checkAktifCalisma+0x1604>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80055d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005698 <checkAktifCalisma+0x1604>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d013      	beq.n	8005608 <checkAktifCalisma+0x1574>
 80055e0:	2108      	movs	r1, #8
 80055e2:	4823      	ldr	r0, [pc, #140]	@ (8005670 <checkAktifCalisma+0x15dc>)
 80055e4:	f004 fca6 	bl	8009f34 <HAL_GPIO_ReadPin>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <checkAktifCalisma+0x1574>
 80055ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <checkAktifCalisma+0x15d4>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f083 0301 	eor.w	r3, r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80055fc:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <checkAktifCalisma+0x1604>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8005602:	2006      	movs	r0, #6
 8005604:	f7fe fb40 	bl	8003c88 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005608:	4b24      	ldr	r3, [pc, #144]	@ (800569c <checkAktifCalisma+0x1608>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <checkAktifCalisma+0x1594>
 8005610:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <checkAktifCalisma+0x15b0>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <checkAktifCalisma+0x1594>
 8005618:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <checkAktifCalisma+0x160c>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <checkAktifCalisma+0x1594>
 8005620:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <checkAktifCalisma+0x15f4>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d03f      	beq.n	80056a8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8005628:	4b1e      	ldr	r3, [pc, #120]	@ (80056a4 <checkAktifCalisma+0x1610>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800562e:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <checkAktifCalisma+0x15d8>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <checkAktifCalisma+0x15ec>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e03c      	b.n	80056b6 <checkAktifCalisma+0x1622>
 800563c:	20001119 	.word	0x20001119
 8005640:	2000111f 	.word	0x2000111f
 8005644:	20001100 	.word	0x20001100
 8005648:	20001129 	.word	0x20001129
 800564c:	200010cb 	.word	0x200010cb
 8005650:	200010cf 	.word	0x200010cf
 8005654:	2000111c 	.word	0x2000111c
 8005658:	40011000 	.word	0x40011000
 800565c:	2000111d 	.word	0x2000111d
 8005660:	20001126 	.word	0x20001126
 8005664:	40010c00 	.word	0x40010c00
 8005668:	20001116 	.word	0x20001116
 800566c:	2000112a 	.word	0x2000112a
 8005670:	40010800 	.word	0x40010800
 8005674:	200010d0 	.word	0x200010d0
 8005678:	20001127 	.word	0x20001127
 800567c:	2000110a 	.word	0x2000110a
 8005680:	2000112b 	.word	0x2000112b
 8005684:	20001128 	.word	0x20001128
 8005688:	200010ff 	.word	0x200010ff
 800568c:	200010a0 	.word	0x200010a0
 8005690:	200010b4 	.word	0x200010b4
 8005694:	200010e0 	.word	0x200010e0
 8005698:	20001117 	.word	0x20001117
 800569c:	200010fd 	.word	0x200010fd
 80056a0:	200010fe 	.word	0x200010fe
 80056a4:	2000111e 	.word	0x2000111e
		} else {
			makineCalisiyor=1;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <checkAktifCalisma+0x1690>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80056ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005728 <checkAktifCalisma+0x1694>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <checkAktifCalisma+0x1698>)
 80056b4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80056b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005730 <checkAktifCalisma+0x169c>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02f      	beq.n	800571e <checkAktifCalisma+0x168a>
 80056be:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <checkAktifCalisma+0x16a0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d028      	beq.n	800571e <checkAktifCalisma+0x168a>
 80056cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005738 <checkAktifCalisma+0x16a4>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f083 0301 	eor.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d021      	beq.n	800571e <checkAktifCalisma+0x168a>
 80056da:	4b18      	ldr	r3, [pc, #96]	@ (800573c <checkAktifCalisma+0x16a8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f083 0301 	eor.w	r3, r3, #1
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80056e8:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <checkAktifCalisma+0x16ac>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f083 0301 	eor.w	r3, r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d013      	beq.n	800571e <checkAktifCalisma+0x168a>
 80056f6:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <checkAktifCalisma+0x16b0>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f083 0301 	eor.w	r3, r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <checkAktifCalisma+0x168a>
 8005704:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <checkAktifCalisma+0x16b4>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <checkAktifCalisma+0x168a>
			hataVar=0;
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <checkAktifCalisma+0x169c>)
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8005718:	2007      	movs	r0, #7
 800571a:	f7fe fab5 	bl	8003c88 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	2000111e 	.word	0x2000111e
 8005728:	200010a0 	.word	0x200010a0
 800572c:	200010b4 	.word	0x200010b4
 8005730:	2000111d 	.word	0x2000111d
 8005734:	20001118 	.word	0x20001118
 8005738:	20001119 	.word	0x20001119
 800573c:	20001126 	.word	0x20001126
 8005740:	20001127 	.word	0x20001127
 8005744:	20001128 	.word	0x20001128
 8005748:	20001117 	.word	0x20001117

0800574c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005750:	4b8b      	ldr	r3, [pc, #556]	@ (8005980 <checkDemoModCalisma+0x234>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 8229 	bne.w	8005bac <checkDemoModCalisma+0x460>
 800575a:	4b8a      	ldr	r3, [pc, #552]	@ (8005984 <checkDemoModCalisma+0x238>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8224 	beq.w	8005bac <checkDemoModCalisma+0x460>
 8005764:	4b88      	ldr	r3, [pc, #544]	@ (8005988 <checkDemoModCalisma+0x23c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f040 821f 	bne.w	8005bac <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800576e:	2102      	movs	r1, #2
 8005770:	4886      	ldr	r0, [pc, #536]	@ (800598c <checkDemoModCalisma+0x240>)
 8005772:	f004 fbdf 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11d      	bne.n	80057b8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800577c:	4b84      	ldr	r3, [pc, #528]	@ (8005990 <checkDemoModCalisma+0x244>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800578a:	4b82      	ldr	r3, [pc, #520]	@ (8005994 <checkDemoModCalisma+0x248>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005798:	4b7f      	ldr	r3, [pc, #508]	@ (8005998 <checkDemoModCalisma+0x24c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f083 0301 	eor.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80057a6:	2201      	movs	r2, #1
 80057a8:	2104      	movs	r1, #4
 80057aa:	487c      	ldr	r0, [pc, #496]	@ (800599c <checkDemoModCalisma+0x250>)
 80057ac:	f004 fbd9 	bl	8009f62 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80057b0:	4b7b      	ldr	r3, [pc, #492]	@ (80059a0 <checkDemoModCalisma+0x254>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e00e      	b.n	80057d6 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80057b8:	2102      	movs	r1, #2
 80057ba:	4874      	ldr	r0, [pc, #464]	@ (800598c <checkDemoModCalisma+0x240>)
 80057bc:	f004 fbba 	bl	8009f34 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80057c6:	2200      	movs	r2, #0
 80057c8:	2104      	movs	r1, #4
 80057ca:	4874      	ldr	r0, [pc, #464]	@ (800599c <checkDemoModCalisma+0x250>)
 80057cc:	f004 fbc9 	bl	8009f62 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80057d0:	4b73      	ldr	r3, [pc, #460]	@ (80059a0 <checkDemoModCalisma+0x254>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80057d6:	4b72      	ldr	r3, [pc, #456]	@ (80059a0 <checkDemoModCalisma+0x254>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <checkDemoModCalisma+0xaa>
 80057de:	4b6d      	ldr	r3, [pc, #436]	@ (8005994 <checkDemoModCalisma+0x248>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <checkDemoModCalisma+0xaa>
 80057e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005998 <checkDemoModCalisma+0x24c>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <checkDemoModCalisma+0xaa>
 80057ee:	4b68      	ldr	r3, [pc, #416]	@ (8005990 <checkDemoModCalisma+0x244>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80057f6:	2201      	movs	r2, #1
 80057f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057fc:	4867      	ldr	r0, [pc, #412]	@ (800599c <checkDemoModCalisma+0x250>)
 80057fe:	f004 fbb0 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005802:	2201      	movs	r2, #1
 8005804:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005808:	4864      	ldr	r0, [pc, #400]	@ (800599c <checkDemoModCalisma+0x250>)
 800580a:	f004 fbaa 	bl	8009f62 <HAL_GPIO_WritePin>
 800580e:	e00b      	b.n	8005828 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005810:	2200      	movs	r2, #0
 8005812:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005816:	4861      	ldr	r0, [pc, #388]	@ (800599c <checkDemoModCalisma+0x250>)
 8005818:	f004 fba3 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800581c:	2200      	movs	r2, #0
 800581e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005822:	485e      	ldr	r0, [pc, #376]	@ (800599c <checkDemoModCalisma+0x250>)
 8005824:	f004 fb9d 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005828:	2102      	movs	r1, #2
 800582a:	4858      	ldr	r0, [pc, #352]	@ (800598c <checkDemoModCalisma+0x240>)
 800582c:	f004 fb82 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10d      	bne.n	8005852 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800583a:	4854      	ldr	r0, [pc, #336]	@ (800598c <checkDemoModCalisma+0x240>)
 800583c:	f004 fb7a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d105      	bne.n	8005852 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8005846:	4b56      	ldr	r3, [pc, #344]	@ (80059a0 <checkDemoModCalisma+0x254>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f083 0301 	eor.w	r3, r3, #1
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005852:	2102      	movs	r1, #2
 8005854:	484d      	ldr	r0, [pc, #308]	@ (800598c <checkDemoModCalisma+0x240>)
 8005856:	f004 fb6d 	bl	8009f34 <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d125      	bne.n	80058ac <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005860:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005864:	4849      	ldr	r0, [pc, #292]	@ (800598c <checkDemoModCalisma+0x240>)
 8005866:	f004 fb65 	bl	8009f34 <HAL_GPIO_ReadPin>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11d      	bne.n	80058ac <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8005870:	4b4b      	ldr	r3, [pc, #300]	@ (80059a0 <checkDemoModCalisma+0x254>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800587e:	4b44      	ldr	r3, [pc, #272]	@ (8005990 <checkDemoModCalisma+0x244>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f083 0301 	eor.w	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800588c:	4b42      	ldr	r3, [pc, #264]	@ (8005998 <checkDemoModCalisma+0x24c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f083 0301 	eor.w	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800589a:	2201      	movs	r2, #1
 800589c:	2120      	movs	r1, #32
 800589e:	483b      	ldr	r0, [pc, #236]	@ (800598c <checkDemoModCalisma+0x240>)
 80058a0:	f004 fb5f 	bl	8009f62 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80058a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005994 <checkDemoModCalisma+0x248>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e007      	b.n	80058bc <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80058ac:	2200      	movs	r2, #0
 80058ae:	2120      	movs	r1, #32
 80058b0:	4836      	ldr	r0, [pc, #216]	@ (800598c <checkDemoModCalisma+0x240>)
 80058b2:	f004 fb56 	bl	8009f62 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80058b6:	4b37      	ldr	r3, [pc, #220]	@ (8005994 <checkDemoModCalisma+0x248>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058bc:	2102      	movs	r1, #2
 80058be:	4833      	ldr	r0, [pc, #204]	@ (800598c <checkDemoModCalisma+0x240>)
 80058c0:	f004 fb38 	bl	8009f34 <HAL_GPIO_ReadPin>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d125      	bne.n	8005916 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80058ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058ce:	482f      	ldr	r0, [pc, #188]	@ (800598c <checkDemoModCalisma+0x240>)
 80058d0:	f004 fb30 	bl	8009f34 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11d      	bne.n	8005916 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80058da:	4b31      	ldr	r3, [pc, #196]	@ (80059a0 <checkDemoModCalisma+0x254>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80058e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005994 <checkDemoModCalisma+0x248>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f083 0301 	eor.w	r3, r3, #1
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00f      	beq.n	8005916 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80058f6:	4b26      	ldr	r3, [pc, #152]	@ (8005990 <checkDemoModCalisma+0x244>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f083 0301 	eor.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005904:	2201      	movs	r2, #1
 8005906:	2110      	movs	r1, #16
 8005908:	4820      	ldr	r0, [pc, #128]	@ (800598c <checkDemoModCalisma+0x240>)
 800590a:	f004 fb2a 	bl	8009f62 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800590e:	4b22      	ldr	r3, [pc, #136]	@ (8005998 <checkDemoModCalisma+0x24c>)
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e007      	b.n	8005926 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005916:	2200      	movs	r2, #0
 8005918:	2110      	movs	r1, #16
 800591a:	481c      	ldr	r0, [pc, #112]	@ (800598c <checkDemoModCalisma+0x240>)
 800591c:	f004 fb21 	bl	8009f62 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <checkDemoModCalisma+0x24c>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005926:	2104      	movs	r1, #4
 8005928:	4818      	ldr	r0, [pc, #96]	@ (800598c <checkDemoModCalisma+0x240>)
 800592a:	f004 fb03 	bl	8009f34 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d139      	bne.n	80059a8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8005934:	4b1a      	ldr	r3, [pc, #104]	@ (80059a0 <checkDemoModCalisma+0x254>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f083 0301 	eor.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d032      	beq.n	80059a8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8005942:	4b15      	ldr	r3, [pc, #84]	@ (8005998 <checkDemoModCalisma+0x24c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f083 0301 	eor.w	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02b      	beq.n	80059a8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8005950:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <checkDemoModCalisma+0x248>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d024      	beq.n	80059a8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800595e:	2201      	movs	r2, #1
 8005960:	2102      	movs	r1, #2
 8005962:	480e      	ldr	r0, [pc, #56]	@ (800599c <checkDemoModCalisma+0x250>)
 8005964:	f004 fafd 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005968:	2201      	movs	r2, #1
 800596a:	2101      	movs	r1, #1
 800596c:	480b      	ldr	r0, [pc, #44]	@ (800599c <checkDemoModCalisma+0x250>)
 800596e:	f004 faf8 	bl	8009f62 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <checkDemoModCalisma+0x244>)
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <checkDemoModCalisma+0x258>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e027      	b.n	80059d0 <checkDemoModCalisma+0x284>
 8005980:	200010e6 	.word	0x200010e6
 8005984:	2000111a 	.word	0x2000111a
 8005988:	200010e5 	.word	0x200010e5
 800598c:	40011000 	.word	0x40011000
 8005990:	20001121 	.word	0x20001121
 8005994:	20001122 	.word	0x20001122
 8005998:	20001123 	.word	0x20001123
 800599c:	40010c00 	.word	0x40010c00
 80059a0:	20001120 	.word	0x20001120
 80059a4:	20001106 	.word	0x20001106
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80059a8:	2104      	movs	r1, #4
 80059aa:	48a0      	ldr	r0, [pc, #640]	@ (8005c2c <checkDemoModCalisma+0x4e0>)
 80059ac:	f004 fac2 	bl	8009f34 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10c      	bne.n	80059d0 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2102      	movs	r1, #2
 80059ba:	489d      	ldr	r0, [pc, #628]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 80059bc:	f004 fad1 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80059c0:	2200      	movs	r2, #0
 80059c2:	2101      	movs	r1, #1
 80059c4:	489a      	ldr	r0, [pc, #616]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 80059c6:	f004 facc 	bl	8009f62 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80059ca:	4b9a      	ldr	r3, [pc, #616]	@ (8005c34 <checkDemoModCalisma+0x4e8>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80059d0:	2104      	movs	r1, #4
 80059d2:	4896      	ldr	r0, [pc, #600]	@ (8005c2c <checkDemoModCalisma+0x4e0>)
 80059d4:	f004 faae 	bl	8009f34 <HAL_GPIO_ReadPin>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d10d      	bne.n	80059fa <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059de:	2201      	movs	r2, #1
 80059e0:	2180      	movs	r1, #128	@ 0x80
 80059e2:	4895      	ldr	r0, [pc, #596]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 80059e4:	f004 fabd 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80059e8:	2201      	movs	r2, #1
 80059ea:	2120      	movs	r1, #32
 80059ec:	4892      	ldr	r0, [pc, #584]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 80059ee:	f004 fab8 	bl	8009f62 <HAL_GPIO_WritePin>
			timer3 = millis;
 80059f2:	4b92      	ldr	r3, [pc, #584]	@ (8005c3c <checkDemoModCalisma+0x4f0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a92      	ldr	r2, [pc, #584]	@ (8005c40 <checkDemoModCalisma+0x4f4>)
 80059f8:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80059fa:	4b90      	ldr	r3, [pc, #576]	@ (8005c3c <checkDemoModCalisma+0x4f0>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b90      	ldr	r3, [pc, #576]	@ (8005c40 <checkDemoModCalisma+0x4f4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d909      	bls.n	8005a1c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	488a      	ldr	r0, [pc, #552]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005a0e:	f004 faa8 	bl	8009f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005a12:	2200      	movs	r2, #0
 8005a14:	2120      	movs	r1, #32
 8005a16:	4888      	ldr	r0, [pc, #544]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005a18:	f004 faa3 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	4883      	ldr	r0, [pc, #524]	@ (8005c2c <checkDemoModCalisma+0x4e0>)
 8005a20:	f004 fa88 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d108      	bne.n	8005a3c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2140      	movs	r1, #64	@ 0x40
 8005a2e:	4882      	ldr	r0, [pc, #520]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005a30:	f004 fa97 	bl	8009f62 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005a34:	4b81      	ldr	r3, [pc, #516]	@ (8005c3c <checkDemoModCalisma+0x4f0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a81      	ldr	r2, [pc, #516]	@ (8005c40 <checkDemoModCalisma+0x4f4>)
 8005a3a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c3c <checkDemoModCalisma+0x4f0>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b7f      	ldr	r3, [pc, #508]	@ (8005c40 <checkDemoModCalisma+0x4f4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d904      	bls.n	8005a54 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2140      	movs	r1, #64	@ 0x40
 8005a4e:	487a      	ldr	r0, [pc, #488]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005a50:	f004 fa87 	bl	8009f62 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005a54:	4b7b      	ldr	r3, [pc, #492]	@ (8005c44 <checkDemoModCalisma+0x4f8>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d058      	beq.n	8005b0e <checkDemoModCalisma+0x3c2>
 8005a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8005c48 <checkDemoModCalisma+0x4fc>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d054      	beq.n	8005b0e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005a64:	4b79      	ldr	r3, [pc, #484]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b77      	ldr	r3, [pc, #476]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005a6e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005a70:	4b76      	ldr	r3, [pc, #472]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	d908      	bls.n	8005a8a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005a78:	4b74      	ldr	r3, [pc, #464]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005a7e:	4b74      	ldr	r3, [pc, #464]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b72      	ldr	r3, [pc, #456]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005a88:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005a8a:	4b71      	ldr	r3, [pc, #452]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d908      	bls.n	8005aa4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005a92:	4b6f      	ldr	r3, [pc, #444]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005a98:	4b6e      	ldr	r3, [pc, #440]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005aa2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d908      	bls.n	8005abe <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005aac:	4b69      	ldr	r3, [pc, #420]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005ab2:	4b69      	ldr	r3, [pc, #420]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4b67      	ldr	r3, [pc, #412]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005abc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005abe:	4b66      	ldr	r3, [pc, #408]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	d908      	bls.n	8005ad8 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005ac6:	4b64      	ldr	r3, [pc, #400]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005acc:	4b63      	ldr	r3, [pc, #396]	@ (8005c5c <checkDemoModCalisma+0x510>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b61      	ldr	r3, [pc, #388]	@ (8005c5c <checkDemoModCalisma+0x510>)
 8005ad6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005ad8:	4b60      	ldr	r3, [pc, #384]	@ (8005c5c <checkDemoModCalisma+0x510>)
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	4b60      	ldr	r3, [pc, #384]	@ (8005c60 <checkDemoModCalisma+0x514>)
 8005ade:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c60 <checkDemoModCalisma+0x514>)
 8005ae8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005aea:	4b5a      	ldr	r3, [pc, #360]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	4b5c      	ldr	r3, [pc, #368]	@ (8005c60 <checkDemoModCalisma+0x514>)
 8005af0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005af2:	4b57      	ldr	r3, [pc, #348]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c60 <checkDemoModCalisma+0x514>)
 8005af8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005afa:	4b54      	ldr	r3, [pc, #336]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	4b58      	ldr	r3, [pc, #352]	@ (8005c60 <checkDemoModCalisma+0x514>)
 8005b00:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005b02:	4b58      	ldr	r3, [pc, #352]	@ (8005c64 <checkDemoModCalisma+0x518>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005b08:	4b4f      	ldr	r3, [pc, #316]	@ (8005c48 <checkDemoModCalisma+0x4fc>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005b0e:	4b56      	ldr	r3, [pc, #344]	@ (8005c68 <checkDemoModCalisma+0x51c>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 8087 	bne.w	8005c26 <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005b18:	4a54      	ldr	r2, [pc, #336]	@ (8005c6c <checkDemoModCalisma+0x520>)
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f002 fedf 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005b22:	4a53      	ldr	r2, [pc, #332]	@ (8005c70 <checkDemoModCalisma+0x524>)
 8005b24:	2101      	movs	r1, #1
 8005b26:	2002      	movs	r0, #2
 8005b28:	f002 feda 	bl	80088e0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c5c <checkDemoModCalisma+0x510>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	220a      	movs	r2, #10
 8005b32:	4950      	ldr	r1, [pc, #320]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b34:	4618      	mov	r0, r3
 8005b36:	f007 fa29 	bl	800cf8c <itoa>
			lcd_print(2,12,snum);
 8005b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b3c:	210c      	movs	r1, #12
 8005b3e:	2002      	movs	r0, #2
 8005b40:	f002 fece 	bl	80088e0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005b44:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <checkDemoModCalisma+0x50c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	220a      	movs	r2, #10
 8005b4a:	494a      	ldr	r1, [pc, #296]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f007 fa1d 	bl	800cf8c <itoa>
			lcd_print(2,13,snum);
 8005b52:	4a48      	ldr	r2, [pc, #288]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b54:	210d      	movs	r1, #13
 8005b56:	2002      	movs	r0, #2
 8005b58:	f002 fec2 	bl	80088e0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c54 <checkDemoModCalisma+0x508>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	220a      	movs	r2, #10
 8005b62:	4944      	ldr	r1, [pc, #272]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b64:	4618      	mov	r0, r3
 8005b66:	f007 fa11 	bl	800cf8c <itoa>
			lcd_print(2,14,snum);
 8005b6a:	4a42      	ldr	r2, [pc, #264]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b6c:	210e      	movs	r1, #14
 8005b6e:	2002      	movs	r0, #2
 8005b70:	f002 feb6 	bl	80088e0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005b74:	4b36      	ldr	r3, [pc, #216]	@ (8005c50 <checkDemoModCalisma+0x504>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	220a      	movs	r2, #10
 8005b7a:	493e      	ldr	r1, [pc, #248]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f007 fa05 	bl	800cf8c <itoa>
			lcd_print(2,15,snum);
 8005b82:	4a3c      	ldr	r2, [pc, #240]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b84:	210f      	movs	r1, #15
 8005b86:	2002      	movs	r0, #2
 8005b88:	f002 feaa 	bl	80088e0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <checkDemoModCalisma+0x500>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	220a      	movs	r2, #10
 8005b92:	4938      	ldr	r1, [pc, #224]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b94:	4618      	mov	r0, r3
 8005b96:	f007 f9f9 	bl	800cf8c <itoa>
			lcd_print(2,16,snum);
 8005b9a:	4a36      	ldr	r2, [pc, #216]	@ (8005c74 <checkDemoModCalisma+0x528>)
 8005b9c:	2110      	movs	r1, #16
 8005b9e:	2002      	movs	r0, #2
 8005ba0:	f002 fe9e 	bl	80088e0 <lcd_print>
			mesajYazildi=1;
 8005ba4:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <checkDemoModCalisma+0x52c>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005baa:	e03c      	b.n	8005c26 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005bac:	4b33      	ldr	r3, [pc, #204]	@ (8005c7c <checkDemoModCalisma+0x530>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d003      	beq.n	8005bbc <checkDemoModCalisma+0x470>
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8005c68 <checkDemoModCalisma+0x51c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d134      	bne.n	8005c26 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bc2:	481b      	ldr	r0, [pc, #108]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 8005bc4:	f004 f9cd 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bce:	4818      	ldr	r0, [pc, #96]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 8005bd0:	f004 f9c7 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	4815      	ldr	r0, [pc, #84]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 8005bda:	f004 f9c2 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005bde:	2200      	movs	r2, #0
 8005be0:	2102      	movs	r1, #2
 8005be2:	4813      	ldr	r0, [pc, #76]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 8005be4:	f004 f9bd 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005be8:	2200      	movs	r2, #0
 8005bea:	2101      	movs	r1, #1
 8005bec:	4810      	ldr	r0, [pc, #64]	@ (8005c30 <checkDemoModCalisma+0x4e4>)
 8005bee:	f004 f9b8 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2120      	movs	r1, #32
 8005bf6:	480d      	ldr	r0, [pc, #52]	@ (8005c2c <checkDemoModCalisma+0x4e0>)
 8005bf8:	f004 f9b3 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2110      	movs	r1, #16
 8005c00:	480a      	ldr	r0, [pc, #40]	@ (8005c2c <checkDemoModCalisma+0x4e0>)
 8005c02:	f004 f9ae 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2180      	movs	r1, #128	@ 0x80
 8005c0a:	480b      	ldr	r0, [pc, #44]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005c0c:	f004 f9a9 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	@ 0x40
 8005c14:	4808      	ldr	r0, [pc, #32]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005c16:	f004 f9a4 	bl	8009f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2120      	movs	r1, #32
 8005c1e:	4806      	ldr	r0, [pc, #24]	@ (8005c38 <checkDemoModCalisma+0x4ec>)
 8005c20:	f004 f99f 	bl	8009f62 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005c24:	e7ff      	b.n	8005c26 <checkDemoModCalisma+0x4da>
 8005c26:	bf00      	nop
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	40010c00 	.word	0x40010c00
 8005c34:	20001121 	.word	0x20001121
 8005c38:	40010800 	.word	0x40010800
 8005c3c:	200010a0 	.word	0x200010a0
 8005c40:	200010b0 	.word	0x200010b0
 8005c44:	20001120 	.word	0x20001120
 8005c48:	20001106 	.word	0x20001106
 8005c4c:	200010c5 	.word	0x200010c5
 8005c50:	200010c6 	.word	0x200010c6
 8005c54:	20000000 	.word	0x20000000
 8005c58:	20000001 	.word	0x20000001
 8005c5c:	200010c7 	.word	0x200010c7
 8005c60:	20000ff0 	.word	0x20000ff0
 8005c64:	200010f4 	.word	0x200010f4
 8005c68:	200010e5 	.word	0x200010e5
 8005c6c:	20000140 	.word	0x20000140
 8005c70:	20000168 	.word	0x20000168
 8005c74:	20001060 	.word	0x20001060
 8005c78:	200010fc 	.word	0x200010fc
 8005c7c:	200010e6 	.word	0x200010e6

08005c80 <mainLoop>:

void mainLoop() {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005c86:	f7fe f853 	bl	8003d30 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4894      	ldr	r0, [pc, #592]	@ (8005ee0 <mainLoop+0x260>)
 8005c8e:	f004 f951 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d136      	bne.n	8005d06 <mainLoop+0x86>
 8005c98:	2108      	movs	r1, #8
 8005c9a:	4892      	ldr	r0, [pc, #584]	@ (8005ee4 <mainLoop+0x264>)
 8005c9c:	f004 f94a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d12f      	bne.n	8005d06 <mainLoop+0x86>
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	488d      	ldr	r0, [pc, #564]	@ (8005ee0 <mainLoop+0x260>)
 8005caa:	f004 f943 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d128      	bne.n	8005d06 <mainLoop+0x86>
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	488a      	ldr	r0, [pc, #552]	@ (8005ee0 <mainLoop+0x260>)
 8005cb8:	f004 f93c 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d121      	bne.n	8005d06 <mainLoop+0x86>
 8005cc2:	2108      	movs	r1, #8
 8005cc4:	4886      	ldr	r0, [pc, #536]	@ (8005ee0 <mainLoop+0x260>)
 8005cc6:	f004 f935 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11a      	bne.n	8005d06 <mainLoop+0x86>
 8005cd0:	2180      	movs	r1, #128	@ 0x80
 8005cd2:	4884      	ldr	r0, [pc, #528]	@ (8005ee4 <mainLoop+0x264>)
 8005cd4:	f004 f92e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d113      	bne.n	8005d06 <mainLoop+0x86>
 8005cde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ce2:	4880      	ldr	r0, [pc, #512]	@ (8005ee4 <mainLoop+0x264>)
 8005ce4:	f004 f926 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10b      	bne.n	8005d06 <mainLoop+0x86>
 8005cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005cf2:	487c      	ldr	r0, [pc, #496]	@ (8005ee4 <mainLoop+0x264>)
 8005cf4:	f004 f91e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d103      	bne.n	8005d06 <mainLoop+0x86>
			butonKontrol=0;
 8005cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8005ee8 <mainLoop+0x268>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e003      	b.n	8005d0e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005d06:	4b79      	ldr	r3, [pc, #484]	@ (8005eec <mainLoop+0x26c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a79      	ldr	r2, [pc, #484]	@ (8005ef0 <mainLoop+0x270>)
 8005d0c:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005d0e:	f7fe f8c1 	bl	8003e94 <buttonCheck>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d103      	bne.n	8005d20 <mainLoop+0xa0>
			backLightTimer = millis;
 8005d18:	4b74      	ldr	r3, [pc, #464]	@ (8005eec <mainLoop+0x26c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a74      	ldr	r2, [pc, #464]	@ (8005ef0 <mainLoop+0x270>)
 8005d1e:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005d20:	4b74      	ldr	r3, [pc, #464]	@ (8005ef4 <mainLoop+0x274>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02c      	beq.n	8005d82 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d28:	bf00      	nop
 8005d2a:	4873      	ldr	r0, [pc, #460]	@ (8005ef8 <mainLoop+0x278>)
 8005d2c:	f004 ff2b 	bl	800ab86 <HAL_I2C_GetError>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d0f9      	beq.n	8005d2a <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005d36:	bf00      	nop
 8005d38:	486f      	ldr	r0, [pc, #444]	@ (8005ef8 <mainLoop+0x278>)
 8005d3a:	f004 ff17 	bl	800ab6c <HAL_I2C_GetState>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d1f9      	bne.n	8005d38 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005d44:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	236e      	movs	r3, #110	@ 0x6e
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8005efc <mainLoop+0x27c>)
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	236e      	movs	r3, #110	@ 0x6e
 8005d54:	2200      	movs	r2, #0
 8005d56:	21a0      	movs	r1, #160	@ 0xa0
 8005d58:	4867      	ldr	r0, [pc, #412]	@ (8005ef8 <mainLoop+0x278>)
 8005d5a:	f004 fba5 	bl	800a4a8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005d5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d62:	f003 fb17 	bl	8009394 <HAL_Delay>

		  hafizaYaz=0;
 8005d66:	4b63      	ldr	r3, [pc, #396]	@ (8005ef4 <mainLoop+0x274>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005d6c:	4a64      	ldr	r2, [pc, #400]	@ (8005f00 <mainLoop+0x280>)
 8005d6e:	2101      	movs	r1, #1
 8005d70:	2002      	movs	r0, #2
 8005d72:	f002 fdb5 	bl	80088e0 <lcd_print>

		  HAL_Delay(1000);
 8005d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d7a:	f003 fb0b 	bl	8009394 <HAL_Delay>
		  lcd_clear();
 8005d7e:	f002 fddb 	bl	8008938 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005d82:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <mainLoop+0x284>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f083 0301 	eor.w	r3, r3, #1
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d043      	beq.n	8005e18 <mainLoop+0x198>
 8005d90:	4859      	ldr	r0, [pc, #356]	@ (8005ef8 <mainLoop+0x278>)
 8005d92:	f004 feeb 	bl	800ab6c <HAL_I2C_GetState>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d13d      	bne.n	8005e18 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005f08 <mainLoop+0x288>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f083 0301 	eor.w	r3, r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005daa:	4a58      	ldr	r2, [pc, #352]	@ (8005f0c <mainLoop+0x28c>)
 8005dac:	2101      	movs	r1, #1
 8005dae:	2001      	movs	r0, #1
 8005db0:	f002 fd96 	bl	80088e0 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005db4:	4a56      	ldr	r2, [pc, #344]	@ (8005f10 <mainLoop+0x290>)
 8005db6:	2101      	movs	r1, #1
 8005db8:	2002      	movs	r0, #2
 8005dba:	f002 fd91 	bl	80088e0 <lcd_print>
			  HAL_Delay(1000);
 8005dbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dc2:	f003 fae7 	bl	8009394 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005dc6:	bf00      	nop
 8005dc8:	484b      	ldr	r0, [pc, #300]	@ (8005ef8 <mainLoop+0x278>)
 8005dca:	f004 fedc 	bl	800ab86 <HAL_I2C_GetError>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d0f9      	beq.n	8005dc8 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005dd4:	e003      	b.n	8005dde <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005dd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dda:	f003 fadb 	bl	8009394 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005dde:	4846      	ldr	r0, [pc, #280]	@ (8005ef8 <mainLoop+0x278>)
 8005de0:	f004 fec4 	bl	800ab6c <HAL_I2C_GetState>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d1f5      	bne.n	8005dd6 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005dea:	4a4a      	ldr	r2, [pc, #296]	@ (8005f14 <mainLoop+0x294>)
 8005dec:	2101      	movs	r1, #1
 8005dee:	2002      	movs	r0, #2
 8005df0:	f002 fd76 	bl	80088e0 <lcd_print>

			  ilkOkuma=1;
 8005df4:	4b44      	ldr	r3, [pc, #272]	@ (8005f08 <mainLoop+0x288>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e006      	b.n	8005e0a <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005dfc:	4a46      	ldr	r2, [pc, #280]	@ (8005f18 <mainLoop+0x298>)
 8005dfe:	2101      	movs	r1, #1
 8005e00:	2002      	movs	r0, #2
 8005e02:	f002 fd6d 	bl	80088e0 <lcd_print>
			  lcd_clear();
 8005e06:	f002 fd97 	bl	8008938 <lcd_clear>
		  }

		  lcd_clear();
 8005e0a:	f002 fd95 	bl	8008938 <lcd_clear>

		  eepromKontrol();
 8005e0e:	f7fa fa11 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005e12:	4b3c      	ldr	r3, [pc, #240]	@ (8005f04 <mainLoop+0x284>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005e18:	4b40      	ldr	r3, [pc, #256]	@ (8005f1c <mainLoop+0x29c>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11c      	bne.n	8005e5a <mainLoop+0x1da>
 8005e20:	4b3f      	ldr	r3, [pc, #252]	@ (8005f20 <mainLoop+0x2a0>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f083 0301 	eor.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <mainLoop+0x1da>
 8005e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f24 <mainLoop+0x2a4>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d111      	bne.n	8005e5a <mainLoop+0x1da>
			lcd_clear();
 8005e36:	f002 fd7f 	bl	8008938 <lcd_clear>
			HAL_Delay(10);
 8005e3a:	200a      	movs	r0, #10
 8005e3c:	f003 faaa 	bl	8009394 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005e40:	4a39      	ldr	r2, [pc, #228]	@ (8005f28 <mainLoop+0x2a8>)
 8005e42:	2101      	movs	r1, #1
 8005e44:	2001      	movs	r0, #1
 8005e46:	f002 fd4b 	bl	80088e0 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005e4a:	4a38      	ldr	r2, [pc, #224]	@ (8005f2c <mainLoop+0x2ac>)
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f002 fd46 	bl	80088e0 <lcd_print>
			mesajYazildi=1;
 8005e54:	4b32      	ldr	r3, [pc, #200]	@ (8005f20 <mainLoop+0x2a0>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005e5a:	4b30      	ldr	r3, [pc, #192]	@ (8005f1c <mainLoop+0x29c>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d112      	bne.n	8005e88 <mainLoop+0x208>
 8005e62:	2102      	movs	r1, #2
 8005e64:	481e      	ldr	r0, [pc, #120]	@ (8005ee0 <mainLoop+0x260>)
 8005e66:	f004 f865 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10b      	bne.n	8005e88 <mainLoop+0x208>
 8005e70:	2104      	movs	r1, #4
 8005e72:	481b      	ldr	r0, [pc, #108]	@ (8005ee0 <mainLoop+0x260>)
 8005e74:	f004 f85e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d104      	bne.n	8005e88 <mainLoop+0x208>
			menuGiris=1;
 8005e7e:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <mainLoop+0x29c>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005e84:	f002 fd58 	bl	8008938 <lcd_clear>
		}

		if(menuGiris==1) {
 8005e88:	4b24      	ldr	r3, [pc, #144]	@ (8005f1c <mainLoop+0x29c>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <mainLoop+0x214>
			menu();
 8005e90:	f7fb fa26 	bl	80012e0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005e94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e98:	4812      	ldr	r0, [pc, #72]	@ (8005ee4 <mainLoop+0x264>)
 8005e9a:	f004 f87a 	bl	8009f92 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ea2:	4823      	ldr	r0, [pc, #140]	@ (8005f30 <mainLoop+0x2b0>)
 8005ea4:	f004 f846 	bl	8009f34 <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <mainLoop+0x244>
 8005eae:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <mainLoop+0x2b4>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f083 0301 	eor.w	r3, r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <mainLoop+0x244>
			stopVar=1;
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8005f38 <mainLoop+0x2b8>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f38 <mainLoop+0x2b8>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005eca:	f7fe f817 	bl	8003efc <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005ece:	f7fe f849 	bl	8003f64 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005ed2:	f7fe f88d 	bl	8003ff0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005ed6:	f7fe f8dd 	bl	8004094 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005eda:	f7ff fc37 	bl	800574c <checkDemoModCalisma>
		checkLCDBacklight();
 8005ede:	e6d2      	b.n	8005c86 <mainLoop+0x6>
 8005ee0:	40010800 	.word	0x40010800
 8005ee4:	40011000 	.word	0x40011000
 8005ee8:	200010f7 	.word	0x200010f7
 8005eec:	200010a0 	.word	0x200010a0
 8005ef0:	200010bc 	.word	0x200010bc
 8005ef4:	200010f4 	.word	0x200010f4
 8005ef8:	20001944 	.word	0x20001944
 8005efc:	20000ff0 	.word	0x20000ff0
 8005f00:	20001868 	.word	0x20001868
 8005f04:	200010f5 	.word	0x200010f5
 8005f08:	200010f6 	.word	0x200010f6
 8005f0c:	2000017c 	.word	0x2000017c
 8005f10:	2000187c 	.word	0x2000187c
 8005f14:	20001890 	.word	0x20001890
 8005f18:	200018a4 	.word	0x200018a4
 8005f1c:	200010e5 	.word	0x200010e5
 8005f20:	200010fc 	.word	0x200010fc
 8005f24:	200010e6 	.word	0x200010e6
 8005f28:	200000c8 	.word	0x200000c8
 8005f2c:	200000dc 	.word	0x200000dc
 8005f30:	40010c00 	.word	0x40010c00
 8005f34:	2000111d 	.word	0x2000111d
 8005f38:	2000111a 	.word	0x2000111a

08005f3c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 853d 	bne.w	80069c8 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005f4e:	4ac7      	ldr	r2, [pc, #796]	@ (800626c <loadMenuTexts+0x330>)
 8005f50:	4bc7      	ldr	r3, [pc, #796]	@ (8006270 <loadMenuTexts+0x334>)
 8005f52:	4614      	mov	r4, r2
 8005f54:	461d      	mov	r5, r3
 8005f56:	6828      	ldr	r0, [r5, #0]
 8005f58:	6869      	ldr	r1, [r5, #4]
 8005f5a:	68aa      	ldr	r2, [r5, #8]
 8005f5c:	68eb      	ldr	r3, [r5, #12]
 8005f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f60:	7c2b      	ldrb	r3, [r5, #16]
 8005f62:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005f64:	4ac3      	ldr	r2, [pc, #780]	@ (8006274 <loadMenuTexts+0x338>)
 8005f66:	4bc4      	ldr	r3, [pc, #784]	@ (8006278 <loadMenuTexts+0x33c>)
 8005f68:	4614      	mov	r4, r2
 8005f6a:	461d      	mov	r5, r3
 8005f6c:	6828      	ldr	r0, [r5, #0]
 8005f6e:	6869      	ldr	r1, [r5, #4]
 8005f70:	68aa      	ldr	r2, [r5, #8]
 8005f72:	68eb      	ldr	r3, [r5, #12]
 8005f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f76:	7c2b      	ldrb	r3, [r5, #16]
 8005f78:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005f7a:	4ac0      	ldr	r2, [pc, #768]	@ (800627c <loadMenuTexts+0x340>)
 8005f7c:	4bc0      	ldr	r3, [pc, #768]	@ (8006280 <loadMenuTexts+0x344>)
 8005f7e:	4614      	mov	r4, r2
 8005f80:	461d      	mov	r5, r3
 8005f82:	6828      	ldr	r0, [r5, #0]
 8005f84:	6869      	ldr	r1, [r5, #4]
 8005f86:	68aa      	ldr	r2, [r5, #8]
 8005f88:	68eb      	ldr	r3, [r5, #12]
 8005f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8c:	7c2b      	ldrb	r3, [r5, #16]
 8005f8e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f90:	4abc      	ldr	r2, [pc, #752]	@ (8006284 <loadMenuTexts+0x348>)
 8005f92:	4bbd      	ldr	r3, [pc, #756]	@ (8006288 <loadMenuTexts+0x34c>)
 8005f94:	4614      	mov	r4, r2
 8005f96:	461d      	mov	r5, r3
 8005f98:	6828      	ldr	r0, [r5, #0]
 8005f9a:	6869      	ldr	r1, [r5, #4]
 8005f9c:	68aa      	ldr	r2, [r5, #8]
 8005f9e:	68eb      	ldr	r3, [r5, #12]
 8005fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa2:	7c2b      	ldrb	r3, [r5, #16]
 8005fa4:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005fa6:	4ab9      	ldr	r2, [pc, #740]	@ (800628c <loadMenuTexts+0x350>)
 8005fa8:	4bb9      	ldr	r3, [pc, #740]	@ (8006290 <loadMenuTexts+0x354>)
 8005faa:	4614      	mov	r4, r2
 8005fac:	461d      	mov	r5, r3
 8005fae:	6828      	ldr	r0, [r5, #0]
 8005fb0:	6869      	ldr	r1, [r5, #4]
 8005fb2:	68aa      	ldr	r2, [r5, #8]
 8005fb4:	68eb      	ldr	r3, [r5, #12]
 8005fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb8:	7c2b      	ldrb	r3, [r5, #16]
 8005fba:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005fbc:	4ab5      	ldr	r2, [pc, #724]	@ (8006294 <loadMenuTexts+0x358>)
 8005fbe:	4bb6      	ldr	r3, [pc, #728]	@ (8006298 <loadMenuTexts+0x35c>)
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	6828      	ldr	r0, [r5, #0]
 8005fc6:	6869      	ldr	r1, [r5, #4]
 8005fc8:	68aa      	ldr	r2, [r5, #8]
 8005fca:	68eb      	ldr	r3, [r5, #12]
 8005fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fce:	7c2b      	ldrb	r3, [r5, #16]
 8005fd0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005fd2:	4ab2      	ldr	r2, [pc, #712]	@ (800629c <loadMenuTexts+0x360>)
 8005fd4:	4bb2      	ldr	r3, [pc, #712]	@ (80062a0 <loadMenuTexts+0x364>)
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	461d      	mov	r5, r3
 8005fda:	6828      	ldr	r0, [r5, #0]
 8005fdc:	6869      	ldr	r1, [r5, #4]
 8005fde:	68aa      	ldr	r2, [r5, #8]
 8005fe0:	68eb      	ldr	r3, [r5, #12]
 8005fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe4:	7c2b      	ldrb	r3, [r5, #16]
 8005fe6:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005fe8:	4aae      	ldr	r2, [pc, #696]	@ (80062a4 <loadMenuTexts+0x368>)
 8005fea:	4baf      	ldr	r3, [pc, #700]	@ (80062a8 <loadMenuTexts+0x36c>)
 8005fec:	4614      	mov	r4, r2
 8005fee:	461d      	mov	r5, r3
 8005ff0:	6828      	ldr	r0, [r5, #0]
 8005ff2:	6869      	ldr	r1, [r5, #4]
 8005ff4:	68aa      	ldr	r2, [r5, #8]
 8005ff6:	68eb      	ldr	r3, [r5, #12]
 8005ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ffa:	7c2b      	ldrb	r3, [r5, #16]
 8005ffc:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005ffe:	4aab      	ldr	r2, [pc, #684]	@ (80062ac <loadMenuTexts+0x370>)
 8006000:	4bab      	ldr	r3, [pc, #684]	@ (80062b0 <loadMenuTexts+0x374>)
 8006002:	4614      	mov	r4, r2
 8006004:	461d      	mov	r5, r3
 8006006:	6828      	ldr	r0, [r5, #0]
 8006008:	6869      	ldr	r1, [r5, #4]
 800600a:	68aa      	ldr	r2, [r5, #8]
 800600c:	68eb      	ldr	r3, [r5, #12]
 800600e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006010:	7c2b      	ldrb	r3, [r5, #16]
 8006012:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006014:	4aa7      	ldr	r2, [pc, #668]	@ (80062b4 <loadMenuTexts+0x378>)
 8006016:	4ba8      	ldr	r3, [pc, #672]	@ (80062b8 <loadMenuTexts+0x37c>)
 8006018:	4614      	mov	r4, r2
 800601a:	461d      	mov	r5, r3
 800601c:	6828      	ldr	r0, [r5, #0]
 800601e:	6869      	ldr	r1, [r5, #4]
 8006020:	68aa      	ldr	r2, [r5, #8]
 8006022:	68eb      	ldr	r3, [r5, #12]
 8006024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006026:	7c2b      	ldrb	r3, [r5, #16]
 8006028:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800602a:	4aa4      	ldr	r2, [pc, #656]	@ (80062bc <loadMenuTexts+0x380>)
 800602c:	4ba4      	ldr	r3, [pc, #656]	@ (80062c0 <loadMenuTexts+0x384>)
 800602e:	4614      	mov	r4, r2
 8006030:	461d      	mov	r5, r3
 8006032:	6828      	ldr	r0, [r5, #0]
 8006034:	6869      	ldr	r1, [r5, #4]
 8006036:	68aa      	ldr	r2, [r5, #8]
 8006038:	68eb      	ldr	r3, [r5, #12]
 800603a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603c:	7c2b      	ldrb	r3, [r5, #16]
 800603e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006040:	4aa0      	ldr	r2, [pc, #640]	@ (80062c4 <loadMenuTexts+0x388>)
 8006042:	4ba1      	ldr	r3, [pc, #644]	@ (80062c8 <loadMenuTexts+0x38c>)
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	6828      	ldr	r0, [r5, #0]
 800604a:	6869      	ldr	r1, [r5, #4]
 800604c:	68aa      	ldr	r2, [r5, #8]
 800604e:	68eb      	ldr	r3, [r5, #12]
 8006050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006052:	7c2b      	ldrb	r3, [r5, #16]
 8006054:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006056:	4a9d      	ldr	r2, [pc, #628]	@ (80062cc <loadMenuTexts+0x390>)
 8006058:	4b9d      	ldr	r3, [pc, #628]	@ (80062d0 <loadMenuTexts+0x394>)
 800605a:	4614      	mov	r4, r2
 800605c:	461d      	mov	r5, r3
 800605e:	6828      	ldr	r0, [r5, #0]
 8006060:	6869      	ldr	r1, [r5, #4]
 8006062:	68aa      	ldr	r2, [r5, #8]
 8006064:	68eb      	ldr	r3, [r5, #12]
 8006066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006068:	7c2b      	ldrb	r3, [r5, #16]
 800606a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800606c:	4a99      	ldr	r2, [pc, #612]	@ (80062d4 <loadMenuTexts+0x398>)
 800606e:	4b9a      	ldr	r3, [pc, #616]	@ (80062d8 <loadMenuTexts+0x39c>)
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	6828      	ldr	r0, [r5, #0]
 8006076:	6869      	ldr	r1, [r5, #4]
 8006078:	68aa      	ldr	r2, [r5, #8]
 800607a:	68eb      	ldr	r3, [r5, #12]
 800607c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800607e:	7c2b      	ldrb	r3, [r5, #16]
 8006080:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006082:	4a96      	ldr	r2, [pc, #600]	@ (80062dc <loadMenuTexts+0x3a0>)
 8006084:	4b96      	ldr	r3, [pc, #600]	@ (80062e0 <loadMenuTexts+0x3a4>)
 8006086:	4614      	mov	r4, r2
 8006088:	461d      	mov	r5, r3
 800608a:	6828      	ldr	r0, [r5, #0]
 800608c:	6869      	ldr	r1, [r5, #4]
 800608e:	68aa      	ldr	r2, [r5, #8]
 8006090:	68eb      	ldr	r3, [r5, #12]
 8006092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006094:	7c2b      	ldrb	r3, [r5, #16]
 8006096:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006098:	4a92      	ldr	r2, [pc, #584]	@ (80062e4 <loadMenuTexts+0x3a8>)
 800609a:	4b93      	ldr	r3, [pc, #588]	@ (80062e8 <loadMenuTexts+0x3ac>)
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	6828      	ldr	r0, [r5, #0]
 80060a2:	6869      	ldr	r1, [r5, #4]
 80060a4:	68aa      	ldr	r2, [r5, #8]
 80060a6:	68eb      	ldr	r3, [r5, #12]
 80060a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060aa:	7c2b      	ldrb	r3, [r5, #16]
 80060ac:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80060ae:	4a8f      	ldr	r2, [pc, #572]	@ (80062ec <loadMenuTexts+0x3b0>)
 80060b0:	4b8f      	ldr	r3, [pc, #572]	@ (80062f0 <loadMenuTexts+0x3b4>)
 80060b2:	4614      	mov	r4, r2
 80060b4:	461d      	mov	r5, r3
 80060b6:	6828      	ldr	r0, [r5, #0]
 80060b8:	6869      	ldr	r1, [r5, #4]
 80060ba:	68aa      	ldr	r2, [r5, #8]
 80060bc:	68eb      	ldr	r3, [r5, #12]
 80060be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060c0:	7c2b      	ldrb	r3, [r5, #16]
 80060c2:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80060c4:	4a8b      	ldr	r2, [pc, #556]	@ (80062f4 <loadMenuTexts+0x3b8>)
 80060c6:	4b8c      	ldr	r3, [pc, #560]	@ (80062f8 <loadMenuTexts+0x3bc>)
 80060c8:	4614      	mov	r4, r2
 80060ca:	461d      	mov	r5, r3
 80060cc:	6828      	ldr	r0, [r5, #0]
 80060ce:	6869      	ldr	r1, [r5, #4]
 80060d0:	68aa      	ldr	r2, [r5, #8]
 80060d2:	68eb      	ldr	r3, [r5, #12]
 80060d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d6:	7c2b      	ldrb	r3, [r5, #16]
 80060d8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80060da:	4a88      	ldr	r2, [pc, #544]	@ (80062fc <loadMenuTexts+0x3c0>)
 80060dc:	4b88      	ldr	r3, [pc, #544]	@ (8006300 <loadMenuTexts+0x3c4>)
 80060de:	4614      	mov	r4, r2
 80060e0:	461d      	mov	r5, r3
 80060e2:	6828      	ldr	r0, [r5, #0]
 80060e4:	6869      	ldr	r1, [r5, #4]
 80060e6:	68aa      	ldr	r2, [r5, #8]
 80060e8:	68eb      	ldr	r3, [r5, #12]
 80060ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ec:	7c2b      	ldrb	r3, [r5, #16]
 80060ee:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80060f0:	4a84      	ldr	r2, [pc, #528]	@ (8006304 <loadMenuTexts+0x3c8>)
 80060f2:	4b85      	ldr	r3, [pc, #532]	@ (8006308 <loadMenuTexts+0x3cc>)
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	6828      	ldr	r0, [r5, #0]
 80060fa:	6869      	ldr	r1, [r5, #4]
 80060fc:	68aa      	ldr	r2, [r5, #8]
 80060fe:	68eb      	ldr	r3, [r5, #12]
 8006100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006102:	7c2b      	ldrb	r3, [r5, #16]
 8006104:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006106:	4a81      	ldr	r2, [pc, #516]	@ (800630c <loadMenuTexts+0x3d0>)
 8006108:	4b81      	ldr	r3, [pc, #516]	@ (8006310 <loadMenuTexts+0x3d4>)
 800610a:	4614      	mov	r4, r2
 800610c:	461d      	mov	r5, r3
 800610e:	6828      	ldr	r0, [r5, #0]
 8006110:	6869      	ldr	r1, [r5, #4]
 8006112:	68aa      	ldr	r2, [r5, #8]
 8006114:	68eb      	ldr	r3, [r5, #12]
 8006116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006118:	7c2b      	ldrb	r3, [r5, #16]
 800611a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800611c:	4a7d      	ldr	r2, [pc, #500]	@ (8006314 <loadMenuTexts+0x3d8>)
 800611e:	4b7e      	ldr	r3, [pc, #504]	@ (8006318 <loadMenuTexts+0x3dc>)
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	6828      	ldr	r0, [r5, #0]
 8006126:	6869      	ldr	r1, [r5, #4]
 8006128:	68aa      	ldr	r2, [r5, #8]
 800612a:	68eb      	ldr	r3, [r5, #12]
 800612c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612e:	7c2b      	ldrb	r3, [r5, #16]
 8006130:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006132:	4a7a      	ldr	r2, [pc, #488]	@ (800631c <loadMenuTexts+0x3e0>)
 8006134:	4b7a      	ldr	r3, [pc, #488]	@ (8006320 <loadMenuTexts+0x3e4>)
 8006136:	4614      	mov	r4, r2
 8006138:	461d      	mov	r5, r3
 800613a:	6828      	ldr	r0, [r5, #0]
 800613c:	6869      	ldr	r1, [r5, #4]
 800613e:	68aa      	ldr	r2, [r5, #8]
 8006140:	68eb      	ldr	r3, [r5, #12]
 8006142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006144:	7c2b      	ldrb	r3, [r5, #16]
 8006146:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006148:	4a76      	ldr	r2, [pc, #472]	@ (8006324 <loadMenuTexts+0x3e8>)
 800614a:	4b77      	ldr	r3, [pc, #476]	@ (8006328 <loadMenuTexts+0x3ec>)
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	6828      	ldr	r0, [r5, #0]
 8006152:	6869      	ldr	r1, [r5, #4]
 8006154:	68aa      	ldr	r2, [r5, #8]
 8006156:	68eb      	ldr	r3, [r5, #12]
 8006158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615a:	7c2b      	ldrb	r3, [r5, #16]
 800615c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800615e:	4a73      	ldr	r2, [pc, #460]	@ (800632c <loadMenuTexts+0x3f0>)
 8006160:	4b73      	ldr	r3, [pc, #460]	@ (8006330 <loadMenuTexts+0x3f4>)
 8006162:	4614      	mov	r4, r2
 8006164:	461d      	mov	r5, r3
 8006166:	6828      	ldr	r0, [r5, #0]
 8006168:	6869      	ldr	r1, [r5, #4]
 800616a:	68aa      	ldr	r2, [r5, #8]
 800616c:	68eb      	ldr	r3, [r5, #12]
 800616e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006170:	7c2b      	ldrb	r3, [r5, #16]
 8006172:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006174:	4a6f      	ldr	r2, [pc, #444]	@ (8006334 <loadMenuTexts+0x3f8>)
 8006176:	4b70      	ldr	r3, [pc, #448]	@ (8006338 <loadMenuTexts+0x3fc>)
 8006178:	4614      	mov	r4, r2
 800617a:	461d      	mov	r5, r3
 800617c:	6828      	ldr	r0, [r5, #0]
 800617e:	6869      	ldr	r1, [r5, #4]
 8006180:	68aa      	ldr	r2, [r5, #8]
 8006182:	68eb      	ldr	r3, [r5, #12]
 8006184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006186:	7c2b      	ldrb	r3, [r5, #16]
 8006188:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800618a:	4a6c      	ldr	r2, [pc, #432]	@ (800633c <loadMenuTexts+0x400>)
 800618c:	4b6c      	ldr	r3, [pc, #432]	@ (8006340 <loadMenuTexts+0x404>)
 800618e:	4614      	mov	r4, r2
 8006190:	461d      	mov	r5, r3
 8006192:	6828      	ldr	r0, [r5, #0]
 8006194:	6869      	ldr	r1, [r5, #4]
 8006196:	68aa      	ldr	r2, [r5, #8]
 8006198:	68eb      	ldr	r3, [r5, #12]
 800619a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800619c:	7c2b      	ldrb	r3, [r5, #16]
 800619e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80061a0:	4a68      	ldr	r2, [pc, #416]	@ (8006344 <loadMenuTexts+0x408>)
 80061a2:	4b69      	ldr	r3, [pc, #420]	@ (8006348 <loadMenuTexts+0x40c>)
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	6828      	ldr	r0, [r5, #0]
 80061aa:	6869      	ldr	r1, [r5, #4]
 80061ac:	68aa      	ldr	r2, [r5, #8]
 80061ae:	68eb      	ldr	r3, [r5, #12]
 80061b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b2:	7c2b      	ldrb	r3, [r5, #16]
 80061b4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80061b6:	4a65      	ldr	r2, [pc, #404]	@ (800634c <loadMenuTexts+0x410>)
 80061b8:	4b65      	ldr	r3, [pc, #404]	@ (8006350 <loadMenuTexts+0x414>)
 80061ba:	4614      	mov	r4, r2
 80061bc:	461d      	mov	r5, r3
 80061be:	6828      	ldr	r0, [r5, #0]
 80061c0:	6869      	ldr	r1, [r5, #4]
 80061c2:	68aa      	ldr	r2, [r5, #8]
 80061c4:	68eb      	ldr	r3, [r5, #12]
 80061c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c8:	7c2b      	ldrb	r3, [r5, #16]
 80061ca:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80061cc:	4a61      	ldr	r2, [pc, #388]	@ (8006354 <loadMenuTexts+0x418>)
 80061ce:	4b62      	ldr	r3, [pc, #392]	@ (8006358 <loadMenuTexts+0x41c>)
 80061d0:	4614      	mov	r4, r2
 80061d2:	461d      	mov	r5, r3
 80061d4:	6828      	ldr	r0, [r5, #0]
 80061d6:	6869      	ldr	r1, [r5, #4]
 80061d8:	68aa      	ldr	r2, [r5, #8]
 80061da:	68eb      	ldr	r3, [r5, #12]
 80061dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061de:	7c2b      	ldrb	r3, [r5, #16]
 80061e0:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80061e2:	4a5e      	ldr	r2, [pc, #376]	@ (800635c <loadMenuTexts+0x420>)
 80061e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006360 <loadMenuTexts+0x424>)
 80061e6:	4614      	mov	r4, r2
 80061e8:	461d      	mov	r5, r3
 80061ea:	6828      	ldr	r0, [r5, #0]
 80061ec:	6869      	ldr	r1, [r5, #4]
 80061ee:	68aa      	ldr	r2, [r5, #8]
 80061f0:	68eb      	ldr	r3, [r5, #12]
 80061f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f4:	7c2b      	ldrb	r3, [r5, #16]
 80061f6:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80061f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006364 <loadMenuTexts+0x428>)
 80061fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006368 <loadMenuTexts+0x42c>)
 80061fc:	4614      	mov	r4, r2
 80061fe:	461d      	mov	r5, r3
 8006200:	6828      	ldr	r0, [r5, #0]
 8006202:	6869      	ldr	r1, [r5, #4]
 8006204:	68aa      	ldr	r2, [r5, #8]
 8006206:	68eb      	ldr	r3, [r5, #12]
 8006208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620a:	7c2b      	ldrb	r3, [r5, #16]
 800620c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800620e:	4a57      	ldr	r2, [pc, #348]	@ (800636c <loadMenuTexts+0x430>)
 8006210:	4b57      	ldr	r3, [pc, #348]	@ (8006370 <loadMenuTexts+0x434>)
 8006212:	4614      	mov	r4, r2
 8006214:	461d      	mov	r5, r3
 8006216:	6828      	ldr	r0, [r5, #0]
 8006218:	6869      	ldr	r1, [r5, #4]
 800621a:	68aa      	ldr	r2, [r5, #8]
 800621c:	68eb      	ldr	r3, [r5, #12]
 800621e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006220:	7c2b      	ldrb	r3, [r5, #16]
 8006222:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006224:	4a53      	ldr	r2, [pc, #332]	@ (8006374 <loadMenuTexts+0x438>)
 8006226:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <loadMenuTexts+0x43c>)
 8006228:	4614      	mov	r4, r2
 800622a:	461d      	mov	r5, r3
 800622c:	6828      	ldr	r0, [r5, #0]
 800622e:	6869      	ldr	r1, [r5, #4]
 8006230:	68aa      	ldr	r2, [r5, #8]
 8006232:	68eb      	ldr	r3, [r5, #12]
 8006234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006236:	7c2b      	ldrb	r3, [r5, #16]
 8006238:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800623a:	4a50      	ldr	r2, [pc, #320]	@ (800637c <loadMenuTexts+0x440>)
 800623c:	4b50      	ldr	r3, [pc, #320]	@ (8006380 <loadMenuTexts+0x444>)
 800623e:	4614      	mov	r4, r2
 8006240:	461d      	mov	r5, r3
 8006242:	6828      	ldr	r0, [r5, #0]
 8006244:	6869      	ldr	r1, [r5, #4]
 8006246:	68aa      	ldr	r2, [r5, #8]
 8006248:	68eb      	ldr	r3, [r5, #12]
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	7c2b      	ldrb	r3, [r5, #16]
 800624e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006250:	4a4c      	ldr	r2, [pc, #304]	@ (8006384 <loadMenuTexts+0x448>)
 8006252:	4b4d      	ldr	r3, [pc, #308]	@ (8006388 <loadMenuTexts+0x44c>)
 8006254:	4614      	mov	r4, r2
 8006256:	461d      	mov	r5, r3
 8006258:	6828      	ldr	r0, [r5, #0]
 800625a:	6869      	ldr	r1, [r5, #4]
 800625c:	68aa      	ldr	r2, [r5, #8]
 800625e:	68eb      	ldr	r3, [r5, #12]
 8006260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006262:	7c2b      	ldrb	r3, [r5, #16]
 8006264:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006266:	4a49      	ldr	r2, [pc, #292]	@ (800638c <loadMenuTexts+0x450>)
 8006268:	e092      	b.n	8006390 <loadMenuTexts+0x454>
 800626a:	bf00      	nop
 800626c:	20001228 	.word	0x20001228
 8006270:	20000190 	.word	0x20000190
 8006274:	2000123c 	.word	0x2000123c
 8006278:	200001a4 	.word	0x200001a4
 800627c:	20001250 	.word	0x20001250
 8006280:	200001b8 	.word	0x200001b8
 8006284:	20001264 	.word	0x20001264
 8006288:	200001cc 	.word	0x200001cc
 800628c:	20001278 	.word	0x20001278
 8006290:	200001e0 	.word	0x200001e0
 8006294:	2000128c 	.word	0x2000128c
 8006298:	200001f4 	.word	0x200001f4
 800629c:	200012a0 	.word	0x200012a0
 80062a0:	20000208 	.word	0x20000208
 80062a4:	200012b4 	.word	0x200012b4
 80062a8:	2000021c 	.word	0x2000021c
 80062ac:	200012c8 	.word	0x200012c8
 80062b0:	20000230 	.word	0x20000230
 80062b4:	200012dc 	.word	0x200012dc
 80062b8:	20000244 	.word	0x20000244
 80062bc:	200012f0 	.word	0x200012f0
 80062c0:	20000258 	.word	0x20000258
 80062c4:	20001304 	.word	0x20001304
 80062c8:	2000026c 	.word	0x2000026c
 80062cc:	20001318 	.word	0x20001318
 80062d0:	20000280 	.word	0x20000280
 80062d4:	2000132c 	.word	0x2000132c
 80062d8:	20000294 	.word	0x20000294
 80062dc:	20001340 	.word	0x20001340
 80062e0:	200002a8 	.word	0x200002a8
 80062e4:	20001354 	.word	0x20001354
 80062e8:	200002bc 	.word	0x200002bc
 80062ec:	20001368 	.word	0x20001368
 80062f0:	200002d0 	.word	0x200002d0
 80062f4:	2000137c 	.word	0x2000137c
 80062f8:	200002e4 	.word	0x200002e4
 80062fc:	20001390 	.word	0x20001390
 8006300:	200002f8 	.word	0x200002f8
 8006304:	200013a4 	.word	0x200013a4
 8006308:	2000030c 	.word	0x2000030c
 800630c:	200013b8 	.word	0x200013b8
 8006310:	20000320 	.word	0x20000320
 8006314:	200013cc 	.word	0x200013cc
 8006318:	20000334 	.word	0x20000334
 800631c:	200013e0 	.word	0x200013e0
 8006320:	20000348 	.word	0x20000348
 8006324:	200013f4 	.word	0x200013f4
 8006328:	2000035c 	.word	0x2000035c
 800632c:	20001408 	.word	0x20001408
 8006330:	20000370 	.word	0x20000370
 8006334:	2000141c 	.word	0x2000141c
 8006338:	20000384 	.word	0x20000384
 800633c:	20001430 	.word	0x20001430
 8006340:	20000398 	.word	0x20000398
 8006344:	20001444 	.word	0x20001444
 8006348:	200003ac 	.word	0x200003ac
 800634c:	20001458 	.word	0x20001458
 8006350:	200003c0 	.word	0x200003c0
 8006354:	2000146c 	.word	0x2000146c
 8006358:	200003d4 	.word	0x200003d4
 800635c:	20001480 	.word	0x20001480
 8006360:	200003e8 	.word	0x200003e8
 8006364:	20001494 	.word	0x20001494
 8006368:	200003fc 	.word	0x200003fc
 800636c:	200014a8 	.word	0x200014a8
 8006370:	20000410 	.word	0x20000410
 8006374:	200014bc 	.word	0x200014bc
 8006378:	20000424 	.word	0x20000424
 800637c:	200014d0 	.word	0x200014d0
 8006380:	20000438 	.word	0x20000438
 8006384:	200014e4 	.word	0x200014e4
 8006388:	2000044c 	.word	0x2000044c
 800638c:	200014f8 	.word	0x200014f8
 8006390:	4bc7      	ldr	r3, [pc, #796]	@ (80066b0 <loadMenuTexts+0x774>)
 8006392:	4614      	mov	r4, r2
 8006394:	461d      	mov	r5, r3
 8006396:	6828      	ldr	r0, [r5, #0]
 8006398:	6869      	ldr	r1, [r5, #4]
 800639a:	68aa      	ldr	r2, [r5, #8]
 800639c:	68eb      	ldr	r3, [r5, #12]
 800639e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063a0:	7c2b      	ldrb	r3, [r5, #16]
 80063a2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80063a4:	4ac3      	ldr	r2, [pc, #780]	@ (80066b4 <loadMenuTexts+0x778>)
 80063a6:	4bc4      	ldr	r3, [pc, #784]	@ (80066b8 <loadMenuTexts+0x77c>)
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	6828      	ldr	r0, [r5, #0]
 80063ae:	6869      	ldr	r1, [r5, #4]
 80063b0:	68aa      	ldr	r2, [r5, #8]
 80063b2:	68eb      	ldr	r3, [r5, #12]
 80063b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b6:	7c2b      	ldrb	r3, [r5, #16]
 80063b8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80063ba:	4ac0      	ldr	r2, [pc, #768]	@ (80066bc <loadMenuTexts+0x780>)
 80063bc:	4bc0      	ldr	r3, [pc, #768]	@ (80066c0 <loadMenuTexts+0x784>)
 80063be:	4614      	mov	r4, r2
 80063c0:	461d      	mov	r5, r3
 80063c2:	6828      	ldr	r0, [r5, #0]
 80063c4:	6869      	ldr	r1, [r5, #4]
 80063c6:	68aa      	ldr	r2, [r5, #8]
 80063c8:	68eb      	ldr	r3, [r5, #12]
 80063ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063cc:	7c2b      	ldrb	r3, [r5, #16]
 80063ce:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80063d0:	4abc      	ldr	r2, [pc, #752]	@ (80066c4 <loadMenuTexts+0x788>)
 80063d2:	4bbd      	ldr	r3, [pc, #756]	@ (80066c8 <loadMenuTexts+0x78c>)
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	6828      	ldr	r0, [r5, #0]
 80063da:	6869      	ldr	r1, [r5, #4]
 80063dc:	68aa      	ldr	r2, [r5, #8]
 80063de:	68eb      	ldr	r3, [r5, #12]
 80063e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e2:	7c2b      	ldrb	r3, [r5, #16]
 80063e4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80063e6:	4ab9      	ldr	r2, [pc, #740]	@ (80066cc <loadMenuTexts+0x790>)
 80063e8:	4bb9      	ldr	r3, [pc, #740]	@ (80066d0 <loadMenuTexts+0x794>)
 80063ea:	4614      	mov	r4, r2
 80063ec:	461d      	mov	r5, r3
 80063ee:	6828      	ldr	r0, [r5, #0]
 80063f0:	6869      	ldr	r1, [r5, #4]
 80063f2:	68aa      	ldr	r2, [r5, #8]
 80063f4:	68eb      	ldr	r3, [r5, #12]
 80063f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f8:	7c2b      	ldrb	r3, [r5, #16]
 80063fa:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80063fc:	4ab5      	ldr	r2, [pc, #724]	@ (80066d4 <loadMenuTexts+0x798>)
 80063fe:	4bb6      	ldr	r3, [pc, #728]	@ (80066d8 <loadMenuTexts+0x79c>)
 8006400:	4614      	mov	r4, r2
 8006402:	461d      	mov	r5, r3
 8006404:	6828      	ldr	r0, [r5, #0]
 8006406:	6869      	ldr	r1, [r5, #4]
 8006408:	68aa      	ldr	r2, [r5, #8]
 800640a:	68eb      	ldr	r3, [r5, #12]
 800640c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640e:	7c2b      	ldrb	r3, [r5, #16]
 8006410:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006412:	4ab2      	ldr	r2, [pc, #712]	@ (80066dc <loadMenuTexts+0x7a0>)
 8006414:	4bb2      	ldr	r3, [pc, #712]	@ (80066e0 <loadMenuTexts+0x7a4>)
 8006416:	4614      	mov	r4, r2
 8006418:	461d      	mov	r5, r3
 800641a:	6828      	ldr	r0, [r5, #0]
 800641c:	6869      	ldr	r1, [r5, #4]
 800641e:	68aa      	ldr	r2, [r5, #8]
 8006420:	68eb      	ldr	r3, [r5, #12]
 8006422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006424:	7c2b      	ldrb	r3, [r5, #16]
 8006426:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006428:	4aae      	ldr	r2, [pc, #696]	@ (80066e4 <loadMenuTexts+0x7a8>)
 800642a:	4baf      	ldr	r3, [pc, #700]	@ (80066e8 <loadMenuTexts+0x7ac>)
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	6828      	ldr	r0, [r5, #0]
 8006432:	6869      	ldr	r1, [r5, #4]
 8006434:	68aa      	ldr	r2, [r5, #8]
 8006436:	68eb      	ldr	r3, [r5, #12]
 8006438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643a:	7c2b      	ldrb	r3, [r5, #16]
 800643c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800643e:	4aab      	ldr	r2, [pc, #684]	@ (80066ec <loadMenuTexts+0x7b0>)
 8006440:	4bab      	ldr	r3, [pc, #684]	@ (80066f0 <loadMenuTexts+0x7b4>)
 8006442:	4614      	mov	r4, r2
 8006444:	461d      	mov	r5, r3
 8006446:	6828      	ldr	r0, [r5, #0]
 8006448:	6869      	ldr	r1, [r5, #4]
 800644a:	68aa      	ldr	r2, [r5, #8]
 800644c:	68eb      	ldr	r3, [r5, #12]
 800644e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006450:	7c2b      	ldrb	r3, [r5, #16]
 8006452:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006454:	4aa7      	ldr	r2, [pc, #668]	@ (80066f4 <loadMenuTexts+0x7b8>)
 8006456:	4ba8      	ldr	r3, [pc, #672]	@ (80066f8 <loadMenuTexts+0x7bc>)
 8006458:	4614      	mov	r4, r2
 800645a:	461d      	mov	r5, r3
 800645c:	6828      	ldr	r0, [r5, #0]
 800645e:	6869      	ldr	r1, [r5, #4]
 8006460:	68aa      	ldr	r2, [r5, #8]
 8006462:	68eb      	ldr	r3, [r5, #12]
 8006464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006466:	7c2b      	ldrb	r3, [r5, #16]
 8006468:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800646a:	4aa4      	ldr	r2, [pc, #656]	@ (80066fc <loadMenuTexts+0x7c0>)
 800646c:	4ba4      	ldr	r3, [pc, #656]	@ (8006700 <loadMenuTexts+0x7c4>)
 800646e:	4614      	mov	r4, r2
 8006470:	461d      	mov	r5, r3
 8006472:	6828      	ldr	r0, [r5, #0]
 8006474:	6869      	ldr	r1, [r5, #4]
 8006476:	68aa      	ldr	r2, [r5, #8]
 8006478:	68eb      	ldr	r3, [r5, #12]
 800647a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647c:	7c2b      	ldrb	r3, [r5, #16]
 800647e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006480:	4aa0      	ldr	r2, [pc, #640]	@ (8006704 <loadMenuTexts+0x7c8>)
 8006482:	4ba1      	ldr	r3, [pc, #644]	@ (8006708 <loadMenuTexts+0x7cc>)
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	6828      	ldr	r0, [r5, #0]
 800648a:	6869      	ldr	r1, [r5, #4]
 800648c:	68aa      	ldr	r2, [r5, #8]
 800648e:	68eb      	ldr	r3, [r5, #12]
 8006490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006492:	7c2b      	ldrb	r3, [r5, #16]
 8006494:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006496:	4a9d      	ldr	r2, [pc, #628]	@ (800670c <loadMenuTexts+0x7d0>)
 8006498:	4b9d      	ldr	r3, [pc, #628]	@ (8006710 <loadMenuTexts+0x7d4>)
 800649a:	4614      	mov	r4, r2
 800649c:	461d      	mov	r5, r3
 800649e:	6828      	ldr	r0, [r5, #0]
 80064a0:	6869      	ldr	r1, [r5, #4]
 80064a2:	68aa      	ldr	r2, [r5, #8]
 80064a4:	68eb      	ldr	r3, [r5, #12]
 80064a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a8:	7c2b      	ldrb	r3, [r5, #16]
 80064aa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80064ac:	4a99      	ldr	r2, [pc, #612]	@ (8006714 <loadMenuTexts+0x7d8>)
 80064ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006718 <loadMenuTexts+0x7dc>)
 80064b0:	4614      	mov	r4, r2
 80064b2:	461d      	mov	r5, r3
 80064b4:	6828      	ldr	r0, [r5, #0]
 80064b6:	6869      	ldr	r1, [r5, #4]
 80064b8:	68aa      	ldr	r2, [r5, #8]
 80064ba:	68eb      	ldr	r3, [r5, #12]
 80064bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064be:	7c2b      	ldrb	r3, [r5, #16]
 80064c0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80064c2:	4a96      	ldr	r2, [pc, #600]	@ (800671c <loadMenuTexts+0x7e0>)
 80064c4:	4b96      	ldr	r3, [pc, #600]	@ (8006720 <loadMenuTexts+0x7e4>)
 80064c6:	4614      	mov	r4, r2
 80064c8:	461d      	mov	r5, r3
 80064ca:	6828      	ldr	r0, [r5, #0]
 80064cc:	6869      	ldr	r1, [r5, #4]
 80064ce:	68aa      	ldr	r2, [r5, #8]
 80064d0:	68eb      	ldr	r3, [r5, #12]
 80064d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d4:	7c2b      	ldrb	r3, [r5, #16]
 80064d6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80064d8:	4a92      	ldr	r2, [pc, #584]	@ (8006724 <loadMenuTexts+0x7e8>)
 80064da:	4b93      	ldr	r3, [pc, #588]	@ (8006728 <loadMenuTexts+0x7ec>)
 80064dc:	4614      	mov	r4, r2
 80064de:	461d      	mov	r5, r3
 80064e0:	6828      	ldr	r0, [r5, #0]
 80064e2:	6869      	ldr	r1, [r5, #4]
 80064e4:	68aa      	ldr	r2, [r5, #8]
 80064e6:	68eb      	ldr	r3, [r5, #12]
 80064e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ea:	7c2b      	ldrb	r3, [r5, #16]
 80064ec:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80064ee:	4a8f      	ldr	r2, [pc, #572]	@ (800672c <loadMenuTexts+0x7f0>)
 80064f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006730 <loadMenuTexts+0x7f4>)
 80064f2:	4614      	mov	r4, r2
 80064f4:	461d      	mov	r5, r3
 80064f6:	6828      	ldr	r0, [r5, #0]
 80064f8:	6869      	ldr	r1, [r5, #4]
 80064fa:	68aa      	ldr	r2, [r5, #8]
 80064fc:	68eb      	ldr	r3, [r5, #12]
 80064fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006500:	7c2b      	ldrb	r3, [r5, #16]
 8006502:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006504:	4a8b      	ldr	r2, [pc, #556]	@ (8006734 <loadMenuTexts+0x7f8>)
 8006506:	4b8c      	ldr	r3, [pc, #560]	@ (8006738 <loadMenuTexts+0x7fc>)
 8006508:	4614      	mov	r4, r2
 800650a:	461d      	mov	r5, r3
 800650c:	6828      	ldr	r0, [r5, #0]
 800650e:	6869      	ldr	r1, [r5, #4]
 8006510:	68aa      	ldr	r2, [r5, #8]
 8006512:	68eb      	ldr	r3, [r5, #12]
 8006514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006516:	7c2b      	ldrb	r3, [r5, #16]
 8006518:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800651a:	4a88      	ldr	r2, [pc, #544]	@ (800673c <loadMenuTexts+0x800>)
 800651c:	4b88      	ldr	r3, [pc, #544]	@ (8006740 <loadMenuTexts+0x804>)
 800651e:	4614      	mov	r4, r2
 8006520:	461d      	mov	r5, r3
 8006522:	6828      	ldr	r0, [r5, #0]
 8006524:	6869      	ldr	r1, [r5, #4]
 8006526:	68aa      	ldr	r2, [r5, #8]
 8006528:	68eb      	ldr	r3, [r5, #12]
 800652a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800652c:	7c2b      	ldrb	r3, [r5, #16]
 800652e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006530:	4a84      	ldr	r2, [pc, #528]	@ (8006744 <loadMenuTexts+0x808>)
 8006532:	4b85      	ldr	r3, [pc, #532]	@ (8006748 <loadMenuTexts+0x80c>)
 8006534:	4614      	mov	r4, r2
 8006536:	461d      	mov	r5, r3
 8006538:	6828      	ldr	r0, [r5, #0]
 800653a:	6869      	ldr	r1, [r5, #4]
 800653c:	68aa      	ldr	r2, [r5, #8]
 800653e:	68eb      	ldr	r3, [r5, #12]
 8006540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006542:	7c2b      	ldrb	r3, [r5, #16]
 8006544:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006546:	4a81      	ldr	r2, [pc, #516]	@ (800674c <loadMenuTexts+0x810>)
 8006548:	4b81      	ldr	r3, [pc, #516]	@ (8006750 <loadMenuTexts+0x814>)
 800654a:	4614      	mov	r4, r2
 800654c:	461d      	mov	r5, r3
 800654e:	6828      	ldr	r0, [r5, #0]
 8006550:	6869      	ldr	r1, [r5, #4]
 8006552:	68aa      	ldr	r2, [r5, #8]
 8006554:	68eb      	ldr	r3, [r5, #12]
 8006556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006558:	7c2b      	ldrb	r3, [r5, #16]
 800655a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800655c:	4a7d      	ldr	r2, [pc, #500]	@ (8006754 <loadMenuTexts+0x818>)
 800655e:	4b7e      	ldr	r3, [pc, #504]	@ (8006758 <loadMenuTexts+0x81c>)
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	6828      	ldr	r0, [r5, #0]
 8006566:	6869      	ldr	r1, [r5, #4]
 8006568:	68aa      	ldr	r2, [r5, #8]
 800656a:	68eb      	ldr	r3, [r5, #12]
 800656c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656e:	7c2b      	ldrb	r3, [r5, #16]
 8006570:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006572:	4a7a      	ldr	r2, [pc, #488]	@ (800675c <loadMenuTexts+0x820>)
 8006574:	4b7a      	ldr	r3, [pc, #488]	@ (8006760 <loadMenuTexts+0x824>)
 8006576:	4614      	mov	r4, r2
 8006578:	461d      	mov	r5, r3
 800657a:	6828      	ldr	r0, [r5, #0]
 800657c:	6869      	ldr	r1, [r5, #4]
 800657e:	68aa      	ldr	r2, [r5, #8]
 8006580:	68eb      	ldr	r3, [r5, #12]
 8006582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006584:	7c2b      	ldrb	r3, [r5, #16]
 8006586:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006588:	4a76      	ldr	r2, [pc, #472]	@ (8006764 <loadMenuTexts+0x828>)
 800658a:	4b77      	ldr	r3, [pc, #476]	@ (8006768 <loadMenuTexts+0x82c>)
 800658c:	4614      	mov	r4, r2
 800658e:	461d      	mov	r5, r3
 8006590:	6828      	ldr	r0, [r5, #0]
 8006592:	6869      	ldr	r1, [r5, #4]
 8006594:	68aa      	ldr	r2, [r5, #8]
 8006596:	68eb      	ldr	r3, [r5, #12]
 8006598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659a:	7c2b      	ldrb	r3, [r5, #16]
 800659c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800659e:	4a73      	ldr	r2, [pc, #460]	@ (800676c <loadMenuTexts+0x830>)
 80065a0:	4b73      	ldr	r3, [pc, #460]	@ (8006770 <loadMenuTexts+0x834>)
 80065a2:	4614      	mov	r4, r2
 80065a4:	461d      	mov	r5, r3
 80065a6:	6828      	ldr	r0, [r5, #0]
 80065a8:	6869      	ldr	r1, [r5, #4]
 80065aa:	68aa      	ldr	r2, [r5, #8]
 80065ac:	68eb      	ldr	r3, [r5, #12]
 80065ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b0:	7c2b      	ldrb	r3, [r5, #16]
 80065b2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80065b4:	4a6f      	ldr	r2, [pc, #444]	@ (8006774 <loadMenuTexts+0x838>)
 80065b6:	4b70      	ldr	r3, [pc, #448]	@ (8006778 <loadMenuTexts+0x83c>)
 80065b8:	4614      	mov	r4, r2
 80065ba:	461d      	mov	r5, r3
 80065bc:	6828      	ldr	r0, [r5, #0]
 80065be:	6869      	ldr	r1, [r5, #4]
 80065c0:	68aa      	ldr	r2, [r5, #8]
 80065c2:	68eb      	ldr	r3, [r5, #12]
 80065c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c6:	7c2b      	ldrb	r3, [r5, #16]
 80065c8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80065ca:	4a6c      	ldr	r2, [pc, #432]	@ (800677c <loadMenuTexts+0x840>)
 80065cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006780 <loadMenuTexts+0x844>)
 80065ce:	4614      	mov	r4, r2
 80065d0:	461d      	mov	r5, r3
 80065d2:	6828      	ldr	r0, [r5, #0]
 80065d4:	6869      	ldr	r1, [r5, #4]
 80065d6:	68aa      	ldr	r2, [r5, #8]
 80065d8:	68eb      	ldr	r3, [r5, #12]
 80065da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065dc:	7c2b      	ldrb	r3, [r5, #16]
 80065de:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80065e0:	4a68      	ldr	r2, [pc, #416]	@ (8006784 <loadMenuTexts+0x848>)
 80065e2:	4b69      	ldr	r3, [pc, #420]	@ (8006788 <loadMenuTexts+0x84c>)
 80065e4:	4614      	mov	r4, r2
 80065e6:	461d      	mov	r5, r3
 80065e8:	6828      	ldr	r0, [r5, #0]
 80065ea:	6869      	ldr	r1, [r5, #4]
 80065ec:	68aa      	ldr	r2, [r5, #8]
 80065ee:	68eb      	ldr	r3, [r5, #12]
 80065f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f2:	7c2b      	ldrb	r3, [r5, #16]
 80065f4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80065f6:	4a65      	ldr	r2, [pc, #404]	@ (800678c <loadMenuTexts+0x850>)
 80065f8:	4b65      	ldr	r3, [pc, #404]	@ (8006790 <loadMenuTexts+0x854>)
 80065fa:	4614      	mov	r4, r2
 80065fc:	461d      	mov	r5, r3
 80065fe:	6828      	ldr	r0, [r5, #0]
 8006600:	6869      	ldr	r1, [r5, #4]
 8006602:	68aa      	ldr	r2, [r5, #8]
 8006604:	68eb      	ldr	r3, [r5, #12]
 8006606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006608:	7c2b      	ldrb	r3, [r5, #16]
 800660a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 800660c:	4a61      	ldr	r2, [pc, #388]	@ (8006794 <loadMenuTexts+0x858>)
 800660e:	4b62      	ldr	r3, [pc, #392]	@ (8006798 <loadMenuTexts+0x85c>)
 8006610:	4614      	mov	r4, r2
 8006612:	461d      	mov	r5, r3
 8006614:	6828      	ldr	r0, [r5, #0]
 8006616:	6869      	ldr	r1, [r5, #4]
 8006618:	68aa      	ldr	r2, [r5, #8]
 800661a:	68eb      	ldr	r3, [r5, #12]
 800661c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800661e:	7c2b      	ldrb	r3, [r5, #16]
 8006620:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006622:	4a5e      	ldr	r2, [pc, #376]	@ (800679c <loadMenuTexts+0x860>)
 8006624:	4b5e      	ldr	r3, [pc, #376]	@ (80067a0 <loadMenuTexts+0x864>)
 8006626:	4614      	mov	r4, r2
 8006628:	461d      	mov	r5, r3
 800662a:	6828      	ldr	r0, [r5, #0]
 800662c:	6869      	ldr	r1, [r5, #4]
 800662e:	68aa      	ldr	r2, [r5, #8]
 8006630:	68eb      	ldr	r3, [r5, #12]
 8006632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006634:	7c2b      	ldrb	r3, [r5, #16]
 8006636:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006638:	4a5a      	ldr	r2, [pc, #360]	@ (80067a4 <loadMenuTexts+0x868>)
 800663a:	4b5b      	ldr	r3, [pc, #364]	@ (80067a8 <loadMenuTexts+0x86c>)
 800663c:	4614      	mov	r4, r2
 800663e:	461d      	mov	r5, r3
 8006640:	6828      	ldr	r0, [r5, #0]
 8006642:	6869      	ldr	r1, [r5, #4]
 8006644:	68aa      	ldr	r2, [r5, #8]
 8006646:	68eb      	ldr	r3, [r5, #12]
 8006648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664a:	7c2b      	ldrb	r3, [r5, #16]
 800664c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800664e:	4a57      	ldr	r2, [pc, #348]	@ (80067ac <loadMenuTexts+0x870>)
 8006650:	4b57      	ldr	r3, [pc, #348]	@ (80067b0 <loadMenuTexts+0x874>)
 8006652:	4614      	mov	r4, r2
 8006654:	461d      	mov	r5, r3
 8006656:	6828      	ldr	r0, [r5, #0]
 8006658:	6869      	ldr	r1, [r5, #4]
 800665a:	68aa      	ldr	r2, [r5, #8]
 800665c:	68eb      	ldr	r3, [r5, #12]
 800665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006660:	7c2b      	ldrb	r3, [r5, #16]
 8006662:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006664:	4a53      	ldr	r2, [pc, #332]	@ (80067b4 <loadMenuTexts+0x878>)
 8006666:	4b54      	ldr	r3, [pc, #336]	@ (80067b8 <loadMenuTexts+0x87c>)
 8006668:	4614      	mov	r4, r2
 800666a:	461d      	mov	r5, r3
 800666c:	6828      	ldr	r0, [r5, #0]
 800666e:	6869      	ldr	r1, [r5, #4]
 8006670:	68aa      	ldr	r2, [r5, #8]
 8006672:	68eb      	ldr	r3, [r5, #12]
 8006674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006676:	7c2b      	ldrb	r3, [r5, #16]
 8006678:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800667a:	4a50      	ldr	r2, [pc, #320]	@ (80067bc <loadMenuTexts+0x880>)
 800667c:	4b50      	ldr	r3, [pc, #320]	@ (80067c0 <loadMenuTexts+0x884>)
 800667e:	4614      	mov	r4, r2
 8006680:	461d      	mov	r5, r3
 8006682:	6828      	ldr	r0, [r5, #0]
 8006684:	6869      	ldr	r1, [r5, #4]
 8006686:	68aa      	ldr	r2, [r5, #8]
 8006688:	68eb      	ldr	r3, [r5, #12]
 800668a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668c:	7c2b      	ldrb	r3, [r5, #16]
 800668e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006690:	4a4c      	ldr	r2, [pc, #304]	@ (80067c4 <loadMenuTexts+0x888>)
 8006692:	4b4d      	ldr	r3, [pc, #308]	@ (80067c8 <loadMenuTexts+0x88c>)
 8006694:	4614      	mov	r4, r2
 8006696:	461d      	mov	r5, r3
 8006698:	6828      	ldr	r0, [r5, #0]
 800669a:	6869      	ldr	r1, [r5, #4]
 800669c:	68aa      	ldr	r2, [r5, #8]
 800669e:	68eb      	ldr	r3, [r5, #12]
 80066a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a2:	7c2b      	ldrb	r3, [r5, #16]
 80066a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 80066a6:	4a49      	ldr	r2, [pc, #292]	@ (80067cc <loadMenuTexts+0x890>)
 80066a8:	4b49      	ldr	r3, [pc, #292]	@ (80067d0 <loadMenuTexts+0x894>)
 80066aa:	4614      	mov	r4, r2
 80066ac:	461d      	mov	r5, r3
 80066ae:	e091      	b.n	80067d4 <loadMenuTexts+0x898>
 80066b0:	20000460 	.word	0x20000460
 80066b4:	2000150c 	.word	0x2000150c
 80066b8:	20000474 	.word	0x20000474
 80066bc:	20001520 	.word	0x20001520
 80066c0:	20000488 	.word	0x20000488
 80066c4:	20001534 	.word	0x20001534
 80066c8:	2000049c 	.word	0x2000049c
 80066cc:	20001548 	.word	0x20001548
 80066d0:	200004b0 	.word	0x200004b0
 80066d4:	2000155c 	.word	0x2000155c
 80066d8:	200004c4 	.word	0x200004c4
 80066dc:	20001570 	.word	0x20001570
 80066e0:	200004d8 	.word	0x200004d8
 80066e4:	20001584 	.word	0x20001584
 80066e8:	200004ec 	.word	0x200004ec
 80066ec:	20001598 	.word	0x20001598
 80066f0:	20000500 	.word	0x20000500
 80066f4:	200015ac 	.word	0x200015ac
 80066f8:	20000514 	.word	0x20000514
 80066fc:	200015c0 	.word	0x200015c0
 8006700:	20000528 	.word	0x20000528
 8006704:	200015d4 	.word	0x200015d4
 8006708:	2000053c 	.word	0x2000053c
 800670c:	200015e8 	.word	0x200015e8
 8006710:	20000550 	.word	0x20000550
 8006714:	200015fc 	.word	0x200015fc
 8006718:	20000564 	.word	0x20000564
 800671c:	20001610 	.word	0x20001610
 8006720:	20000578 	.word	0x20000578
 8006724:	20001624 	.word	0x20001624
 8006728:	2000058c 	.word	0x2000058c
 800672c:	20001638 	.word	0x20001638
 8006730:	200005a0 	.word	0x200005a0
 8006734:	2000164c 	.word	0x2000164c
 8006738:	200005b4 	.word	0x200005b4
 800673c:	20001660 	.word	0x20001660
 8006740:	200005c8 	.word	0x200005c8
 8006744:	20001674 	.word	0x20001674
 8006748:	200005dc 	.word	0x200005dc
 800674c:	20001688 	.word	0x20001688
 8006750:	200005f0 	.word	0x200005f0
 8006754:	2000169c 	.word	0x2000169c
 8006758:	20000604 	.word	0x20000604
 800675c:	200016b0 	.word	0x200016b0
 8006760:	20000618 	.word	0x20000618
 8006764:	200016c4 	.word	0x200016c4
 8006768:	2000062c 	.word	0x2000062c
 800676c:	200016d8 	.word	0x200016d8
 8006770:	20000640 	.word	0x20000640
 8006774:	200016ec 	.word	0x200016ec
 8006778:	20000654 	.word	0x20000654
 800677c:	20001700 	.word	0x20001700
 8006780:	20000668 	.word	0x20000668
 8006784:	20001714 	.word	0x20001714
 8006788:	2000067c 	.word	0x2000067c
 800678c:	20001728 	.word	0x20001728
 8006790:	20000690 	.word	0x20000690
 8006794:	2000173c 	.word	0x2000173c
 8006798:	200006a4 	.word	0x200006a4
 800679c:	20001750 	.word	0x20001750
 80067a0:	200006b8 	.word	0x200006b8
 80067a4:	20001764 	.word	0x20001764
 80067a8:	200006cc 	.word	0x200006cc
 80067ac:	20001778 	.word	0x20001778
 80067b0:	200006e0 	.word	0x200006e0
 80067b4:	2000178c 	.word	0x2000178c
 80067b8:	200006f4 	.word	0x200006f4
 80067bc:	200017a0 	.word	0x200017a0
 80067c0:	20000c80 	.word	0x20000c80
 80067c4:	200017b4 	.word	0x200017b4
 80067c8:	20000c94 	.word	0x20000c94
 80067cc:	200017c8 	.word	0x200017c8
 80067d0:	20000ca8 	.word	0x20000ca8
 80067d4:	6828      	ldr	r0, [r5, #0]
 80067d6:	6869      	ldr	r1, [r5, #4]
 80067d8:	68aa      	ldr	r2, [r5, #8]
 80067da:	68eb      	ldr	r3, [r5, #12]
 80067dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067de:	7c2b      	ldrb	r3, [r5, #16]
 80067e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80067e2:	4a59      	ldr	r2, [pc, #356]	@ (8006948 <loadMenuTexts+0xa0c>)
 80067e4:	4b59      	ldr	r3, [pc, #356]	@ (800694c <loadMenuTexts+0xa10>)
 80067e6:	4614      	mov	r4, r2
 80067e8:	461d      	mov	r5, r3
 80067ea:	6828      	ldr	r0, [r5, #0]
 80067ec:	6869      	ldr	r1, [r5, #4]
 80067ee:	68aa      	ldr	r2, [r5, #8]
 80067f0:	68eb      	ldr	r3, [r5, #12]
 80067f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f4:	7c2b      	ldrb	r3, [r5, #16]
 80067f6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80067f8:	4a55      	ldr	r2, [pc, #340]	@ (8006950 <loadMenuTexts+0xa14>)
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <loadMenuTexts+0xa18>)
 80067fc:	4614      	mov	r4, r2
 80067fe:	461d      	mov	r5, r3
 8006800:	6828      	ldr	r0, [r5, #0]
 8006802:	6869      	ldr	r1, [r5, #4]
 8006804:	68aa      	ldr	r2, [r5, #8]
 8006806:	68eb      	ldr	r3, [r5, #12]
 8006808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800680a:	7c2b      	ldrb	r3, [r5, #16]
 800680c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 800680e:	4a52      	ldr	r2, [pc, #328]	@ (8006958 <loadMenuTexts+0xa1c>)
 8006810:	4b52      	ldr	r3, [pc, #328]	@ (800695c <loadMenuTexts+0xa20>)
 8006812:	4614      	mov	r4, r2
 8006814:	461d      	mov	r5, r3
 8006816:	6828      	ldr	r0, [r5, #0]
 8006818:	6869      	ldr	r1, [r5, #4]
 800681a:	68aa      	ldr	r2, [r5, #8]
 800681c:	68eb      	ldr	r3, [r5, #12]
 800681e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006820:	7c2b      	ldrb	r3, [r5, #16]
 8006822:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006824:	4a4e      	ldr	r2, [pc, #312]	@ (8006960 <loadMenuTexts+0xa24>)
 8006826:	4b4f      	ldr	r3, [pc, #316]	@ (8006964 <loadMenuTexts+0xa28>)
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	6828      	ldr	r0, [r5, #0]
 800682e:	6869      	ldr	r1, [r5, #4]
 8006830:	68aa      	ldr	r2, [r5, #8]
 8006832:	68eb      	ldr	r3, [r5, #12]
 8006834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006836:	7c2b      	ldrb	r3, [r5, #16]
 8006838:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 800683a:	4a4b      	ldr	r2, [pc, #300]	@ (8006968 <loadMenuTexts+0xa2c>)
 800683c:	4b4b      	ldr	r3, [pc, #300]	@ (800696c <loadMenuTexts+0xa30>)
 800683e:	4614      	mov	r4, r2
 8006840:	461d      	mov	r5, r3
 8006842:	6828      	ldr	r0, [r5, #0]
 8006844:	6869      	ldr	r1, [r5, #4]
 8006846:	68aa      	ldr	r2, [r5, #8]
 8006848:	68eb      	ldr	r3, [r5, #12]
 800684a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684c:	7c2b      	ldrb	r3, [r5, #16]
 800684e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006850:	4a47      	ldr	r2, [pc, #284]	@ (8006970 <loadMenuTexts+0xa34>)
 8006852:	4b48      	ldr	r3, [pc, #288]	@ (8006974 <loadMenuTexts+0xa38>)
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	6828      	ldr	r0, [r5, #0]
 800685a:	6869      	ldr	r1, [r5, #4]
 800685c:	68aa      	ldr	r2, [r5, #8]
 800685e:	68eb      	ldr	r3, [r5, #12]
 8006860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006862:	7c2b      	ldrb	r3, [r5, #16]
 8006864:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006866:	4a44      	ldr	r2, [pc, #272]	@ (8006978 <loadMenuTexts+0xa3c>)
 8006868:	4b44      	ldr	r3, [pc, #272]	@ (800697c <loadMenuTexts+0xa40>)
 800686a:	4614      	mov	r4, r2
 800686c:	461d      	mov	r5, r3
 800686e:	6828      	ldr	r0, [r5, #0]
 8006870:	6869      	ldr	r1, [r5, #4]
 8006872:	68aa      	ldr	r2, [r5, #8]
 8006874:	68eb      	ldr	r3, [r5, #12]
 8006876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006878:	7c2b      	ldrb	r3, [r5, #16]
 800687a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 800687c:	4a40      	ldr	r2, [pc, #256]	@ (8006980 <loadMenuTexts+0xa44>)
 800687e:	4b41      	ldr	r3, [pc, #260]	@ (8006984 <loadMenuTexts+0xa48>)
 8006880:	4614      	mov	r4, r2
 8006882:	461d      	mov	r5, r3
 8006884:	6828      	ldr	r0, [r5, #0]
 8006886:	6869      	ldr	r1, [r5, #4]
 8006888:	68aa      	ldr	r2, [r5, #8]
 800688a:	68eb      	ldr	r3, [r5, #12]
 800688c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688e:	7c2b      	ldrb	r3, [r5, #16]
 8006890:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006892:	4a3d      	ldr	r2, [pc, #244]	@ (8006988 <loadMenuTexts+0xa4c>)
 8006894:	4b3d      	ldr	r3, [pc, #244]	@ (800698c <loadMenuTexts+0xa50>)
 8006896:	4614      	mov	r4, r2
 8006898:	461d      	mov	r5, r3
 800689a:	6828      	ldr	r0, [r5, #0]
 800689c:	6869      	ldr	r1, [r5, #4]
 800689e:	68aa      	ldr	r2, [r5, #8]
 80068a0:	68eb      	ldr	r3, [r5, #12]
 80068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a4:	7c2b      	ldrb	r3, [r5, #16]
 80068a6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80068a8:	4a39      	ldr	r2, [pc, #228]	@ (8006990 <loadMenuTexts+0xa54>)
 80068aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006994 <loadMenuTexts+0xa58>)
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	6828      	ldr	r0, [r5, #0]
 80068b2:	6869      	ldr	r1, [r5, #4]
 80068b4:	68aa      	ldr	r2, [r5, #8]
 80068b6:	68eb      	ldr	r3, [r5, #12]
 80068b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ba:	7c2b      	ldrb	r3, [r5, #16]
 80068bc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 80068be:	4a36      	ldr	r2, [pc, #216]	@ (8006998 <loadMenuTexts+0xa5c>)
 80068c0:	4b36      	ldr	r3, [pc, #216]	@ (800699c <loadMenuTexts+0xa60>)
 80068c2:	4614      	mov	r4, r2
 80068c4:	461d      	mov	r5, r3
 80068c6:	6828      	ldr	r0, [r5, #0]
 80068c8:	6869      	ldr	r1, [r5, #4]
 80068ca:	68aa      	ldr	r2, [r5, #8]
 80068cc:	68eb      	ldr	r3, [r5, #12]
 80068ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d0:	7c2b      	ldrb	r3, [r5, #16]
 80068d2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80068d4:	4a32      	ldr	r2, [pc, #200]	@ (80069a0 <loadMenuTexts+0xa64>)
 80068d6:	4b33      	ldr	r3, [pc, #204]	@ (80069a4 <loadMenuTexts+0xa68>)
 80068d8:	4614      	mov	r4, r2
 80068da:	461d      	mov	r5, r3
 80068dc:	6828      	ldr	r0, [r5, #0]
 80068de:	6869      	ldr	r1, [r5, #4]
 80068e0:	68aa      	ldr	r2, [r5, #8]
 80068e2:	68eb      	ldr	r3, [r5, #12]
 80068e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e6:	7c2b      	ldrb	r3, [r5, #16]
 80068e8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 80068ea:	4a2f      	ldr	r2, [pc, #188]	@ (80069a8 <loadMenuTexts+0xa6c>)
 80068ec:	4b2f      	ldr	r3, [pc, #188]	@ (80069ac <loadMenuTexts+0xa70>)
 80068ee:	4614      	mov	r4, r2
 80068f0:	461d      	mov	r5, r3
 80068f2:	6828      	ldr	r0, [r5, #0]
 80068f4:	6869      	ldr	r1, [r5, #4]
 80068f6:	68aa      	ldr	r2, [r5, #8]
 80068f8:	68eb      	ldr	r3, [r5, #12]
 80068fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fc:	7c2b      	ldrb	r3, [r5, #16]
 80068fe:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006900:	4a2b      	ldr	r2, [pc, #172]	@ (80069b0 <loadMenuTexts+0xa74>)
 8006902:	4b2c      	ldr	r3, [pc, #176]	@ (80069b4 <loadMenuTexts+0xa78>)
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	6828      	ldr	r0, [r5, #0]
 800690a:	6869      	ldr	r1, [r5, #4]
 800690c:	68aa      	ldr	r2, [r5, #8]
 800690e:	68eb      	ldr	r3, [r5, #12]
 8006910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006912:	7c2b      	ldrb	r3, [r5, #16]
 8006914:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006916:	4a28      	ldr	r2, [pc, #160]	@ (80069b8 <loadMenuTexts+0xa7c>)
 8006918:	4b28      	ldr	r3, [pc, #160]	@ (80069bc <loadMenuTexts+0xa80>)
 800691a:	4614      	mov	r4, r2
 800691c:	461d      	mov	r5, r3
 800691e:	6828      	ldr	r0, [r5, #0]
 8006920:	6869      	ldr	r1, [r5, #4]
 8006922:	68aa      	ldr	r2, [r5, #8]
 8006924:	68eb      	ldr	r3, [r5, #12]
 8006926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006928:	7c2b      	ldrb	r3, [r5, #16]
 800692a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 800692c:	4a24      	ldr	r2, [pc, #144]	@ (80069c0 <loadMenuTexts+0xa84>)
 800692e:	4b25      	ldr	r3, [pc, #148]	@ (80069c4 <loadMenuTexts+0xa88>)
 8006930:	4614      	mov	r4, r2
 8006932:	461d      	mov	r5, r3
 8006934:	6828      	ldr	r0, [r5, #0]
 8006936:	6869      	ldr	r1, [r5, #4]
 8006938:	68aa      	ldr	r2, [r5, #8]
 800693a:	68eb      	ldr	r3, [r5, #12]
 800693c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693e:	7c2b      	ldrb	r3, [r5, #16]
 8006940:	7023      	strb	r3, [r4, #0]
 8006942:	f000 bd3a 	b.w	80073ba <loadMenuTexts+0x147e>
 8006946:	bf00      	nop
 8006948:	200017dc 	.word	0x200017dc
 800694c:	20000cbc 	.word	0x20000cbc
 8006950:	200017f0 	.word	0x200017f0
 8006954:	20000d20 	.word	0x20000d20
 8006958:	20001804 	.word	0x20001804
 800695c:	20000d34 	.word	0x20000d34
 8006960:	20001818 	.word	0x20001818
 8006964:	20000d70 	.word	0x20000d70
 8006968:	2000182c 	.word	0x2000182c
 800696c:	20000d84 	.word	0x20000d84
 8006970:	20001840 	.word	0x20001840
 8006974:	20000dc0 	.word	0x20000dc0
 8006978:	20001854 	.word	0x20001854
 800697c:	20000dd4 	.word	0x20000dd4
 8006980:	20001868 	.word	0x20001868
 8006984:	20000e10 	.word	0x20000e10
 8006988:	2000187c 	.word	0x2000187c
 800698c:	20000e38 	.word	0x20000e38
 8006990:	20001890 	.word	0x20001890
 8006994:	20000e60 	.word	0x20000e60
 8006998:	200018a4 	.word	0x200018a4
 800699c:	20000e88 	.word	0x20000e88
 80069a0:	200018b8 	.word	0x200018b8
 80069a4:	20000eb0 	.word	0x20000eb0
 80069a8:	200018cc 	.word	0x200018cc
 80069ac:	20000ed8 	.word	0x20000ed8
 80069b0:	200018e0 	.word	0x200018e0
 80069b4:	20000f00 	.word	0x20000f00
 80069b8:	200018f4 	.word	0x200018f4
 80069bc:	20000f28 	.word	0x20000f28
 80069c0:	20001908 	.word	0x20001908
 80069c4:	20000f50 	.word	0x20000f50
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 80069c8:	4ac6      	ldr	r2, [pc, #792]	@ (8006ce4 <loadMenuTexts+0xda8>)
 80069ca:	4bc7      	ldr	r3, [pc, #796]	@ (8006ce8 <loadMenuTexts+0xdac>)
 80069cc:	4614      	mov	r4, r2
 80069ce:	461d      	mov	r5, r3
 80069d0:	6828      	ldr	r0, [r5, #0]
 80069d2:	6869      	ldr	r1, [r5, #4]
 80069d4:	68aa      	ldr	r2, [r5, #8]
 80069d6:	68eb      	ldr	r3, [r5, #12]
 80069d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069da:	7c2b      	ldrb	r3, [r5, #16]
 80069dc:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 80069de:	4ac3      	ldr	r2, [pc, #780]	@ (8006cec <loadMenuTexts+0xdb0>)
 80069e0:	4bc3      	ldr	r3, [pc, #780]	@ (8006cf0 <loadMenuTexts+0xdb4>)
 80069e2:	4614      	mov	r4, r2
 80069e4:	461d      	mov	r5, r3
 80069e6:	6828      	ldr	r0, [r5, #0]
 80069e8:	6869      	ldr	r1, [r5, #4]
 80069ea:	68aa      	ldr	r2, [r5, #8]
 80069ec:	68eb      	ldr	r3, [r5, #12]
 80069ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f0:	7c2b      	ldrb	r3, [r5, #16]
 80069f2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 80069f4:	4abf      	ldr	r2, [pc, #764]	@ (8006cf4 <loadMenuTexts+0xdb8>)
 80069f6:	4bc0      	ldr	r3, [pc, #768]	@ (8006cf8 <loadMenuTexts+0xdbc>)
 80069f8:	4614      	mov	r4, r2
 80069fa:	461d      	mov	r5, r3
 80069fc:	6828      	ldr	r0, [r5, #0]
 80069fe:	6869      	ldr	r1, [r5, #4]
 8006a00:	68aa      	ldr	r2, [r5, #8]
 8006a02:	68eb      	ldr	r3, [r5, #12]
 8006a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a06:	7c2b      	ldrb	r3, [r5, #16]
 8006a08:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006a0a:	4abc      	ldr	r2, [pc, #752]	@ (8006cfc <loadMenuTexts+0xdc0>)
 8006a0c:	4bbc      	ldr	r3, [pc, #752]	@ (8006d00 <loadMenuTexts+0xdc4>)
 8006a0e:	4614      	mov	r4, r2
 8006a10:	461d      	mov	r5, r3
 8006a12:	6828      	ldr	r0, [r5, #0]
 8006a14:	6869      	ldr	r1, [r5, #4]
 8006a16:	68aa      	ldr	r2, [r5, #8]
 8006a18:	68eb      	ldr	r3, [r5, #12]
 8006a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a1c:	7c2b      	ldrb	r3, [r5, #16]
 8006a1e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006a20:	4ab8      	ldr	r2, [pc, #736]	@ (8006d04 <loadMenuTexts+0xdc8>)
 8006a22:	4bb9      	ldr	r3, [pc, #740]	@ (8006d08 <loadMenuTexts+0xdcc>)
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	6828      	ldr	r0, [r5, #0]
 8006a2a:	6869      	ldr	r1, [r5, #4]
 8006a2c:	68aa      	ldr	r2, [r5, #8]
 8006a2e:	68eb      	ldr	r3, [r5, #12]
 8006a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a32:	7c2b      	ldrb	r3, [r5, #16]
 8006a34:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006a36:	4ab5      	ldr	r2, [pc, #724]	@ (8006d0c <loadMenuTexts+0xdd0>)
 8006a38:	4bb5      	ldr	r3, [pc, #724]	@ (8006d10 <loadMenuTexts+0xdd4>)
 8006a3a:	4614      	mov	r4, r2
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	6828      	ldr	r0, [r5, #0]
 8006a40:	6869      	ldr	r1, [r5, #4]
 8006a42:	68aa      	ldr	r2, [r5, #8]
 8006a44:	68eb      	ldr	r3, [r5, #12]
 8006a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a48:	7c2b      	ldrb	r3, [r5, #16]
 8006a4a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006a4c:	4ab1      	ldr	r2, [pc, #708]	@ (8006d14 <loadMenuTexts+0xdd8>)
 8006a4e:	4bb2      	ldr	r3, [pc, #712]	@ (8006d18 <loadMenuTexts+0xddc>)
 8006a50:	4614      	mov	r4, r2
 8006a52:	461d      	mov	r5, r3
 8006a54:	6828      	ldr	r0, [r5, #0]
 8006a56:	6869      	ldr	r1, [r5, #4]
 8006a58:	68aa      	ldr	r2, [r5, #8]
 8006a5a:	68eb      	ldr	r3, [r5, #12]
 8006a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5e:	7c2b      	ldrb	r3, [r5, #16]
 8006a60:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006a62:	4aae      	ldr	r2, [pc, #696]	@ (8006d1c <loadMenuTexts+0xde0>)
 8006a64:	4bae      	ldr	r3, [pc, #696]	@ (8006d20 <loadMenuTexts+0xde4>)
 8006a66:	4614      	mov	r4, r2
 8006a68:	461d      	mov	r5, r3
 8006a6a:	6828      	ldr	r0, [r5, #0]
 8006a6c:	6869      	ldr	r1, [r5, #4]
 8006a6e:	68aa      	ldr	r2, [r5, #8]
 8006a70:	68eb      	ldr	r3, [r5, #12]
 8006a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a74:	7c2b      	ldrb	r3, [r5, #16]
 8006a76:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006a78:	4aaa      	ldr	r2, [pc, #680]	@ (8006d24 <loadMenuTexts+0xde8>)
 8006a7a:	4bab      	ldr	r3, [pc, #684]	@ (8006d28 <loadMenuTexts+0xdec>)
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	461d      	mov	r5, r3
 8006a80:	6828      	ldr	r0, [r5, #0]
 8006a82:	6869      	ldr	r1, [r5, #4]
 8006a84:	68aa      	ldr	r2, [r5, #8]
 8006a86:	68eb      	ldr	r3, [r5, #12]
 8006a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8a:	7c2b      	ldrb	r3, [r5, #16]
 8006a8c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a8e:	4aa7      	ldr	r2, [pc, #668]	@ (8006d2c <loadMenuTexts+0xdf0>)
 8006a90:	4ba7      	ldr	r3, [pc, #668]	@ (8006d30 <loadMenuTexts+0xdf4>)
 8006a92:	4614      	mov	r4, r2
 8006a94:	461d      	mov	r5, r3
 8006a96:	6828      	ldr	r0, [r5, #0]
 8006a98:	6869      	ldr	r1, [r5, #4]
 8006a9a:	68aa      	ldr	r2, [r5, #8]
 8006a9c:	68eb      	ldr	r3, [r5, #12]
 8006a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa0:	7c2b      	ldrb	r3, [r5, #16]
 8006aa2:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006aa4:	4aa3      	ldr	r2, [pc, #652]	@ (8006d34 <loadMenuTexts+0xdf8>)
 8006aa6:	4ba4      	ldr	r3, [pc, #656]	@ (8006d38 <loadMenuTexts+0xdfc>)
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	6828      	ldr	r0, [r5, #0]
 8006aae:	6869      	ldr	r1, [r5, #4]
 8006ab0:	68aa      	ldr	r2, [r5, #8]
 8006ab2:	68eb      	ldr	r3, [r5, #12]
 8006ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab6:	7c2b      	ldrb	r3, [r5, #16]
 8006ab8:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006aba:	4aa0      	ldr	r2, [pc, #640]	@ (8006d3c <loadMenuTexts+0xe00>)
 8006abc:	4ba0      	ldr	r3, [pc, #640]	@ (8006d40 <loadMenuTexts+0xe04>)
 8006abe:	4614      	mov	r4, r2
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	6828      	ldr	r0, [r5, #0]
 8006ac4:	6869      	ldr	r1, [r5, #4]
 8006ac6:	68aa      	ldr	r2, [r5, #8]
 8006ac8:	68eb      	ldr	r3, [r5, #12]
 8006aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006acc:	7c2b      	ldrb	r3, [r5, #16]
 8006ace:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006ad0:	4a9c      	ldr	r2, [pc, #624]	@ (8006d44 <loadMenuTexts+0xe08>)
 8006ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8006d48 <loadMenuTexts+0xe0c>)
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	6828      	ldr	r0, [r5, #0]
 8006ada:	6869      	ldr	r1, [r5, #4]
 8006adc:	68aa      	ldr	r2, [r5, #8]
 8006ade:	68eb      	ldr	r3, [r5, #12]
 8006ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae2:	7c2b      	ldrb	r3, [r5, #16]
 8006ae4:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006ae6:	4a99      	ldr	r2, [pc, #612]	@ (8006d4c <loadMenuTexts+0xe10>)
 8006ae8:	4b99      	ldr	r3, [pc, #612]	@ (8006d50 <loadMenuTexts+0xe14>)
 8006aea:	4614      	mov	r4, r2
 8006aec:	461d      	mov	r5, r3
 8006aee:	6828      	ldr	r0, [r5, #0]
 8006af0:	6869      	ldr	r1, [r5, #4]
 8006af2:	68aa      	ldr	r2, [r5, #8]
 8006af4:	68eb      	ldr	r3, [r5, #12]
 8006af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af8:	7c2b      	ldrb	r3, [r5, #16]
 8006afa:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006afc:	4a95      	ldr	r2, [pc, #596]	@ (8006d54 <loadMenuTexts+0xe18>)
 8006afe:	4b96      	ldr	r3, [pc, #600]	@ (8006d58 <loadMenuTexts+0xe1c>)
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	6828      	ldr	r0, [r5, #0]
 8006b06:	6869      	ldr	r1, [r5, #4]
 8006b08:	68aa      	ldr	r2, [r5, #8]
 8006b0a:	68eb      	ldr	r3, [r5, #12]
 8006b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0e:	7c2b      	ldrb	r3, [r5, #16]
 8006b10:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006b12:	4a92      	ldr	r2, [pc, #584]	@ (8006d5c <loadMenuTexts+0xe20>)
 8006b14:	4b92      	ldr	r3, [pc, #584]	@ (8006d60 <loadMenuTexts+0xe24>)
 8006b16:	4614      	mov	r4, r2
 8006b18:	461d      	mov	r5, r3
 8006b1a:	6828      	ldr	r0, [r5, #0]
 8006b1c:	6869      	ldr	r1, [r5, #4]
 8006b1e:	68aa      	ldr	r2, [r5, #8]
 8006b20:	68eb      	ldr	r3, [r5, #12]
 8006b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b24:	7c2b      	ldrb	r3, [r5, #16]
 8006b26:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006b28:	4a8e      	ldr	r2, [pc, #568]	@ (8006d64 <loadMenuTexts+0xe28>)
 8006b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d68 <loadMenuTexts+0xe2c>)
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	6828      	ldr	r0, [r5, #0]
 8006b32:	6869      	ldr	r1, [r5, #4]
 8006b34:	68aa      	ldr	r2, [r5, #8]
 8006b36:	68eb      	ldr	r3, [r5, #12]
 8006b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3a:	7c2b      	ldrb	r3, [r5, #16]
 8006b3c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006b3e:	4a8b      	ldr	r2, [pc, #556]	@ (8006d6c <loadMenuTexts+0xe30>)
 8006b40:	4b8b      	ldr	r3, [pc, #556]	@ (8006d70 <loadMenuTexts+0xe34>)
 8006b42:	4614      	mov	r4, r2
 8006b44:	461d      	mov	r5, r3
 8006b46:	6828      	ldr	r0, [r5, #0]
 8006b48:	6869      	ldr	r1, [r5, #4]
 8006b4a:	68aa      	ldr	r2, [r5, #8]
 8006b4c:	68eb      	ldr	r3, [r5, #12]
 8006b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b50:	7c2b      	ldrb	r3, [r5, #16]
 8006b52:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006b54:	4a87      	ldr	r2, [pc, #540]	@ (8006d74 <loadMenuTexts+0xe38>)
 8006b56:	4b88      	ldr	r3, [pc, #544]	@ (8006d78 <loadMenuTexts+0xe3c>)
 8006b58:	4614      	mov	r4, r2
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	6828      	ldr	r0, [r5, #0]
 8006b5e:	6869      	ldr	r1, [r5, #4]
 8006b60:	68aa      	ldr	r2, [r5, #8]
 8006b62:	68eb      	ldr	r3, [r5, #12]
 8006b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b66:	7c2b      	ldrb	r3, [r5, #16]
 8006b68:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006b6a:	4a84      	ldr	r2, [pc, #528]	@ (8006d7c <loadMenuTexts+0xe40>)
 8006b6c:	4b84      	ldr	r3, [pc, #528]	@ (8006d80 <loadMenuTexts+0xe44>)
 8006b6e:	4614      	mov	r4, r2
 8006b70:	461d      	mov	r5, r3
 8006b72:	6828      	ldr	r0, [r5, #0]
 8006b74:	6869      	ldr	r1, [r5, #4]
 8006b76:	68aa      	ldr	r2, [r5, #8]
 8006b78:	68eb      	ldr	r3, [r5, #12]
 8006b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b7c:	7c2b      	ldrb	r3, [r5, #16]
 8006b7e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b80:	4a80      	ldr	r2, [pc, #512]	@ (8006d84 <loadMenuTexts+0xe48>)
 8006b82:	4b81      	ldr	r3, [pc, #516]	@ (8006d88 <loadMenuTexts+0xe4c>)
 8006b84:	4614      	mov	r4, r2
 8006b86:	461d      	mov	r5, r3
 8006b88:	6828      	ldr	r0, [r5, #0]
 8006b8a:	6869      	ldr	r1, [r5, #4]
 8006b8c:	68aa      	ldr	r2, [r5, #8]
 8006b8e:	68eb      	ldr	r3, [r5, #12]
 8006b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b92:	7c2b      	ldrb	r3, [r5, #16]
 8006b94:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b96:	4a7d      	ldr	r2, [pc, #500]	@ (8006d8c <loadMenuTexts+0xe50>)
 8006b98:	4b7d      	ldr	r3, [pc, #500]	@ (8006d90 <loadMenuTexts+0xe54>)
 8006b9a:	4614      	mov	r4, r2
 8006b9c:	461d      	mov	r5, r3
 8006b9e:	6828      	ldr	r0, [r5, #0]
 8006ba0:	6869      	ldr	r1, [r5, #4]
 8006ba2:	68aa      	ldr	r2, [r5, #8]
 8006ba4:	68eb      	ldr	r3, [r5, #12]
 8006ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba8:	7c2b      	ldrb	r3, [r5, #16]
 8006baa:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006bac:	4a79      	ldr	r2, [pc, #484]	@ (8006d94 <loadMenuTexts+0xe58>)
 8006bae:	4b7a      	ldr	r3, [pc, #488]	@ (8006d98 <loadMenuTexts+0xe5c>)
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	6828      	ldr	r0, [r5, #0]
 8006bb6:	6869      	ldr	r1, [r5, #4]
 8006bb8:	68aa      	ldr	r2, [r5, #8]
 8006bba:	68eb      	ldr	r3, [r5, #12]
 8006bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bbe:	7c2b      	ldrb	r3, [r5, #16]
 8006bc0:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006bc2:	4a76      	ldr	r2, [pc, #472]	@ (8006d9c <loadMenuTexts+0xe60>)
 8006bc4:	4b76      	ldr	r3, [pc, #472]	@ (8006da0 <loadMenuTexts+0xe64>)
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	461d      	mov	r5, r3
 8006bca:	6828      	ldr	r0, [r5, #0]
 8006bcc:	6869      	ldr	r1, [r5, #4]
 8006bce:	68aa      	ldr	r2, [r5, #8]
 8006bd0:	68eb      	ldr	r3, [r5, #12]
 8006bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd4:	7c2b      	ldrb	r3, [r5, #16]
 8006bd6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006bd8:	4a72      	ldr	r2, [pc, #456]	@ (8006da4 <loadMenuTexts+0xe68>)
 8006bda:	4b73      	ldr	r3, [pc, #460]	@ (8006da8 <loadMenuTexts+0xe6c>)
 8006bdc:	4614      	mov	r4, r2
 8006bde:	461d      	mov	r5, r3
 8006be0:	6828      	ldr	r0, [r5, #0]
 8006be2:	6869      	ldr	r1, [r5, #4]
 8006be4:	68aa      	ldr	r2, [r5, #8]
 8006be6:	68eb      	ldr	r3, [r5, #12]
 8006be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bea:	7c2b      	ldrb	r3, [r5, #16]
 8006bec:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006bee:	4a6f      	ldr	r2, [pc, #444]	@ (8006dac <loadMenuTexts+0xe70>)
 8006bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8006db0 <loadMenuTexts+0xe74>)
 8006bf2:	4614      	mov	r4, r2
 8006bf4:	461d      	mov	r5, r3
 8006bf6:	6828      	ldr	r0, [r5, #0]
 8006bf8:	6869      	ldr	r1, [r5, #4]
 8006bfa:	68aa      	ldr	r2, [r5, #8]
 8006bfc:	68eb      	ldr	r3, [r5, #12]
 8006bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c00:	7c2b      	ldrb	r3, [r5, #16]
 8006c02:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006c04:	4a6b      	ldr	r2, [pc, #428]	@ (8006db4 <loadMenuTexts+0xe78>)
 8006c06:	4b6c      	ldr	r3, [pc, #432]	@ (8006db8 <loadMenuTexts+0xe7c>)
 8006c08:	4614      	mov	r4, r2
 8006c0a:	461d      	mov	r5, r3
 8006c0c:	6828      	ldr	r0, [r5, #0]
 8006c0e:	6869      	ldr	r1, [r5, #4]
 8006c10:	68aa      	ldr	r2, [r5, #8]
 8006c12:	68eb      	ldr	r3, [r5, #12]
 8006c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c16:	7c2b      	ldrb	r3, [r5, #16]
 8006c18:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006c1a:	4a68      	ldr	r2, [pc, #416]	@ (8006dbc <loadMenuTexts+0xe80>)
 8006c1c:	4b68      	ldr	r3, [pc, #416]	@ (8006dc0 <loadMenuTexts+0xe84>)
 8006c1e:	4614      	mov	r4, r2
 8006c20:	461d      	mov	r5, r3
 8006c22:	6828      	ldr	r0, [r5, #0]
 8006c24:	6869      	ldr	r1, [r5, #4]
 8006c26:	68aa      	ldr	r2, [r5, #8]
 8006c28:	68eb      	ldr	r3, [r5, #12]
 8006c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2c:	7c2b      	ldrb	r3, [r5, #16]
 8006c2e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006c30:	4a64      	ldr	r2, [pc, #400]	@ (8006dc4 <loadMenuTexts+0xe88>)
 8006c32:	4b65      	ldr	r3, [pc, #404]	@ (8006dc8 <loadMenuTexts+0xe8c>)
 8006c34:	4614      	mov	r4, r2
 8006c36:	461d      	mov	r5, r3
 8006c38:	6828      	ldr	r0, [r5, #0]
 8006c3a:	6869      	ldr	r1, [r5, #4]
 8006c3c:	68aa      	ldr	r2, [r5, #8]
 8006c3e:	68eb      	ldr	r3, [r5, #12]
 8006c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c42:	7c2b      	ldrb	r3, [r5, #16]
 8006c44:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006c46:	4a61      	ldr	r2, [pc, #388]	@ (8006dcc <loadMenuTexts+0xe90>)
 8006c48:	4b61      	ldr	r3, [pc, #388]	@ (8006dd0 <loadMenuTexts+0xe94>)
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	461d      	mov	r5, r3
 8006c4e:	6828      	ldr	r0, [r5, #0]
 8006c50:	6869      	ldr	r1, [r5, #4]
 8006c52:	68aa      	ldr	r2, [r5, #8]
 8006c54:	68eb      	ldr	r3, [r5, #12]
 8006c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c58:	7c2b      	ldrb	r3, [r5, #16]
 8006c5a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd4 <loadMenuTexts+0xe98>)
 8006c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8006dd8 <loadMenuTexts+0xe9c>)
 8006c60:	4614      	mov	r4, r2
 8006c62:	461d      	mov	r5, r3
 8006c64:	6828      	ldr	r0, [r5, #0]
 8006c66:	6869      	ldr	r1, [r5, #4]
 8006c68:	68aa      	ldr	r2, [r5, #8]
 8006c6a:	68eb      	ldr	r3, [r5, #12]
 8006c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c6e:	7c2b      	ldrb	r3, [r5, #16]
 8006c70:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006c72:	4a5a      	ldr	r2, [pc, #360]	@ (8006ddc <loadMenuTexts+0xea0>)
 8006c74:	4b5a      	ldr	r3, [pc, #360]	@ (8006de0 <loadMenuTexts+0xea4>)
 8006c76:	4614      	mov	r4, r2
 8006c78:	461d      	mov	r5, r3
 8006c7a:	6828      	ldr	r0, [r5, #0]
 8006c7c:	6869      	ldr	r1, [r5, #4]
 8006c7e:	68aa      	ldr	r2, [r5, #8]
 8006c80:	68eb      	ldr	r3, [r5, #12]
 8006c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c84:	7c2b      	ldrb	r3, [r5, #16]
 8006c86:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c88:	4a56      	ldr	r2, [pc, #344]	@ (8006de4 <loadMenuTexts+0xea8>)
 8006c8a:	4b57      	ldr	r3, [pc, #348]	@ (8006de8 <loadMenuTexts+0xeac>)
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	461d      	mov	r5, r3
 8006c90:	6828      	ldr	r0, [r5, #0]
 8006c92:	6869      	ldr	r1, [r5, #4]
 8006c94:	68aa      	ldr	r2, [r5, #8]
 8006c96:	68eb      	ldr	r3, [r5, #12]
 8006c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c9a:	7c2b      	ldrb	r3, [r5, #16]
 8006c9c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c9e:	4a53      	ldr	r2, [pc, #332]	@ (8006dec <loadMenuTexts+0xeb0>)
 8006ca0:	4b53      	ldr	r3, [pc, #332]	@ (8006df0 <loadMenuTexts+0xeb4>)
 8006ca2:	4614      	mov	r4, r2
 8006ca4:	461d      	mov	r5, r3
 8006ca6:	6828      	ldr	r0, [r5, #0]
 8006ca8:	6869      	ldr	r1, [r5, #4]
 8006caa:	68aa      	ldr	r2, [r5, #8]
 8006cac:	68eb      	ldr	r3, [r5, #12]
 8006cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb0:	7c2b      	ldrb	r3, [r5, #16]
 8006cb2:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8006df4 <loadMenuTexts+0xeb8>)
 8006cb6:	4b50      	ldr	r3, [pc, #320]	@ (8006df8 <loadMenuTexts+0xebc>)
 8006cb8:	4614      	mov	r4, r2
 8006cba:	461d      	mov	r5, r3
 8006cbc:	6828      	ldr	r0, [r5, #0]
 8006cbe:	6869      	ldr	r1, [r5, #4]
 8006cc0:	68aa      	ldr	r2, [r5, #8]
 8006cc2:	68eb      	ldr	r3, [r5, #12]
 8006cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc6:	7c2b      	ldrb	r3, [r5, #16]
 8006cc8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006cca:	4a4c      	ldr	r2, [pc, #304]	@ (8006dfc <loadMenuTexts+0xec0>)
 8006ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8006e00 <loadMenuTexts+0xec4>)
 8006cce:	4614      	mov	r4, r2
 8006cd0:	461d      	mov	r5, r3
 8006cd2:	6828      	ldr	r0, [r5, #0]
 8006cd4:	6869      	ldr	r1, [r5, #4]
 8006cd6:	68aa      	ldr	r2, [r5, #8]
 8006cd8:	68eb      	ldr	r3, [r5, #12]
 8006cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cdc:	7c2b      	ldrb	r3, [r5, #16]
 8006cde:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006ce0:	4a48      	ldr	r2, [pc, #288]	@ (8006e04 <loadMenuTexts+0xec8>)
 8006ce2:	e091      	b.n	8006e08 <loadMenuTexts+0xecc>
 8006ce4:	20001228 	.word	0x20001228
 8006ce8:	20000708 	.word	0x20000708
 8006cec:	2000123c 	.word	0x2000123c
 8006cf0:	2000071c 	.word	0x2000071c
 8006cf4:	20001250 	.word	0x20001250
 8006cf8:	20000730 	.word	0x20000730
 8006cfc:	20001264 	.word	0x20001264
 8006d00:	20000744 	.word	0x20000744
 8006d04:	20001278 	.word	0x20001278
 8006d08:	20000758 	.word	0x20000758
 8006d0c:	2000128c 	.word	0x2000128c
 8006d10:	2000076c 	.word	0x2000076c
 8006d14:	200012a0 	.word	0x200012a0
 8006d18:	20000780 	.word	0x20000780
 8006d1c:	200012b4 	.word	0x200012b4
 8006d20:	20000794 	.word	0x20000794
 8006d24:	200012c8 	.word	0x200012c8
 8006d28:	200007a8 	.word	0x200007a8
 8006d2c:	200012dc 	.word	0x200012dc
 8006d30:	200007bc 	.word	0x200007bc
 8006d34:	200012f0 	.word	0x200012f0
 8006d38:	200007d0 	.word	0x200007d0
 8006d3c:	20001304 	.word	0x20001304
 8006d40:	200007e4 	.word	0x200007e4
 8006d44:	20001318 	.word	0x20001318
 8006d48:	200007f8 	.word	0x200007f8
 8006d4c:	2000132c 	.word	0x2000132c
 8006d50:	2000080c 	.word	0x2000080c
 8006d54:	20001340 	.word	0x20001340
 8006d58:	20000820 	.word	0x20000820
 8006d5c:	20001354 	.word	0x20001354
 8006d60:	20000834 	.word	0x20000834
 8006d64:	20001368 	.word	0x20001368
 8006d68:	20000848 	.word	0x20000848
 8006d6c:	2000137c 	.word	0x2000137c
 8006d70:	2000085c 	.word	0x2000085c
 8006d74:	20001390 	.word	0x20001390
 8006d78:	20000870 	.word	0x20000870
 8006d7c:	200013a4 	.word	0x200013a4
 8006d80:	20000884 	.word	0x20000884
 8006d84:	200013b8 	.word	0x200013b8
 8006d88:	20000898 	.word	0x20000898
 8006d8c:	200013cc 	.word	0x200013cc
 8006d90:	200008ac 	.word	0x200008ac
 8006d94:	200013e0 	.word	0x200013e0
 8006d98:	200008c0 	.word	0x200008c0
 8006d9c:	200013f4 	.word	0x200013f4
 8006da0:	200008d4 	.word	0x200008d4
 8006da4:	20001408 	.word	0x20001408
 8006da8:	200008e8 	.word	0x200008e8
 8006dac:	2000141c 	.word	0x2000141c
 8006db0:	200008fc 	.word	0x200008fc
 8006db4:	20001430 	.word	0x20001430
 8006db8:	20000910 	.word	0x20000910
 8006dbc:	20001444 	.word	0x20001444
 8006dc0:	20000924 	.word	0x20000924
 8006dc4:	20001458 	.word	0x20001458
 8006dc8:	20000938 	.word	0x20000938
 8006dcc:	2000146c 	.word	0x2000146c
 8006dd0:	2000094c 	.word	0x2000094c
 8006dd4:	20001480 	.word	0x20001480
 8006dd8:	20000960 	.word	0x20000960
 8006ddc:	20001494 	.word	0x20001494
 8006de0:	20000974 	.word	0x20000974
 8006de4:	200014a8 	.word	0x200014a8
 8006de8:	20000988 	.word	0x20000988
 8006dec:	200014bc 	.word	0x200014bc
 8006df0:	2000099c 	.word	0x2000099c
 8006df4:	200014d0 	.word	0x200014d0
 8006df8:	200009b0 	.word	0x200009b0
 8006dfc:	200014e4 	.word	0x200014e4
 8006e00:	200009c4 	.word	0x200009c4
 8006e04:	200014f8 	.word	0x200014f8
 8006e08:	4bc7      	ldr	r3, [pc, #796]	@ (8007128 <loadMenuTexts+0x11ec>)
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	6828      	ldr	r0, [r5, #0]
 8006e10:	6869      	ldr	r1, [r5, #4]
 8006e12:	68aa      	ldr	r2, [r5, #8]
 8006e14:	68eb      	ldr	r3, [r5, #12]
 8006e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e18:	7c2b      	ldrb	r3, [r5, #16]
 8006e1a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006e1c:	4ac3      	ldr	r2, [pc, #780]	@ (800712c <loadMenuTexts+0x11f0>)
 8006e1e:	4bc4      	ldr	r3, [pc, #784]	@ (8007130 <loadMenuTexts+0x11f4>)
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	6828      	ldr	r0, [r5, #0]
 8006e26:	6869      	ldr	r1, [r5, #4]
 8006e28:	68aa      	ldr	r2, [r5, #8]
 8006e2a:	68eb      	ldr	r3, [r5, #12]
 8006e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2e:	7c2b      	ldrb	r3, [r5, #16]
 8006e30:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006e32:	4ac0      	ldr	r2, [pc, #768]	@ (8007134 <loadMenuTexts+0x11f8>)
 8006e34:	4bc0      	ldr	r3, [pc, #768]	@ (8007138 <loadMenuTexts+0x11fc>)
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	6828      	ldr	r0, [r5, #0]
 8006e3c:	6869      	ldr	r1, [r5, #4]
 8006e3e:	68aa      	ldr	r2, [r5, #8]
 8006e40:	68eb      	ldr	r3, [r5, #12]
 8006e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e44:	7c2b      	ldrb	r3, [r5, #16]
 8006e46:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006e48:	4abc      	ldr	r2, [pc, #752]	@ (800713c <loadMenuTexts+0x1200>)
 8006e4a:	4bbd      	ldr	r3, [pc, #756]	@ (8007140 <loadMenuTexts+0x1204>)
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	6828      	ldr	r0, [r5, #0]
 8006e52:	6869      	ldr	r1, [r5, #4]
 8006e54:	68aa      	ldr	r2, [r5, #8]
 8006e56:	68eb      	ldr	r3, [r5, #12]
 8006e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5a:	7c2b      	ldrb	r3, [r5, #16]
 8006e5c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006e5e:	4ab9      	ldr	r2, [pc, #740]	@ (8007144 <loadMenuTexts+0x1208>)
 8006e60:	4bb9      	ldr	r3, [pc, #740]	@ (8007148 <loadMenuTexts+0x120c>)
 8006e62:	4614      	mov	r4, r2
 8006e64:	461d      	mov	r5, r3
 8006e66:	6828      	ldr	r0, [r5, #0]
 8006e68:	6869      	ldr	r1, [r5, #4]
 8006e6a:	68aa      	ldr	r2, [r5, #8]
 8006e6c:	68eb      	ldr	r3, [r5, #12]
 8006e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e70:	7c2b      	ldrb	r3, [r5, #16]
 8006e72:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006e74:	4ab5      	ldr	r2, [pc, #724]	@ (800714c <loadMenuTexts+0x1210>)
 8006e76:	4bb6      	ldr	r3, [pc, #728]	@ (8007150 <loadMenuTexts+0x1214>)
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	6828      	ldr	r0, [r5, #0]
 8006e7e:	6869      	ldr	r1, [r5, #4]
 8006e80:	68aa      	ldr	r2, [r5, #8]
 8006e82:	68eb      	ldr	r3, [r5, #12]
 8006e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e86:	7c2b      	ldrb	r3, [r5, #16]
 8006e88:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e8a:	4ab2      	ldr	r2, [pc, #712]	@ (8007154 <loadMenuTexts+0x1218>)
 8006e8c:	4bb2      	ldr	r3, [pc, #712]	@ (8007158 <loadMenuTexts+0x121c>)
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	6828      	ldr	r0, [r5, #0]
 8006e94:	6869      	ldr	r1, [r5, #4]
 8006e96:	68aa      	ldr	r2, [r5, #8]
 8006e98:	68eb      	ldr	r3, [r5, #12]
 8006e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e9c:	7c2b      	ldrb	r3, [r5, #16]
 8006e9e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006ea0:	4aae      	ldr	r2, [pc, #696]	@ (800715c <loadMenuTexts+0x1220>)
 8006ea2:	4baf      	ldr	r3, [pc, #700]	@ (8007160 <loadMenuTexts+0x1224>)
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	6828      	ldr	r0, [r5, #0]
 8006eaa:	6869      	ldr	r1, [r5, #4]
 8006eac:	68aa      	ldr	r2, [r5, #8]
 8006eae:	68eb      	ldr	r3, [r5, #12]
 8006eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb2:	7c2b      	ldrb	r3, [r5, #16]
 8006eb4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006eb6:	4aab      	ldr	r2, [pc, #684]	@ (8007164 <loadMenuTexts+0x1228>)
 8006eb8:	4bab      	ldr	r3, [pc, #684]	@ (8007168 <loadMenuTexts+0x122c>)
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	6828      	ldr	r0, [r5, #0]
 8006ec0:	6869      	ldr	r1, [r5, #4]
 8006ec2:	68aa      	ldr	r2, [r5, #8]
 8006ec4:	68eb      	ldr	r3, [r5, #12]
 8006ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec8:	7c2b      	ldrb	r3, [r5, #16]
 8006eca:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006ecc:	4aa7      	ldr	r2, [pc, #668]	@ (800716c <loadMenuTexts+0x1230>)
 8006ece:	4ba8      	ldr	r3, [pc, #672]	@ (8007170 <loadMenuTexts+0x1234>)
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	6828      	ldr	r0, [r5, #0]
 8006ed6:	6869      	ldr	r1, [r5, #4]
 8006ed8:	68aa      	ldr	r2, [r5, #8]
 8006eda:	68eb      	ldr	r3, [r5, #12]
 8006edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ede:	7c2b      	ldrb	r3, [r5, #16]
 8006ee0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006ee2:	4aa4      	ldr	r2, [pc, #656]	@ (8007174 <loadMenuTexts+0x1238>)
 8006ee4:	4ba4      	ldr	r3, [pc, #656]	@ (8007178 <loadMenuTexts+0x123c>)
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	461d      	mov	r5, r3
 8006eea:	6828      	ldr	r0, [r5, #0]
 8006eec:	6869      	ldr	r1, [r5, #4]
 8006eee:	68aa      	ldr	r2, [r5, #8]
 8006ef0:	68eb      	ldr	r3, [r5, #12]
 8006ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef4:	7c2b      	ldrb	r3, [r5, #16]
 8006ef6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006ef8:	4aa0      	ldr	r2, [pc, #640]	@ (800717c <loadMenuTexts+0x1240>)
 8006efa:	4ba1      	ldr	r3, [pc, #644]	@ (8007180 <loadMenuTexts+0x1244>)
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	6828      	ldr	r0, [r5, #0]
 8006f02:	6869      	ldr	r1, [r5, #4]
 8006f04:	68aa      	ldr	r2, [r5, #8]
 8006f06:	68eb      	ldr	r3, [r5, #12]
 8006f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f0a:	7c2b      	ldrb	r3, [r5, #16]
 8006f0c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006f0e:	4a9d      	ldr	r2, [pc, #628]	@ (8007184 <loadMenuTexts+0x1248>)
 8006f10:	4b9d      	ldr	r3, [pc, #628]	@ (8007188 <loadMenuTexts+0x124c>)
 8006f12:	4614      	mov	r4, r2
 8006f14:	461d      	mov	r5, r3
 8006f16:	6828      	ldr	r0, [r5, #0]
 8006f18:	6869      	ldr	r1, [r5, #4]
 8006f1a:	68aa      	ldr	r2, [r5, #8]
 8006f1c:	68eb      	ldr	r3, [r5, #12]
 8006f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f20:	7c2b      	ldrb	r3, [r5, #16]
 8006f22:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006f24:	4a99      	ldr	r2, [pc, #612]	@ (800718c <loadMenuTexts+0x1250>)
 8006f26:	4b9a      	ldr	r3, [pc, #616]	@ (8007190 <loadMenuTexts+0x1254>)
 8006f28:	4614      	mov	r4, r2
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	6828      	ldr	r0, [r5, #0]
 8006f2e:	6869      	ldr	r1, [r5, #4]
 8006f30:	68aa      	ldr	r2, [r5, #8]
 8006f32:	68eb      	ldr	r3, [r5, #12]
 8006f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f36:	7c2b      	ldrb	r3, [r5, #16]
 8006f38:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006f3a:	4a96      	ldr	r2, [pc, #600]	@ (8007194 <loadMenuTexts+0x1258>)
 8006f3c:	4b96      	ldr	r3, [pc, #600]	@ (8007198 <loadMenuTexts+0x125c>)
 8006f3e:	4614      	mov	r4, r2
 8006f40:	461d      	mov	r5, r3
 8006f42:	6828      	ldr	r0, [r5, #0]
 8006f44:	6869      	ldr	r1, [r5, #4]
 8006f46:	68aa      	ldr	r2, [r5, #8]
 8006f48:	68eb      	ldr	r3, [r5, #12]
 8006f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f4c:	7c2b      	ldrb	r3, [r5, #16]
 8006f4e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006f50:	4a92      	ldr	r2, [pc, #584]	@ (800719c <loadMenuTexts+0x1260>)
 8006f52:	4b93      	ldr	r3, [pc, #588]	@ (80071a0 <loadMenuTexts+0x1264>)
 8006f54:	4614      	mov	r4, r2
 8006f56:	461d      	mov	r5, r3
 8006f58:	6828      	ldr	r0, [r5, #0]
 8006f5a:	6869      	ldr	r1, [r5, #4]
 8006f5c:	68aa      	ldr	r2, [r5, #8]
 8006f5e:	68eb      	ldr	r3, [r5, #12]
 8006f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f62:	7c2b      	ldrb	r3, [r5, #16]
 8006f64:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006f66:	4a8f      	ldr	r2, [pc, #572]	@ (80071a4 <loadMenuTexts+0x1268>)
 8006f68:	4b8f      	ldr	r3, [pc, #572]	@ (80071a8 <loadMenuTexts+0x126c>)
 8006f6a:	4614      	mov	r4, r2
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	6828      	ldr	r0, [r5, #0]
 8006f70:	6869      	ldr	r1, [r5, #4]
 8006f72:	68aa      	ldr	r2, [r5, #8]
 8006f74:	68eb      	ldr	r3, [r5, #12]
 8006f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f78:	7c2b      	ldrb	r3, [r5, #16]
 8006f7a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006f7c:	4a8b      	ldr	r2, [pc, #556]	@ (80071ac <loadMenuTexts+0x1270>)
 8006f7e:	4b8c      	ldr	r3, [pc, #560]	@ (80071b0 <loadMenuTexts+0x1274>)
 8006f80:	4614      	mov	r4, r2
 8006f82:	461d      	mov	r5, r3
 8006f84:	6828      	ldr	r0, [r5, #0]
 8006f86:	6869      	ldr	r1, [r5, #4]
 8006f88:	68aa      	ldr	r2, [r5, #8]
 8006f8a:	68eb      	ldr	r3, [r5, #12]
 8006f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8e:	7c2b      	ldrb	r3, [r5, #16]
 8006f90:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f92:	4a88      	ldr	r2, [pc, #544]	@ (80071b4 <loadMenuTexts+0x1278>)
 8006f94:	4b88      	ldr	r3, [pc, #544]	@ (80071b8 <loadMenuTexts+0x127c>)
 8006f96:	4614      	mov	r4, r2
 8006f98:	461d      	mov	r5, r3
 8006f9a:	6828      	ldr	r0, [r5, #0]
 8006f9c:	6869      	ldr	r1, [r5, #4]
 8006f9e:	68aa      	ldr	r2, [r5, #8]
 8006fa0:	68eb      	ldr	r3, [r5, #12]
 8006fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa4:	7c2b      	ldrb	r3, [r5, #16]
 8006fa6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006fa8:	4a84      	ldr	r2, [pc, #528]	@ (80071bc <loadMenuTexts+0x1280>)
 8006faa:	4b85      	ldr	r3, [pc, #532]	@ (80071c0 <loadMenuTexts+0x1284>)
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	6828      	ldr	r0, [r5, #0]
 8006fb2:	6869      	ldr	r1, [r5, #4]
 8006fb4:	68aa      	ldr	r2, [r5, #8]
 8006fb6:	68eb      	ldr	r3, [r5, #12]
 8006fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fba:	7c2b      	ldrb	r3, [r5, #16]
 8006fbc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006fbe:	4a81      	ldr	r2, [pc, #516]	@ (80071c4 <loadMenuTexts+0x1288>)
 8006fc0:	4b81      	ldr	r3, [pc, #516]	@ (80071c8 <loadMenuTexts+0x128c>)
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	461d      	mov	r5, r3
 8006fc6:	6828      	ldr	r0, [r5, #0]
 8006fc8:	6869      	ldr	r1, [r5, #4]
 8006fca:	68aa      	ldr	r2, [r5, #8]
 8006fcc:	68eb      	ldr	r3, [r5, #12]
 8006fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd0:	7c2b      	ldrb	r3, [r5, #16]
 8006fd2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80071cc <loadMenuTexts+0x1290>)
 8006fd6:	4b7e      	ldr	r3, [pc, #504]	@ (80071d0 <loadMenuTexts+0x1294>)
 8006fd8:	4614      	mov	r4, r2
 8006fda:	461d      	mov	r5, r3
 8006fdc:	6828      	ldr	r0, [r5, #0]
 8006fde:	6869      	ldr	r1, [r5, #4]
 8006fe0:	68aa      	ldr	r2, [r5, #8]
 8006fe2:	68eb      	ldr	r3, [r5, #12]
 8006fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe6:	7c2b      	ldrb	r3, [r5, #16]
 8006fe8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006fea:	4a7a      	ldr	r2, [pc, #488]	@ (80071d4 <loadMenuTexts+0x1298>)
 8006fec:	4b7a      	ldr	r3, [pc, #488]	@ (80071d8 <loadMenuTexts+0x129c>)
 8006fee:	4614      	mov	r4, r2
 8006ff0:	461d      	mov	r5, r3
 8006ff2:	6828      	ldr	r0, [r5, #0]
 8006ff4:	6869      	ldr	r1, [r5, #4]
 8006ff6:	68aa      	ldr	r2, [r5, #8]
 8006ff8:	68eb      	ldr	r3, [r5, #12]
 8006ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffc:	7c2b      	ldrb	r3, [r5, #16]
 8006ffe:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007000:	4a76      	ldr	r2, [pc, #472]	@ (80071dc <loadMenuTexts+0x12a0>)
 8007002:	4b77      	ldr	r3, [pc, #476]	@ (80071e0 <loadMenuTexts+0x12a4>)
 8007004:	4614      	mov	r4, r2
 8007006:	461d      	mov	r5, r3
 8007008:	6828      	ldr	r0, [r5, #0]
 800700a:	6869      	ldr	r1, [r5, #4]
 800700c:	68aa      	ldr	r2, [r5, #8]
 800700e:	68eb      	ldr	r3, [r5, #12]
 8007010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007012:	7c2b      	ldrb	r3, [r5, #16]
 8007014:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007016:	4a73      	ldr	r2, [pc, #460]	@ (80071e4 <loadMenuTexts+0x12a8>)
 8007018:	4b73      	ldr	r3, [pc, #460]	@ (80071e8 <loadMenuTexts+0x12ac>)
 800701a:	4614      	mov	r4, r2
 800701c:	461d      	mov	r5, r3
 800701e:	6828      	ldr	r0, [r5, #0]
 8007020:	6869      	ldr	r1, [r5, #4]
 8007022:	68aa      	ldr	r2, [r5, #8]
 8007024:	68eb      	ldr	r3, [r5, #12]
 8007026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007028:	7c2b      	ldrb	r3, [r5, #16]
 800702a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 800702c:	4a6f      	ldr	r2, [pc, #444]	@ (80071ec <loadMenuTexts+0x12b0>)
 800702e:	4b70      	ldr	r3, [pc, #448]	@ (80071f0 <loadMenuTexts+0x12b4>)
 8007030:	4614      	mov	r4, r2
 8007032:	461d      	mov	r5, r3
 8007034:	6828      	ldr	r0, [r5, #0]
 8007036:	6869      	ldr	r1, [r5, #4]
 8007038:	68aa      	ldr	r2, [r5, #8]
 800703a:	68eb      	ldr	r3, [r5, #12]
 800703c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703e:	7c2b      	ldrb	r3, [r5, #16]
 8007040:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007042:	4a6c      	ldr	r2, [pc, #432]	@ (80071f4 <loadMenuTexts+0x12b8>)
 8007044:	4b6c      	ldr	r3, [pc, #432]	@ (80071f8 <loadMenuTexts+0x12bc>)
 8007046:	4614      	mov	r4, r2
 8007048:	461d      	mov	r5, r3
 800704a:	6828      	ldr	r0, [r5, #0]
 800704c:	6869      	ldr	r1, [r5, #4]
 800704e:	68aa      	ldr	r2, [r5, #8]
 8007050:	68eb      	ldr	r3, [r5, #12]
 8007052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007054:	7c2b      	ldrb	r3, [r5, #16]
 8007056:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007058:	4a68      	ldr	r2, [pc, #416]	@ (80071fc <loadMenuTexts+0x12c0>)
 800705a:	4b69      	ldr	r3, [pc, #420]	@ (8007200 <loadMenuTexts+0x12c4>)
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	6828      	ldr	r0, [r5, #0]
 8007062:	6869      	ldr	r1, [r5, #4]
 8007064:	68aa      	ldr	r2, [r5, #8]
 8007066:	68eb      	ldr	r3, [r5, #12]
 8007068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706a:	7c2b      	ldrb	r3, [r5, #16]
 800706c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800706e:	4a65      	ldr	r2, [pc, #404]	@ (8007204 <loadMenuTexts+0x12c8>)
 8007070:	4b65      	ldr	r3, [pc, #404]	@ (8007208 <loadMenuTexts+0x12cc>)
 8007072:	4614      	mov	r4, r2
 8007074:	461d      	mov	r5, r3
 8007076:	6828      	ldr	r0, [r5, #0]
 8007078:	6869      	ldr	r1, [r5, #4]
 800707a:	68aa      	ldr	r2, [r5, #8]
 800707c:	68eb      	ldr	r3, [r5, #12]
 800707e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007080:	7c2b      	ldrb	r3, [r5, #16]
 8007082:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007084:	4a61      	ldr	r2, [pc, #388]	@ (800720c <loadMenuTexts+0x12d0>)
 8007086:	4b62      	ldr	r3, [pc, #392]	@ (8007210 <loadMenuTexts+0x12d4>)
 8007088:	4614      	mov	r4, r2
 800708a:	461d      	mov	r5, r3
 800708c:	6828      	ldr	r0, [r5, #0]
 800708e:	6869      	ldr	r1, [r5, #4]
 8007090:	68aa      	ldr	r2, [r5, #8]
 8007092:	68eb      	ldr	r3, [r5, #12]
 8007094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007096:	7c2b      	ldrb	r3, [r5, #16]
 8007098:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800709a:	4a5e      	ldr	r2, [pc, #376]	@ (8007214 <loadMenuTexts+0x12d8>)
 800709c:	4b5e      	ldr	r3, [pc, #376]	@ (8007218 <loadMenuTexts+0x12dc>)
 800709e:	4614      	mov	r4, r2
 80070a0:	461d      	mov	r5, r3
 80070a2:	6828      	ldr	r0, [r5, #0]
 80070a4:	6869      	ldr	r1, [r5, #4]
 80070a6:	68aa      	ldr	r2, [r5, #8]
 80070a8:	68eb      	ldr	r3, [r5, #12]
 80070aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ac:	7c2b      	ldrb	r3, [r5, #16]
 80070ae:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80070b0:	4a5a      	ldr	r2, [pc, #360]	@ (800721c <loadMenuTexts+0x12e0>)
 80070b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007220 <loadMenuTexts+0x12e4>)
 80070b4:	4614      	mov	r4, r2
 80070b6:	461d      	mov	r5, r3
 80070b8:	6828      	ldr	r0, [r5, #0]
 80070ba:	6869      	ldr	r1, [r5, #4]
 80070bc:	68aa      	ldr	r2, [r5, #8]
 80070be:	68eb      	ldr	r3, [r5, #12]
 80070c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c2:	7c2b      	ldrb	r3, [r5, #16]
 80070c4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80070c6:	4a57      	ldr	r2, [pc, #348]	@ (8007224 <loadMenuTexts+0x12e8>)
 80070c8:	4b57      	ldr	r3, [pc, #348]	@ (8007228 <loadMenuTexts+0x12ec>)
 80070ca:	4614      	mov	r4, r2
 80070cc:	461d      	mov	r5, r3
 80070ce:	6828      	ldr	r0, [r5, #0]
 80070d0:	6869      	ldr	r1, [r5, #4]
 80070d2:	68aa      	ldr	r2, [r5, #8]
 80070d4:	68eb      	ldr	r3, [r5, #12]
 80070d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d8:	7c2b      	ldrb	r3, [r5, #16]
 80070da:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80070dc:	4a53      	ldr	r2, [pc, #332]	@ (800722c <loadMenuTexts+0x12f0>)
 80070de:	4b54      	ldr	r3, [pc, #336]	@ (8007230 <loadMenuTexts+0x12f4>)
 80070e0:	4614      	mov	r4, r2
 80070e2:	461d      	mov	r5, r3
 80070e4:	6828      	ldr	r0, [r5, #0]
 80070e6:	6869      	ldr	r1, [r5, #4]
 80070e8:	68aa      	ldr	r2, [r5, #8]
 80070ea:	68eb      	ldr	r3, [r5, #12]
 80070ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ee:	7c2b      	ldrb	r3, [r5, #16]
 80070f0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80070f2:	4a50      	ldr	r2, [pc, #320]	@ (8007234 <loadMenuTexts+0x12f8>)
 80070f4:	4b50      	ldr	r3, [pc, #320]	@ (8007238 <loadMenuTexts+0x12fc>)
 80070f6:	4614      	mov	r4, r2
 80070f8:	461d      	mov	r5, r3
 80070fa:	6828      	ldr	r0, [r5, #0]
 80070fc:	6869      	ldr	r1, [r5, #4]
 80070fe:	68aa      	ldr	r2, [r5, #8]
 8007100:	68eb      	ldr	r3, [r5, #12]
 8007102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007104:	7c2b      	ldrb	r3, [r5, #16]
 8007106:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007108:	4a4c      	ldr	r2, [pc, #304]	@ (800723c <loadMenuTexts+0x1300>)
 800710a:	4b4d      	ldr	r3, [pc, #308]	@ (8007240 <loadMenuTexts+0x1304>)
 800710c:	4614      	mov	r4, r2
 800710e:	461d      	mov	r5, r3
 8007110:	6828      	ldr	r0, [r5, #0]
 8007112:	6869      	ldr	r1, [r5, #4]
 8007114:	68aa      	ldr	r2, [r5, #8]
 8007116:	68eb      	ldr	r3, [r5, #12]
 8007118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711a:	7c2b      	ldrb	r3, [r5, #16]
 800711c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800711e:	4a49      	ldr	r2, [pc, #292]	@ (8007244 <loadMenuTexts+0x1308>)
 8007120:	4b49      	ldr	r3, [pc, #292]	@ (8007248 <loadMenuTexts+0x130c>)
 8007122:	4614      	mov	r4, r2
 8007124:	461d      	mov	r5, r3
 8007126:	e091      	b.n	800724c <loadMenuTexts+0x1310>
 8007128:	200009d8 	.word	0x200009d8
 800712c:	2000150c 	.word	0x2000150c
 8007130:	200009ec 	.word	0x200009ec
 8007134:	20001520 	.word	0x20001520
 8007138:	20000a00 	.word	0x20000a00
 800713c:	20001534 	.word	0x20001534
 8007140:	20000a14 	.word	0x20000a14
 8007144:	20001548 	.word	0x20001548
 8007148:	20000a28 	.word	0x20000a28
 800714c:	2000155c 	.word	0x2000155c
 8007150:	20000a3c 	.word	0x20000a3c
 8007154:	20001570 	.word	0x20001570
 8007158:	20000a50 	.word	0x20000a50
 800715c:	20001584 	.word	0x20001584
 8007160:	20000a64 	.word	0x20000a64
 8007164:	20001598 	.word	0x20001598
 8007168:	20000a78 	.word	0x20000a78
 800716c:	200015ac 	.word	0x200015ac
 8007170:	20000a8c 	.word	0x20000a8c
 8007174:	200015c0 	.word	0x200015c0
 8007178:	20000aa0 	.word	0x20000aa0
 800717c:	200015d4 	.word	0x200015d4
 8007180:	20000ab4 	.word	0x20000ab4
 8007184:	200015e8 	.word	0x200015e8
 8007188:	20000ac8 	.word	0x20000ac8
 800718c:	200015fc 	.word	0x200015fc
 8007190:	20000adc 	.word	0x20000adc
 8007194:	20001610 	.word	0x20001610
 8007198:	20000af0 	.word	0x20000af0
 800719c:	20001624 	.word	0x20001624
 80071a0:	20000b04 	.word	0x20000b04
 80071a4:	20001638 	.word	0x20001638
 80071a8:	20000b18 	.word	0x20000b18
 80071ac:	2000164c 	.word	0x2000164c
 80071b0:	20000b2c 	.word	0x20000b2c
 80071b4:	20001660 	.word	0x20001660
 80071b8:	20000b40 	.word	0x20000b40
 80071bc:	20001674 	.word	0x20001674
 80071c0:	20000b54 	.word	0x20000b54
 80071c4:	20001688 	.word	0x20001688
 80071c8:	20000b68 	.word	0x20000b68
 80071cc:	2000169c 	.word	0x2000169c
 80071d0:	20000b7c 	.word	0x20000b7c
 80071d4:	200016b0 	.word	0x200016b0
 80071d8:	20000b90 	.word	0x20000b90
 80071dc:	200016c4 	.word	0x200016c4
 80071e0:	20000ba4 	.word	0x20000ba4
 80071e4:	200016d8 	.word	0x200016d8
 80071e8:	20000bb8 	.word	0x20000bb8
 80071ec:	200016ec 	.word	0x200016ec
 80071f0:	20000bcc 	.word	0x20000bcc
 80071f4:	20001700 	.word	0x20001700
 80071f8:	20000be0 	.word	0x20000be0
 80071fc:	20001714 	.word	0x20001714
 8007200:	20000bf4 	.word	0x20000bf4
 8007204:	20001728 	.word	0x20001728
 8007208:	20000c08 	.word	0x20000c08
 800720c:	2000173c 	.word	0x2000173c
 8007210:	20000c1c 	.word	0x20000c1c
 8007214:	20001750 	.word	0x20001750
 8007218:	20000c30 	.word	0x20000c30
 800721c:	20001764 	.word	0x20001764
 8007220:	20000c44 	.word	0x20000c44
 8007224:	20001778 	.word	0x20001778
 8007228:	20000c58 	.word	0x20000c58
 800722c:	2000178c 	.word	0x2000178c
 8007230:	20000c6c 	.word	0x20000c6c
 8007234:	200017a0 	.word	0x200017a0
 8007238:	20000cf8 	.word	0x20000cf8
 800723c:	200017b4 	.word	0x200017b4
 8007240:	20000d0c 	.word	0x20000d0c
 8007244:	200017c8 	.word	0x200017c8
 8007248:	20000cd0 	.word	0x20000cd0
 800724c:	6828      	ldr	r0, [r5, #0]
 800724e:	6869      	ldr	r1, [r5, #4]
 8007250:	68aa      	ldr	r2, [r5, #8]
 8007252:	68eb      	ldr	r3, [r5, #12]
 8007254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007256:	7c2b      	ldrb	r3, [r5, #16]
 8007258:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800725a:	4a5b      	ldr	r2, [pc, #364]	@ (80073c8 <loadMenuTexts+0x148c>)
 800725c:	4b5b      	ldr	r3, [pc, #364]	@ (80073cc <loadMenuTexts+0x1490>)
 800725e:	4614      	mov	r4, r2
 8007260:	461d      	mov	r5, r3
 8007262:	6828      	ldr	r0, [r5, #0]
 8007264:	6869      	ldr	r1, [r5, #4]
 8007266:	68aa      	ldr	r2, [r5, #8]
 8007268:	68eb      	ldr	r3, [r5, #12]
 800726a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726c:	7c2b      	ldrb	r3, [r5, #16]
 800726e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007270:	4a57      	ldr	r2, [pc, #348]	@ (80073d0 <loadMenuTexts+0x1494>)
 8007272:	4b58      	ldr	r3, [pc, #352]	@ (80073d4 <loadMenuTexts+0x1498>)
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	6828      	ldr	r0, [r5, #0]
 800727a:	6869      	ldr	r1, [r5, #4]
 800727c:	68aa      	ldr	r2, [r5, #8]
 800727e:	68eb      	ldr	r3, [r5, #12]
 8007280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007282:	7c2b      	ldrb	r3, [r5, #16]
 8007284:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007286:	4a54      	ldr	r2, [pc, #336]	@ (80073d8 <loadMenuTexts+0x149c>)
 8007288:	4b54      	ldr	r3, [pc, #336]	@ (80073dc <loadMenuTexts+0x14a0>)
 800728a:	4614      	mov	r4, r2
 800728c:	461d      	mov	r5, r3
 800728e:	6828      	ldr	r0, [r5, #0]
 8007290:	6869      	ldr	r1, [r5, #4]
 8007292:	68aa      	ldr	r2, [r5, #8]
 8007294:	68eb      	ldr	r3, [r5, #12]
 8007296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007298:	7c2b      	ldrb	r3, [r5, #16]
 800729a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 800729c:	4a50      	ldr	r2, [pc, #320]	@ (80073e0 <loadMenuTexts+0x14a4>)
 800729e:	4b51      	ldr	r3, [pc, #324]	@ (80073e4 <loadMenuTexts+0x14a8>)
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	6828      	ldr	r0, [r5, #0]
 80072a6:	6869      	ldr	r1, [r5, #4]
 80072a8:	68aa      	ldr	r2, [r5, #8]
 80072aa:	68eb      	ldr	r3, [r5, #12]
 80072ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ae:	7c2b      	ldrb	r3, [r5, #16]
 80072b0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80072b2:	4a4d      	ldr	r2, [pc, #308]	@ (80073e8 <loadMenuTexts+0x14ac>)
 80072b4:	4b4d      	ldr	r3, [pc, #308]	@ (80073ec <loadMenuTexts+0x14b0>)
 80072b6:	4614      	mov	r4, r2
 80072b8:	461d      	mov	r5, r3
 80072ba:	6828      	ldr	r0, [r5, #0]
 80072bc:	6869      	ldr	r1, [r5, #4]
 80072be:	68aa      	ldr	r2, [r5, #8]
 80072c0:	68eb      	ldr	r3, [r5, #12]
 80072c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c4:	7c2b      	ldrb	r3, [r5, #16]
 80072c6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80072c8:	4a49      	ldr	r2, [pc, #292]	@ (80073f0 <loadMenuTexts+0x14b4>)
 80072ca:	4b4a      	ldr	r3, [pc, #296]	@ (80073f4 <loadMenuTexts+0x14b8>)
 80072cc:	4614      	mov	r4, r2
 80072ce:	461d      	mov	r5, r3
 80072d0:	6828      	ldr	r0, [r5, #0]
 80072d2:	6869      	ldr	r1, [r5, #4]
 80072d4:	68aa      	ldr	r2, [r5, #8]
 80072d6:	68eb      	ldr	r3, [r5, #12]
 80072d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072da:	7c2b      	ldrb	r3, [r5, #16]
 80072dc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80072de:	4a46      	ldr	r2, [pc, #280]	@ (80073f8 <loadMenuTexts+0x14bc>)
 80072e0:	4b46      	ldr	r3, [pc, #280]	@ (80073fc <loadMenuTexts+0x14c0>)
 80072e2:	4614      	mov	r4, r2
 80072e4:	461d      	mov	r5, r3
 80072e6:	6828      	ldr	r0, [r5, #0]
 80072e8:	6869      	ldr	r1, [r5, #4]
 80072ea:	68aa      	ldr	r2, [r5, #8]
 80072ec:	68eb      	ldr	r3, [r5, #12]
 80072ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f0:	7c2b      	ldrb	r3, [r5, #16]
 80072f2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80072f4:	4a42      	ldr	r2, [pc, #264]	@ (8007400 <loadMenuTexts+0x14c4>)
 80072f6:	4b43      	ldr	r3, [pc, #268]	@ (8007404 <loadMenuTexts+0x14c8>)
 80072f8:	4614      	mov	r4, r2
 80072fa:	461d      	mov	r5, r3
 80072fc:	6828      	ldr	r0, [r5, #0]
 80072fe:	6869      	ldr	r1, [r5, #4]
 8007300:	68aa      	ldr	r2, [r5, #8]
 8007302:	68eb      	ldr	r3, [r5, #12]
 8007304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007306:	7c2b      	ldrb	r3, [r5, #16]
 8007308:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800730a:	4a3f      	ldr	r2, [pc, #252]	@ (8007408 <loadMenuTexts+0x14cc>)
 800730c:	4b3f      	ldr	r3, [pc, #252]	@ (800740c <loadMenuTexts+0x14d0>)
 800730e:	4614      	mov	r4, r2
 8007310:	461d      	mov	r5, r3
 8007312:	6828      	ldr	r0, [r5, #0]
 8007314:	6869      	ldr	r1, [r5, #4]
 8007316:	68aa      	ldr	r2, [r5, #8]
 8007318:	68eb      	ldr	r3, [r5, #12]
 800731a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731c:	7c2b      	ldrb	r3, [r5, #16]
 800731e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007320:	4a3b      	ldr	r2, [pc, #236]	@ (8007410 <loadMenuTexts+0x14d4>)
 8007322:	4b3c      	ldr	r3, [pc, #240]	@ (8007414 <loadMenuTexts+0x14d8>)
 8007324:	4614      	mov	r4, r2
 8007326:	461d      	mov	r5, r3
 8007328:	6828      	ldr	r0, [r5, #0]
 800732a:	6869      	ldr	r1, [r5, #4]
 800732c:	68aa      	ldr	r2, [r5, #8]
 800732e:	68eb      	ldr	r3, [r5, #12]
 8007330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007332:	7c2b      	ldrb	r3, [r5, #16]
 8007334:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007336:	4a38      	ldr	r2, [pc, #224]	@ (8007418 <loadMenuTexts+0x14dc>)
 8007338:	4b38      	ldr	r3, [pc, #224]	@ (800741c <loadMenuTexts+0x14e0>)
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	6828      	ldr	r0, [r5, #0]
 8007340:	6869      	ldr	r1, [r5, #4]
 8007342:	68aa      	ldr	r2, [r5, #8]
 8007344:	68eb      	ldr	r3, [r5, #12]
 8007346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007348:	7c2b      	ldrb	r3, [r5, #16]
 800734a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800734c:	4a34      	ldr	r2, [pc, #208]	@ (8007420 <loadMenuTexts+0x14e4>)
 800734e:	4b35      	ldr	r3, [pc, #212]	@ (8007424 <loadMenuTexts+0x14e8>)
 8007350:	4614      	mov	r4, r2
 8007352:	461d      	mov	r5, r3
 8007354:	6828      	ldr	r0, [r5, #0]
 8007356:	6869      	ldr	r1, [r5, #4]
 8007358:	68aa      	ldr	r2, [r5, #8]
 800735a:	68eb      	ldr	r3, [r5, #12]
 800735c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735e:	7c2b      	ldrb	r3, [r5, #16]
 8007360:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007362:	4a31      	ldr	r2, [pc, #196]	@ (8007428 <loadMenuTexts+0x14ec>)
 8007364:	4b31      	ldr	r3, [pc, #196]	@ (800742c <loadMenuTexts+0x14f0>)
 8007366:	4614      	mov	r4, r2
 8007368:	461d      	mov	r5, r3
 800736a:	6828      	ldr	r0, [r5, #0]
 800736c:	6869      	ldr	r1, [r5, #4]
 800736e:	68aa      	ldr	r2, [r5, #8]
 8007370:	68eb      	ldr	r3, [r5, #12]
 8007372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007374:	7c2b      	ldrb	r3, [r5, #16]
 8007376:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007378:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <loadMenuTexts+0x14f4>)
 800737a:	4b2e      	ldr	r3, [pc, #184]	@ (8007434 <loadMenuTexts+0x14f8>)
 800737c:	4614      	mov	r4, r2
 800737e:	461d      	mov	r5, r3
 8007380:	6828      	ldr	r0, [r5, #0]
 8007382:	6869      	ldr	r1, [r5, #4]
 8007384:	68aa      	ldr	r2, [r5, #8]
 8007386:	68eb      	ldr	r3, [r5, #12]
 8007388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800738a:	7c2b      	ldrb	r3, [r5, #16]
 800738c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800738e:	4a2a      	ldr	r2, [pc, #168]	@ (8007438 <loadMenuTexts+0x14fc>)
 8007390:	4b2a      	ldr	r3, [pc, #168]	@ (800743c <loadMenuTexts+0x1500>)
 8007392:	4614      	mov	r4, r2
 8007394:	461d      	mov	r5, r3
 8007396:	6828      	ldr	r0, [r5, #0]
 8007398:	6869      	ldr	r1, [r5, #4]
 800739a:	68aa      	ldr	r2, [r5, #8]
 800739c:	68eb      	ldr	r3, [r5, #12]
 800739e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a0:	7c2b      	ldrb	r3, [r5, #16]
 80073a2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80073a4:	4a26      	ldr	r2, [pc, #152]	@ (8007440 <loadMenuTexts+0x1504>)
 80073a6:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <loadMenuTexts+0x1508>)
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	6828      	ldr	r0, [r5, #0]
 80073ae:	6869      	ldr	r1, [r5, #4]
 80073b0:	68aa      	ldr	r2, [r5, #8]
 80073b2:	68eb      	ldr	r3, [r5, #12]
 80073b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b6:	7c2b      	ldrb	r3, [r5, #16]
 80073b8:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80073ba:	f000 f845 	bl	8007448 <menuVariableFinisher>
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bdb0      	pop	{r4, r5, r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200017dc 	.word	0x200017dc
 80073cc:	20000ce4 	.word	0x20000ce4
 80073d0:	200017f0 	.word	0x200017f0
 80073d4:	20000d48 	.word	0x20000d48
 80073d8:	20001804 	.word	0x20001804
 80073dc:	20000d5c 	.word	0x20000d5c
 80073e0:	20001818 	.word	0x20001818
 80073e4:	20000d98 	.word	0x20000d98
 80073e8:	2000182c 	.word	0x2000182c
 80073ec:	20000dac 	.word	0x20000dac
 80073f0:	20001840 	.word	0x20001840
 80073f4:	20000de8 	.word	0x20000de8
 80073f8:	20001854 	.word	0x20001854
 80073fc:	20000dfc 	.word	0x20000dfc
 8007400:	20001868 	.word	0x20001868
 8007404:	20000e24 	.word	0x20000e24
 8007408:	2000187c 	.word	0x2000187c
 800740c:	20000e4c 	.word	0x20000e4c
 8007410:	20001890 	.word	0x20001890
 8007414:	20000e74 	.word	0x20000e74
 8007418:	200018a4 	.word	0x200018a4
 800741c:	20000e9c 	.word	0x20000e9c
 8007420:	200018b8 	.word	0x200018b8
 8007424:	20000ec4 	.word	0x20000ec4
 8007428:	200018cc 	.word	0x200018cc
 800742c:	20000eec 	.word	0x20000eec
 8007430:	200018e0 	.word	0x200018e0
 8007434:	20000f14 	.word	0x20000f14
 8007438:	200018f4 	.word	0x200018f4
 800743c:	20000f3c 	.word	0x20000f3c
 8007440:	20001908 	.word	0x20001908
 8007444:	20000f64 	.word	0x20000f64

08007448 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800744c:	4b99      	ldr	r3, [pc, #612]	@ (80076b4 <menuVariableFinisher+0x26c>)
 800744e:	2200      	movs	r2, #0
 8007450:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007452:	4b99      	ldr	r3, [pc, #612]	@ (80076b8 <menuVariableFinisher+0x270>)
 8007454:	2200      	movs	r2, #0
 8007456:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007458:	4b98      	ldr	r3, [pc, #608]	@ (80076bc <menuVariableFinisher+0x274>)
 800745a:	2200      	movs	r2, #0
 800745c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800745e:	4b98      	ldr	r3, [pc, #608]	@ (80076c0 <menuVariableFinisher+0x278>)
 8007460:	2200      	movs	r2, #0
 8007462:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007464:	4b97      	ldr	r3, [pc, #604]	@ (80076c4 <menuVariableFinisher+0x27c>)
 8007466:	2200      	movs	r2, #0
 8007468:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800746a:	4b97      	ldr	r3, [pc, #604]	@ (80076c8 <menuVariableFinisher+0x280>)
 800746c:	2200      	movs	r2, #0
 800746e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007470:	4b96      	ldr	r3, [pc, #600]	@ (80076cc <menuVariableFinisher+0x284>)
 8007472:	2200      	movs	r2, #0
 8007474:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007476:	4b96      	ldr	r3, [pc, #600]	@ (80076d0 <menuVariableFinisher+0x288>)
 8007478:	2200      	movs	r2, #0
 800747a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 800747c:	4b95      	ldr	r3, [pc, #596]	@ (80076d4 <menuVariableFinisher+0x28c>)
 800747e:	2200      	movs	r2, #0
 8007480:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007482:	4b95      	ldr	r3, [pc, #596]	@ (80076d8 <menuVariableFinisher+0x290>)
 8007484:	2200      	movs	r2, #0
 8007486:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007488:	4b94      	ldr	r3, [pc, #592]	@ (80076dc <menuVariableFinisher+0x294>)
 800748a:	2200      	movs	r2, #0
 800748c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800748e:	4b94      	ldr	r3, [pc, #592]	@ (80076e0 <menuVariableFinisher+0x298>)
 8007490:	2200      	movs	r2, #0
 8007492:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007494:	4b93      	ldr	r3, [pc, #588]	@ (80076e4 <menuVariableFinisher+0x29c>)
 8007496:	2200      	movs	r2, #0
 8007498:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800749a:	4b93      	ldr	r3, [pc, #588]	@ (80076e8 <menuVariableFinisher+0x2a0>)
 800749c:	2200      	movs	r2, #0
 800749e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80074a0:	4b92      	ldr	r3, [pc, #584]	@ (80076ec <menuVariableFinisher+0x2a4>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80074a6:	4b92      	ldr	r3, [pc, #584]	@ (80076f0 <menuVariableFinisher+0x2a8>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80074ac:	4b91      	ldr	r3, [pc, #580]	@ (80076f4 <menuVariableFinisher+0x2ac>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80074b2:	4b91      	ldr	r3, [pc, #580]	@ (80076f8 <menuVariableFinisher+0x2b0>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80074b8:	4b90      	ldr	r3, [pc, #576]	@ (80076fc <menuVariableFinisher+0x2b4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80074be:	4b90      	ldr	r3, [pc, #576]	@ (8007700 <menuVariableFinisher+0x2b8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80074c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007704 <menuVariableFinisher+0x2bc>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80074ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007708 <menuVariableFinisher+0x2c0>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80074d0:	4b8e      	ldr	r3, [pc, #568]	@ (800770c <menuVariableFinisher+0x2c4>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80074d6:	4b8e      	ldr	r3, [pc, #568]	@ (8007710 <menuVariableFinisher+0x2c8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80074dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007714 <menuVariableFinisher+0x2cc>)
 80074de:	2200      	movs	r2, #0
 80074e0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80074e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007718 <menuVariableFinisher+0x2d0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80074e8:	4b8c      	ldr	r3, [pc, #560]	@ (800771c <menuVariableFinisher+0x2d4>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80074ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007720 <menuVariableFinisher+0x2d8>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80074f4:	4b8b      	ldr	r3, [pc, #556]	@ (8007724 <menuVariableFinisher+0x2dc>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80074fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007728 <menuVariableFinisher+0x2e0>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007500:	4b8a      	ldr	r3, [pc, #552]	@ (800772c <menuVariableFinisher+0x2e4>)
 8007502:	2200      	movs	r2, #0
 8007504:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007506:	4b8a      	ldr	r3, [pc, #552]	@ (8007730 <menuVariableFinisher+0x2e8>)
 8007508:	2200      	movs	r2, #0
 800750a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 800750c:	4b89      	ldr	r3, [pc, #548]	@ (8007734 <menuVariableFinisher+0x2ec>)
 800750e:	2200      	movs	r2, #0
 8007510:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007512:	4b89      	ldr	r3, [pc, #548]	@ (8007738 <menuVariableFinisher+0x2f0>)
 8007514:	2200      	movs	r2, #0
 8007516:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007518:	4b88      	ldr	r3, [pc, #544]	@ (800773c <menuVariableFinisher+0x2f4>)
 800751a:	2200      	movs	r2, #0
 800751c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800751e:	4b88      	ldr	r3, [pc, #544]	@ (8007740 <menuVariableFinisher+0x2f8>)
 8007520:	2200      	movs	r2, #0
 8007522:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007524:	4b87      	ldr	r3, [pc, #540]	@ (8007744 <menuVariableFinisher+0x2fc>)
 8007526:	2200      	movs	r2, #0
 8007528:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800752a:	4b87      	ldr	r3, [pc, #540]	@ (8007748 <menuVariableFinisher+0x300>)
 800752c:	2200      	movs	r2, #0
 800752e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007530:	4b86      	ldr	r3, [pc, #536]	@ (800774c <menuVariableFinisher+0x304>)
 8007532:	2200      	movs	r2, #0
 8007534:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007536:	4b86      	ldr	r3, [pc, #536]	@ (8007750 <menuVariableFinisher+0x308>)
 8007538:	2200      	movs	r2, #0
 800753a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800753c:	4b85      	ldr	r3, [pc, #532]	@ (8007754 <menuVariableFinisher+0x30c>)
 800753e:	2200      	movs	r2, #0
 8007540:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007542:	4b85      	ldr	r3, [pc, #532]	@ (8007758 <menuVariableFinisher+0x310>)
 8007544:	2200      	movs	r2, #0
 8007546:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007548:	4b84      	ldr	r3, [pc, #528]	@ (800775c <menuVariableFinisher+0x314>)
 800754a:	2200      	movs	r2, #0
 800754c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800754e:	4b84      	ldr	r3, [pc, #528]	@ (8007760 <menuVariableFinisher+0x318>)
 8007550:	2200      	movs	r2, #0
 8007552:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007554:	4b83      	ldr	r3, [pc, #524]	@ (8007764 <menuVariableFinisher+0x31c>)
 8007556:	2200      	movs	r2, #0
 8007558:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800755a:	4b83      	ldr	r3, [pc, #524]	@ (8007768 <menuVariableFinisher+0x320>)
 800755c:	2200      	movs	r2, #0
 800755e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007560:	4b82      	ldr	r3, [pc, #520]	@ (800776c <menuVariableFinisher+0x324>)
 8007562:	2200      	movs	r2, #0
 8007564:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007566:	4b82      	ldr	r3, [pc, #520]	@ (8007770 <menuVariableFinisher+0x328>)
 8007568:	2200      	movs	r2, #0
 800756a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800756c:	4b81      	ldr	r3, [pc, #516]	@ (8007774 <menuVariableFinisher+0x32c>)
 800756e:	2200      	movs	r2, #0
 8007570:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007572:	4b81      	ldr	r3, [pc, #516]	@ (8007778 <menuVariableFinisher+0x330>)
 8007574:	2200      	movs	r2, #0
 8007576:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007578:	4b80      	ldr	r3, [pc, #512]	@ (800777c <menuVariableFinisher+0x334>)
 800757a:	2200      	movs	r2, #0
 800757c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800757e:	4b80      	ldr	r3, [pc, #512]	@ (8007780 <menuVariableFinisher+0x338>)
 8007580:	2200      	movs	r2, #0
 8007582:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007584:	4b7f      	ldr	r3, [pc, #508]	@ (8007784 <menuVariableFinisher+0x33c>)
 8007586:	2200      	movs	r2, #0
 8007588:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800758a:	4b7f      	ldr	r3, [pc, #508]	@ (8007788 <menuVariableFinisher+0x340>)
 800758c:	2200      	movs	r2, #0
 800758e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007590:	4b7e      	ldr	r3, [pc, #504]	@ (800778c <menuVariableFinisher+0x344>)
 8007592:	2200      	movs	r2, #0
 8007594:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007596:	4b7e      	ldr	r3, [pc, #504]	@ (8007790 <menuVariableFinisher+0x348>)
 8007598:	2200      	movs	r2, #0
 800759a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800759c:	4b7d      	ldr	r3, [pc, #500]	@ (8007794 <menuVariableFinisher+0x34c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80075a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007798 <menuVariableFinisher+0x350>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80075a8:	4b7c      	ldr	r3, [pc, #496]	@ (800779c <menuVariableFinisher+0x354>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80075ae:	4b7c      	ldr	r3, [pc, #496]	@ (80077a0 <menuVariableFinisher+0x358>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80075b4:	4b7b      	ldr	r3, [pc, #492]	@ (80077a4 <menuVariableFinisher+0x35c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80075ba:	4b7b      	ldr	r3, [pc, #492]	@ (80077a8 <menuVariableFinisher+0x360>)
 80075bc:	2200      	movs	r2, #0
 80075be:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80075c0:	4b7a      	ldr	r3, [pc, #488]	@ (80077ac <menuVariableFinisher+0x364>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80075c6:	4b7a      	ldr	r3, [pc, #488]	@ (80077b0 <menuVariableFinisher+0x368>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80075cc:	4b79      	ldr	r3, [pc, #484]	@ (80077b4 <menuVariableFinisher+0x36c>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80075d2:	4b79      	ldr	r3, [pc, #484]	@ (80077b8 <menuVariableFinisher+0x370>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80075d8:	4b78      	ldr	r3, [pc, #480]	@ (80077bc <menuVariableFinisher+0x374>)
 80075da:	2200      	movs	r2, #0
 80075dc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80075de:	4b78      	ldr	r3, [pc, #480]	@ (80077c0 <menuVariableFinisher+0x378>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80075e4:	4b77      	ldr	r3, [pc, #476]	@ (80077c4 <menuVariableFinisher+0x37c>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80075ea:	4b77      	ldr	r3, [pc, #476]	@ (80077c8 <menuVariableFinisher+0x380>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80075f0:	4b76      	ldr	r3, [pc, #472]	@ (80077cc <menuVariableFinisher+0x384>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80075f6:	4b76      	ldr	r3, [pc, #472]	@ (80077d0 <menuVariableFinisher+0x388>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80075fc:	4b75      	ldr	r3, [pc, #468]	@ (80077d4 <menuVariableFinisher+0x38c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007602:	4b75      	ldr	r3, [pc, #468]	@ (80077d8 <menuVariableFinisher+0x390>)
 8007604:	2200      	movs	r2, #0
 8007606:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007608:	4b74      	ldr	r3, [pc, #464]	@ (80077dc <menuVariableFinisher+0x394>)
 800760a:	2200      	movs	r2, #0
 800760c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800760e:	4b74      	ldr	r3, [pc, #464]	@ (80077e0 <menuVariableFinisher+0x398>)
 8007610:	2200      	movs	r2, #0
 8007612:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007614:	4b73      	ldr	r3, [pc, #460]	@ (80077e4 <menuVariableFinisher+0x39c>)
 8007616:	2200      	movs	r2, #0
 8007618:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800761a:	4b73      	ldr	r3, [pc, #460]	@ (80077e8 <menuVariableFinisher+0x3a0>)
 800761c:	2200      	movs	r2, #0
 800761e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007620:	4b72      	ldr	r3, [pc, #456]	@ (80077ec <menuVariableFinisher+0x3a4>)
 8007622:	2200      	movs	r2, #0
 8007624:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007626:	4b72      	ldr	r3, [pc, #456]	@ (80077f0 <menuVariableFinisher+0x3a8>)
 8007628:	2200      	movs	r2, #0
 800762a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800762c:	4b71      	ldr	r3, [pc, #452]	@ (80077f4 <menuVariableFinisher+0x3ac>)
 800762e:	2200      	movs	r2, #0
 8007630:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007632:	4b71      	ldr	r3, [pc, #452]	@ (80077f8 <menuVariableFinisher+0x3b0>)
 8007634:	2200      	movs	r2, #0
 8007636:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007638:	4b70      	ldr	r3, [pc, #448]	@ (80077fc <menuVariableFinisher+0x3b4>)
 800763a:	2200      	movs	r2, #0
 800763c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800763e:	4b70      	ldr	r3, [pc, #448]	@ (8007800 <menuVariableFinisher+0x3b8>)
 8007640:	2200      	movs	r2, #0
 8007642:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007644:	4b6f      	ldr	r3, [pc, #444]	@ (8007804 <menuVariableFinisher+0x3bc>)
 8007646:	2200      	movs	r2, #0
 8007648:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800764a:	4b6f      	ldr	r3, [pc, #444]	@ (8007808 <menuVariableFinisher+0x3c0>)
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007650:	4b6e      	ldr	r3, [pc, #440]	@ (800780c <menuVariableFinisher+0x3c4>)
 8007652:	2200      	movs	r2, #0
 8007654:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007656:	4b6e      	ldr	r3, [pc, #440]	@ (8007810 <menuVariableFinisher+0x3c8>)
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800765c:	4b6d      	ldr	r3, [pc, #436]	@ (8007814 <menuVariableFinisher+0x3cc>)
 800765e:	2200      	movs	r2, #0
 8007660:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007662:	4b6d      	ldr	r3, [pc, #436]	@ (8007818 <menuVariableFinisher+0x3d0>)
 8007664:	2200      	movs	r2, #0
 8007666:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007668:	4b6c      	ldr	r3, [pc, #432]	@ (800781c <menuVariableFinisher+0x3d4>)
 800766a:	2200      	movs	r2, #0
 800766c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800766e:	4b6c      	ldr	r3, [pc, #432]	@ (8007820 <menuVariableFinisher+0x3d8>)
 8007670:	2200      	movs	r2, #0
 8007672:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007674:	4b6b      	ldr	r3, [pc, #428]	@ (8007824 <menuVariableFinisher+0x3dc>)
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800767a:	4b6b      	ldr	r3, [pc, #428]	@ (8007828 <menuVariableFinisher+0x3e0>)
 800767c:	2200      	movs	r2, #0
 800767e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007680:	4b6a      	ldr	r3, [pc, #424]	@ (800782c <menuVariableFinisher+0x3e4>)
 8007682:	2200      	movs	r2, #0
 8007684:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007686:	4b6a      	ldr	r3, [pc, #424]	@ (8007830 <menuVariableFinisher+0x3e8>)
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800768c:	4b69      	ldr	r3, [pc, #420]	@ (8007834 <menuVariableFinisher+0x3ec>)
 800768e:	2200      	movs	r2, #0
 8007690:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007692:	4b69      	ldr	r3, [pc, #420]	@ (8007838 <menuVariableFinisher+0x3f0>)
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007698:	4b68      	ldr	r3, [pc, #416]	@ (800783c <menuVariableFinisher+0x3f4>)
 800769a:	2200      	movs	r2, #0
 800769c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800769e:	4b68      	ldr	r3, [pc, #416]	@ (8007840 <menuVariableFinisher+0x3f8>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 80076a4:	4b67      	ldr	r3, [pc, #412]	@ (8007844 <menuVariableFinisher+0x3fc>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	741a      	strb	r2, [r3, #16]
}
 80076aa:	bf00      	nop
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	200000a0 	.word	0x200000a0
 80076b8:	200000b4 	.word	0x200000b4
 80076bc:	200000c8 	.word	0x200000c8
 80076c0:	200000dc 	.word	0x200000dc
 80076c4:	200000f0 	.word	0x200000f0
 80076c8:	20000104 	.word	0x20000104
 80076cc:	20000118 	.word	0x20000118
 80076d0:	2000012c 	.word	0x2000012c
 80076d4:	20000140 	.word	0x20000140
 80076d8:	20000154 	.word	0x20000154
 80076dc:	20000168 	.word	0x20000168
 80076e0:	2000017c 	.word	0x2000017c
 80076e4:	20001228 	.word	0x20001228
 80076e8:	2000123c 	.word	0x2000123c
 80076ec:	20001250 	.word	0x20001250
 80076f0:	20001264 	.word	0x20001264
 80076f4:	20001278 	.word	0x20001278
 80076f8:	2000128c 	.word	0x2000128c
 80076fc:	200012a0 	.word	0x200012a0
 8007700:	200012b4 	.word	0x200012b4
 8007704:	200012c8 	.word	0x200012c8
 8007708:	200012dc 	.word	0x200012dc
 800770c:	200012f0 	.word	0x200012f0
 8007710:	20001304 	.word	0x20001304
 8007714:	20001318 	.word	0x20001318
 8007718:	2000132c 	.word	0x2000132c
 800771c:	20001340 	.word	0x20001340
 8007720:	20001354 	.word	0x20001354
 8007724:	20001368 	.word	0x20001368
 8007728:	2000137c 	.word	0x2000137c
 800772c:	20001390 	.word	0x20001390
 8007730:	200013a4 	.word	0x200013a4
 8007734:	200013b8 	.word	0x200013b8
 8007738:	200013cc 	.word	0x200013cc
 800773c:	200013e0 	.word	0x200013e0
 8007740:	200013f4 	.word	0x200013f4
 8007744:	20001408 	.word	0x20001408
 8007748:	2000141c 	.word	0x2000141c
 800774c:	20001430 	.word	0x20001430
 8007750:	20001444 	.word	0x20001444
 8007754:	20001458 	.word	0x20001458
 8007758:	2000146c 	.word	0x2000146c
 800775c:	20001480 	.word	0x20001480
 8007760:	20001494 	.word	0x20001494
 8007764:	200014a8 	.word	0x200014a8
 8007768:	200014bc 	.word	0x200014bc
 800776c:	200014d0 	.word	0x200014d0
 8007770:	200014e4 	.word	0x200014e4
 8007774:	200014f8 	.word	0x200014f8
 8007778:	2000150c 	.word	0x2000150c
 800777c:	20001520 	.word	0x20001520
 8007780:	20001534 	.word	0x20001534
 8007784:	20001548 	.word	0x20001548
 8007788:	2000155c 	.word	0x2000155c
 800778c:	20001570 	.word	0x20001570
 8007790:	20001584 	.word	0x20001584
 8007794:	20001598 	.word	0x20001598
 8007798:	200015ac 	.word	0x200015ac
 800779c:	200015c0 	.word	0x200015c0
 80077a0:	200015d4 	.word	0x200015d4
 80077a4:	200015e8 	.word	0x200015e8
 80077a8:	200015fc 	.word	0x200015fc
 80077ac:	20001610 	.word	0x20001610
 80077b0:	20001624 	.word	0x20001624
 80077b4:	20001638 	.word	0x20001638
 80077b8:	2000164c 	.word	0x2000164c
 80077bc:	20001660 	.word	0x20001660
 80077c0:	20001674 	.word	0x20001674
 80077c4:	20001688 	.word	0x20001688
 80077c8:	2000169c 	.word	0x2000169c
 80077cc:	200016b0 	.word	0x200016b0
 80077d0:	200016c4 	.word	0x200016c4
 80077d4:	200016d8 	.word	0x200016d8
 80077d8:	200016ec 	.word	0x200016ec
 80077dc:	20001700 	.word	0x20001700
 80077e0:	20001714 	.word	0x20001714
 80077e4:	20001728 	.word	0x20001728
 80077e8:	2000173c 	.word	0x2000173c
 80077ec:	20001750 	.word	0x20001750
 80077f0:	20001764 	.word	0x20001764
 80077f4:	20001778 	.word	0x20001778
 80077f8:	2000178c 	.word	0x2000178c
 80077fc:	200017a0 	.word	0x200017a0
 8007800:	200017b4 	.word	0x200017b4
 8007804:	200017c8 	.word	0x200017c8
 8007808:	200017dc 	.word	0x200017dc
 800780c:	200017f0 	.word	0x200017f0
 8007810:	20001804 	.word	0x20001804
 8007814:	20001818 	.word	0x20001818
 8007818:	2000182c 	.word	0x2000182c
 800781c:	20001840 	.word	0x20001840
 8007820:	20001854 	.word	0x20001854
 8007824:	20001868 	.word	0x20001868
 8007828:	2000187c 	.word	0x2000187c
 800782c:	20001890 	.word	0x20001890
 8007830:	200018a4 	.word	0x200018a4
 8007834:	200018b8 	.word	0x200018b8
 8007838:	200018cc 	.word	0x200018cc
 800783c:	200018e0 	.word	0x200018e0
 8007840:	200018f4 	.word	0x200018f4
 8007844:	20001908 	.word	0x20001908

08007848 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800784e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007852:	f001 fd9f 	bl	8009394 <HAL_Delay>
	int confirmationVal = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800785a:	e012      	b.n	8007882 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 800785c:	4a12      	ldr	r2, [pc, #72]	@ (80078a8 <takeMachineIDWithConfirmation+0x60>)
 800785e:	2101      	movs	r1, #1
 8007860:	2001      	movs	r0, #1
 8007862:	f001 f83d 	bl	80088e0 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007866:	4a11      	ldr	r2, [pc, #68]	@ (80078ac <takeMachineIDWithConfirmation+0x64>)
 8007868:	2101      	movs	r1, #1
 800786a:	2002      	movs	r0, #2
 800786c:	f001 f838 	bl	80088e0 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007870:	2102      	movs	r1, #2
 8007872:	480f      	ldr	r0, [pc, #60]	@ (80078b0 <takeMachineIDWithConfirmation+0x68>)
 8007874:	f002 fb5e 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800787e:	2301      	movs	r3, #1
 8007880:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0e9      	beq.n	800785c <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007888:	f000 f814 	bl	80078b4 <takeMachineID>

	convertArrays(1);
 800788c:	2001      	movs	r0, #1
 800788e:	f7f8 ff57 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 8007892:	2032      	movs	r0, #50	@ 0x32
 8007894:	f001 fd7e 	bl	8009394 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007898:	2001      	movs	r0, #1
 800789a:	f7f9 fc73 	bl	8001184 <printCredentials>
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200018e0 	.word	0x200018e0
 80078ac:	200018f4 	.word	0x200018f4
 80078b0:	40010800 	.word	0x40010800

080078b4 <takeMachineID>:

void takeMachineID() {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 80078ba:	2001      	movs	r0, #1
 80078bc:	f001 f86e 	bl	800899c <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80078c0:	220c      	movs	r2, #12
 80078c2:	2100      	movs	r1, #0
 80078c4:	48a2      	ldr	r0, [pc, #648]	@ (8007b50 <takeMachineID+0x29c>)
 80078c6:	f005 fc9d 	bl	800d204 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80078ca:	2305      	movs	r3, #5
 80078cc:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80078ce:	2303      	movs	r3, #3
 80078d0:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80078d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b54 <takeMachineID+0x2a0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 80078dc:	2100      	movs	r1, #0
 80078de:	2001      	movs	r0, #1
 80078e0:	f7f9 fa02 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80078e4:	2108      	movs	r1, #8
 80078e6:	489c      	ldr	r0, [pc, #624]	@ (8007b58 <takeMachineID+0x2a4>)
 80078e8:	f002 fb24 	bl	8009f34 <HAL_GPIO_ReadPin>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d128      	bne.n	8007944 <takeMachineID+0x90>
        	lcd_cursor(0);
 80078f2:	2000      	movs	r0, #0
 80078f4:	f001 f852 	bl	800899c <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 80078f8:	f000 fe34 	bl	8008564 <checkEEPROM4ID>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d00e      	beq.n	8007920 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007902:	4a96      	ldr	r2, [pc, #600]	@ (8007b5c <takeMachineID+0x2a8>)
 8007904:	2101      	movs	r1, #1
 8007906:	2001      	movs	r0, #1
 8007908:	f000 ffea 	bl	80088e0 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 800790c:	4a94      	ldr	r2, [pc, #592]	@ (8007b60 <takeMachineID+0x2ac>)
 800790e:	2101      	movs	r1, #1
 8007910:	2002      	movs	r0, #2
 8007912:	f000 ffe5 	bl	80088e0 <lcd_print>
        		HAL_Delay(1250);
 8007916:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800791a:	f001 fd3b 	bl	8009394 <HAL_Delay>

        		goto mainSection;
 800791e:	e7cc      	b.n	80078ba <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007920:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007924:	9302      	str	r3, [sp, #8]
 8007926:	236e      	movs	r3, #110	@ 0x6e
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	4b8e      	ldr	r3, [pc, #568]	@ (8007b64 <takeMachineID+0x2b0>)
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	236e      	movs	r3, #110	@ 0x6e
 8007930:	2200      	movs	r2, #0
 8007932:	21a0      	movs	r1, #160	@ 0xa0
 8007934:	488c      	ldr	r0, [pc, #560]	@ (8007b68 <takeMachineID+0x2b4>)
 8007936:	f002 fdb7 	bl	800a4a8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800793a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800793e:	f001 fd29 	bl	8009394 <HAL_Delay>

            	break;
 8007942:	e132      	b.n	8007baa <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007944:	2101      	movs	r1, #1
 8007946:	4884      	ldr	r0, [pc, #528]	@ (8007b58 <takeMachineID+0x2a4>)
 8007948:	f002 faf4 	bl	8009f34 <HAL_GPIO_ReadPin>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d111      	bne.n	8007976 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b07      	cmp	r3, #7
 8007956:	d102      	bne.n	800795e <takeMachineID+0xaa>
        		cursorPosition = 10;
 8007958:	230a      	movs	r3, #10
 800795a:	60bb      	str	r3, [r7, #8]
 800795c:	e008      	b.n	8007970 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b0e      	cmp	r3, #14
 8007962:	d102      	bne.n	800796a <takeMachineID+0xb6>
                cursorPosition = 3;
 8007964:	2303      	movs	r3, #3
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	e002      	b.n	8007970 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3301      	adds	r3, #1
 800796e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007970:	2096      	movs	r0, #150	@ 0x96
 8007972:	f001 fd0f 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007976:	2108      	movs	r1, #8
 8007978:	487c      	ldr	r0, [pc, #496]	@ (8007b6c <takeMachineID+0x2b8>)
 800797a:	f002 fadb 	bl	8009f34 <HAL_GPIO_ReadPin>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d111      	bne.n	80079a8 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d102      	bne.n	8007990 <takeMachineID+0xdc>
                cursorPosition = 14;
 800798a:	230e      	movs	r3, #14
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	e008      	b.n	80079a2 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b0a      	cmp	r3, #10
 8007994:	d102      	bne.n	800799c <takeMachineID+0xe8>
            	cursorPosition = 7;
 8007996:	2307      	movs	r3, #7
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	e002      	b.n	80079a2 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3b01      	subs	r3, #1
 80079a0:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 80079a2:	20fa      	movs	r0, #250	@ 0xfa
 80079a4:	f001 fcf6 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80079a8:	2102      	movs	r1, #2
 80079aa:	486b      	ldr	r0, [pc, #428]	@ (8007b58 <takeMachineID+0x2a4>)
 80079ac:	f002 fac2 	bl	8009f34 <HAL_GPIO_ReadPin>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	f040 80a1 	bne.w	8007afa <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d10a      	bne.n	80079d4 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 80079be:	4a64      	ldr	r2, [pc, #400]	@ (8007b50 <takeMachineID+0x29c>)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	2230      	movs	r2, #48	@ 0x30
 80079c6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80079c8:	4a66      	ldr	r2, [pc, #408]	@ (8007b64 <takeMachineID+0x2b0>)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	4413      	add	r3, r2
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e07c      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d10a      	bne.n	80079f0 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 80079da:	4a5d      	ldr	r2, [pc, #372]	@ (8007b50 <takeMachineID+0x29c>)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	2231      	movs	r2, #49	@ 0x31
 80079e2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80079e4:	4a5f      	ldr	r2, [pc, #380]	@ (8007b64 <takeMachineID+0x2b0>)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	4413      	add	r3, r2
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e06e      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d10a      	bne.n	8007a0c <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 80079f6:	4a56      	ldr	r2, [pc, #344]	@ (8007b50 <takeMachineID+0x29c>)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	2232      	movs	r2, #50	@ 0x32
 80079fe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007a00:	4a58      	ldr	r2, [pc, #352]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	2202      	movs	r2, #2
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	e060      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d10a      	bne.n	8007a28 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8007a12:	4a4f      	ldr	r2, [pc, #316]	@ (8007b50 <takeMachineID+0x29c>)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4413      	add	r3, r2
 8007a18:	2233      	movs	r2, #51	@ 0x33
 8007a1a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007a1c:	4a51      	ldr	r2, [pc, #324]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	4413      	add	r3, r2
 8007a22:	2203      	movs	r2, #3
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e052      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b07      	cmp	r3, #7
 8007a2c:	d10a      	bne.n	8007a44 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8007a2e:	4a48      	ldr	r2, [pc, #288]	@ (8007b50 <takeMachineID+0x29c>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	2234      	movs	r2, #52	@ 0x34
 8007a36:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007a38:	4a4a      	ldr	r2, [pc, #296]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	2204      	movs	r2, #4
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e044      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b0a      	cmp	r3, #10
 8007a48:	d10a      	bne.n	8007a60 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007a4a:	4a41      	ldr	r2, [pc, #260]	@ (8007b50 <takeMachineID+0x29c>)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	2235      	movs	r2, #53	@ 0x35
 8007a52:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007a54:	4a43      	ldr	r2, [pc, #268]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	4413      	add	r3, r2
 8007a5a:	2205      	movs	r2, #5
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e036      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b0b      	cmp	r3, #11
 8007a64:	d10a      	bne.n	8007a7c <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007a66:	4a3a      	ldr	r2, [pc, #232]	@ (8007b50 <takeMachineID+0x29c>)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	2236      	movs	r2, #54	@ 0x36
 8007a6e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007a70:	4a3c      	ldr	r2, [pc, #240]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	2206      	movs	r2, #6
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e028      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b0c      	cmp	r3, #12
 8007a80:	d10a      	bne.n	8007a98 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007a82:	4a33      	ldr	r2, [pc, #204]	@ (8007b50 <takeMachineID+0x29c>)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	2237      	movs	r2, #55	@ 0x37
 8007a8a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007a8c:	4a35      	ldr	r2, [pc, #212]	@ (8007b64 <takeMachineID+0x2b0>)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	4413      	add	r3, r2
 8007a92:	2207      	movs	r2, #7
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e01a      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b0d      	cmp	r3, #13
 8007a9c:	d10a      	bne.n	8007ab4 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b50 <takeMachineID+0x29c>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	2238      	movs	r2, #56	@ 0x38
 8007aa6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8007b64 <takeMachineID+0x2b0>)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	2208      	movs	r2, #8
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e00c      	b.n	8007ace <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b0e      	cmp	r3, #14
 8007ab8:	d109      	bne.n	8007ace <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007aba:	4a25      	ldr	r2, [pc, #148]	@ (8007b50 <takeMachineID+0x29c>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	2239      	movs	r2, #57	@ 0x39
 8007ac2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007ac4:	4a27      	ldr	r2, [pc, #156]	@ (8007b64 <takeMachineID+0x2b0>)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	4413      	add	r3, r2
 8007aca:	2209      	movs	r2, #9
 8007acc:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	b2d9      	uxtb	r1, r3
 8007ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b50 <takeMachineID+0x29c>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	2001      	movs	r0, #1
 8007ade:	f000 ff14 	bl	800890a <lcd_print_char>

        	writeLoc++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3301      	adds	r3, #1
 8007aec:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007af4:	2096      	movs	r0, #150	@ 0x96
 8007af6:	f001 fc4d 	bl	8009394 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007afa:	2104      	movs	r1, #4
 8007afc:	4816      	ldr	r0, [pc, #88]	@ (8007b58 <takeMachineID+0x2a4>)
 8007afe:	f002 fa19 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d149      	bne.n	8007b9c <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007b08:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <takeMachineID+0x29c>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d042      	beq.n	8007b96 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007b10:	4a0f      	ldr	r2, [pc, #60]	@ (8007b50 <takeMachineID+0x29c>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007b1a:	4a12      	ldr	r2, [pc, #72]	@ (8007b64 <takeMachineID+0x2b0>)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	4413      	add	r3, r2
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	dd03      	ble.n	8007b32 <takeMachineID+0x27e>
                	writeLoc--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e004      	b.n	8007b3c <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	dc01      	bgt.n	8007b3c <takeMachineID+0x288>
                	writeLoc = 5;
 8007b38:	2305      	movs	r3, #5
 8007b3a:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd16      	ble.n	8007b70 <takeMachineID+0x2bc>
                	arrayPos--;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	e017      	b.n	8007b80 <takeMachineID+0x2cc>
 8007b50:	20001068 	.word	0x20001068
 8007b54:	20000004 	.word	0x20000004
 8007b58:	40010800 	.word	0x40010800
 8007b5c:	200017f0 	.word	0x200017f0
 8007b60:	20001804 	.word	0x20001804
 8007b64:	20000ff0 	.word	0x20000ff0
 8007b68:	20001944 	.word	0x20001944
 8007b6c:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da04      	bge.n	8007b80 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <takeMachineID+0x300>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	3305      	adds	r3, #5
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	f000 fede 	bl	800894c <lcd_delete_char>
                HAL_Delay(50);
 8007b90:	2032      	movs	r0, #50	@ 0x32
 8007b92:	f001 fbff 	bl	8009394 <HAL_Delay>
            }

            HAL_Delay(150);
 8007b96:	2096      	movs	r0, #150	@ 0x96
 8007b98:	f001 fbfc 	bl	8009394 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	2002      	movs	r0, #2
 8007ba4:	f000 fe7d 	bl	80088a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ba8:	e69c      	b.n	80078e4 <takeMachineID+0x30>
    }
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000004 	.word	0x20000004

08007bb8 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	607b      	str	r3, [r7, #4]
	while(loopVal == 1) {
 8007bc2:	e01f      	b.n	8007c04 <ssidConfirmation+0x4c>
		lcd_print(2, 1, wifiConfirmationText);
 8007bc4:	4a28      	ldr	r2, [pc, #160]	@ (8007c68 <ssidConfirmation+0xb0>)
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	2002      	movs	r0, #2
 8007bca:	f000 fe89 	bl	80088e0 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4826      	ldr	r0, [pc, #152]	@ (8007c6c <ssidConfirmation+0xb4>)
 8007bd2:	f002 f9af 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <ssidConfirmation+0x28>
			loopVal = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8007be0:	4823      	ldr	r0, [pc, #140]	@ (8007c70 <ssidConfirmation+0xb8>)
 8007be2:	f7f8 fb1f 	bl	8000224 <strlen>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d906      	bls.n	8007bfa <ssidConfirmation+0x42>
			slideText(wifiSSID, 1, 1, 1);
 8007bec:	2301      	movs	r3, #1
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	481f      	ldr	r0, [pc, #124]	@ (8007c70 <ssidConfirmation+0xb8>)
 8007bf4:	f7f9 f9fe 	bl	8000ff4 <slideText>
 8007bf8:	e004      	b.n	8007c04 <ssidConfirmation+0x4c>
		} else {
			lcd_print(1, 1, wifiSSID);
 8007bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8007c70 <ssidConfirmation+0xb8>)
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f000 fe6e 	bl	80088e0 <lcd_print>
	while(loopVal == 1) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d0dc      	beq.n	8007bc4 <ssidConfirmation+0xc>
		}
	}

    lcd_cursor(0);
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f000 fec6 	bl	800899c <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8007c10:	4817      	ldr	r0, [pc, #92]	@ (8007c70 <ssidConfirmation+0xb8>)
 8007c12:	f7f8 fb07 	bl	8000224 <strlen>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b14      	cmp	r3, #20
 8007c1a:	d90f      	bls.n	8007c3c <ssidConfirmation+0x84>
    	lcd_print(1, 1, ssidExceedErrorText);
 8007c1c:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <ssidConfirmation+0xbc>)
 8007c1e:	2101      	movs	r1, #1
 8007c20:	2001      	movs	r0, #1
 8007c22:	f000 fe5d 	bl	80088e0 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8007c26:	4a14      	ldr	r2, [pc, #80]	@ (8007c78 <ssidConfirmation+0xc0>)
 8007c28:	2101      	movs	r1, #1
 8007c2a:	2002      	movs	r0, #2
 8007c2c:	f000 fe58 	bl	80088e0 <lcd_print>
        HAL_Delay(1250);
 8007c30:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007c34:	f001 fbae 	bl	8009394 <HAL_Delay>

        return 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e011      	b.n	8007c60 <ssidConfirmation+0xa8>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c3c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	236e      	movs	r3, #110	@ 0x6e
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <ssidConfirmation+0xc4>)
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	236e      	movs	r3, #110	@ 0x6e
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	21a0      	movs	r1, #160	@ 0xa0
 8007c50:	480b      	ldr	r0, [pc, #44]	@ (8007c80 <ssidConfirmation+0xc8>)
 8007c52:	f002 fc29 	bl	800a4a8 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007c56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c5a:	f001 fb9b 	bl	8009394 <HAL_Delay>

    	return 1;
 8007c5e:	2301      	movs	r3, #1
    }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20001908 	.word	0x20001908
 8007c6c:	40010800 	.word	0x40010800
 8007c70:	20001074 	.word	0x20001074
 8007c74:	20001818 	.word	0x20001818
 8007c78:	2000182c 	.word	0x2000182c
 8007c7c:	20000ff0 	.word	0x20000ff0
 8007c80:	20001944 	.word	0x20001944

08007c84 <takeWifiSSID>:

void takeWifiSSID() {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	f000 fe86 	bl	800899c <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007c90:	2214      	movs	r2, #20
 8007c92:	2100      	movs	r1, #0
 8007c94:	4899      	ldr	r0, [pc, #612]	@ (8007efc <takeWifiSSID+0x278>)
 8007c96:	f005 fab5 	bl	800d204 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007c9e:	2307      	movs	r3, #7
 8007ca0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007caa:	4b95      	ldr	r3, [pc, #596]	@ (8007f00 <takeWifiSSID+0x27c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	2002      	movs	r0, #2
 8007cb4:	f7f9 f818 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007cb8:	2108      	movs	r1, #8
 8007cba:	4892      	ldr	r0, [pc, #584]	@ (8007f04 <takeWifiSSID+0x280>)
 8007cbc:	f002 f93a 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d105      	bne.n	8007cd2 <takeWifiSSID+0x4e>
        	if(ssidConfirmation() == 0) {
 8007cc6:	f7ff ff77 	bl	8007bb8 <ssidConfirmation>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d100      	bne.n	8007cd2 <takeWifiSSID+0x4e>
        		goto mainSSIDSection;
 8007cd0:	e7db      	b.n	8007c8a <takeWifiSSID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	488b      	ldr	r0, [pc, #556]	@ (8007f04 <takeWifiSSID+0x280>)
 8007cd6:	f002 f92d 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d14d      	bne.n	8007d7c <takeWifiSSID+0xf8>
        	if(cursorPosition > 80) {
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b50      	cmp	r3, #80	@ 0x50
 8007ce4:	dd01      	ble.n	8007cea <takeWifiSSID+0x66>
        		cursorPosition = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b10      	cmp	r3, #16
 8007cee:	d13f      	bne.n	8007d70 <takeWifiSSID+0xec>
            	if(page == 1) {
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d109      	bne.n	8007d0a <takeWifiSSID+0x86>
            		cursorPosition = 1;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
            		page++;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007d00:	2102      	movs	r1, #2
 8007d02:	2002      	movs	r0, #2
 8007d04:	f7f8 fff0 	bl	8000ce8 <printTemplate>
 8007d08:	e035      	b.n	8007d76 <takeWifiSSID+0xf2>
            	} else if(page == 2) {
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d109      	bne.n	8007d24 <takeWifiSSID+0xa0>
            		cursorPosition = 1;
 8007d10:	2301      	movs	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	3301      	adds	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	2002      	movs	r0, #2
 8007d1e:	f7f8 ffe3 	bl	8000ce8 <printTemplate>
 8007d22:	e028      	b.n	8007d76 <takeWifiSSID+0xf2>
            	} else if(page == 3) {
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d109      	bne.n	8007d3e <takeWifiSSID+0xba>
            		cursorPosition = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3301      	adds	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007d34:	2104      	movs	r1, #4
 8007d36:	2002      	movs	r0, #2
 8007d38:	f7f8 ffd6 	bl	8000ce8 <printTemplate>
 8007d3c:	e01b      	b.n	8007d76 <takeWifiSSID+0xf2>
            	} else if(page == 4) {
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d109      	bne.n	8007d58 <takeWifiSSID+0xd4>
            		cursorPosition = 1;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007d4e:	2105      	movs	r1, #5
 8007d50:	2002      	movs	r0, #2
 8007d52:	f7f8 ffc9 	bl	8000ce8 <printTemplate>
 8007d56:	e00e      	b.n	8007d76 <takeWifiSSID+0xf2>
            	} else if(page == 5) {
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d10b      	bne.n	8007d76 <takeWifiSSID+0xf2>
            		cursorPosition = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007d66:	2101      	movs	r1, #1
 8007d68:	2002      	movs	r0, #2
 8007d6a:	f7f8 ffbd 	bl	8000ce8 <printTemplate>
 8007d6e:	e002      	b.n	8007d76 <takeWifiSSID+0xf2>
            	}
            } else {
            	cursorPosition++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007d76:	2096      	movs	r0, #150	@ 0x96
 8007d78:	f001 fb0c 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007d7c:	2108      	movs	r1, #8
 8007d7e:	4862      	ldr	r0, [pc, #392]	@ (8007f08 <takeWifiSSID+0x284>)
 8007d80:	f002 f8d8 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d149      	bne.n	8007e1e <takeWifiSSID+0x19a>
        	if(cursorPosition < 1) {
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dc01      	bgt.n	8007d94 <takeWifiSSID+0x110>
        		cursorPosition = 80;
 8007d90:	2350      	movs	r3, #80	@ 0x50
 8007d92:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d13b      	bne.n	8007e12 <takeWifiSSID+0x18e>
            	if(page == 1) {
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d108      	bne.n	8007db2 <takeWifiSSID+0x12e>
            		cursorPosition = 16;
 8007da0:	2310      	movs	r3, #16
 8007da2:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007da4:	2305      	movs	r3, #5
 8007da6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007da8:	2105      	movs	r1, #5
 8007daa:	2002      	movs	r0, #2
 8007dac:	f7f8 ff9c 	bl	8000ce8 <printTemplate>
 8007db0:	e032      	b.n	8007e18 <takeWifiSSID+0x194>
            	} else if(page == 2) {
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d108      	bne.n	8007dca <takeWifiSSID+0x146>
            		cursorPosition = 16;
 8007db8:	2310      	movs	r3, #16
 8007dba:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	2002      	movs	r0, #2
 8007dc4:	f7f8 ff90 	bl	8000ce8 <printTemplate>
 8007dc8:	e026      	b.n	8007e18 <takeWifiSSID+0x194>
            	} else if(page == 3) {
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d108      	bne.n	8007de2 <takeWifiSSID+0x15e>
            		cursorPosition = 16;
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007dd8:	2102      	movs	r1, #2
 8007dda:	2002      	movs	r0, #2
 8007ddc:	f7f8 ff84 	bl	8000ce8 <printTemplate>
 8007de0:	e01a      	b.n	8007e18 <takeWifiSSID+0x194>
            	} else if(page == 4) {
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d108      	bne.n	8007dfa <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8007de8:	2310      	movs	r3, #16
 8007dea:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007dec:	2303      	movs	r3, #3
 8007dee:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007df0:	2103      	movs	r1, #3
 8007df2:	2002      	movs	r0, #2
 8007df4:	f7f8 ff78 	bl	8000ce8 <printTemplate>
 8007df8:	e00e      	b.n	8007e18 <takeWifiSSID+0x194>
            	} else if(page == 5) {
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d10b      	bne.n	8007e18 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8007e00:	2310      	movs	r3, #16
 8007e02:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007e04:	2304      	movs	r3, #4
 8007e06:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007e08:	2104      	movs	r1, #4
 8007e0a:	2002      	movs	r0, #2
 8007e0c:	f7f8 ff6c 	bl	8000ce8 <printTemplate>
 8007e10:	e002      	b.n	8007e18 <takeWifiSSID+0x194>
            	}
            } else {
            	cursorPosition--;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007e18:	2096      	movs	r0, #150	@ 0x96
 8007e1a:	f001 fabb 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e1e:	2102      	movs	r1, #2
 8007e20:	4838      	ldr	r0, [pc, #224]	@ (8007f04 <takeWifiSSID+0x280>)
 8007e22:	f002 f887 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d12f      	bne.n	8007e8c <takeWifiSSID+0x208>
            eepromData[eepromVal] = cursorPosition;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	b2d9      	uxtb	r1, r3
 8007e30:	4a36      	ldr	r2, [pc, #216]	@ (8007f0c <takeWifiSSID+0x288>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	460a      	mov	r2, r1
 8007e38:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007e3a:	4a35      	ldr	r2, [pc, #212]	@ (8007f10 <takeWifiSSID+0x28c>)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	7819      	ldrb	r1, [r3, #0]
 8007e42:	4a2e      	ldr	r2, [pc, #184]	@ (8007efc <takeWifiSSID+0x278>)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4413      	add	r3, r2
 8007e48:	460a      	mov	r2, r1
 8007e4a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	b2d9      	uxtb	r1, r3
 8007e50:	4a2f      	ldr	r2, [pc, #188]	@ (8007f10 <takeWifiSSID+0x28c>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f000 fd55 	bl	800890a <lcd_print_char>

            writeLoc++;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	3301      	adds	r3, #1
 8007e64:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007e72:	4a26      	ldr	r2, [pc, #152]	@ (8007f0c <takeWifiSSID+0x288>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007efc <takeWifiSSID+0x278>)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007e86:	2096      	movs	r0, #150	@ 0x96
 8007e88:	f001 fa84 	bl	8009394 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	481d      	ldr	r0, [pc, #116]	@ (8007f04 <takeWifiSSID+0x280>)
 8007e90:	f002 f850 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d152      	bne.n	8007f40 <takeWifiSSID+0x2bc>
        	if(strlen(wifiSSID) >= 1) {
 8007e9a:	4b18      	ldr	r3, [pc, #96]	@ (8007efc <takeWifiSSID+0x278>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d04b      	beq.n	8007f3a <takeWifiSSID+0x2b6>
        		eepromData[eepromVal] = '\0';
 8007ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f0c <takeWifiSSID+0x288>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007eac:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <takeWifiSSID+0x278>)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]

        		if(strlen(wifiSSID) > 10) {
 8007eb6:	4811      	ldr	r0, [pc, #68]	@ (8007efc <takeWifiSSID+0x278>)
 8007eb8:	f7f8 f9b4 	bl	8000224 <strlen>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b0a      	cmp	r3, #10
 8007ec0:	d905      	bls.n	8007ece <takeWifiSSID+0x24a>
        		    slideText(wifiSSID, 7, 1, 1);
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	2107      	movs	r1, #7
 8007ec8:	480c      	ldr	r0, [pc, #48]	@ (8007efc <takeWifiSSID+0x278>)
 8007eca:	f7f9 f893 	bl	8000ff4 <slideText>
        		}

        		if(writeLoc > 7) {
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b07      	cmp	r3, #7
 8007ed2:	dd03      	ble.n	8007edc <takeWifiSSID+0x258>
        			writeLoc--;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	e004      	b.n	8007ee6 <takeWifiSSID+0x262>
        		} else if(writeLoc < 7) {
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2b06      	cmp	r3, #6
 8007ee0:	dc01      	bgt.n	8007ee6 <takeWifiSSID+0x262>
        			writeLoc = 7;
 8007ee2:	2307      	movs	r3, #7
 8007ee4:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dd13      	ble.n	8007f14 <takeWifiSSID+0x290>
        			arrayPosition--;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	e014      	b.n	8007f24 <takeWifiSSID+0x2a0>
 8007efa:	bf00      	nop
 8007efc:	20001074 	.word	0x20001074
 8007f00:	20000008 	.word	0x20000008
 8007f04:	40010800 	.word	0x40010800
 8007f08:	40011000 	.word	0x40011000
 8007f0c:	20000ff0 	.word	0x20000ff0
 8007f10:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da04      	bge.n	8007f24 <takeWifiSSID+0x2a0>
        			arrayPosition = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f50 <takeWifiSSID+0x2cc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	3307      	adds	r3, #7
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	2001      	movs	r0, #1
 8007f30:	f000 fd0c 	bl	800894c <lcd_delete_char>
        		HAL_Delay(50);
 8007f34:	2032      	movs	r0, #50	@ 0x32
 8007f36:	f001 fa2d 	bl	8009394 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007f3a:	2096      	movs	r0, #150	@ 0x96
 8007f3c:	f001 fa2a 	bl	8009394 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	4619      	mov	r1, r3
 8007f46:	2002      	movs	r0, #2
 8007f48:	f000 fcab 	bl	80088a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f4c:	e6b4      	b.n	8007cb8 <takeWifiSSID+0x34>
 8007f4e:	bf00      	nop
 8007f50:	20000008 	.word	0x20000008

08007f54 <takeWifiPass>:
    }
}

void takeWifiPass() {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	@ 0x28
 8007f58:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f000 fd1e 	bl	800899c <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007f60:	2214      	movs	r2, #20
 8007f62:	2100      	movs	r1, #0
 8007f64:	48a5      	ldr	r0, [pc, #660]	@ (80081fc <takeWifiPass+0x2a8>)
 8007f66:	f005 f94d 	bl	800d204 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007f6e:	2307      	movs	r3, #7
 8007f70:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007f72:	2301      	movs	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007f76:	2300      	movs	r3, #0
 8007f78:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8008200 <takeWifiPass+0x2ac>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007f80:	2101      	movs	r1, #1
 8007f82:	2003      	movs	r0, #3
 8007f84:	f7f8 feb0 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f88:	2108      	movs	r1, #8
 8007f8a:	489e      	ldr	r0, [pc, #632]	@ (8008204 <takeWifiPass+0x2b0>)
 8007f8c:	f001 ffd2 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d129      	bne.n	8007fea <takeWifiPass+0x96>
            lcd_cursor(0);
 8007f96:	2000      	movs	r0, #0
 8007f98:	f000 fd00 	bl	800899c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007f9c:	4897      	ldr	r0, [pc, #604]	@ (80081fc <takeWifiPass+0x2a8>)
 8007f9e:	f7f8 f941 	bl	8000224 <strlen>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b14      	cmp	r3, #20
 8007fa6:	d90e      	bls.n	8007fc6 <takeWifiPass+0x72>
            	lcd_print(1, 1, passExceedErrorText);
 8007fa8:	4a97      	ldr	r2, [pc, #604]	@ (8008208 <takeWifiPass+0x2b4>)
 8007faa:	2101      	movs	r1, #1
 8007fac:	2001      	movs	r0, #1
 8007fae:	f000 fc97 	bl	80088e0 <lcd_print>
            	lcd_print(2, 1, passExceedError2Text);
 8007fb2:	4a96      	ldr	r2, [pc, #600]	@ (800820c <takeWifiPass+0x2b8>)
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	2002      	movs	r0, #2
 8007fb8:	f000 fc92 	bl	80088e0 <lcd_print>
                HAL_Delay(1250);
 8007fbc:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007fc0:	f001 f9e8 	bl	8009394 <HAL_Delay>

                goto mainPassSection;
 8007fc4:	e7c9      	b.n	8007f5a <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007fc6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	236e      	movs	r3, #110	@ 0x6e
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8008210 <takeWifiPass+0x2bc>)
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	236e      	movs	r3, #110	@ 0x6e
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	21a0      	movs	r1, #160	@ 0xa0
 8007fda:	488e      	ldr	r0, [pc, #568]	@ (8008214 <takeWifiPass+0x2c0>)
 8007fdc:	f002 fa64 	bl	800a4a8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007fe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007fe4:	f001 f9d6 	bl	8009394 <HAL_Delay>

            	break;
 8007fe8:	e137      	b.n	800825a <takeWifiPass+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fea:	2101      	movs	r1, #1
 8007fec:	4885      	ldr	r0, [pc, #532]	@ (8008204 <takeWifiPass+0x2b0>)
 8007fee:	f001 ffa1 	bl	8009f34 <HAL_GPIO_ReadPin>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d14d      	bne.n	8008094 <takeWifiPass+0x140>
        	if(cursorPosition > 80) {
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b50      	cmp	r3, #80	@ 0x50
 8007ffc:	dd01      	ble.n	8008002 <takeWifiPass+0xae>
        		cursorPosition = 1;
 8007ffe:	2301      	movs	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b10      	cmp	r3, #16
 8008006:	d13f      	bne.n	8008088 <takeWifiPass+0x134>
            	if(page == 1) {
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d109      	bne.n	8008022 <takeWifiPass+0xce>
            		cursorPosition = 1;
 800800e:	2301      	movs	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
            		page++;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3301      	adds	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008018:	2102      	movs	r1, #2
 800801a:	2003      	movs	r0, #3
 800801c:	f7f8 fe64 	bl	8000ce8 <printTemplate>
 8008020:	e035      	b.n	800808e <takeWifiPass+0x13a>
            	} else if(page == 2) {
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d109      	bne.n	800803c <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8008028:	2301      	movs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
            		page++;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008032:	2103      	movs	r1, #3
 8008034:	2003      	movs	r0, #3
 8008036:	f7f8 fe57 	bl	8000ce8 <printTemplate>
 800803a:	e028      	b.n	800808e <takeWifiPass+0x13a>
            	} else if(page == 3) {
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d109      	bne.n	8008056 <takeWifiPass+0x102>
            		cursorPosition = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
            		page++;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	3301      	adds	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800804c:	2104      	movs	r1, #4
 800804e:	2003      	movs	r0, #3
 8008050:	f7f8 fe4a 	bl	8000ce8 <printTemplate>
 8008054:	e01b      	b.n	800808e <takeWifiPass+0x13a>
            	} else if(page == 4) {
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b04      	cmp	r3, #4
 800805a:	d109      	bne.n	8008070 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 800805c:	2301      	movs	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	3301      	adds	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008066:	2105      	movs	r1, #5
 8008068:	2003      	movs	r0, #3
 800806a:	f7f8 fe3d 	bl	8000ce8 <printTemplate>
 800806e:	e00e      	b.n	800808e <takeWifiPass+0x13a>
            	} else if(page == 5) {
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b05      	cmp	r3, #5
 8008074:	d10b      	bne.n	800808e <takeWifiPass+0x13a>
            		cursorPosition = 1;
 8008076:	2301      	movs	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800807a:	2301      	movs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800807e:	2101      	movs	r1, #1
 8008080:	2003      	movs	r0, #3
 8008082:	f7f8 fe31 	bl	8000ce8 <printTemplate>
 8008086:	e002      	b.n	800808e <takeWifiPass+0x13a>
            	}
            } else {
            	cursorPosition++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800808e:	2096      	movs	r0, #150	@ 0x96
 8008090:	f001 f980 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008094:	2108      	movs	r1, #8
 8008096:	4860      	ldr	r0, [pc, #384]	@ (8008218 <takeWifiPass+0x2c4>)
 8008098:	f001 ff4c 	bl	8009f34 <HAL_GPIO_ReadPin>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d149      	bne.n	8008136 <takeWifiPass+0x1e2>
        	if(cursorPosition < 1) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc01      	bgt.n	80080ac <takeWifiPass+0x158>
        		cursorPosition = 80;
 80080a8:	2350      	movs	r3, #80	@ 0x50
 80080aa:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d13b      	bne.n	800812a <takeWifiPass+0x1d6>
            	if(page == 1) {
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d108      	bne.n	80080ca <takeWifiPass+0x176>
            		cursorPosition = 16;
 80080b8:	2310      	movs	r3, #16
 80080ba:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80080bc:	2305      	movs	r3, #5
 80080be:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80080c0:	2105      	movs	r1, #5
 80080c2:	2003      	movs	r0, #3
 80080c4:	f7f8 fe10 	bl	8000ce8 <printTemplate>
 80080c8:	e032      	b.n	8008130 <takeWifiPass+0x1dc>
            	} else if(page == 2) {
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d108      	bne.n	80080e2 <takeWifiPass+0x18e>
            		cursorPosition = 16;
 80080d0:	2310      	movs	r3, #16
 80080d2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80080d4:	2301      	movs	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80080d8:	2101      	movs	r1, #1
 80080da:	2003      	movs	r0, #3
 80080dc:	f7f8 fe04 	bl	8000ce8 <printTemplate>
 80080e0:	e026      	b.n	8008130 <takeWifiPass+0x1dc>
            	} else if(page == 3) {
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d108      	bne.n	80080fa <takeWifiPass+0x1a6>
            		cursorPosition = 16;
 80080e8:	2310      	movs	r3, #16
 80080ea:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80080ec:	2302      	movs	r3, #2
 80080ee:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80080f0:	2102      	movs	r1, #2
 80080f2:	2003      	movs	r0, #3
 80080f4:	f7f8 fdf8 	bl	8000ce8 <printTemplate>
 80080f8:	e01a      	b.n	8008130 <takeWifiPass+0x1dc>
            	} else if(page == 4) {
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d108      	bne.n	8008112 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8008100:	2310      	movs	r3, #16
 8008102:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008104:	2303      	movs	r3, #3
 8008106:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008108:	2103      	movs	r1, #3
 800810a:	2003      	movs	r0, #3
 800810c:	f7f8 fdec 	bl	8000ce8 <printTemplate>
 8008110:	e00e      	b.n	8008130 <takeWifiPass+0x1dc>
            	} else if(page == 5) {
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b05      	cmp	r3, #5
 8008116:	d10b      	bne.n	8008130 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8008118:	2310      	movs	r3, #16
 800811a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800811c:	2304      	movs	r3, #4
 800811e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008120:	2104      	movs	r1, #4
 8008122:	2003      	movs	r0, #3
 8008124:	f7f8 fde0 	bl	8000ce8 <printTemplate>
 8008128:	e002      	b.n	8008130 <takeWifiPass+0x1dc>
            	}
            } else {
            	cursorPosition--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b01      	subs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008130:	2096      	movs	r0, #150	@ 0x96
 8008132:	f001 f92f 	bl	8009394 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008136:	2102      	movs	r1, #2
 8008138:	4832      	ldr	r0, [pc, #200]	@ (8008204 <takeWifiPass+0x2b0>)
 800813a:	f001 fefb 	bl	8009f34 <HAL_GPIO_ReadPin>
 800813e:	4603      	mov	r3, r0
 8008140:	2b01      	cmp	r3, #1
 8008142:	d12f      	bne.n	80081a4 <takeWifiPass+0x250>
            eepromData[eepromVal] = cursorPosition;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	b2d9      	uxtb	r1, r3
 8008148:	4a31      	ldr	r2, [pc, #196]	@ (8008210 <takeWifiPass+0x2bc>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	460a      	mov	r2, r1
 8008150:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008152:	4a32      	ldr	r2, [pc, #200]	@ (800821c <takeWifiPass+0x2c8>)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	7819      	ldrb	r1, [r3, #0]
 800815a:	4a28      	ldr	r2, [pc, #160]	@ (80081fc <takeWifiPass+0x2a8>)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4413      	add	r3, r2
 8008160:	460a      	mov	r2, r1
 8008162:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	b2d9      	uxtb	r1, r3
 8008168:	4a2c      	ldr	r2, [pc, #176]	@ (800821c <takeWifiPass+0x2c8>)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	2001      	movs	r0, #1
 8008174:	f000 fbc9 	bl	800890a <lcd_print_char>

            writeLoc++;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	3301      	adds	r3, #1
 800817c:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	3301      	adds	r3, #1
 8008182:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3301      	adds	r3, #1
 8008188:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800818a:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <takeWifiPass+0x2bc>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	2200      	movs	r2, #0
 8008192:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008194:	4a19      	ldr	r2, [pc, #100]	@ (80081fc <takeWifiPass+0x2a8>)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4413      	add	r3, r2
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800819e:	2096      	movs	r0, #150	@ 0x96
 80081a0:	f001 f8f8 	bl	8009394 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80081a4:	2104      	movs	r1, #4
 80081a6:	4817      	ldr	r0, [pc, #92]	@ (8008204 <takeWifiPass+0x2b0>)
 80081a8:	f001 fec4 	bl	8009f34 <HAL_GPIO_ReadPin>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d14c      	bne.n	800824c <takeWifiPass+0x2f8>
        	if(strlen(wifiPass) >= 1) {
 80081b2:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <takeWifiPass+0x2a8>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d045      	beq.n	8008246 <takeWifiPass+0x2f2>
        		eepromData[eepromVal] = '\0';
 80081ba:	4a15      	ldr	r2, [pc, #84]	@ (8008210 <takeWifiPass+0x2bc>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80081c4:	4a0d      	ldr	r2, [pc, #52]	@ (80081fc <takeWifiPass+0x2a8>)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b07      	cmp	r3, #7
 80081d2:	dd03      	ble.n	80081dc <takeWifiPass+0x288>
        			writeLoc--;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	e004      	b.n	80081e6 <takeWifiPass+0x292>
        		} else if(writeLoc < 7) {
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b06      	cmp	r3, #6
 80081e0:	dc01      	bgt.n	80081e6 <takeWifiPass+0x292>
        			writeLoc = 7;
 80081e2:	2307      	movs	r3, #7
 80081e4:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd19      	ble.n	8008220 <takeWifiPass+0x2cc>
        			arrayPosition--;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	e01a      	b.n	8008230 <takeWifiPass+0x2dc>
 80081fa:	bf00      	nop
 80081fc:	20001088 	.word	0x20001088
 8008200:	2000000c 	.word	0x2000000c
 8008204:	40010800 	.word	0x40010800
 8008208:	20001840 	.word	0x20001840
 800820c:	20001854 	.word	0x20001854
 8008210:	20000ff0 	.word	0x20000ff0
 8008214:	20001944 	.word	0x20001944
 8008218:	40011000 	.word	0x40011000
 800821c:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	da04      	bge.n	8008230 <takeWifiPass+0x2dc>
        			arrayPosition = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800822a:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <takeWifiPass+0x310>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	3307      	adds	r3, #7
 8008236:	b2db      	uxtb	r3, r3
 8008238:	4619      	mov	r1, r3
 800823a:	2001      	movs	r0, #1
 800823c:	f000 fb86 	bl	800894c <lcd_delete_char>
        		HAL_Delay(50);
 8008240:	2032      	movs	r0, #50	@ 0x32
 8008242:	f001 f8a7 	bl	8009394 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008246:	2096      	movs	r0, #150	@ 0x96
 8008248:	f001 f8a4 	bl	8009394 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	2002      	movs	r0, #2
 8008254:	f000 fb25 	bl	80088a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008258:	e696      	b.n	8007f88 <takeWifiPass+0x34>
    }
}
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	2000000c 	.word	0x2000000c

08008268 <mergeData>:

char* mergeData() {
 8008268:	b580      	push	{r7, lr}
 800826a:	b09c      	sub	sp, #112	@ 0x70
 800826c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800826e:	2300      	movs	r3, #0
 8008270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008272:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008276:	2229      	movs	r2, #41	@ 0x29
 8008278:	2100      	movs	r1, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f004 ffc2 	bl	800d204 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008280:	4b65      	ldr	r3, [pc, #404]	@ (8008418 <mergeData+0x1b0>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	703b      	strb	r3, [r7, #0]
 8008286:	4b65      	ldr	r3, [pc, #404]	@ (800841c <mergeData+0x1b4>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	707b      	strb	r3, [r7, #1]
 800828c:	4b64      	ldr	r3, [pc, #400]	@ (8008420 <mergeData+0x1b8>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	70bb      	strb	r3, [r7, #2]
 8008292:	4b64      	ldr	r3, [pc, #400]	@ (8008424 <mergeData+0x1bc>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	70fb      	strb	r3, [r7, #3]
 8008298:	4b63      	ldr	r3, [pc, #396]	@ (8008428 <mergeData+0x1c0>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	713b      	strb	r3, [r7, #4]
 800829e:	4b63      	ldr	r3, [pc, #396]	@ (800842c <mergeData+0x1c4>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	717b      	strb	r3, [r7, #5]
 80082a4:	4b62      	ldr	r3, [pc, #392]	@ (8008430 <mergeData+0x1c8>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	71bb      	strb	r3, [r7, #6]
 80082aa:	4b62      	ldr	r3, [pc, #392]	@ (8008434 <mergeData+0x1cc>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
 80082b0:	4b61      	ldr	r3, [pc, #388]	@ (8008438 <mergeData+0x1d0>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	723b      	strb	r3, [r7, #8]
 80082b6:	4b61      	ldr	r3, [pc, #388]	@ (800843c <mergeData+0x1d4>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	727b      	strb	r3, [r7, #9]
 80082bc:	4b60      	ldr	r3, [pc, #384]	@ (8008440 <mergeData+0x1d8>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	72bb      	strb	r3, [r7, #10]
 80082c2:	4b60      	ldr	r3, [pc, #384]	@ (8008444 <mergeData+0x1dc>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	72fb      	strb	r3, [r7, #11]
 80082c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008448 <mergeData+0x1e0>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	733b      	strb	r3, [r7, #12]
 80082ce:	4b5f      	ldr	r3, [pc, #380]	@ (800844c <mergeData+0x1e4>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	737b      	strb	r3, [r7, #13]
 80082d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008450 <mergeData+0x1e8>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	73bb      	strb	r3, [r7, #14]
 80082da:	4b5e      	ldr	r3, [pc, #376]	@ (8008454 <mergeData+0x1ec>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	73fb      	strb	r3, [r7, #15]
 80082e0:	4b5d      	ldr	r3, [pc, #372]	@ (8008458 <mergeData+0x1f0>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	743b      	strb	r3, [r7, #16]
 80082e6:	4b5d      	ldr	r3, [pc, #372]	@ (800845c <mergeData+0x1f4>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	747b      	strb	r3, [r7, #17]
 80082ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008460 <mergeData+0x1f8>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	74bb      	strb	r3, [r7, #18]
 80082f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008464 <mergeData+0x1fc>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	74fb      	strb	r3, [r7, #19]
 80082f8:	4b5b      	ldr	r3, [pc, #364]	@ (8008468 <mergeData+0x200>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	753b      	strb	r3, [r7, #20]
 80082fe:	4b5b      	ldr	r3, [pc, #364]	@ (800846c <mergeData+0x204>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	757b      	strb	r3, [r7, #21]
 8008304:	4b5a      	ldr	r3, [pc, #360]	@ (8008470 <mergeData+0x208>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	75bb      	strb	r3, [r7, #22]
 800830a:	4b5a      	ldr	r3, [pc, #360]	@ (8008474 <mergeData+0x20c>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	75fb      	strb	r3, [r7, #23]
 8008310:	4b59      	ldr	r3, [pc, #356]	@ (8008478 <mergeData+0x210>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	763b      	strb	r3, [r7, #24]
 8008316:	4b59      	ldr	r3, [pc, #356]	@ (800847c <mergeData+0x214>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	767b      	strb	r3, [r7, #25]
 800831c:	4b58      	ldr	r3, [pc, #352]	@ (8008480 <mergeData+0x218>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	76bb      	strb	r3, [r7, #26]
 8008322:	4b58      	ldr	r3, [pc, #352]	@ (8008484 <mergeData+0x21c>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	76fb      	strb	r3, [r7, #27]
 8008328:	4b57      	ldr	r3, [pc, #348]	@ (8008488 <mergeData+0x220>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	773b      	strb	r3, [r7, #28]
 800832e:	4b57      	ldr	r3, [pc, #348]	@ (800848c <mergeData+0x224>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	777b      	strb	r3, [r7, #29]
 8008334:	4b56      	ldr	r3, [pc, #344]	@ (8008490 <mergeData+0x228>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	77bb      	strb	r3, [r7, #30]
 800833a:	4b56      	ldr	r3, [pc, #344]	@ (8008494 <mergeData+0x22c>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	4b55      	ldr	r3, [pc, #340]	@ (8008498 <mergeData+0x230>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8008348:	4b54      	ldr	r3, [pc, #336]	@ (800849c <mergeData+0x234>)
 800834a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 800834e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 8008352:	4b52      	ldr	r3, [pc, #328]	@ (800849c <mergeData+0x234>)
 8008354:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 800835c:	4b4f      	ldr	r3, [pc, #316]	@ (800849c <mergeData+0x234>)
 800835e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 8008366:	4b4d      	ldr	r3, [pc, #308]	@ (800849c <mergeData+0x234>)
 8008368:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 800836c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8008370:	4b4a      	ldr	r3, [pc, #296]	@ (800849c <mergeData+0x234>)
 8008372:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008376:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 800837a:	4b48      	ldr	r3, [pc, #288]	@ (800849c <mergeData+0x234>)
 800837c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 8008384:	4b45      	ldr	r3, [pc, #276]	@ (800849c <mergeData+0x234>)
 8008386:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 800838a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 800838e:	4b43      	ldr	r3, [pc, #268]	@ (800849c <mergeData+0x234>)
 8008390:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008394:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 8008398:	4b40      	ldr	r3, [pc, #256]	@ (800849c <mergeData+0x234>)
 800839a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 800839e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 80083a2:	4b3e      	ldr	r3, [pc, #248]	@ (800849c <mergeData+0x234>)
 80083a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 80083a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083ac:	2306      	movs	r3, #6
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80083b2:	2300      	movs	r3, #0
 80083b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083b6:	e015      	b.n	80083e4 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80083b8:	463a      	mov	r2, r7
 80083ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083bc:	4413      	add	r3, r2
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083c6:	4936      	ldr	r1, [pc, #216]	@ (80084a0 <mergeData+0x238>)
 80083c8:	4618      	mov	r0, r3
 80083ca:	f004 fe97 	bl	800d0fc <siprintf>
	    strcat(combinedString, temp);
 80083ce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80083d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f004 fef1 	bl	800d1c0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80083de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e0:	3301      	adds	r3, #1
 80083e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80083e8:	d9e6      	bls.n	80083b8 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80083ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f7 ff18 	bl	8000224 <strlen>
 80083f4:	4603      	mov	r3, r0
 80083f6:	3301      	adds	r3, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f004 fdc9 	bl	800cf90 <malloc>
 80083fe:	4603      	mov	r3, r0
 8008400:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008402:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008406:	4619      	mov	r1, r3
 8008408:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800840a:	f004 ff3f 	bl	800d28c <strcpy>
	return result;
 800840e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008410:	4618      	mov	r0, r3
 8008412:	3770      	adds	r7, #112	@ 0x70
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	200010d7 	.word	0x200010d7
 800841c:	200010c9 	.word	0x200010c9
 8008420:	200010cc 	.word	0x200010cc
 8008424:	200010cd 	.word	0x200010cd
 8008428:	200010ce 	.word	0x200010ce
 800842c:	200010d5 	.word	0x200010d5
 8008430:	200010cf 	.word	0x200010cf
 8008434:	200010d0 	.word	0x200010d0
 8008438:	200010d4 	.word	0x200010d4
 800843c:	200010d1 	.word	0x200010d1
 8008440:	200010e1 	.word	0x200010e1
 8008444:	200010d2 	.word	0x200010d2
 8008448:	200010e2 	.word	0x200010e2
 800844c:	200010d3 	.word	0x200010d3
 8008450:	200010e3 	.word	0x200010e3
 8008454:	200010d6 	.word	0x200010d6
 8008458:	200010d8 	.word	0x200010d8
 800845c:	200010d9 	.word	0x200010d9
 8008460:	200010da 	.word	0x200010da
 8008464:	200010db 	.word	0x200010db
 8008468:	200010dc 	.word	0x200010dc
 800846c:	200010dd 	.word	0x200010dd
 8008470:	200010de 	.word	0x200010de
 8008474:	200010df 	.word	0x200010df
 8008478:	200010e0 	.word	0x200010e0
 800847c:	200010e4 	.word	0x200010e4
 8008480:	200010e6 	.word	0x200010e6
 8008484:	200010c5 	.word	0x200010c5
 8008488:	200010c6 	.word	0x200010c6
 800848c:	20000000 	.word	0x20000000
 8008490:	20000001 	.word	0x20000001
 8008494:	200010c7 	.word	0x200010c7
 8008498:	200010e9 	.word	0x200010e9
 800849c:	20000ff0 	.word	0x20000ff0
 80084a0:	0800dc94 	.word	0x0800dc94

080084a4 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 80084aa:	4a13      	ldr	r2, [pc, #76]	@ (80084f8 <convertAndSendData+0x54>)
 80084ac:	2101      	movs	r1, #1
 80084ae:	2001      	movs	r0, #1
 80084b0:	f000 fa16 	bl	80088e0 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 80084b4:	4a11      	ldr	r2, [pc, #68]	@ (80084fc <convertAndSendData+0x58>)
 80084b6:	2101      	movs	r1, #1
 80084b8:	2002      	movs	r0, #2
 80084ba:	f000 fa11 	bl	80088e0 <lcd_print>

	for(int i=0; i<2; i++) {
 80084be:	2300      	movs	r3, #0
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	e00c      	b.n	80084de <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80084c4:	f7ff fed0 	bl	8008268 <mergeData>
 80084c8:	4603      	mov	r3, r0
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <convertAndSendData+0x5c>)
 80084ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008504 <convertAndSendData+0x60>)
 80084d0:	490d      	ldr	r1, [pc, #52]	@ (8008508 <convertAndSendData+0x64>)
 80084d2:	480e      	ldr	r0, [pc, #56]	@ (800850c <convertAndSendData+0x68>)
 80084d4:	f7f8 f9b6 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3301      	adds	r3, #1
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	ddef      	ble.n	80084c4 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 80084e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80084e8:	f000 ff54 	bl	8009394 <HAL_Delay>
	lcd_clear();
 80084ec:	f000 fa24 	bl	8008938 <lcd_clear>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	200017a0 	.word	0x200017a0
 80084fc:	200017b4 	.word	0x200017b4
 8008500:	20001088 	.word	0x20001088
 8008504:	20001074 	.word	0x20001074
 8008508:	20001068 	.word	0x20001068
 800850c:	200019e0 	.word	0x200019e0

08008510 <iotSetup>:

void iotSetup() {
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008514:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <iotSetup+0x48>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d016      	beq.n	800854a <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 800851c:	f000 f822 	bl	8008564 <checkEEPROM4ID>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d001      	beq.n	800852a <iotSetup+0x1a>
			takeMachineID();
 8008526:	f7ff f9c5 	bl	80078b4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800852a:	480c      	ldr	r0, [pc, #48]	@ (800855c <iotSetup+0x4c>)
 800852c:	f7f7 fe7a 	bl	8000224 <strlen>
 8008530:	4603      	mov	r3, r0
 8008532:	2b01      	cmp	r3, #1
 8008534:	d801      	bhi.n	800853a <iotSetup+0x2a>
			takeWifiSSID();
 8008536:	f7ff fba5 	bl	8007c84 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800853a:	4809      	ldr	r0, [pc, #36]	@ (8008560 <iotSetup+0x50>)
 800853c:	f7f7 fe72 	bl	8000224 <strlen>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d801      	bhi.n	800854a <iotSetup+0x3a>
			takeWifiPass();
 8008546:	f7ff fd05 	bl	8007f54 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 800854a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800854e:	f000 ff21 	bl	8009394 <HAL_Delay>
	//convertAndSendData();
}
 8008552:	bf00      	nop
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200010e7 	.word	0x200010e7
 800855c:	20001074 	.word	0x20001074
 8008560:	20001088 	.word	0x20001088

08008564 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800856a:	4b0f      	ldr	r3, [pc, #60]	@ (80085a8 <checkEEPROM4ID+0x44>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008570:	2301      	movs	r3, #1
 8008572:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008574:	2300      	movs	r3, #0
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e00d      	b.n	8008596 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800857a:	4a0c      	ldr	r2, [pc, #48]	@ (80085ac <checkEEPROM4ID+0x48>)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3301      	adds	r3, #1
 8008594:	607b      	str	r3, [r7, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b0b      	cmp	r3, #11
 800859a:	ddee      	ble.n	800857a <checkEEPROM4ID+0x16>
	}

	return returnVal;
 800859c:	68bb      	ldr	r3, [r7, #8]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	20000004 	.word	0x20000004
 80085ac:	20000ff0 	.word	0x20000ff0

080085b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	f023 030f 	bic.w	r3, r3, #15
 80085c0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80085c8:	7b7b      	ldrb	r3, [r7, #13]
 80085ca:	f043 030c 	orr.w	r3, r3, #12
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80085d2:	7b7b      	ldrb	r3, [r7, #13]
 80085d4:	f043 0308 	orr.w	r3, r3, #8
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80085dc:	7b3b      	ldrb	r3, [r7, #12]
 80085de:	f043 030c 	orr.w	r3, r3, #12
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80085e6:	7b3b      	ldrb	r3, [r7, #12]
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80085f0:	bf00      	nop
 80085f2:	4825      	ldr	r0, [pc, #148]	@ (8008688 <lcd_send_cmd+0xd8>)
 80085f4:	f002 fac7 	bl	800ab86 <HAL_I2C_GetError>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d0f9      	beq.n	80085f2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80085fe:	bf00      	nop
 8008600:	4821      	ldr	r0, [pc, #132]	@ (8008688 <lcd_send_cmd+0xd8>)
 8008602:	f002 fab3 	bl	800ab6c <HAL_I2C_GetState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b20      	cmp	r3, #32
 800860a:	d1f9      	bne.n	8008600 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800860c:	4b1f      	ldr	r3, [pc, #124]	@ (800868c <lcd_send_cmd+0xdc>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d116      	bne.n	8008642 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
 8008618:	e00f      	b.n	800863a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	3310      	adds	r3, #16
 800861e:	443b      	add	r3, r7
 8008620:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	f022 0208 	bic.w	r2, r2, #8
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	3310      	adds	r3, #16
 800862e:	443b      	add	r3, r7
 8008630:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	3301      	adds	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d9ec      	bls.n	800861a <lcd_send_cmd+0x6a>
 8008640:	e015      	b.n	800866e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008642:	2300      	movs	r3, #0
 8008644:	73bb      	strb	r3, [r7, #14]
 8008646:	e00f      	b.n	8008668 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	3310      	adds	r3, #16
 800864c:	443b      	add	r3, r7
 800864e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	f042 0208 	orr.w	r2, r2, #8
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	3310      	adds	r3, #16
 800865c:	443b      	add	r3, r7
 800865e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	3301      	adds	r3, #1
 8008666:	73bb      	strb	r3, [r7, #14]
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b03      	cmp	r3, #3
 800866c:	d9ec      	bls.n	8008648 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800866e:	f107 0208 	add.w	r2, r7, #8
 8008672:	2364      	movs	r3, #100	@ 0x64
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2304      	movs	r3, #4
 8008678:	214e      	movs	r1, #78	@ 0x4e
 800867a:	4803      	ldr	r0, [pc, #12]	@ (8008688 <lcd_send_cmd+0xd8>)
 800867c:	f001 fe16 	bl	800a2ac <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20001944 	.word	0x20001944
 800868c:	20001919 	.word	0x20001919

08008690 <lcd_send_data>:

void lcd_send_data (char data) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af02      	add	r7, sp, #8
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	f023 030f 	bic.w	r3, r3, #15
 80086a0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80086a8:	7b7b      	ldrb	r3, [r7, #13]
 80086aa:	f043 030d 	orr.w	r3, r3, #13
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80086b2:	7b7b      	ldrb	r3, [r7, #13]
 80086b4:	f043 0309 	orr.w	r3, r3, #9
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80086bc:	7b3b      	ldrb	r3, [r7, #12]
 80086be:	f043 030d 	orr.w	r3, r3, #13
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80086c6:	7b3b      	ldrb	r3, [r7, #12]
 80086c8:	f043 0309 	orr.w	r3, r3, #9
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086d0:	bf00      	nop
 80086d2:	4825      	ldr	r0, [pc, #148]	@ (8008768 <lcd_send_data+0xd8>)
 80086d4:	f002 fa57 	bl	800ab86 <HAL_I2C_GetError>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d0f9      	beq.n	80086d2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086de:	bf00      	nop
 80086e0:	4821      	ldr	r0, [pc, #132]	@ (8008768 <lcd_send_data+0xd8>)
 80086e2:	f002 fa43 	bl	800ab6c <HAL_I2C_GetState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d1f9      	bne.n	80086e0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80086ec:	4b1f      	ldr	r3, [pc, #124]	@ (800876c <lcd_send_data+0xdc>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d116      	bne.n	8008722 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
 80086f8:	e00f      	b.n	800871a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	3310      	adds	r3, #16
 80086fe:	443b      	add	r3, r7
 8008700:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	f022 0208 	bic.w	r2, r2, #8
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	3310      	adds	r3, #16
 800870e:	443b      	add	r3, r7
 8008710:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	3301      	adds	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d9ec      	bls.n	80086fa <lcd_send_data+0x6a>
 8008720:	e015      	b.n	800874e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008722:	2300      	movs	r3, #0
 8008724:	73bb      	strb	r3, [r7, #14]
 8008726:	e00f      	b.n	8008748 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	3310      	adds	r3, #16
 800872c:	443b      	add	r3, r7
 800872e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f042 0208 	orr.w	r2, r2, #8
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	3310      	adds	r3, #16
 800873c:	443b      	add	r3, r7
 800873e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	3301      	adds	r3, #1
 8008746:	73bb      	strb	r3, [r7, #14]
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b03      	cmp	r3, #3
 800874c:	d9ec      	bls.n	8008728 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800874e:	f107 0208 	add.w	r2, r7, #8
 8008752:	2364      	movs	r3, #100	@ 0x64
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	2304      	movs	r3, #4
 8008758:	214e      	movs	r1, #78	@ 0x4e
 800875a:	4803      	ldr	r0, [pc, #12]	@ (8008768 <lcd_send_data+0xd8>)
 800875c:	f001 fda6 	bl	800a2ac <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20001944 	.word	0x20001944
 800876c:	20001919 	.word	0x20001919

08008770 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008778:	e006      	b.n	8008788 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff ff84 	bl	8008690 <lcd_send_data>
	while (*str) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f4      	bne.n	800877a <lcd_send_string+0xa>
	}
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <lcd_send_char>:

void lcd_send_char(char ch) {
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	f023 030f 	bic.w	r3, r3, #15
 80087ac:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80087b4:	7b7b      	ldrb	r3, [r7, #13]
 80087b6:	f043 030d 	orr.w	r3, r3, #13
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80087be:	7b7b      	ldrb	r3, [r7, #13]
 80087c0:	f043 0309 	orr.w	r3, r3, #9
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80087c8:	7b3b      	ldrb	r3, [r7, #12]
 80087ca:	f043 030d 	orr.w	r3, r3, #13
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80087d2:	7b3b      	ldrb	r3, [r7, #12]
 80087d4:	f043 0309 	orr.w	r3, r3, #9
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087dc:	bf00      	nop
 80087de:	4825      	ldr	r0, [pc, #148]	@ (8008874 <lcd_send_char+0xd8>)
 80087e0:	f002 f9d1 	bl	800ab86 <HAL_I2C_GetError>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d0f9      	beq.n	80087de <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087ea:	bf00      	nop
 80087ec:	4821      	ldr	r0, [pc, #132]	@ (8008874 <lcd_send_char+0xd8>)
 80087ee:	f002 f9bd 	bl	800ab6c <HAL_I2C_GetState>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d1f9      	bne.n	80087ec <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80087f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008878 <lcd_send_char+0xdc>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d116      	bne.n	800882e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	e00f      	b.n	8008826 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	3310      	adds	r3, #16
 800880a:	443b      	add	r3, r7
 800880c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	f022 0208 	bic.w	r2, r2, #8
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	3310      	adds	r3, #16
 800881a:	443b      	add	r3, r7
 800881c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	3301      	adds	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d9ec      	bls.n	8008806 <lcd_send_char+0x6a>
 800882c:	e015      	b.n	800885a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800882e:	2300      	movs	r3, #0
 8008830:	73bb      	strb	r3, [r7, #14]
 8008832:	e00f      	b.n	8008854 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	3310      	adds	r3, #16
 8008838:	443b      	add	r3, r7
 800883a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	f042 0208 	orr.w	r2, r2, #8
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	3310      	adds	r3, #16
 8008848:	443b      	add	r3, r7
 800884a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	3301      	adds	r3, #1
 8008852:	73bb      	strb	r3, [r7, #14]
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d9ec      	bls.n	8008834 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800885a:	f107 0208 	add.w	r2, r7, #8
 800885e:	2364      	movs	r3, #100	@ 0x64
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2304      	movs	r3, #4
 8008864:	214e      	movs	r1, #78	@ 0x4e
 8008866:	4803      	ldr	r0, [pc, #12]	@ (8008874 <lcd_send_char+0xd8>)
 8008868:	f001 fd20 	bl	800a2ac <HAL_I2C_Master_Transmit>
}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20001944 	.word	0x20001944
 8008878:	20001919 	.word	0x20001919

0800887c <lcd_init>:

void lcd_init (void) {
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008880:	2002      	movs	r0, #2
 8008882:	f7ff fe95 	bl	80085b0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008886:	2028      	movs	r0, #40	@ 0x28
 8008888:	f7ff fe92 	bl	80085b0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800888c:	200c      	movs	r0, #12
 800888e:	f7ff fe8f 	bl	80085b0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008892:	2080      	movs	r0, #128	@ 0x80
 8008894:	f7ff fe8c 	bl	80085b0 <lcd_send_cmd>
	lcd_backlight(1);
 8008898:	2001      	movs	r0, #1
 800889a:	f000 f86d 	bl	8008978 <lcd_backlight>
}
 800889e:	bf00      	nop
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	4603      	mov	r3, r0
 80088aa:	460a      	mov	r2, r1
 80088ac:	71fb      	strb	r3, [r7, #7]
 80088ae:	4613      	mov	r3, r2
 80088b0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d106      	bne.n	80088c6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80088b8:	79bb      	ldrb	r3, [r7, #6]
 80088ba:	337f      	adds	r3, #127	@ 0x7f
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fe76 	bl	80085b0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80088c4:	e008      	b.n	80088d8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d105      	bne.n	80088d8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80088cc:	79bb      	ldrb	r3, [r7, #6]
 80088ce:	3b41      	subs	r3, #65	@ 0x41
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fe6c 	bl	80085b0 <lcd_send_cmd>
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	603a      	str	r2, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
 80088ec:	460b      	mov	r3, r1
 80088ee:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80088f0:	79ba      	ldrb	r2, [r7, #6]
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff ffd3 	bl	80088a2 <lcd_gotoxy>
	lcd_send_string(str);
 80088fc:	6838      	ldr	r0, [r7, #0]
 80088fe:	f7ff ff37 	bl	8008770 <lcd_send_string>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	4603      	mov	r3, r0
 8008912:	71fb      	strb	r3, [r7, #7]
 8008914:	460b      	mov	r3, r1
 8008916:	71bb      	strb	r3, [r7, #6]
 8008918:	4613      	mov	r3, r2
 800891a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800891c:	79ba      	ldrb	r2, [r7, #6]
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff ffbd 	bl	80088a2 <lcd_gotoxy>
    lcd_send_char(ch);
 8008928:	797b      	ldrb	r3, [r7, #5]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff ff36 	bl	800879c <lcd_send_char>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <lcd_clear>:

void lcd_clear(void) {
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800893c:	2001      	movs	r0, #1
 800893e:	f7ff fe37 	bl	80085b0 <lcd_send_cmd>
    HAL_Delay(2);
 8008942:	2002      	movs	r0, #2
 8008944:	f000 fd26 	bl	8009394 <HAL_Delay>
}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}

0800894c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	460a      	mov	r2, r1
 8008956:	71fb      	strb	r3, [r7, #7]
 8008958:	4613      	mov	r3, r2
 800895a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800895c:	79ba      	ldrb	r2, [r7, #6]
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff ff9d 	bl	80088a2 <lcd_gotoxy>

    lcd_send_char(' ');
 8008968:	2020      	movs	r0, #32
 800896a:	f7ff ff17 	bl	800879c <lcd_send_char>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008982:	4a05      	ldr	r2, [pc, #20]	@ (8008998 <lcd_backlight+0x20>)
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008988:	2000      	movs	r0, #0
 800898a:	f7ff fe11 	bl	80085b0 <lcd_send_cmd>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20001919 	.word	0x20001919

0800899c <lcd_cursor>:

void lcd_cursor(int state) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d106      	bne.n	80089b8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80089aa:	200e      	movs	r0, #14
 80089ac:	f7ff fe00 	bl	80085b0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80089b0:	200f      	movs	r0, #15
 80089b2:	f7ff fdfd 	bl	80085b0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80089b6:	e002      	b.n	80089be <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80089b8:	200c      	movs	r0, #12
 80089ba:	f7ff fdf9 	bl	80085b0 <lcd_send_cmd>
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80089d0:	4b04      	ldr	r3, [pc, #16]	@ (80089e4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a03      	ldr	r2, [pc, #12]	@ (80089e4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80089d8:	6013      	str	r3, [r2, #0]
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr
 80089e4:	200010a0 	.word	0x200010a0

080089e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089ec:	f000 fc70 	bl	80092d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80089f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089f4:	f000 fcce 	bl	8009394 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089f8:	f000 f89c 	bl	8008b34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089fc:	f000 f9be 	bl	8008d7c <MX_GPIO_Init>
  MX_CAN_Init();
 8008a00:	f000 f8de 	bl	8008bc0 <MX_CAN_Init>
  MX_I2C1_Init();
 8008a04:	f000 f910 	bl	8008c28 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008a08:	f000 f93c 	bl	8008c84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008a0c:	f000 f98c 	bl	8008d28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008a10:	2201      	movs	r2, #1
 8008a12:	2140      	movs	r1, #64	@ 0x40
 8008a14:	483e      	ldr	r0, [pc, #248]	@ (8008b10 <main+0x128>)
 8008a16:	f001 faa4 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2180      	movs	r1, #128	@ 0x80
 8008a1e:	483c      	ldr	r0, [pc, #240]	@ (8008b10 <main+0x128>)
 8008a20:	f001 fa9f 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008a24:	200a      	movs	r0, #10
 8008a26:	f000 fcb5 	bl	8009394 <HAL_Delay>
  lcd_init();
 8008a2a:	f7ff ff27 	bl	800887c <lcd_init>
  HAL_Delay(10);
 8008a2e:	200a      	movs	r0, #10
 8008a30:	f000 fcb0 	bl	8009394 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008a34:	4837      	ldr	r0, [pc, #220]	@ (8008b14 <main+0x12c>)
 8008a36:	f003 f947 	bl	800bcc8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a3a:	bf00      	nop
 8008a3c:	4836      	ldr	r0, [pc, #216]	@ (8008b18 <main+0x130>)
 8008a3e:	f002 f8a2 	bl	800ab86 <HAL_I2C_GetError>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d0f9      	beq.n	8008a3c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008a48:	bf00      	nop
 8008a4a:	4833      	ldr	r0, [pc, #204]	@ (8008b18 <main+0x130>)
 8008a4c:	f002 f88e 	bl	800ab6c <HAL_I2C_GetState>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d1f9      	bne.n	8008a4a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008a56:	2200      	movs	r2, #0
 8008a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a5c:	482c      	ldr	r0, [pc, #176]	@ (8008b10 <main+0x128>)
 8008a5e:	f001 fa80 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008a62:	2200      	movs	r2, #0
 8008a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a68:	4829      	ldr	r0, [pc, #164]	@ (8008b10 <main+0x128>)
 8008a6a:	f001 fa7a 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2104      	movs	r1, #4
 8008a72:	4827      	ldr	r0, [pc, #156]	@ (8008b10 <main+0x128>)
 8008a74:	f001 fa75 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	4824      	ldr	r0, [pc, #144]	@ (8008b10 <main+0x128>)
 8008a7e:	f001 fa70 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2101      	movs	r1, #1
 8008a86:	4822      	ldr	r0, [pc, #136]	@ (8008b10 <main+0x128>)
 8008a88:	f001 fa6b 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2120      	movs	r1, #32
 8008a90:	4822      	ldr	r0, [pc, #136]	@ (8008b1c <main+0x134>)
 8008a92:	f001 fa66 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008a96:	2200      	movs	r2, #0
 8008a98:	2110      	movs	r1, #16
 8008a9a:	4820      	ldr	r0, [pc, #128]	@ (8008b1c <main+0x134>)
 8008a9c:	f001 fa61 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2180      	movs	r1, #128	@ 0x80
 8008aa4:	481e      	ldr	r0, [pc, #120]	@ (8008b20 <main+0x138>)
 8008aa6:	f001 fa5c 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2140      	movs	r1, #64	@ 0x40
 8008aae:	481c      	ldr	r0, [pc, #112]	@ (8008b20 <main+0x138>)
 8008ab0:	f001 fa57 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	4819      	ldr	r0, [pc, #100]	@ (8008b20 <main+0x138>)
 8008aba:	f001 fa52 	bl	8009f62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2110      	movs	r1, #16
 8008ac2:	4817      	ldr	r0, [pc, #92]	@ (8008b20 <main+0x138>)
 8008ac4:	f001 fa4d 	bl	8009f62 <HAL_GPIO_WritePin>

  i2cTest();
 8008ac8:	f7f8 f860 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 8008acc:	2064      	movs	r0, #100	@ 0x64
 8008ace:	f000 fc61 	bl	8009394 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008ad2:	4a14      	ldr	r2, [pc, #80]	@ (8008b24 <main+0x13c>)
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	f7ff ff02 	bl	80088e0 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008adc:	4a12      	ldr	r2, [pc, #72]	@ (8008b28 <main+0x140>)
 8008ade:	2101      	movs	r1, #1
 8008ae0:	2002      	movs	r0, #2
 8008ae2:	f7ff fefd 	bl	80088e0 <lcd_print>
  HAL_Delay(1000);
 8008ae6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008aea:	f000 fc53 	bl	8009394 <HAL_Delay>
  lcd_clear();
 8008aee:	f7ff ff23 	bl	8008938 <lcd_clear>

  eepromKontrol();
 8008af2:	f7f7 fb9f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008afa:	f000 fc4b 	bl	8009394 <HAL_Delay>

  backLightTimer = millis;
 8008afe:	4b0b      	ldr	r3, [pc, #44]	@ (8008b2c <main+0x144>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a0b      	ldr	r2, [pc, #44]	@ (8008b30 <main+0x148>)
 8008b04:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008b06:	f7ff fd03 	bl	8008510 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008b0a:	f7fd f8b9 	bl	8005c80 <mainLoop>
 8008b0e:	e7fc      	b.n	8008b0a <main+0x122>
 8008b10:	40010c00 	.word	0x40010c00
 8008b14:	20001998 	.word	0x20001998
 8008b18:	20001944 	.word	0x20001944
 8008b1c:	40011000 	.word	0x40011000
 8008b20:	40010800 	.word	0x40010800
 8008b24:	200000a0 	.word	0x200000a0
 8008b28:	200000b4 	.word	0x200000b4
 8008b2c:	200010a0 	.word	0x200010a0
 8008b30:	200010bc 	.word	0x200010bc

08008b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b090      	sub	sp, #64	@ 0x40
 8008b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b3a:	f107 0318 	add.w	r3, r7, #24
 8008b3e:	2228      	movs	r2, #40	@ 0x28
 8008b40:	2100      	movs	r1, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f004 fb5e 	bl	800d204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	605a      	str	r2, [r3, #4]
 8008b50:	609a      	str	r2, [r3, #8]
 8008b52:	60da      	str	r2, [r3, #12]
 8008b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008b60:	2300      	movs	r3, #0
 8008b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b64:	2301      	movs	r3, #1
 8008b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008b72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b78:	f107 0318 	add.w	r3, r7, #24
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f002 fc43 	bl	800b408 <HAL_RCC_OscConfig>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008b88:	f000 f9a2 	bl	8008ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b8c:	230f      	movs	r3, #15
 8008b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b90:	2302      	movs	r3, #2
 8008b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008ba2:	1d3b      	adds	r3, r7, #4
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f002 feb0 	bl	800b90c <HAL_RCC_ClockConfig>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008bb2:	f000 f98d 	bl	8008ed0 <Error_Handler>
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	3740      	adds	r7, #64	@ 0x40
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008bc4:	4b16      	ldr	r3, [pc, #88]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bc6:	4a17      	ldr	r2, [pc, #92]	@ (8008c24 <MX_CAN_Init+0x64>)
 8008bc8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008bca:	4b15      	ldr	r3, [pc, #84]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bcc:	2210      	movs	r2, #16
 8008bce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008bd0:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008bd6:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008bdc:	4b10      	ldr	r3, [pc, #64]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008be2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008be8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008bee:	4b0c      	ldr	r3, [pc, #48]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008bfa:	4b09      	ldr	r3, [pc, #36]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008c00:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008c06:	4b06      	ldr	r3, [pc, #24]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008c0c:	4804      	ldr	r0, [pc, #16]	@ (8008c20 <MX_CAN_Init+0x60>)
 8008c0e:	f000 fbe5 	bl	80093dc <HAL_CAN_Init>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008c18:	f000 f95a 	bl	8008ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008c1c:	bf00      	nop
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	2000191c 	.word	0x2000191c
 8008c24:	40006400 	.word	0x40006400

08008c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008c2c:	4b12      	ldr	r3, [pc, #72]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c2e:	4a13      	ldr	r2, [pc, #76]	@ (8008c7c <MX_I2C1_Init+0x54>)
 8008c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008c32:	4b11      	ldr	r3, [pc, #68]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c34:	4a12      	ldr	r2, [pc, #72]	@ (8008c80 <MX_I2C1_Init+0x58>)
 8008c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008c38:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c44:	4b0c      	ldr	r3, [pc, #48]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008c52:	4b09      	ldr	r3, [pc, #36]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c5e:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008c64:	4804      	ldr	r0, [pc, #16]	@ (8008c78 <MX_I2C1_Init+0x50>)
 8008c66:	f001 f9ad 	bl	8009fc4 <HAL_I2C_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c70:	f000 f92e 	bl	8008ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008c74:	bf00      	nop
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20001944 	.word	0x20001944
 8008c7c:	40005400 	.word	0x40005400
 8008c80:	00061a80 	.word	0x00061a80

08008c84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	605a      	str	r2, [r3, #4]
 8008c94:	609a      	str	r2, [r3, #8]
 8008c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c98:	463b      	mov	r3, r7
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008ca2:	4a20      	ldr	r2, [pc, #128]	@ (8008d24 <MX_TIM1_Init+0xa0>)
 8008ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008ca8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008cac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cae:	4b1c      	ldr	r3, [pc, #112]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cb6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008cba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cbc:	4b18      	ldr	r3, [pc, #96]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008cc2:	4b17      	ldr	r3, [pc, #92]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cc8:	4b15      	ldr	r3, [pc, #84]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008cce:	4814      	ldr	r0, [pc, #80]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cd0:	f002 ffaa 	bl	800bc28 <HAL_TIM_Base_Init>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008cda:	f000 f8f9 	bl	8008ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	4619      	mov	r1, r3
 8008cea:	480d      	ldr	r0, [pc, #52]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008cec:	f003 f954 	bl	800bf98 <HAL_TIM_ConfigClockSource>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008cf6:	f000 f8eb 	bl	8008ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d02:	463b      	mov	r3, r7
 8008d04:	4619      	mov	r1, r3
 8008d06:	4806      	ldr	r0, [pc, #24]	@ (8008d20 <MX_TIM1_Init+0x9c>)
 8008d08:	f003 fb42 	bl	800c390 <HAL_TIMEx_MasterConfigSynchronization>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d12:	f000 f8dd 	bl	8008ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008d16:	bf00      	nop
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001998 	.word	0x20001998
 8008d24:	40012c00 	.word	0x40012c00

08008d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d2e:	4a12      	ldr	r2, [pc, #72]	@ (8008d78 <MX_USART1_UART_Init+0x50>)
 8008d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d40:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d46:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d4c:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d4e:	220c      	movs	r2, #12
 8008d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d52:	4b08      	ldr	r3, [pc, #32]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d5e:	4805      	ldr	r0, [pc, #20]	@ (8008d74 <MX_USART1_UART_Init+0x4c>)
 8008d60:	f003 fb94 	bl	800c48c <HAL_UART_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d6a:	f000 f8b1 	bl	8008ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d6e:	bf00      	nop
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200019e0 	.word	0x200019e0
 8008d78:	40013800 	.word	0x40013800

08008d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d82:	f107 0310 	add.w	r3, r7, #16
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	605a      	str	r2, [r3, #4]
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d90:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	4a4a      	ldr	r2, [pc, #296]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008d96:	f043 0310 	orr.w	r3, r3, #16
 8008d9a:	6193      	str	r3, [r2, #24]
 8008d9c:	4b48      	ldr	r3, [pc, #288]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008da8:	4b45      	ldr	r3, [pc, #276]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	4a44      	ldr	r2, [pc, #272]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dae:	f043 0320 	orr.w	r3, r3, #32
 8008db2:	6193      	str	r3, [r2, #24]
 8008db4:	4b42      	ldr	r3, [pc, #264]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dc6:	f043 0304 	orr.w	r3, r3, #4
 8008dca:	6193      	str	r3, [r2, #24]
 8008dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dd8:	4b39      	ldr	r3, [pc, #228]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	4a38      	ldr	r2, [pc, #224]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008dde:	f043 0308 	orr.w	r3, r3, #8
 8008de2:	6193      	str	r3, [r2, #24]
 8008de4:	4b36      	ldr	r3, [pc, #216]	@ (8008ec0 <MX_GPIO_Init+0x144>)
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	603b      	str	r3, [r7, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008df0:	2200      	movs	r2, #0
 8008df2:	21f0      	movs	r1, #240	@ 0xf0
 8008df4:	4833      	ldr	r0, [pc, #204]	@ (8008ec4 <MX_GPIO_Init+0x148>)
 8008df6:	f001 f8b4 	bl	8009f62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008e00:	4831      	ldr	r0, [pc, #196]	@ (8008ec8 <MX_GPIO_Init+0x14c>)
 8008e02:	f001 f8ae 	bl	8009f62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e06:	2200      	movs	r2, #0
 8008e08:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008e0c:	482f      	ldr	r0, [pc, #188]	@ (8008ecc <MX_GPIO_Init+0x150>)
 8008e0e:	f001 f8a8 	bl	8009f62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008e12:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008e16:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	4619      	mov	r1, r3
 8008e26:	4828      	ldr	r0, [pc, #160]	@ (8008ec8 <MX_GPIO_Init+0x14c>)
 8008e28:	f000 fe24 	bl	8009a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008e2c:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008e30:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e3a:	f107 0310 	add.w	r3, r7, #16
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4820      	ldr	r0, [pc, #128]	@ (8008ec4 <MX_GPIO_Init+0x148>)
 8008e42:	f000 fe17 	bl	8009a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008e46:	23f0      	movs	r3, #240	@ 0xf0
 8008e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e52:	2302      	movs	r3, #2
 8008e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4819      	ldr	r0, [pc, #100]	@ (8008ec4 <MX_GPIO_Init+0x148>)
 8008e5e:	f000 fe09 	bl	8009a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008e62:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e70:	2302      	movs	r3, #2
 8008e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4813      	ldr	r0, [pc, #76]	@ (8008ec8 <MX_GPIO_Init+0x14c>)
 8008e7c:	f000 fdfa 	bl	8009a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e80:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008e84:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e86:	2301      	movs	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e8e:	2302      	movs	r3, #2
 8008e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	4619      	mov	r1, r3
 8008e98:	480c      	ldr	r0, [pc, #48]	@ (8008ecc <MX_GPIO_Init+0x150>)
 8008e9a:	f000 fdeb 	bl	8009a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008e9e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4806      	ldr	r0, [pc, #24]	@ (8008ecc <MX_GPIO_Init+0x150>)
 8008eb4:	f000 fdde 	bl	8009a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008eb8:	bf00      	nop
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40010800 	.word	0x40010800
 8008ec8:	40011000 	.word	0x40011000
 8008ecc:	40010c00 	.word	0x40010c00

08008ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008ed4:	bf00      	nop
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008ee2:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	4a14      	ldr	r2, [pc, #80]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	6193      	str	r3, [r2, #24]
 8008eee:	4b12      	ldr	r3, [pc, #72]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008efa:	4b0f      	ldr	r3, [pc, #60]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	4a0e      	ldr	r2, [pc, #56]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f04:	61d3      	str	r3, [r2, #28]
 8008f06:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <HAL_MspInit+0x5c>)
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008f12:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <HAL_MspInit+0x60>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	4a04      	ldr	r2, [pc, #16]	@ (8008f3c <HAL_MspInit+0x60>)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	40010000 	.word	0x40010000

08008f40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f48:	f107 0310 	add.w	r3, r7, #16
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	609a      	str	r2, [r3, #8]
 8008f54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fcc <HAL_CAN_MspInit+0x8c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d131      	bne.n	8008fc4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008f60:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f6a:	61d3      	str	r3, [r2, #28]
 8008f6c:	4b18      	ldr	r3, [pc, #96]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f78:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	4a14      	ldr	r2, [pc, #80]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f7e:	f043 0304 	orr.w	r3, r3, #4
 8008f82:	6193      	str	r3, [r2, #24]
 8008f84:	4b12      	ldr	r3, [pc, #72]	@ (8008fd0 <HAL_CAN_MspInit+0x90>)
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f9e:	f107 0310 	add.w	r3, r7, #16
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	480b      	ldr	r0, [pc, #44]	@ (8008fd4 <HAL_CAN_MspInit+0x94>)
 8008fa6:	f000 fd65 	bl	8009a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fb8:	f107 0310 	add.w	r3, r7, #16
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4805      	ldr	r0, [pc, #20]	@ (8008fd4 <HAL_CAN_MspInit+0x94>)
 8008fc0:	f000 fd58 	bl	8009a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008fc4:	bf00      	nop
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40006400 	.word	0x40006400
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	40010800 	.word	0x40010800

08008fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fe0:	f107 0310 	add.w	r3, r7, #16
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	605a      	str	r2, [r3, #4]
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	@ (8009048 <HAL_I2C_MspInit+0x70>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d123      	bne.n	8009040 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ff8:	4b14      	ldr	r3, [pc, #80]	@ (800904c <HAL_I2C_MspInit+0x74>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	4a13      	ldr	r2, [pc, #76]	@ (800904c <HAL_I2C_MspInit+0x74>)
 8008ffe:	f043 0308 	orr.w	r3, r3, #8
 8009002:	6193      	str	r3, [r2, #24]
 8009004:	4b11      	ldr	r3, [pc, #68]	@ (800904c <HAL_I2C_MspInit+0x74>)
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009010:	23c0      	movs	r3, #192	@ 0xc0
 8009012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009014:	2312      	movs	r3, #18
 8009016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009018:	2303      	movs	r3, #3
 800901a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800901c:	f107 0310 	add.w	r3, r7, #16
 8009020:	4619      	mov	r1, r3
 8009022:	480b      	ldr	r0, [pc, #44]	@ (8009050 <HAL_I2C_MspInit+0x78>)
 8009024:	f000 fd26 	bl	8009a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009028:	4b08      	ldr	r3, [pc, #32]	@ (800904c <HAL_I2C_MspInit+0x74>)
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	4a07      	ldr	r2, [pc, #28]	@ (800904c <HAL_I2C_MspInit+0x74>)
 800902e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009032:	61d3      	str	r3, [r2, #28]
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <HAL_I2C_MspInit+0x74>)
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009040:	bf00      	nop
 8009042:	3720      	adds	r7, #32
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	40005400 	.word	0x40005400
 800904c:	40021000 	.word	0x40021000
 8009050:	40010c00 	.word	0x40010c00

08009054 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a0a      	ldr	r2, [pc, #40]	@ (800908c <HAL_I2C_MspDeInit+0x38>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d10d      	bne.n	8009082 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009066:	4b0a      	ldr	r3, [pc, #40]	@ (8009090 <HAL_I2C_MspDeInit+0x3c>)
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	4a09      	ldr	r2, [pc, #36]	@ (8009090 <HAL_I2C_MspDeInit+0x3c>)
 800906c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009070:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009072:	2140      	movs	r1, #64	@ 0x40
 8009074:	4807      	ldr	r0, [pc, #28]	@ (8009094 <HAL_I2C_MspDeInit+0x40>)
 8009076:	f000 fe91 	bl	8009d9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800907a:	2180      	movs	r1, #128	@ 0x80
 800907c:	4805      	ldr	r0, [pc, #20]	@ (8009094 <HAL_I2C_MspDeInit+0x40>)
 800907e:	f000 fe8d 	bl	8009d9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40005400 	.word	0x40005400
 8009090:	40021000 	.word	0x40021000
 8009094:	40010c00 	.word	0x40010c00

08009098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a0d      	ldr	r2, [pc, #52]	@ (80090dc <HAL_TIM_Base_MspInit+0x44>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d113      	bne.n	80090d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80090aa:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <HAL_TIM_Base_MspInit+0x48>)
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	4a0c      	ldr	r2, [pc, #48]	@ (80090e0 <HAL_TIM_Base_MspInit+0x48>)
 80090b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80090b4:	6193      	str	r3, [r2, #24]
 80090b6:	4b0a      	ldr	r3, [pc, #40]	@ (80090e0 <HAL_TIM_Base_MspInit+0x48>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	2019      	movs	r0, #25
 80090c8:	f000 fb5b 	bl	8009782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80090cc:	2019      	movs	r0, #25
 80090ce:	f000 fb74 	bl	80097ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40021000 	.word	0x40021000

080090e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090ec:	f107 0310 	add.w	r3, r7, #16
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	605a      	str	r2, [r3, #4]
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a20      	ldr	r2, [pc, #128]	@ (8009180 <HAL_UART_MspInit+0x9c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d139      	bne.n	8009178 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009104:	4b1f      	ldr	r3, [pc, #124]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	4a1e      	ldr	r2, [pc, #120]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 800910a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800910e:	6193      	str	r3, [r2, #24]
 8009110:	4b1c      	ldr	r3, [pc, #112]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800911c:	4b19      	ldr	r3, [pc, #100]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	4a18      	ldr	r2, [pc, #96]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 8009122:	f043 0304 	orr.w	r3, r3, #4
 8009126:	6193      	str	r3, [r2, #24]
 8009128:	4b16      	ldr	r3, [pc, #88]	@ (8009184 <HAL_UART_MspInit+0xa0>)
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913a:	2302      	movs	r3, #2
 800913c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800913e:	2303      	movs	r3, #3
 8009140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009142:	f107 0310 	add.w	r3, r7, #16
 8009146:	4619      	mov	r1, r3
 8009148:	480f      	ldr	r0, [pc, #60]	@ (8009188 <HAL_UART_MspInit+0xa4>)
 800914a:	f000 fc93 	bl	8009a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800914e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	4619      	mov	r1, r3
 8009162:	4809      	ldr	r0, [pc, #36]	@ (8009188 <HAL_UART_MspInit+0xa4>)
 8009164:	f000 fc86 	bl	8009a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	2100      	movs	r1, #0
 800916c:	2025      	movs	r0, #37	@ 0x25
 800916e:	f000 fb08 	bl	8009782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009172:	2025      	movs	r0, #37	@ 0x25
 8009174:	f000 fb21 	bl	80097ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009178:	bf00      	nop
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40013800 	.word	0x40013800
 8009184:	40021000 	.word	0x40021000
 8009188:	40010800 	.word	0x40010800

0800918c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <NMI_Handler+0x4>

08009194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009194:	b480      	push	{r7}
 8009196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <HardFault_Handler+0x4>

0800919c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091a0:	bf00      	nop
 80091a2:	e7fd      	b.n	80091a0 <MemManage_Handler+0x4>

080091a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <BusFault_Handler+0x4>

080091ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <UsageFault_Handler+0x4>

080091b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091b8:	bf00      	nop
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr

080091c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr

080091cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091dc:	f000 f8be 	bl	800935c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091e0:	bf00      	nop
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80091e8:	4802      	ldr	r0, [pc, #8]	@ (80091f4 <TIM1_UP_IRQHandler+0x10>)
 80091ea:	f002 fdcd 	bl	800bd88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20001998 	.word	0x20001998

080091f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80091fc:	4802      	ldr	r0, [pc, #8]	@ (8009208 <USART1_IRQHandler+0x10>)
 80091fe:	f003 f9cb 	bl	800c598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200019e0 	.word	0x200019e0

0800920c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <_sbrk+0x5c>)
 8009216:	4b15      	ldr	r3, [pc, #84]	@ (800926c <_sbrk+0x60>)
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009220:	4b13      	ldr	r3, [pc, #76]	@ (8009270 <_sbrk+0x64>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009228:	4b11      	ldr	r3, [pc, #68]	@ (8009270 <_sbrk+0x64>)
 800922a:	4a12      	ldr	r2, [pc, #72]	@ (8009274 <_sbrk+0x68>)
 800922c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800922e:	4b10      	ldr	r3, [pc, #64]	@ (8009270 <_sbrk+0x64>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	429a      	cmp	r2, r3
 800923a:	d207      	bcs.n	800924c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800923c:	f003 fffa 	bl	800d234 <__errno>
 8009240:	4603      	mov	r3, r0
 8009242:	220c      	movs	r2, #12
 8009244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800924a:	e009      	b.n	8009260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800924c:	4b08      	ldr	r3, [pc, #32]	@ (8009270 <_sbrk+0x64>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009252:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <_sbrk+0x64>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	4a05      	ldr	r2, [pc, #20]	@ (8009270 <_sbrk+0x64>)
 800925c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800925e:	68fb      	ldr	r3, [r7, #12]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	2000c000 	.word	0x2000c000
 800926c:	00000400 	.word	0x00000400
 8009270:	20001a28 	.word	0x20001a28
 8009274:	20001b78 	.word	0x20001b78

08009278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800927c:	bf00      	nop
 800927e:	46bd      	mov	sp, r7
 8009280:	bc80      	pop	{r7}
 8009282:	4770      	bx	lr

08009284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009284:	480c      	ldr	r0, [pc, #48]	@ (80092b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009286:	490d      	ldr	r1, [pc, #52]	@ (80092bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009288:	4a0d      	ldr	r2, [pc, #52]	@ (80092c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800928a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800928c:	e002      	b.n	8009294 <LoopCopyDataInit>

0800928e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800928e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009292:	3304      	adds	r3, #4

08009294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009298:	d3f9      	bcc.n	800928e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800929a:	4a0a      	ldr	r2, [pc, #40]	@ (80092c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800929c:	4c0a      	ldr	r4, [pc, #40]	@ (80092c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800929e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092a0:	e001      	b.n	80092a6 <LoopFillZerobss>

080092a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092a4:	3204      	adds	r2, #4

080092a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092a8:	d3fb      	bcc.n	80092a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80092aa:	f7ff ffe5 	bl	8009278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092ae:	f003 ffc7 	bl	800d240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80092b2:	f7ff fb99 	bl	80089e8 <main>
  bx lr
 80092b6:	4770      	bx	lr
  ldr r0, =_sdata
 80092b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092bc:	20000fd4 	.word	0x20000fd4
  ldr r2, =_sidata
 80092c0:	0800dd2c 	.word	0x0800dd2c
  ldr r2, =_sbss
 80092c4:	20000fd4 	.word	0x20000fd4
  ldr r4, =_ebss
 80092c8:	20001b78 	.word	0x20001b78

080092cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80092cc:	e7fe      	b.n	80092cc <ADC1_2_IRQHandler>
	...

080092d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092d4:	4b08      	ldr	r3, [pc, #32]	@ (80092f8 <HAL_Init+0x28>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a07      	ldr	r2, [pc, #28]	@ (80092f8 <HAL_Init+0x28>)
 80092da:	f043 0310 	orr.w	r3, r3, #16
 80092de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092e0:	2003      	movs	r0, #3
 80092e2:	f000 fa43 	bl	800976c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092e6:	200f      	movs	r0, #15
 80092e8:	f000 f808 	bl	80092fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092ec:	f7ff fdf6 	bl	8008edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40022000 	.word	0x40022000

080092fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009304:	4b12      	ldr	r3, [pc, #72]	@ (8009350 <HAL_InitTick+0x54>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <HAL_InitTick+0x58>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009312:	fbb3 f3f1 	udiv	r3, r3, r1
 8009316:	fbb2 f3f3 	udiv	r3, r2, r3
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fa5b 	bl	80097d6 <HAL_SYSTICK_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e00e      	b.n	8009348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b0f      	cmp	r3, #15
 800932e:	d80a      	bhi.n	8009346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009330:	2200      	movs	r2, #0
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009338:	f000 fa23 	bl	8009782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800933c:	4a06      	ldr	r2, [pc, #24]	@ (8009358 <HAL_InitTick+0x5c>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000f78 	.word	0x20000f78
 8009354:	20000f80 	.word	0x20000f80
 8009358:	20000f7c 	.word	0x20000f7c

0800935c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009360:	4b05      	ldr	r3, [pc, #20]	@ (8009378 <HAL_IncTick+0x1c>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	4b05      	ldr	r3, [pc, #20]	@ (800937c <HAL_IncTick+0x20>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4413      	add	r3, r2
 800936c:	4a03      	ldr	r2, [pc, #12]	@ (800937c <HAL_IncTick+0x20>)
 800936e:	6013      	str	r3, [r2, #0]
}
 8009370:	bf00      	nop
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr
 8009378:	20000f80 	.word	0x20000f80
 800937c:	20001a2c 	.word	0x20001a2c

08009380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  return uwTick;
 8009384:	4b02      	ldr	r3, [pc, #8]	@ (8009390 <HAL_GetTick+0x10>)
 8009386:	681b      	ldr	r3, [r3, #0]
}
 8009388:	4618      	mov	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr
 8009390:	20001a2c 	.word	0x20001a2c

08009394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800939c:	f7ff fff0 	bl	8009380 <HAL_GetTick>
 80093a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093ac:	d005      	beq.n	80093ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093ae:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <HAL_Delay+0x44>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4413      	add	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80093ba:	bf00      	nop
 80093bc:	f7ff ffe0 	bl	8009380 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d8f7      	bhi.n	80093bc <HAL_Delay+0x28>
  {
  }
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000f80 	.word	0x20000f80

080093dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0ed      	b.n	80095ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff fda0 	bl	8008f40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0201 	orr.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009410:	f7ff ffb6 	bl	8009380 <HAL_GetTick>
 8009414:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009416:	e012      	b.n	800943e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009418:	f7ff ffb2 	bl	8009380 <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2b0a      	cmp	r3, #10
 8009424:	d90b      	bls.n	800943e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2205      	movs	r2, #5
 8009436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e0c5      	b.n	80095ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0e5      	beq.n	8009418 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0202 	bic.w	r2, r2, #2
 800945a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800945c:	f7ff ff90 	bl	8009380 <HAL_GetTick>
 8009460:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009462:	e012      	b.n	800948a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009464:	f7ff ff8c 	bl	8009380 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b0a      	cmp	r3, #10
 8009470:	d90b      	bls.n	800948a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009476:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2205      	movs	r2, #5
 8009482:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e09f      	b.n	80095ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e5      	bne.n	8009464 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	7e1b      	ldrb	r3, [r3, #24]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d108      	bne.n	80094b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e007      	b.n	80094c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7e5b      	ldrb	r3, [r3, #25]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d108      	bne.n	80094dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	e007      	b.n	80094ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7e9b      	ldrb	r3, [r3, #26]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d108      	bne.n	8009506 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0220 	orr.w	r2, r2, #32
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e007      	b.n	8009516 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0220 	bic.w	r2, r2, #32
 8009514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7edb      	ldrb	r3, [r3, #27]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d108      	bne.n	8009530 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0210 	bic.w	r2, r2, #16
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e007      	b.n	8009540 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0210 	orr.w	r2, r2, #16
 800953e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	7f1b      	ldrb	r3, [r3, #28]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d108      	bne.n	800955a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0208 	orr.w	r2, r2, #8
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	e007      	b.n	800956a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0208 	bic.w	r2, r2, #8
 8009568:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7f5b      	ldrb	r3, [r3, #29]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d108      	bne.n	8009584 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0204 	orr.w	r2, r2, #4
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	e007      	b.n	8009594 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0204 	bic.w	r2, r2, #4
 8009592:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	ea42 0103 	orr.w	r1, r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <__NVIC_SetPriorityGrouping>:
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <__NVIC_SetPriorityGrouping+0x44>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80095f0:	4013      	ands	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80095fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009606:	4a04      	ldr	r2, [pc, #16]	@ (8009618 <__NVIC_SetPriorityGrouping+0x44>)
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	60d3      	str	r3, [r2, #12]
}
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <__NVIC_GetPriorityGrouping>:
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009620:	4b04      	ldr	r3, [pc, #16]	@ (8009634 <__NVIC_GetPriorityGrouping+0x18>)
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	0a1b      	lsrs	r3, r3, #8
 8009626:	f003 0307 	and.w	r3, r3, #7
}
 800962a:	4618      	mov	r0, r3
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	e000ed00 	.word	0xe000ed00

08009638 <__NVIC_EnableIRQ>:
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	db0b      	blt.n	8009662 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	f003 021f 	and.w	r2, r3, #31
 8009650:	4906      	ldr	r1, [pc, #24]	@ (800966c <__NVIC_EnableIRQ+0x34>)
 8009652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2001      	movs	r0, #1
 800965a:	fa00 f202 	lsl.w	r2, r0, r2
 800965e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr
 800966c:	e000e100 	.word	0xe000e100

08009670 <__NVIC_SetPriority>:
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800967c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009680:	2b00      	cmp	r3, #0
 8009682:	db0a      	blt.n	800969a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	b2da      	uxtb	r2, r3
 8009688:	490c      	ldr	r1, [pc, #48]	@ (80096bc <__NVIC_SetPriority+0x4c>)
 800968a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968e:	0112      	lsls	r2, r2, #4
 8009690:	b2d2      	uxtb	r2, r2
 8009692:	440b      	add	r3, r1
 8009694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009698:	e00a      	b.n	80096b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	b2da      	uxtb	r2, r3
 800969e:	4908      	ldr	r1, [pc, #32]	@ (80096c0 <__NVIC_SetPriority+0x50>)
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	3b04      	subs	r3, #4
 80096a8:	0112      	lsls	r2, r2, #4
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	440b      	add	r3, r1
 80096ae:	761a      	strb	r2, [r3, #24]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	e000e100 	.word	0xe000e100
 80096c0:	e000ed00 	.word	0xe000ed00

080096c4 <NVIC_EncodePriority>:
{
 80096c4:	b480      	push	{r7}
 80096c6:	b089      	sub	sp, #36	@ 0x24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f1c3 0307 	rsb	r3, r3, #7
 80096de:	2b04      	cmp	r3, #4
 80096e0:	bf28      	it	cs
 80096e2:	2304      	movcs	r3, #4
 80096e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3304      	adds	r3, #4
 80096ea:	2b06      	cmp	r3, #6
 80096ec:	d902      	bls.n	80096f4 <NVIC_EncodePriority+0x30>
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3b03      	subs	r3, #3
 80096f2:	e000      	b.n	80096f6 <NVIC_EncodePriority+0x32>
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009702:	43da      	mvns	r2, r3
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	401a      	ands	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800970c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	fa01 f303 	lsl.w	r3, r1, r3
 8009716:	43d9      	mvns	r1, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800971c:	4313      	orrs	r3, r2
}
 800971e:	4618      	mov	r0, r3
 8009720:	3724      	adds	r7, #36	@ 0x24
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr

08009728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3b01      	subs	r3, #1
 8009734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009738:	d301      	bcc.n	800973e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800973a:	2301      	movs	r3, #1
 800973c:	e00f      	b.n	800975e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800973e:	4a0a      	ldr	r2, [pc, #40]	@ (8009768 <SysTick_Config+0x40>)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3b01      	subs	r3, #1
 8009744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009746:	210f      	movs	r1, #15
 8009748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800974c:	f7ff ff90 	bl	8009670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009750:	4b05      	ldr	r3, [pc, #20]	@ (8009768 <SysTick_Config+0x40>)
 8009752:	2200      	movs	r2, #0
 8009754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009756:	4b04      	ldr	r3, [pc, #16]	@ (8009768 <SysTick_Config+0x40>)
 8009758:	2207      	movs	r2, #7
 800975a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000e010 	.word	0xe000e010

0800976c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff ff2d 	bl	80095d4 <__NVIC_SetPriorityGrouping>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009782:	b580      	push	{r7, lr}
 8009784:	b086      	sub	sp, #24
 8009786:	af00      	add	r7, sp, #0
 8009788:	4603      	mov	r3, r0
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009794:	f7ff ff42 	bl	800961c <__NVIC_GetPriorityGrouping>
 8009798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	68b9      	ldr	r1, [r7, #8]
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7ff ff90 	bl	80096c4 <NVIC_EncodePriority>
 80097a4:	4602      	mov	r2, r0
 80097a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff ff5f 	bl	8009670 <__NVIC_SetPriority>
}
 80097b2:	bf00      	nop
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	4603      	mov	r3, r0
 80097c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff ff35 	bl	8009638 <__NVIC_EnableIRQ>
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7ff ffa2 	bl	8009728 <SysTick_Config>
 80097e4:	4603      	mov	r3, r0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d008      	beq.n	8009818 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2204      	movs	r2, #4
 800980a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e020      	b.n	800985a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 020e 	bic.w	r2, r2, #14
 8009826:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	2101      	movs	r1, #1
 8009842:	fa01 f202 	lsl.w	r2, r1, r2
 8009846:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d005      	beq.n	8009888 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2204      	movs	r2, #4
 8009880:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	73fb      	strb	r3, [r7, #15]
 8009886:	e0d6      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 020e 	bic.w	r2, r2, #14
 8009896:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0201 	bic.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	4b64      	ldr	r3, [pc, #400]	@ (8009a40 <HAL_DMA_Abort_IT+0x1dc>)
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d958      	bls.n	8009966 <HAL_DMA_Abort_IT+0x102>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a62      	ldr	r2, [pc, #392]	@ (8009a44 <HAL_DMA_Abort_IT+0x1e0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d04f      	beq.n	800995e <HAL_DMA_Abort_IT+0xfa>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a61      	ldr	r2, [pc, #388]	@ (8009a48 <HAL_DMA_Abort_IT+0x1e4>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d048      	beq.n	800995a <HAL_DMA_Abort_IT+0xf6>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a5f      	ldr	r2, [pc, #380]	@ (8009a4c <HAL_DMA_Abort_IT+0x1e8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d040      	beq.n	8009954 <HAL_DMA_Abort_IT+0xf0>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a5e      	ldr	r2, [pc, #376]	@ (8009a50 <HAL_DMA_Abort_IT+0x1ec>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d038      	beq.n	800994e <HAL_DMA_Abort_IT+0xea>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a5c      	ldr	r2, [pc, #368]	@ (8009a54 <HAL_DMA_Abort_IT+0x1f0>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d030      	beq.n	8009948 <HAL_DMA_Abort_IT+0xe4>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a5b      	ldr	r2, [pc, #364]	@ (8009a58 <HAL_DMA_Abort_IT+0x1f4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d028      	beq.n	8009942 <HAL_DMA_Abort_IT+0xde>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a52      	ldr	r2, [pc, #328]	@ (8009a40 <HAL_DMA_Abort_IT+0x1dc>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d020      	beq.n	800993c <HAL_DMA_Abort_IT+0xd8>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a57      	ldr	r2, [pc, #348]	@ (8009a5c <HAL_DMA_Abort_IT+0x1f8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d019      	beq.n	8009938 <HAL_DMA_Abort_IT+0xd4>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a55      	ldr	r2, [pc, #340]	@ (8009a60 <HAL_DMA_Abort_IT+0x1fc>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d012      	beq.n	8009934 <HAL_DMA_Abort_IT+0xd0>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a54      	ldr	r2, [pc, #336]	@ (8009a64 <HAL_DMA_Abort_IT+0x200>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00a      	beq.n	800992e <HAL_DMA_Abort_IT+0xca>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a52      	ldr	r2, [pc, #328]	@ (8009a68 <HAL_DMA_Abort_IT+0x204>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d102      	bne.n	8009928 <HAL_DMA_Abort_IT+0xc4>
 8009922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009926:	e01b      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800992c:	e018      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 800992e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009932:	e015      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009934:	2310      	movs	r3, #16
 8009936:	e013      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009938:	2301      	movs	r3, #1
 800993a:	e011      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 800993c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009940:	e00e      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009942:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009946:	e00b      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800994c:	e008      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 800994e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009952:	e005      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 8009954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009958:	e002      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 800995a:	2310      	movs	r3, #16
 800995c:	e000      	b.n	8009960 <HAL_DMA_Abort_IT+0xfc>
 800995e:	2301      	movs	r3, #1
 8009960:	4a42      	ldr	r2, [pc, #264]	@ (8009a6c <HAL_DMA_Abort_IT+0x208>)
 8009962:	6053      	str	r3, [r2, #4]
 8009964:	e057      	b.n	8009a16 <HAL_DMA_Abort_IT+0x1b2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a36      	ldr	r2, [pc, #216]	@ (8009a44 <HAL_DMA_Abort_IT+0x1e0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d04f      	beq.n	8009a10 <HAL_DMA_Abort_IT+0x1ac>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a34      	ldr	r2, [pc, #208]	@ (8009a48 <HAL_DMA_Abort_IT+0x1e4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d048      	beq.n	8009a0c <HAL_DMA_Abort_IT+0x1a8>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a33      	ldr	r2, [pc, #204]	@ (8009a4c <HAL_DMA_Abort_IT+0x1e8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d040      	beq.n	8009a06 <HAL_DMA_Abort_IT+0x1a2>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a31      	ldr	r2, [pc, #196]	@ (8009a50 <HAL_DMA_Abort_IT+0x1ec>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d038      	beq.n	8009a00 <HAL_DMA_Abort_IT+0x19c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a30      	ldr	r2, [pc, #192]	@ (8009a54 <HAL_DMA_Abort_IT+0x1f0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d030      	beq.n	80099fa <HAL_DMA_Abort_IT+0x196>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2e      	ldr	r2, [pc, #184]	@ (8009a58 <HAL_DMA_Abort_IT+0x1f4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d028      	beq.n	80099f4 <HAL_DMA_Abort_IT+0x190>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a26      	ldr	r2, [pc, #152]	@ (8009a40 <HAL_DMA_Abort_IT+0x1dc>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d020      	beq.n	80099ee <HAL_DMA_Abort_IT+0x18a>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a2a      	ldr	r2, [pc, #168]	@ (8009a5c <HAL_DMA_Abort_IT+0x1f8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d019      	beq.n	80099ea <HAL_DMA_Abort_IT+0x186>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a29      	ldr	r2, [pc, #164]	@ (8009a60 <HAL_DMA_Abort_IT+0x1fc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d012      	beq.n	80099e6 <HAL_DMA_Abort_IT+0x182>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a27      	ldr	r2, [pc, #156]	@ (8009a64 <HAL_DMA_Abort_IT+0x200>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00a      	beq.n	80099e0 <HAL_DMA_Abort_IT+0x17c>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a26      	ldr	r2, [pc, #152]	@ (8009a68 <HAL_DMA_Abort_IT+0x204>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d102      	bne.n	80099da <HAL_DMA_Abort_IT+0x176>
 80099d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099d8:	e01b      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80099de:	e018      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099e4:	e015      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099e6:	2310      	movs	r3, #16
 80099e8:	e013      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099ea:	2301      	movs	r3, #1
 80099ec:	e011      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099f2:	e00e      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80099f8:	e00b      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 80099fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80099fe:	e008      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 8009a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a04:	e005      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 8009a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a0a:	e002      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	e000      	b.n	8009a12 <HAL_DMA_Abort_IT+0x1ae>
 8009a10:	2301      	movs	r3, #1
 8009a12:	4a17      	ldr	r2, [pc, #92]	@ (8009a70 <HAL_DMA_Abort_IT+0x20c>)
 8009a14:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
    } 
  }
  return status;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40020080 	.word	0x40020080
 8009a44:	40020008 	.word	0x40020008
 8009a48:	4002001c 	.word	0x4002001c
 8009a4c:	40020030 	.word	0x40020030
 8009a50:	40020044 	.word	0x40020044
 8009a54:	40020058 	.word	0x40020058
 8009a58:	4002006c 	.word	0x4002006c
 8009a5c:	40020408 	.word	0x40020408
 8009a60:	4002041c 	.word	0x4002041c
 8009a64:	40020430 	.word	0x40020430
 8009a68:	40020444 	.word	0x40020444
 8009a6c:	40020400 	.word	0x40020400
 8009a70:	40020000 	.word	0x40020000

08009a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b08b      	sub	sp, #44	@ 0x2c
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009a82:	2300      	movs	r3, #0
 8009a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a86:	e179      	b.n	8009d7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009a88:	2201      	movs	r2, #1
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	f040 8168 	bne.w	8009d76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	4a96      	ldr	r2, [pc, #600]	@ (8009d04 <HAL_GPIO_Init+0x290>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d05e      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
 8009ab0:	4a94      	ldr	r2, [pc, #592]	@ (8009d04 <HAL_GPIO_Init+0x290>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d875      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009ab6:	4a94      	ldr	r2, [pc, #592]	@ (8009d08 <HAL_GPIO_Init+0x294>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d058      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
 8009abc:	4a92      	ldr	r2, [pc, #584]	@ (8009d08 <HAL_GPIO_Init+0x294>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d86f      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009ac2:	4a92      	ldr	r2, [pc, #584]	@ (8009d0c <HAL_GPIO_Init+0x298>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d052      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
 8009ac8:	4a90      	ldr	r2, [pc, #576]	@ (8009d0c <HAL_GPIO_Init+0x298>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d869      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009ace:	4a90      	ldr	r2, [pc, #576]	@ (8009d10 <HAL_GPIO_Init+0x29c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d04c      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
 8009ad4:	4a8e      	ldr	r2, [pc, #568]	@ (8009d10 <HAL_GPIO_Init+0x29c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d863      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009ada:	4a8e      	ldr	r2, [pc, #568]	@ (8009d14 <HAL_GPIO_Init+0x2a0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d046      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
 8009ae0:	4a8c      	ldr	r2, [pc, #560]	@ (8009d14 <HAL_GPIO_Init+0x2a0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d85d      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009ae6:	2b12      	cmp	r3, #18
 8009ae8:	d82a      	bhi.n	8009b40 <HAL_GPIO_Init+0xcc>
 8009aea:	2b12      	cmp	r3, #18
 8009aec:	d859      	bhi.n	8009ba2 <HAL_GPIO_Init+0x12e>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <HAL_GPIO_Init+0x80>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b6f 	.word	0x08009b6f
 8009af8:	08009b49 	.word	0x08009b49
 8009afc:	08009b5b 	.word	0x08009b5b
 8009b00:	08009b9d 	.word	0x08009b9d
 8009b04:	08009ba3 	.word	0x08009ba3
 8009b08:	08009ba3 	.word	0x08009ba3
 8009b0c:	08009ba3 	.word	0x08009ba3
 8009b10:	08009ba3 	.word	0x08009ba3
 8009b14:	08009ba3 	.word	0x08009ba3
 8009b18:	08009ba3 	.word	0x08009ba3
 8009b1c:	08009ba3 	.word	0x08009ba3
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009ba3 	.word	0x08009ba3
 8009b28:	08009ba3 	.word	0x08009ba3
 8009b2c:	08009ba3 	.word	0x08009ba3
 8009b30:	08009ba3 	.word	0x08009ba3
 8009b34:	08009ba3 	.word	0x08009ba3
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	4a75      	ldr	r2, [pc, #468]	@ (8009d18 <HAL_GPIO_Init+0x2a4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009b46:	e02c      	b.n	8009ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	623b      	str	r3, [r7, #32]
          break;
 8009b4e:	e029      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	3304      	adds	r3, #4
 8009b56:	623b      	str	r3, [r7, #32]
          break;
 8009b58:	e024      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	623b      	str	r3, [r7, #32]
          break;
 8009b62:	e01f      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	330c      	adds	r3, #12
 8009b6a:	623b      	str	r3, [r7, #32]
          break;
 8009b6c:	e01a      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b76:	2304      	movs	r3, #4
 8009b78:	623b      	str	r3, [r7, #32]
          break;
 8009b7a:	e013      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d105      	bne.n	8009b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b84:	2308      	movs	r3, #8
 8009b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	611a      	str	r2, [r3, #16]
          break;
 8009b8e:	e009      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b90:	2308      	movs	r3, #8
 8009b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	615a      	str	r2, [r3, #20]
          break;
 8009b9a:	e003      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	623b      	str	r3, [r7, #32]
          break;
 8009ba0:	e000      	b.n	8009ba4 <HAL_GPIO_Init+0x130>
          break;
 8009ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2bff      	cmp	r3, #255	@ 0xff
 8009ba8:	d801      	bhi.n	8009bae <HAL_GPIO_Init+0x13a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	e001      	b.n	8009bb2 <HAL_GPIO_Init+0x13e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	2bff      	cmp	r3, #255	@ 0xff
 8009bb8:	d802      	bhi.n	8009bc0 <HAL_GPIO_Init+0x14c>
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	e002      	b.n	8009bc6 <HAL_GPIO_Init+0x152>
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	3b08      	subs	r3, #8
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	210f      	movs	r1, #15
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	6a39      	ldr	r1, [r7, #32]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8009be0:	431a      	orrs	r2, r3
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80c1 	beq.w	8009d76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009bf4:	4b49      	ldr	r3, [pc, #292]	@ (8009d1c <HAL_GPIO_Init+0x2a8>)
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	4a48      	ldr	r2, [pc, #288]	@ (8009d1c <HAL_GPIO_Init+0x2a8>)
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	6193      	str	r3, [r2, #24]
 8009c00:	4b46      	ldr	r3, [pc, #280]	@ (8009d1c <HAL_GPIO_Init+0x2a8>)
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009c0c:	4a44      	ldr	r2, [pc, #272]	@ (8009d20 <HAL_GPIO_Init+0x2ac>)
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	089b      	lsrs	r3, r3, #2
 8009c12:	3302      	adds	r3, #2
 8009c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	220f      	movs	r2, #15
 8009c24:	fa02 f303 	lsl.w	r3, r2, r3
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3c      	ldr	r2, [pc, #240]	@ (8009d24 <HAL_GPIO_Init+0x2b0>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d01f      	beq.n	8009c78 <HAL_GPIO_Init+0x204>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8009d28 <HAL_GPIO_Init+0x2b4>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d019      	beq.n	8009c74 <HAL_GPIO_Init+0x200>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3a      	ldr	r2, [pc, #232]	@ (8009d2c <HAL_GPIO_Init+0x2b8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <HAL_GPIO_Init+0x1fc>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a39      	ldr	r2, [pc, #228]	@ (8009d30 <HAL_GPIO_Init+0x2bc>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00d      	beq.n	8009c6c <HAL_GPIO_Init+0x1f8>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a38      	ldr	r2, [pc, #224]	@ (8009d34 <HAL_GPIO_Init+0x2c0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <HAL_GPIO_Init+0x1f4>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a37      	ldr	r2, [pc, #220]	@ (8009d38 <HAL_GPIO_Init+0x2c4>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d101      	bne.n	8009c64 <HAL_GPIO_Init+0x1f0>
 8009c60:	2305      	movs	r3, #5
 8009c62:	e00a      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c64:	2306      	movs	r3, #6
 8009c66:	e008      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	e006      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e004      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e002      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <HAL_GPIO_Init+0x206>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c7c:	f002 0203 	and.w	r2, r2, #3
 8009c80:	0092      	lsls	r2, r2, #2
 8009c82:	4093      	lsls	r3, r2
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009c8a:	4925      	ldr	r1, [pc, #148]	@ (8009d20 <HAL_GPIO_Init+0x2ac>)
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	089b      	lsrs	r3, r3, #2
 8009c90:	3302      	adds	r3, #2
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009ca4:	4b25      	ldr	r3, [pc, #148]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	4924      	ldr	r1, [pc, #144]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	608b      	str	r3, [r1, #8]
 8009cb0:	e006      	b.n	8009cc0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009cb2:	4b22      	ldr	r3, [pc, #136]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	43db      	mvns	r3, r3
 8009cba:	4920      	ldr	r1, [pc, #128]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d006      	beq.n	8009cda <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	491a      	ldr	r1, [pc, #104]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60cb      	str	r3, [r1, #12]
 8009cd8:	e006      	b.n	8009ce8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009cda:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	4916      	ldr	r1, [pc, #88]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d025      	beq.n	8009d40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009cf4:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	4910      	ldr	r1, [pc, #64]	@ (8009d3c <HAL_GPIO_Init+0x2c8>)
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	604b      	str	r3, [r1, #4]
 8009d00:	e025      	b.n	8009d4e <HAL_GPIO_Init+0x2da>
 8009d02:	bf00      	nop
 8009d04:	10320000 	.word	0x10320000
 8009d08:	10310000 	.word	0x10310000
 8009d0c:	10220000 	.word	0x10220000
 8009d10:	10210000 	.word	0x10210000
 8009d14:	10120000 	.word	0x10120000
 8009d18:	10110000 	.word	0x10110000
 8009d1c:	40021000 	.word	0x40021000
 8009d20:	40010000 	.word	0x40010000
 8009d24:	40010800 	.word	0x40010800
 8009d28:	40010c00 	.word	0x40010c00
 8009d2c:	40011000 	.word	0x40011000
 8009d30:	40011400 	.word	0x40011400
 8009d34:	40011800 	.word	0x40011800
 8009d38:	40011c00 	.word	0x40011c00
 8009d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009d40:	4b15      	ldr	r3, [pc, #84]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	43db      	mvns	r3, r3
 8009d48:	4913      	ldr	r1, [pc, #76]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	490e      	ldr	r1, [pc, #56]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	600b      	str	r3, [r1, #0]
 8009d66:	e006      	b.n	8009d76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d68:	4b0b      	ldr	r3, [pc, #44]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	4909      	ldr	r1, [pc, #36]	@ (8009d98 <HAL_GPIO_Init+0x324>)
 8009d72:	4013      	ands	r3, r2
 8009d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	3301      	adds	r3, #1
 8009d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f47f ae7e 	bne.w	8009a88 <HAL_GPIO_Init+0x14>
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	372c      	adds	r7, #44	@ 0x2c
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	40010400 	.word	0x40010400

08009d9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b089      	sub	sp, #36	@ 0x24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009daa:	e0a6      	b.n	8009efa <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009dac:	2201      	movs	r2, #1
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	4013      	ands	r3, r2
 8009db8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8099 	beq.w	8009ef4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009dc2:	4a54      	ldr	r2, [pc, #336]	@ (8009f14 <HAL_GPIO_DeInit+0x178>)
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	089b      	lsrs	r3, r3, #2
 8009dc8:	3302      	adds	r3, #2
 8009dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dce:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	220f      	movs	r2, #15
 8009dda:	fa02 f303 	lsl.w	r3, r2, r3
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4013      	ands	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a4c      	ldr	r2, [pc, #304]	@ (8009f18 <HAL_GPIO_DeInit+0x17c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d01f      	beq.n	8009e2c <HAL_GPIO_DeInit+0x90>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a4b      	ldr	r2, [pc, #300]	@ (8009f1c <HAL_GPIO_DeInit+0x180>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d019      	beq.n	8009e28 <HAL_GPIO_DeInit+0x8c>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a4a      	ldr	r2, [pc, #296]	@ (8009f20 <HAL_GPIO_DeInit+0x184>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d013      	beq.n	8009e24 <HAL_GPIO_DeInit+0x88>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a49      	ldr	r2, [pc, #292]	@ (8009f24 <HAL_GPIO_DeInit+0x188>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00d      	beq.n	8009e20 <HAL_GPIO_DeInit+0x84>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a48      	ldr	r2, [pc, #288]	@ (8009f28 <HAL_GPIO_DeInit+0x18c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <HAL_GPIO_DeInit+0x80>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a47      	ldr	r2, [pc, #284]	@ (8009f2c <HAL_GPIO_DeInit+0x190>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d101      	bne.n	8009e18 <HAL_GPIO_DeInit+0x7c>
 8009e14:	2305      	movs	r3, #5
 8009e16:	e00a      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e18:	2306      	movs	r3, #6
 8009e1a:	e008      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	e006      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e20:	2303      	movs	r3, #3
 8009e22:	e004      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e002      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <HAL_GPIO_DeInit+0x92>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	f002 0203 	and.w	r2, r2, #3
 8009e34:	0092      	lsls	r2, r2, #2
 8009e36:	4093      	lsls	r3, r2
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d132      	bne.n	8009ea4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	43db      	mvns	r3, r3
 8009e46:	493a      	ldr	r1, [pc, #232]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009e4c:	4b38      	ldr	r3, [pc, #224]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	43db      	mvns	r3, r3
 8009e54:	4936      	ldr	r1, [pc, #216]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009e5a:	4b35      	ldr	r3, [pc, #212]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	4933      	ldr	r1, [pc, #204]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e64:	4013      	ands	r3, r2
 8009e66:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009e68:	4b31      	ldr	r3, [pc, #196]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	43db      	mvns	r3, r3
 8009e70:	492f      	ldr	r1, [pc, #188]	@ (8009f30 <HAL_GPIO_DeInit+0x194>)
 8009e72:	4013      	ands	r3, r2
 8009e74:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	f003 0303 	and.w	r3, r3, #3
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	220f      	movs	r2, #15
 8009e80:	fa02 f303 	lsl.w	r3, r2, r3
 8009e84:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009e86:	4a23      	ldr	r2, [pc, #140]	@ (8009f14 <HAL_GPIO_DeInit+0x178>)
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	089b      	lsrs	r3, r3, #2
 8009e8c:	3302      	adds	r3, #2
 8009e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	43da      	mvns	r2, r3
 8009e96:	481f      	ldr	r0, [pc, #124]	@ (8009f14 <HAL_GPIO_DeInit+0x178>)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	089b      	lsrs	r3, r3, #2
 8009e9c:	400a      	ands	r2, r1
 8009e9e:	3302      	adds	r3, #2
 8009ea0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2bff      	cmp	r3, #255	@ 0xff
 8009ea8:	d801      	bhi.n	8009eae <HAL_GPIO_DeInit+0x112>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	e001      	b.n	8009eb2 <HAL_GPIO_DeInit+0x116>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2bff      	cmp	r3, #255	@ 0xff
 8009eb8:	d802      	bhi.n	8009ec0 <HAL_GPIO_DeInit+0x124>
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	e002      	b.n	8009ec6 <HAL_GPIO_DeInit+0x12a>
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	3b08      	subs	r3, #8
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	210f      	movs	r1, #15
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	401a      	ands	r2, r3
 8009ed8:	2104      	movs	r1, #4
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	43db      	mvns	r3, r3
 8009eee:	401a      	ands	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	fa22 f303 	lsr.w	r3, r2, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f47f af52 	bne.w	8009dac <HAL_GPIO_DeInit+0x10>
  }
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	3724      	adds	r7, #36	@ 0x24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bc80      	pop	{r7}
 8009f12:	4770      	bx	lr
 8009f14:	40010000 	.word	0x40010000
 8009f18:	40010800 	.word	0x40010800
 8009f1c:	40010c00 	.word	0x40010c00
 8009f20:	40011000 	.word	0x40011000
 8009f24:	40011400 	.word	0x40011400
 8009f28:	40011800 	.word	0x40011800
 8009f2c:	40011c00 	.word	0x40011c00
 8009f30:	40010400 	.word	0x40010400

08009f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	887b      	ldrh	r3, [r7, #2]
 8009f46:	4013      	ands	r3, r2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
 8009f50:	e001      	b.n	8009f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	807b      	strh	r3, [r7, #2]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f72:	787b      	ldrb	r3, [r7, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f78:	887a      	ldrh	r2, [r7, #2]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009f7e:	e003      	b.n	8009f88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009f80:	887b      	ldrh	r3, [r7, #2]
 8009f82:	041a      	lsls	r2, r3, #16
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	611a      	str	r2, [r3, #16]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr

08009f92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009fa4:	887a      	ldrh	r2, [r7, #2]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	041a      	lsls	r2, r3, #16
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	43d9      	mvns	r1, r3
 8009fb0:	887b      	ldrh	r3, [r7, #2]
 8009fb2:	400b      	ands	r3, r1
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]
}
 8009fba:	bf00      	nop
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e12b      	b.n	800a22e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fe fff4 	bl	8008fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2224      	movs	r2, #36	@ 0x24
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 0201 	bic.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a028:	f001 fdb8 	bl	800bb9c <HAL_RCC_GetPCLK1Freq>
 800a02c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4a81      	ldr	r2, [pc, #516]	@ (800a238 <HAL_I2C_Init+0x274>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d807      	bhi.n	800a048 <HAL_I2C_Init+0x84>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4a80      	ldr	r2, [pc, #512]	@ (800a23c <HAL_I2C_Init+0x278>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	bf94      	ite	ls
 800a040:	2301      	movls	r3, #1
 800a042:	2300      	movhi	r3, #0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	e006      	b.n	800a056 <HAL_I2C_Init+0x92>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4a7d      	ldr	r2, [pc, #500]	@ (800a240 <HAL_I2C_Init+0x27c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	bf94      	ite	ls
 800a050:	2301      	movls	r3, #1
 800a052:	2300      	movhi	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e0e7      	b.n	800a22e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4a78      	ldr	r2, [pc, #480]	@ (800a244 <HAL_I2C_Init+0x280>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	0c9b      	lsrs	r3, r3, #18
 800a068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	4a6a      	ldr	r2, [pc, #424]	@ (800a238 <HAL_I2C_Init+0x274>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d802      	bhi.n	800a098 <HAL_I2C_Init+0xd4>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	3301      	adds	r3, #1
 800a096:	e009      	b.n	800a0ac <HAL_I2C_Init+0xe8>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	4a69      	ldr	r2, [pc, #420]	@ (800a248 <HAL_I2C_Init+0x284>)
 800a0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a8:	099b      	lsrs	r3, r3, #6
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a0be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	495c      	ldr	r1, [pc, #368]	@ (800a238 <HAL_I2C_Init+0x274>)
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	d819      	bhi.n	800a100 <HAL_I2C_Init+0x13c>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	1e59      	subs	r1, r3, #1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0da:	1c59      	adds	r1, r3, #1
 800a0dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a0e0:	400b      	ands	r3, r1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <HAL_I2C_Init+0x138>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	1e59      	subs	r1, r3, #1
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0fa:	e051      	b.n	800a1a0 <HAL_I2C_Init+0x1dc>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	e04f      	b.n	800a1a0 <HAL_I2C_Init+0x1dc>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d111      	bne.n	800a12c <HAL_I2C_Init+0x168>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	1e58      	subs	r0, r3, #1
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6859      	ldr	r1, [r3, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	440b      	add	r3, r1
 800a116:	fbb0 f3f3 	udiv	r3, r0, r3
 800a11a:	3301      	adds	r3, #1
 800a11c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf0c      	ite	eq
 800a124:	2301      	moveq	r3, #1
 800a126:	2300      	movne	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	e012      	b.n	800a152 <HAL_I2C_Init+0x18e>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	1e58      	subs	r0, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6859      	ldr	r1, [r3, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	0099      	lsls	r1, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a142:	3301      	adds	r3, #1
 800a144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bf0c      	ite	eq
 800a14c:	2301      	moveq	r3, #1
 800a14e:	2300      	movne	r3, #0
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <HAL_I2C_Init+0x196>
 800a156:	2301      	movs	r3, #1
 800a158:	e022      	b.n	800a1a0 <HAL_I2C_Init+0x1dc>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10e      	bne.n	800a180 <HAL_I2C_Init+0x1bc>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1e58      	subs	r0, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6859      	ldr	r1, [r3, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	440b      	add	r3, r1
 800a170:	fbb0 f3f3 	udiv	r3, r0, r3
 800a174:	3301      	adds	r3, #1
 800a176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a17a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a17e:	e00f      	b.n	800a1a0 <HAL_I2C_Init+0x1dc>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	1e58      	subs	r0, r3, #1
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6859      	ldr	r1, [r3, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	0099      	lsls	r1, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	fbb0 f3f3 	udiv	r3, r0, r3
 800a196:	3301      	adds	r3, #1
 800a198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a19c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	6809      	ldr	r1, [r1, #0]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69da      	ldr	r2, [r3, #28]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a1ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6911      	ldr	r1, [r2, #16]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68d2      	ldr	r2, [r2, #12]
 800a1da:	4311      	orrs	r1, r2
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	695a      	ldr	r2, [r3, #20]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2220      	movs	r2, #32
 800a21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	000186a0 	.word	0x000186a0
 800a23c:	001e847f 	.word	0x001e847f
 800a240:	003d08ff 	.word	0x003d08ff
 800a244:	431bde83 	.word	0x431bde83
 800a248:	10624dd3 	.word	0x10624dd3

0800a24c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e021      	b.n	800a2a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2224      	movs	r2, #36	@ 0x24
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0201 	bic.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7fe feec 	bl	8009054 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	817b      	strh	r3, [r7, #10]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2c0:	f7ff f85e 	bl	8009380 <HAL_GetTick>
 800a2c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	f040 80e0 	bne.w	800a494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	2319      	movs	r3, #25
 800a2da:	2201      	movs	r2, #1
 800a2dc:	4970      	ldr	r1, [pc, #448]	@ (800a4a0 <HAL_I2C_Master_Transmit+0x1f4>)
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 fe5c 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e0d3      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <HAL_I2C_Master_Transmit+0x50>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e0cc      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d007      	beq.n	800a322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0201 	orr.w	r2, r2, #1
 800a320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2221      	movs	r2, #33	@ 0x21
 800a336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2210      	movs	r2, #16
 800a33e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	893a      	ldrh	r2, [r7, #8]
 800a352:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a358:	b29a      	uxth	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4a50      	ldr	r2, [pc, #320]	@ (800a4a4 <HAL_I2C_Master_Transmit+0x1f8>)
 800a362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a364:	8979      	ldrh	r1, [r7, #10]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	6a3a      	ldr	r2, [r7, #32]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 fc16 	bl	800ab9c <I2C_MasterRequestWrite>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e08d      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a37a:	2300      	movs	r3, #0
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a390:	e066      	b.n	800a460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	6a39      	ldr	r1, [r7, #32]
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 ff1a 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00d      	beq.n	800a3be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d107      	bne.n	800a3ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e06b      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	781a      	ldrb	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d11b      	bne.n	800a434 <HAL_I2C_Master_Transmit+0x188>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d017      	beq.n	800a434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a42c:	3b01      	subs	r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	6a39      	ldr	r1, [r7, #32]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 ff11 	bl	800b260 <I2C_WaitOnBTFFlagUntilTimeout>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00d      	beq.n	800a460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d107      	bne.n	800a45c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a45a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e01a      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a464:	2b00      	cmp	r3, #0
 800a466:	d194      	bne.n	800a392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	e000      	b.n	800a496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a494:	2302      	movs	r3, #2
  }
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	00100002 	.word	0x00100002
 800a4a4:	ffff0000 	.word	0xffff0000

0800a4a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	817b      	strh	r3, [r7, #10]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	813b      	strh	r3, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4c2:	f7fe ff5d 	bl	8009380 <HAL_GetTick>
 800a4c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	f040 80d9 	bne.w	800a688 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	2319      	movs	r3, #25
 800a4dc:	2201      	movs	r2, #1
 800a4de:	496d      	ldr	r1, [pc, #436]	@ (800a694 <HAL_I2C_Mem_Write+0x1ec>)
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fd5b 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e0cc      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_I2C_Mem_Write+0x56>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e0c5      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b01      	cmp	r3, #1
 800a512:	d007      	beq.n	800a524 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0201 	orr.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2221      	movs	r2, #33	@ 0x21
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2240      	movs	r2, #64	@ 0x40
 800a540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a3a      	ldr	r2, [r7, #32]
 800a54e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4a4d      	ldr	r2, [pc, #308]	@ (800a698 <HAL_I2C_Mem_Write+0x1f0>)
 800a564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a566:	88f8      	ldrh	r0, [r7, #6]
 800a568:	893a      	ldrh	r2, [r7, #8]
 800a56a:	8979      	ldrh	r1, [r7, #10]
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4603      	mov	r3, r0
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fb92 	bl	800aca0 <I2C_RequestMemoryWrite>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d052      	beq.n	800a628 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e081      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fe20 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00d      	beq.n	800a5b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d107      	bne.n	800a5ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e06b      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d11b      	bne.n	800a628 <HAL_I2C_Mem_Write+0x180>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d017      	beq.n	800a628 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fc:	781a      	ldrb	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a612:	3b01      	subs	r3, #1
 800a614:	b29a      	uxth	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a61e:	b29b      	uxth	r3, r3
 800a620:	3b01      	subs	r3, #1
 800a622:	b29a      	uxth	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1aa      	bne.n	800a586 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f000 fe13 	bl	800b260 <I2C_WaitOnBTFFlagUntilTimeout>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00d      	beq.n	800a65c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a644:	2b04      	cmp	r3, #4
 800a646:	d107      	bne.n	800a658 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a656:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e016      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a66a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	00100002 	.word	0x00100002
 800a698:	ffff0000 	.word	0xffff0000

0800a69c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	@ 0x30
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	817b      	strh	r3, [r7, #10]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	813b      	strh	r3, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6ba:	f7fe fe61 	bl	8009380 <HAL_GetTick>
 800a6be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	f040 8244 	bne.w	800ab56 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2319      	movs	r3, #25
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	4982      	ldr	r1, [pc, #520]	@ (800a8e0 <HAL_I2C_Mem_Read+0x244>)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fc5f 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e237      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <HAL_I2C_Mem_Read+0x5a>
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e230      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d007      	beq.n	800a71c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0201 	orr.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a72a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2222      	movs	r2, #34	@ 0x22
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2240      	movs	r2, #64	@ 0x40
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a74c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a752:	b29a      	uxth	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4a62      	ldr	r2, [pc, #392]	@ (800a8e4 <HAL_I2C_Mem_Read+0x248>)
 800a75c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a75e:	88f8      	ldrh	r0, [r7, #6]
 800a760:	893a      	ldrh	r2, [r7, #8]
 800a762:	8979      	ldrh	r1, [r7, #10]
 800a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4603      	mov	r3, r0
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 fb2c 	bl	800adcc <I2C_RequestMemoryRead>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e1ec      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d113      	bne.n	800a7ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	61fb      	str	r3, [r7, #28]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	61fb      	str	r3, [r7, #28]
 800a79a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	e1c0      	b.n	800ab30 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d11e      	bne.n	800a7f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7c6:	b672      	cpsid	i
}
 800a7c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7f0:	b662      	cpsie	i
}
 800a7f2:	e035      	b.n	800a860 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d11e      	bne.n	800a83a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a80a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a80c:	b672      	cpsid	i
}
 800a80e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a836:	b662      	cpsie	i
}
 800a838:	e012      	b.n	800a860 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a848:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a860:	e166      	b.n	800ab30 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a866:	2b03      	cmp	r3, #3
 800a868:	f200 811f 	bhi.w	800aaaa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a870:	2b01      	cmp	r3, #1
 800a872:	d123      	bne.n	800a8bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 fd39 	bl	800b2f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e167      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691a      	ldr	r2, [r3, #16]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8ba:	e139      	b.n	800ab30 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d152      	bne.n	800a96a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4906      	ldr	r1, [pc, #24]	@ (800a8e8 <HAL_I2C_Mem_Read+0x24c>)
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 fb64 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d008      	beq.n	800a8ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e13c      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
 800a8de:	bf00      	nop
 800a8e0:	00100002 	.word	0x00100002
 800a8e4:	ffff0000 	.word	0xffff0000
 800a8e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ec:	b672      	cpsid	i
}
 800a8ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691a      	ldr	r2, [r3, #16]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a91c:	3b01      	subs	r3, #1
 800a91e:	b29a      	uxth	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	3b01      	subs	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a932:	b662      	cpsie	i
}
 800a934:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a952:	3b01      	subs	r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a95e:	b29b      	uxth	r3, r3
 800a960:	3b01      	subs	r3, #1
 800a962:	b29a      	uxth	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a968:	e0e2      	b.n	800ab30 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	2200      	movs	r2, #0
 800a972:	497b      	ldr	r1, [pc, #492]	@ (800ab60 <HAL_I2C_Mem_Read+0x4c4>)
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fb11 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e0e9      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a994:	b672      	cpsid	i
}
 800a996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691a      	ldr	r2, [r3, #16]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a9ca:	4b66      	ldr	r3, [pc, #408]	@ (800ab64 <HAL_I2C_Mem_Read+0x4c8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	08db      	lsrs	r3, r3, #3
 800a9d0:	4a65      	ldr	r2, [pc, #404]	@ (800ab68 <HAL_I2C_Mem_Read+0x4cc>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	0a1a      	lsrs	r2, r3, #8
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	00da      	lsls	r2, r3, #3
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d118      	bne.n	800aa22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800aa12:	b662      	cpsie	i
}
 800aa14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e09a      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d1d9      	bne.n	800a9e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691a      	ldr	r2, [r3, #16]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa72:	b662      	cpsie	i
}
 800aa74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa92:	3b01      	subs	r3, #1
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaa8:	e042      	b.n	800ab30 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 fc1e 	bl	800b2f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e04c      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691a      	ldr	r2, [r3, #16]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac8:	b2d2      	uxtb	r2, r2
 800aaca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aada:	3b01      	subs	r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d118      	bne.n	800ab30 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab08:	b2d2      	uxtb	r2, r2
 800ab0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f ae94 	bne.w	800a862 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e000      	b.n	800ab58 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ab56:	2302      	movs	r3, #2
  }
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3728      	adds	r7, #40	@ 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	00010004 	.word	0x00010004
 800ab64:	20000f78 	.word	0x20000f78
 800ab68:	14f8b589 	.word	0x14f8b589

0800ab6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab7a:	b2db      	uxtb	r3, r3
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr

0800ab86 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr

0800ab9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af02      	add	r7, sp, #8
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	460b      	mov	r3, r1
 800abaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	d006      	beq.n	800abc6 <I2C_MasterRequestWrite+0x2a>
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d003      	beq.n	800abc6 <I2C_MasterRequestWrite+0x2a>
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800abc4:	d108      	bne.n	800abd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e00b      	b.n	800abf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abdc:	2b12      	cmp	r3, #18
 800abde:	d107      	bne.n	800abf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f9cd 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00d      	beq.n	800ac24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac16:	d103      	bne.n	800ac20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e035      	b.n	800ac90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac2c:	d108      	bne.n	800ac40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac2e:	897b      	ldrh	r3, [r7, #10]
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	461a      	mov	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac3c:	611a      	str	r2, [r3, #16]
 800ac3e:	e01b      	b.n	800ac78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ac40:	897b      	ldrh	r3, [r7, #10]
 800ac42:	11db      	asrs	r3, r3, #7
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0306 	and.w	r3, r3, #6
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	f063 030f 	orn	r3, r3, #15
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	490e      	ldr	r1, [pc, #56]	@ (800ac98 <I2C_MasterRequestWrite+0xfc>)
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fa16 	bl	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e010      	b.n	800ac90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ac6e:	897b      	ldrh	r3, [r7, #10]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	4907      	ldr	r1, [pc, #28]	@ (800ac9c <I2C_MasterRequestWrite+0x100>)
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 fa06 	bl	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	00010008 	.word	0x00010008
 800ac9c:	00010002 	.word	0x00010002

0800aca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	4608      	mov	r0, r1
 800acaa:	4611      	mov	r1, r2
 800acac:	461a      	mov	r2, r3
 800acae:	4603      	mov	r3, r0
 800acb0:	817b      	strh	r3, [r7, #10]
 800acb2:	460b      	mov	r3, r1
 800acb4:	813b      	strh	r3, [r7, #8]
 800acb6:	4613      	mov	r3, r2
 800acb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f960 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00d      	beq.n	800acfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf0:	d103      	bne.n	800acfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e05f      	b.n	800adbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acfe:	897b      	ldrh	r3, [r7, #10]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	6a3a      	ldr	r2, [r7, #32]
 800ad12:	492d      	ldr	r1, [pc, #180]	@ (800adc8 <I2C_RequestMemoryWrite+0x128>)
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f9bb 	bl	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e04c      	b.n	800adbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad3c:	6a39      	ldr	r1, [r7, #32]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 fa46 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00d      	beq.n	800ad66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d107      	bne.n	800ad62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e02b      	b.n	800adbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d105      	bne.n	800ad78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad6c:	893b      	ldrh	r3, [r7, #8]
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	611a      	str	r2, [r3, #16]
 800ad76:	e021      	b.n	800adbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad78:	893b      	ldrh	r3, [r7, #8]
 800ad7a:	0a1b      	lsrs	r3, r3, #8
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad88:	6a39      	ldr	r1, [r7, #32]
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 fa20 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00d      	beq.n	800adb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d107      	bne.n	800adae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e005      	b.n	800adbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adb2:	893b      	ldrh	r3, [r7, #8]
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	00010002 	.word	0x00010002

0800adcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	461a      	mov	r2, r3
 800adda:	4603      	mov	r3, r0
 800addc:	817b      	strh	r3, [r7, #10]
 800adde:	460b      	mov	r3, r1
 800ade0:	813b      	strh	r3, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800adf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 f8c2 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00d      	beq.n	800ae3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae2c:	d103      	bne.n	800ae36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e0aa      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae3a:	897b      	ldrh	r3, [r7, #10]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	6a3a      	ldr	r2, [r7, #32]
 800ae4e:	4952      	ldr	r1, [pc, #328]	@ (800af98 <I2C_RequestMemoryRead+0x1cc>)
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f91d 	bl	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e097      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae78:	6a39      	ldr	r1, [r7, #32]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f9a8 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00d      	beq.n	800aea2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d107      	bne.n	800ae9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e076      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d105      	bne.n	800aeb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aea8:	893b      	ldrh	r3, [r7, #8]
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	611a      	str	r2, [r3, #16]
 800aeb2:	e021      	b.n	800aef8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aeb4:	893b      	ldrh	r3, [r7, #8]
 800aeb6:	0a1b      	lsrs	r3, r3, #8
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aec4:	6a39      	ldr	r1, [r7, #32]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f982 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00d      	beq.n	800aeee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d107      	bne.n	800aeea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e050      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aefa:	6a39      	ldr	r1, [r7, #32]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f967 	bl	800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00d      	beq.n	800af24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d107      	bne.n	800af20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e035      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 f82b 	bl	800af9c <I2C_WaitOnFlagUntilTimeout>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00d      	beq.n	800af68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af5a:	d103      	bne.n	800af64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e013      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800af68:	897b      	ldrh	r3, [r7, #10]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	6a3a      	ldr	r2, [r7, #32]
 800af7c:	4906      	ldr	r1, [pc, #24]	@ (800af98 <I2C_RequestMemoryRead+0x1cc>)
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 f886 	bl	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	00010002 	.word	0x00010002

0800af9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afac:	e048      	b.n	800b040 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afb4:	d044      	beq.n	800b040 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afb6:	f7fe f9e3 	bl	8009380 <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d302      	bcc.n	800afcc <I2C_WaitOnFlagUntilTimeout+0x30>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d139      	bne.n	800b040 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d10d      	bne.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	43da      	mvns	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4013      	ands	r3, r2
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bf0c      	ite	eq
 800afe8:	2301      	moveq	r3, #1
 800afea:	2300      	movne	r3, #0
 800afec:	b2db      	uxtb	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	e00c      	b.n	800b00c <I2C_WaitOnFlagUntilTimeout+0x70>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	43da      	mvns	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	4013      	ands	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf0c      	ite	eq
 800b004:	2301      	moveq	r3, #1
 800b006:	2300      	movne	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	461a      	mov	r2, r3
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d116      	bne.n	800b040 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02c:	f043 0220 	orr.w	r2, r3, #32
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e023      	b.n	800b088 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	0c1b      	lsrs	r3, r3, #16
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b01      	cmp	r3, #1
 800b048:	d10d      	bne.n	800b066 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	43da      	mvns	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	4013      	ands	r3, r2
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bf0c      	ite	eq
 800b05c:	2301      	moveq	r3, #1
 800b05e:	2300      	movne	r3, #0
 800b060:	b2db      	uxtb	r3, r3
 800b062:	461a      	mov	r2, r3
 800b064:	e00c      	b.n	800b080 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	43da      	mvns	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	4013      	ands	r3, r2
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf0c      	ite	eq
 800b078:	2301      	moveq	r3, #1
 800b07a:	2300      	movne	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	429a      	cmp	r2, r3
 800b084:	d093      	beq.n	800afae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b09e:	e071      	b.n	800b184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ae:	d123      	bne.n	800b0f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b0c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e4:	f043 0204 	orr.w	r2, r3, #4
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e067      	b.n	800b1c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0fe:	d041      	beq.n	800b184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b100:	f7fe f93e 	bl	8009380 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d302      	bcc.n	800b116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d136      	bne.n	800b184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	0c1b      	lsrs	r3, r3, #16
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d10c      	bne.n	800b13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	43da      	mvns	r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	4013      	ands	r3, r2
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bf14      	ite	ne
 800b132:	2301      	movne	r3, #1
 800b134:	2300      	moveq	r3, #0
 800b136:	b2db      	uxtb	r3, r3
 800b138:	e00b      	b.n	800b152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	43da      	mvns	r2, r3
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4013      	ands	r3, r2
 800b146:	b29b      	uxth	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bf14      	ite	ne
 800b14c:	2301      	movne	r3, #1
 800b14e:	2300      	moveq	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d016      	beq.n	800b184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b170:	f043 0220 	orr.w	r2, r3, #32
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e021      	b.n	800b1c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d10c      	bne.n	800b1a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	43da      	mvns	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4013      	ands	r3, r2
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bf14      	ite	ne
 800b1a0:	2301      	movne	r3, #1
 800b1a2:	2300      	moveq	r3, #0
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	e00b      	b.n	800b1c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	43da      	mvns	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2301      	movne	r3, #1
 800b1bc:	2300      	moveq	r3, #0
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f47f af6d 	bne.w	800b0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1dc:	e034      	b.n	800b248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 f8e3 	bl	800b3aa <I2C_IsAcknowledgeFailed>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e034      	b.n	800b258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1f4:	d028      	beq.n	800b248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1f6:	f7fe f8c3 	bl	8009380 <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	d302      	bcc.n	800b20c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d11d      	bne.n	800b248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b216:	2b80      	cmp	r3, #128	@ 0x80
 800b218:	d016      	beq.n	800b248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2220      	movs	r2, #32
 800b224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	f043 0220 	orr.w	r2, r3, #32
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e007      	b.n	800b258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b252:	2b80      	cmp	r3, #128	@ 0x80
 800b254:	d1c3      	bne.n	800b1de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b26c:	e034      	b.n	800b2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 f89b 	bl	800b3aa <I2C_IsAcknowledgeFailed>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e034      	b.n	800b2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b284:	d028      	beq.n	800b2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b286:	f7fe f87b 	bl	8009380 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	429a      	cmp	r2, r3
 800b294:	d302      	bcc.n	800b29c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d11d      	bne.n	800b2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d016      	beq.n	800b2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c4:	f043 0220 	orr.w	r2, r3, #32
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e007      	b.n	800b2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d1c3      	bne.n	800b26e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b2fc:	e049      	b.n	800b392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d119      	bne.n	800b340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0210 	mvn.w	r2, #16
 800b314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e030      	b.n	800b3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b340:	f7fe f81e 	bl	8009380 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d302      	bcc.n	800b356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d11d      	bne.n	800b392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b360:	2b40      	cmp	r3, #64	@ 0x40
 800b362:	d016      	beq.n	800b392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37e:	f043 0220 	orr.w	r2, r3, #32
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e007      	b.n	800b3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39c:	2b40      	cmp	r3, #64	@ 0x40
 800b39e:	d1ae      	bne.n	800b2fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c0:	d11b      	bne.n	800b3fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b3ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e6:	f043 0204 	orr.w	r2, r3, #4
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e000      	b.n	800b3fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr
	...

0800b408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e272      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8087 	beq.w	800b536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b428:	4b92      	ldr	r3, [pc, #584]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f003 030c 	and.w	r3, r3, #12
 800b430:	2b04      	cmp	r3, #4
 800b432:	d00c      	beq.n	800b44e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b434:	4b8f      	ldr	r3, [pc, #572]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f003 030c 	and.w	r3, r3, #12
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d112      	bne.n	800b466 <HAL_RCC_OscConfig+0x5e>
 800b440:	4b8c      	ldr	r3, [pc, #560]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b44c:	d10b      	bne.n	800b466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b44e:	4b89      	ldr	r3, [pc, #548]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06c      	beq.n	800b534 <HAL_RCC_OscConfig+0x12c>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d168      	bne.n	800b534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e24c      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b46e:	d106      	bne.n	800b47e <HAL_RCC_OscConfig+0x76>
 800b470:	4b80      	ldr	r3, [pc, #512]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a7f      	ldr	r2, [pc, #508]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	e02e      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x98>
 800b486:	4b7b      	ldr	r3, [pc, #492]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a7a      	ldr	r2, [pc, #488]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b48c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	4b78      	ldr	r3, [pc, #480]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a77      	ldr	r2, [pc, #476]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e01d      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4a8:	d10c      	bne.n	800b4c4 <HAL_RCC_OscConfig+0xbc>
 800b4aa:	4b72      	ldr	r3, [pc, #456]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a71      	ldr	r2, [pc, #452]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	4b6f      	ldr	r3, [pc, #444]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a6e      	ldr	r2, [pc, #440]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	e00b      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b4c4:	4b6b      	ldr	r3, [pc, #428]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a6a      	ldr	r2, [pc, #424]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	4b68      	ldr	r3, [pc, #416]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a67      	ldr	r2, [pc, #412]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b4d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d013      	beq.n	800b50c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4e4:	f7fd ff4c 	bl	8009380 <HAL_GetTick>
 800b4e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4ec:	f7fd ff48 	bl	8009380 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b64      	cmp	r3, #100	@ 0x64
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e200      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4fe:	4b5d      	ldr	r3, [pc, #372]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0f0      	beq.n	800b4ec <HAL_RCC_OscConfig+0xe4>
 800b50a:	e014      	b.n	800b536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b50c:	f7fd ff38 	bl	8009380 <HAL_GetTick>
 800b510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b512:	e008      	b.n	800b526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b514:	f7fd ff34 	bl	8009380 <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b64      	cmp	r3, #100	@ 0x64
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e1ec      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b526:	4b53      	ldr	r3, [pc, #332]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1f0      	bne.n	800b514 <HAL_RCC_OscConfig+0x10c>
 800b532:	e000      	b.n	800b536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d063      	beq.n	800b60a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b542:	4b4c      	ldr	r3, [pc, #304]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f003 030c 	and.w	r3, r3, #12
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00b      	beq.n	800b566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b54e:	4b49      	ldr	r3, [pc, #292]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f003 030c 	and.w	r3, r3, #12
 800b556:	2b08      	cmp	r3, #8
 800b558:	d11c      	bne.n	800b594 <HAL_RCC_OscConfig+0x18c>
 800b55a:	4b46      	ldr	r3, [pc, #280]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d116      	bne.n	800b594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b566:	4b43      	ldr	r3, [pc, #268]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 0302 	and.w	r3, r3, #2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <HAL_RCC_OscConfig+0x176>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d001      	beq.n	800b57e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e1c0      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b57e:	4b3d      	ldr	r3, [pc, #244]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4939      	ldr	r1, [pc, #228]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b592:	e03a      	b.n	800b60a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d020      	beq.n	800b5de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b59c:	4b36      	ldr	r3, [pc, #216]	@ (800b678 <HAL_RCC_OscConfig+0x270>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5a2:	f7fd feed 	bl	8009380 <HAL_GetTick>
 800b5a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5a8:	e008      	b.n	800b5bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5aa:	f7fd fee9 	bl	8009380 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e1a1      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0f0      	beq.n	800b5aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5c8:	4b2a      	ldr	r3, [pc, #168]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	4927      	ldr	r1, [pc, #156]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	600b      	str	r3, [r1, #0]
 800b5dc:	e015      	b.n	800b60a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5de:	4b26      	ldr	r3, [pc, #152]	@ (800b678 <HAL_RCC_OscConfig+0x270>)
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5e4:	f7fd fecc 	bl	8009380 <HAL_GetTick>
 800b5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ea:	e008      	b.n	800b5fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5ec:	f7fd fec8 	bl	8009380 <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d901      	bls.n	800b5fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e180      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f0      	bne.n	800b5ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d03a      	beq.n	800b68c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d019      	beq.n	800b652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b61e:	4b17      	ldr	r3, [pc, #92]	@ (800b67c <HAL_RCC_OscConfig+0x274>)
 800b620:	2201      	movs	r2, #1
 800b622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b624:	f7fd feac 	bl	8009380 <HAL_GetTick>
 800b628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b62a:	e008      	b.n	800b63e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b62c:	f7fd fea8 	bl	8009380 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d901      	bls.n	800b63e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e160      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b63e:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <HAL_RCC_OscConfig+0x26c>)
 800b640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0f0      	beq.n	800b62c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b64a:	2001      	movs	r0, #1
 800b64c:	f000 face 	bl	800bbec <RCC_Delay>
 800b650:	e01c      	b.n	800b68c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <HAL_RCC_OscConfig+0x274>)
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b658:	f7fd fe92 	bl	8009380 <HAL_GetTick>
 800b65c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b65e:	e00f      	b.n	800b680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b660:	f7fd fe8e 	bl	8009380 <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d908      	bls.n	800b680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e146      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
 800b672:	bf00      	nop
 800b674:	40021000 	.word	0x40021000
 800b678:	42420000 	.word	0x42420000
 800b67c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b680:	4b92      	ldr	r3, [pc, #584]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e9      	bne.n	800b660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80a6 	beq.w	800b7e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b69a:	2300      	movs	r3, #0
 800b69c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b69e:	4b8b      	ldr	r3, [pc, #556]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10d      	bne.n	800b6c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6aa:	4b88      	ldr	r3, [pc, #544]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	4a87      	ldr	r2, [pc, #540]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b6b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6b4:	61d3      	str	r3, [r2, #28]
 800b6b6:	4b85      	ldr	r3, [pc, #532]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6c6:	4b82      	ldr	r3, [pc, #520]	@ (800b8d0 <HAL_RCC_OscConfig+0x4c8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d118      	bne.n	800b704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b6d2:	4b7f      	ldr	r3, [pc, #508]	@ (800b8d0 <HAL_RCC_OscConfig+0x4c8>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a7e      	ldr	r2, [pc, #504]	@ (800b8d0 <HAL_RCC_OscConfig+0x4c8>)
 800b6d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6de:	f7fd fe4f 	bl	8009380 <HAL_GetTick>
 800b6e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6e4:	e008      	b.n	800b6f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6e6:	f7fd fe4b 	bl	8009380 <HAL_GetTick>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	2b64      	cmp	r3, #100	@ 0x64
 800b6f2:	d901      	bls.n	800b6f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e103      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6f8:	4b75      	ldr	r3, [pc, #468]	@ (800b8d0 <HAL_RCC_OscConfig+0x4c8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0f0      	beq.n	800b6e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d106      	bne.n	800b71a <HAL_RCC_OscConfig+0x312>
 800b70c:	4b6f      	ldr	r3, [pc, #444]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	4a6e      	ldr	r2, [pc, #440]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	6213      	str	r3, [r2, #32]
 800b718:	e02d      	b.n	800b776 <HAL_RCC_OscConfig+0x36e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10c      	bne.n	800b73c <HAL_RCC_OscConfig+0x334>
 800b722:	4b6a      	ldr	r3, [pc, #424]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	4a69      	ldr	r2, [pc, #420]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b728:	f023 0301 	bic.w	r3, r3, #1
 800b72c:	6213      	str	r3, [r2, #32]
 800b72e:	4b67      	ldr	r3, [pc, #412]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	4a66      	ldr	r2, [pc, #408]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b734:	f023 0304 	bic.w	r3, r3, #4
 800b738:	6213      	str	r3, [r2, #32]
 800b73a:	e01c      	b.n	800b776 <HAL_RCC_OscConfig+0x36e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2b05      	cmp	r3, #5
 800b742:	d10c      	bne.n	800b75e <HAL_RCC_OscConfig+0x356>
 800b744:	4b61      	ldr	r3, [pc, #388]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	4a60      	ldr	r2, [pc, #384]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b74a:	f043 0304 	orr.w	r3, r3, #4
 800b74e:	6213      	str	r3, [r2, #32]
 800b750:	4b5e      	ldr	r3, [pc, #376]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	4a5d      	ldr	r2, [pc, #372]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b756:	f043 0301 	orr.w	r3, r3, #1
 800b75a:	6213      	str	r3, [r2, #32]
 800b75c:	e00b      	b.n	800b776 <HAL_RCC_OscConfig+0x36e>
 800b75e:	4b5b      	ldr	r3, [pc, #364]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	4a5a      	ldr	r2, [pc, #360]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b764:	f023 0301 	bic.w	r3, r3, #1
 800b768:	6213      	str	r3, [r2, #32]
 800b76a:	4b58      	ldr	r3, [pc, #352]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	4a57      	ldr	r2, [pc, #348]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b770:	f023 0304 	bic.w	r3, r3, #4
 800b774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d015      	beq.n	800b7aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b77e:	f7fd fdff 	bl	8009380 <HAL_GetTick>
 800b782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b784:	e00a      	b.n	800b79c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b786:	f7fd fdfb 	bl	8009380 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b794:	4293      	cmp	r3, r2
 800b796:	d901      	bls.n	800b79c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e0b1      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b79c:	4b4b      	ldr	r3, [pc, #300]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d0ee      	beq.n	800b786 <HAL_RCC_OscConfig+0x37e>
 800b7a8:	e014      	b.n	800b7d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7aa:	f7fd fde9 	bl	8009380 <HAL_GetTick>
 800b7ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7b0:	e00a      	b.n	800b7c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7b2:	f7fd fde5 	bl	8009380 <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e09b      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7c8:	4b40      	ldr	r3, [pc, #256]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1ee      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d105      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7da:	4b3c      	ldr	r3, [pc, #240]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4a3b      	ldr	r2, [pc, #236]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b7e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 8087 	beq.w	800b8fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7f0:	4b36      	ldr	r3, [pc, #216]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f003 030c 	and.w	r3, r3, #12
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d061      	beq.n	800b8c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d146      	bne.n	800b892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b804:	4b33      	ldr	r3, [pc, #204]	@ (800b8d4 <HAL_RCC_OscConfig+0x4cc>)
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b80a:	f7fd fdb9 	bl	8009380 <HAL_GetTick>
 800b80e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b810:	e008      	b.n	800b824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b812:	f7fd fdb5 	bl	8009380 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d901      	bls.n	800b824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b820:	2303      	movs	r3, #3
 800b822:	e06d      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b824:	4b29      	ldr	r3, [pc, #164]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1f0      	bne.n	800b812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b838:	d108      	bne.n	800b84c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b83a:	4b24      	ldr	r3, [pc, #144]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	4921      	ldr	r1, [pc, #132]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b84c:	4b1f      	ldr	r3, [pc, #124]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a19      	ldr	r1, [r3, #32]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85c:	430b      	orrs	r3, r1
 800b85e:	491b      	ldr	r1, [pc, #108]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b860:	4313      	orrs	r3, r2
 800b862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b864:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d4 <HAL_RCC_OscConfig+0x4cc>)
 800b866:	2201      	movs	r2, #1
 800b868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b86a:	f7fd fd89 	bl	8009380 <HAL_GetTick>
 800b86e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b870:	e008      	b.n	800b884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b872:	f7fd fd85 	bl	8009380 <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d901      	bls.n	800b884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e03d      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b884:	4b11      	ldr	r3, [pc, #68]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f0      	beq.n	800b872 <HAL_RCC_OscConfig+0x46a>
 800b890:	e035      	b.n	800b8fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b892:	4b10      	ldr	r3, [pc, #64]	@ (800b8d4 <HAL_RCC_OscConfig+0x4cc>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b898:	f7fd fd72 	bl	8009380 <HAL_GetTick>
 800b89c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b89e:	e008      	b.n	800b8b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8a0:	f7fd fd6e 	bl	8009380 <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d901      	bls.n	800b8b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e026      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8b2:	4b06      	ldr	r3, [pc, #24]	@ (800b8cc <HAL_RCC_OscConfig+0x4c4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1f0      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x498>
 800b8be:	e01e      	b.n	800b8fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d107      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e019      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	40007000 	.word	0x40007000
 800b8d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b908 <HAL_RCC_OscConfig+0x500>)
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d106      	bne.n	800b8fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d001      	beq.n	800b8fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	40021000 	.word	0x40021000

0800b90c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e0d0      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b920:	4b6a      	ldr	r3, [pc, #424]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0307 	and.w	r3, r3, #7
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d910      	bls.n	800b950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b92e:	4b67      	ldr	r3, [pc, #412]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f023 0207 	bic.w	r2, r3, #7
 800b936:	4965      	ldr	r1, [pc, #404]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b93e:	4b63      	ldr	r3, [pc, #396]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d001      	beq.n	800b950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e0b8      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0302 	and.w	r3, r3, #2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d020      	beq.n	800b99e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b968:	4b59      	ldr	r3, [pc, #356]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	4a58      	ldr	r2, [pc, #352]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b96e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0308 	and.w	r3, r3, #8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d005      	beq.n	800b98c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b980:	4b53      	ldr	r3, [pc, #332]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	4a52      	ldr	r2, [pc, #328]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b986:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b98a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b98c:	4b50      	ldr	r3, [pc, #320]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	494d      	ldr	r1, [pc, #308]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d040      	beq.n	800ba2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d107      	bne.n	800b9c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9b2:	4b47      	ldr	r3, [pc, #284]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d115      	bne.n	800b9ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e07f      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d107      	bne.n	800b9da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9ca:	4b41      	ldr	r3, [pc, #260]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e073      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9da:	4b3d      	ldr	r3, [pc, #244]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0302 	and.w	r3, r3, #2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e06b      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b9ea:	4b39      	ldr	r3, [pc, #228]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	f023 0203 	bic.w	r2, r3, #3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	4936      	ldr	r1, [pc, #216]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b9fc:	f7fd fcc0 	bl	8009380 <HAL_GetTick>
 800ba00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba02:	e00a      	b.n	800ba1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba04:	f7fd fcbc 	bl	8009380 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d901      	bls.n	800ba1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e053      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba1a:	4b2d      	ldr	r3, [pc, #180]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f003 020c 	and.w	r2, r3, #12
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d1eb      	bne.n	800ba04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba2c:	4b27      	ldr	r3, [pc, #156]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0307 	and.w	r3, r3, #7
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d210      	bcs.n	800ba5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba3a:	4b24      	ldr	r3, [pc, #144]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f023 0207 	bic.w	r2, r3, #7
 800ba42:	4922      	ldr	r1, [pc, #136]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba4a:	4b20      	ldr	r3, [pc, #128]	@ (800bacc <HAL_RCC_ClockConfig+0x1c0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 0307 	and.w	r3, r3, #7
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d001      	beq.n	800ba5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e032      	b.n	800bac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d008      	beq.n	800ba7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba68:	4b19      	ldr	r3, [pc, #100]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	4916      	ldr	r1, [pc, #88]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba76:	4313      	orrs	r3, r2
 800ba78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0308 	and.w	r3, r3, #8
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ba86:	4b12      	ldr	r3, [pc, #72]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	490e      	ldr	r1, [pc, #56]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ba9a:	f000 f821 	bl	800bae0 <HAL_RCC_GetSysClockFreq>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bad0 <HAL_RCC_ClockConfig+0x1c4>)
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	091b      	lsrs	r3, r3, #4
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	490a      	ldr	r1, [pc, #40]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c8>)
 800baac:	5ccb      	ldrb	r3, [r1, r3]
 800baae:	fa22 f303 	lsr.w	r3, r2, r3
 800bab2:	4a09      	ldr	r2, [pc, #36]	@ (800bad8 <HAL_RCC_ClockConfig+0x1cc>)
 800bab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bab6:	4b09      	ldr	r3, [pc, #36]	@ (800badc <HAL_RCC_ClockConfig+0x1d0>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7fd fc1e 	bl	80092fc <HAL_InitTick>

  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	40022000 	.word	0x40022000
 800bad0:	40021000 	.word	0x40021000
 800bad4:	0800dc98 	.word	0x0800dc98
 800bad8:	20000f78 	.word	0x20000f78
 800badc:	20000f7c 	.word	0x20000f7c

0800bae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	2300      	movs	r3, #0
 800baec:	60bb      	str	r3, [r7, #8]
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bafa:	4b1e      	ldr	r3, [pc, #120]	@ (800bb74 <HAL_RCC_GetSysClockFreq+0x94>)
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f003 030c 	and.w	r3, r3, #12
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d002      	beq.n	800bb10 <HAL_RCC_GetSysClockFreq+0x30>
 800bb0a:	2b08      	cmp	r3, #8
 800bb0c:	d003      	beq.n	800bb16 <HAL_RCC_GetSysClockFreq+0x36>
 800bb0e:	e027      	b.n	800bb60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bb10:	4b19      	ldr	r3, [pc, #100]	@ (800bb78 <HAL_RCC_GetSysClockFreq+0x98>)
 800bb12:	613b      	str	r3, [r7, #16]
      break;
 800bb14:	e027      	b.n	800bb66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	0c9b      	lsrs	r3, r3, #18
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	4a17      	ldr	r2, [pc, #92]	@ (800bb7c <HAL_RCC_GetSysClockFreq+0x9c>)
 800bb20:	5cd3      	ldrb	r3, [r2, r3]
 800bb22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d010      	beq.n	800bb50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bb2e:	4b11      	ldr	r3, [pc, #68]	@ (800bb74 <HAL_RCC_GetSysClockFreq+0x94>)
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	0c5b      	lsrs	r3, r3, #17
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	4a11      	ldr	r2, [pc, #68]	@ (800bb80 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bb3a:	5cd3      	ldrb	r3, [r2, r3]
 800bb3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a0d      	ldr	r2, [pc, #52]	@ (800bb78 <HAL_RCC_GetSysClockFreq+0x98>)
 800bb42:	fb03 f202 	mul.w	r2, r3, r2
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	e004      	b.n	800bb5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a0c      	ldr	r2, [pc, #48]	@ (800bb84 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb54:	fb02 f303 	mul.w	r3, r2, r3
 800bb58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	613b      	str	r3, [r7, #16]
      break;
 800bb5e:	e002      	b.n	800bb66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bb60:	4b05      	ldr	r3, [pc, #20]	@ (800bb78 <HAL_RCC_GetSysClockFreq+0x98>)
 800bb62:	613b      	str	r3, [r7, #16]
      break;
 800bb64:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb66:	693b      	ldr	r3, [r7, #16]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	371c      	adds	r7, #28
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bc80      	pop	{r7}
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	40021000 	.word	0x40021000
 800bb78:	007a1200 	.word	0x007a1200
 800bb7c:	0800dcb0 	.word	0x0800dcb0
 800bb80:	0800dcc0 	.word	0x0800dcc0
 800bb84:	003d0900 	.word	0x003d0900

0800bb88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb8c:	4b02      	ldr	r3, [pc, #8]	@ (800bb98 <HAL_RCC_GetHCLKFreq+0x10>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr
 800bb98:	20000f78 	.word	0x20000f78

0800bb9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bba0:	f7ff fff2 	bl	800bb88 <HAL_RCC_GetHCLKFreq>
 800bba4:	4602      	mov	r2, r0
 800bba6:	4b05      	ldr	r3, [pc, #20]	@ (800bbbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	0a1b      	lsrs	r3, r3, #8
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	4903      	ldr	r1, [pc, #12]	@ (800bbc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bbb2:	5ccb      	ldrb	r3, [r1, r3]
 800bbb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	40021000 	.word	0x40021000
 800bbc0:	0800dca8 	.word	0x0800dca8

0800bbc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bbc8:	f7ff ffde 	bl	800bb88 <HAL_RCC_GetHCLKFreq>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4b05      	ldr	r3, [pc, #20]	@ (800bbe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	0adb      	lsrs	r3, r3, #11
 800bbd4:	f003 0307 	and.w	r3, r3, #7
 800bbd8:	4903      	ldr	r1, [pc, #12]	@ (800bbe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbda:	5ccb      	ldrb	r3, [r1, r3]
 800bbdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	40021000 	.word	0x40021000
 800bbe8:	0800dca8 	.word	0x0800dca8

0800bbec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bbf4:	4b0a      	ldr	r3, [pc, #40]	@ (800bc20 <RCC_Delay+0x34>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a0a      	ldr	r2, [pc, #40]	@ (800bc24 <RCC_Delay+0x38>)
 800bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfe:	0a5b      	lsrs	r3, r3, #9
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bc08:	bf00      	nop
  }
  while (Delay --);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	1e5a      	subs	r2, r3, #1
 800bc0e:	60fa      	str	r2, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1f9      	bne.n	800bc08 <RCC_Delay+0x1c>
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bc80      	pop	{r7}
 800bc1e:	4770      	bx	lr
 800bc20:	20000f78 	.word	0x20000f78
 800bc24:	10624dd3 	.word	0x10624dd3

0800bc28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e041      	b.n	800bcbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7fd fa22 	bl	8009098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f000 fa82 	bl	800c170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d001      	beq.n	800bce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e044      	b.n	800bd6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68da      	ldr	r2, [r3, #12]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f042 0201 	orr.w	r2, r2, #1
 800bcf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd74 <HAL_TIM_Base_Start_IT+0xac>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d018      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x6c>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a1c      	ldr	r2, [pc, #112]	@ (800bd78 <HAL_TIM_Base_Start_IT+0xb0>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d013      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x6c>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd14:	d00e      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x6c>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a18      	ldr	r2, [pc, #96]	@ (800bd7c <HAL_TIM_Base_Start_IT+0xb4>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d009      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x6c>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a16      	ldr	r2, [pc, #88]	@ (800bd80 <HAL_TIM_Base_Start_IT+0xb8>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d004      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x6c>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a15      	ldr	r2, [pc, #84]	@ (800bd84 <HAL_TIM_Base_Start_IT+0xbc>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d111      	bne.n	800bd58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f003 0307 	and.w	r3, r3, #7
 800bd3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b06      	cmp	r3, #6
 800bd44:	d010      	beq.n	800bd68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0201 	orr.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd56:	e007      	b.n	800bd68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0201 	orr.w	r2, r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bc80      	pop	{r7}
 800bd72:	4770      	bx	lr
 800bd74:	40012c00 	.word	0x40012c00
 800bd78:	40013400 	.word	0x40013400
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800
 800bd84:	40000c00 	.word	0x40000c00

0800bd88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d122      	bne.n	800bde4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d11b      	bne.n	800bde4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f06f 0202 	mvn.w	r2, #2
 800bdb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	f003 0303 	and.w	r3, r3, #3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f9b4 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800bdd0:	e005      	b.n	800bdde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f9a7 	bl	800c126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f9b6 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d122      	bne.n	800be38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d11b      	bne.n	800be38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f06f 0204 	mvn.w	r2, #4
 800be08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f98a 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800be24:	e005      	b.n	800be32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f97d 	bl	800c126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f98c 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f003 0308 	and.w	r3, r3, #8
 800be42:	2b08      	cmp	r3, #8
 800be44:	d122      	bne.n	800be8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f003 0308 	and.w	r3, r3, #8
 800be50:	2b08      	cmp	r3, #8
 800be52:	d11b      	bne.n	800be8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0208 	mvn.w	r2, #8
 800be5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2204      	movs	r2, #4
 800be62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f960 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800be78:	e005      	b.n	800be86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f953 	bl	800c126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f962 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	f003 0310 	and.w	r3, r3, #16
 800be96:	2b10      	cmp	r3, #16
 800be98:	d122      	bne.n	800bee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f003 0310 	and.w	r3, r3, #16
 800bea4:	2b10      	cmp	r3, #16
 800bea6:	d11b      	bne.n	800bee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f06f 0210 	mvn.w	r2, #16
 800beb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2208      	movs	r2, #8
 800beb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f936 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800becc:	e005      	b.n	800beda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f929 	bl	800c126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f938 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b01      	cmp	r3, #1
 800beec:	d10e      	bne.n	800bf0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d107      	bne.n	800bf0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f06f 0201 	mvn.w	r2, #1
 800bf04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7fc fd5e 	bl	80089c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf16:	2b80      	cmp	r3, #128	@ 0x80
 800bf18:	d10e      	bne.n	800bf38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf24:	2b80      	cmp	r3, #128	@ 0x80
 800bf26:	d107      	bne.n	800bf38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bf30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 faa1 	bl	800c47a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf42:	2b40      	cmp	r3, #64	@ 0x40
 800bf44:	d10e      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf50:	2b40      	cmp	r3, #64	@ 0x40
 800bf52:	d107      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f8fc 	bl	800c15c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	d10e      	bne.n	800bf90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	2b20      	cmp	r3, #32
 800bf7e:	d107      	bne.n	800bf90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f06f 0220 	mvn.w	r2, #32
 800bf88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa6c 	bl	800c468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf90:	bf00      	nop
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_TIM_ConfigClockSource+0x1c>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e0b4      	b.n	800c11e <HAL_TIM_ConfigClockSource+0x186>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bfd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfec:	d03e      	beq.n	800c06c <HAL_TIM_ConfigClockSource+0xd4>
 800bfee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bff2:	f200 8087 	bhi.w	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800bff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bffa:	f000 8086 	beq.w	800c10a <HAL_TIM_ConfigClockSource+0x172>
 800bffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c002:	d87f      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c004:	2b70      	cmp	r3, #112	@ 0x70
 800c006:	d01a      	beq.n	800c03e <HAL_TIM_ConfigClockSource+0xa6>
 800c008:	2b70      	cmp	r3, #112	@ 0x70
 800c00a:	d87b      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c00c:	2b60      	cmp	r3, #96	@ 0x60
 800c00e:	d050      	beq.n	800c0b2 <HAL_TIM_ConfigClockSource+0x11a>
 800c010:	2b60      	cmp	r3, #96	@ 0x60
 800c012:	d877      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c014:	2b50      	cmp	r3, #80	@ 0x50
 800c016:	d03c      	beq.n	800c092 <HAL_TIM_ConfigClockSource+0xfa>
 800c018:	2b50      	cmp	r3, #80	@ 0x50
 800c01a:	d873      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c01c:	2b40      	cmp	r3, #64	@ 0x40
 800c01e:	d058      	beq.n	800c0d2 <HAL_TIM_ConfigClockSource+0x13a>
 800c020:	2b40      	cmp	r3, #64	@ 0x40
 800c022:	d86f      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c024:	2b30      	cmp	r3, #48	@ 0x30
 800c026:	d064      	beq.n	800c0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800c028:	2b30      	cmp	r3, #48	@ 0x30
 800c02a:	d86b      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c02c:	2b20      	cmp	r3, #32
 800c02e:	d060      	beq.n	800c0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800c030:	2b20      	cmp	r3, #32
 800c032:	d867      	bhi.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d05c      	beq.n	800c0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800c038:	2b10      	cmp	r3, #16
 800c03a:	d05a      	beq.n	800c0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800c03c:	e062      	b.n	800c104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c04e:	f000 f980 	bl	800c352 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	609a      	str	r2, [r3, #8]
      break;
 800c06a:	e04f      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c07c:	f000 f969 	bl	800c352 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c08e:	609a      	str	r2, [r3, #8]
      break;
 800c090:	e03c      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f000 f8e0 	bl	800c264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2150      	movs	r1, #80	@ 0x50
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f937 	bl	800c31e <TIM_ITRx_SetConfig>
      break;
 800c0b0:	e02c      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f000 f8fe 	bl	800c2c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2160      	movs	r1, #96	@ 0x60
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f927 	bl	800c31e <TIM_ITRx_SetConfig>
      break;
 800c0d0:	e01c      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f000 f8c0 	bl	800c264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2140      	movs	r1, #64	@ 0x40
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f917 	bl	800c31e <TIM_ITRx_SetConfig>
      break;
 800c0f0:	e00c      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	f000 f90e 	bl	800c31e <TIM_ITRx_SetConfig>
      break;
 800c102:	e003      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	73fb      	strb	r3, [r7, #15]
      break;
 800c108:	e000      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c10a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c126:	b480      	push	{r7}
 800c128:	b083      	sub	sp, #12
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c12e:	bf00      	nop
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	bc80      	pop	{r7}
 800c136:	4770      	bx	lr

0800c138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	bc80      	pop	{r7}
 800c148:	4770      	bx	lr

0800c14a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c152:	bf00      	nop
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr

0800c15c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr
	...

0800c170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a33      	ldr	r2, [pc, #204]	@ (800c250 <TIM_Base_SetConfig+0xe0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d013      	beq.n	800c1b0 <TIM_Base_SetConfig+0x40>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a32      	ldr	r2, [pc, #200]	@ (800c254 <TIM_Base_SetConfig+0xe4>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00f      	beq.n	800c1b0 <TIM_Base_SetConfig+0x40>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c196:	d00b      	beq.n	800c1b0 <TIM_Base_SetConfig+0x40>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a2f      	ldr	r2, [pc, #188]	@ (800c258 <TIM_Base_SetConfig+0xe8>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d007      	beq.n	800c1b0 <TIM_Base_SetConfig+0x40>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a2e      	ldr	r2, [pc, #184]	@ (800c25c <TIM_Base_SetConfig+0xec>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_Base_SetConfig+0x40>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c260 <TIM_Base_SetConfig+0xf0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d108      	bne.n	800c1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a22      	ldr	r2, [pc, #136]	@ (800c250 <TIM_Base_SetConfig+0xe0>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d013      	beq.n	800c1f2 <TIM_Base_SetConfig+0x82>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a21      	ldr	r2, [pc, #132]	@ (800c254 <TIM_Base_SetConfig+0xe4>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d00f      	beq.n	800c1f2 <TIM_Base_SetConfig+0x82>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1d8:	d00b      	beq.n	800c1f2 <TIM_Base_SetConfig+0x82>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a1e      	ldr	r2, [pc, #120]	@ (800c258 <TIM_Base_SetConfig+0xe8>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d007      	beq.n	800c1f2 <TIM_Base_SetConfig+0x82>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c25c <TIM_Base_SetConfig+0xec>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d003      	beq.n	800c1f2 <TIM_Base_SetConfig+0x82>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c260 <TIM_Base_SetConfig+0xf0>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d108      	bne.n	800c204 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	4313      	orrs	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a09      	ldr	r2, [pc, #36]	@ (800c250 <TIM_Base_SetConfig+0xe0>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d003      	beq.n	800c238 <TIM_Base_SetConfig+0xc8>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a08      	ldr	r2, [pc, #32]	@ (800c254 <TIM_Base_SetConfig+0xe4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d103      	bne.n	800c240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	691a      	ldr	r2, [r3, #16]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	615a      	str	r2, [r3, #20]
}
 800c246:	bf00      	nop
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bc80      	pop	{r7}
 800c24e:	4770      	bx	lr
 800c250:	40012c00 	.word	0x40012c00
 800c254:	40013400 	.word	0x40013400
 800c258:	40000400 	.word	0x40000400
 800c25c:	40000800 	.word	0x40000800
 800c260:	40000c00 	.word	0x40000c00

0800c264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c264:	b480      	push	{r7}
 800c266:	b087      	sub	sp, #28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	f023 0201 	bic.w	r2, r3, #1
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4313      	orrs	r3, r2
 800c298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f023 030a 	bic.w	r3, r3, #10
 800c2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	621a      	str	r2, [r3, #32]
}
 800c2b6:	bf00      	nop
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bc80      	pop	{r7}
 800c2be:	4770      	bx	lr

0800c2c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	f023 0210 	bic.w	r2, r3, #16
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	031b      	lsls	r3, r3, #12
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	011b      	lsls	r3, r3, #4
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	621a      	str	r2, [r3, #32]
}
 800c314:	bf00      	nop
 800c316:	371c      	adds	r7, #28
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c31e:	b480      	push	{r7}
 800c320:	b085      	sub	sp, #20
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	f043 0307 	orr.w	r3, r3, #7
 800c340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	609a      	str	r2, [r3, #8]
}
 800c348:	bf00      	nop
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr

0800c352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c352:	b480      	push	{r7}
 800c354:	b087      	sub	sp, #28
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
 800c35e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c36c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	021a      	lsls	r2, r3, #8
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	431a      	orrs	r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	4313      	orrs	r3, r2
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	609a      	str	r2, [r3, #8]
}
 800c386:	bf00      	nop
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc80      	pop	{r7}
 800c38e:	4770      	bx	lr

0800c390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e050      	b.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a1b      	ldr	r2, [pc, #108]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d018      	beq.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a19      	ldr	r2, [pc, #100]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d013      	beq.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3fe:	d00e      	beq.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a15      	ldr	r2, [pc, #84]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d009      	beq.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a14      	ldr	r2, [pc, #80]	@ (800c460 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d004      	beq.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a12      	ldr	r2, [pc, #72]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d10c      	bne.n	800c438 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	bc80      	pop	{r7}
 800c452:	4770      	bx	lr
 800c454:	40012c00 	.word	0x40012c00
 800c458:	40013400 	.word	0x40013400
 800c45c:	40000400 	.word	0x40000400
 800c460:	40000800 	.word	0x40000800
 800c464:	40000c00 	.word	0x40000c00

0800c468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	bc80      	pop	{r7}
 800c478:	4770      	bx	lr

0800c47a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c482:	bf00      	nop
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	bc80      	pop	{r7}
 800c48a:	4770      	bx	lr

0800c48c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e042      	b.n	800c524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fc fe16 	bl	80090e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2224      	movs	r2, #36	@ 0x24
 800c4bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c4ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fcb5 	bl	800ce40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	691a      	ldr	r2, [r3, #16]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695a      	ldr	r2, [r3, #20]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c4f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2220      	movs	r2, #32
 800c518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b20      	cmp	r3, #32
 800c544:	d121      	bne.n	800c58a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <HAL_UART_Transmit_IT+0x26>
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e01a      	b.n	800c58c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	88fa      	ldrh	r2, [r7, #6]
 800c560:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	88fa      	ldrh	r2, [r7, #6]
 800c566:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2221      	movs	r2, #33	@ 0x21
 800c572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68da      	ldr	r2, [r3, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c584:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	e000      	b.n	800c58c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c58a:	2302      	movs	r3, #2
  }
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	bc80      	pop	{r7}
 800c594:	4770      	bx	lr
	...

0800c598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b0ba      	sub	sp, #232	@ 0xe8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10f      	bne.n	800c5fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <HAL_UART_IRQHandler+0x66>
 800c5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5ee:	f003 0320 	and.w	r3, r3, #32
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fb63 	bl	800ccc2 <UART_Receive_IT>
      return;
 800c5fc:	e25b      	b.n	800cab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c5fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 80de 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x22c>
 800c608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80d1 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00b      	beq.n	800c646 <HAL_UART_IRQHandler+0xae>
 800c62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63e:	f043 0201 	orr.w	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <HAL_UART_IRQHandler+0xd2>
 800c652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c662:	f043 0202 	orr.w	r2, r3, #2
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c66e:	f003 0302 	and.w	r3, r3, #2
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <HAL_UART_IRQHandler+0xf6>
 800c676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c686:	f043 0204 	orr.w	r2, r3, #4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d011      	beq.n	800c6be <HAL_UART_IRQHandler+0x126>
 800c69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d105      	bne.n	800c6b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d005      	beq.n	800c6be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b6:	f043 0208 	orr.w	r2, r3, #8
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 81f2 	beq.w	800caac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6cc:	f003 0320 	and.w	r3, r3, #32
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x14e>
 800c6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6d8:	f003 0320 	and.w	r3, r3, #32
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 faee 	bl	800ccc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	bf14      	ite	ne
 800c6f4:	2301      	movne	r3, #1
 800c6f6:	2300      	moveq	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <HAL_UART_IRQHandler+0x17a>
 800c70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04f      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9f8 	bl	800cb08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d041      	beq.n	800c7aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3314      	adds	r3, #20
 800c72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3314      	adds	r3, #20
 800c74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1d9      	bne.n	800c726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d013      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c77e:	4a7e      	ldr	r2, [pc, #504]	@ (800c978 <HAL_UART_IRQHandler+0x3e0>)
 800c780:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c786:	4618      	mov	r0, r3
 800c788:	f7fd f86c 	bl	8009864 <HAL_DMA_Abort_IT>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d016      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a0:	e00e      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f99c 	bl	800cae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a8:	e00a      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f998 	bl	800cae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b0:	e006      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f994 	bl	800cae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c7be:	e175      	b.n	800caac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c0:	bf00      	nop
    return;
 800c7c2:	e173      	b.n	800caac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	f040 814f 	bne.w	800ca6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8148 	beq.w	800ca6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7e0:	f003 0310 	and.w	r3, r3, #16
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8141 	beq.w	800ca6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60bb      	str	r3, [r7, #8]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 80b6 	beq.w	800c97c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c81c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 8145 	beq.w	800cab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c82a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c82e:	429a      	cmp	r2, r3
 800c830:	f080 813e 	bcs.w	800cab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c83a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b20      	cmp	r3, #32
 800c844:	f000 8088 	beq.w	800c958 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	330c      	adds	r3, #12
 800c84e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c85e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c866:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	330c      	adds	r3, #12
 800c870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c874:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c880:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1d9      	bne.n	800c848 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3314      	adds	r3, #20
 800c89a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c89e:	e853 3f00 	ldrex	r3, [r3]
 800c8a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8a6:	f023 0301 	bic.w	r3, r3, #1
 800c8aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3314      	adds	r3, #20
 800c8b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e1      	bne.n	800c894 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3314      	adds	r3, #20
 800c8d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8da:	e853 3f00 	ldrex	r3, [r3]
 800c8de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3314      	adds	r3, #20
 800c8f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e3      	bne.n	800c8d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2220      	movs	r2, #32
 800c90c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	330c      	adds	r3, #12
 800c91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c920:	e853 3f00 	ldrex	r3, [r3]
 800c924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c928:	f023 0310 	bic.w	r3, r3, #16
 800c92c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	330c      	adds	r3, #12
 800c936:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c93a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c93c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1e3      	bne.n	800c916 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c952:	4618      	mov	r0, r3
 800c954:	f7fc ff4b 	bl	80097ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c966:	b29b      	uxth	r3, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f8bf 	bl	800caf2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c974:	e09c      	b.n	800cab0 <HAL_UART_IRQHandler+0x518>
 800c976:	bf00      	nop
 800c978:	0800cbcd 	.word	0x0800cbcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c984:	b29b      	uxth	r3, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c990:	b29b      	uxth	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 808e 	beq.w	800cab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 8089 	beq.w	800cab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	330c      	adds	r3, #12
 800c9a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	e853 3f00 	ldrex	r3, [r3]
 800c9b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c9c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e3      	bne.n	800c9a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3314      	adds	r3, #20
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f023 0301 	bic.w	r3, r3, #1
 800c9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3314      	adds	r3, #20
 800c9fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c9fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e3      	bne.n	800c9da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2220      	movs	r2, #32
 800ca16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	330c      	adds	r3, #12
 800ca26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	e853 3f00 	ldrex	r3, [r3]
 800ca2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0310 	bic.w	r3, r3, #16
 800ca36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	330c      	adds	r3, #12
 800ca40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ca44:	61fa      	str	r2, [r7, #28]
 800ca46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca48:	69b9      	ldr	r1, [r7, #24]
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	e841 2300 	strex	r3, r2, [r1]
 800ca50:	617b      	str	r3, [r7, #20]
   return(result);
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e3      	bne.n	800ca20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f844 	bl	800caf2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca6a:	e023      	b.n	800cab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d009      	beq.n	800ca8c <HAL_UART_IRQHandler+0x4f4>
 800ca78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f8b5 	bl	800cbf4 <UART_Transmit_IT>
    return;
 800ca8a:	e014      	b.n	800cab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <HAL_UART_IRQHandler+0x51e>
 800ca98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f8f4 	bl	800cc92 <UART_EndTransmit_IT>
    return;
 800caaa:	e004      	b.n	800cab6 <HAL_UART_IRQHandler+0x51e>
    return;
 800caac:	bf00      	nop
 800caae:	e002      	b.n	800cab6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cab4:	bf00      	nop
  }
}
 800cab6:	37e8      	adds	r7, #232	@ 0xe8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	bc80      	pop	{r7}
 800cacc:	4770      	bx	lr

0800cace <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	bc80      	pop	{r7}
 800cade:	4770      	bx	lr

0800cae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	bc80      	pop	{r7}
 800caf0:	4770      	bx	lr

0800caf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b083      	sub	sp, #12
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	460b      	mov	r3, r1
 800cafc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cafe:	bf00      	nop
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bc80      	pop	{r7}
 800cb06:	4770      	bx	lr

0800cb08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b095      	sub	sp, #84	@ 0x54
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	330c      	adds	r3, #12
 800cb16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb1a:	e853 3f00 	ldrex	r3, [r3]
 800cb1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb30:	643a      	str	r2, [r7, #64]	@ 0x40
 800cb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb38:	e841 2300 	strex	r3, r2, [r1]
 800cb3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1e5      	bne.n	800cb10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3314      	adds	r3, #20
 800cb4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	e853 3f00 	ldrex	r3, [r3]
 800cb52:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	f023 0301 	bic.w	r3, r3, #1
 800cb5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3314      	adds	r3, #20
 800cb62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb6c:	e841 2300 	strex	r3, r2, [r1]
 800cb70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e5      	bne.n	800cb44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d119      	bne.n	800cbb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	330c      	adds	r3, #12
 800cb86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	e853 3f00 	ldrex	r3, [r3]
 800cb8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f023 0310 	bic.w	r3, r3, #16
 800cb96:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	330c      	adds	r3, #12
 800cb9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cba0:	61ba      	str	r2, [r7, #24]
 800cba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba4:	6979      	ldr	r1, [r7, #20]
 800cba6:	69ba      	ldr	r2, [r7, #24]
 800cba8:	e841 2300 	strex	r3, r2, [r1]
 800cbac:	613b      	str	r3, [r7, #16]
   return(result);
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e5      	bne.n	800cb80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cbc2:	bf00      	nop
 800cbc4:	3754      	adds	r7, #84	@ 0x54
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr

0800cbcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7ff ff7a 	bl	800cae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbec:	bf00      	nop
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b21      	cmp	r3, #33	@ 0x21
 800cc06:	d13e      	bne.n	800cc86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc10:	d114      	bne.n	800cc3c <UART_Transmit_IT+0x48>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d110      	bne.n	800cc3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	461a      	mov	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	1c9a      	adds	r2, r3, #2
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	621a      	str	r2, [r3, #32]
 800cc3a:	e008      	b.n	800cc4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	1c59      	adds	r1, r3, #1
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	6211      	str	r1, [r2, #32]
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10f      	bne.n	800cc82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68da      	ldr	r2, [r3, #12]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68da      	ldr	r2, [r3, #12]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e000      	b.n	800cc88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc86:	2302      	movs	r3, #2
  }
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bc80      	pop	{r7}
 800cc90:	4770      	bx	lr

0800cc92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b082      	sub	sp, #8
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68da      	ldr	r2, [r3, #12]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff ff02 	bl	800cabc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b08c      	sub	sp, #48	@ 0x30
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b22      	cmp	r3, #34	@ 0x22
 800ccd4:	f040 80ae 	bne.w	800ce34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce0:	d117      	bne.n	800cd12 <UART_Receive_IT+0x50>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d113      	bne.n	800cd12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0a:	1c9a      	adds	r2, r3, #2
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd10:	e026      	b.n	800cd60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd24:	d007      	beq.n	800cd36 <UART_Receive_IT+0x74>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10a      	bne.n	800cd44 <UART_Receive_IT+0x82>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd40:	701a      	strb	r2, [r3, #0]
 800cd42:	e008      	b.n	800cd56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	3b01      	subs	r3, #1
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d15d      	bne.n	800ce30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68da      	ldr	r2, [r3, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f022 0220 	bic.w	r2, r2, #32
 800cd82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	695a      	ldr	r2, [r3, #20]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f022 0201 	bic.w	r2, r2, #1
 800cda2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2220      	movs	r2, #32
 800cda8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d135      	bne.n	800ce26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	330c      	adds	r3, #12
 800cdc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	e853 3f00 	ldrex	r3, [r3]
 800cdce:	613b      	str	r3, [r7, #16]
   return(result);
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f023 0310 	bic.w	r3, r3, #16
 800cdd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	330c      	adds	r3, #12
 800cdde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cde0:	623a      	str	r2, [r7, #32]
 800cde2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde4:	69f9      	ldr	r1, [r7, #28]
 800cde6:	6a3a      	ldr	r2, [r7, #32]
 800cde8:	e841 2300 	strex	r3, r2, [r1]
 800cdec:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1e5      	bne.n	800cdc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0310 	and.w	r3, r3, #16
 800cdfe:	2b10      	cmp	r3, #16
 800ce00:	d10a      	bne.n	800ce18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce02:	2300      	movs	r3, #0
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7ff fe67 	bl	800caf2 <HAL_UARTEx_RxEventCallback>
 800ce24:	e002      	b.n	800ce2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff fe51 	bl	800cace <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e002      	b.n	800ce36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	e000      	b.n	800ce36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ce34:	2302      	movs	r3, #2
  }
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3730      	adds	r7, #48	@ 0x30
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689a      	ldr	r2, [r3, #8]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	431a      	orrs	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ce7a:	f023 030c 	bic.w	r3, r3, #12
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	6812      	ldr	r2, [r2, #0]
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	430b      	orrs	r3, r1
 800ce86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	699a      	ldr	r2, [r3, #24]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a2c      	ldr	r2, [pc, #176]	@ (800cf54 <UART_SetConfig+0x114>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d103      	bne.n	800ceb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cea8:	f7fe fe8c 	bl	800bbc4 <HAL_RCC_GetPCLK2Freq>
 800ceac:	60f8      	str	r0, [r7, #12]
 800ceae:	e002      	b.n	800ceb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ceb0:	f7fe fe74 	bl	800bb9c <HAL_RCC_GetPCLK1Freq>
 800ceb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009a      	lsls	r2, r3, #2
 800cec0:	441a      	add	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cecc:	4a22      	ldr	r2, [pc, #136]	@ (800cf58 <UART_SetConfig+0x118>)
 800cece:	fba2 2303 	umull	r2, r3, r2, r3
 800ced2:	095b      	lsrs	r3, r3, #5
 800ced4:	0119      	lsls	r1, r3, #4
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	009a      	lsls	r2, r3, #2
 800cee0:	441a      	add	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	fbb2 f2f3 	udiv	r2, r2, r3
 800ceec:	4b1a      	ldr	r3, [pc, #104]	@ (800cf58 <UART_SetConfig+0x118>)
 800ceee:	fba3 0302 	umull	r0, r3, r3, r2
 800cef2:	095b      	lsrs	r3, r3, #5
 800cef4:	2064      	movs	r0, #100	@ 0x64
 800cef6:	fb00 f303 	mul.w	r3, r0, r3
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	011b      	lsls	r3, r3, #4
 800cefe:	3332      	adds	r3, #50	@ 0x32
 800cf00:	4a15      	ldr	r2, [pc, #84]	@ (800cf58 <UART_SetConfig+0x118>)
 800cf02:	fba2 2303 	umull	r2, r3, r2, r3
 800cf06:	095b      	lsrs	r3, r3, #5
 800cf08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf0c:	4419      	add	r1, r3
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	4613      	mov	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	009a      	lsls	r2, r3, #2
 800cf18:	441a      	add	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf24:	4b0c      	ldr	r3, [pc, #48]	@ (800cf58 <UART_SetConfig+0x118>)
 800cf26:	fba3 0302 	umull	r0, r3, r3, r2
 800cf2a:	095b      	lsrs	r3, r3, #5
 800cf2c:	2064      	movs	r0, #100	@ 0x64
 800cf2e:	fb00 f303 	mul.w	r3, r0, r3
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	011b      	lsls	r3, r3, #4
 800cf36:	3332      	adds	r3, #50	@ 0x32
 800cf38:	4a07      	ldr	r2, [pc, #28]	@ (800cf58 <UART_SetConfig+0x118>)
 800cf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3e:	095b      	lsrs	r3, r3, #5
 800cf40:	f003 020f 	and.w	r2, r3, #15
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	440a      	add	r2, r1
 800cf4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cf4c:	bf00      	nop
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	40013800 	.word	0x40013800
 800cf58:	51eb851f 	.word	0x51eb851f

0800cf5c <__itoa>:
 800cf5c:	1e93      	subs	r3, r2, #2
 800cf5e:	2b22      	cmp	r3, #34	@ 0x22
 800cf60:	b510      	push	{r4, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	d904      	bls.n	800cf70 <__itoa+0x14>
 800cf66:	2300      	movs	r3, #0
 800cf68:	461c      	mov	r4, r3
 800cf6a:	700b      	strb	r3, [r1, #0]
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	bd10      	pop	{r4, pc}
 800cf70:	2a0a      	cmp	r2, #10
 800cf72:	d109      	bne.n	800cf88 <__itoa+0x2c>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	da07      	bge.n	800cf88 <__itoa+0x2c>
 800cf78:	232d      	movs	r3, #45	@ 0x2d
 800cf7a:	700b      	strb	r3, [r1, #0]
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	4240      	negs	r0, r0
 800cf80:	4421      	add	r1, r4
 800cf82:	f000 f8db 	bl	800d13c <__utoa>
 800cf86:	e7f1      	b.n	800cf6c <__itoa+0x10>
 800cf88:	2100      	movs	r1, #0
 800cf8a:	e7f9      	b.n	800cf80 <__itoa+0x24>

0800cf8c <itoa>:
 800cf8c:	f7ff bfe6 	b.w	800cf5c <__itoa>

0800cf90 <malloc>:
 800cf90:	4b02      	ldr	r3, [pc, #8]	@ (800cf9c <malloc+0xc>)
 800cf92:	4601      	mov	r1, r0
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	f000 b825 	b.w	800cfe4 <_malloc_r>
 800cf9a:	bf00      	nop
 800cf9c:	20000f84 	.word	0x20000f84

0800cfa0 <sbrk_aligned>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	4e0f      	ldr	r6, [pc, #60]	@ (800cfe0 <sbrk_aligned+0x40>)
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	6831      	ldr	r1, [r6, #0]
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	b911      	cbnz	r1, 800cfb2 <sbrk_aligned+0x12>
 800cfac:	f000 f932 	bl	800d214 <_sbrk_r>
 800cfb0:	6030      	str	r0, [r6, #0]
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f000 f92d 	bl	800d214 <_sbrk_r>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	d103      	bne.n	800cfc6 <sbrk_aligned+0x26>
 800cfbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	1cc4      	adds	r4, r0, #3
 800cfc8:	f024 0403 	bic.w	r4, r4, #3
 800cfcc:	42a0      	cmp	r0, r4
 800cfce:	d0f8      	beq.n	800cfc2 <sbrk_aligned+0x22>
 800cfd0:	1a21      	subs	r1, r4, r0
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f000 f91e 	bl	800d214 <_sbrk_r>
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d1f2      	bne.n	800cfc2 <sbrk_aligned+0x22>
 800cfdc:	e7ef      	b.n	800cfbe <sbrk_aligned+0x1e>
 800cfde:	bf00      	nop
 800cfe0:	20001a30 	.word	0x20001a30

0800cfe4 <_malloc_r>:
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	1ccd      	adds	r5, r1, #3
 800cfea:	f025 0503 	bic.w	r5, r5, #3
 800cfee:	3508      	adds	r5, #8
 800cff0:	2d0c      	cmp	r5, #12
 800cff2:	bf38      	it	cc
 800cff4:	250c      	movcc	r5, #12
 800cff6:	2d00      	cmp	r5, #0
 800cff8:	4606      	mov	r6, r0
 800cffa:	db01      	blt.n	800d000 <_malloc_r+0x1c>
 800cffc:	42a9      	cmp	r1, r5
 800cffe:	d904      	bls.n	800d00a <_malloc_r+0x26>
 800d000:	230c      	movs	r3, #12
 800d002:	6033      	str	r3, [r6, #0]
 800d004:	2000      	movs	r0, #0
 800d006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0e0 <_malloc_r+0xfc>
 800d00e:	f000 f869 	bl	800d0e4 <__malloc_lock>
 800d012:	f8d8 3000 	ldr.w	r3, [r8]
 800d016:	461c      	mov	r4, r3
 800d018:	bb44      	cbnz	r4, 800d06c <_malloc_r+0x88>
 800d01a:	4629      	mov	r1, r5
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff ffbf 	bl	800cfa0 <sbrk_aligned>
 800d022:	1c43      	adds	r3, r0, #1
 800d024:	4604      	mov	r4, r0
 800d026:	d158      	bne.n	800d0da <_malloc_r+0xf6>
 800d028:	f8d8 4000 	ldr.w	r4, [r8]
 800d02c:	4627      	mov	r7, r4
 800d02e:	2f00      	cmp	r7, #0
 800d030:	d143      	bne.n	800d0ba <_malloc_r+0xd6>
 800d032:	2c00      	cmp	r4, #0
 800d034:	d04b      	beq.n	800d0ce <_malloc_r+0xea>
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	4639      	mov	r1, r7
 800d03a:	4630      	mov	r0, r6
 800d03c:	eb04 0903 	add.w	r9, r4, r3
 800d040:	f000 f8e8 	bl	800d214 <_sbrk_r>
 800d044:	4581      	cmp	r9, r0
 800d046:	d142      	bne.n	800d0ce <_malloc_r+0xea>
 800d048:	6821      	ldr	r1, [r4, #0]
 800d04a:	4630      	mov	r0, r6
 800d04c:	1a6d      	subs	r5, r5, r1
 800d04e:	4629      	mov	r1, r5
 800d050:	f7ff ffa6 	bl	800cfa0 <sbrk_aligned>
 800d054:	3001      	adds	r0, #1
 800d056:	d03a      	beq.n	800d0ce <_malloc_r+0xea>
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	442b      	add	r3, r5
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	f8d8 3000 	ldr.w	r3, [r8]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	bb62      	cbnz	r2, 800d0c0 <_malloc_r+0xdc>
 800d066:	f8c8 7000 	str.w	r7, [r8]
 800d06a:	e00f      	b.n	800d08c <_malloc_r+0xa8>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	1b52      	subs	r2, r2, r5
 800d070:	d420      	bmi.n	800d0b4 <_malloc_r+0xd0>
 800d072:	2a0b      	cmp	r2, #11
 800d074:	d917      	bls.n	800d0a6 <_malloc_r+0xc2>
 800d076:	1961      	adds	r1, r4, r5
 800d078:	42a3      	cmp	r3, r4
 800d07a:	6025      	str	r5, [r4, #0]
 800d07c:	bf18      	it	ne
 800d07e:	6059      	strne	r1, [r3, #4]
 800d080:	6863      	ldr	r3, [r4, #4]
 800d082:	bf08      	it	eq
 800d084:	f8c8 1000 	streq.w	r1, [r8]
 800d088:	5162      	str	r2, [r4, r5]
 800d08a:	604b      	str	r3, [r1, #4]
 800d08c:	4630      	mov	r0, r6
 800d08e:	f000 f82f 	bl	800d0f0 <__malloc_unlock>
 800d092:	f104 000b 	add.w	r0, r4, #11
 800d096:	1d23      	adds	r3, r4, #4
 800d098:	f020 0007 	bic.w	r0, r0, #7
 800d09c:	1ac2      	subs	r2, r0, r3
 800d09e:	bf1c      	itt	ne
 800d0a0:	1a1b      	subne	r3, r3, r0
 800d0a2:	50a3      	strne	r3, [r4, r2]
 800d0a4:	e7af      	b.n	800d006 <_malloc_r+0x22>
 800d0a6:	6862      	ldr	r2, [r4, #4]
 800d0a8:	42a3      	cmp	r3, r4
 800d0aa:	bf0c      	ite	eq
 800d0ac:	f8c8 2000 	streq.w	r2, [r8]
 800d0b0:	605a      	strne	r2, [r3, #4]
 800d0b2:	e7eb      	b.n	800d08c <_malloc_r+0xa8>
 800d0b4:	4623      	mov	r3, r4
 800d0b6:	6864      	ldr	r4, [r4, #4]
 800d0b8:	e7ae      	b.n	800d018 <_malloc_r+0x34>
 800d0ba:	463c      	mov	r4, r7
 800d0bc:	687f      	ldr	r7, [r7, #4]
 800d0be:	e7b6      	b.n	800d02e <_malloc_r+0x4a>
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	d1fb      	bne.n	800d0c0 <_malloc_r+0xdc>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	6053      	str	r3, [r2, #4]
 800d0cc:	e7de      	b.n	800d08c <_malloc_r+0xa8>
 800d0ce:	230c      	movs	r3, #12
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	f000 f80c 	bl	800d0f0 <__malloc_unlock>
 800d0d8:	e794      	b.n	800d004 <_malloc_r+0x20>
 800d0da:	6005      	str	r5, [r0, #0]
 800d0dc:	e7d6      	b.n	800d08c <_malloc_r+0xa8>
 800d0de:	bf00      	nop
 800d0e0:	20001a34 	.word	0x20001a34

0800d0e4 <__malloc_lock>:
 800d0e4:	4801      	ldr	r0, [pc, #4]	@ (800d0ec <__malloc_lock+0x8>)
 800d0e6:	f000 b8cf 	b.w	800d288 <__retarget_lock_acquire_recursive>
 800d0ea:	bf00      	nop
 800d0ec:	20001b70 	.word	0x20001b70

0800d0f0 <__malloc_unlock>:
 800d0f0:	4801      	ldr	r0, [pc, #4]	@ (800d0f8 <__malloc_unlock+0x8>)
 800d0f2:	f000 b8ca 	b.w	800d28a <__retarget_lock_release_recursive>
 800d0f6:	bf00      	nop
 800d0f8:	20001b70 	.word	0x20001b70

0800d0fc <siprintf>:
 800d0fc:	b40e      	push	{r1, r2, r3}
 800d0fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d102:	b500      	push	{lr}
 800d104:	b09c      	sub	sp, #112	@ 0x70
 800d106:	ab1d      	add	r3, sp, #116	@ 0x74
 800d108:	9002      	str	r0, [sp, #8]
 800d10a:	9006      	str	r0, [sp, #24]
 800d10c:	9107      	str	r1, [sp, #28]
 800d10e:	9104      	str	r1, [sp, #16]
 800d110:	4808      	ldr	r0, [pc, #32]	@ (800d134 <siprintf+0x38>)
 800d112:	4909      	ldr	r1, [pc, #36]	@ (800d138 <siprintf+0x3c>)
 800d114:	f853 2b04 	ldr.w	r2, [r3], #4
 800d118:	9105      	str	r1, [sp, #20]
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	a902      	add	r1, sp, #8
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	f000 f960 	bl	800d3e4 <_svfiprintf_r>
 800d124:	2200      	movs	r2, #0
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	b01c      	add	sp, #112	@ 0x70
 800d12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d130:	b003      	add	sp, #12
 800d132:	4770      	bx	lr
 800d134:	20000f84 	.word	0x20000f84
 800d138:	ffff0208 	.word	0xffff0208

0800d13c <__utoa>:
 800d13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13e:	b08b      	sub	sp, #44	@ 0x2c
 800d140:	4605      	mov	r5, r0
 800d142:	460b      	mov	r3, r1
 800d144:	466e      	mov	r6, sp
 800d146:	4c1d      	ldr	r4, [pc, #116]	@ (800d1bc <__utoa+0x80>)
 800d148:	f104 0c20 	add.w	ip, r4, #32
 800d14c:	4637      	mov	r7, r6
 800d14e:	6820      	ldr	r0, [r4, #0]
 800d150:	6861      	ldr	r1, [r4, #4]
 800d152:	3408      	adds	r4, #8
 800d154:	c703      	stmia	r7!, {r0, r1}
 800d156:	4564      	cmp	r4, ip
 800d158:	463e      	mov	r6, r7
 800d15a:	d1f7      	bne.n	800d14c <__utoa+0x10>
 800d15c:	7921      	ldrb	r1, [r4, #4]
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	7139      	strb	r1, [r7, #4]
 800d162:	1e91      	subs	r1, r2, #2
 800d164:	2922      	cmp	r1, #34	@ 0x22
 800d166:	6038      	str	r0, [r7, #0]
 800d168:	f04f 0100 	mov.w	r1, #0
 800d16c:	d904      	bls.n	800d178 <__utoa+0x3c>
 800d16e:	7019      	strb	r1, [r3, #0]
 800d170:	460b      	mov	r3, r1
 800d172:	4618      	mov	r0, r3
 800d174:	b00b      	add	sp, #44	@ 0x2c
 800d176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d178:	1e58      	subs	r0, r3, #1
 800d17a:	4684      	mov	ip, r0
 800d17c:	fbb5 f7f2 	udiv	r7, r5, r2
 800d180:	fb02 5617 	mls	r6, r2, r7, r5
 800d184:	3628      	adds	r6, #40	@ 0x28
 800d186:	446e      	add	r6, sp
 800d188:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d18c:	460c      	mov	r4, r1
 800d18e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d192:	462e      	mov	r6, r5
 800d194:	42b2      	cmp	r2, r6
 800d196:	463d      	mov	r5, r7
 800d198:	f101 0101 	add.w	r1, r1, #1
 800d19c:	d9ee      	bls.n	800d17c <__utoa+0x40>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	545a      	strb	r2, [r3, r1]
 800d1a2:	1919      	adds	r1, r3, r4
 800d1a4:	1aa5      	subs	r5, r4, r2
 800d1a6:	42aa      	cmp	r2, r5
 800d1a8:	dae3      	bge.n	800d172 <__utoa+0x36>
 800d1aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d1ae:	780e      	ldrb	r6, [r1, #0]
 800d1b0:	3201      	adds	r2, #1
 800d1b2:	7006      	strb	r6, [r0, #0]
 800d1b4:	f801 5901 	strb.w	r5, [r1], #-1
 800d1b8:	e7f4      	b.n	800d1a4 <__utoa+0x68>
 800d1ba:	bf00      	nop
 800d1bc:	0800dcc2 	.word	0x0800dcc2

0800d1c0 <strcat>:
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	7814      	ldrb	r4, [r2, #0]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	3201      	adds	r2, #1
 800d1ca:	2c00      	cmp	r4, #0
 800d1cc:	d1fa      	bne.n	800d1c4 <strcat+0x4>
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d1f9      	bne.n	800d1d0 <strcat+0x10>
 800d1dc:	bd10      	pop	{r4, pc}

0800d1de <strncpy>:
 800d1de:	4603      	mov	r3, r0
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	3901      	subs	r1, #1
 800d1e4:	b132      	cbz	r2, 800d1f4 <strncpy+0x16>
 800d1e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1ea:	3a01      	subs	r2, #1
 800d1ec:	f803 4b01 	strb.w	r4, [r3], #1
 800d1f0:	2c00      	cmp	r4, #0
 800d1f2:	d1f7      	bne.n	800d1e4 <strncpy+0x6>
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	441a      	add	r2, r3
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d100      	bne.n	800d1fe <strncpy+0x20>
 800d1fc:	bd10      	pop	{r4, pc}
 800d1fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d202:	e7f9      	b.n	800d1f8 <strncpy+0x1a>

0800d204 <memset>:
 800d204:	4603      	mov	r3, r0
 800d206:	4402      	add	r2, r0
 800d208:	4293      	cmp	r3, r2
 800d20a:	d100      	bne.n	800d20e <memset+0xa>
 800d20c:	4770      	bx	lr
 800d20e:	f803 1b01 	strb.w	r1, [r3], #1
 800d212:	e7f9      	b.n	800d208 <memset+0x4>

0800d214 <_sbrk_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	2300      	movs	r3, #0
 800d218:	4d05      	ldr	r5, [pc, #20]	@ (800d230 <_sbrk_r+0x1c>)
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	602b      	str	r3, [r5, #0]
 800d220:	f7fb fff4 	bl	800920c <_sbrk>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_sbrk_r+0x1a>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_sbrk_r+0x1a>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	20001b74 	.word	0x20001b74

0800d234 <__errno>:
 800d234:	4b01      	ldr	r3, [pc, #4]	@ (800d23c <__errno+0x8>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	20000f84 	.word	0x20000f84

0800d240 <__libc_init_array>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	2600      	movs	r6, #0
 800d244:	4d0c      	ldr	r5, [pc, #48]	@ (800d278 <__libc_init_array+0x38>)
 800d246:	4c0d      	ldr	r4, [pc, #52]	@ (800d27c <__libc_init_array+0x3c>)
 800d248:	1b64      	subs	r4, r4, r5
 800d24a:	10a4      	asrs	r4, r4, #2
 800d24c:	42a6      	cmp	r6, r4
 800d24e:	d109      	bne.n	800d264 <__libc_init_array+0x24>
 800d250:	f000 fbc2 	bl	800d9d8 <_init>
 800d254:	2600      	movs	r6, #0
 800d256:	4d0a      	ldr	r5, [pc, #40]	@ (800d280 <__libc_init_array+0x40>)
 800d258:	4c0a      	ldr	r4, [pc, #40]	@ (800d284 <__libc_init_array+0x44>)
 800d25a:	1b64      	subs	r4, r4, r5
 800d25c:	10a4      	asrs	r4, r4, #2
 800d25e:	42a6      	cmp	r6, r4
 800d260:	d105      	bne.n	800d26e <__libc_init_array+0x2e>
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	f855 3b04 	ldr.w	r3, [r5], #4
 800d268:	4798      	blx	r3
 800d26a:	3601      	adds	r6, #1
 800d26c:	e7ee      	b.n	800d24c <__libc_init_array+0xc>
 800d26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d272:	4798      	blx	r3
 800d274:	3601      	adds	r6, #1
 800d276:	e7f2      	b.n	800d25e <__libc_init_array+0x1e>
 800d278:	0800dd24 	.word	0x0800dd24
 800d27c:	0800dd24 	.word	0x0800dd24
 800d280:	0800dd24 	.word	0x0800dd24
 800d284:	0800dd28 	.word	0x0800dd28

0800d288 <__retarget_lock_acquire_recursive>:
 800d288:	4770      	bx	lr

0800d28a <__retarget_lock_release_recursive>:
 800d28a:	4770      	bx	lr

0800d28c <strcpy>:
 800d28c:	4603      	mov	r3, r0
 800d28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d292:	f803 2b01 	strb.w	r2, [r3], #1
 800d296:	2a00      	cmp	r2, #0
 800d298:	d1f9      	bne.n	800d28e <strcpy+0x2>
 800d29a:	4770      	bx	lr

0800d29c <_free_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4605      	mov	r5, r0
 800d2a0:	2900      	cmp	r1, #0
 800d2a2:	d040      	beq.n	800d326 <_free_r+0x8a>
 800d2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a8:	1f0c      	subs	r4, r1, #4
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	bfb8      	it	lt
 800d2ae:	18e4      	addlt	r4, r4, r3
 800d2b0:	f7ff ff18 	bl	800d0e4 <__malloc_lock>
 800d2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d328 <_free_r+0x8c>)
 800d2b6:	6813      	ldr	r3, [r2, #0]
 800d2b8:	b933      	cbnz	r3, 800d2c8 <_free_r+0x2c>
 800d2ba:	6063      	str	r3, [r4, #4]
 800d2bc:	6014      	str	r4, [r2, #0]
 800d2be:	4628      	mov	r0, r5
 800d2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c4:	f7ff bf14 	b.w	800d0f0 <__malloc_unlock>
 800d2c8:	42a3      	cmp	r3, r4
 800d2ca:	d908      	bls.n	800d2de <_free_r+0x42>
 800d2cc:	6820      	ldr	r0, [r4, #0]
 800d2ce:	1821      	adds	r1, r4, r0
 800d2d0:	428b      	cmp	r3, r1
 800d2d2:	bf01      	itttt	eq
 800d2d4:	6819      	ldreq	r1, [r3, #0]
 800d2d6:	685b      	ldreq	r3, [r3, #4]
 800d2d8:	1809      	addeq	r1, r1, r0
 800d2da:	6021      	streq	r1, [r4, #0]
 800d2dc:	e7ed      	b.n	800d2ba <_free_r+0x1e>
 800d2de:	461a      	mov	r2, r3
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	b10b      	cbz	r3, 800d2e8 <_free_r+0x4c>
 800d2e4:	42a3      	cmp	r3, r4
 800d2e6:	d9fa      	bls.n	800d2de <_free_r+0x42>
 800d2e8:	6811      	ldr	r1, [r2, #0]
 800d2ea:	1850      	adds	r0, r2, r1
 800d2ec:	42a0      	cmp	r0, r4
 800d2ee:	d10b      	bne.n	800d308 <_free_r+0x6c>
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	4401      	add	r1, r0
 800d2f4:	1850      	adds	r0, r2, r1
 800d2f6:	4283      	cmp	r3, r0
 800d2f8:	6011      	str	r1, [r2, #0]
 800d2fa:	d1e0      	bne.n	800d2be <_free_r+0x22>
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4408      	add	r0, r1
 800d302:	6010      	str	r0, [r2, #0]
 800d304:	6053      	str	r3, [r2, #4]
 800d306:	e7da      	b.n	800d2be <_free_r+0x22>
 800d308:	d902      	bls.n	800d310 <_free_r+0x74>
 800d30a:	230c      	movs	r3, #12
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	e7d6      	b.n	800d2be <_free_r+0x22>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	1821      	adds	r1, r4, r0
 800d314:	428b      	cmp	r3, r1
 800d316:	bf01      	itttt	eq
 800d318:	6819      	ldreq	r1, [r3, #0]
 800d31a:	685b      	ldreq	r3, [r3, #4]
 800d31c:	1809      	addeq	r1, r1, r0
 800d31e:	6021      	streq	r1, [r4, #0]
 800d320:	6063      	str	r3, [r4, #4]
 800d322:	6054      	str	r4, [r2, #4]
 800d324:	e7cb      	b.n	800d2be <_free_r+0x22>
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	20001a34 	.word	0x20001a34

0800d32c <__ssputs_r>:
 800d32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d330:	461f      	mov	r7, r3
 800d332:	688e      	ldr	r6, [r1, #8]
 800d334:	4682      	mov	sl, r0
 800d336:	42be      	cmp	r6, r7
 800d338:	460c      	mov	r4, r1
 800d33a:	4690      	mov	r8, r2
 800d33c:	680b      	ldr	r3, [r1, #0]
 800d33e:	d82d      	bhi.n	800d39c <__ssputs_r+0x70>
 800d340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d348:	d026      	beq.n	800d398 <__ssputs_r+0x6c>
 800d34a:	6965      	ldr	r5, [r4, #20]
 800d34c:	6909      	ldr	r1, [r1, #16]
 800d34e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d352:	eba3 0901 	sub.w	r9, r3, r1
 800d356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d35a:	1c7b      	adds	r3, r7, #1
 800d35c:	444b      	add	r3, r9
 800d35e:	106d      	asrs	r5, r5, #1
 800d360:	429d      	cmp	r5, r3
 800d362:	bf38      	it	cc
 800d364:	461d      	movcc	r5, r3
 800d366:	0553      	lsls	r3, r2, #21
 800d368:	d527      	bpl.n	800d3ba <__ssputs_r+0x8e>
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7ff fe3a 	bl	800cfe4 <_malloc_r>
 800d370:	4606      	mov	r6, r0
 800d372:	b360      	cbz	r0, 800d3ce <__ssputs_r+0xa2>
 800d374:	464a      	mov	r2, r9
 800d376:	6921      	ldr	r1, [r4, #16]
 800d378:	f000 fb18 	bl	800d9ac <memcpy>
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	6126      	str	r6, [r4, #16]
 800d38a:	444e      	add	r6, r9
 800d38c:	6026      	str	r6, [r4, #0]
 800d38e:	463e      	mov	r6, r7
 800d390:	6165      	str	r5, [r4, #20]
 800d392:	eba5 0509 	sub.w	r5, r5, r9
 800d396:	60a5      	str	r5, [r4, #8]
 800d398:	42be      	cmp	r6, r7
 800d39a:	d900      	bls.n	800d39e <__ssputs_r+0x72>
 800d39c:	463e      	mov	r6, r7
 800d39e:	4632      	mov	r2, r6
 800d3a0:	4641      	mov	r1, r8
 800d3a2:	6820      	ldr	r0, [r4, #0]
 800d3a4:	f000 fada 	bl	800d95c <memmove>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	1b9b      	subs	r3, r3, r6
 800d3ae:	60a3      	str	r3, [r4, #8]
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	4433      	add	r3, r6
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ba:	462a      	mov	r2, r5
 800d3bc:	f000 faa0 	bl	800d900 <_realloc_r>
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d1e0      	bne.n	800d388 <__ssputs_r+0x5c>
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	6921      	ldr	r1, [r4, #16]
 800d3ca:	f7ff ff67 	bl	800d29c <_free_r>
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	f8ca 3000 	str.w	r3, [sl]
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	e7e9      	b.n	800d3b6 <__ssputs_r+0x8a>
	...

0800d3e4 <_svfiprintf_r>:
 800d3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e8:	4698      	mov	r8, r3
 800d3ea:	898b      	ldrh	r3, [r1, #12]
 800d3ec:	4607      	mov	r7, r0
 800d3ee:	061b      	lsls	r3, r3, #24
 800d3f0:	460d      	mov	r5, r1
 800d3f2:	4614      	mov	r4, r2
 800d3f4:	b09d      	sub	sp, #116	@ 0x74
 800d3f6:	d510      	bpl.n	800d41a <_svfiprintf_r+0x36>
 800d3f8:	690b      	ldr	r3, [r1, #16]
 800d3fa:	b973      	cbnz	r3, 800d41a <_svfiprintf_r+0x36>
 800d3fc:	2140      	movs	r1, #64	@ 0x40
 800d3fe:	f7ff fdf1 	bl	800cfe4 <_malloc_r>
 800d402:	6028      	str	r0, [r5, #0]
 800d404:	6128      	str	r0, [r5, #16]
 800d406:	b930      	cbnz	r0, 800d416 <_svfiprintf_r+0x32>
 800d408:	230c      	movs	r3, #12
 800d40a:	603b      	str	r3, [r7, #0]
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d410:	b01d      	add	sp, #116	@ 0x74
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	2340      	movs	r3, #64	@ 0x40
 800d418:	616b      	str	r3, [r5, #20]
 800d41a:	2300      	movs	r3, #0
 800d41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d41e:	2320      	movs	r3, #32
 800d420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d424:	2330      	movs	r3, #48	@ 0x30
 800d426:	f04f 0901 	mov.w	r9, #1
 800d42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d42e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d5c8 <_svfiprintf_r+0x1e4>
 800d432:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d436:	4623      	mov	r3, r4
 800d438:	469a      	mov	sl, r3
 800d43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d43e:	b10a      	cbz	r2, 800d444 <_svfiprintf_r+0x60>
 800d440:	2a25      	cmp	r2, #37	@ 0x25
 800d442:	d1f9      	bne.n	800d438 <_svfiprintf_r+0x54>
 800d444:	ebba 0b04 	subs.w	fp, sl, r4
 800d448:	d00b      	beq.n	800d462 <_svfiprintf_r+0x7e>
 800d44a:	465b      	mov	r3, fp
 800d44c:	4622      	mov	r2, r4
 800d44e:	4629      	mov	r1, r5
 800d450:	4638      	mov	r0, r7
 800d452:	f7ff ff6b 	bl	800d32c <__ssputs_r>
 800d456:	3001      	adds	r0, #1
 800d458:	f000 80a7 	beq.w	800d5aa <_svfiprintf_r+0x1c6>
 800d45c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d45e:	445a      	add	r2, fp
 800d460:	9209      	str	r2, [sp, #36]	@ 0x24
 800d462:	f89a 3000 	ldrb.w	r3, [sl]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 809f 	beq.w	800d5aa <_svfiprintf_r+0x1c6>
 800d46c:	2300      	movs	r3, #0
 800d46e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d476:	f10a 0a01 	add.w	sl, sl, #1
 800d47a:	9304      	str	r3, [sp, #16]
 800d47c:	9307      	str	r3, [sp, #28]
 800d47e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d482:	931a      	str	r3, [sp, #104]	@ 0x68
 800d484:	4654      	mov	r4, sl
 800d486:	2205      	movs	r2, #5
 800d488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d48c:	484e      	ldr	r0, [pc, #312]	@ (800d5c8 <_svfiprintf_r+0x1e4>)
 800d48e:	f000 fa7f 	bl	800d990 <memchr>
 800d492:	9a04      	ldr	r2, [sp, #16]
 800d494:	b9d8      	cbnz	r0, 800d4ce <_svfiprintf_r+0xea>
 800d496:	06d0      	lsls	r0, r2, #27
 800d498:	bf44      	itt	mi
 800d49a:	2320      	movmi	r3, #32
 800d49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4a0:	0711      	lsls	r1, r2, #28
 800d4a2:	bf44      	itt	mi
 800d4a4:	232b      	movmi	r3, #43	@ 0x2b
 800d4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4b0:	d015      	beq.n	800d4de <_svfiprintf_r+0xfa>
 800d4b2:	4654      	mov	r4, sl
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	f04f 0c0a 	mov.w	ip, #10
 800d4ba:	9a07      	ldr	r2, [sp, #28]
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c2:	3b30      	subs	r3, #48	@ 0x30
 800d4c4:	2b09      	cmp	r3, #9
 800d4c6:	d94b      	bls.n	800d560 <_svfiprintf_r+0x17c>
 800d4c8:	b1b0      	cbz	r0, 800d4f8 <_svfiprintf_r+0x114>
 800d4ca:	9207      	str	r2, [sp, #28]
 800d4cc:	e014      	b.n	800d4f8 <_svfiprintf_r+0x114>
 800d4ce:	eba0 0308 	sub.w	r3, r0, r8
 800d4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	46a2      	mov	sl, r4
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	e7d2      	b.n	800d484 <_svfiprintf_r+0xa0>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	1d19      	adds	r1, r3, #4
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	9103      	str	r1, [sp, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	bfbb      	ittet	lt
 800d4ea:	425b      	neglt	r3, r3
 800d4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f0:	9307      	strge	r3, [sp, #28]
 800d4f2:	9307      	strlt	r3, [sp, #28]
 800d4f4:	bfb8      	it	lt
 800d4f6:	9204      	strlt	r2, [sp, #16]
 800d4f8:	7823      	ldrb	r3, [r4, #0]
 800d4fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4fc:	d10a      	bne.n	800d514 <_svfiprintf_r+0x130>
 800d4fe:	7863      	ldrb	r3, [r4, #1]
 800d500:	2b2a      	cmp	r3, #42	@ 0x2a
 800d502:	d132      	bne.n	800d56a <_svfiprintf_r+0x186>
 800d504:	9b03      	ldr	r3, [sp, #12]
 800d506:	3402      	adds	r4, #2
 800d508:	1d1a      	adds	r2, r3, #4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	9203      	str	r2, [sp, #12]
 800d50e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d512:	9305      	str	r3, [sp, #20]
 800d514:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d5cc <_svfiprintf_r+0x1e8>
 800d518:	2203      	movs	r2, #3
 800d51a:	4650      	mov	r0, sl
 800d51c:	7821      	ldrb	r1, [r4, #0]
 800d51e:	f000 fa37 	bl	800d990 <memchr>
 800d522:	b138      	cbz	r0, 800d534 <_svfiprintf_r+0x150>
 800d524:	2240      	movs	r2, #64	@ 0x40
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	eba0 000a 	sub.w	r0, r0, sl
 800d52c:	4082      	lsls	r2, r0
 800d52e:	4313      	orrs	r3, r2
 800d530:	3401      	adds	r4, #1
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d538:	2206      	movs	r2, #6
 800d53a:	4825      	ldr	r0, [pc, #148]	@ (800d5d0 <_svfiprintf_r+0x1ec>)
 800d53c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d540:	f000 fa26 	bl	800d990 <memchr>
 800d544:	2800      	cmp	r0, #0
 800d546:	d036      	beq.n	800d5b6 <_svfiprintf_r+0x1d2>
 800d548:	4b22      	ldr	r3, [pc, #136]	@ (800d5d4 <_svfiprintf_r+0x1f0>)
 800d54a:	bb1b      	cbnz	r3, 800d594 <_svfiprintf_r+0x1b0>
 800d54c:	9b03      	ldr	r3, [sp, #12]
 800d54e:	3307      	adds	r3, #7
 800d550:	f023 0307 	bic.w	r3, r3, #7
 800d554:	3308      	adds	r3, #8
 800d556:	9303      	str	r3, [sp, #12]
 800d558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55a:	4433      	add	r3, r6
 800d55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d55e:	e76a      	b.n	800d436 <_svfiprintf_r+0x52>
 800d560:	460c      	mov	r4, r1
 800d562:	2001      	movs	r0, #1
 800d564:	fb0c 3202 	mla	r2, ip, r2, r3
 800d568:	e7a8      	b.n	800d4bc <_svfiprintf_r+0xd8>
 800d56a:	2300      	movs	r3, #0
 800d56c:	f04f 0c0a 	mov.w	ip, #10
 800d570:	4619      	mov	r1, r3
 800d572:	3401      	adds	r4, #1
 800d574:	9305      	str	r3, [sp, #20]
 800d576:	4620      	mov	r0, r4
 800d578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d57c:	3a30      	subs	r2, #48	@ 0x30
 800d57e:	2a09      	cmp	r2, #9
 800d580:	d903      	bls.n	800d58a <_svfiprintf_r+0x1a6>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0c6      	beq.n	800d514 <_svfiprintf_r+0x130>
 800d586:	9105      	str	r1, [sp, #20]
 800d588:	e7c4      	b.n	800d514 <_svfiprintf_r+0x130>
 800d58a:	4604      	mov	r4, r0
 800d58c:	2301      	movs	r3, #1
 800d58e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d592:	e7f0      	b.n	800d576 <_svfiprintf_r+0x192>
 800d594:	ab03      	add	r3, sp, #12
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	462a      	mov	r2, r5
 800d59a:	4638      	mov	r0, r7
 800d59c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d8 <_svfiprintf_r+0x1f4>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	f3af 8000 	nop.w
 800d5a4:	1c42      	adds	r2, r0, #1
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	d1d6      	bne.n	800d558 <_svfiprintf_r+0x174>
 800d5aa:	89ab      	ldrh	r3, [r5, #12]
 800d5ac:	065b      	lsls	r3, r3, #25
 800d5ae:	f53f af2d 	bmi.w	800d40c <_svfiprintf_r+0x28>
 800d5b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5b4:	e72c      	b.n	800d410 <_svfiprintf_r+0x2c>
 800d5b6:	ab03      	add	r3, sp, #12
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	4638      	mov	r0, r7
 800d5be:	4b06      	ldr	r3, [pc, #24]	@ (800d5d8 <_svfiprintf_r+0x1f4>)
 800d5c0:	a904      	add	r1, sp, #16
 800d5c2:	f000 f87d 	bl	800d6c0 <_printf_i>
 800d5c6:	e7ed      	b.n	800d5a4 <_svfiprintf_r+0x1c0>
 800d5c8:	0800dce7 	.word	0x0800dce7
 800d5cc:	0800dced 	.word	0x0800dced
 800d5d0:	0800dcf1 	.word	0x0800dcf1
 800d5d4:	00000000 	.word	0x00000000
 800d5d8:	0800d32d 	.word	0x0800d32d

0800d5dc <_printf_common>:
 800d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	4616      	mov	r6, r2
 800d5e2:	4698      	mov	r8, r3
 800d5e4:	688a      	ldr	r2, [r1, #8]
 800d5e6:	690b      	ldr	r3, [r1, #16]
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	bfb8      	it	lt
 800d5ee:	4613      	movlt	r3, r2
 800d5f0:	6033      	str	r3, [r6, #0]
 800d5f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5fc:	b10a      	cbz	r2, 800d602 <_printf_common+0x26>
 800d5fe:	3301      	adds	r3, #1
 800d600:	6033      	str	r3, [r6, #0]
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	0699      	lsls	r1, r3, #26
 800d606:	bf42      	ittt	mi
 800d608:	6833      	ldrmi	r3, [r6, #0]
 800d60a:	3302      	addmi	r3, #2
 800d60c:	6033      	strmi	r3, [r6, #0]
 800d60e:	6825      	ldr	r5, [r4, #0]
 800d610:	f015 0506 	ands.w	r5, r5, #6
 800d614:	d106      	bne.n	800d624 <_printf_common+0x48>
 800d616:	f104 0a19 	add.w	sl, r4, #25
 800d61a:	68e3      	ldr	r3, [r4, #12]
 800d61c:	6832      	ldr	r2, [r6, #0]
 800d61e:	1a9b      	subs	r3, r3, r2
 800d620:	42ab      	cmp	r3, r5
 800d622:	dc2b      	bgt.n	800d67c <_printf_common+0xa0>
 800d624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d628:	6822      	ldr	r2, [r4, #0]
 800d62a:	3b00      	subs	r3, #0
 800d62c:	bf18      	it	ne
 800d62e:	2301      	movne	r3, #1
 800d630:	0692      	lsls	r2, r2, #26
 800d632:	d430      	bmi.n	800d696 <_printf_common+0xba>
 800d634:	4641      	mov	r1, r8
 800d636:	4638      	mov	r0, r7
 800d638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d63c:	47c8      	blx	r9
 800d63e:	3001      	adds	r0, #1
 800d640:	d023      	beq.n	800d68a <_printf_common+0xae>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	6922      	ldr	r2, [r4, #16]
 800d646:	f003 0306 	and.w	r3, r3, #6
 800d64a:	2b04      	cmp	r3, #4
 800d64c:	bf14      	ite	ne
 800d64e:	2500      	movne	r5, #0
 800d650:	6833      	ldreq	r3, [r6, #0]
 800d652:	f04f 0600 	mov.w	r6, #0
 800d656:	bf08      	it	eq
 800d658:	68e5      	ldreq	r5, [r4, #12]
 800d65a:	f104 041a 	add.w	r4, r4, #26
 800d65e:	bf08      	it	eq
 800d660:	1aed      	subeq	r5, r5, r3
 800d662:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d666:	bf08      	it	eq
 800d668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d66c:	4293      	cmp	r3, r2
 800d66e:	bfc4      	itt	gt
 800d670:	1a9b      	subgt	r3, r3, r2
 800d672:	18ed      	addgt	r5, r5, r3
 800d674:	42b5      	cmp	r5, r6
 800d676:	d11a      	bne.n	800d6ae <_printf_common+0xd2>
 800d678:	2000      	movs	r0, #0
 800d67a:	e008      	b.n	800d68e <_printf_common+0xb2>
 800d67c:	2301      	movs	r3, #1
 800d67e:	4652      	mov	r2, sl
 800d680:	4641      	mov	r1, r8
 800d682:	4638      	mov	r0, r7
 800d684:	47c8      	blx	r9
 800d686:	3001      	adds	r0, #1
 800d688:	d103      	bne.n	800d692 <_printf_common+0xb6>
 800d68a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d692:	3501      	adds	r5, #1
 800d694:	e7c1      	b.n	800d61a <_printf_common+0x3e>
 800d696:	2030      	movs	r0, #48	@ 0x30
 800d698:	18e1      	adds	r1, r4, r3
 800d69a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6a4:	4422      	add	r2, r4
 800d6a6:	3302      	adds	r3, #2
 800d6a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6ac:	e7c2      	b.n	800d634 <_printf_common+0x58>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4641      	mov	r1, r8
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	47c8      	blx	r9
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d0e6      	beq.n	800d68a <_printf_common+0xae>
 800d6bc:	3601      	adds	r6, #1
 800d6be:	e7d9      	b.n	800d674 <_printf_common+0x98>

0800d6c0 <_printf_i>:
 800d6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c4:	7e0f      	ldrb	r7, [r1, #24]
 800d6c6:	4691      	mov	r9, r2
 800d6c8:	2f78      	cmp	r7, #120	@ 0x78
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	469a      	mov	sl, r3
 800d6d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d6d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6d6:	d807      	bhi.n	800d6e8 <_printf_i+0x28>
 800d6d8:	2f62      	cmp	r7, #98	@ 0x62
 800d6da:	d80a      	bhi.n	800d6f2 <_printf_i+0x32>
 800d6dc:	2f00      	cmp	r7, #0
 800d6de:	f000 80d3 	beq.w	800d888 <_printf_i+0x1c8>
 800d6e2:	2f58      	cmp	r7, #88	@ 0x58
 800d6e4:	f000 80ba 	beq.w	800d85c <_printf_i+0x19c>
 800d6e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6f0:	e03a      	b.n	800d768 <_printf_i+0xa8>
 800d6f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6f6:	2b15      	cmp	r3, #21
 800d6f8:	d8f6      	bhi.n	800d6e8 <_printf_i+0x28>
 800d6fa:	a101      	add	r1, pc, #4	@ (adr r1, 800d700 <_printf_i+0x40>)
 800d6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d700:	0800d759 	.word	0x0800d759
 800d704:	0800d76d 	.word	0x0800d76d
 800d708:	0800d6e9 	.word	0x0800d6e9
 800d70c:	0800d6e9 	.word	0x0800d6e9
 800d710:	0800d6e9 	.word	0x0800d6e9
 800d714:	0800d6e9 	.word	0x0800d6e9
 800d718:	0800d76d 	.word	0x0800d76d
 800d71c:	0800d6e9 	.word	0x0800d6e9
 800d720:	0800d6e9 	.word	0x0800d6e9
 800d724:	0800d6e9 	.word	0x0800d6e9
 800d728:	0800d6e9 	.word	0x0800d6e9
 800d72c:	0800d86f 	.word	0x0800d86f
 800d730:	0800d797 	.word	0x0800d797
 800d734:	0800d829 	.word	0x0800d829
 800d738:	0800d6e9 	.word	0x0800d6e9
 800d73c:	0800d6e9 	.word	0x0800d6e9
 800d740:	0800d891 	.word	0x0800d891
 800d744:	0800d6e9 	.word	0x0800d6e9
 800d748:	0800d797 	.word	0x0800d797
 800d74c:	0800d6e9 	.word	0x0800d6e9
 800d750:	0800d6e9 	.word	0x0800d6e9
 800d754:	0800d831 	.word	0x0800d831
 800d758:	6833      	ldr	r3, [r6, #0]
 800d75a:	1d1a      	adds	r2, r3, #4
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6032      	str	r2, [r6, #0]
 800d760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d768:	2301      	movs	r3, #1
 800d76a:	e09e      	b.n	800d8aa <_printf_i+0x1ea>
 800d76c:	6833      	ldr	r3, [r6, #0]
 800d76e:	6820      	ldr	r0, [r4, #0]
 800d770:	1d19      	adds	r1, r3, #4
 800d772:	6031      	str	r1, [r6, #0]
 800d774:	0606      	lsls	r6, r0, #24
 800d776:	d501      	bpl.n	800d77c <_printf_i+0xbc>
 800d778:	681d      	ldr	r5, [r3, #0]
 800d77a:	e003      	b.n	800d784 <_printf_i+0xc4>
 800d77c:	0645      	lsls	r5, r0, #25
 800d77e:	d5fb      	bpl.n	800d778 <_printf_i+0xb8>
 800d780:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d784:	2d00      	cmp	r5, #0
 800d786:	da03      	bge.n	800d790 <_printf_i+0xd0>
 800d788:	232d      	movs	r3, #45	@ 0x2d
 800d78a:	426d      	negs	r5, r5
 800d78c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d790:	230a      	movs	r3, #10
 800d792:	4859      	ldr	r0, [pc, #356]	@ (800d8f8 <_printf_i+0x238>)
 800d794:	e011      	b.n	800d7ba <_printf_i+0xfa>
 800d796:	6821      	ldr	r1, [r4, #0]
 800d798:	6833      	ldr	r3, [r6, #0]
 800d79a:	0608      	lsls	r0, r1, #24
 800d79c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7a0:	d402      	bmi.n	800d7a8 <_printf_i+0xe8>
 800d7a2:	0649      	lsls	r1, r1, #25
 800d7a4:	bf48      	it	mi
 800d7a6:	b2ad      	uxthmi	r5, r5
 800d7a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7aa:	6033      	str	r3, [r6, #0]
 800d7ac:	bf14      	ite	ne
 800d7ae:	230a      	movne	r3, #10
 800d7b0:	2308      	moveq	r3, #8
 800d7b2:	4851      	ldr	r0, [pc, #324]	@ (800d8f8 <_printf_i+0x238>)
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d7ba:	6866      	ldr	r6, [r4, #4]
 800d7bc:	2e00      	cmp	r6, #0
 800d7be:	bfa8      	it	ge
 800d7c0:	6821      	ldrge	r1, [r4, #0]
 800d7c2:	60a6      	str	r6, [r4, #8]
 800d7c4:	bfa4      	itt	ge
 800d7c6:	f021 0104 	bicge.w	r1, r1, #4
 800d7ca:	6021      	strge	r1, [r4, #0]
 800d7cc:	b90d      	cbnz	r5, 800d7d2 <_printf_i+0x112>
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d04b      	beq.n	800d86a <_printf_i+0x1aa>
 800d7d2:	4616      	mov	r6, r2
 800d7d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7d8:	fb03 5711 	mls	r7, r3, r1, r5
 800d7dc:	5dc7      	ldrb	r7, [r0, r7]
 800d7de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7e2:	462f      	mov	r7, r5
 800d7e4:	42bb      	cmp	r3, r7
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	d9f4      	bls.n	800d7d4 <_printf_i+0x114>
 800d7ea:	2b08      	cmp	r3, #8
 800d7ec:	d10b      	bne.n	800d806 <_printf_i+0x146>
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	07df      	lsls	r7, r3, #31
 800d7f2:	d508      	bpl.n	800d806 <_printf_i+0x146>
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	6861      	ldr	r1, [r4, #4]
 800d7f8:	4299      	cmp	r1, r3
 800d7fa:	bfde      	ittt	le
 800d7fc:	2330      	movle	r3, #48	@ 0x30
 800d7fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d802:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d806:	1b92      	subs	r2, r2, r6
 800d808:	6122      	str	r2, [r4, #16]
 800d80a:	464b      	mov	r3, r9
 800d80c:	4621      	mov	r1, r4
 800d80e:	4640      	mov	r0, r8
 800d810:	f8cd a000 	str.w	sl, [sp]
 800d814:	aa03      	add	r2, sp, #12
 800d816:	f7ff fee1 	bl	800d5dc <_printf_common>
 800d81a:	3001      	adds	r0, #1
 800d81c:	d14a      	bne.n	800d8b4 <_printf_i+0x1f4>
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d822:	b004      	add	sp, #16
 800d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	f043 0320 	orr.w	r3, r3, #32
 800d82e:	6023      	str	r3, [r4, #0]
 800d830:	2778      	movs	r7, #120	@ 0x78
 800d832:	4832      	ldr	r0, [pc, #200]	@ (800d8fc <_printf_i+0x23c>)
 800d834:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	6831      	ldr	r1, [r6, #0]
 800d83c:	061f      	lsls	r7, r3, #24
 800d83e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d842:	d402      	bmi.n	800d84a <_printf_i+0x18a>
 800d844:	065f      	lsls	r7, r3, #25
 800d846:	bf48      	it	mi
 800d848:	b2ad      	uxthmi	r5, r5
 800d84a:	6031      	str	r1, [r6, #0]
 800d84c:	07d9      	lsls	r1, r3, #31
 800d84e:	bf44      	itt	mi
 800d850:	f043 0320 	orrmi.w	r3, r3, #32
 800d854:	6023      	strmi	r3, [r4, #0]
 800d856:	b11d      	cbz	r5, 800d860 <_printf_i+0x1a0>
 800d858:	2310      	movs	r3, #16
 800d85a:	e7ab      	b.n	800d7b4 <_printf_i+0xf4>
 800d85c:	4826      	ldr	r0, [pc, #152]	@ (800d8f8 <_printf_i+0x238>)
 800d85e:	e7e9      	b.n	800d834 <_printf_i+0x174>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	f023 0320 	bic.w	r3, r3, #32
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	e7f6      	b.n	800d858 <_printf_i+0x198>
 800d86a:	4616      	mov	r6, r2
 800d86c:	e7bd      	b.n	800d7ea <_printf_i+0x12a>
 800d86e:	6833      	ldr	r3, [r6, #0]
 800d870:	6825      	ldr	r5, [r4, #0]
 800d872:	1d18      	adds	r0, r3, #4
 800d874:	6961      	ldr	r1, [r4, #20]
 800d876:	6030      	str	r0, [r6, #0]
 800d878:	062e      	lsls	r6, r5, #24
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	d501      	bpl.n	800d882 <_printf_i+0x1c2>
 800d87e:	6019      	str	r1, [r3, #0]
 800d880:	e002      	b.n	800d888 <_printf_i+0x1c8>
 800d882:	0668      	lsls	r0, r5, #25
 800d884:	d5fb      	bpl.n	800d87e <_printf_i+0x1be>
 800d886:	8019      	strh	r1, [r3, #0]
 800d888:	2300      	movs	r3, #0
 800d88a:	4616      	mov	r6, r2
 800d88c:	6123      	str	r3, [r4, #16]
 800d88e:	e7bc      	b.n	800d80a <_printf_i+0x14a>
 800d890:	6833      	ldr	r3, [r6, #0]
 800d892:	2100      	movs	r1, #0
 800d894:	1d1a      	adds	r2, r3, #4
 800d896:	6032      	str	r2, [r6, #0]
 800d898:	681e      	ldr	r6, [r3, #0]
 800d89a:	6862      	ldr	r2, [r4, #4]
 800d89c:	4630      	mov	r0, r6
 800d89e:	f000 f877 	bl	800d990 <memchr>
 800d8a2:	b108      	cbz	r0, 800d8a8 <_printf_i+0x1e8>
 800d8a4:	1b80      	subs	r0, r0, r6
 800d8a6:	6060      	str	r0, [r4, #4]
 800d8a8:	6863      	ldr	r3, [r4, #4]
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8b2:	e7aa      	b.n	800d80a <_printf_i+0x14a>
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	6923      	ldr	r3, [r4, #16]
 800d8bc:	47d0      	blx	sl
 800d8be:	3001      	adds	r0, #1
 800d8c0:	d0ad      	beq.n	800d81e <_printf_i+0x15e>
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	079b      	lsls	r3, r3, #30
 800d8c6:	d413      	bmi.n	800d8f0 <_printf_i+0x230>
 800d8c8:	68e0      	ldr	r0, [r4, #12]
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	4298      	cmp	r0, r3
 800d8ce:	bfb8      	it	lt
 800d8d0:	4618      	movlt	r0, r3
 800d8d2:	e7a6      	b.n	800d822 <_printf_i+0x162>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4640      	mov	r0, r8
 800d8dc:	47d0      	blx	sl
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d09d      	beq.n	800d81e <_printf_i+0x15e>
 800d8e2:	3501      	adds	r5, #1
 800d8e4:	68e3      	ldr	r3, [r4, #12]
 800d8e6:	9903      	ldr	r1, [sp, #12]
 800d8e8:	1a5b      	subs	r3, r3, r1
 800d8ea:	42ab      	cmp	r3, r5
 800d8ec:	dcf2      	bgt.n	800d8d4 <_printf_i+0x214>
 800d8ee:	e7eb      	b.n	800d8c8 <_printf_i+0x208>
 800d8f0:	2500      	movs	r5, #0
 800d8f2:	f104 0619 	add.w	r6, r4, #25
 800d8f6:	e7f5      	b.n	800d8e4 <_printf_i+0x224>
 800d8f8:	0800dcf8 	.word	0x0800dcf8
 800d8fc:	0800dd09 	.word	0x0800dd09

0800d900 <_realloc_r>:
 800d900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d904:	4680      	mov	r8, r0
 800d906:	4615      	mov	r5, r2
 800d908:	460c      	mov	r4, r1
 800d90a:	b921      	cbnz	r1, 800d916 <_realloc_r+0x16>
 800d90c:	4611      	mov	r1, r2
 800d90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d912:	f7ff bb67 	b.w	800cfe4 <_malloc_r>
 800d916:	b92a      	cbnz	r2, 800d924 <_realloc_r+0x24>
 800d918:	f7ff fcc0 	bl	800d29c <_free_r>
 800d91c:	2400      	movs	r4, #0
 800d91e:	4620      	mov	r0, r4
 800d920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d924:	f000 f850 	bl	800d9c8 <_malloc_usable_size_r>
 800d928:	4285      	cmp	r5, r0
 800d92a:	4606      	mov	r6, r0
 800d92c:	d802      	bhi.n	800d934 <_realloc_r+0x34>
 800d92e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d932:	d8f4      	bhi.n	800d91e <_realloc_r+0x1e>
 800d934:	4629      	mov	r1, r5
 800d936:	4640      	mov	r0, r8
 800d938:	f7ff fb54 	bl	800cfe4 <_malloc_r>
 800d93c:	4607      	mov	r7, r0
 800d93e:	2800      	cmp	r0, #0
 800d940:	d0ec      	beq.n	800d91c <_realloc_r+0x1c>
 800d942:	42b5      	cmp	r5, r6
 800d944:	462a      	mov	r2, r5
 800d946:	4621      	mov	r1, r4
 800d948:	bf28      	it	cs
 800d94a:	4632      	movcs	r2, r6
 800d94c:	f000 f82e 	bl	800d9ac <memcpy>
 800d950:	4621      	mov	r1, r4
 800d952:	4640      	mov	r0, r8
 800d954:	f7ff fca2 	bl	800d29c <_free_r>
 800d958:	463c      	mov	r4, r7
 800d95a:	e7e0      	b.n	800d91e <_realloc_r+0x1e>

0800d95c <memmove>:
 800d95c:	4288      	cmp	r0, r1
 800d95e:	b510      	push	{r4, lr}
 800d960:	eb01 0402 	add.w	r4, r1, r2
 800d964:	d902      	bls.n	800d96c <memmove+0x10>
 800d966:	4284      	cmp	r4, r0
 800d968:	4623      	mov	r3, r4
 800d96a:	d807      	bhi.n	800d97c <memmove+0x20>
 800d96c:	1e43      	subs	r3, r0, #1
 800d96e:	42a1      	cmp	r1, r4
 800d970:	d008      	beq.n	800d984 <memmove+0x28>
 800d972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d97a:	e7f8      	b.n	800d96e <memmove+0x12>
 800d97c:	4601      	mov	r1, r0
 800d97e:	4402      	add	r2, r0
 800d980:	428a      	cmp	r2, r1
 800d982:	d100      	bne.n	800d986 <memmove+0x2a>
 800d984:	bd10      	pop	{r4, pc}
 800d986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d98a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d98e:	e7f7      	b.n	800d980 <memmove+0x24>

0800d990 <memchr>:
 800d990:	4603      	mov	r3, r0
 800d992:	b510      	push	{r4, lr}
 800d994:	b2c9      	uxtb	r1, r1
 800d996:	4402      	add	r2, r0
 800d998:	4293      	cmp	r3, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	d101      	bne.n	800d9a2 <memchr+0x12>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	e003      	b.n	800d9aa <memchr+0x1a>
 800d9a2:	7804      	ldrb	r4, [r0, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	428c      	cmp	r4, r1
 800d9a8:	d1f6      	bne.n	800d998 <memchr+0x8>
 800d9aa:	bd10      	pop	{r4, pc}

0800d9ac <memcpy>:
 800d9ac:	440a      	add	r2, r1
 800d9ae:	4291      	cmp	r1, r2
 800d9b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d9b4:	d100      	bne.n	800d9b8 <memcpy+0xc>
 800d9b6:	4770      	bx	lr
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9be:	4291      	cmp	r1, r2
 800d9c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9c4:	d1f9      	bne.n	800d9ba <memcpy+0xe>
 800d9c6:	bd10      	pop	{r4, pc}

0800d9c8 <_malloc_usable_size_r>:
 800d9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9cc:	1f18      	subs	r0, r3, #4
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bfbc      	itt	lt
 800d9d2:	580b      	ldrlt	r3, [r1, r0]
 800d9d4:	18c0      	addlt	r0, r0, r3
 800d9d6:	4770      	bx	lr

0800d9d8 <_init>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	bf00      	nop
 800d9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9de:	bc08      	pop	{r3}
 800d9e0:	469e      	mov	lr, r3
 800d9e2:	4770      	bx	lr

0800d9e4 <_fini>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	bf00      	nop
 800d9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ea:	bc08      	pop	{r3}
 800d9ec:	469e      	mov	lr, r3
 800d9ee:	4770      	bx	lr
