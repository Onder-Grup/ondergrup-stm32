
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c74c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d74c  0800d74c  000209a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d74c  0800d74c  000209a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d74c  0800d74c  000209a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d74c  0800d74c  0001d74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d750  0800d750  0001d750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a4  20000000  0800d754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  200009a4  0800e0f8  000209a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  0800e0f8  00021dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185a1  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003356  00000000  00000000  00038fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001160  00000000  00000000  0003d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b855  00000000  00000000  0003ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b141  00000000  00000000  0005a2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a785b  00000000  00000000  00075416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000616c  00000000  00000000  0011cc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00122de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200009a4 	.word	0x200009a4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800c924 	.word	0x0800c924

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200009a8 	.word	0x200009a8
 800022c:	0800c924 	.word	0x0800c924

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	200009c0 	.word	0x200009c0
 800026c:	20000a14 	.word	0x20000a14

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7b3b      	ldrb	r3, [r7, #12]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7b3b      	ldrb	r3, [r7, #12]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	4825      	ldr	r0, [pc, #148]	; (8000348 <lcd_send_cmd+0xd8>)
 80002b4:	f008 fe05 	bl	8008ec2 <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80002be:	bf00      	nop
 80002c0:	4821      	ldr	r0, [pc, #132]	; (8000348 <lcd_send_cmd+0xd8>)
 80002c2:	f008 fdf1 	bl	8008ea8 <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80002cc:	4b1f      	ldr	r3, [pc, #124]	; (800034c <lcd_send_cmd+0xdc>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d116      	bne.n	8000302 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
 80002d8:	e00f      	b.n	80002fa <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	3310      	adds	r3, #16
 80002de:	443b      	add	r3, r7
 80002e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	f022 0208 	bic.w	r2, r2, #8
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	3310      	adds	r3, #16
 80002ee:	443b      	add	r3, r7
 80002f0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d9ec      	bls.n	80002da <lcd_send_cmd+0x6a>
 8000300:	e015      	b.n	800032e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	73bb      	strb	r3, [r7, #14]
 8000306:	e00f      	b.n	8000328 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3310      	adds	r3, #16
 800030c:	443b      	add	r3, r7
 800030e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	f042 0208 	orr.w	r2, r2, #8
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	3310      	adds	r3, #16
 800031c:	443b      	add	r3, r7
 800031e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	3301      	adds	r3, #1
 8000326:	73bb      	strb	r3, [r7, #14]
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	2b03      	cmp	r3, #3
 800032c:	d9ec      	bls.n	8000308 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800032e:	f107 0208 	add.w	r2, r7, #8
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2304      	movs	r3, #4
 8000338:	214e      	movs	r1, #78	; 0x4e
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <lcd_send_cmd+0xd8>)
 800033c:	f008 f954 	bl	80085e8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000e40 	.word	0x20000e40
 800034c:	20000c14 	.word	0x20000c14

08000350 <lcd_send_data>:

void lcd_send_data (char data) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af02      	add	r7, sp, #8
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f023 030f 	bic.w	r3, r3, #15
 8000360:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	f043 030d 	orr.w	r3, r3, #13
 800036e:	b2db      	uxtb	r3, r3
 8000370:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000372:	7b7b      	ldrb	r3, [r7, #13]
 8000374:	f043 0309 	orr.w	r3, r3, #9
 8000378:	b2db      	uxtb	r3, r3
 800037a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800037c:	7b3b      	ldrb	r3, [r7, #12]
 800037e:	f043 030d 	orr.w	r3, r3, #13
 8000382:	b2db      	uxtb	r3, r3
 8000384:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000386:	7b3b      	ldrb	r3, [r7, #12]
 8000388:	f043 0309 	orr.w	r3, r3, #9
 800038c:	b2db      	uxtb	r3, r3
 800038e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000390:	bf00      	nop
 8000392:	4825      	ldr	r0, [pc, #148]	; (8000428 <lcd_send_data+0xd8>)
 8000394:	f008 fd95 	bl	8008ec2 <HAL_I2C_GetError>
 8000398:	4603      	mov	r3, r0
 800039a:	2b04      	cmp	r3, #4
 800039c:	d0f9      	beq.n	8000392 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800039e:	bf00      	nop
 80003a0:	4821      	ldr	r0, [pc, #132]	; (8000428 <lcd_send_data+0xd8>)
 80003a2:	f008 fd81 	bl	8008ea8 <HAL_I2C_GetState>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b20      	cmp	r3, #32
 80003aa:	d1f9      	bne.n	80003a0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <lcd_send_data+0xdc>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d116      	bne.n	80003e2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e00f      	b.n	80003da <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	3310      	adds	r3, #16
 80003be:	443b      	add	r3, r7
 80003c0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	f022 0208 	bic.w	r2, r2, #8
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	3310      	adds	r3, #16
 80003ce:	443b      	add	r3, r7
 80003d0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	3301      	adds	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d9ec      	bls.n	80003ba <lcd_send_data+0x6a>
 80003e0:	e015      	b.n	800040e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	73bb      	strb	r3, [r7, #14]
 80003e6:	e00f      	b.n	8000408 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	3310      	adds	r3, #16
 80003ec:	443b      	add	r3, r7
 80003ee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f042 0208 	orr.w	r2, r2, #8
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	3310      	adds	r3, #16
 80003fc:	443b      	add	r3, r7
 80003fe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	3301      	adds	r3, #1
 8000406:	73bb      	strb	r3, [r7, #14]
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d9ec      	bls.n	80003e8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800040e:	f107 0208 	add.w	r2, r7, #8
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2304      	movs	r3, #4
 8000418:	214e      	movs	r1, #78	; 0x4e
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <lcd_send_data+0xd8>)
 800041c:	f008 f8e4 	bl	80085e8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000e40 	.word	0x20000e40
 800042c:	20000c14 	.word	0x20000c14

08000430 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000438:	e006      	b.n	8000448 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff84 	bl	8000350 <lcd_send_data>
	while (*str) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f4      	bne.n	800043a <lcd_send_string+0xa>
	}
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <lcd_init>:

void lcd_init (void) {
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ff06 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f7ff ff03 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800046a:	200c      	movs	r0, #12
 800046c:	f7ff ff00 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	f7ff fefd 	bl	8000270 <lcd_send_cmd>
	lcd_backlight(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f840 	bl	80004fc <lcd_backlight>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	337f      	adds	r3, #127	; 0x7f
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fee7 	bl	8000270 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80004a2:	e008      	b.n	80004b6 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d105      	bne.n	80004b6 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	3b41      	subs	r3, #65	; 0x41
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fedd 	bl	8000270 <lcd_send_cmd>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	603a      	str	r2, [r7, #0]
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffd3 	bl	8000480 <lcd_gotoxy>
	lcd_send_string(str);
 80004da:	6838      	ldr	r0, [r7, #0]
 80004dc:	f7ff ffa8 	bl	8000430 <lcd_send_string>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <lcd_clear>:

void lcd_clear(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff febf 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f007 fa2e 	bl	8007954 <HAL_Delay>

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight (char state) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <lcd_backlight+0x20>)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff feaf 	bl	8000270 <lcd_send_cmd>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000c14 	.word	0x20000c14

08000520 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <__NVIC_SystemReset+0x24>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000532:	4904      	ldr	r1, [pc, #16]	; (8000544 <__NVIC_SystemReset+0x24>)
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_SystemReset+0x28>)
 8000536:	4313      	orrs	r3, r2
 8000538:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <__NVIC_SystemReset+0x20>
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	05fa0004 	.word	0x05fa0004

0800054c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe6b 	bl	8000230 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	3301      	adds	r3, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f00c f890 	bl	800c684 <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <copyText+0x2a>
        strcpy(result, text);
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f00c f9c1 	bl	800c8f8 <strcpy>
    }
    return result;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000584:	2101      	movs	r1, #1
 8000586:	488f      	ldr	r0, [pc, #572]	; (80007c4 <menu+0x244>)
 8000588:	f007 fe72 	bl	8008270 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	f040 808e 	bne.w	80006b0 <menu+0x130>
 8000594:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <menu+0x248>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8086 	beq.w	80006b0 <menu+0x130>
		menuSayac = menuSayac+1;
 80005a4:	4b89      	ldr	r3, [pc, #548]	; (80007cc <menu+0x24c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b87      	ldr	r3, [pc, #540]	; (80007cc <menu+0x24c>)
 80005ae:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80005b0:	4b86      	ldr	r3, [pc, #536]	; (80007cc <menu+0x24c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <menu+0x3e>
			menuSayac = 1;
 80005b8:	4b84      	ldr	r3, [pc, #528]	; (80007cc <menu+0x24c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80005be:	4b83      	ldr	r3, [pc, #524]	; (80007cc <menu+0x24c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b12      	cmp	r3, #18
 80005c4:	d106      	bne.n	80005d4 <menu+0x54>
 80005c6:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <menu+0x250>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <menu+0x54>
			menuSayac = 21;
 80005ce:	4b7f      	ldr	r3, [pc, #508]	; (80007cc <menu+0x24c>)
 80005d0:	2215      	movs	r2, #21
 80005d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80005d4:	4b7d      	ldr	r3, [pc, #500]	; (80007cc <menu+0x24c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d106      	bne.n	80005ea <menu+0x6a>
 80005dc:	4b7d      	ldr	r3, [pc, #500]	; (80007d4 <menu+0x254>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <menu+0x6a>
			menuSayac = 16;
 80005e4:	4b79      	ldr	r3, [pc, #484]	; (80007cc <menu+0x24c>)
 80005e6:	2210      	movs	r2, #16
 80005e8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <menu+0x24c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d106      	bne.n	8000600 <menu+0x80>
 80005f2:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <menu+0x254>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d102      	bne.n	8000600 <menu+0x80>
			menuSayac = 16;
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <menu+0x24c>)
 80005fc:	2210      	movs	r2, #16
 80005fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000600:	4b72      	ldr	r3, [pc, #456]	; (80007cc <menu+0x24c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b09      	cmp	r3, #9
 8000606:	d106      	bne.n	8000616 <menu+0x96>
 8000608:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <menu+0x254>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d102      	bne.n	8000616 <menu+0x96>
			menuSayac = 13;
 8000610:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <menu+0x24c>)
 8000612:	220d      	movs	r2, #13
 8000614:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000616:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <menu+0x24c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d10a      	bne.n	8000634 <menu+0xb4>
 800061e:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <menu+0x258>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <menu+0xae>
 8000626:	4b6c      	ldr	r3, [pc, #432]	; (80007d8 <menu+0x258>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d102      	bne.n	8000634 <menu+0xb4>
			menuSayac = 11;
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <menu+0x24c>)
 8000630:	220b      	movs	r2, #11
 8000632:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000634:	4b65      	ldr	r3, [pc, #404]	; (80007cc <menu+0x24c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b0c      	cmp	r3, #12
 800063a:	d10e      	bne.n	800065a <menu+0xda>
 800063c:	4b67      	ldr	r3, [pc, #412]	; (80007dc <menu+0x25c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d003      	beq.n	800064c <menu+0xcc>
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <menu+0x25c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d106      	bne.n	800065a <menu+0xda>
 800064c:	4b61      	ldr	r3, [pc, #388]	; (80007d4 <menu+0x254>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <menu+0xda>
			menuSayac = 16;
 8000654:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <menu+0x24c>)
 8000656:	2210      	movs	r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800065a:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <menu+0x24c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b0c      	cmp	r3, #12
 8000660:	d10e      	bne.n	8000680 <menu+0x100>
 8000662:	4b5e      	ldr	r3, [pc, #376]	; (80007dc <menu+0x25c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d003      	beq.n	8000672 <menu+0xf2>
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <menu+0x25c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d106      	bne.n	8000680 <menu+0x100>
 8000672:	4b58      	ldr	r3, [pc, #352]	; (80007d4 <menu+0x254>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d102      	bne.n	8000680 <menu+0x100>
			menuSayac = 13;
 800067a:	4b54      	ldr	r3, [pc, #336]	; (80007cc <menu+0x24c>)
 800067c:	220d      	movs	r2, #13
 800067e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000680:	4b52      	ldr	r3, [pc, #328]	; (80007cc <menu+0x24c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d106      	bne.n	8000696 <menu+0x116>
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <menu+0x260>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d102      	bne.n	8000696 <menu+0x116>
			menuSayac = 16;
 8000690:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <menu+0x24c>)
 8000692:	2210      	movs	r2, #16
 8000694:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <menu+0x24c>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b18      	cmp	r3, #24
 800069c:	d106      	bne.n	80006ac <menu+0x12c>
 800069e:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <menu+0x250>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <menu+0x12c>
			menuSayac = 26;
 80006a6:	4b49      	ldr	r3, [pc, #292]	; (80007cc <menu+0x24c>)
 80006a8:	221a      	movs	r2, #26
 80006aa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006ac:	f003 fecc 	bl	8004448 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80006b0:	2108      	movs	r1, #8
 80006b2:	484c      	ldr	r0, [pc, #304]	; (80007e4 <menu+0x264>)
 80006b4:	f007 fddc 	bl	8008270 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d175      	bne.n	80007aa <menu+0x22a>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <menu+0x248>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d06e      	beq.n	80007aa <menu+0x22a>
		if (menuSayac <= 1) {
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <menu+0x24c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d802      	bhi.n	80006da <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <menu+0x24c>)
 80006d6:	2220      	movs	r2, #32
 80006d8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <menu+0x24c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <menu+0x24c>)
 80006e4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <menu+0x24c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d106      	bne.n	80006fc <menu+0x17c>
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <menu+0x250>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <menu+0x17c>
			menuSayac = 17;
 80006f6:	4b35      	ldr	r3, [pc, #212]	; (80007cc <menu+0x24c>)
 80006f8:	2211      	movs	r2, #17
 80006fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80006fc:	4b33      	ldr	r3, [pc, #204]	; (80007cc <menu+0x24c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d106      	bne.n	8000712 <menu+0x192>
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <menu+0x254>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <menu+0x192>
			menuSayac = 7;
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <menu+0x24c>)
 800070e:	2207      	movs	r2, #7
 8000710:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <menu+0x24c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d106      	bne.n	8000728 <menu+0x1a8>
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <menu+0x254>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d102      	bne.n	8000728 <menu+0x1a8>
			menuSayac = 12;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <menu+0x24c>)
 8000724:	220c      	movs	r2, #12
 8000726:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <menu+0x24c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0c      	cmp	r3, #12
 800072e:	d106      	bne.n	800073e <menu+0x1be>
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <menu+0x254>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d102      	bne.n	800073e <menu+0x1be>
			menuSayac = 8;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <menu+0x24c>)
 800073a:	2208      	movs	r2, #8
 800073c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <menu+0x24c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d10a      	bne.n	800075c <menu+0x1dc>
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <menu+0x258>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <menu+0x1d6>
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <menu+0x258>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d102      	bne.n	800075c <menu+0x1dc>
			menuSayac = 9;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <menu+0x24c>)
 8000758:	2209      	movs	r2, #9
 800075a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <menu+0x24c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d10a      	bne.n	800077a <menu+0x1fa>
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <menu+0x25c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <menu+0x1f4>
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <menu+0x25c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d102      	bne.n	800077a <menu+0x1fa>
			menuSayac = 11;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <menu+0x24c>)
 8000776:	220b      	movs	r2, #11
 8000778:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <menu+0x24c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d106      	bne.n	8000790 <menu+0x210>
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <menu+0x260>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <menu+0x210>
			menuSayac = 14;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <menu+0x24c>)
 800078c:	220e      	movs	r2, #14
 800078e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <menu+0x24c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b19      	cmp	r3, #25
 8000796:	d106      	bne.n	80007a6 <menu+0x226>
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <menu+0x250>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <menu+0x226>
			menuSayac = 23;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <menu+0x24c>)
 80007a2:	2217      	movs	r2, #23
 80007a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80007a6:	f003 fe4f 	bl	8004448 <bekle>
	}

	if (menuSayac == 0) {
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <menu+0x24c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d134      	bne.n	800081c <menu+0x29c>
		if(dilSecim == 0) {
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <menu+0x268>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d122      	bne.n	8000800 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <menu+0x26c>)
 80007bc:	2101      	movs	r1, #1
 80007be:	2001      	movs	r0, #1
 80007c0:	e016      	b.n	80007f0 <menu+0x270>
 80007c2:	bf00      	nop
 80007c4:	40010800 	.word	0x40010800
 80007c8:	20000cae 	.word	0x20000cae
 80007cc:	20000c80 	.word	0x20000c80
 80007d0:	20000c8f 	.word	0x20000c8f
 80007d4:	20000c88 	.word	0x20000c88
 80007d8:	20000c89 	.word	0x20000c89
 80007dc:	20000c8a 	.word	0x20000c8a
 80007e0:	20000c8b 	.word	0x20000c8b
 80007e4:	40011000 	.word	0x40011000
 80007e8:	20000ca0 	.word	0x20000ca0
 80007ec:	0800c93c 	.word	0x0800c93c
 80007f0:	f7ff fe65 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80007f4:	4a94      	ldr	r2, [pc, #592]	; (8000a48 <menu+0x4c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fe60 	bl	80004be <lcd_print>
 80007fe:	e00d      	b.n	800081c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000800:	4b92      	ldr	r3, [pc, #584]	; (8000a4c <menu+0x4cc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d109      	bne.n	800081c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000808:	4a91      	ldr	r2, [pc, #580]	; (8000a50 <menu+0x4d0>)
 800080a:	2101      	movs	r1, #1
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe56 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000812:	4a90      	ldr	r2, [pc, #576]	; (8000a54 <menu+0x4d4>)
 8000814:	2101      	movs	r1, #1
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fe51 	bl	80004be <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800081c:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <menu+0x4d8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	f040 82b5 	bne.w	8000d90 <menu+0x810>
		if(dilSecim == 0) {
 8000826:	4b89      	ldr	r3, [pc, #548]	; (8000a4c <menu+0x4cc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d105      	bne.n	800083a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800082e:	4a8b      	ldr	r2, [pc, #556]	; (8000a5c <menu+0x4dc>)
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe43 	bl	80004be <lcd_print>
 8000838:	e008      	b.n	800084c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800083a:	4b84      	ldr	r3, [pc, #528]	; (8000a4c <menu+0x4cc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d104      	bne.n	800084c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000842:	4a87      	ldr	r2, [pc, #540]	; (8000a60 <menu+0x4e0>)
 8000844:	2101      	movs	r1, #1
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe39 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800084c:	4b85      	ldr	r3, [pc, #532]	; (8000a64 <menu+0x4e4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d123      	bne.n	800089c <menu+0x31c>
			if(dilSecim == 0) {
 8000854:	4b7d      	ldr	r3, [pc, #500]	; (8000a4c <menu+0x4cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800085c:	4a82      	ldr	r2, [pc, #520]	; (8000a68 <menu+0x4e8>)
 800085e:	2101      	movs	r1, #1
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fe2c 	bl	80004be <lcd_print>
 8000866:	e008      	b.n	800087a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000868:	4b78      	ldr	r3, [pc, #480]	; (8000a4c <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000870:	4a7e      	ldr	r2, [pc, #504]	; (8000a6c <menu+0x4ec>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe22 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800087a:	4a7d      	ldr	r2, [pc, #500]	; (8000a70 <menu+0x4f0>)
 800087c:	210f      	movs	r1, #15
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff fe1d 	bl	80004be <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000884:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <menu+0x4f4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	220a      	movs	r2, #10
 800088a:	497b      	ldr	r1, [pc, #492]	; (8000a78 <menu+0x4f8>)
 800088c:	4618      	mov	r0, r3
 800088e:	f00b fef7 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000892:	4a79      	ldr	r2, [pc, #484]	; (8000a78 <menu+0x4f8>)
 8000894:	210e      	movs	r1, #14
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fe11 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800089c:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <menu+0x4e4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d123      	bne.n	80008ec <menu+0x36c>
			if(dilSecim == 0) {
 80008a4:	4b69      	ldr	r3, [pc, #420]	; (8000a4c <menu+0x4cc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80008ac:	4a73      	ldr	r2, [pc, #460]	; (8000a7c <menu+0x4fc>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fe04 	bl	80004be <lcd_print>
 80008b6:	e008      	b.n	80008ca <menu+0x34a>
			} else if(dilSecim == 1) {
 80008b8:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80008c0:	4a6f      	ldr	r2, [pc, #444]	; (8000a80 <menu+0x500>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fdfa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ca:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <menu+0x504>)
 80008cc:	210f      	movs	r1, #15
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fdf5 	bl	80004be <lcd_print>
			itoa(hataKayit2, snum, 10);
 80008d4:	4b6c      	ldr	r3, [pc, #432]	; (8000a88 <menu+0x508>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	220a      	movs	r2, #10
 80008da:	4967      	ldr	r1, [pc, #412]	; (8000a78 <menu+0x4f8>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b fecf 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 80008e2:	4a65      	ldr	r2, [pc, #404]	; (8000a78 <menu+0x4f8>)
 80008e4:	210e      	movs	r1, #14
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fde9 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80008ec:	4b5d      	ldr	r3, [pc, #372]	; (8000a64 <menu+0x4e4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d123      	bne.n	800093c <menu+0x3bc>
			if(dilSecim == 0) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <menu+0x4cc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80008fc:	4a63      	ldr	r2, [pc, #396]	; (8000a8c <menu+0x50c>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fddc 	bl	80004be <lcd_print>
 8000906:	e008      	b.n	800091a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000908:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000910:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <menu+0x510>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fdd2 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <menu+0x504>)
 800091c:	210f      	movs	r1, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdcd 	bl	80004be <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000924:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <menu+0x514>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	220a      	movs	r2, #10
 800092a:	4953      	ldr	r1, [pc, #332]	; (8000a78 <menu+0x4f8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fea7 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000932:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <menu+0x4f8>)
 8000934:	210e      	movs	r1, #14
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fdc1 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800093c:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <menu+0x4e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d123      	bne.n	800098c <menu+0x40c>
			if(dilSecim == 0) {
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <menu+0x4cc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d105      	bne.n	8000958 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800094c:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <menu+0x518>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fdb4 	bl	80004be <lcd_print>
 8000956:	e008      	b.n	800096a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <menu+0x4cc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d104      	bne.n	800096a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <menu+0x51c>)
 8000962:	2101      	movs	r1, #1
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fdaa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <menu+0x504>)
 800096c:	210f      	movs	r1, #15
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fda5 	bl	80004be <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <menu+0x520>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	220a      	movs	r2, #10
 800097a:	493f      	ldr	r1, [pc, #252]	; (8000a78 <menu+0x4f8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f00b fe7f 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000982:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <menu+0x4f8>)
 8000984:	210e      	movs	r1, #14
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fd99 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <menu+0x4e4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d123      	bne.n	80009dc <menu+0x45c>
			if(dilSecim == 0) {
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <menu+0x4cc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800099c:	4a41      	ldr	r2, [pc, #260]	; (8000aa4 <menu+0x524>)
 800099e:	2101      	movs	r1, #1
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fd8c 	bl	80004be <lcd_print>
 80009a6:	e008      	b.n	80009ba <menu+0x43a>
			} else if(dilSecim == 1) {
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <menu+0x4cc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d104      	bne.n	80009ba <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80009b0:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <menu+0x528>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fd82 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <menu+0x504>)
 80009bc:	210f      	movs	r1, #15
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fd7d 	bl	80004be <lcd_print>
			itoa(hataKayit5, snum, 10);
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <menu+0x52c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	220a      	movs	r2, #10
 80009ca:	492b      	ldr	r1, [pc, #172]	; (8000a78 <menu+0x4f8>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00b fe57 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <menu+0x4f8>)
 80009d4:	210e      	movs	r1, #14
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fd71 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <menu+0x4e4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d123      	bne.n	8000a2c <menu+0x4ac>
			if(dilSecim == 0) {
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <menu+0x4cc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80009ec:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <menu+0x530>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff fd64 	bl	80004be <lcd_print>
 80009f6:	e008      	b.n	8000a0a <menu+0x48a>
			} else if(dilSecim == 1) {
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <menu+0x4cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d104      	bne.n	8000a0a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000a00:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <menu+0x534>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fd5a 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <menu+0x504>)
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd55 	bl	80004be <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <menu+0x538>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4917      	ldr	r1, [pc, #92]	; (8000a78 <menu+0x4f8>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00b fe2f 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <menu+0x4f8>)
 8000a24:	210e      	movs	r1, #14
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fd49 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <menu+0x4e4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d15f      	bne.n	8000af4 <menu+0x574>
			if(dilSecim == 0) {
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <menu+0x4cc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d141      	bne.n	8000ac0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <menu+0x53c>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fd3c 	bl	80004be <lcd_print>
 8000a46:	e044      	b.n	8000ad2 <menu+0x552>
 8000a48:	0800c950 	.word	0x0800c950
 8000a4c:	20000ca0 	.word	0x20000ca0
 8000a50:	0800c964 	.word	0x0800c964
 8000a54:	0800c978 	.word	0x0800c978
 8000a58:	20000c80 	.word	0x20000c80
 8000a5c:	0800c98c 	.word	0x0800c98c
 8000a60:	0800c9a0 	.word	0x0800c9a0
 8000a64:	20000c82 	.word	0x20000c82
 8000a68:	0800c9b4 	.word	0x0800c9b4
 8000a6c:	0800c9c4 	.word	0x0800c9c4
 8000a70:	0800c9d4 	.word	0x0800c9d4
 8000a74:	20000ca1 	.word	0x20000ca1
 8000a78:	20000c58 	.word	0x20000c58
 8000a7c:	0800c9d8 	.word	0x0800c9d8
 8000a80:	0800c9e8 	.word	0x0800c9e8
 8000a84:	0800c9f8 	.word	0x0800c9f8
 8000a88:	20000ca2 	.word	0x20000ca2
 8000a8c:	0800c9fc 	.word	0x0800c9fc
 8000a90:	0800ca0c 	.word	0x0800ca0c
 8000a94:	20000ca3 	.word	0x20000ca3
 8000a98:	0800ca1c 	.word	0x0800ca1c
 8000a9c:	0800ca2c 	.word	0x0800ca2c
 8000aa0:	20000ca4 	.word	0x20000ca4
 8000aa4:	0800ca3c 	.word	0x0800ca3c
 8000aa8:	0800ca4c 	.word	0x0800ca4c
 8000aac:	20000ca5 	.word	0x20000ca5
 8000ab0:	0800ca5c 	.word	0x0800ca5c
 8000ab4:	0800ca6c 	.word	0x0800ca6c
 8000ab8:	20000ca6 	.word	0x20000ca6
 8000abc:	0800ca7c 	.word	0x0800ca7c
			} else if(dilSecim == 1) {
 8000ac0:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <menu+0x680>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <menu+0x684>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fcf6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ad2:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <menu+0x688>)
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fcf1 	bl	80004be <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <menu+0x68c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	494b      	ldr	r1, [pc, #300]	; (8000c10 <menu+0x690>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fdcb 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000aea:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <menu+0x690>)
 8000aec:	210e      	movs	r1, #14
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fce5 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000af4:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <menu+0x694>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d123      	bne.n	8000b44 <menu+0x5c4>
			if(dilSecim == 0) {
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <menu+0x680>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000b04:	4a44      	ldr	r2, [pc, #272]	; (8000c18 <menu+0x698>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fcd8 	bl	80004be <lcd_print>
 8000b0e:	e008      	b.n	8000b22 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000b10:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <menu+0x680>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000b18:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <menu+0x69c>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fcce 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b22:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <menu+0x688>)
 8000b24:	210f      	movs	r1, #15
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fcc9 	bl	80004be <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000b2c:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <menu+0x6a0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	220a      	movs	r2, #10
 8000b32:	4937      	ldr	r1, [pc, #220]	; (8000c10 <menu+0x690>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f00b fda3 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <menu+0x690>)
 8000b3c:	210e      	movs	r1, #14
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff fcbd 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <menu+0x694>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d123      	bne.n	8000b94 <menu+0x614>
			if(dilSecim == 0) {
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <menu+0x680>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000b54:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <menu+0x6a4>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fcb0 	bl	80004be <lcd_print>
 8000b5e:	e008      	b.n	8000b72 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <menu+0x680>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000b68:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <menu+0x6a8>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fca6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b72:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <menu+0x688>)
 8000b74:	210f      	movs	r1, #15
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fca1 	bl	80004be <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <menu+0x6ac>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	220a      	movs	r2, #10
 8000b82:	4923      	ldr	r1, [pc, #140]	; (8000c10 <menu+0x690>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00b fd7b 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <menu+0x690>)
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fc95 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <menu+0x694>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d123      	bne.n	8000be4 <menu+0x664>
			if(dilSecim == 0) {
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <menu+0x680>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ba4:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <menu+0x6b0>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fc88 	bl	80004be <lcd_print>
 8000bae:	e008      	b.n	8000bc2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <menu+0x680>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <menu+0x6b4>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fc7e 	bl	80004be <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <menu+0x6b8>)
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fc79 	bl	80004be <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <menu+0x6bc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	490f      	ldr	r1, [pc, #60]	; (8000c10 <menu+0x690>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00b fd53 	bl	800c680 <itoa>
			lcd_print(2, 15, snum);
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <menu+0x690>)
 8000bdc:	210f      	movs	r1, #15
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fc6d 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <menu+0x694>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	d134      	bne.n	8000c56 <menu+0x6d6>
			if(dilSecim == 0) {
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <menu+0x680>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d127      	bne.n	8000c44 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <menu+0x6c0>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc60 	bl	80004be <lcd_print>
 8000bfe:	e02a      	b.n	8000c56 <menu+0x6d6>
 8000c00:	20000ca0 	.word	0x20000ca0
 8000c04:	0800ca8c 	.word	0x0800ca8c
 8000c08:	0800c9f8 	.word	0x0800c9f8
 8000c0c:	20000ca7 	.word	0x20000ca7
 8000c10:	20000c58 	.word	0x20000c58
 8000c14:	20000c82 	.word	0x20000c82
 8000c18:	0800ca9c 	.word	0x0800ca9c
 8000c1c:	0800caac 	.word	0x0800caac
 8000c20:	20000ca8 	.word	0x20000ca8
 8000c24:	0800cabc 	.word	0x0800cabc
 8000c28:	0800cacc 	.word	0x0800cacc
 8000c2c:	20000ca9 	.word	0x20000ca9
 8000c30:	0800cadc 	.word	0x0800cadc
 8000c34:	0800caec 	.word	0x0800caec
 8000c38:	0800cafc 	.word	0x0800cafc
 8000c3c:	20000caa 	.word	0x20000caa
 8000c40:	0800cb00 	.word	0x0800cb00
			} else if(dilSecim == 1) {
 8000c44:	4b82      	ldr	r3, [pc, #520]	; (8000e50 <menu+0x8d0>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000c4c:	4a81      	ldr	r2, [pc, #516]	; (8000e54 <menu+0x8d4>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fc34 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c56:	2102      	movs	r1, #2
 8000c58:	487f      	ldr	r0, [pc, #508]	; (8000e58 <menu+0x8d8>)
 8000c5a:	f007 fb09 	bl	8008270 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d119      	bne.n	8000c98 <menu+0x718>
 8000c64:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <menu+0x8dc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f083 0301 	eor.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d012      	beq.n	8000c98 <menu+0x718>
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <menu+0x8e0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000c7a:	4b7a      	ldr	r3, [pc, #488]	; (8000e64 <menu+0x8e4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <menu+0x8e4>)
 8000c84:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000c86:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <menu+0x8e4>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	d902      	bls.n	8000c94 <menu+0x714>
				hataGostermeSirasi = 0;
 8000c8e:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <menu+0x8e4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000c94:	f003 fbd8 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c98:	2104      	movs	r1, #4
 8000c9a:	486f      	ldr	r0, [pc, #444]	; (8000e58 <menu+0x8d8>)
 8000c9c:	f007 fae8 	bl	8008270 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d119      	bne.n	8000cda <menu+0x75a>
 8000ca6:	4b6d      	ldr	r3, [pc, #436]	; (8000e5c <menu+0x8dc>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d012      	beq.n	8000cda <menu+0x75a>
 8000cb4:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <menu+0x8e0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10e      	bne.n	8000cda <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <menu+0x8e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <menu+0x8e4>)
 8000cc6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000cc8:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <menu+0x8e4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b0b      	cmp	r3, #11
 8000cce:	d902      	bls.n	8000cd6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000cd0:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <menu+0x8e4>)
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000cd6:	f003 fbb7 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000cda:	2108      	movs	r1, #8
 8000cdc:	485e      	ldr	r0, [pc, #376]	; (8000e58 <menu+0x8d8>)
 8000cde:	f007 fac7 	bl	8008270 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d153      	bne.n	8000d90 <menu+0x810>
 8000ce8:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <menu+0x8dc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d04c      	beq.n	8000d90 <menu+0x810>
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <menu+0x8e4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d148      	bne.n	8000d90 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <menu+0x8e8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <menu+0x8ec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000d0c:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <menu+0x8f0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <menu+0x8ec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000d1a:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <menu+0x8f4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <menu+0x8ec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <menu+0x8f8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <menu+0x8ec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <menu+0x8fc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <menu+0x8ec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000d44:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <menu+0x900>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <menu+0x8ec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <menu+0x904>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <menu+0x8ec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <menu+0x908>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <menu+0x8ec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <menu+0x90c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <menu+0x8ec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <menu+0x910>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <menu+0x8ec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <menu+0x914>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <menu+0x918>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	f040 80fc 	bne.w	8000f92 <menu+0xa12>
		if(dilSecim == 0) {
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <menu+0x8d0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d105      	bne.n	8000dae <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000da2:	4a3e      	ldr	r2, [pc, #248]	; (8000e9c <menu+0x91c>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fb89 	bl	80004be <lcd_print>
 8000dac:	e008      	b.n	8000dc0 <menu+0x840>
		} else if(dilSecim == 1) {
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <menu+0x8d0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d104      	bne.n	8000dc0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000db6:	4a3a      	ldr	r2, [pc, #232]	; (8000ea0 <menu+0x920>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fb7f 	bl	80004be <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <menu+0x8e0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d003      	beq.n	8000dd0 <menu+0x850>
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <menu+0x8e0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d112      	bne.n	8000df6 <menu+0x876>
			if(dilSecim == 0) {
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <menu+0x8d0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <menu+0x924>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff fb6e 	bl	80004be <lcd_print>
 8000de2:	e008      	b.n	8000df6 <menu+0x876>
			} else if(dilSecim == 1) {
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <menu+0x8d0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d104      	bne.n	8000df6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <menu+0x928>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fb64 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <menu+0x92c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <menu+0x8ac>
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <menu+0x8e0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d112      	bne.n	8000e2c <menu+0x8ac>
			if(dilSecim == 0) {
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <menu+0x8d0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000e0e:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <menu+0x930>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fb53 	bl	80004be <lcd_print>
 8000e18:	e008      	b.n	8000e2c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <menu+0x8d0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8000e22:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <menu+0x934>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fb49 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <menu+0x92c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d14c      	bne.n	8000ece <menu+0x94e>
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <menu+0x8e0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d148      	bne.n	8000ece <menu+0x94e>
			if(dilSecim == 0) {
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <menu+0x8d0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d13b      	bne.n	8000ebc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <menu+0x938>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fb38 	bl	80004be <lcd_print>
 8000e4e:	e03e      	b.n	8000ece <menu+0x94e>
 8000e50:	20000ca0 	.word	0x20000ca0
 8000e54:	0800cb14 	.word	0x0800cb14
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	20000cae 	.word	0x20000cae
 8000e60:	20000c8f 	.word	0x20000c8f
 8000e64:	20000c82 	.word	0x20000c82
 8000e68:	20000ca1 	.word	0x20000ca1
 8000e6c:	20000c18 	.word	0x20000c18
 8000e70:	20000ca2 	.word	0x20000ca2
 8000e74:	20000ca3 	.word	0x20000ca3
 8000e78:	20000ca4 	.word	0x20000ca4
 8000e7c:	20000ca5 	.word	0x20000ca5
 8000e80:	20000ca6 	.word	0x20000ca6
 8000e84:	20000ca7 	.word	0x20000ca7
 8000e88:	20000ca8 	.word	0x20000ca8
 8000e8c:	20000ca9 	.word	0x20000ca9
 8000e90:	20000caa 	.word	0x20000caa
 8000e94:	20000cab 	.word	0x20000cab
 8000e98:	20000c80 	.word	0x20000c80
 8000e9c:	0800cb28 	.word	0x0800cb28
 8000ea0:	0800cb3c 	.word	0x0800cb3c
 8000ea4:	0800cb50 	.word	0x0800cb50
 8000ea8:	0800cb64 	.word	0x0800cb64
 8000eac:	20000c81 	.word	0x20000c81
 8000eb0:	0800cb78 	.word	0x0800cb78
 8000eb4:	0800cb88 	.word	0x0800cb88
 8000eb8:	0800cb98 	.word	0x0800cb98
			} else if(dilSecim == 1) {
 8000ebc:	4b98      	ldr	r3, [pc, #608]	; (8001120 <menu+0xba0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d104      	bne.n	8000ece <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8000ec4:	4a97      	ldr	r2, [pc, #604]	; (8001124 <menu+0xba4>)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff faf8 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4895      	ldr	r0, [pc, #596]	; (8001128 <menu+0xba8>)
 8000ed2:	f007 f9cd 	bl	8008270 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d119      	bne.n	8000f10 <menu+0x990>
 8000edc:	4b93      	ldr	r3, [pc, #588]	; (800112c <menu+0xbac>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d012      	beq.n	8000f10 <menu+0x990>
 8000eea:	4b91      	ldr	r3, [pc, #580]	; (8001130 <menu+0xbb0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8000ef2:	4b90      	ldr	r3, [pc, #576]	; (8001134 <menu+0xbb4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <menu+0xbb4>)
 8000efc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <menu+0xbb4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d902      	bls.n	8000f0c <menu+0x98c>
				calismaSekli = 0;
 8000f06:	4b8b      	ldr	r3, [pc, #556]	; (8001134 <menu+0xbb4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000f0c:	f003 fa9c 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000f10:	2104      	movs	r1, #4
 8000f12:	4885      	ldr	r0, [pc, #532]	; (8001128 <menu+0xba8>)
 8000f14:	f007 f9ac 	bl	8008270 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d119      	bne.n	8000f52 <menu+0x9d2>
 8000f1e:	4b83      	ldr	r3, [pc, #524]	; (800112c <menu+0xbac>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d012      	beq.n	8000f52 <menu+0x9d2>
 8000f2c:	4b80      	ldr	r3, [pc, #512]	; (8001130 <menu+0xbb0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10e      	bne.n	8000f52 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <menu+0xbb4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <menu+0xbb4>)
 8000f3e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000f40:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <menu+0xbb4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <menu+0x9ce>
	    		calismaSekli = 1;
 8000f48:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <menu+0xbb4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f4e:	f003 fa7b 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f52:	2108      	movs	r1, #8
 8000f54:	4874      	ldr	r0, [pc, #464]	; (8001128 <menu+0xba8>)
 8000f56:	f007 f98b 	bl	8008270 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d118      	bne.n	8000f92 <menu+0xa12>
 8000f60:	4b72      	ldr	r3, [pc, #456]	; (800112c <menu+0xbac>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d011      	beq.n	8000f92 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <menu+0xbb4>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b71      	ldr	r3, [pc, #452]	; (8001138 <menu+0xbb8>)
 8000f74:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <menu+0xbb4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d106      	bne.n	8000f8c <menu+0xa0c>
				altLimit = 1;
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <menu+0xbbc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000f84:	4b6d      	ldr	r3, [pc, #436]	; (800113c <menu+0xbbc>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <menu+0xbb8>)
 8000f8a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <menu+0xbc0>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000f92:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <menu+0xbc4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	f040 8083 	bne.w	80010a2 <menu+0xb22>
		if(dilSecim == 0) {
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <menu+0xba0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000fa4:	4a68      	ldr	r2, [pc, #416]	; (8001148 <menu+0xbc8>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fa88 	bl	80004be <lcd_print>
 8000fae:	e008      	b.n	8000fc2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8000fb0:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <menu+0xba0>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d104      	bne.n	8000fc2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000fb8:	4a64      	ldr	r2, [pc, #400]	; (800114c <menu+0xbcc>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fa7e 	bl	80004be <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <menu+0xbd0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <menu+0xa72>
			if(dilSecim == 0) {
 8000fca:	4b55      	ldr	r3, [pc, #340]	; (8001120 <menu+0xba0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8000fd2:	4a60      	ldr	r2, [pc, #384]	; (8001154 <menu+0xbd4>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fa71 	bl	80004be <lcd_print>
 8000fdc:	e012      	b.n	8001004 <menu+0xa84>
			} else if(dilSecim == 1) {
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <menu+0xba0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10e      	bne.n	8001004 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <menu+0xbd8>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2002      	movs	r0, #2
 8000fec:	f7ff fa67 	bl	80004be <lcd_print>
 8000ff0:	e008      	b.n	8001004 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <menu+0xbd0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d104      	bne.n	8001004 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <menu+0xbdc>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fa5d 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001004:	2102      	movs	r1, #2
 8001006:	4848      	ldr	r0, [pc, #288]	; (8001128 <menu+0xba8>)
 8001008:	f007 f932 	bl	8008270 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d115      	bne.n	800103e <menu+0xabe>
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <menu+0xbac>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00e      	beq.n	800103e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <menu+0xbd0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <menu+0xbd0>)
 800102a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <menu+0xbd0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d902      	bls.n	800103a <menu+0xaba>
				emniyetCercevesi = 0;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <menu+0xbd0>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800103a:	f003 fa05 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800103e:	2104      	movs	r1, #4
 8001040:	4839      	ldr	r0, [pc, #228]	; (8001128 <menu+0xba8>)
 8001042:	f007 f915 	bl	8008270 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <menu+0xaf8>
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <menu+0xbac>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <menu+0xbd0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <menu+0xbd0>)
 8001064:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <menu+0xbd0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <menu+0xbd0>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001074:	f003 f9e8 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001078:	2108      	movs	r1, #8
 800107a:	482b      	ldr	r0, [pc, #172]	; (8001128 <menu+0xba8>)
 800107c:	f007 f8f8 	bl	8008270 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10d      	bne.n	80010a2 <menu+0xb22>
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <menu+0xbac>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <menu+0xbd0>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <menu+0xbb8>)
 800109a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <menu+0xbc0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <menu+0xbc4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	f040 80ba 	bne.w	8001220 <menu+0xca0>
		if(dilSecim == 0) {
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <menu+0xba0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <menu+0xbe0>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fa00 	bl	80004be <lcd_print>
 80010be:	e008      	b.n	80010d2 <menu+0xb52>
		} else if(dilSecim == 1) {
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <menu+0xba0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <menu+0xbe4>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff f9f6 	bl	80004be <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <menu+0xbe8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d113      	bne.n	8001102 <menu+0xb82>
			if(dilSecim == 0) {
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <menu+0xba0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <menu+0xbd4>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2002      	movs	r0, #2
 80010e8:	f7ff f9e9 	bl	80004be <lcd_print>
 80010ec:	e049      	b.n	8001182 <menu+0xc02>
			} else if(dilSecim == 1) {
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <menu+0xba0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d145      	bne.n	8001182 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <menu+0xbd8>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff f9df 	bl	80004be <lcd_print>
 8001100:	e03f      	b.n	8001182 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <menu+0xbe8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d13b      	bne.n	8001182 <menu+0xc02>
			if(dilSecim == 0) {
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <menu+0xba0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d12e      	bne.n	8001170 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <menu+0xbec>)
 8001114:	2101      	movs	r1, #1
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff f9d1 	bl	80004be <lcd_print>
 800111c:	e031      	b.n	8001182 <menu+0xc02>
 800111e:	bf00      	nop
 8001120:	20000ca0 	.word	0x20000ca0
 8001124:	0800cba8 	.word	0x0800cba8
 8001128:	40010800 	.word	0x40010800
 800112c:	20000cae 	.word	0x20000cae
 8001130:	20000c8f 	.word	0x20000c8f
 8001134:	20000c81 	.word	0x20000c81
 8001138:	20000c18 	.word	0x20000c18
 800113c:	20000c86 	.word	0x20000c86
 8001140:	20000cab 	.word	0x20000cab
 8001144:	20000c80 	.word	0x20000c80
 8001148:	0800cbb8 	.word	0x0800cbb8
 800114c:	0800cbcc 	.word	0x0800cbcc
 8001150:	20000c84 	.word	0x20000c84
 8001154:	0800cbe0 	.word	0x0800cbe0
 8001158:	0800cbf4 	.word	0x0800cbf4
 800115c:	0800cc08 	.word	0x0800cc08
 8001160:	0800cc18 	.word	0x0800cc18
 8001164:	0800cc2c 	.word	0x0800cc2c
 8001168:	20000c85 	.word	0x20000c85
 800116c:	0800cc40 	.word	0x0800cc40
			} else if(dilSecim == 1) {
 8001170:	4b92      	ldr	r3, [pc, #584]	; (80013bc <menu+0xe3c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d104      	bne.n	8001182 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001178:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <menu+0xe40>)
 800117a:	2101      	movs	r1, #1
 800117c:	2002      	movs	r0, #2
 800117e:	f7ff f99e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001182:	2102      	movs	r1, #2
 8001184:	488f      	ldr	r0, [pc, #572]	; (80013c4 <menu+0xe44>)
 8001186:	f007 f873 	bl	8008270 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d115      	bne.n	80011bc <menu+0xc3c>
 8001190:	4b8d      	ldr	r3, [pc, #564]	; (80013c8 <menu+0xe48>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <menu+0xe4c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <menu+0xe4c>)
 80011a8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <menu+0xe4c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d902      	bls.n	80011b8 <menu+0xc38>
				yavaslamaLimit = 0;
 80011b2:	4b86      	ldr	r3, [pc, #536]	; (80013cc <menu+0xe4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011b8:	f003 f946 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80011bc:	2104      	movs	r1, #4
 80011be:	4881      	ldr	r0, [pc, #516]	; (80013c4 <menu+0xe44>)
 80011c0:	f007 f856 	bl	8008270 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d115      	bne.n	80011f6 <menu+0xc76>
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <menu+0xe48>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00e      	beq.n	80011f6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80011d8:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <menu+0xe4c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <menu+0xe4c>)
 80011e2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <menu+0xe4c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80011ec:	4b77      	ldr	r3, [pc, #476]	; (80013cc <menu+0xe4c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80011f2:	f003 f929 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011f6:	2108      	movs	r1, #8
 80011f8:	4872      	ldr	r0, [pc, #456]	; (80013c4 <menu+0xe44>)
 80011fa:	f007 f839 	bl	8008270 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10d      	bne.n	8001220 <menu+0xca0>
 8001204:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <menu+0xe48>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <menu+0xe4c>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <menu+0xe50>)
 8001218:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800121a:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <menu+0xe54>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <menu+0xe58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b05      	cmp	r3, #5
 8001226:	f040 80b9 	bne.w	800139c <menu+0xe1c>
		if(dilSecim == 0) {
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <menu+0xe3c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001232:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <menu+0xe5c>)
 8001234:	2101      	movs	r1, #1
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff f941 	bl	80004be <lcd_print>
 800123c:	e008      	b.n	8001250 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <menu+0xe3c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d104      	bne.n	8001250 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <menu+0xe60>)
 8001248:	2101      	movs	r1, #1
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff f937 	bl	80004be <lcd_print>
		}

		if(altLimit == 0) {
 8001250:	4b64      	ldr	r3, [pc, #400]	; (80013e4 <menu+0xe64>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d113      	bne.n	8001280 <menu+0xd00>
			if(dilSecim == 0) {
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <menu+0xe3c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001260:	4a61      	ldr	r2, [pc, #388]	; (80013e8 <menu+0xe68>)
 8001262:	2101      	movs	r1, #1
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff f92a 	bl	80004be <lcd_print>
 800126a:	e020      	b.n	80012ae <menu+0xd2e>
			} else if(dilSecim == 1) {
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <menu+0xe3c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d11c      	bne.n	80012ae <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001274:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <menu+0xe6c>)
 8001276:	2101      	movs	r1, #1
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff f920 	bl	80004be <lcd_print>
 800127e:	e016      	b.n	80012ae <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <menu+0xe64>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d112      	bne.n	80012ae <menu+0xd2e>
			if(dilSecim == 0){
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <menu+0xe3c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001290:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <menu+0xe70>)
 8001292:	2101      	movs	r1, #1
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff f912 	bl	80004be <lcd_print>
 800129a:	e008      	b.n	80012ae <menu+0xd2e>
			} else if(dilSecim == 1){
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <menu+0xe3c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80012a4:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <menu+0xe40>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff f908 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80012ae:	2102      	movs	r1, #2
 80012b0:	4844      	ldr	r0, [pc, #272]	; (80013c4 <menu+0xe44>)
 80012b2:	f006 ffdd 	bl	8008270 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d119      	bne.n	80012f0 <menu+0xd70>
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <menu+0xe48>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d012      	beq.n	80012f0 <menu+0xd70>
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <menu+0xe74>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <menu+0xd70>
			altLimit = altLimit + 1;
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <menu+0xe64>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <menu+0xe64>)
 80012dc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <menu+0xe64>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d902      	bls.n	80012ec <menu+0xd6c>
				altLimit = 0;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <menu+0xe64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80012ec:	f003 f8ac 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80012f0:	2104      	movs	r1, #4
 80012f2:	4834      	ldr	r0, [pc, #208]	; (80013c4 <menu+0xe44>)
 80012f4:	f006 ffbc 	bl	8008270 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d119      	bne.n	8001332 <menu+0xdb2>
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <menu+0xe48>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f083 0301 	eor.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d012      	beq.n	8001332 <menu+0xdb2>
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <menu+0xe74>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10e      	bne.n	8001332 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <menu+0xe64>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <menu+0xe64>)
 800131e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <menu+0xe64>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <menu+0xdae>
		   		altLimit = 1;
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <menu+0xe64>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800132e:	f003 f88b 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001332:	2108      	movs	r1, #8
 8001334:	4823      	ldr	r0, [pc, #140]	; (80013c4 <menu+0xe44>)
 8001336:	f006 ff9b 	bl	8008270 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d12d      	bne.n	800139c <menu+0xe1c>
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <menu+0xe48>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d026      	beq.n	800139c <menu+0xe1c>
			eepromData[5] = altLimit;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <menu+0xe64>)
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <menu+0xe50>)
 8001354:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <menu+0xe64>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d110      	bne.n	8001380 <menu+0xe00>
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <menu+0xe78>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <menu+0xdee>
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <menu+0xe78>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d108      	bne.n	8001380 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <menu+0xe78>)
 8001370:	2203      	movs	r2, #3
 8001372:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <menu+0xe78>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <menu+0xe50>)
 800137a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800137e:	e00a      	b.n	8001396 <menu+0xe16>
			} else if(altLimit == 0) {
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <menu+0xe64>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <menu+0xe16>
				platformSilindirTipi = 0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <menu+0xe7c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <menu+0xe7c>)
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <menu+0xe50>)
 8001394:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <menu+0xe54>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <menu+0xe58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	f040 80b6 	bne.w	8001512 <menu+0xf92>
		if(dilSecim == 0) {
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <menu+0xe3c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d12a      	bne.n	8001404 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <menu+0xe80>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff f883 	bl	80004be <lcd_print>
 80013b8:	e02d      	b.n	8001416 <menu+0xe96>
 80013ba:	bf00      	nop
 80013bc:	20000ca0 	.word	0x20000ca0
 80013c0:	0800cc54 	.word	0x0800cc54
 80013c4:	40010800 	.word	0x40010800
 80013c8:	20000cae 	.word	0x20000cae
 80013cc:	20000c85 	.word	0x20000c85
 80013d0:	20000c18 	.word	0x20000c18
 80013d4:	20000cab 	.word	0x20000cab
 80013d8:	20000c80 	.word	0x20000c80
 80013dc:	0800cc68 	.word	0x0800cc68
 80013e0:	0800cc7c 	.word	0x0800cc7c
 80013e4:	20000c86 	.word	0x20000c86
 80013e8:	0800cbe0 	.word	0x0800cbe0
 80013ec:	0800cbf4 	.word	0x0800cbf4
 80013f0:	0800cc40 	.word	0x0800cc40
 80013f4:	20000c81 	.word	0x20000c81
 80013f8:	20000c8d 	.word	0x20000c8d
 80013fc:	20000c93 	.word	0x20000c93
 8001400:	0800cc90 	.word	0x0800cc90
		} else if(dilSecim == 1){
 8001404:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <menu+0x1070>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800140c:	4a79      	ldr	r2, [pc, #484]	; (80015f4 <menu+0x1074>)
 800140e:	2101      	movs	r1, #1
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff f854 	bl	80004be <lcd_print>
		}
		if(basincSalteri == 0){
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <menu+0x1078>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d113      	bne.n	8001446 <menu+0xec6>
			if(dilSecim == 0) {
 800141e:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <menu+0x1070>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <menu+0x107c>)
 8001428:	2101      	movs	r1, #1
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff f847 	bl	80004be <lcd_print>
 8001430:	e020      	b.n	8001474 <menu+0xef4>
			} else if(dilSecim == 1){
 8001432:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <menu+0x1070>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11c      	bne.n	8001474 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800143a:	4a71      	ldr	r2, [pc, #452]	; (8001600 <menu+0x1080>)
 800143c:	2101      	movs	r1, #1
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff f83d 	bl	80004be <lcd_print>
 8001444:	e016      	b.n	8001474 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001446:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <menu+0x1078>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d112      	bne.n	8001474 <menu+0xef4>
			if(dilSecim == 0) {
 800144e:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <menu+0x1070>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d105      	bne.n	8001462 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001456:	4a6b      	ldr	r2, [pc, #428]	; (8001604 <menu+0x1084>)
 8001458:	2101      	movs	r1, #1
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff f82f 	bl	80004be <lcd_print>
 8001460:	e008      	b.n	8001474 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <menu+0x1070>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d104      	bne.n	8001474 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800146a:	4a67      	ldr	r2, [pc, #412]	; (8001608 <menu+0x1088>)
 800146c:	2101      	movs	r1, #1
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff f825 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001474:	2102      	movs	r1, #2
 8001476:	4865      	ldr	r0, [pc, #404]	; (800160c <menu+0x108c>)
 8001478:	f006 fefa 	bl	8008270 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d115      	bne.n	80014ae <menu+0xf2e>
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <menu+0x1090>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <menu+0x1078>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <menu+0x1078>)
 800149a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <menu+0x1078>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d902      	bls.n	80014aa <menu+0xf2a>
				basincSalteri = 0;
 80014a4:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <menu+0x1078>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80014aa:	f002 ffcd 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80014ae:	2104      	movs	r1, #4
 80014b0:	4856      	ldr	r0, [pc, #344]	; (800160c <menu+0x108c>)
 80014b2:	f006 fedd 	bl	8008270 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d115      	bne.n	80014e8 <menu+0xf68>
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <menu+0x1090>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00e      	beq.n	80014e8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <menu+0x1078>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <menu+0x1078>)
 80014d4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <menu+0x1078>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <menu+0xf64>
		   		basincSalteri = 1;
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <menu+0x1078>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014e4:	f002 ffb0 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e8:	2108      	movs	r1, #8
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <menu+0x108c>)
 80014ec:	f006 fec0 	bl	8008270 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10d      	bne.n	8001512 <menu+0xf92>
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <menu+0x1090>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <menu+0x1078>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <menu+0x1094>)
 800150a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <menu+0x1098>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <menu+0x109c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b07      	cmp	r3, #7
 8001518:	f040 80f5 	bne.w	8001706 <menu+0x1186>
		if(dilSecim == 0) {
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <menu+0x1070>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001524:	4a3e      	ldr	r2, [pc, #248]	; (8001620 <menu+0x10a0>)
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f7fe ffc8 	bl	80004be <lcd_print>
 800152e:	e008      	b.n	8001542 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <menu+0x1070>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d104      	bne.n	8001542 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <menu+0x10a4>)
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f7fe ffbe 	bl	80004be <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <menu+0x10a8>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d113      	bne.n	8001572 <menu+0xff2>
			if(dilSecim == 0) {
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <menu+0x1070>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <menu+0x107c>)
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f7fe ffb1 	bl	80004be <lcd_print>
 800155c:	e079      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1){
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <menu+0x1070>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d175      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <menu+0x1080>)
 8001568:	2101      	movs	r1, #1
 800156a:	2002      	movs	r0, #2
 800156c:	f7fe ffa7 	bl	80004be <lcd_print>
 8001570:	e06f      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <menu+0x10a8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d113      	bne.n	80015a2 <menu+0x1022>
			if(dilSecim == 0) {
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <menu+0x1070>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <menu+0x10ac>)
 8001584:	2101      	movs	r1, #1
 8001586:	2002      	movs	r0, #2
 8001588:	f7fe ff99 	bl	80004be <lcd_print>
 800158c:	e061      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <menu+0x1070>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d15d      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <menu+0x10b0>)
 8001598:	2101      	movs	r1, #1
 800159a:	2002      	movs	r0, #2
 800159c:	f7fe ff8f 	bl	80004be <lcd_print>
 80015a0:	e057      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <menu+0x10a8>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d113      	bne.n	80015d2 <menu+0x1052>
			if(dilSecim == 0) {
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <menu+0x1070>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <menu+0x10b4>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7fe ff81 	bl	80004be <lcd_print>
 80015bc:	e049      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <menu+0x1070>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d145      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <menu+0x10b8>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7fe ff77 	bl	80004be <lcd_print>
 80015d0:	e03f      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <menu+0x10a8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d13b      	bne.n	8001652 <menu+0x10d2>
			if(dilSecim == 0) {
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <menu+0x1070>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d12e      	bne.n	8001640 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <menu+0x10bc>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7fe ff69 	bl	80004be <lcd_print>
 80015ec:	e031      	b.n	8001652 <menu+0x10d2>
 80015ee:	bf00      	nop
 80015f0:	20000ca0 	.word	0x20000ca0
 80015f4:	0800cca0 	.word	0x0800cca0
 80015f8:	20000c87 	.word	0x20000c87
 80015fc:	0800cbe0 	.word	0x0800cbe0
 8001600:	0800cbf4 	.word	0x0800cbf4
 8001604:	0800cc40 	.word	0x0800cc40
 8001608:	0800cc54 	.word	0x0800cc54
 800160c:	40010800 	.word	0x40010800
 8001610:	20000cae 	.word	0x20000cae
 8001614:	20000c18 	.word	0x20000c18
 8001618:	20000cab 	.word	0x20000cab
 800161c:	20000c80 	.word	0x20000c80
 8001620:	0800ccb0 	.word	0x0800ccb0
 8001624:	0800ccc4 	.word	0x0800ccc4
 8001628:	20000c88 	.word	0x20000c88
 800162c:	0800ccd8 	.word	0x0800ccd8
 8001630:	0800ccec 	.word	0x0800ccec
 8001634:	0800cd00 	.word	0x0800cd00
 8001638:	0800cd14 	.word	0x0800cd14
 800163c:	0800cd28 	.word	0x0800cd28
			} else if(dilSecim == 1){
 8001640:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <menu+0x1328>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d104      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001648:	4a98      	ldr	r2, [pc, #608]	; (80018ac <menu+0x132c>)
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f7fe ff36 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001652:	2102      	movs	r1, #2
 8001654:	4896      	ldr	r0, [pc, #600]	; (80018b0 <menu+0x1330>)
 8001656:	f006 fe0b 	bl	8008270 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d115      	bne.n	800168c <menu+0x110c>
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <menu+0x1334>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <menu+0x1338>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <menu+0x1338>)
 8001678:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <menu+0x1338>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d902      	bls.n	8001688 <menu+0x1108>
				kapiSecimleri = 0;
 8001682:	4b8d      	ldr	r3, [pc, #564]	; (80018b8 <menu+0x1338>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001688:	f002 fede 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800168c:	2104      	movs	r1, #4
 800168e:	4888      	ldr	r0, [pc, #544]	; (80018b0 <menu+0x1330>)
 8001690:	f006 fdee 	bl	8008270 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d115      	bne.n	80016c6 <menu+0x1146>
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <menu+0x1334>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <menu+0x1338>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <menu+0x1338>)
 80016b2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <menu+0x1338>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d902      	bls.n	80016c2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80016bc:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <menu+0x1338>)
 80016be:	2203      	movs	r2, #3
 80016c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80016c2:	f002 fec1 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016c6:	2108      	movs	r1, #8
 80016c8:	4879      	ldr	r0, [pc, #484]	; (80018b0 <menu+0x1330>)
 80016ca:	f006 fdd1 	bl	8008270 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d118      	bne.n	8001706 <menu+0x1186>
 80016d4:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <menu+0x1334>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d011      	beq.n	8001706 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <menu+0x1338>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4b75      	ldr	r3, [pc, #468]	; (80018bc <menu+0x133c>)
 80016e8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <menu+0x1338>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <menu+0x1180>
				altLimit = 1;
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <menu+0x1340>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80016f8:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <menu+0x1340>)
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <menu+0x133c>)
 80016fe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <menu+0x1344>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <menu+0x1348>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b08      	cmp	r3, #8
 800170c:	f040 8092 	bne.w	8001834 <menu+0x12b4>
		if(dilSecim == 0) {
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <menu+0x1328>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <menu+0x134c>)
 800171a:	2101      	movs	r1, #1
 800171c:	2001      	movs	r0, #1
 800171e:	f7fe fece 	bl	80004be <lcd_print>
 8001722:	e008      	b.n	8001736 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001724:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <menu+0x1328>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d104      	bne.n	8001736 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800172c:	4a68      	ldr	r2, [pc, #416]	; (80018d0 <menu+0x1350>)
 800172e:	2101      	movs	r1, #1
 8001730:	2001      	movs	r0, #1
 8001732:	f7fe fec4 	bl	80004be <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <menu+0x1354>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <menu+0x11e6>
			if(dilSecim == 0) {
 800173e:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <menu+0x1328>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001746:	4a64      	ldr	r2, [pc, #400]	; (80018d8 <menu+0x1358>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f7fe feb7 	bl	80004be <lcd_print>
 8001750:	e020      	b.n	8001794 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001752:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <menu+0x1328>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d11c      	bne.n	8001794 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800175a:	4a60      	ldr	r2, [pc, #384]	; (80018dc <menu+0x135c>)
 800175c:	2101      	movs	r1, #1
 800175e:	2002      	movs	r0, #2
 8001760:	f7fe fead 	bl	80004be <lcd_print>
 8001764:	e016      	b.n	8001794 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <menu+0x1354>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d112      	bne.n	8001794 <menu+0x1214>
			if(dilSecim == 0){
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <menu+0x1328>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <menu+0x1360>)
 8001778:	2101      	movs	r1, #1
 800177a:	2002      	movs	r0, #2
 800177c:	f7fe fe9f 	bl	80004be <lcd_print>
 8001780:	e008      	b.n	8001794 <menu+0x1214>
			} else if(dilSecim == 1){
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <menu+0x1328>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d104      	bne.n	8001794 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800178a:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <menu+0x1364>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f7fe fe95 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001794:	2102      	movs	r1, #2
 8001796:	4846      	ldr	r0, [pc, #280]	; (80018b0 <menu+0x1330>)
 8001798:	f006 fd6a 	bl	8008270 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d115      	bne.n	80017ce <menu+0x124e>
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <menu+0x1334>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <menu+0x1354>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <menu+0x1354>)
 80017ba:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <menu+0x1354>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d902      	bls.n	80017ca <menu+0x124a>
				kapiAcTipi = 0;
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <menu+0x1354>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017ca:	f002 fe3d 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017ce:	2104      	movs	r1, #4
 80017d0:	4837      	ldr	r0, [pc, #220]	; (80018b0 <menu+0x1330>)
 80017d2:	f006 fd4d 	bl	8008270 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d115      	bne.n	8001808 <menu+0x1288>
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <menu+0x1334>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00e      	beq.n	8001808 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <menu+0x1354>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <menu+0x1354>)
 80017f4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <menu+0x1354>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <menu+0x1284>
		   		kapiAcTipi = 1;
 80017fe:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <menu+0x1354>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001804:	f002 fe20 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001808:	2108      	movs	r1, #8
 800180a:	4829      	ldr	r0, [pc, #164]	; (80018b0 <menu+0x1330>)
 800180c:	f006 fd30 	bl	8008270 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10e      	bne.n	8001834 <menu+0x12b4>
 8001816:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <menu+0x1334>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <menu+0x1354>)
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <menu+0x133c>)
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <menu+0x1344>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <menu+0x1348>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	f040 80b9 	bne.w	80019b0 <menu+0x1430>
		if(dilSecim == 0){
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <menu+0x1328>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001846:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <menu+0x1368>)
 8001848:	2101      	movs	r1, #1
 800184a:	2001      	movs	r0, #1
 800184c:	f7fe fe37 	bl	80004be <lcd_print>
 8001850:	e008      	b.n	8001864 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <menu+0x1328>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d104      	bne.n	8001864 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800185a:	4a24      	ldr	r2, [pc, #144]	; (80018ec <menu+0x136c>)
 800185c:	2101      	movs	r1, #1
 800185e:	2001      	movs	r0, #1
 8001860:	f7fe fe2d 	bl	80004be <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <menu+0x1370>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <menu+0x1374>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f7fe fe24 	bl	80004be <lcd_print>
 8001876:	e04c      	b.n	8001912 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <menu+0x1370>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d13f      	bne.n	8001900 <menu+0x1380>
			if(dilSecim == 0){
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <menu+0x1328>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <menu+0x1378>)
 800188a:	2101      	movs	r1, #1
 800188c:	2002      	movs	r0, #2
 800188e:	f7fe fe16 	bl	80004be <lcd_print>
 8001892:	e03e      	b.n	8001912 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <menu+0x1328>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d13a      	bne.n	8001912 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <menu+0x137c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	2002      	movs	r0, #2
 80018a2:	f7fe fe0c 	bl	80004be <lcd_print>
 80018a6:	e034      	b.n	8001912 <menu+0x1392>
 80018a8:	20000ca0 	.word	0x20000ca0
 80018ac:	0800cd3c 	.word	0x0800cd3c
 80018b0:	40010800 	.word	0x40010800
 80018b4:	20000cae 	.word	0x20000cae
 80018b8:	20000c88 	.word	0x20000c88
 80018bc:	20000c18 	.word	0x20000c18
 80018c0:	20000c86 	.word	0x20000c86
 80018c4:	20000cab 	.word	0x20000cab
 80018c8:	20000c80 	.word	0x20000c80
 80018cc:	0800cd50 	.word	0x0800cd50
 80018d0:	0800cd64 	.word	0x0800cd64
 80018d4:	20000c8c 	.word	0x20000c8c
 80018d8:	0800cd78 	.word	0x0800cd78
 80018dc:	0800cd88 	.word	0x0800cd88
 80018e0:	0800cd98 	.word	0x0800cd98
 80018e4:	0800cdac 	.word	0x0800cdac
 80018e8:	0800cdc0 	.word	0x0800cdc0
 80018ec:	0800cdd4 	.word	0x0800cdd4
 80018f0:	20000c89 	.word	0x20000c89
 80018f4:	0800cde8 	.word	0x0800cde8
 80018f8:	0800cdfc 	.word	0x0800cdfc
 80018fc:	0800ce0c 	.word	0x0800ce0c
			}
		} else if(kapi1Tip == 2) {
 8001900:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <menu+0x15ac>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d104      	bne.n	8001912 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001908:	4a89      	ldr	r2, [pc, #548]	; (8001b30 <menu+0x15b0>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f7fe fdd6 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001912:	2102      	movs	r1, #2
 8001914:	4887      	ldr	r0, [pc, #540]	; (8001b34 <menu+0x15b4>)
 8001916:	f006 fcab 	bl	8008270 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d115      	bne.n	800194c <menu+0x13cc>
 8001920:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <menu+0x15b8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <menu+0x15ac>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <menu+0x15ac>)
 8001938:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <menu+0x15ac>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d902      	bls.n	8001948 <menu+0x13c8>
				kapi1Tip = 0;
 8001942:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <menu+0x15ac>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001948:	f002 fd7e 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800194c:	2104      	movs	r1, #4
 800194e:	4879      	ldr	r0, [pc, #484]	; (8001b34 <menu+0x15b4>)
 8001950:	f006 fc8e 	bl	8008270 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d115      	bne.n	8001986 <menu+0x1406>
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <menu+0x15b8>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001968:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <menu+0x15ac>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <menu+0x15ac>)
 8001972:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001974:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <menu+0x15ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d902      	bls.n	8001982 <menu+0x1402>
		   		kapi1Tip = 2;
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <menu+0x15ac>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001982:	f002 fd61 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001986:	2108      	movs	r1, #8
 8001988:	486a      	ldr	r0, [pc, #424]	; (8001b34 <menu+0x15b4>)
 800198a:	f006 fc71 	bl	8008270 <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10d      	bne.n	80019b0 <menu+0x1430>
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <menu+0x15b8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <menu+0x15ac>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <menu+0x15bc>)
 80019a8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <menu+0x15c0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80019b0:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <menu+0x15c4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d17f      	bne.n	8001ab8 <menu+0x1538>
		if(dilSecim == 0) {
 80019b8:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <menu+0x15c8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80019c0:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <menu+0x15cc>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7fe fd7a 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80019ca:	4a61      	ldr	r2, [pc, #388]	; (8001b50 <menu+0x15d0>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe fd75 	bl	80004be <lcd_print>
 80019d4:	e00d      	b.n	80019f2 <menu+0x1472>
		} else if(dilSecim == 1) {
 80019d6:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <menu+0x15c8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d109      	bne.n	80019f2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <menu+0x15d4>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7fe fd6b 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80019e8:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <menu+0x15d8>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f7fe fd66 	bl	80004be <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <menu+0x15dc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	220a      	movs	r2, #10
 80019f8:	4959      	ldr	r1, [pc, #356]	; (8001b60 <menu+0x15e0>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00a fe40 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <menu+0x15e0>)
 8001a02:	2110      	movs	r1, #16
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7fe fd5a 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4849      	ldr	r0, [pc, #292]	; (8001b34 <menu+0x15b4>)
 8001a0e:	f006 fc2f 	bl	8008270 <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d119      	bne.n	8001a4c <menu+0x14cc>
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <menu+0x15b8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <menu+0x14cc>
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <menu+0x15ac>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <menu+0x15dc>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <menu+0x15dc>)
 8001a38:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001a3a:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <menu+0x15dc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d902      	bls.n	8001a48 <menu+0x14c8>
				kapi1AcSure = 0;
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <menu+0x15dc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a48:	f002 fcfe 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4839      	ldr	r0, [pc, #228]	; (8001b34 <menu+0x15b4>)
 8001a50:	f006 fc0e 	bl	8008270 <HAL_GPIO_ReadPin>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d119      	bne.n	8001a8e <menu+0x150e>
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <menu+0x15b8>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d012      	beq.n	8001a8e <menu+0x150e>
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <menu+0x15ac>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10e      	bne.n	8001a8e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <menu+0x15dc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <menu+0x15dc>)
 8001a7a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <menu+0x15dc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d902      	bls.n	8001a8a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <menu+0x15dc>)
 8001a86:	2205      	movs	r2, #5
 8001a88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a8a:	f002 fcdd 	bl	8004448 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4828      	ldr	r0, [pc, #160]	; (8001b34 <menu+0x15b4>)
 8001a92:	f006 fbed 	bl	8008270 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10d      	bne.n	8001ab8 <menu+0x1538>
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <menu+0x15b8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <menu+0x15dc>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <menu+0x15bc>)
 8001ab0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <menu+0x15c0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <menu+0x15c4>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b0b      	cmp	r3, #11
 8001abe:	f040 80b5 	bne.w	8001c2c <menu+0x16ac>
		if(dilSecim == 0) {
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <menu+0x15c8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001aca:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <menu+0x15e4>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7fe fcf5 	bl	80004be <lcd_print>
 8001ad4:	e008      	b.n	8001ae8 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <menu+0x15c8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d104      	bne.n	8001ae8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001ade:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <menu+0x15e8>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7fe fceb 	bl	80004be <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <menu+0x15ec>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <menu+0x15f0>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7fe fce2 	bl	80004be <lcd_print>
 8001afa:	e048      	b.n	8001b8e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <menu+0x15ec>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d13b      	bne.n	8001b7c <menu+0x15fc>
			if(dilSecim == 0) {
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <menu+0x15c8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <menu+0x15f4>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7fe fcd4 	bl	80004be <lcd_print>
 8001b16:	e03a      	b.n	8001b8e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <menu+0x15c8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d136      	bne.n	8001b8e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <menu+0x15f8>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7fe fcca 	bl	80004be <lcd_print>
 8001b2a:	e030      	b.n	8001b8e <menu+0x160e>
 8001b2c:	20000c89 	.word	0x20000c89
 8001b30:	0800ce20 	.word	0x0800ce20
 8001b34:	40010800 	.word	0x40010800
 8001b38:	20000cae 	.word	0x20000cae
 8001b3c:	20000c18 	.word	0x20000c18
 8001b40:	20000cab 	.word	0x20000cab
 8001b44:	20000c80 	.word	0x20000c80
 8001b48:	20000ca0 	.word	0x20000ca0
 8001b4c:	0800ce30 	.word	0x0800ce30
 8001b50:	0800ce44 	.word	0x0800ce44
 8001b54:	0800ce54 	.word	0x0800ce54
 8001b58:	0800ce68 	.word	0x0800ce68
 8001b5c:	20000c99 	.word	0x20000c99
 8001b60:	20000c58 	.word	0x20000c58
 8001b64:	0800ce78 	.word	0x0800ce78
 8001b68:	0800ce8c 	.word	0x0800ce8c
 8001b6c:	20000c8a 	.word	0x20000c8a
 8001b70:	0800cde8 	.word	0x0800cde8
 8001b74:	0800cdfc 	.word	0x0800cdfc
 8001b78:	0800ce0c 	.word	0x0800ce0c
			}
		} else if(kapi2Tip == 2) {
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	; (8001da8 <menu+0x1828>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d104      	bne.n	8001b8e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001b84:	4a89      	ldr	r2, [pc, #548]	; (8001dac <menu+0x182c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fc98 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4887      	ldr	r0, [pc, #540]	; (8001db0 <menu+0x1830>)
 8001b92:	f006 fb6d 	bl	8008270 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d115      	bne.n	8001bc8 <menu+0x1648>
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <menu+0x1834>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00e      	beq.n	8001bc8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001baa:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <menu+0x1828>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <menu+0x1828>)
 8001bb4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <menu+0x1828>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d902      	bls.n	8001bc4 <menu+0x1644>
				kapi2Tip = 0;
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <menu+0x1828>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bc4:	f002 fc40 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4879      	ldr	r0, [pc, #484]	; (8001db0 <menu+0x1830>)
 8001bcc:	f006 fb50 	bl	8008270 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d115      	bne.n	8001c02 <menu+0x1682>
 8001bd6:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <menu+0x1834>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001be4:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <menu+0x1828>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <menu+0x1828>)
 8001bee:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <menu+0x1828>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d902      	bls.n	8001bfe <menu+0x167e>
		   		kapi2Tip = 2;
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <menu+0x1828>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bfe:	f002 fc23 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c02:	2108      	movs	r1, #8
 8001c04:	486a      	ldr	r0, [pc, #424]	; (8001db0 <menu+0x1830>)
 8001c06:	f006 fb33 	bl	8008270 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10d      	bne.n	8001c2c <menu+0x16ac>
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <menu+0x1834>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <menu+0x1828>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <menu+0x1838>)
 8001c24:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <menu+0x183c>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <menu+0x1840>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d17f      	bne.n	8001d34 <menu+0x17b4>
		if(dilSecim == 0) {
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <menu+0x1844>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001c3c:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <menu+0x1848>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7fe fc3c 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c46:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <menu+0x184c>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7fe fc37 	bl	80004be <lcd_print>
 8001c50:	e00d      	b.n	8001c6e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <menu+0x1844>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d109      	bne.n	8001c6e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001c5a:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <menu+0x1850>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7fe fc2d 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c64:	4a5b      	ldr	r2, [pc, #364]	; (8001dd4 <menu+0x1854>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7fe fc28 	bl	80004be <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <menu+0x1858>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	220a      	movs	r2, #10
 8001c74:	4959      	ldr	r1, [pc, #356]	; (8001ddc <menu+0x185c>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00a fd02 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <menu+0x185c>)
 8001c7e:	2110      	movs	r1, #16
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fc1c 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c86:	2102      	movs	r1, #2
 8001c88:	4849      	ldr	r0, [pc, #292]	; (8001db0 <menu+0x1830>)
 8001c8a:	f006 faf1 	bl	8008270 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <menu+0x1748>
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <menu+0x1834>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <menu+0x1748>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <menu+0x1828>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001caa:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <menu+0x1858>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <menu+0x1858>)
 8001cb4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <menu+0x1858>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d902      	bls.n	8001cc4 <menu+0x1744>
				kapi2AcSure = 0;
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <menu+0x1858>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc4:	f002 fbc0 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4839      	ldr	r0, [pc, #228]	; (8001db0 <menu+0x1830>)
 8001ccc:	f006 fad0 	bl	8008270 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d119      	bne.n	8001d0a <menu+0x178a>
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <menu+0x1834>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <menu+0x178a>
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <menu+0x1828>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10e      	bne.n	8001d0a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <menu+0x1858>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <menu+0x1858>)
 8001cf6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <menu+0x1858>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d902      	bls.n	8001d06 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <menu+0x1858>)
 8001d02:	2205      	movs	r2, #5
 8001d04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d06:	f002 fb9f 	bl	8004448 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <menu+0x1830>)
 8001d0e:	f006 faaf 	bl	8008270 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10d      	bne.n	8001d34 <menu+0x17b4>
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <menu+0x1834>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <menu+0x1858>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <menu+0x1838>)
 8001d2c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <menu+0x183c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <menu+0x1840>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b0d      	cmp	r3, #13
 8001d3a:	f040 80b5 	bne.w	8001ea8 <menu+0x1928>
		if(dilSecim == 0) {
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <menu+0x1844>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001d46:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <menu+0x1860>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7fe fbb7 	bl	80004be <lcd_print>
 8001d50:	e008      	b.n	8001d64 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <menu+0x1844>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d104      	bne.n	8001d64 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <menu+0x1864>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe fbad 	bl	80004be <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <menu+0x1868>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <menu+0x186c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2002      	movs	r0, #2
 8001d72:	f7fe fba4 	bl	80004be <lcd_print>
 8001d76:	e048      	b.n	8001e0a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <menu+0x1868>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d13b      	bne.n	8001df8 <menu+0x1878>
			if(dilSecim == 0) {
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <menu+0x1844>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <menu+0x1870>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f7fe fb96 	bl	80004be <lcd_print>
 8001d92:	e03a      	b.n	8001e0a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <menu+0x1844>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d136      	bne.n	8001e0a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <menu+0x1874>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7fe fb8c 	bl	80004be <lcd_print>
 8001da6:	e030      	b.n	8001e0a <menu+0x188a>
 8001da8:	20000c8a 	.word	0x20000c8a
 8001dac:	0800ce20 	.word	0x0800ce20
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20000cae 	.word	0x20000cae
 8001db8:	20000c18 	.word	0x20000c18
 8001dbc:	20000cab 	.word	0x20000cab
 8001dc0:	20000c80 	.word	0x20000c80
 8001dc4:	20000ca0 	.word	0x20000ca0
 8001dc8:	0800cea0 	.word	0x0800cea0
 8001dcc:	0800ce44 	.word	0x0800ce44
 8001dd0:	0800ceb4 	.word	0x0800ceb4
 8001dd4:	0800ce68 	.word	0x0800ce68
 8001dd8:	20000c9a 	.word	0x20000c9a
 8001ddc:	20000c58 	.word	0x20000c58
 8001de0:	0800cec8 	.word	0x0800cec8
 8001de4:	0800cedc 	.word	0x0800cedc
 8001de8:	20000c8b 	.word	0x20000c8b
 8001dec:	0800cde8 	.word	0x0800cde8
 8001df0:	0800cdfc 	.word	0x0800cdfc
 8001df4:	0800ce0c 	.word	0x0800ce0c
			}
		} else if(kapitablaTip == 2) {
 8001df8:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <menu+0x19e8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d104      	bne.n	8001e0a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <menu+0x19ec>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7fe fb5a 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4858      	ldr	r0, [pc, #352]	; (8001f70 <menu+0x19f0>)
 8001e0e:	f006 fa2f 	bl	8008270 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d115      	bne.n	8001e44 <menu+0x18c4>
 8001e18:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <menu+0x19f4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8001e26:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <menu+0x19e8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <menu+0x19e8>)
 8001e30:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <menu+0x19e8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <menu+0x18c0>
				kapitablaTip = 0;
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <menu+0x19e8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e40:	f002 fb02 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e44:	2104      	movs	r1, #4
 8001e46:	484a      	ldr	r0, [pc, #296]	; (8001f70 <menu+0x19f0>)
 8001e48:	f006 fa12 	bl	8008270 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d115      	bne.n	8001e7e <menu+0x18fe>
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <menu+0x19f4>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <menu+0x19e8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <menu+0x19e8>)
 8001e6a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <menu+0x19e8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d902      	bls.n	8001e7a <menu+0x18fa>
		   		kapitablaTip = 2;
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <menu+0x19e8>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e7a:	f002 fae5 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7e:	2108      	movs	r1, #8
 8001e80:	483b      	ldr	r0, [pc, #236]	; (8001f70 <menu+0x19f0>)
 8001e82:	f006 f9f5 	bl	8008270 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <menu+0x1928>
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <menu+0x19f4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <menu+0x19e8>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <menu+0x19f8>)
 8001ea0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <menu+0x19fc>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <menu+0x1a00>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0e      	cmp	r3, #14
 8001eae:	f040 80f2 	bne.w	8002096 <menu+0x1b16>
		if(dilSecim == 0) {
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <menu+0x1a04>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001eba:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <menu+0x1a08>)
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7fe fafd 	bl	80004be <lcd_print>
 8001ec4:	e008      	b.n	8001ed8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <menu+0x1a04>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d104      	bne.n	8001ed8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <menu+0x1a0c>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7fe faf3 	bl	80004be <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <menu+0x1a10>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d113      	bne.n	8001f08 <menu+0x1988>
			if(dilSecim == 0){
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <menu+0x1a04>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <menu+0x1a14>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7fe fae6 	bl	80004be <lcd_print>
 8001ef2:	e071      	b.n	8001fd8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <menu+0x1a04>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d16d      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <menu+0x1a18>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7fe fadc 	bl	80004be <lcd_print>
 8001f06:	e067      	b.n	8001fd8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <menu+0x1a10>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d112      	bne.n	8001f36 <menu+0x19b6>
			if(dilSecim == 0){
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <menu+0x1a04>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <menu+0x1a1c>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe face 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <menu+0x1a04>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d156      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <menu+0x1a20>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fac5 	bl	80004be <lcd_print>
 8001f34:	e050      	b.n	8001fd8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <menu+0x1a10>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d136      	bne.n	8001fac <menu+0x1a2c>
			if(dilSecim == 0){
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <menu+0x1a04>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <menu+0x1a24>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7fe fab7 	bl	80004be <lcd_print>
 8001f50:	e042      	b.n	8001fd8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <menu+0x1a04>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d13e      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <menu+0x1a28>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f7fe faad 	bl	80004be <lcd_print>
 8001f64:	e038      	b.n	8001fd8 <menu+0x1a58>
 8001f66:	bf00      	nop
 8001f68:	20000c8b 	.word	0x20000c8b
 8001f6c:	0800ce20 	.word	0x0800ce20
 8001f70:	40010800 	.word	0x40010800
 8001f74:	20000cae 	.word	0x20000cae
 8001f78:	20000c18 	.word	0x20000c18
 8001f7c:	20000cab 	.word	0x20000cab
 8001f80:	20000c80 	.word	0x20000c80
 8001f84:	20000ca0 	.word	0x20000ca0
 8001f88:	0800cef0 	.word	0x0800cef0
 8001f8c:	0800cf04 	.word	0x0800cf04
 8001f90:	20000c8d 	.word	0x20000c8d
 8001f94:	0800cf18 	.word	0x0800cf18
 8001f98:	0800cf28 	.word	0x0800cf28
 8001f9c:	0800cf38 	.word	0x0800cf38
 8001fa0:	0800cf48 	.word	0x0800cf48
 8001fa4:	0800cf58 	.word	0x0800cf58
 8001fa8:	0800cf6c 	.word	0x0800cf6c
			}
		} else if(kapiTablaAcKonum == 3) {
 8001fac:	4b9b      	ldr	r3, [pc, #620]	; (800221c <menu+0x1c9c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d111      	bne.n	8001fd8 <menu+0x1a58>
			if(dilSecim == 0) {
 8001fb4:	4b9a      	ldr	r3, [pc, #616]	; (8002220 <menu+0x1ca0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8001fbc:	4a99      	ldr	r2, [pc, #612]	; (8002224 <menu+0x1ca4>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7fe fa7c 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 8001fc6:	4b96      	ldr	r3, [pc, #600]	; (8002220 <menu+0x1ca0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d104      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8001fce:	4a96      	ldr	r2, [pc, #600]	; (8002228 <menu+0x1ca8>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f7fe fa73 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4894      	ldr	r0, [pc, #592]	; (800222c <menu+0x1cac>)
 8001fdc:	f006 f948 	bl	8008270 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d115      	bne.n	8002012 <menu+0x1a92>
 8001fe6:	4b92      	ldr	r3, [pc, #584]	; (8002230 <menu+0x1cb0>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001ff4:	4b89      	ldr	r3, [pc, #548]	; (800221c <menu+0x1c9c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b87      	ldr	r3, [pc, #540]	; (800221c <menu+0x1c9c>)
 8001ffe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002000:	4b86      	ldr	r3, [pc, #536]	; (800221c <menu+0x1c9c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d902      	bls.n	800200e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <menu+0x1c9c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800200e:	f002 fa1b 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002012:	2104      	movs	r1, #4
 8002014:	4885      	ldr	r0, [pc, #532]	; (800222c <menu+0x1cac>)
 8002016:	f006 f92b 	bl	8008270 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d115      	bne.n	800204c <menu+0x1acc>
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <menu+0x1cb0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <menu+0x1c9c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b79      	ldr	r3, [pc, #484]	; (800221c <menu+0x1c9c>)
 8002038:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <menu+0x1c9c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d902      	bls.n	8002048 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <menu+0x1c9c>)
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002048:	f002 f9fe 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800204c:	2108      	movs	r1, #8
 800204e:	4877      	ldr	r0, [pc, #476]	; (800222c <menu+0x1cac>)
 8002050:	f006 f90e 	bl	8008270 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d11d      	bne.n	8002096 <menu+0x1b16>
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <menu+0x1cb0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <menu+0x1c9c>)
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <menu+0x1cb4>)
 800206e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <menu+0x1c9c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <menu+0x1b02>
 800207a:	4b68      	ldr	r3, [pc, #416]	; (800221c <menu+0x1c9c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d106      	bne.n	8002090 <menu+0x1b10>
				altLimit = 1;
 8002082:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <menu+0x1cb8>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <menu+0x1cb8>)
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <menu+0x1cb4>)
 800208e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <menu+0x1cbc>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <menu+0x1cc0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d17f      	bne.n	800219e <menu+0x1c1e>
		if(dilSecim == 0) {
 800209e:	4b60      	ldr	r3, [pc, #384]	; (8002220 <menu+0x1ca0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80020a6:	4a67      	ldr	r2, [pc, #412]	; (8002244 <menu+0x1cc4>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7fe fa07 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <menu+0x1cc8>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fa02 	bl	80004be <lcd_print>
 80020ba:	e00d      	b.n	80020d8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <menu+0x1ca0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d109      	bne.n	80020d8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80020c4:	4a61      	ldr	r2, [pc, #388]	; (800224c <menu+0x1ccc>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7fe f9f8 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80020ce:	4a60      	ldr	r2, [pc, #384]	; (8002250 <menu+0x1cd0>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7fe f9f3 	bl	80004be <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80020d8:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <menu+0x1cd4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	220a      	movs	r2, #10
 80020de:	495e      	ldr	r1, [pc, #376]	; (8002258 <menu+0x1cd8>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00a facd 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 80020e6:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <menu+0x1cd8>)
 80020e8:	2110      	movs	r1, #16
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7fe f9e7 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020f0:	2102      	movs	r1, #2
 80020f2:	484e      	ldr	r0, [pc, #312]	; (800222c <menu+0x1cac>)
 80020f4:	f006 f8bc 	bl	8008270 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d119      	bne.n	8002132 <menu+0x1bb2>
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <menu+0x1cb0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d012      	beq.n	8002132 <menu+0x1bb2>
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <menu+0x1cdc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10e      	bne.n	8002132 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <menu+0x1cd4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <menu+0x1cd4>)
 800211e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002120:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <menu+0x1cd4>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d902      	bls.n	800212e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <menu+0x1cd4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212e:	f002 f98b 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002132:	2104      	movs	r1, #4
 8002134:	483d      	ldr	r0, [pc, #244]	; (800222c <menu+0x1cac>)
 8002136:	f006 f89b 	bl	8008270 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <menu+0x1bf4>
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <menu+0x1cb0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <menu+0x1bf4>
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <menu+0x1cdc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <menu+0x1cd4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <menu+0x1cd4>)
 8002160:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <menu+0x1cd4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <menu+0x1cd4>)
 800216c:	2205      	movs	r2, #5
 800216e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002170:	f002 f96a 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002174:	2108      	movs	r1, #8
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <menu+0x1cac>)
 8002178:	f006 f87a 	bl	8008270 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <menu+0x1c1e>
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <menu+0x1cb0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <menu+0x1cd4>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <menu+0x1cb4>)
 8002196:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <menu+0x1cbc>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <menu+0x1cc0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	f040 80bc 	bne.w	8002320 <menu+0x1da0>
		if(dilSecim == 0) {
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <menu+0x1ca0>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <menu+0x1ce0>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe f982 	bl	80004be <lcd_print>
 80021ba:	e008      	b.n	80021ce <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <menu+0x1ca0>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d104      	bne.n	80021ce <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <menu+0x1ce4>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe f978 	bl	80004be <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <menu+0x1ce8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d113      	bne.n	80021fe <menu+0x1c7e>
			if(dilSecim == 0) {
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <menu+0x1ca0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <menu+0x1ca4>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7fe f96b 	bl	80004be <lcd_print>
 80021e8:	e04b      	b.n	8002282 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <menu+0x1ca0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d147      	bne.n	8002282 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80021f2:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <menu+0x1ca8>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f7fe f961 	bl	80004be <lcd_print>
 80021fc:	e041      	b.n	8002282 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <menu+0x1ce8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d13d      	bne.n	8002282 <menu+0x1d02>
			if(dilSecim == 0) {
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <menu+0x1ca0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d130      	bne.n	8002270 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <menu+0x1cec>)
 8002210:	2101      	movs	r1, #1
 8002212:	2002      	movs	r0, #2
 8002214:	f7fe f953 	bl	80004be <lcd_print>
 8002218:	e033      	b.n	8002282 <menu+0x1d02>
 800221a:	bf00      	nop
 800221c:	20000c8d 	.word	0x20000c8d
 8002220:	20000ca0 	.word	0x20000ca0
 8002224:	0800cbe0 	.word	0x0800cbe0
 8002228:	0800cbf4 	.word	0x0800cbf4
 800222c:	40010800 	.word	0x40010800
 8002230:	20000cae 	.word	0x20000cae
 8002234:	20000c18 	.word	0x20000c18
 8002238:	20000c86 	.word	0x20000c86
 800223c:	20000cab 	.word	0x20000cab
 8002240:	20000c80 	.word	0x20000c80
 8002244:	0800cf80 	.word	0x0800cf80
 8002248:	0800ce44 	.word	0x0800ce44
 800224c:	0800cf94 	.word	0x0800cf94
 8002250:	0800ce68 	.word	0x0800ce68
 8002254:	20000c9b 	.word	0x20000c9b
 8002258:	20000c58 	.word	0x20000c58
 800225c:	20000c8b 	.word	0x20000c8b
 8002260:	0800cfa8 	.word	0x0800cfa8
 8002264:	0800cfbc 	.word	0x0800cfbc
 8002268:	20000c8e 	.word	0x20000c8e
 800226c:	0800cc40 	.word	0x0800cc40
			} else if(dilSecim == 1) {
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <menu+0x1f58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d104      	bne.n	8002282 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <menu+0x1f5c>)
 800227a:	2101      	movs	r1, #1
 800227c:	2002      	movs	r0, #2
 800227e:	f7fe f91e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002282:	2102      	movs	r1, #2
 8002284:	4896      	ldr	r0, [pc, #600]	; (80024e0 <menu+0x1f60>)
 8002286:	f005 fff3 	bl	8008270 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d115      	bne.n	80022bc <menu+0x1d3c>
 8002290:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <menu+0x1f64>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00e      	beq.n	80022bc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800229e:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <menu+0x1f68>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b90      	ldr	r3, [pc, #576]	; (80024e8 <menu+0x1f68>)
 80022a8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80022aa:	4b8f      	ldr	r3, [pc, #572]	; (80024e8 <menu+0x1f68>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d902      	bls.n	80022b8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <menu+0x1f68>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022b8:	f002 f8c6 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022bc:	2104      	movs	r1, #4
 80022be:	4888      	ldr	r0, [pc, #544]	; (80024e0 <menu+0x1f60>)
 80022c0:	f005 ffd6 	bl	8008270 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d115      	bne.n	80022f6 <menu+0x1d76>
 80022ca:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <menu+0x1f64>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f083 0301 	eor.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00e      	beq.n	80022f6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80022d8:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <menu+0x1f68>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <menu+0x1f68>)
 80022e2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80022e4:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <menu+0x1f68>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80022ec:	4b7e      	ldr	r3, [pc, #504]	; (80024e8 <menu+0x1f68>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022f2:	f002 f8a9 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022f6:	2108      	movs	r1, #8
 80022f8:	4879      	ldr	r0, [pc, #484]	; (80024e0 <menu+0x1f60>)
 80022fa:	f005 ffb9 	bl	8008270 <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <menu+0x1da0>
 8002304:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <menu+0x1f64>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <menu+0x1f68>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <menu+0x1f6c>)
 8002318:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800231a:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <menu+0x1f70>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <menu+0x1f74>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b11      	cmp	r3, #17
 8002326:	f040 80c3 	bne.w	80024b0 <menu+0x1f30>
		if(dilSecim == 0) {
 800232a:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <menu+0x1f58>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <menu+0x1f78>)
 8002334:	2101      	movs	r1, #1
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe f8c1 	bl	80004be <lcd_print>
 800233c:	e008      	b.n	8002350 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800233e:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <menu+0x1f58>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d104      	bne.n	8002350 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <menu+0x1f7c>)
 8002348:	2101      	movs	r1, #1
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe f8b7 	bl	80004be <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002350:	4b6b      	ldr	r3, [pc, #428]	; (8002500 <menu+0x1f80>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d113      	bne.n	8002380 <menu+0x1e00>
			if(dilSecim == 0){
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <menu+0x1f58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <menu+0x1f84>)
 8002362:	2101      	movs	r1, #1
 8002364:	2002      	movs	r0, #2
 8002366:	f7fe f8aa 	bl	80004be <lcd_print>
 800236a:	e038      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1){
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <menu+0x1f58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d134      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002374:	4a64      	ldr	r2, [pc, #400]	; (8002508 <menu+0x1f88>)
 8002376:	2101      	movs	r1, #1
 8002378:	2002      	movs	r0, #2
 800237a:	f7fe f8a0 	bl	80004be <lcd_print>
 800237e:	e02e      	b.n	80023de <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002380:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <menu+0x1f80>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d113      	bne.n	80023b0 <menu+0x1e30>
			if(dilSecim == 0){
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <menu+0x1f58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002390:	4a5e      	ldr	r2, [pc, #376]	; (800250c <menu+0x1f8c>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f7fe f892 	bl	80004be <lcd_print>
 800239a:	e020      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800239c:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <menu+0x1f58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11c      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80023a4:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <menu+0x1f90>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7fe f888 	bl	80004be <lcd_print>
 80023ae:	e016      	b.n	80023de <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <menu+0x1f80>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <menu+0x1e5e>
			if(dilSecim == 0) {
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <menu+0x1f58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <menu+0x1f94>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7fe f87a 	bl	80004be <lcd_print>
 80023ca:	e008      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <menu+0x1f58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d104      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <menu+0x1f98>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f7fe f870 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2102      	movs	r1, #2
 80023e0:	483f      	ldr	r0, [pc, #252]	; (80024e0 <menu+0x1f60>)
 80023e2:	f005 ff45 	bl	8008270 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <menu+0x1e98>
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <menu+0x1f64>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <menu+0x1f80>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <menu+0x1f80>)
 8002404:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <menu+0x1f80>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d902      	bls.n	8002414 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <menu+0x1f80>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002414:	f002 f818 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2104      	movs	r1, #4
 800241a:	4831      	ldr	r0, [pc, #196]	; (80024e0 <menu+0x1f60>)
 800241c:	f005 ff28 	bl	8008270 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <menu+0x1ed2>
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <menu+0x1f64>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <menu+0x1f80>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <menu+0x1f80>)
 800243e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <menu+0x1f80>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d902      	bls.n	800244e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <menu+0x1f80>)
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800244e:	f001 fffb 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002452:	2108      	movs	r1, #8
 8002454:	4822      	ldr	r0, [pc, #136]	; (80024e0 <menu+0x1f60>)
 8002456:	f005 ff0b 	bl	8008270 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d127      	bne.n	80024b0 <menu+0x1f30>
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <menu+0x1f64>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <menu+0x1f80>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <menu+0x1f6c>)
 8002474:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <menu+0x1f80>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <menu+0x1f06>
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <menu+0x1f80>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d106      	bne.n	8002494 <menu+0x1f14>
				calismaSekli = 0;
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <menu+0x1f9c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <menu+0x1f9c>)
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <menu+0x1f6c>)
 8002492:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <menu+0x1f80>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <menu+0x1fa0>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <menu+0x1fa0>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <menu+0x1f6c>)
 80024a8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <menu+0x1f70>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <menu+0x1f74>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	f040 80d5 	bne.w	8002664 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <menu+0x1f80>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d13c      	bne.n	800253c <menu+0x1fbc>
			if(dilSecim == 0) {
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <menu+0x1f58>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12e      	bne.n	8002528 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <menu+0x1fa4>)
 80024cc:	2101      	movs	r1, #1
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fd fff5 	bl	80004be <lcd_print>
 80024d4:	e048      	b.n	8002568 <menu+0x1fe8>
 80024d6:	bf00      	nop
 80024d8:	20000ca0 	.word	0x20000ca0
 80024dc:	0800cc54 	.word	0x0800cc54
 80024e0:	40010800 	.word	0x40010800
 80024e4:	20000cae 	.word	0x20000cae
 80024e8:	20000c8e 	.word	0x20000c8e
 80024ec:	20000c18 	.word	0x20000c18
 80024f0:	20000cab 	.word	0x20000cab
 80024f4:	20000c80 	.word	0x20000c80
 80024f8:	0800cfd0 	.word	0x0800cfd0
 80024fc:	0800cfe4 	.word	0x0800cfe4
 8002500:	20000c8f 	.word	0x20000c8f
 8002504:	0800cff8 	.word	0x0800cff8
 8002508:	0800d008 	.word	0x0800d008
 800250c:	0800d018 	.word	0x0800d018
 8002510:	0800d028 	.word	0x0800d028
 8002514:	0800cbe0 	.word	0x0800cbe0
 8002518:	0800cbf4 	.word	0x0800cbf4
 800251c:	20000c81 	.word	0x20000c81
 8002520:	20000c92 	.word	0x20000c92
 8002524:	0800d038 	.word	0x0800d038
			} else if(dilSecim == 1) {
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <menu+0x2198>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11b      	bne.n	8002568 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <menu+0x219c>)
 8002532:	2101      	movs	r1, #1
 8002534:	2001      	movs	r0, #1
 8002536:	f7fd ffc2 	bl	80004be <lcd_print>
 800253a:	e015      	b.n	8002568 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800253c:	4b78      	ldr	r3, [pc, #480]	; (8002720 <menu+0x21a0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d111      	bne.n	8002568 <menu+0x1fe8>
			if(dilSecim == 0){
 8002544:	4b74      	ldr	r3, [pc, #464]	; (8002718 <menu+0x2198>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800254c:	4a75      	ldr	r2, [pc, #468]	; (8002724 <menu+0x21a4>)
 800254e:	2101      	movs	r1, #1
 8002550:	2001      	movs	r0, #1
 8002552:	f7fd ffb4 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <menu+0x2198>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d104      	bne.n	8002568 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <menu+0x21a8>)
 8002560:	2101      	movs	r1, #1
 8002562:	2001      	movs	r0, #1
 8002564:	f7fd ffab 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <menu+0x21ac>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <menu+0x2018>
			if(dilSecim == 0) {
 8002570:	4b69      	ldr	r3, [pc, #420]	; (8002718 <menu+0x2198>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8002578:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <menu+0x21b0>)
 800257a:	2101      	movs	r1, #1
 800257c:	2002      	movs	r0, #2
 800257e:	f7fd ff9e 	bl	80004be <lcd_print>
 8002582:	e020      	b.n	80025c6 <menu+0x2046>
			} else if(dilSecim == 1){
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <menu+0x2198>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d11c      	bne.n	80025c6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800258c:	4a69      	ldr	r2, [pc, #420]	; (8002734 <menu+0x21b4>)
 800258e:	2101      	movs	r1, #1
 8002590:	2002      	movs	r0, #2
 8002592:	f7fd ff94 	bl	80004be <lcd_print>
 8002596:	e016      	b.n	80025c6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <menu+0x21ac>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d112      	bne.n	80025c6 <menu+0x2046>
			if(dilSecim == 0){
 80025a0:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <menu+0x2198>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80025a8:	4a63      	ldr	r2, [pc, #396]	; (8002738 <menu+0x21b8>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7fd ff86 	bl	80004be <lcd_print>
 80025b2:	e008      	b.n	80025c6 <menu+0x2046>
			} else if(dilSecim == 1){
 80025b4:	4b58      	ldr	r3, [pc, #352]	; (8002718 <menu+0x2198>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d104      	bne.n	80025c6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <menu+0x21bc>)
 80025be:	2101      	movs	r1, #1
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7fd ff7c 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c6:	2102      	movs	r1, #2
 80025c8:	485d      	ldr	r0, [pc, #372]	; (8002740 <menu+0x21c0>)
 80025ca:	f005 fe51 	bl	8008270 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d115      	bne.n	8002600 <menu+0x2080>
 80025d4:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <menu+0x21c4>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <menu+0x21ac>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b50      	ldr	r3, [pc, #320]	; (800272c <menu+0x21ac>)
 80025ec:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80025ee:	4b4f      	ldr	r3, [pc, #316]	; (800272c <menu+0x21ac>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d902      	bls.n	80025fc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <menu+0x21ac>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fc:	f001 ff24 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002600:	2104      	movs	r1, #4
 8002602:	484f      	ldr	r0, [pc, #316]	; (8002740 <menu+0x21c0>)
 8002604:	f005 fe34 	bl	8008270 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d115      	bne.n	800263a <menu+0x20ba>
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <menu+0x21c4>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <menu+0x21ac>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <menu+0x21ac>)
 8002626:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <menu+0x21ac>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <menu+0x21ac>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002636:	f001 ff07 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800263a:	2108      	movs	r1, #8
 800263c:	4840      	ldr	r0, [pc, #256]	; (8002740 <menu+0x21c0>)
 800263e:	f005 fe17 	bl	8008270 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10d      	bne.n	8002664 <menu+0x20e4>
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <menu+0x21c4>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <menu+0x21ac>)
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <menu+0x21c8>)
 800265c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <menu+0x21cc>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <menu+0x21d0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b13      	cmp	r3, #19
 800266a:	f040 80d5 	bne.w	8002818 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <menu+0x21a0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d113      	bne.n	800269e <menu+0x211e>
			if(dilSecim == 0) {
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <menu+0x2198>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800267e:	4a35      	ldr	r2, [pc, #212]	; (8002754 <menu+0x21d4>)
 8002680:	2101      	movs	r1, #1
 8002682:	2001      	movs	r0, #1
 8002684:	f7fd ff1b 	bl	80004be <lcd_print>
 8002688:	e01f      	b.n	80026ca <menu+0x214a>
			} else if(dilSecim == 1) {
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <menu+0x2198>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11b      	bne.n	80026ca <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002692:	4a31      	ldr	r2, [pc, #196]	; (8002758 <menu+0x21d8>)
 8002694:	2101      	movs	r1, #1
 8002696:	2001      	movs	r0, #1
 8002698:	f7fd ff11 	bl	80004be <lcd_print>
 800269c:	e015      	b.n	80026ca <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <menu+0x21a0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d111      	bne.n	80026ca <menu+0x214a>
			if(dilSecim == 0) {
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <menu+0x2198>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <menu+0x21dc>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fd ff03 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <menu+0x2198>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d104      	bne.n	80026ca <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <menu+0x21e0>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7fd fefa 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <menu+0x21e4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d113      	bne.n	80026fa <menu+0x217a>
			if(dilSecim == 0) {
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <menu+0x2198>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <menu+0x21b0>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2002      	movs	r0, #2
 80026e0:	f7fd feed 	bl	80004be <lcd_print>
 80026e4:	e049      	b.n	800277a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <menu+0x2198>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d145      	bne.n	800277a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <menu+0x21b4>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7fd fee3 	bl	80004be <lcd_print>
 80026f8:	e03f      	b.n	800277a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <menu+0x21e4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d13b      	bne.n	800277a <menu+0x21fa>
			if(dilSecim == 0) {
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <menu+0x2198>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12e      	bne.n	8002768 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <menu+0x21b8>)
 800270c:	2101      	movs	r1, #1
 800270e:	2002      	movs	r0, #2
 8002710:	f7fd fed5 	bl	80004be <lcd_print>
 8002714:	e031      	b.n	800277a <menu+0x21fa>
 8002716:	bf00      	nop
 8002718:	20000ca0 	.word	0x20000ca0
 800271c:	0800d04c 	.word	0x0800d04c
 8002720:	20000c8f 	.word	0x20000c8f
 8002724:	0800d05c 	.word	0x0800d05c
 8002728:	0800d070 	.word	0x0800d070
 800272c:	20000c90 	.word	0x20000c90
 8002730:	0800cbe0 	.word	0x0800cbe0
 8002734:	0800cbf4 	.word	0x0800cbf4
 8002738:	0800cc40 	.word	0x0800cc40
 800273c:	0800cc54 	.word	0x0800cc54
 8002740:	40010800 	.word	0x40010800
 8002744:	20000cae 	.word	0x20000cae
 8002748:	20000c18 	.word	0x20000c18
 800274c:	20000cab 	.word	0x20000cab
 8002750:	20000c80 	.word	0x20000c80
 8002754:	0800d084 	.word	0x0800d084
 8002758:	0800d098 	.word	0x0800d098
 800275c:	0800d0ac 	.word	0x0800d0ac
 8002760:	0800d0c0 	.word	0x0800d0c0
 8002764:	20000c91 	.word	0x20000c91
			} else if(dilSecim == 1) {
 8002768:	4b90      	ldr	r3, [pc, #576]	; (80029ac <menu+0x242c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d104      	bne.n	800277a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002770:	4a8f      	ldr	r2, [pc, #572]	; (80029b0 <menu+0x2430>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f7fd fea2 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800277a:	2102      	movs	r1, #2
 800277c:	488d      	ldr	r0, [pc, #564]	; (80029b4 <menu+0x2434>)
 800277e:	f005 fd77 	bl	8008270 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d115      	bne.n	80027b4 <menu+0x2234>
 8002788:	4b8b      	ldr	r3, [pc, #556]	; (80029b8 <menu+0x2438>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <menu+0x243c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <menu+0x243c>)
 80027a0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <menu+0x243c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d902      	bls.n	80027b0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80027aa:	4b84      	ldr	r3, [pc, #528]	; (80029bc <menu+0x243c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027b0:	f001 fe4a 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b4:	2104      	movs	r1, #4
 80027b6:	487f      	ldr	r0, [pc, #508]	; (80029b4 <menu+0x2434>)
 80027b8:	f005 fd5a 	bl	8008270 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d115      	bne.n	80027ee <menu+0x226e>
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <menu+0x2438>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80027d0:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <menu+0x243c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b78      	ldr	r3, [pc, #480]	; (80029bc <menu+0x243c>)
 80027da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80027dc:	4b77      	ldr	r3, [pc, #476]	; (80029bc <menu+0x243c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <menu+0x243c>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ea:	f001 fe2d 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ee:	2108      	movs	r1, #8
 80027f0:	4870      	ldr	r0, [pc, #448]	; (80029b4 <menu+0x2434>)
 80027f2:	f005 fd3d 	bl	8008270 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10d      	bne.n	8002818 <menu+0x2298>
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <menu+0x2438>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <menu+0x243c>)
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <menu+0x2440>)
 8002810:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <menu+0x2444>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002818:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <menu+0x2448>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b14      	cmp	r3, #20
 800281e:	f040 80b5 	bne.w	800298c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002822:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <menu+0x244c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d113      	bne.n	8002852 <menu+0x22d2>
			if(dilSecim == 0) {
 800282a:	4b60      	ldr	r3, [pc, #384]	; (80029ac <menu+0x242c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <menu+0x2450>)
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f7fd fe41 	bl	80004be <lcd_print>
 800283c:	e020      	b.n	8002880 <menu+0x2300>
			} else if(dilSecim == 1) {
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <menu+0x242c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d11c      	bne.n	8002880 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002846:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <menu+0x2454>)
 8002848:	2101      	movs	r1, #1
 800284a:	2001      	movs	r0, #1
 800284c:	f7fd fe37 	bl	80004be <lcd_print>
 8002850:	e016      	b.n	8002880 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <menu+0x244c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d112      	bne.n	8002880 <menu+0x2300>
			if(dilSecim == 0) {
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <menu+0x242c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002862:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <menu+0x2458>)
 8002864:	2101      	movs	r1, #1
 8002866:	2001      	movs	r0, #1
 8002868:	f7fd fe29 	bl	80004be <lcd_print>
 800286c:	e008      	b.n	8002880 <menu+0x2300>
			} else if(dilSecim == 1) {
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <menu+0x242c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d104      	bne.n	8002880 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002876:	4a59      	ldr	r2, [pc, #356]	; (80029dc <menu+0x245c>)
 8002878:	2101      	movs	r1, #1
 800287a:	2001      	movs	r0, #1
 800287c:	f7fd fe1f 	bl	80004be <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <menu+0x2460>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <menu+0x2330>
			if(dilSecim == 0) {
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <menu+0x242c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002890:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <menu+0x2464>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f7fd fe12 	bl	80004be <lcd_print>
 800289a:	e020      	b.n	80028de <menu+0x235e>
			} else if(dilSecim == 1) {
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <menu+0x242c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11c      	bne.n	80028de <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <menu+0x2468>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	2002      	movs	r0, #2
 80028aa:	f7fd fe08 	bl	80004be <lcd_print>
 80028ae:	e016      	b.n	80028de <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <menu+0x2460>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d112      	bne.n	80028de <menu+0x235e>
			if(dilSecim == 0) {
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <menu+0x242c>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <menu+0x246c>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fd fdfa 	bl	80004be <lcd_print>
 80028ca:	e008      	b.n	80028de <menu+0x235e>
			} else if(dilSecim == 1) {
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <menu+0x242c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d104      	bne.n	80028de <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80028d4:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <menu+0x2470>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	2002      	movs	r0, #2
 80028da:	f7fd fdf0 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028de:	2102      	movs	r1, #2
 80028e0:	4834      	ldr	r0, [pc, #208]	; (80029b4 <menu+0x2434>)
 80028e2:	f005 fcc5 	bl	8008270 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d119      	bne.n	8002920 <menu+0x23a0>
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <menu+0x2438>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <menu+0x23a0>
 80028fa:	4b34      	ldr	r3, [pc, #208]	; (80029cc <menu+0x244c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d10e      	bne.n	8002920 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <menu+0x2460>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <menu+0x2460>)
 800290c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <menu+0x2460>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d902      	bls.n	800291c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <menu+0x2460>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800291c:	f001 fd94 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002920:	2104      	movs	r1, #4
 8002922:	4824      	ldr	r0, [pc, #144]	; (80029b4 <menu+0x2434>)
 8002924:	f005 fca4 	bl	8008270 <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <menu+0x23e2>
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <menu+0x2438>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <menu+0x23e2>
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <menu+0x244c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d10e      	bne.n	8002962 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <menu+0x2460>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <menu+0x2460>)
 800294e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <menu+0x2460>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <menu+0x2460>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800295e:	f001 fd73 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002962:	2108      	movs	r1, #8
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <menu+0x2434>)
 8002966:	f005 fc83 	bl	8008270 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <menu+0x240c>
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <menu+0x2438>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <menu+0x2460>)
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <menu+0x2440>)
 8002984:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <menu+0x2444>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <menu+0x2448>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b15      	cmp	r3, #21
 8002992:	f040 80c2 	bne.w	8002b1a <menu+0x259a>
		if(dilSecim == 0) {
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <menu+0x242c>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12c      	bne.n	80029f8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <menu+0x2474>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fd fd8b 	bl	80004be <lcd_print>
 80029a8:	e02f      	b.n	8002a0a <menu+0x248a>
 80029aa:	bf00      	nop
 80029ac:	20000ca0 	.word	0x20000ca0
 80029b0:	0800cc54 	.word	0x0800cc54
 80029b4:	40010800 	.word	0x40010800
 80029b8:	20000cae 	.word	0x20000cae
 80029bc:	20000c91 	.word	0x20000c91
 80029c0:	20000c18 	.word	0x20000c18
 80029c4:	20000cab 	.word	0x20000cab
 80029c8:	20000c80 	.word	0x20000c80
 80029cc:	20000c8f 	.word	0x20000c8f
 80029d0:	0800d0d4 	.word	0x0800d0d4
 80029d4:	0800d0e8 	.word	0x0800d0e8
 80029d8:	0800d0fc 	.word	0x0800d0fc
 80029dc:	0800d110 	.word	0x0800d110
 80029e0:	20000c92 	.word	0x20000c92
 80029e4:	0800d124 	.word	0x0800d124
 80029e8:	0800d138 	.word	0x0800d138
 80029ec:	0800d148 	.word	0x0800d148
 80029f0:	0800d15c 	.word	0x0800d15c
 80029f4:	0800d16c 	.word	0x0800d16c
		} else if(dilSecim == 1) {
 80029f8:	4b9c      	ldr	r3, [pc, #624]	; (8002c6c <menu+0x26ec>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d104      	bne.n	8002a0a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002a00:	4a9b      	ldr	r2, [pc, #620]	; (8002c70 <menu+0x26f0>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7fd fd5a 	bl	80004be <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002a0a:	4b9a      	ldr	r3, [pc, #616]	; (8002c74 <menu+0x26f4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d112      	bne.n	8002a38 <menu+0x24b8>
			if(dilSecim == 0) {
 8002a12:	4b96      	ldr	r3, [pc, #600]	; (8002c6c <menu+0x26ec>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002a1a:	4a97      	ldr	r2, [pc, #604]	; (8002c78 <menu+0x26f8>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7fd fd4d 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 8002a24:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <menu+0x26ec>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11c      	bne.n	8002a66 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002a2c:	4a93      	ldr	r2, [pc, #588]	; (8002c7c <menu+0x26fc>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fd44 	bl	80004be <lcd_print>
 8002a36:	e016      	b.n	8002a66 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002a38:	4b8e      	ldr	r3, [pc, #568]	; (8002c74 <menu+0x26f4>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d112      	bne.n	8002a66 <menu+0x24e6>
			if(dilSecim == 0) {
 8002a40:	4b8a      	ldr	r3, [pc, #552]	; (8002c6c <menu+0x26ec>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002a48:	4a8d      	ldr	r2, [pc, #564]	; (8002c80 <menu+0x2700>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fd fd36 	bl	80004be <lcd_print>
 8002a52:	e008      	b.n	8002a66 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002a54:	4b85      	ldr	r3, [pc, #532]	; (8002c6c <menu+0x26ec>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d104      	bne.n	8002a66 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002a5c:	4a89      	ldr	r2, [pc, #548]	; (8002c84 <menu+0x2704>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fd fd2c 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a66:	2102      	movs	r1, #2
 8002a68:	4887      	ldr	r0, [pc, #540]	; (8002c88 <menu+0x2708>)
 8002a6a:	f005 fc01 	bl	8008270 <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d115      	bne.n	8002aa0 <menu+0x2520>
 8002a74:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <menu+0x270c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00e      	beq.n	8002aa0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002a82:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <menu+0x26f4>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <menu+0x26f4>)
 8002a8c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002a8e:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <menu+0x26f4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d902      	bls.n	8002a9c <menu+0x251c>
				platformSilindirTipi = 0;
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <menu+0x26f4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a9c:	f001 fcd4 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	4879      	ldr	r0, [pc, #484]	; (8002c88 <menu+0x2708>)
 8002aa4:	f005 fbe4 	bl	8008270 <HAL_GPIO_ReadPin>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d115      	bne.n	8002ada <menu+0x255a>
 8002aae:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <menu+0x270c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002abc:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <menu+0x26f4>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <menu+0x26f4>)
 8002ac6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <menu+0x26f4>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <menu+0x26f4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad6:	f001 fcb7 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ada:	2108      	movs	r1, #8
 8002adc:	486a      	ldr	r0, [pc, #424]	; (8002c88 <menu+0x2708>)
 8002ade:	f005 fbc7 	bl	8008270 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d118      	bne.n	8002b1a <menu+0x259a>
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <menu+0x270c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d011      	beq.n	8002b1a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <menu+0x26f4>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <menu+0x2710>)
 8002afc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <menu+0x26f4>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <menu+0x2594>
				altLimit = 1;
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <menu+0x2714>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <menu+0x2714>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <menu+0x2710>)
 8002b12:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002b14:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <menu+0x2718>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <menu+0x271c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b16      	cmp	r3, #22
 8002b20:	f040 8081 	bne.w	8002c26 <menu+0x26a6>
		if(dilSecim == 0) {
 8002b24:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <menu+0x26ec>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002b2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <menu+0x2720>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7fd fcc4 	bl	80004be <lcd_print>
 8002b36:	e008      	b.n	8002b4a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <menu+0x26ec>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d104      	bne.n	8002b4a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <menu+0x2724>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7fd fcba 	bl	80004be <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <menu+0x26ec>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <menu+0x2728>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2002      	movs	r0, #2
 8002b58:	f7fd fcb1 	bl	80004be <lcd_print>
 8002b5c:	e008      	b.n	8002b70 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <menu+0x26ec>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d104      	bne.n	8002b70 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002b66:	4a51      	ldr	r2, [pc, #324]	; (8002cac <menu+0x272c>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fd fca7 	bl	80004be <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <menu+0x2730>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	220a      	movs	r2, #10
 8002b76:	494f      	ldr	r1, [pc, #316]	; (8002cb4 <menu+0x2734>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f009 fd81 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 8002b7e:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <menu+0x2734>)
 8002b80:	2110      	movs	r1, #16
 8002b82:	2002      	movs	r0, #2
 8002b84:	f7fd fc9b 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b88:	2102      	movs	r1, #2
 8002b8a:	483f      	ldr	r0, [pc, #252]	; (8002c88 <menu+0x2708>)
 8002b8c:	f005 fb70 	bl	8008270 <HAL_GPIO_ReadPin>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d115      	bne.n	8002bc2 <menu+0x2642>
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <menu+0x270c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00e      	beq.n	8002bc2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <menu+0x2730>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <menu+0x2730>)
 8002bae:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <menu+0x2730>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d902      	bls.n	8002bbe <menu+0x263e>
				yukariValfTmr = 0;
 8002bb8:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <menu+0x2730>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bbe:	f001 fc43 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	4830      	ldr	r0, [pc, #192]	; (8002c88 <menu+0x2708>)
 8002bc6:	f005 fb53 	bl	8008270 <HAL_GPIO_ReadPin>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d115      	bne.n	8002bfc <menu+0x267c>
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <menu+0x270c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <menu+0x2730>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <menu+0x2730>)
 8002be8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <menu+0x2730>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <menu+0x2730>)
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bf8:	f001 fc26 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfc:	2108      	movs	r1, #8
 8002bfe:	4822      	ldr	r0, [pc, #136]	; (8002c88 <menu+0x2708>)
 8002c00:	f005 fb36 	bl	8008270 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <menu+0x26a6>
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <menu+0x270c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <menu+0x2730>)
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <menu+0x2710>)
 8002c1e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <menu+0x2718>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <menu+0x271c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b17      	cmp	r3, #23
 8002c2c:	f040 80ac 	bne.w	8002d88 <menu+0x2808>
		if(dilSecim == 0) {
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <menu+0x26ec>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002c38:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <menu+0x2738>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7fd fc3e 	bl	80004be <lcd_print>
 8002c42:	e008      	b.n	8002c56 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <menu+0x26ec>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d104      	bne.n	8002c56 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <menu+0x273c>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fd fc34 	bl	80004be <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <menu+0x26ec>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d130      	bne.n	8002cc0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <menu+0x2728>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2002      	movs	r0, #2
 8002c64:	f7fd fc2b 	bl	80004be <lcd_print>
 8002c68:	e033      	b.n	8002cd2 <menu+0x2752>
 8002c6a:	bf00      	nop
 8002c6c:	20000ca0 	.word	0x20000ca0
 8002c70:	0800d180 	.word	0x0800d180
 8002c74:	20000c93 	.word	0x20000c93
 8002c78:	0800d124 	.word	0x0800d124
 8002c7c:	0800d138 	.word	0x0800d138
 8002c80:	0800d148 	.word	0x0800d148
 8002c84:	0800d15c 	.word	0x0800d15c
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	20000cae 	.word	0x20000cae
 8002c90:	20000c18 	.word	0x20000c18
 8002c94:	20000c86 	.word	0x20000c86
 8002c98:	20000cab 	.word	0x20000cab
 8002c9c:	20000c80 	.word	0x20000c80
 8002ca0:	0800d190 	.word	0x0800d190
 8002ca4:	0800d1a4 	.word	0x0800d1a4
 8002ca8:	0800ce44 	.word	0x0800ce44
 8002cac:	0800d1b8 	.word	0x0800d1b8
 8002cb0:	20000c94 	.word	0x20000c94
 8002cb4:	20000c58 	.word	0x20000c58
 8002cb8:	0800d1c8 	.word	0x0800d1c8
 8002cbc:	0800d1dc 	.word	0x0800d1dc
			} else if(dilSecim == 1) {
 8002cc0:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <menu+0x29a4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d104      	bne.n	8002cd2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002cc8:	4a97      	ldr	r2, [pc, #604]	; (8002f28 <menu+0x29a8>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f7fd fbf6 	bl	80004be <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002cd2:	4b96      	ldr	r3, [pc, #600]	; (8002f2c <menu+0x29ac>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	4995      	ldr	r1, [pc, #596]	; (8002f30 <menu+0x29b0>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f009 fcd0 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 8002ce0:	4a93      	ldr	r2, [pc, #588]	; (8002f30 <menu+0x29b0>)
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fd fbea 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2102      	movs	r1, #2
 8002cec:	4891      	ldr	r0, [pc, #580]	; (8002f34 <menu+0x29b4>)
 8002cee:	f005 fabf 	bl	8008270 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d115      	bne.n	8002d24 <menu+0x27a4>
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <menu+0x29b8>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <menu+0x29ac>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <menu+0x29ac>)
 8002d10:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002d12:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <menu+0x29ac>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d902      	bls.n	8002d20 <menu+0x27a0>
				asagiValfTmr = 0;
 8002d1a:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <menu+0x29ac>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d20:	f001 fb92 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d24:	2104      	movs	r1, #4
 8002d26:	4883      	ldr	r0, [pc, #524]	; (8002f34 <menu+0x29b4>)
 8002d28:	f005 faa2 	bl	8008270 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d115      	bne.n	8002d5e <menu+0x27de>
 8002d32:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <menu+0x29b8>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002d40:	4b7a      	ldr	r3, [pc, #488]	; (8002f2c <menu+0x29ac>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <menu+0x29ac>)
 8002d4a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d4c:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <menu+0x29ac>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d902      	bls.n	8002d5a <menu+0x27da>
		   		asagiValfTmr = 5;
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <menu+0x29ac>)
 8002d56:	2205      	movs	r2, #5
 8002d58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d5a:	f001 fb75 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4874      	ldr	r0, [pc, #464]	; (8002f34 <menu+0x29b4>)
 8002d62:	f005 fa85 	bl	8008270 <HAL_GPIO_ReadPin>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10d      	bne.n	8002d88 <menu+0x2808>
 8002d6c:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <menu+0x29b8>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <menu+0x29ac>)
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <menu+0x29bc>)
 8002d80:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <menu+0x29c0>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d88:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <menu+0x29c4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b18      	cmp	r3, #24
 8002d8e:	f040 809d 	bne.w	8002ecc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <menu+0x29c8>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d113      	bne.n	8002dc2 <menu+0x2842>
			if(dilSecim == 0) {
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <menu+0x29a4>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002da2:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <menu+0x29cc>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd fb89 	bl	80004be <lcd_print>
 8002dac:	e020      	b.n	8002df0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <menu+0x29a4>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d11c      	bne.n	8002df0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <menu+0x29d0>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7fd fb7f 	bl	80004be <lcd_print>
 8002dc0:	e016      	b.n	8002df0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002dc2:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <menu+0x29c8>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d112      	bne.n	8002df0 <menu+0x2870>
			if(dilSecim == 0) {
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <menu+0x29a4>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002dd2:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <menu+0x29d4>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fd fb71 	bl	80004be <lcd_print>
 8002ddc:	e008      	b.n	8002df0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <menu+0x29a4>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d104      	bne.n	8002df0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002de6:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <menu+0x29d8>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7fd fb67 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <menu+0x29a4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <menu+0x29dc>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f7fd fb5e 	bl	80004be <lcd_print>
 8002e02:	e008      	b.n	8002e16 <menu+0x2896>
			} else if(dilSecim == 1) {
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <menu+0x29a4>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d104      	bne.n	8002e16 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8002e0c:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <menu+0x29a8>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7fd fb54 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <menu+0x29e0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	4944      	ldr	r1, [pc, #272]	; (8002f30 <menu+0x29b0>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f009 fc2e 	bl	800c680 <itoa>
		lcd_print(2, 16, snum);
 8002e24:	4a42      	ldr	r2, [pc, #264]	; (8002f30 <menu+0x29b0>)
 8002e26:	2110      	movs	r1, #16
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f7fd fb48 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4840      	ldr	r0, [pc, #256]	; (8002f34 <menu+0x29b4>)
 8002e32:	f005 fa1d 	bl	8008270 <HAL_GPIO_ReadPin>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d115      	bne.n	8002e68 <menu+0x28e8>
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <menu+0x29b8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <menu+0x29e0>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <menu+0x29e0>)
 8002e54:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e56:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <menu+0x29e0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d902      	bls.n	8002e64 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <menu+0x29e0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e64:	f001 faf0 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4832      	ldr	r0, [pc, #200]	; (8002f34 <menu+0x29b4>)
 8002e6c:	f005 fa00 	bl	8008270 <HAL_GPIO_ReadPin>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d115      	bne.n	8002ea2 <menu+0x2922>
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <menu+0x29b8>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	f083 0301 	eor.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00e      	beq.n	8002ea2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <menu+0x29e0>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <menu+0x29e0>)
 8002e8e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e90:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <menu+0x29e0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d902      	bls.n	8002e9e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <menu+0x29e0>)
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e9e:	f001 fad3 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	4823      	ldr	r0, [pc, #140]	; (8002f34 <menu+0x29b4>)
 8002ea6:	f005 f9e3 	bl	8008270 <HAL_GPIO_ReadPin>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <menu+0x294c>
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <menu+0x29b8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f083 0301 	eor.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <menu+0x29e0>)
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <menu+0x29bc>)
 8002ec4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <menu+0x29c0>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <menu+0x29c4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b19      	cmp	r3, #25
 8002ed2:	f040 80c4 	bne.w	800305e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <menu+0x29c8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d113      	bne.n	8002f06 <menu+0x2986>
			if(dilSecim == 0) {
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <menu+0x29a4>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <menu+0x29e4>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7fd fae7 	bl	80004be <lcd_print>
 8002ef0:	e047      	b.n	8002f82 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <menu+0x29a4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d143      	bne.n	8002f82 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <menu+0x29e8>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fd fadd 	bl	80004be <lcd_print>
 8002f04:	e03d      	b.n	8002f82 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <menu+0x29c8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d139      	bne.n	8002f82 <menu+0x2a02>
			if(dilSecim == 0) {
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <menu+0x29a4>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12c      	bne.n	8002f70 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <menu+0x29ec>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7fd facf 	bl	80004be <lcd_print>
 8002f20:	e02f      	b.n	8002f82 <menu+0x2a02>
 8002f22:	bf00      	nop
 8002f24:	20000ca0 	.word	0x20000ca0
 8002f28:	0800d1b8 	.word	0x0800d1b8
 8002f2c:	20000c95 	.word	0x20000c95
 8002f30:	20000c58 	.word	0x20000c58
 8002f34:	40010800 	.word	0x40010800
 8002f38:	20000cae 	.word	0x20000cae
 8002f3c:	20000c18 	.word	0x20000c18
 8002f40:	20000cab 	.word	0x20000cab
 8002f44:	20000c80 	.word	0x20000c80
 8002f48:	20000c8f 	.word	0x20000c8f
 8002f4c:	0800d1f0 	.word	0x0800d1f0
 8002f50:	0800d204 	.word	0x0800d204
 8002f54:	0800d218 	.word	0x0800d218
 8002f58:	0800d22c 	.word	0x0800d22c
 8002f5c:	0800ce44 	.word	0x0800ce44
 8002f60:	20000c96 	.word	0x20000c96
 8002f64:	0800d240 	.word	0x0800d240
 8002f68:	0800d254 	.word	0x0800d254
 8002f6c:	0800d268 	.word	0x0800d268
			} else if(dilSecim == 1) {
 8002f70:	4b73      	ldr	r3, [pc, #460]	; (8003140 <menu+0x2bc0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d104      	bne.n	8002f82 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002f78:	4a72      	ldr	r2, [pc, #456]	; (8003144 <menu+0x2bc4>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7fd fa9e 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <menu+0x2bc0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8002f8a:	4a6f      	ldr	r2, [pc, #444]	; (8003148 <menu+0x2bc8>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7fd fa95 	bl	80004be <lcd_print>
 8002f94:	e008      	b.n	8002fa8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <menu+0x2bc0>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d104      	bne.n	8002fa8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8002f9e:	4a6b      	ldr	r2, [pc, #428]	; (800314c <menu+0x2bcc>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f7fd fa8b 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <menu+0x2bd0>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	220a      	movs	r2, #10
 8002fae:	4969      	ldr	r1, [pc, #420]	; (8003154 <menu+0x2bd4>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f009 fb65 	bl	800c680 <itoa>
		lcd_print(2,16,snum);
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <menu+0x2bd4>)
 8002fb8:	2110      	movs	r1, #16
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7fd fa7f 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4865      	ldr	r0, [pc, #404]	; (8003158 <menu+0x2bd8>)
 8002fc4:	f005 f954 	bl	8008270 <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <menu+0x2a7a>
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <menu+0x2bdc>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002fdc:	4b5c      	ldr	r3, [pc, #368]	; (8003150 <menu+0x2bd0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <menu+0x2bd0>)
 8002fe6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <menu+0x2bd0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d902      	bls.n	8002ff6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <menu+0x2bd0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ff6:	f001 fa27 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	4856      	ldr	r0, [pc, #344]	; (8003158 <menu+0x2bd8>)
 8002ffe:	f005 f937 	bl	8008270 <HAL_GPIO_ReadPin>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d115      	bne.n	8003034 <menu+0x2ab4>
 8003008:	4b54      	ldr	r3, [pc, #336]	; (800315c <menu+0x2bdc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003016:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <menu+0x2bd0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <menu+0x2bd0>)
 8003020:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003022:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <menu+0x2bd0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <menu+0x2bd0>)
 800302c:	2205      	movs	r2, #5
 800302e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003030:	f001 fa0a 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003034:	2108      	movs	r1, #8
 8003036:	4848      	ldr	r0, [pc, #288]	; (8003158 <menu+0x2bd8>)
 8003038:	f005 f91a 	bl	8008270 <HAL_GPIO_ReadPin>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <menu+0x2ade>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <menu+0x2bdc>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f083 0301 	eor.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <menu+0x2bd0>)
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <menu+0x2be0>)
 8003056:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <menu+0x2be4>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <menu+0x2be8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b1a      	cmp	r3, #26
 8003064:	f040 80ec 	bne.w	8003240 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <menu+0x2bc0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003070:	4a3e      	ldr	r2, [pc, #248]	; (800316c <menu+0x2bec>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f7fd fa22 	bl	80004be <lcd_print>
 800307a:	e008      	b.n	800308e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 800307c:	4b30      	ldr	r3, [pc, #192]	; (8003140 <menu+0x2bc0>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d104      	bne.n	800308e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003084:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <menu+0x2bf0>)
 8003086:	2101      	movs	r1, #1
 8003088:	2001      	movs	r0, #1
 800308a:	f7fd fa18 	bl	80004be <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <menu+0x2bf4>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b63      	cmp	r3, #99	; 0x63
 8003094:	d91e      	bls.n	80030d4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <menu+0x2bc0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <menu+0x2bc8>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	2002      	movs	r0, #2
 80030a4:	f7fd fa0b 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <menu+0x2bc0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d104      	bne.n	80030ba <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <menu+0x2bcc>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fd fa02 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <menu+0x2bf4>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	220a      	movs	r2, #10
 80030c0:	4924      	ldr	r1, [pc, #144]	; (8003154 <menu+0x2bd4>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f009 fadc 	bl	800c680 <itoa>
			lcd_print(2,14,snum);
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <menu+0x2bd4>)
 80030ca:	210e      	movs	r1, #14
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7fd f9f6 	bl	80004be <lcd_print>
 80030d2:	e066      	b.n	80031a2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <menu+0x2bf4>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d923      	bls.n	8003124 <menu+0x2ba4>
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <menu+0x2bf4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b63      	cmp	r3, #99	; 0x63
 80030e2:	d81f      	bhi.n	8003124 <menu+0x2ba4>
			if(dilSecim == 0) {
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <menu+0x2bc0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <menu+0x2bc8>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7fd f9e4 	bl	80004be <lcd_print>
 80030f6:	e008      	b.n	800310a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <menu+0x2bc0>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d104      	bne.n	800310a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <menu+0x2bcc>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd f9da 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <menu+0x2bf4>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	220a      	movs	r2, #10
 8003110:	4910      	ldr	r1, [pc, #64]	; (8003154 <menu+0x2bd4>)
 8003112:	4618      	mov	r0, r3
 8003114:	f009 fab4 	bl	800c680 <itoa>
			lcd_print(2, 15, snum);
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <menu+0x2bd4>)
 800311a:	210f      	movs	r1, #15
 800311c:	2002      	movs	r0, #2
 800311e:	f7fd f9ce 	bl	80004be <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003122:	e03e      	b.n	80031a2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <menu+0x2bf4>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b09      	cmp	r3, #9
 800312a:	d83a      	bhi.n	80031a2 <menu+0x2c22>
			if(dilSecim == 0) {
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <menu+0x2bc0>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d121      	bne.n	8003178 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <menu+0x2bc8>)
 8003136:	2101      	movs	r1, #1
 8003138:	2002      	movs	r0, #2
 800313a:	f7fd f9c0 	bl	80004be <lcd_print>
 800313e:	e024      	b.n	800318a <menu+0x2c0a>
 8003140:	20000ca0 	.word	0x20000ca0
 8003144:	0800d27c 	.word	0x0800d27c
 8003148:	0800ce44 	.word	0x0800ce44
 800314c:	0800d1b8 	.word	0x0800d1b8
 8003150:	20000c97 	.word	0x20000c97
 8003154:	20000c58 	.word	0x20000c58
 8003158:	40010800 	.word	0x40010800
 800315c:	20000cae 	.word	0x20000cae
 8003160:	20000c18 	.word	0x20000c18
 8003164:	20000cab 	.word	0x20000cab
 8003168:	20000c80 	.word	0x20000c80
 800316c:	0800d290 	.word	0x0800d290
 8003170:	0800d2a4 	.word	0x0800d2a4
 8003174:	20000c98 	.word	0x20000c98
			} else if(dilSecim == 1) {
 8003178:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <menu+0x2e38>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d104      	bne.n	800318a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003180:	4a8e      	ldr	r2, [pc, #568]	; (80033bc <menu+0x2e3c>)
 8003182:	2101      	movs	r1, #1
 8003184:	2002      	movs	r0, #2
 8003186:	f7fd f99a 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800318a:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <menu+0x2e40>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	220a      	movs	r2, #10
 8003190:	498c      	ldr	r1, [pc, #560]	; (80033c4 <menu+0x2e44>)
 8003192:	4618      	mov	r0, r3
 8003194:	f009 fa74 	bl	800c680 <itoa>
			lcd_print(2, 16, snum);
 8003198:	4a8a      	ldr	r2, [pc, #552]	; (80033c4 <menu+0x2e44>)
 800319a:	2110      	movs	r1, #16
 800319c:	2002      	movs	r0, #2
 800319e:	f7fd f98e 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a2:	2102      	movs	r1, #2
 80031a4:	4888      	ldr	r0, [pc, #544]	; (80033c8 <menu+0x2e48>)
 80031a6:	f005 f863 	bl	8008270 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d115      	bne.n	80031dc <menu+0x2c5c>
 80031b0:	4b86      	ldr	r3, [pc, #536]	; (80033cc <menu+0x2e4c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80031be:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <menu+0x2e40>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b7e      	ldr	r3, [pc, #504]	; (80033c0 <menu+0x2e40>)
 80031c8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80031ca:	4b7d      	ldr	r3, [pc, #500]	; (80033c0 <menu+0x2e40>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2bb4      	cmp	r3, #180	; 0xb4
 80031d0:	d902      	bls.n	80031d8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <menu+0x2e40>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031d8:	f001 f936 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031dc:	2104      	movs	r1, #4
 80031de:	487a      	ldr	r0, [pc, #488]	; (80033c8 <menu+0x2e48>)
 80031e0:	f005 f846 	bl	8008270 <HAL_GPIO_ReadPin>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d115      	bne.n	8003216 <menu+0x2c96>
 80031ea:	4b78      	ldr	r3, [pc, #480]	; (80033cc <menu+0x2e4c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f083 0301 	eor.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80031f8:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <menu+0x2e40>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <menu+0x2e40>)
 8003202:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003204:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <menu+0x2e40>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2bb5      	cmp	r3, #181	; 0xb5
 800320a:	d902      	bls.n	8003212 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <menu+0x2e40>)
 800320e:	22b4      	movs	r2, #180	; 0xb4
 8003210:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003212:	f001 f919 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003216:	2108      	movs	r1, #8
 8003218:	486b      	ldr	r0, [pc, #428]	; (80033c8 <menu+0x2e48>)
 800321a:	f005 f829 	bl	8008270 <HAL_GPIO_ReadPin>
 800321e:	4603      	mov	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10d      	bne.n	8003240 <menu+0x2cc0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <menu+0x2e4c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	f083 0301 	eor.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <menu+0x2e40>)
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <menu+0x2e50>)
 8003238:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <menu+0x2e54>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <menu+0x2e58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b1b      	cmp	r3, #27
 8003246:	f040 8083 	bne.w	8003350 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800324a:	4a64      	ldr	r2, [pc, #400]	; (80033dc <menu+0x2e5c>)
 800324c:	2101      	movs	r1, #1
 800324e:	2001      	movs	r0, #1
 8003250:	f7fd f935 	bl	80004be <lcd_print>

		if(buzzer == 0) {
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <menu+0x2e60>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <menu+0x2d04>
			if(dilSecim == 0) {
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <menu+0x2e38>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003264:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <menu+0x2e64>)
 8003266:	2101      	movs	r1, #1
 8003268:	2002      	movs	r0, #2
 800326a:	f7fd f928 	bl	80004be <lcd_print>
 800326e:	e020      	b.n	80032b2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003270:	4b51      	ldr	r3, [pc, #324]	; (80033b8 <menu+0x2e38>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d11c      	bne.n	80032b2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003278:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <menu+0x2e68>)
 800327a:	2101      	movs	r1, #1
 800327c:	2002      	movs	r0, #2
 800327e:	f7fd f91e 	bl	80004be <lcd_print>
 8003282:	e016      	b.n	80032b2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <menu+0x2e60>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d112      	bne.n	80032b2 <menu+0x2d32>
			if(dilSecim == 0) {
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <menu+0x2e38>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003294:	4a55      	ldr	r2, [pc, #340]	; (80033ec <menu+0x2e6c>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f7fd f910 	bl	80004be <lcd_print>
 800329e:	e008      	b.n	80032b2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80032a0:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <menu+0x2e38>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80032a8:	4a51      	ldr	r2, [pc, #324]	; (80033f0 <menu+0x2e70>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7fd f906 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	4844      	ldr	r0, [pc, #272]	; (80033c8 <menu+0x2e48>)
 80032b6:	f004 ffdb 	bl	8008270 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x2d6c>
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <menu+0x2e4c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x2d6c>
			buzzer = buzzer + 1;
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <menu+0x2e60>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <menu+0x2e60>)
 80032d8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <menu+0x2e60>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d902      	bls.n	80032e8 <menu+0x2d68>
				buzzer = 0;
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <menu+0x2e60>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f001 f8ae 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	4836      	ldr	r0, [pc, #216]	; (80033c8 <menu+0x2e48>)
 80032f0:	f004 ffbe 	bl	8008270 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x2da6>
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <menu+0x2e4c>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <menu+0x2e60>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <menu+0x2e60>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <menu+0x2e60>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <menu+0x2da2>
		   		buzzer = 1;
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <menu+0x2e60>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f001 f891 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	4827      	ldr	r0, [pc, #156]	; (80033c8 <menu+0x2e48>)
 800332a:	f004 ffa1 	bl	8008270 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <menu+0x2dd0>
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <menu+0x2e4c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <menu+0x2e60>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <menu+0x2e50>)
 8003348:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <menu+0x2e54>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <menu+0x2e58>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b1c      	cmp	r3, #28
 8003356:	f040 80ab 	bne.w	80034b0 <menu+0x2f30>
		calismaSayModu = 0;
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <menu+0x2e74>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <menu+0x2e78>)
 8003362:	2101      	movs	r1, #1
 8003364:	2001      	movs	r0, #1
 8003366:	f7fd f8aa 	bl	80004be <lcd_print>

		if(demoMode == 0) {
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <menu+0x2e7c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d113      	bne.n	800339a <menu+0x2e1a>
			if(dilSecim == 0) {
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <menu+0x2e38>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800337a:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <menu+0x2e64>)
 800337c:	2101      	movs	r1, #1
 800337e:	2002      	movs	r0, #2
 8003380:	f7fd f89d 	bl	80004be <lcd_print>
 8003384:	e045      	b.n	8003412 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <menu+0x2e38>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d141      	bne.n	8003412 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <menu+0x2e68>)
 8003390:	2101      	movs	r1, #1
 8003392:	2002      	movs	r0, #2
 8003394:	f7fd f893 	bl	80004be <lcd_print>
 8003398:	e03b      	b.n	8003412 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <menu+0x2e7c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d137      	bne.n	8003412 <menu+0x2e92>
			if(dilSecim == 0){
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <menu+0x2e38>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12a      	bne.n	8003400 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <menu+0x2e6c>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	2002      	movs	r0, #2
 80033b0:	f7fd f885 	bl	80004be <lcd_print>
 80033b4:	e02d      	b.n	8003412 <menu+0x2e92>
 80033b6:	bf00      	nop
 80033b8:	20000ca0 	.word	0x20000ca0
 80033bc:	0800d1b8 	.word	0x0800d1b8
 80033c0:	20000c98 	.word	0x20000c98
 80033c4:	20000c58 	.word	0x20000c58
 80033c8:	40010800 	.word	0x40010800
 80033cc:	20000cae 	.word	0x20000cae
 80033d0:	20000c18 	.word	0x20000c18
 80033d4:	20000cab 	.word	0x20000cab
 80033d8:	20000c80 	.word	0x20000c80
 80033dc:	0800d2b8 	.word	0x0800d2b8
 80033e0:	20000c9c 	.word	0x20000c9c
 80033e4:	0800cbe0 	.word	0x0800cbe0
 80033e8:	0800cbf4 	.word	0x0800cbf4
 80033ec:	0800cc40 	.word	0x0800cc40
 80033f0:	0800cc54 	.word	0x0800cc54
 80033f4:	20000c9f 	.word	0x20000c9f
 80033f8:	0800d2cc 	.word	0x0800d2cc
 80033fc:	20000c9e 	.word	0x20000c9e
			} else if(dilSecim == 1) {
 8003400:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <menu+0x3048>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d104      	bne.n	8003412 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003408:	4a70      	ldr	r2, [pc, #448]	; (80035cc <menu+0x304c>)
 800340a:	2101      	movs	r1, #1
 800340c:	2002      	movs	r0, #2
 800340e:	f7fd f856 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003412:	2102      	movs	r1, #2
 8003414:	486e      	ldr	r0, [pc, #440]	; (80035d0 <menu+0x3050>)
 8003416:	f004 ff2b 	bl	8008270 <HAL_GPIO_ReadPin>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d115      	bne.n	800344c <menu+0x2ecc>
 8003420:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <menu+0x3054>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800342e:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <menu+0x3058>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <menu+0x3058>)
 8003438:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <menu+0x3058>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d902      	bls.n	8003448 <menu+0x2ec8>
				demoMode = 0;
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <menu+0x3058>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003448:	f000 fffe 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800344c:	2104      	movs	r1, #4
 800344e:	4860      	ldr	r0, [pc, #384]	; (80035d0 <menu+0x3050>)
 8003450:	f004 ff0e 	bl	8008270 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d115      	bne.n	8003486 <menu+0x2f06>
 800345a:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <menu+0x3054>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003468:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <menu+0x3058>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <menu+0x3058>)
 8003472:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003474:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <menu+0x3058>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <menu+0x2f02>
		   		demoMode = 1;
 800347c:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <menu+0x3058>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003482:	f000 ffe1 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003486:	2108      	movs	r1, #8
 8003488:	4851      	ldr	r0, [pc, #324]	; (80035d0 <menu+0x3050>)
 800348a:	f004 fef1 	bl	8008270 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <menu+0x2f30>
 8003494:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <menu+0x3054>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f083 0301 	eor.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80034a2:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <menu+0x3058>)
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	4b4d      	ldr	r3, [pc, #308]	; (80035dc <menu+0x305c>)
 80034a8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80034aa:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <menu+0x3060>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <menu+0x3064>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b1d      	cmp	r3, #29
 80034b6:	f040 8132 	bne.w	800371e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80034ba:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <menu+0x3068>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <menu+0x2f6a>
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <menu+0x306c>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <menu+0x2f6a>
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <menu+0x3070>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <menu+0x2f6a>
 80034d2:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <menu+0x3074>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <menu+0x2f6a>
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <menu+0x3078>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <menu+0x2f6a>
			calismaSayisiYar = 0;
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <menu+0x307c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e002      	b.n	80034f0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <menu+0x307c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <menu+0x3080>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d154      	bne.n	80035a2 <menu+0x3022>
			if(dilSecim == 0) {
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <menu+0x3048>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003500:	4a40      	ldr	r2, [pc, #256]	; (8003604 <menu+0x3084>)
 8003502:	2101      	movs	r1, #1
 8003504:	2001      	movs	r0, #1
 8003506:	f7fc ffda 	bl	80004be <lcd_print>
 800350a:	e008      	b.n	800351e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800350c:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <menu+0x3048>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d104      	bne.n	800351e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003514:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <menu+0x3088>)
 8003516:	2101      	movs	r1, #1
 8003518:	2001      	movs	r0, #1
 800351a:	f7fc ffd0 	bl	80004be <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <menu+0x3078>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	220a      	movs	r2, #10
 8003524:	4939      	ldr	r1, [pc, #228]	; (800360c <menu+0x308c>)
 8003526:	4618      	mov	r0, r3
 8003528:	f009 f8aa 	bl	800c680 <itoa>
			lcd_print(2, 12, snum);
 800352c:	4a37      	ldr	r2, [pc, #220]	; (800360c <menu+0x308c>)
 800352e:	210c      	movs	r1, #12
 8003530:	2002      	movs	r0, #2
 8003532:	f7fc ffc4 	bl	80004be <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <menu+0x3074>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	220a      	movs	r2, #10
 800353c:	4933      	ldr	r1, [pc, #204]	; (800360c <menu+0x308c>)
 800353e:	4618      	mov	r0, r3
 8003540:	f009 f89e 	bl	800c680 <itoa>
			lcd_print(2, 13, snum);
 8003544:	4a31      	ldr	r2, [pc, #196]	; (800360c <menu+0x308c>)
 8003546:	210d      	movs	r1, #13
 8003548:	2002      	movs	r0, #2
 800354a:	f7fc ffb8 	bl	80004be <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <menu+0x3070>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	220a      	movs	r2, #10
 8003554:	492d      	ldr	r1, [pc, #180]	; (800360c <menu+0x308c>)
 8003556:	4618      	mov	r0, r3
 8003558:	f009 f892 	bl	800c680 <itoa>
			lcd_print(2, 14, snum);
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <menu+0x308c>)
 800355e:	210e      	movs	r1, #14
 8003560:	2002      	movs	r0, #2
 8003562:	f7fc ffac 	bl	80004be <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <menu+0x306c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	220a      	movs	r2, #10
 800356c:	4927      	ldr	r1, [pc, #156]	; (800360c <menu+0x308c>)
 800356e:	4618      	mov	r0, r3
 8003570:	f009 f886 	bl	800c680 <itoa>
			lcd_print(2, 15, snum);
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <menu+0x308c>)
 8003576:	210f      	movs	r1, #15
 8003578:	2002      	movs	r0, #2
 800357a:	f7fc ffa0 	bl	80004be <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <menu+0x3068>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	220a      	movs	r2, #10
 8003584:	4921      	ldr	r1, [pc, #132]	; (800360c <menu+0x308c>)
 8003586:	4618      	mov	r0, r3
 8003588:	f009 f87a 	bl	800c680 <itoa>
			lcd_print(2, 16, snum);
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <menu+0x308c>)
 800358e:	2110      	movs	r1, #16
 8003590:	2002      	movs	r0, #2
 8003592:	f7fc ff94 	bl	80004be <lcd_print>

			lcd_print(2, 1, "           ");
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <menu+0x3090>)
 8003598:	2101      	movs	r1, #1
 800359a:	2002      	movs	r0, #2
 800359c:	f7fc ff8f 	bl	80004be <lcd_print>
 80035a0:	e048      	b.n	8003634 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <menu+0x3080>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d144      	bne.n	8003634 <menu+0x30b4>
			if(dilSecim == 0) {
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <menu+0x3048>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d132      	bne.n	8003618 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <menu+0x3084>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7fc ff81 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <menu+0x3094>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fc ff7c 	bl	80004be <lcd_print>
 80035c6:	e035      	b.n	8003634 <menu+0x30b4>
 80035c8:	20000ca0 	.word	0x20000ca0
 80035cc:	0800cc54 	.word	0x0800cc54
 80035d0:	40010800 	.word	0x40010800
 80035d4:	20000cae 	.word	0x20000cae
 80035d8:	20000c9e 	.word	0x20000c9e
 80035dc:	20000c18 	.word	0x20000c18
 80035e0:	20000cab 	.word	0x20000cab
 80035e4:	20000c80 	.word	0x20000c80
 80035e8:	20000c7d 	.word	0x20000c7d
 80035ec:	20000c7e 	.word	0x20000c7e
 80035f0:	20000940 	.word	0x20000940
 80035f4:	20000941 	.word	0x20000941
 80035f8:	20000c7f 	.word	0x20000c7f
 80035fc:	20000cc0 	.word	0x20000cc0
 8003600:	20000c9f 	.word	0x20000c9f
 8003604:	0800d2dc 	.word	0x0800d2dc
 8003608:	0800d2f0 	.word	0x0800d2f0
 800360c:	20000c58 	.word	0x20000c58
 8003610:	0800d304 	.word	0x0800d304
 8003614:	0800d310 	.word	0x0800d310
			} else if(dilSecim == 1) {
 8003618:	4b95      	ldr	r3, [pc, #596]	; (8003870 <menu+0x32f0>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d109      	bne.n	8003634 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003620:	4a94      	ldr	r2, [pc, #592]	; (8003874 <menu+0x32f4>)
 8003622:	2101      	movs	r1, #1
 8003624:	2001      	movs	r0, #1
 8003626:	f7fc ff4a 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800362a:	4a93      	ldr	r2, [pc, #588]	; (8003878 <menu+0x32f8>)
 800362c:	2101      	movs	r1, #1
 800362e:	2002      	movs	r0, #2
 8003630:	f7fc ff45 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003634:	2102      	movs	r1, #2
 8003636:	4891      	ldr	r0, [pc, #580]	; (800387c <menu+0x32fc>)
 8003638:	f004 fe1a 	bl	8008270 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <menu+0x30f6>
 8003642:	4b8f      	ldr	r3, [pc, #572]	; (8003880 <menu+0x3300>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f083 0301 	eor.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <menu+0x30f6>
 8003650:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <menu+0x3304>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003658:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <menu+0x3308>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b89      	ldr	r3, [pc, #548]	; (8003888 <menu+0x3308>)
 8003662:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003664:	4b88      	ldr	r3, [pc, #544]	; (8003888 <menu+0x3308>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d902      	bls.n	8003672 <menu+0x30f2>
				calismaSayModu = 0;
 800366c:	4b86      	ldr	r3, [pc, #536]	; (8003888 <menu+0x3308>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003672:	f000 fee9 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003676:	2104      	movs	r1, #4
 8003678:	4880      	ldr	r0, [pc, #512]	; (800387c <menu+0x32fc>)
 800367a:	f004 fdf9 	bl	8008270 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d119      	bne.n	80036b8 <menu+0x3138>
 8003684:	4b7e      	ldr	r3, [pc, #504]	; (8003880 <menu+0x3300>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <menu+0x3138>
 8003692:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <menu+0x3304>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800369a:	4b7b      	ldr	r3, [pc, #492]	; (8003888 <menu+0x3308>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3b01      	subs	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b79      	ldr	r3, [pc, #484]	; (8003888 <menu+0x3308>)
 80036a4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80036a6:	4b78      	ldr	r3, [pc, #480]	; (8003888 <menu+0x3308>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <menu+0x3134>
		   		calismaSayModu = 1;
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <menu+0x3308>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b4:	f000 fec8 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b8:	2108      	movs	r1, #8
 80036ba:	4870      	ldr	r0, [pc, #448]	; (800387c <menu+0x32fc>)
 80036bc:	f004 fdd8 	bl	8008270 <HAL_GPIO_ReadPin>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d12b      	bne.n	800371e <menu+0x319e>
 80036c6:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <menu+0x3300>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d024      	beq.n	800371e <menu+0x319e>
			eepromData[32] = 0;
 80036d4:	4b6d      	ldr	r3, [pc, #436]	; (800388c <menu+0x330c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <menu+0x330c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <menu+0x330c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <menu+0x330c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <menu+0x330c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80036f4:	4b66      	ldr	r3, [pc, #408]	; (8003890 <menu+0x3310>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80036fa:	4b66      	ldr	r3, [pc, #408]	; (8003894 <menu+0x3314>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003700:	4b65      	ldr	r3, [pc, #404]	; (8003898 <menu+0x3318>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <menu+0x331c>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <menu+0x3320>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003712:	4b5d      	ldr	r3, [pc, #372]	; (8003888 <menu+0x3308>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003718:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <menu+0x3324>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <menu+0x3328>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b1e      	cmp	r3, #30
 8003724:	d16f      	bne.n	8003806 <menu+0x3286>
		calismaSayModu = 0;
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <menu+0x3308>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <menu+0x32f0>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003734:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <menu+0x332c>)
 8003736:	2101      	movs	r1, #1
 8003738:	2001      	movs	r0, #1
 800373a:	f7fc fec0 	bl	80004be <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <menu+0x3330>)
 8003740:	2101      	movs	r1, #1
 8003742:	2002      	movs	r0, #2
 8003744:	f7fc febb 	bl	80004be <lcd_print>
 8003748:	e00d      	b.n	8003766 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <menu+0x32f0>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d109      	bne.n	8003766 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003752:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <menu+0x3334>)
 8003754:	2101      	movs	r1, #1
 8003756:	2001      	movs	r0, #1
 8003758:	f7fc feb1 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800375c:	4a56      	ldr	r2, [pc, #344]	; (80038b8 <menu+0x3338>)
 800375e:	2101      	movs	r1, #1
 8003760:	2002      	movs	r0, #2
 8003762:	f7fc feac 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003766:	2102      	movs	r1, #2
 8003768:	4844      	ldr	r0, [pc, #272]	; (800387c <menu+0x32fc>)
 800376a:	f004 fd81 	bl	8008270 <HAL_GPIO_ReadPin>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d115      	bne.n	80037a0 <menu+0x3220>
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <menu+0x3300>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <menu+0x32f0>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <menu+0x32f0>)
 800378c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <menu+0x32f0>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d902      	bls.n	800379c <menu+0x321c>
				dilSecim = 0;
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <menu+0x32f0>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800379c:	f000 fe54 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a0:	2104      	movs	r1, #4
 80037a2:	4836      	ldr	r0, [pc, #216]	; (800387c <menu+0x32fc>)
 80037a4:	f004 fd64 	bl	8008270 <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <menu+0x325a>
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <menu+0x3300>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <menu+0x325a>
			dilSecim = dilSecim - 1;
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <menu+0x32f0>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <menu+0x32f0>)
 80037c6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <menu+0x32f0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <menu+0x3256>
		   		dilSecim = 1;
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <menu+0x32f0>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80037d6:	f000 fe37 	bl	8004448 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2108      	movs	r1, #8
 80037dc:	4827      	ldr	r0, [pc, #156]	; (800387c <menu+0x32fc>)
 80037de:	f004 fd47 	bl	8008270 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10e      	bne.n	8003806 <menu+0x3286>
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <menu+0x3300>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <menu+0x3286>
			eepromData[33] = dilSecim;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <menu+0x32f0>)
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <menu+0x330c>)
 80037fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <menu+0x3324>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <menu+0x3328>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b1f      	cmp	r3, #31
 800380c:	d12e      	bne.n	800386c <menu+0x32ec>
		if(dilSecim == 0) {
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <menu+0x32f0>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <menu+0x333c>)
 8003818:	2101      	movs	r1, #1
 800381a:	2001      	movs	r0, #1
 800381c:	f7fc fe4f 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <menu+0x3340>)
 8003822:	2101      	movs	r1, #1
 8003824:	2002      	movs	r0, #2
 8003826:	f7fc fe4a 	bl	80004be <lcd_print>
 800382a:	e00d      	b.n	8003848 <menu+0x32c8>
		} else if(dilSecim == 1) {
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <menu+0x32f0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d109      	bne.n	8003848 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003834:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <menu+0x3344>)
 8003836:	2101      	movs	r1, #1
 8003838:	2001      	movs	r0, #1
 800383a:	f7fc fe40 	bl	80004be <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <menu+0x3348>)
 8003840:	2101      	movs	r1, #1
 8003842:	2002      	movs	r0, #2
 8003844:	f7fc fe3b 	bl	80004be <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003848:	2108      	movs	r1, #8
 800384a:	480c      	ldr	r0, [pc, #48]	; (800387c <menu+0x32fc>)
 800384c:	f004 fd10 	bl	8008270 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10a      	bne.n	800386c <menu+0x32ec>
			menuGiris = 0;
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <menu+0x334c>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 800385c:	f7fc fe44 	bl	80004e8 <lcd_clear>
			HAL_Delay(500);
 8003860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003864:	f004 f876 	bl	8007954 <HAL_Delay>
			NVIC_SystemReset();
 8003868:	f7fc fe5a 	bl	8000520 <__NVIC_SystemReset>
		}
	}
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000ca0 	.word	0x20000ca0
 8003874:	0800d2f0 	.word	0x0800d2f0
 8003878:	0800d324 	.word	0x0800d324
 800387c:	40010800 	.word	0x40010800
 8003880:	20000cae 	.word	0x20000cae
 8003884:	20000cc0 	.word	0x20000cc0
 8003888:	20000c9f 	.word	0x20000c9f
 800388c:	20000c18 	.word	0x20000c18
 8003890:	20000c7f 	.word	0x20000c7f
 8003894:	20000941 	.word	0x20000941
 8003898:	20000940 	.word	0x20000940
 800389c:	20000c7e 	.word	0x20000c7e
 80038a0:	20000c7d 	.word	0x20000c7d
 80038a4:	20000cab 	.word	0x20000cab
 80038a8:	20000c80 	.word	0x20000c80
 80038ac:	0800d338 	.word	0x0800d338
 80038b0:	0800d34c 	.word	0x0800d34c
 80038b4:	0800d360 	.word	0x0800d360
 80038b8:	0800d374 	.word	0x0800d374
 80038bc:	0800d388 	.word	0x0800d388
 80038c0:	0800d39c 	.word	0x0800d39c
 80038c4:	0800d3b0 	.word	0x0800d3b0
 80038c8:	0800d3c4 	.word	0x0800d3c4
 80038cc:	20000c9d 	.word	0x20000c9d

080038d0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80038da:	48a9      	ldr	r0, [pc, #676]	; (8003b80 <loadMenuTexts+0x2b0>)
 80038dc:	f7fc fe36 	bl	800054c <copyText>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4aa8      	ldr	r2, [pc, #672]	; (8003b84 <loadMenuTexts+0x2b4>)
 80038e4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80038e6:	48a8      	ldr	r0, [pc, #672]	; (8003b88 <loadMenuTexts+0x2b8>)
 80038e8:	f7fc fe30 	bl	800054c <copyText>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4aa7      	ldr	r2, [pc, #668]	; (8003b8c <loadMenuTexts+0x2bc>)
 80038f0:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 80038f2:	48a7      	ldr	r0, [pc, #668]	; (8003b90 <loadMenuTexts+0x2c0>)
 80038f4:	f7fc fe2a 	bl	800054c <copyText>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4aa6      	ldr	r2, [pc, #664]	; (8003b94 <loadMenuTexts+0x2c4>)
 80038fc:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 80038fe:	48a6      	ldr	r0, [pc, #664]	; (8003b98 <loadMenuTexts+0x2c8>)
 8003900:	f7fc fe24 	bl	800054c <copyText>
 8003904:	4603      	mov	r3, r0
 8003906:	4aa5      	ldr	r2, [pc, #660]	; (8003b9c <loadMenuTexts+0x2cc>)
 8003908:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800390a:	48a5      	ldr	r0, [pc, #660]	; (8003ba0 <loadMenuTexts+0x2d0>)
 800390c:	f7fc fe1e 	bl	800054c <copyText>
 8003910:	4603      	mov	r3, r0
 8003912:	4aa4      	ldr	r2, [pc, #656]	; (8003ba4 <loadMenuTexts+0x2d4>)
 8003914:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003916:	48a4      	ldr	r0, [pc, #656]	; (8003ba8 <loadMenuTexts+0x2d8>)
 8003918:	f7fc fe18 	bl	800054c <copyText>
 800391c:	4603      	mov	r3, r0
 800391e:	4aa3      	ldr	r2, [pc, #652]	; (8003bac <loadMenuTexts+0x2dc>)
 8003920:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003922:	48a3      	ldr	r0, [pc, #652]	; (8003bb0 <loadMenuTexts+0x2e0>)
 8003924:	f7fc fe12 	bl	800054c <copyText>
 8003928:	4603      	mov	r3, r0
 800392a:	4aa2      	ldr	r2, [pc, #648]	; (8003bb4 <loadMenuTexts+0x2e4>)
 800392c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 82d1 	bne.w	8003ed8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003936:	48a0      	ldr	r0, [pc, #640]	; (8003bb8 <loadMenuTexts+0x2e8>)
 8003938:	f7fc fe08 	bl	800054c <copyText>
 800393c:	4603      	mov	r3, r0
 800393e:	4a9f      	ldr	r2, [pc, #636]	; (8003bbc <loadMenuTexts+0x2ec>)
 8003940:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003942:	489f      	ldr	r0, [pc, #636]	; (8003bc0 <loadMenuTexts+0x2f0>)
 8003944:	f7fc fe02 	bl	800054c <copyText>
 8003948:	4603      	mov	r3, r0
 800394a:	4a9e      	ldr	r2, [pc, #632]	; (8003bc4 <loadMenuTexts+0x2f4>)
 800394c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800394e:	489e      	ldr	r0, [pc, #632]	; (8003bc8 <loadMenuTexts+0x2f8>)
 8003950:	f7fc fdfc 	bl	800054c <copyText>
 8003954:	4603      	mov	r3, r0
 8003956:	4a9d      	ldr	r2, [pc, #628]	; (8003bcc <loadMenuTexts+0x2fc>)
 8003958:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800395a:	489d      	ldr	r0, [pc, #628]	; (8003bd0 <loadMenuTexts+0x300>)
 800395c:	f7fc fdf6 	bl	800054c <copyText>
 8003960:	4603      	mov	r3, r0
 8003962:	4a9c      	ldr	r2, [pc, #624]	; (8003bd4 <loadMenuTexts+0x304>)
 8003964:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003966:	489c      	ldr	r0, [pc, #624]	; (8003bd8 <loadMenuTexts+0x308>)
 8003968:	f7fc fdf0 	bl	800054c <copyText>
 800396c:	4603      	mov	r3, r0
 800396e:	4a9b      	ldr	r2, [pc, #620]	; (8003bdc <loadMenuTexts+0x30c>)
 8003970:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003972:	489b      	ldr	r0, [pc, #620]	; (8003be0 <loadMenuTexts+0x310>)
 8003974:	f7fc fdea 	bl	800054c <copyText>
 8003978:	4603      	mov	r3, r0
 800397a:	4a9a      	ldr	r2, [pc, #616]	; (8003be4 <loadMenuTexts+0x314>)
 800397c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800397e:	489a      	ldr	r0, [pc, #616]	; (8003be8 <loadMenuTexts+0x318>)
 8003980:	f7fc fde4 	bl	800054c <copyText>
 8003984:	4603      	mov	r3, r0
 8003986:	4a99      	ldr	r2, [pc, #612]	; (8003bec <loadMenuTexts+0x31c>)
 8003988:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800398a:	4899      	ldr	r0, [pc, #612]	; (8003bf0 <loadMenuTexts+0x320>)
 800398c:	f7fc fdde 	bl	800054c <copyText>
 8003990:	4603      	mov	r3, r0
 8003992:	4a98      	ldr	r2, [pc, #608]	; (8003bf4 <loadMenuTexts+0x324>)
 8003994:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003996:	4898      	ldr	r0, [pc, #608]	; (8003bf8 <loadMenuTexts+0x328>)
 8003998:	f7fc fdd8 	bl	800054c <copyText>
 800399c:	4603      	mov	r3, r0
 800399e:	4a97      	ldr	r2, [pc, #604]	; (8003bfc <loadMenuTexts+0x32c>)
 80039a0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80039a2:	4897      	ldr	r0, [pc, #604]	; (8003c00 <loadMenuTexts+0x330>)
 80039a4:	f7fc fdd2 	bl	800054c <copyText>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a96      	ldr	r2, [pc, #600]	; (8003c04 <loadMenuTexts+0x334>)
 80039ac:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80039ae:	4896      	ldr	r0, [pc, #600]	; (8003c08 <loadMenuTexts+0x338>)
 80039b0:	f7fc fdcc 	bl	800054c <copyText>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a95      	ldr	r2, [pc, #596]	; (8003c0c <loadMenuTexts+0x33c>)
 80039b8:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80039ba:	4895      	ldr	r0, [pc, #596]	; (8003c10 <loadMenuTexts+0x340>)
 80039bc:	f7fc fdc6 	bl	800054c <copyText>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a94      	ldr	r2, [pc, #592]	; (8003c14 <loadMenuTexts+0x344>)
 80039c4:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80039c6:	4894      	ldr	r0, [pc, #592]	; (8003c18 <loadMenuTexts+0x348>)
 80039c8:	f7fc fdc0 	bl	800054c <copyText>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a93      	ldr	r2, [pc, #588]	; (8003c1c <loadMenuTexts+0x34c>)
 80039d0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80039d2:	4893      	ldr	r0, [pc, #588]	; (8003c20 <loadMenuTexts+0x350>)
 80039d4:	f7fc fdba 	bl	800054c <copyText>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a92      	ldr	r2, [pc, #584]	; (8003c24 <loadMenuTexts+0x354>)
 80039dc:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80039de:	4892      	ldr	r0, [pc, #584]	; (8003c28 <loadMenuTexts+0x358>)
 80039e0:	f7fc fdb4 	bl	800054c <copyText>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a91      	ldr	r2, [pc, #580]	; (8003c2c <loadMenuTexts+0x35c>)
 80039e8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80039ea:	4891      	ldr	r0, [pc, #580]	; (8003c30 <loadMenuTexts+0x360>)
 80039ec:	f7fc fdae 	bl	800054c <copyText>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <loadMenuTexts+0x364>)
 80039f4:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 80039f6:	4890      	ldr	r0, [pc, #576]	; (8003c38 <loadMenuTexts+0x368>)
 80039f8:	f7fc fda8 	bl	800054c <copyText>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a8f      	ldr	r2, [pc, #572]	; (8003c3c <loadMenuTexts+0x36c>)
 8003a00:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003a02:	488f      	ldr	r0, [pc, #572]	; (8003c40 <loadMenuTexts+0x370>)
 8003a04:	f7fc fda2 	bl	800054c <copyText>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a8e      	ldr	r2, [pc, #568]	; (8003c44 <loadMenuTexts+0x374>)
 8003a0c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003a0e:	488e      	ldr	r0, [pc, #568]	; (8003c48 <loadMenuTexts+0x378>)
 8003a10:	f7fc fd9c 	bl	800054c <copyText>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a8d      	ldr	r2, [pc, #564]	; (8003c4c <loadMenuTexts+0x37c>)
 8003a18:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003a1a:	488d      	ldr	r0, [pc, #564]	; (8003c50 <loadMenuTexts+0x380>)
 8003a1c:	f7fc fd96 	bl	800054c <copyText>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a8c      	ldr	r2, [pc, #560]	; (8003c54 <loadMenuTexts+0x384>)
 8003a24:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003a26:	488c      	ldr	r0, [pc, #560]	; (8003c58 <loadMenuTexts+0x388>)
 8003a28:	f7fc fd90 	bl	800054c <copyText>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a8b      	ldr	r2, [pc, #556]	; (8003c5c <loadMenuTexts+0x38c>)
 8003a30:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003a32:	488b      	ldr	r0, [pc, #556]	; (8003c60 <loadMenuTexts+0x390>)
 8003a34:	f7fc fd8a 	bl	800054c <copyText>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a8a      	ldr	r2, [pc, #552]	; (8003c64 <loadMenuTexts+0x394>)
 8003a3c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003a3e:	488a      	ldr	r0, [pc, #552]	; (8003c68 <loadMenuTexts+0x398>)
 8003a40:	f7fc fd84 	bl	800054c <copyText>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a89      	ldr	r2, [pc, #548]	; (8003c6c <loadMenuTexts+0x39c>)
 8003a48:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003a4a:	4889      	ldr	r0, [pc, #548]	; (8003c70 <loadMenuTexts+0x3a0>)
 8003a4c:	f7fc fd7e 	bl	800054c <copyText>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a88      	ldr	r2, [pc, #544]	; (8003c74 <loadMenuTexts+0x3a4>)
 8003a54:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003a56:	4888      	ldr	r0, [pc, #544]	; (8003c78 <loadMenuTexts+0x3a8>)
 8003a58:	f7fc fd78 	bl	800054c <copyText>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a87      	ldr	r2, [pc, #540]	; (8003c7c <loadMenuTexts+0x3ac>)
 8003a60:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003a62:	4887      	ldr	r0, [pc, #540]	; (8003c80 <loadMenuTexts+0x3b0>)
 8003a64:	f7fc fd72 	bl	800054c <copyText>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a86      	ldr	r2, [pc, #536]	; (8003c84 <loadMenuTexts+0x3b4>)
 8003a6c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003a6e:	4886      	ldr	r0, [pc, #536]	; (8003c88 <loadMenuTexts+0x3b8>)
 8003a70:	f7fc fd6c 	bl	800054c <copyText>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a85      	ldr	r2, [pc, #532]	; (8003c8c <loadMenuTexts+0x3bc>)
 8003a78:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003a7a:	4885      	ldr	r0, [pc, #532]	; (8003c90 <loadMenuTexts+0x3c0>)
 8003a7c:	f7fc fd66 	bl	800054c <copyText>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a84      	ldr	r2, [pc, #528]	; (8003c94 <loadMenuTexts+0x3c4>)
 8003a84:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003a86:	4884      	ldr	r0, [pc, #528]	; (8003c98 <loadMenuTexts+0x3c8>)
 8003a88:	f7fc fd60 	bl	800054c <copyText>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a83      	ldr	r2, [pc, #524]	; (8003c9c <loadMenuTexts+0x3cc>)
 8003a90:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003a92:	4883      	ldr	r0, [pc, #524]	; (8003ca0 <loadMenuTexts+0x3d0>)
 8003a94:	f7fc fd5a 	bl	800054c <copyText>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4a82      	ldr	r2, [pc, #520]	; (8003ca4 <loadMenuTexts+0x3d4>)
 8003a9c:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003a9e:	4882      	ldr	r0, [pc, #520]	; (8003ca8 <loadMenuTexts+0x3d8>)
 8003aa0:	f7fc fd54 	bl	800054c <copyText>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a81      	ldr	r2, [pc, #516]	; (8003cac <loadMenuTexts+0x3dc>)
 8003aa8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003aaa:	4881      	ldr	r0, [pc, #516]	; (8003cb0 <loadMenuTexts+0x3e0>)
 8003aac:	f7fc fd4e 	bl	800054c <copyText>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <loadMenuTexts+0x3e4>)
 8003ab4:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003ab6:	4880      	ldr	r0, [pc, #512]	; (8003cb8 <loadMenuTexts+0x3e8>)
 8003ab8:	f7fc fd48 	bl	800054c <copyText>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a7f      	ldr	r2, [pc, #508]	; (8003cbc <loadMenuTexts+0x3ec>)
 8003ac0:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003ac2:	487f      	ldr	r0, [pc, #508]	; (8003cc0 <loadMenuTexts+0x3f0>)
 8003ac4:	f7fc fd42 	bl	800054c <copyText>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <loadMenuTexts+0x3f4>)
 8003acc:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003ace:	487e      	ldr	r0, [pc, #504]	; (8003cc8 <loadMenuTexts+0x3f8>)
 8003ad0:	f7fc fd3c 	bl	800054c <copyText>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <loadMenuTexts+0x3fc>)
 8003ad8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003ada:	487d      	ldr	r0, [pc, #500]	; (8003cd0 <loadMenuTexts+0x400>)
 8003adc:	f7fc fd36 	bl	800054c <copyText>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4a7c      	ldr	r2, [pc, #496]	; (8003cd4 <loadMenuTexts+0x404>)
 8003ae4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003ae6:	487c      	ldr	r0, [pc, #496]	; (8003cd8 <loadMenuTexts+0x408>)
 8003ae8:	f7fc fd30 	bl	800054c <copyText>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a7b      	ldr	r2, [pc, #492]	; (8003cdc <loadMenuTexts+0x40c>)
 8003af0:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003af2:	487b      	ldr	r0, [pc, #492]	; (8003ce0 <loadMenuTexts+0x410>)
 8003af4:	f7fc fd2a 	bl	800054c <copyText>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a7a      	ldr	r2, [pc, #488]	; (8003ce4 <loadMenuTexts+0x414>)
 8003afc:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003afe:	487a      	ldr	r0, [pc, #488]	; (8003ce8 <loadMenuTexts+0x418>)
 8003b00:	f7fc fd24 	bl	800054c <copyText>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4a79      	ldr	r2, [pc, #484]	; (8003cec <loadMenuTexts+0x41c>)
 8003b08:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003b0a:	4879      	ldr	r0, [pc, #484]	; (8003cf0 <loadMenuTexts+0x420>)
 8003b0c:	f7fc fd1e 	bl	800054c <copyText>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a78      	ldr	r2, [pc, #480]	; (8003cf4 <loadMenuTexts+0x424>)
 8003b14:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003b16:	4878      	ldr	r0, [pc, #480]	; (8003cf8 <loadMenuTexts+0x428>)
 8003b18:	f7fc fd18 	bl	800054c <copyText>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a77      	ldr	r2, [pc, #476]	; (8003cfc <loadMenuTexts+0x42c>)
 8003b20:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003b22:	4877      	ldr	r0, [pc, #476]	; (8003d00 <loadMenuTexts+0x430>)
 8003b24:	f7fc fd12 	bl	800054c <copyText>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <loadMenuTexts+0x434>)
 8003b2c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003b2e:	4876      	ldr	r0, [pc, #472]	; (8003d08 <loadMenuTexts+0x438>)
 8003b30:	f7fc fd0c 	bl	800054c <copyText>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a75      	ldr	r2, [pc, #468]	; (8003d0c <loadMenuTexts+0x43c>)
 8003b38:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003b3a:	4875      	ldr	r0, [pc, #468]	; (8003d10 <loadMenuTexts+0x440>)
 8003b3c:	f7fc fd06 	bl	800054c <copyText>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4a74      	ldr	r2, [pc, #464]	; (8003d14 <loadMenuTexts+0x444>)
 8003b44:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003b46:	4874      	ldr	r0, [pc, #464]	; (8003d18 <loadMenuTexts+0x448>)
 8003b48:	f7fc fd00 	bl	800054c <copyText>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a73      	ldr	r2, [pc, #460]	; (8003d1c <loadMenuTexts+0x44c>)
 8003b50:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003b52:	4873      	ldr	r0, [pc, #460]	; (8003d20 <loadMenuTexts+0x450>)
 8003b54:	f7fc fcfa 	bl	800054c <copyText>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <loadMenuTexts+0x454>)
 8003b5c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003b5e:	4872      	ldr	r0, [pc, #456]	; (8003d28 <loadMenuTexts+0x458>)
 8003b60:	f7fc fcf4 	bl	800054c <copyText>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a71      	ldr	r2, [pc, #452]	; (8003d2c <loadMenuTexts+0x45c>)
 8003b68:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003b6a:	4871      	ldr	r0, [pc, #452]	; (8003d30 <loadMenuTexts+0x460>)
 8003b6c:	f7fc fcee 	bl	800054c <copyText>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a70      	ldr	r2, [pc, #448]	; (8003d34 <loadMenuTexts+0x464>)
 8003b74:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003b76:	4870      	ldr	r0, [pc, #448]	; (8003d38 <loadMenuTexts+0x468>)
 8003b78:	f7fc fce8 	bl	800054c <copyText>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	e0dd      	b.n	8003d3c <loadMenuTexts+0x46c>
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000ce4 	.word	0x20000ce4
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	20000ce8 	.word	0x20000ce8
 8003b90:	20000020 	.word	0x20000020
 8003b94:	20000d40 	.word	0x20000d40
 8003b98:	20000030 	.word	0x20000030
 8003b9c:	20000d70 	.word	0x20000d70
 8003ba0:	20000040 	.word	0x20000040
 8003ba4:	20000d78 	.word	0x20000d78
 8003ba8:	20000050 	.word	0x20000050
 8003bac:	20000df0 	.word	0x20000df0
 8003bb0:	20000060 	.word	0x20000060
 8003bb4:	20000df4 	.word	0x20000df4
 8003bb8:	20000070 	.word	0x20000070
 8003bbc:	20000cec 	.word	0x20000cec
 8003bc0:	20000080 	.word	0x20000080
 8003bc4:	20000cf0 	.word	0x20000cf0
 8003bc8:	20000090 	.word	0x20000090
 8003bcc:	20000cf4 	.word	0x20000cf4
 8003bd0:	200000a0 	.word	0x200000a0
 8003bd4:	20000cf8 	.word	0x20000cf8
 8003bd8:	200000b0 	.word	0x200000b0
 8003bdc:	20000cfc 	.word	0x20000cfc
 8003be0:	200000c0 	.word	0x200000c0
 8003be4:	20000d00 	.word	0x20000d00
 8003be8:	200000d0 	.word	0x200000d0
 8003bec:	20000d04 	.word	0x20000d04
 8003bf0:	200000e0 	.word	0x200000e0
 8003bf4:	20000d08 	.word	0x20000d08
 8003bf8:	200000f0 	.word	0x200000f0
 8003bfc:	20000d0c 	.word	0x20000d0c
 8003c00:	20000100 	.word	0x20000100
 8003c04:	20000d10 	.word	0x20000d10
 8003c08:	20000110 	.word	0x20000110
 8003c0c:	20000d14 	.word	0x20000d14
 8003c10:	20000120 	.word	0x20000120
 8003c14:	20000d18 	.word	0x20000d18
 8003c18:	20000130 	.word	0x20000130
 8003c1c:	20000d1c 	.word	0x20000d1c
 8003c20:	20000140 	.word	0x20000140
 8003c24:	20000d20 	.word	0x20000d20
 8003c28:	20000150 	.word	0x20000150
 8003c2c:	20000d24 	.word	0x20000d24
 8003c30:	20000160 	.word	0x20000160
 8003c34:	20000d28 	.word	0x20000d28
 8003c38:	20000170 	.word	0x20000170
 8003c3c:	20000d2c 	.word	0x20000d2c
 8003c40:	20000180 	.word	0x20000180
 8003c44:	20000d30 	.word	0x20000d30
 8003c48:	20000190 	.word	0x20000190
 8003c4c:	20000d34 	.word	0x20000d34
 8003c50:	200001a0 	.word	0x200001a0
 8003c54:	20000d38 	.word	0x20000d38
 8003c58:	200001b0 	.word	0x200001b0
 8003c5c:	20000d3c 	.word	0x20000d3c
 8003c60:	200001c0 	.word	0x200001c0
 8003c64:	20000d44 	.word	0x20000d44
 8003c68:	200001d0 	.word	0x200001d0
 8003c6c:	20000d48 	.word	0x20000d48
 8003c70:	200001e0 	.word	0x200001e0
 8003c74:	20000d4c 	.word	0x20000d4c
 8003c78:	200001f0 	.word	0x200001f0
 8003c7c:	20000d50 	.word	0x20000d50
 8003c80:	20000200 	.word	0x20000200
 8003c84:	20000d54 	.word	0x20000d54
 8003c88:	20000210 	.word	0x20000210
 8003c8c:	20000d58 	.word	0x20000d58
 8003c90:	20000220 	.word	0x20000220
 8003c94:	20000d5c 	.word	0x20000d5c
 8003c98:	20000230 	.word	0x20000230
 8003c9c:	20000d60 	.word	0x20000d60
 8003ca0:	20000240 	.word	0x20000240
 8003ca4:	20000d64 	.word	0x20000d64
 8003ca8:	20000250 	.word	0x20000250
 8003cac:	20000d68 	.word	0x20000d68
 8003cb0:	20000260 	.word	0x20000260
 8003cb4:	20000d6c 	.word	0x20000d6c
 8003cb8:	20000270 	.word	0x20000270
 8003cbc:	20000d74 	.word	0x20000d74
 8003cc0:	20000280 	.word	0x20000280
 8003cc4:	20000d7c 	.word	0x20000d7c
 8003cc8:	20000290 	.word	0x20000290
 8003ccc:	20000d80 	.word	0x20000d80
 8003cd0:	200002a0 	.word	0x200002a0
 8003cd4:	20000d84 	.word	0x20000d84
 8003cd8:	200002b0 	.word	0x200002b0
 8003cdc:	20000d88 	.word	0x20000d88
 8003ce0:	200002c0 	.word	0x200002c0
 8003ce4:	20000d8c 	.word	0x20000d8c
 8003ce8:	200002d0 	.word	0x200002d0
 8003cec:	20000d90 	.word	0x20000d90
 8003cf0:	200002e0 	.word	0x200002e0
 8003cf4:	20000d94 	.word	0x20000d94
 8003cf8:	200002f0 	.word	0x200002f0
 8003cfc:	20000d98 	.word	0x20000d98
 8003d00:	20000300 	.word	0x20000300
 8003d04:	20000d9c 	.word	0x20000d9c
 8003d08:	20000310 	.word	0x20000310
 8003d0c:	20000da0 	.word	0x20000da0
 8003d10:	20000320 	.word	0x20000320
 8003d14:	20000da4 	.word	0x20000da4
 8003d18:	20000330 	.word	0x20000330
 8003d1c:	20000da8 	.word	0x20000da8
 8003d20:	20000340 	.word	0x20000340
 8003d24:	20000dac 	.word	0x20000dac
 8003d28:	20000350 	.word	0x20000350
 8003d2c:	20000db0 	.word	0x20000db0
 8003d30:	20000360 	.word	0x20000360
 8003d34:	20000db4 	.word	0x20000db4
 8003d38:	20000370 	.word	0x20000370
 8003d3c:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <loadMenuTexts+0x564>)
 8003d3e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003d40:	483d      	ldr	r0, [pc, #244]	; (8003e38 <loadMenuTexts+0x568>)
 8003d42:	f7fc fc03 	bl	800054c <copyText>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <loadMenuTexts+0x56c>)
 8003d4a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003d4c:	483c      	ldr	r0, [pc, #240]	; (8003e40 <loadMenuTexts+0x570>)
 8003d4e:	f7fc fbfd 	bl	800054c <copyText>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <loadMenuTexts+0x574>)
 8003d56:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003d58:	483b      	ldr	r0, [pc, #236]	; (8003e48 <loadMenuTexts+0x578>)
 8003d5a:	f7fc fbf7 	bl	800054c <copyText>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <loadMenuTexts+0x57c>)
 8003d62:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003d64:	483a      	ldr	r0, [pc, #232]	; (8003e50 <loadMenuTexts+0x580>)
 8003d66:	f7fc fbf1 	bl	800054c <copyText>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <loadMenuTexts+0x584>)
 8003d6e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003d70:	4839      	ldr	r0, [pc, #228]	; (8003e58 <loadMenuTexts+0x588>)
 8003d72:	f7fc fbeb 	bl	800054c <copyText>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <loadMenuTexts+0x58c>)
 8003d7a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003d7c:	4838      	ldr	r0, [pc, #224]	; (8003e60 <loadMenuTexts+0x590>)
 8003d7e:	f7fc fbe5 	bl	800054c <copyText>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <loadMenuTexts+0x594>)
 8003d86:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003d88:	4837      	ldr	r0, [pc, #220]	; (8003e68 <loadMenuTexts+0x598>)
 8003d8a:	f7fc fbdf 	bl	800054c <copyText>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <loadMenuTexts+0x59c>)
 8003d92:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003d94:	4836      	ldr	r0, [pc, #216]	; (8003e70 <loadMenuTexts+0x5a0>)
 8003d96:	f7fc fbd9 	bl	800054c <copyText>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a35      	ldr	r2, [pc, #212]	; (8003e74 <loadMenuTexts+0x5a4>)
 8003d9e:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003da0:	4835      	ldr	r0, [pc, #212]	; (8003e78 <loadMenuTexts+0x5a8>)
 8003da2:	f7fc fbd3 	bl	800054c <copyText>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <loadMenuTexts+0x5ac>)
 8003daa:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003dac:	4834      	ldr	r0, [pc, #208]	; (8003e80 <loadMenuTexts+0x5b0>)
 8003dae:	f7fc fbcd 	bl	800054c <copyText>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <loadMenuTexts+0x5b4>)
 8003db6:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003db8:	4833      	ldr	r0, [pc, #204]	; (8003e88 <loadMenuTexts+0x5b8>)
 8003dba:	f7fc fbc7 	bl	800054c <copyText>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <loadMenuTexts+0x5bc>)
 8003dc2:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003dc4:	4832      	ldr	r0, [pc, #200]	; (8003e90 <loadMenuTexts+0x5c0>)
 8003dc6:	f7fc fbc1 	bl	800054c <copyText>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <loadMenuTexts+0x5c4>)
 8003dce:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003dd0:	4831      	ldr	r0, [pc, #196]	; (8003e98 <loadMenuTexts+0x5c8>)
 8003dd2:	f7fc fbbb 	bl	800054c <copyText>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <loadMenuTexts+0x5cc>)
 8003dda:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003ddc:	4830      	ldr	r0, [pc, #192]	; (8003ea0 <loadMenuTexts+0x5d0>)
 8003dde:	f7fc fbb5 	bl	800054c <copyText>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4a2f      	ldr	r2, [pc, #188]	; (8003ea4 <loadMenuTexts+0x5d4>)
 8003de6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003de8:	482f      	ldr	r0, [pc, #188]	; (8003ea8 <loadMenuTexts+0x5d8>)
 8003dea:	f7fc fbaf 	bl	800054c <copyText>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <loadMenuTexts+0x5dc>)
 8003df2:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003df4:	482e      	ldr	r0, [pc, #184]	; (8003eb0 <loadMenuTexts+0x5e0>)
 8003df6:	f7fc fba9 	bl	800054c <copyText>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <loadMenuTexts+0x5e4>)
 8003dfe:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003e00:	482d      	ldr	r0, [pc, #180]	; (8003eb8 <loadMenuTexts+0x5e8>)
 8003e02:	f7fc fba3 	bl	800054c <copyText>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <loadMenuTexts+0x5ec>)
 8003e0a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003e0c:	482c      	ldr	r0, [pc, #176]	; (8003ec0 <loadMenuTexts+0x5f0>)
 8003e0e:	f7fc fb9d 	bl	800054c <copyText>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <loadMenuTexts+0x5f4>)
 8003e16:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003e18:	482b      	ldr	r0, [pc, #172]	; (8003ec8 <loadMenuTexts+0x5f8>)
 8003e1a:	f7fc fb97 	bl	800054c <copyText>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <loadMenuTexts+0x5fc>)
 8003e22:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003e24:	482a      	ldr	r0, [pc, #168]	; (8003ed0 <loadMenuTexts+0x600>)
 8003e26:	f7fc fb91 	bl	800054c <copyText>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <loadMenuTexts+0x604>)
 8003e2e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003e30:	e2d3      	b.n	80043da <loadMenuTexts+0xb0a>
 8003e32:	bf00      	nop
 8003e34:	20000db8 	.word	0x20000db8
 8003e38:	20000380 	.word	0x20000380
 8003e3c:	20000dbc 	.word	0x20000dbc
 8003e40:	20000390 	.word	0x20000390
 8003e44:	20000dc0 	.word	0x20000dc0
 8003e48:	200003a0 	.word	0x200003a0
 8003e4c:	20000dc4 	.word	0x20000dc4
 8003e50:	200003b0 	.word	0x200003b0
 8003e54:	20000dc8 	.word	0x20000dc8
 8003e58:	200003c0 	.word	0x200003c0
 8003e5c:	20000dcc 	.word	0x20000dcc
 8003e60:	200003d0 	.word	0x200003d0
 8003e64:	20000dd0 	.word	0x20000dd0
 8003e68:	200003e0 	.word	0x200003e0
 8003e6c:	20000dd4 	.word	0x20000dd4
 8003e70:	200003f0 	.word	0x200003f0
 8003e74:	20000dd8 	.word	0x20000dd8
 8003e78:	20000400 	.word	0x20000400
 8003e7c:	20000ddc 	.word	0x20000ddc
 8003e80:	20000410 	.word	0x20000410
 8003e84:	20000de0 	.word	0x20000de0
 8003e88:	20000420 	.word	0x20000420
 8003e8c:	20000de4 	.word	0x20000de4
 8003e90:	20000430 	.word	0x20000430
 8003e94:	20000de8 	.word	0x20000de8
 8003e98:	20000440 	.word	0x20000440
 8003e9c:	20000dec 	.word	0x20000dec
 8003ea0:	20000450 	.word	0x20000450
 8003ea4:	20000df8 	.word	0x20000df8
 8003ea8:	20000460 	.word	0x20000460
 8003eac:	20000dfc 	.word	0x20000dfc
 8003eb0:	20000470 	.word	0x20000470
 8003eb4:	20000e00 	.word	0x20000e00
 8003eb8:	20000480 	.word	0x20000480
 8003ebc:	20000e04 	.word	0x20000e04
 8003ec0:	20000490 	.word	0x20000490
 8003ec4:	20000e08 	.word	0x20000e08
 8003ec8:	200004a0 	.word	0x200004a0
 8003ecc:	20000e0c 	.word	0x20000e0c
 8003ed0:	200004b0 	.word	0x200004b0
 8003ed4:	20000e10 	.word	0x20000e10
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003ed8:	48a9      	ldr	r0, [pc, #676]	; (8004180 <loadMenuTexts+0x8b0>)
 8003eda:	f7fc fb37 	bl	800054c <copyText>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4aa8      	ldr	r2, [pc, #672]	; (8004184 <loadMenuTexts+0x8b4>)
 8003ee2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003ee4:	48a8      	ldr	r0, [pc, #672]	; (8004188 <loadMenuTexts+0x8b8>)
 8003ee6:	f7fc fb31 	bl	800054c <copyText>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4aa7      	ldr	r2, [pc, #668]	; (800418c <loadMenuTexts+0x8bc>)
 8003eee:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003ef0:	48a7      	ldr	r0, [pc, #668]	; (8004190 <loadMenuTexts+0x8c0>)
 8003ef2:	f7fc fb2b 	bl	800054c <copyText>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4aa6      	ldr	r2, [pc, #664]	; (8004194 <loadMenuTexts+0x8c4>)
 8003efa:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003efc:	48a6      	ldr	r0, [pc, #664]	; (8004198 <loadMenuTexts+0x8c8>)
 8003efe:	f7fc fb25 	bl	800054c <copyText>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4aa5      	ldr	r2, [pc, #660]	; (800419c <loadMenuTexts+0x8cc>)
 8003f06:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003f08:	48a5      	ldr	r0, [pc, #660]	; (80041a0 <loadMenuTexts+0x8d0>)
 8003f0a:	f7fc fb1f 	bl	800054c <copyText>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4aa4      	ldr	r2, [pc, #656]	; (80041a4 <loadMenuTexts+0x8d4>)
 8003f12:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003f14:	48a4      	ldr	r0, [pc, #656]	; (80041a8 <loadMenuTexts+0x8d8>)
 8003f16:	f7fc fb19 	bl	800054c <copyText>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4aa3      	ldr	r2, [pc, #652]	; (80041ac <loadMenuTexts+0x8dc>)
 8003f1e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003f20:	48a3      	ldr	r0, [pc, #652]	; (80041b0 <loadMenuTexts+0x8e0>)
 8003f22:	f7fc fb13 	bl	800054c <copyText>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4aa2      	ldr	r2, [pc, #648]	; (80041b4 <loadMenuTexts+0x8e4>)
 8003f2a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003f2c:	48a2      	ldr	r0, [pc, #648]	; (80041b8 <loadMenuTexts+0x8e8>)
 8003f2e:	f7fc fb0d 	bl	800054c <copyText>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4aa1      	ldr	r2, [pc, #644]	; (80041bc <loadMenuTexts+0x8ec>)
 8003f36:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003f38:	48a1      	ldr	r0, [pc, #644]	; (80041c0 <loadMenuTexts+0x8f0>)
 8003f3a:	f7fc fb07 	bl	800054c <copyText>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4aa0      	ldr	r2, [pc, #640]	; (80041c4 <loadMenuTexts+0x8f4>)
 8003f42:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003f44:	48a0      	ldr	r0, [pc, #640]	; (80041c8 <loadMenuTexts+0x8f8>)
 8003f46:	f7fc fb01 	bl	800054c <copyText>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a9f      	ldr	r2, [pc, #636]	; (80041cc <loadMenuTexts+0x8fc>)
 8003f4e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003f50:	489f      	ldr	r0, [pc, #636]	; (80041d0 <loadMenuTexts+0x900>)
 8003f52:	f7fc fafb 	bl	800054c <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a9e      	ldr	r2, [pc, #632]	; (80041d4 <loadMenuTexts+0x904>)
 8003f5a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003f5c:	489e      	ldr	r0, [pc, #632]	; (80041d8 <loadMenuTexts+0x908>)
 8003f5e:	f7fc faf5 	bl	800054c <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a9d      	ldr	r2, [pc, #628]	; (80041dc <loadMenuTexts+0x90c>)
 8003f66:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003f68:	489d      	ldr	r0, [pc, #628]	; (80041e0 <loadMenuTexts+0x910>)
 8003f6a:	f7fc faef 	bl	800054c <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a9c      	ldr	r2, [pc, #624]	; (80041e4 <loadMenuTexts+0x914>)
 8003f72:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003f74:	489c      	ldr	r0, [pc, #624]	; (80041e8 <loadMenuTexts+0x918>)
 8003f76:	f7fc fae9 	bl	800054c <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a9b      	ldr	r2, [pc, #620]	; (80041ec <loadMenuTexts+0x91c>)
 8003f7e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003f80:	489b      	ldr	r0, [pc, #620]	; (80041f0 <loadMenuTexts+0x920>)
 8003f82:	f7fc fae3 	bl	800054c <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a9a      	ldr	r2, [pc, #616]	; (80041f4 <loadMenuTexts+0x924>)
 8003f8a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003f8c:	489a      	ldr	r0, [pc, #616]	; (80041f8 <loadMenuTexts+0x928>)
 8003f8e:	f7fc fadd 	bl	800054c <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a99      	ldr	r2, [pc, #612]	; (80041fc <loadMenuTexts+0x92c>)
 8003f96:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003f98:	4899      	ldr	r0, [pc, #612]	; (8004200 <loadMenuTexts+0x930>)
 8003f9a:	f7fc fad7 	bl	800054c <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a98      	ldr	r2, [pc, #608]	; (8004204 <loadMenuTexts+0x934>)
 8003fa2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003fa4:	4898      	ldr	r0, [pc, #608]	; (8004208 <loadMenuTexts+0x938>)
 8003fa6:	f7fc fad1 	bl	800054c <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a97      	ldr	r2, [pc, #604]	; (800420c <loadMenuTexts+0x93c>)
 8003fae:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003fb0:	4897      	ldr	r0, [pc, #604]	; (8004210 <loadMenuTexts+0x940>)
 8003fb2:	f7fc facb 	bl	800054c <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a96      	ldr	r2, [pc, #600]	; (8004214 <loadMenuTexts+0x944>)
 8003fba:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003fbc:	4896      	ldr	r0, [pc, #600]	; (8004218 <loadMenuTexts+0x948>)
 8003fbe:	f7fc fac5 	bl	800054c <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a95      	ldr	r2, [pc, #596]	; (800421c <loadMenuTexts+0x94c>)
 8003fc6:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003fc8:	4895      	ldr	r0, [pc, #596]	; (8004220 <loadMenuTexts+0x950>)
 8003fca:	f7fc fabf 	bl	800054c <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a94      	ldr	r2, [pc, #592]	; (8004224 <loadMenuTexts+0x954>)
 8003fd2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003fd4:	4894      	ldr	r0, [pc, #592]	; (8004228 <loadMenuTexts+0x958>)
 8003fd6:	f7fc fab9 	bl	800054c <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a93      	ldr	r2, [pc, #588]	; (800422c <loadMenuTexts+0x95c>)
 8003fde:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003fe0:	4893      	ldr	r0, [pc, #588]	; (8004230 <loadMenuTexts+0x960>)
 8003fe2:	f7fc fab3 	bl	800054c <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a92      	ldr	r2, [pc, #584]	; (8004234 <loadMenuTexts+0x964>)
 8003fea:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003fec:	4892      	ldr	r0, [pc, #584]	; (8004238 <loadMenuTexts+0x968>)
 8003fee:	f7fc faad 	bl	800054c <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a91      	ldr	r2, [pc, #580]	; (800423c <loadMenuTexts+0x96c>)
 8003ff6:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003ff8:	4891      	ldr	r0, [pc, #580]	; (8004240 <loadMenuTexts+0x970>)
 8003ffa:	f7fc faa7 	bl	800054c <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a90      	ldr	r2, [pc, #576]	; (8004244 <loadMenuTexts+0x974>)
 8004002:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8004004:	4890      	ldr	r0, [pc, #576]	; (8004248 <loadMenuTexts+0x978>)
 8004006:	f7fc faa1 	bl	800054c <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a8f      	ldr	r2, [pc, #572]	; (800424c <loadMenuTexts+0x97c>)
 800400e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004010:	488f      	ldr	r0, [pc, #572]	; (8004250 <loadMenuTexts+0x980>)
 8004012:	f7fc fa9b 	bl	800054c <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a8e      	ldr	r2, [pc, #568]	; (8004254 <loadMenuTexts+0x984>)
 800401a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 800401c:	488e      	ldr	r0, [pc, #568]	; (8004258 <loadMenuTexts+0x988>)
 800401e:	f7fc fa95 	bl	800054c <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a8d      	ldr	r2, [pc, #564]	; (800425c <loadMenuTexts+0x98c>)
 8004026:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004028:	488d      	ldr	r0, [pc, #564]	; (8004260 <loadMenuTexts+0x990>)
 800402a:	f7fc fa8f 	bl	800054c <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a8c      	ldr	r2, [pc, #560]	; (8004264 <loadMenuTexts+0x994>)
 8004032:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004034:	488c      	ldr	r0, [pc, #560]	; (8004268 <loadMenuTexts+0x998>)
 8004036:	f7fc fa89 	bl	800054c <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a8b      	ldr	r2, [pc, #556]	; (800426c <loadMenuTexts+0x99c>)
 800403e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004040:	488b      	ldr	r0, [pc, #556]	; (8004270 <loadMenuTexts+0x9a0>)
 8004042:	f7fc fa83 	bl	800054c <copyText>
 8004046:	4603      	mov	r3, r0
 8004048:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <loadMenuTexts+0x9a4>)
 800404a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 800404c:	488a      	ldr	r0, [pc, #552]	; (8004278 <loadMenuTexts+0x9a8>)
 800404e:	f7fc fa7d 	bl	800054c <copyText>
 8004052:	4603      	mov	r3, r0
 8004054:	4a89      	ldr	r2, [pc, #548]	; (800427c <loadMenuTexts+0x9ac>)
 8004056:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004058:	4889      	ldr	r0, [pc, #548]	; (8004280 <loadMenuTexts+0x9b0>)
 800405a:	f7fc fa77 	bl	800054c <copyText>
 800405e:	4603      	mov	r3, r0
 8004060:	4a88      	ldr	r2, [pc, #544]	; (8004284 <loadMenuTexts+0x9b4>)
 8004062:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004064:	4888      	ldr	r0, [pc, #544]	; (8004288 <loadMenuTexts+0x9b8>)
 8004066:	f7fc fa71 	bl	800054c <copyText>
 800406a:	4603      	mov	r3, r0
 800406c:	4a87      	ldr	r2, [pc, #540]	; (800428c <loadMenuTexts+0x9bc>)
 800406e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8004070:	4887      	ldr	r0, [pc, #540]	; (8004290 <loadMenuTexts+0x9c0>)
 8004072:	f7fc fa6b 	bl	800054c <copyText>
 8004076:	4603      	mov	r3, r0
 8004078:	4a86      	ldr	r2, [pc, #536]	; (8004294 <loadMenuTexts+0x9c4>)
 800407a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 800407c:	4886      	ldr	r0, [pc, #536]	; (8004298 <loadMenuTexts+0x9c8>)
 800407e:	f7fc fa65 	bl	800054c <copyText>
 8004082:	4603      	mov	r3, r0
 8004084:	4a85      	ldr	r2, [pc, #532]	; (800429c <loadMenuTexts+0x9cc>)
 8004086:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004088:	4885      	ldr	r0, [pc, #532]	; (80042a0 <loadMenuTexts+0x9d0>)
 800408a:	f7fc fa5f 	bl	800054c <copyText>
 800408e:	4603      	mov	r3, r0
 8004090:	4a84      	ldr	r2, [pc, #528]	; (80042a4 <loadMenuTexts+0x9d4>)
 8004092:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004094:	4884      	ldr	r0, [pc, #528]	; (80042a8 <loadMenuTexts+0x9d8>)
 8004096:	f7fc fa59 	bl	800054c <copyText>
 800409a:	4603      	mov	r3, r0
 800409c:	4a83      	ldr	r2, [pc, #524]	; (80042ac <loadMenuTexts+0x9dc>)
 800409e:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80040a0:	4883      	ldr	r0, [pc, #524]	; (80042b0 <loadMenuTexts+0x9e0>)
 80040a2:	f7fc fa53 	bl	800054c <copyText>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a82      	ldr	r2, [pc, #520]	; (80042b4 <loadMenuTexts+0x9e4>)
 80040aa:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80040ac:	4882      	ldr	r0, [pc, #520]	; (80042b8 <loadMenuTexts+0x9e8>)
 80040ae:	f7fc fa4d 	bl	800054c <copyText>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a81      	ldr	r2, [pc, #516]	; (80042bc <loadMenuTexts+0x9ec>)
 80040b6:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80040b8:	4881      	ldr	r0, [pc, #516]	; (80042c0 <loadMenuTexts+0x9f0>)
 80040ba:	f7fc fa47 	bl	800054c <copyText>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a80      	ldr	r2, [pc, #512]	; (80042c4 <loadMenuTexts+0x9f4>)
 80040c2:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80040c4:	4880      	ldr	r0, [pc, #512]	; (80042c8 <loadMenuTexts+0x9f8>)
 80040c6:	f7fc fa41 	bl	800054c <copyText>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <loadMenuTexts+0x9fc>)
 80040ce:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80040d0:	487f      	ldr	r0, [pc, #508]	; (80042d0 <loadMenuTexts+0xa00>)
 80040d2:	f7fc fa3b 	bl	800054c <copyText>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <loadMenuTexts+0xa04>)
 80040da:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80040dc:	487e      	ldr	r0, [pc, #504]	; (80042d8 <loadMenuTexts+0xa08>)
 80040de:	f7fc fa35 	bl	800054c <copyText>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a7d      	ldr	r2, [pc, #500]	; (80042dc <loadMenuTexts+0xa0c>)
 80040e6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80040e8:	487d      	ldr	r0, [pc, #500]	; (80042e0 <loadMenuTexts+0xa10>)
 80040ea:	f7fc fa2f 	bl	800054c <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a7c      	ldr	r2, [pc, #496]	; (80042e4 <loadMenuTexts+0xa14>)
 80040f2:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80040f4:	487c      	ldr	r0, [pc, #496]	; (80042e8 <loadMenuTexts+0xa18>)
 80040f6:	f7fc fa29 	bl	800054c <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a7b      	ldr	r2, [pc, #492]	; (80042ec <loadMenuTexts+0xa1c>)
 80040fe:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004100:	487b      	ldr	r0, [pc, #492]	; (80042f0 <loadMenuTexts+0xa20>)
 8004102:	f7fc fa23 	bl	800054c <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4a7a      	ldr	r2, [pc, #488]	; (80042f4 <loadMenuTexts+0xa24>)
 800410a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800410c:	487a      	ldr	r0, [pc, #488]	; (80042f8 <loadMenuTexts+0xa28>)
 800410e:	f7fc fa1d 	bl	800054c <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4a79      	ldr	r2, [pc, #484]	; (80042fc <loadMenuTexts+0xa2c>)
 8004116:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004118:	4879      	ldr	r0, [pc, #484]	; (8004300 <loadMenuTexts+0xa30>)
 800411a:	f7fc fa17 	bl	800054c <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4a78      	ldr	r2, [pc, #480]	; (8004304 <loadMenuTexts+0xa34>)
 8004122:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004124:	4878      	ldr	r0, [pc, #480]	; (8004308 <loadMenuTexts+0xa38>)
 8004126:	f7fc fa11 	bl	800054c <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4a77      	ldr	r2, [pc, #476]	; (800430c <loadMenuTexts+0xa3c>)
 800412e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004130:	4877      	ldr	r0, [pc, #476]	; (8004310 <loadMenuTexts+0xa40>)
 8004132:	f7fc fa0b 	bl	800054c <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4a76      	ldr	r2, [pc, #472]	; (8004314 <loadMenuTexts+0xa44>)
 800413a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800413c:	4876      	ldr	r0, [pc, #472]	; (8004318 <loadMenuTexts+0xa48>)
 800413e:	f7fc fa05 	bl	800054c <copyText>
 8004142:	4603      	mov	r3, r0
 8004144:	4a75      	ldr	r2, [pc, #468]	; (800431c <loadMenuTexts+0xa4c>)
 8004146:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004148:	4875      	ldr	r0, [pc, #468]	; (8004320 <loadMenuTexts+0xa50>)
 800414a:	f7fc f9ff 	bl	800054c <copyText>
 800414e:	4603      	mov	r3, r0
 8004150:	4a74      	ldr	r2, [pc, #464]	; (8004324 <loadMenuTexts+0xa54>)
 8004152:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004154:	4874      	ldr	r0, [pc, #464]	; (8004328 <loadMenuTexts+0xa58>)
 8004156:	f7fc f9f9 	bl	800054c <copyText>
 800415a:	4603      	mov	r3, r0
 800415c:	4a73      	ldr	r2, [pc, #460]	; (800432c <loadMenuTexts+0xa5c>)
 800415e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004160:	4873      	ldr	r0, [pc, #460]	; (8004330 <loadMenuTexts+0xa60>)
 8004162:	f7fc f9f3 	bl	800054c <copyText>
 8004166:	4603      	mov	r3, r0
 8004168:	4a72      	ldr	r2, [pc, #456]	; (8004334 <loadMenuTexts+0xa64>)
 800416a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800416c:	4872      	ldr	r0, [pc, #456]	; (8004338 <loadMenuTexts+0xa68>)
 800416e:	f7fc f9ed 	bl	800054c <copyText>
 8004172:	4603      	mov	r3, r0
 8004174:	4a71      	ldr	r2, [pc, #452]	; (800433c <loadMenuTexts+0xa6c>)
 8004176:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004178:	4871      	ldr	r0, [pc, #452]	; (8004340 <loadMenuTexts+0xa70>)
 800417a:	f7fc f9e7 	bl	800054c <copyText>
 800417e:	e0e1      	b.n	8004344 <loadMenuTexts+0xa74>
 8004180:	200004c0 	.word	0x200004c0
 8004184:	20000cec 	.word	0x20000cec
 8004188:	200004d0 	.word	0x200004d0
 800418c:	20000cf0 	.word	0x20000cf0
 8004190:	200004e0 	.word	0x200004e0
 8004194:	20000cf4 	.word	0x20000cf4
 8004198:	200004f0 	.word	0x200004f0
 800419c:	20000cf8 	.word	0x20000cf8
 80041a0:	20000500 	.word	0x20000500
 80041a4:	20000cfc 	.word	0x20000cfc
 80041a8:	20000510 	.word	0x20000510
 80041ac:	20000d00 	.word	0x20000d00
 80041b0:	20000520 	.word	0x20000520
 80041b4:	20000d04 	.word	0x20000d04
 80041b8:	20000530 	.word	0x20000530
 80041bc:	20000d08 	.word	0x20000d08
 80041c0:	20000540 	.word	0x20000540
 80041c4:	20000d0c 	.word	0x20000d0c
 80041c8:	20000550 	.word	0x20000550
 80041cc:	20000d10 	.word	0x20000d10
 80041d0:	20000560 	.word	0x20000560
 80041d4:	20000d14 	.word	0x20000d14
 80041d8:	20000570 	.word	0x20000570
 80041dc:	20000d18 	.word	0x20000d18
 80041e0:	20000580 	.word	0x20000580
 80041e4:	20000d1c 	.word	0x20000d1c
 80041e8:	20000590 	.word	0x20000590
 80041ec:	20000d20 	.word	0x20000d20
 80041f0:	200005a0 	.word	0x200005a0
 80041f4:	20000d24 	.word	0x20000d24
 80041f8:	200005b0 	.word	0x200005b0
 80041fc:	20000d28 	.word	0x20000d28
 8004200:	200005c0 	.word	0x200005c0
 8004204:	20000d2c 	.word	0x20000d2c
 8004208:	200005d0 	.word	0x200005d0
 800420c:	20000d30 	.word	0x20000d30
 8004210:	200005e0 	.word	0x200005e0
 8004214:	20000d34 	.word	0x20000d34
 8004218:	200005f0 	.word	0x200005f0
 800421c:	20000d38 	.word	0x20000d38
 8004220:	20000600 	.word	0x20000600
 8004224:	20000d3c 	.word	0x20000d3c
 8004228:	20000610 	.word	0x20000610
 800422c:	20000d44 	.word	0x20000d44
 8004230:	20000620 	.word	0x20000620
 8004234:	20000d48 	.word	0x20000d48
 8004238:	20000630 	.word	0x20000630
 800423c:	20000d4c 	.word	0x20000d4c
 8004240:	20000640 	.word	0x20000640
 8004244:	20000d50 	.word	0x20000d50
 8004248:	20000650 	.word	0x20000650
 800424c:	20000d54 	.word	0x20000d54
 8004250:	20000660 	.word	0x20000660
 8004254:	20000d58 	.word	0x20000d58
 8004258:	20000670 	.word	0x20000670
 800425c:	20000d5c 	.word	0x20000d5c
 8004260:	20000680 	.word	0x20000680
 8004264:	20000d60 	.word	0x20000d60
 8004268:	20000690 	.word	0x20000690
 800426c:	20000d64 	.word	0x20000d64
 8004270:	200006a0 	.word	0x200006a0
 8004274:	20000d68 	.word	0x20000d68
 8004278:	200006b0 	.word	0x200006b0
 800427c:	20000d6c 	.word	0x20000d6c
 8004280:	200006c0 	.word	0x200006c0
 8004284:	20000d74 	.word	0x20000d74
 8004288:	200006d0 	.word	0x200006d0
 800428c:	20000d7c 	.word	0x20000d7c
 8004290:	200006e0 	.word	0x200006e0
 8004294:	20000d80 	.word	0x20000d80
 8004298:	200006f0 	.word	0x200006f0
 800429c:	20000d84 	.word	0x20000d84
 80042a0:	20000700 	.word	0x20000700
 80042a4:	20000d88 	.word	0x20000d88
 80042a8:	20000710 	.word	0x20000710
 80042ac:	20000d8c 	.word	0x20000d8c
 80042b0:	20000720 	.word	0x20000720
 80042b4:	20000d90 	.word	0x20000d90
 80042b8:	20000730 	.word	0x20000730
 80042bc:	20000d94 	.word	0x20000d94
 80042c0:	20000740 	.word	0x20000740
 80042c4:	20000d98 	.word	0x20000d98
 80042c8:	20000750 	.word	0x20000750
 80042cc:	20000d9c 	.word	0x20000d9c
 80042d0:	20000760 	.word	0x20000760
 80042d4:	20000da0 	.word	0x20000da0
 80042d8:	20000770 	.word	0x20000770
 80042dc:	20000da4 	.word	0x20000da4
 80042e0:	20000780 	.word	0x20000780
 80042e4:	20000da8 	.word	0x20000da8
 80042e8:	20000790 	.word	0x20000790
 80042ec:	20000dac 	.word	0x20000dac
 80042f0:	200007a0 	.word	0x200007a0
 80042f4:	20000db0 	.word	0x20000db0
 80042f8:	200007b0 	.word	0x200007b0
 80042fc:	20000db4 	.word	0x20000db4
 8004300:	200007c0 	.word	0x200007c0
 8004304:	20000db8 	.word	0x20000db8
 8004308:	200007d0 	.word	0x200007d0
 800430c:	20000dbc 	.word	0x20000dbc
 8004310:	200007e0 	.word	0x200007e0
 8004314:	20000dc0 	.word	0x20000dc0
 8004318:	200007f0 	.word	0x200007f0
 800431c:	20000dc4 	.word	0x20000dc4
 8004320:	20000800 	.word	0x20000800
 8004324:	20000dc8 	.word	0x20000dc8
 8004328:	20000810 	.word	0x20000810
 800432c:	20000dcc 	.word	0x20000dcc
 8004330:	20000820 	.word	0x20000820
 8004334:	20000dd0 	.word	0x20000dd0
 8004338:	20000830 	.word	0x20000830
 800433c:	20000dd4 	.word	0x20000dd4
 8004340:	20000840 	.word	0x20000840
 8004344:	4603      	mov	r3, r0
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <loadMenuTexts+0xb14>)
 8004348:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800434a:	4827      	ldr	r0, [pc, #156]	; (80043e8 <loadMenuTexts+0xb18>)
 800434c:	f7fc f8fe 	bl	800054c <copyText>
 8004350:	4603      	mov	r3, r0
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <loadMenuTexts+0xb1c>)
 8004354:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004356:	4826      	ldr	r0, [pc, #152]	; (80043f0 <loadMenuTexts+0xb20>)
 8004358:	f7fc f8f8 	bl	800054c <copyText>
 800435c:	4603      	mov	r3, r0
 800435e:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <loadMenuTexts+0xb24>)
 8004360:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004362:	4825      	ldr	r0, [pc, #148]	; (80043f8 <loadMenuTexts+0xb28>)
 8004364:	f7fc f8f2 	bl	800054c <copyText>
 8004368:	4603      	mov	r3, r0
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <loadMenuTexts+0xb2c>)
 800436c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800436e:	4824      	ldr	r0, [pc, #144]	; (8004400 <loadMenuTexts+0xb30>)
 8004370:	f7fc f8ec 	bl	800054c <copyText>
 8004374:	4603      	mov	r3, r0
 8004376:	4a23      	ldr	r2, [pc, #140]	; (8004404 <loadMenuTexts+0xb34>)
 8004378:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800437a:	4823      	ldr	r0, [pc, #140]	; (8004408 <loadMenuTexts+0xb38>)
 800437c:	f7fc f8e6 	bl	800054c <copyText>
 8004380:	4603      	mov	r3, r0
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <loadMenuTexts+0xb3c>)
 8004384:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004386:	4822      	ldr	r0, [pc, #136]	; (8004410 <loadMenuTexts+0xb40>)
 8004388:	f7fc f8e0 	bl	800054c <copyText>
 800438c:	4603      	mov	r3, r0
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <loadMenuTexts+0xb44>)
 8004390:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8004392:	4821      	ldr	r0, [pc, #132]	; (8004418 <loadMenuTexts+0xb48>)
 8004394:	f7fc f8da 	bl	800054c <copyText>
 8004398:	4603      	mov	r3, r0
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <loadMenuTexts+0xb4c>)
 800439c:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800439e:	4820      	ldr	r0, [pc, #128]	; (8004420 <loadMenuTexts+0xb50>)
 80043a0:	f7fc f8d4 	bl	800054c <copyText>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <loadMenuTexts+0xb54>)
 80043a8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80043aa:	481f      	ldr	r0, [pc, #124]	; (8004428 <loadMenuTexts+0xb58>)
 80043ac:	f7fc f8ce 	bl	800054c <copyText>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <loadMenuTexts+0xb5c>)
 80043b4:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80043b6:	481e      	ldr	r0, [pc, #120]	; (8004430 <loadMenuTexts+0xb60>)
 80043b8:	f7fc f8c8 	bl	800054c <copyText>
 80043bc:	4603      	mov	r3, r0
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <loadMenuTexts+0xb64>)
 80043c0:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80043c2:	481d      	ldr	r0, [pc, #116]	; (8004438 <loadMenuTexts+0xb68>)
 80043c4:	f7fc f8c2 	bl	800054c <copyText>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <loadMenuTexts+0xb6c>)
 80043cc:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80043ce:	481c      	ldr	r0, [pc, #112]	; (8004440 <loadMenuTexts+0xb70>)
 80043d0:	f7fc f8bc 	bl	800054c <copyText>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <loadMenuTexts+0xb74>)
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000dd8 	.word	0x20000dd8
 80043e8:	20000850 	.word	0x20000850
 80043ec:	20000ddc 	.word	0x20000ddc
 80043f0:	20000860 	.word	0x20000860
 80043f4:	20000de0 	.word	0x20000de0
 80043f8:	20000870 	.word	0x20000870
 80043fc:	20000de4 	.word	0x20000de4
 8004400:	20000880 	.word	0x20000880
 8004404:	20000de8 	.word	0x20000de8
 8004408:	20000890 	.word	0x20000890
 800440c:	20000dec 	.word	0x20000dec
 8004410:	200008a0 	.word	0x200008a0
 8004414:	20000df8 	.word	0x20000df8
 8004418:	200008b0 	.word	0x200008b0
 800441c:	20000dfc 	.word	0x20000dfc
 8004420:	200008c0 	.word	0x200008c0
 8004424:	20000e00 	.word	0x20000e00
 8004428:	200008d0 	.word	0x200008d0
 800442c:	20000e04 	.word	0x20000e04
 8004430:	200008e0 	.word	0x200008e0
 8004434:	20000e08 	.word	0x20000e08
 8004438:	200008f0 	.word	0x200008f0
 800443c:	20000e0c 	.word	0x20000e0c
 8004440:	20000900 	.word	0x20000900
 8004444:	20000e10 	.word	0x20000e10

08004448 <bekle>:
void hataKoduLcdGoster(uint8_t);
void eepromKontrol(void);
void hata2EEPROM(uint8_t);
void eepromDataFillWithEmpty(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
	timer1=millis;
 800444c:	4b47      	ldr	r3, [pc, #284]	; (800456c <bekle+0x124>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a47      	ldr	r2, [pc, #284]	; (8004570 <bekle+0x128>)
 8004452:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004454:	e002      	b.n	800445c <bekle+0x14>
    	butonKontrol = 1;
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <bekle+0x12c>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800445c:	2101      	movs	r1, #1
 800445e:	4846      	ldr	r0, [pc, #280]	; (8004578 <bekle+0x130>)
 8004460:	f003 ff06 	bl	8008270 <HAL_GPIO_ReadPin>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d109      	bne.n	800447e <bekle+0x36>
 800446a:	4b40      	ldr	r3, [pc, #256]	; (800456c <bekle+0x124>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b40      	ldr	r3, [pc, #256]	; (8004570 <bekle+0x128>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d0ef      	beq.n	8004456 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004476:	e002      	b.n	800447e <bekle+0x36>
    	butonKontrol = 1;
 8004478:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <bekle+0x12c>)
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800447e:	2108      	movs	r1, #8
 8004480:	483e      	ldr	r0, [pc, #248]	; (800457c <bekle+0x134>)
 8004482:	f003 fef5 	bl	8008270 <HAL_GPIO_ReadPin>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d109      	bne.n	80044a0 <bekle+0x58>
 800448c:	4b37      	ldr	r3, [pc, #220]	; (800456c <bekle+0x124>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b37      	ldr	r3, [pc, #220]	; (8004570 <bekle+0x128>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0ef      	beq.n	8004478 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004498:	e002      	b.n	80044a0 <bekle+0x58>
    	butonKontrol = 1;
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <bekle+0x12c>)
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044a0:	2102      	movs	r1, #2
 80044a2:	4835      	ldr	r0, [pc, #212]	; (8004578 <bekle+0x130>)
 80044a4:	f003 fee4 	bl	8008270 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d109      	bne.n	80044c2 <bekle+0x7a>
 80044ae:	4b2f      	ldr	r3, [pc, #188]	; (800456c <bekle+0x124>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <bekle+0x128>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d0ef      	beq.n	800449a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044ba:	e002      	b.n	80044c2 <bekle+0x7a>
    	butonKontrol = 1;
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <bekle+0x12c>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044c2:	2104      	movs	r1, #4
 80044c4:	482c      	ldr	r0, [pc, #176]	; (8004578 <bekle+0x130>)
 80044c6:	f003 fed3 	bl	8008270 <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d109      	bne.n	80044e4 <bekle+0x9c>
 80044d0:	4b26      	ldr	r3, [pc, #152]	; (800456c <bekle+0x124>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <bekle+0x128>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d0ef      	beq.n	80044bc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044dc:	e002      	b.n	80044e4 <bekle+0x9c>
    	butonKontrol = 1;
 80044de:	4b25      	ldr	r3, [pc, #148]	; (8004574 <bekle+0x12c>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044e4:	2108      	movs	r1, #8
 80044e6:	4824      	ldr	r0, [pc, #144]	; (8004578 <bekle+0x130>)
 80044e8:	f003 fec2 	bl	8008270 <HAL_GPIO_ReadPin>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d109      	bne.n	8004506 <bekle+0xbe>
 80044f2:	4b1e      	ldr	r3, [pc, #120]	; (800456c <bekle+0x124>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <bekle+0x128>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d0ef      	beq.n	80044de <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80044fe:	e002      	b.n	8004506 <bekle+0xbe>
    	butonKontrol = 1;
 8004500:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <bekle+0x12c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	481c      	ldr	r0, [pc, #112]	; (800457c <bekle+0x134>)
 800450a:	f003 feb1 	bl	8008270 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <bekle+0xe0>
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <bekle+0x124>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <bekle+0x128>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0ef      	beq.n	8004500 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004520:	e002      	b.n	8004528 <bekle+0xe0>
    	butonKontrol = 1;
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <bekle+0x12c>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800452c:	4813      	ldr	r0, [pc, #76]	; (800457c <bekle+0x134>)
 800452e:	f003 fe9f 	bl	8008270 <HAL_GPIO_ReadPin>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <bekle+0x104>
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <bekle+0x124>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <bekle+0x128>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d0ee      	beq.n	8004522 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004544:	e002      	b.n	800454c <bekle+0x104>
    	butonKontrol = 1;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <bekle+0x12c>)
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800454c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004550:	480a      	ldr	r0, [pc, #40]	; (800457c <bekle+0x134>)
 8004552:	f003 fe8d 	bl	8008270 <HAL_GPIO_ReadPin>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <bekle+0x120>
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <bekle+0x124>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <bekle+0x128>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d0ee      	beq.n	8004546 <bekle+0xfe>
    }

}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000c60 	.word	0x20000c60
 8004570:	20000c68 	.word	0x20000c68
 8004574:	20000cae 	.word	0x20000cae
 8004578:	40010800 	.word	0x40010800
 800457c:	40011000 	.word	0x40011000

08004580 <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004590:	4a22      	ldr	r2, [pc, #136]	; (800461c <lcdUpdate+0x9c>)
 8004592:	2101      	movs	r1, #1
 8004594:	2002      	movs	r0, #2
 8004596:	f7fb ff92 	bl	80004be <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800459a:	e03b      	b.n	8004614 <lcdUpdate+0x94>
	} else if(y==2) {
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d105      	bne.n	80045ae <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <lcdUpdate+0x9c>)
 80045a4:	2102      	movs	r1, #2
 80045a6:	2002      	movs	r0, #2
 80045a8:	f7fb ff89 	bl	80004be <lcd_print>
}
 80045ac:	e032      	b.n	8004614 <lcdUpdate+0x94>
	} else if(y==3) {
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d105      	bne.n	80045c0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <lcdUpdate+0x9c>)
 80045b6:	2103      	movs	r1, #3
 80045b8:	2002      	movs	r0, #2
 80045ba:	f7fb ff80 	bl	80004be <lcd_print>
}
 80045be:	e029      	b.n	8004614 <lcdUpdate+0x94>
	} else if(y==4) {
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d105      	bne.n	80045d2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <lcdUpdate+0x9c>)
 80045c8:	2104      	movs	r1, #4
 80045ca:	2002      	movs	r0, #2
 80045cc:	f7fb ff77 	bl	80004be <lcd_print>
}
 80045d0:	e020      	b.n	8004614 <lcdUpdate+0x94>
	} else if(y==5) {
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d105      	bne.n	80045e4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80045d8:	4a10      	ldr	r2, [pc, #64]	; (800461c <lcdUpdate+0x9c>)
 80045da:	2105      	movs	r1, #5
 80045dc:	2002      	movs	r0, #2
 80045de:	f7fb ff6e 	bl	80004be <lcd_print>
}
 80045e2:	e017      	b.n	8004614 <lcdUpdate+0x94>
	} else if(y==6) {
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d105      	bne.n	80045f6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <lcdUpdate+0x9c>)
 80045ec:	2106      	movs	r1, #6
 80045ee:	2002      	movs	r0, #2
 80045f0:	f7fb ff65 	bl	80004be <lcd_print>
}
 80045f4:	e00e      	b.n	8004614 <lcdUpdate+0x94>
	} else if (y==7) {
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b07      	cmp	r3, #7
 80045fa:	d10b      	bne.n	8004614 <lcdUpdate+0x94>
		lcd_clear();
 80045fc:	f7fb ff74 	bl	80004e8 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <lcdUpdate+0xa0>)
 8004602:	2101      	movs	r1, #1
 8004604:	2001      	movs	r0, #1
 8004606:	f7fb ff5a 	bl	80004be <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800460a:	4a06      	ldr	r2, [pc, #24]	; (8004624 <lcdUpdate+0xa4>)
 800460c:	2101      	movs	r1, #1
 800460e:	2002      	movs	r0, #2
 8004610:	f7fb ff55 	bl	80004be <lcd_print>
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	0800cafc 	.word	0x0800cafc
 8004620:	0800d3d8 	.word	0x0800d3d8
 8004624:	0800d3ec 	.word	0x0800d3ec

08004628 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d11d      	bne.n	8004674 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004638:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004640:	4a61      	ldr	r2, [pc, #388]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 8004642:	2101      	movs	r1, #1
 8004644:	2001      	movs	r0, #1
 8004646:	f7fb ff3a 	bl	80004be <lcd_print>
 800464a:	e008      	b.n	800465e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800464c:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d104      	bne.n	800465e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004654:	4a5d      	ldr	r2, [pc, #372]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 8004656:	2101      	movs	r1, #1
 8004658:	2001      	movs	r0, #1
 800465a:	f7fb ff30 	bl	80004be <lcd_print>
		}
		lcd_print(2, 1, "1");
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <hataKoduLcdGoster+0x1a8>)
 8004660:	2101      	movs	r1, #1
 8004662:	2002      	movs	r0, #2
 8004664:	f7fb ff2b 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004668:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 800466a:	2107      	movs	r1, #7
 800466c:	2002      	movs	r0, #2
 800466e:	f7fb ff26 	bl	80004be <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004672:	e0a3      	b.n	80047bc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d11d      	bne.n	80046b6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800467a:	4b52      	ldr	r3, [pc, #328]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004682:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 8004684:	2101      	movs	r1, #1
 8004686:	2001      	movs	r0, #1
 8004688:	f7fb ff19 	bl	80004be <lcd_print>
 800468c:	e008      	b.n	80046a0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800468e:	4b4d      	ldr	r3, [pc, #308]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d104      	bne.n	80046a0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004696:	4a4d      	ldr	r2, [pc, #308]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 8004698:	2101      	movs	r1, #1
 800469a:	2001      	movs	r0, #1
 800469c:	f7fb ff0f 	bl	80004be <lcd_print>
		lcd_print(2, 2, "2");
 80046a0:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <hataKoduLcdGoster+0x1b0>)
 80046a2:	2102      	movs	r1, #2
 80046a4:	2002      	movs	r0, #2
 80046a6:	f7fb ff0a 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80046aa:	4a4a      	ldr	r2, [pc, #296]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 80046ac:	2107      	movs	r1, #7
 80046ae:	2002      	movs	r0, #2
 80046b0:	f7fb ff05 	bl	80004be <lcd_print>
}
 80046b4:	e082      	b.n	80047bc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d11d      	bne.n	80046f8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80046c4:	4a40      	ldr	r2, [pc, #256]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7fb fef8 	bl	80004be <lcd_print>
 80046ce:	e008      	b.n	80046e2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80046d0:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d104      	bne.n	80046e2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80046d8:	4a3c      	ldr	r2, [pc, #240]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 80046da:	2101      	movs	r1, #1
 80046dc:	2001      	movs	r0, #1
 80046de:	f7fb feee 	bl	80004be <lcd_print>
		lcd_print(2, 3, "3");
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <hataKoduLcdGoster+0x1b4>)
 80046e4:	2103      	movs	r1, #3
 80046e6:	2002      	movs	r0, #2
 80046e8:	f7fb fee9 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80046ec:	4a39      	ldr	r2, [pc, #228]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 80046ee:	2107      	movs	r1, #7
 80046f0:	2002      	movs	r0, #2
 80046f2:	f7fb fee4 	bl	80004be <lcd_print>
}
 80046f6:	e061      	b.n	80047bc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d11d      	bne.n	800473a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004706:	4a30      	ldr	r2, [pc, #192]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 8004708:	2101      	movs	r1, #1
 800470a:	2001      	movs	r0, #1
 800470c:	f7fb fed7 	bl	80004be <lcd_print>
 8004710:	e008      	b.n	8004724 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d104      	bne.n	8004724 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800471a:	4a2c      	ldr	r2, [pc, #176]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 800471c:	2101      	movs	r1, #1
 800471e:	2001      	movs	r0, #1
 8004720:	f7fb fecd 	bl	80004be <lcd_print>
		lcd_print(2, 4, "4");
 8004724:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <hataKoduLcdGoster+0x1b8>)
 8004726:	2104      	movs	r1, #4
 8004728:	2002      	movs	r0, #2
 800472a:	f7fb fec8 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 800472e:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 8004730:	2107      	movs	r1, #7
 8004732:	2002      	movs	r0, #2
 8004734:	f7fb fec3 	bl	80004be <lcd_print>
}
 8004738:	e040      	b.n	80047bc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b05      	cmp	r3, #5
 800473e:	d11d      	bne.n	800477c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 800474a:	2101      	movs	r1, #1
 800474c:	2001      	movs	r0, #1
 800474e:	f7fb feb6 	bl	80004be <lcd_print>
 8004752:	e008      	b.n	8004766 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d104      	bne.n	8004766 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 800475e:	2101      	movs	r1, #1
 8004760:	2001      	movs	r0, #1
 8004762:	f7fb feac 	bl	80004be <lcd_print>
		lcd_print(2, 5, "5");
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <hataKoduLcdGoster+0x1bc>)
 8004768:	2105      	movs	r1, #5
 800476a:	2002      	movs	r0, #2
 800476c:	f7fb fea7 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 8004772:	2107      	movs	r1, #7
 8004774:	2002      	movs	r0, #2
 8004776:	f7fb fea2 	bl	80004be <lcd_print>
}
 800477a:	e01f      	b.n	80047bc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d11c      	bne.n	80047bc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <hataKoduLcdGoster+0x1a0>)
 800478c:	2101      	movs	r1, #1
 800478e:	2001      	movs	r0, #1
 8004790:	f7fb fe95 	bl	80004be <lcd_print>
 8004794:	e008      	b.n	80047a8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <hataKoduLcdGoster+0x19c>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d104      	bne.n	80047a8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <hataKoduLcdGoster+0x1a4>)
 80047a0:	2101      	movs	r1, #1
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7fb fe8b 	bl	80004be <lcd_print>
		lcd_print(2, 6, "6");
 80047a8:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <hataKoduLcdGoster+0x1c0>)
 80047aa:	2106      	movs	r1, #6
 80047ac:	2002      	movs	r0, #2
 80047ae:	f7fb fe86 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80047b2:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <hataKoduLcdGoster+0x1ac>)
 80047b4:	2107      	movs	r1, #7
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fb fe81 	bl	80004be <lcd_print>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000ca0 	.word	0x20000ca0
 80047c8:	0800d400 	.word	0x0800d400
 80047cc:	0800d414 	.word	0x0800d414
 80047d0:	0800d428 	.word	0x0800d428
 80047d4:	0800d42c 	.word	0x0800d42c
 80047d8:	0800d438 	.word	0x0800d438
 80047dc:	0800d43c 	.word	0x0800d43c
 80047e0:	0800d440 	.word	0x0800d440
 80047e4:	0800d444 	.word	0x0800d444
 80047e8:	0800d448 	.word	0x0800d448

080047ec <eepromKontrol>:

void eepromKontrol(void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80047f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	233f      	movs	r3, #63	; 0x3f
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	4b9b      	ldr	r3, [pc, #620]	; (8004a6c <eepromKontrol+0x280>)
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	233f      	movs	r3, #63	; 0x3f
 8004802:	2200      	movs	r2, #0
 8004804:	21a0      	movs	r1, #160	; 0xa0
 8004806:	489a      	ldr	r0, [pc, #616]	; (8004a70 <eepromKontrol+0x284>)
 8004808:	f004 f8e6 	bl	80089d8 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800480c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004810:	f003 f8a0 	bl	8007954 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004814:	4b95      	ldr	r3, [pc, #596]	; (8004a6c <eepromKontrol+0x280>)
 8004816:	78da      	ldrb	r2, [r3, #3]
 8004818:	4b96      	ldr	r3, [pc, #600]	; (8004a74 <eepromKontrol+0x288>)
 800481a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800481c:	4b93      	ldr	r3, [pc, #588]	; (8004a6c <eepromKontrol+0x280>)
 800481e:	785a      	ldrb	r2, [r3, #1]
 8004820:	4b95      	ldr	r3, [pc, #596]	; (8004a78 <eepromKontrol+0x28c>)
 8004822:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004824:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <eepromKontrol+0x280>)
 8004826:	789a      	ldrb	r2, [r3, #2]
 8004828:	4b94      	ldr	r3, [pc, #592]	; (8004a7c <eepromKontrol+0x290>)
 800482a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800482c:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <eepromKontrol+0x280>)
 800482e:	791a      	ldrb	r2, [r3, #4]
 8004830:	4b93      	ldr	r3, [pc, #588]	; (8004a80 <eepromKontrol+0x294>)
 8004832:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004834:	4b8d      	ldr	r3, [pc, #564]	; (8004a6c <eepromKontrol+0x280>)
 8004836:	795a      	ldrb	r2, [r3, #5]
 8004838:	4b92      	ldr	r3, [pc, #584]	; (8004a84 <eepromKontrol+0x298>)
 800483a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800483c:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <eepromKontrol+0x280>)
 800483e:	799a      	ldrb	r2, [r3, #6]
 8004840:	4b91      	ldr	r3, [pc, #580]	; (8004a88 <eepromKontrol+0x29c>)
 8004842:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004844:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <eepromKontrol+0x280>)
 8004846:	79da      	ldrb	r2, [r3, #7]
 8004848:	4b90      	ldr	r3, [pc, #576]	; (8004a8c <eepromKontrol+0x2a0>)
 800484a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800484c:	4b87      	ldr	r3, [pc, #540]	; (8004a6c <eepromKontrol+0x280>)
 800484e:	7a1a      	ldrb	r2, [r3, #8]
 8004850:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <eepromKontrol+0x2a4>)
 8004852:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004854:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <eepromKontrol+0x280>)
 8004856:	7a5a      	ldrb	r2, [r3, #9]
 8004858:	4b8e      	ldr	r3, [pc, #568]	; (8004a94 <eepromKontrol+0x2a8>)
 800485a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800485c:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <eepromKontrol+0x280>)
 800485e:	7a9a      	ldrb	r2, [r3, #10]
 8004860:	4b8d      	ldr	r3, [pc, #564]	; (8004a98 <eepromKontrol+0x2ac>)
 8004862:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <eepromKontrol+0x280>)
 8004866:	7ada      	ldrb	r2, [r3, #11]
 8004868:	4b8c      	ldr	r3, [pc, #560]	; (8004a9c <eepromKontrol+0x2b0>)
 800486a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 800486c:	4b7f      	ldr	r3, [pc, #508]	; (8004a6c <eepromKontrol+0x280>)
 800486e:	7b1a      	ldrb	r2, [r3, #12]
 8004870:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <eepromKontrol+0x2b4>)
 8004872:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004874:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <eepromKontrol+0x280>)
 8004876:	7b5a      	ldrb	r2, [r3, #13]
 8004878:	4b8a      	ldr	r3, [pc, #552]	; (8004aa4 <eepromKontrol+0x2b8>)
 800487a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 800487c:	4b7b      	ldr	r3, [pc, #492]	; (8004a6c <eepromKontrol+0x280>)
 800487e:	7b9a      	ldrb	r2, [r3, #14]
 8004880:	4b89      	ldr	r3, [pc, #548]	; (8004aa8 <eepromKontrol+0x2bc>)
 8004882:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004884:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <eepromKontrol+0x280>)
 8004886:	7bda      	ldrb	r2, [r3, #15]
 8004888:	4b88      	ldr	r3, [pc, #544]	; (8004aac <eepromKontrol+0x2c0>)
 800488a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 800488c:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <eepromKontrol+0x280>)
 800488e:	7c1a      	ldrb	r2, [r3, #16]
 8004890:	4b87      	ldr	r3, [pc, #540]	; (8004ab0 <eepromKontrol+0x2c4>)
 8004892:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004894:	4b75      	ldr	r3, [pc, #468]	; (8004a6c <eepromKontrol+0x280>)
 8004896:	7c5a      	ldrb	r2, [r3, #17]
 8004898:	4b86      	ldr	r3, [pc, #536]	; (8004ab4 <eepromKontrol+0x2c8>)
 800489a:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 800489c:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <eepromKontrol+0x280>)
 800489e:	7c9a      	ldrb	r2, [r3, #18]
 80048a0:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <eepromKontrol+0x2cc>)
 80048a2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80048a4:	4b71      	ldr	r3, [pc, #452]	; (8004a6c <eepromKontrol+0x280>)
 80048a6:	7cda      	ldrb	r2, [r3, #19]
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <eepromKontrol+0x2d0>)
 80048aa:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80048ac:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <eepromKontrol+0x280>)
 80048ae:	7d1a      	ldrb	r2, [r3, #20]
 80048b0:	4b83      	ldr	r3, [pc, #524]	; (8004ac0 <eepromKontrol+0x2d4>)
 80048b2:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80048b4:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <eepromKontrol+0x280>)
 80048b6:	7d5a      	ldrb	r2, [r3, #21]
 80048b8:	4b82      	ldr	r3, [pc, #520]	; (8004ac4 <eepromKontrol+0x2d8>)
 80048ba:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80048bc:	4b6b      	ldr	r3, [pc, #428]	; (8004a6c <eepromKontrol+0x280>)
 80048be:	7d9a      	ldrb	r2, [r3, #22]
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <eepromKontrol+0x2dc>)
 80048c2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <eepromKontrol+0x280>)
 80048c6:	7dda      	ldrb	r2, [r3, #23]
 80048c8:	4b80      	ldr	r3, [pc, #512]	; (8004acc <eepromKontrol+0x2e0>)
 80048ca:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80048cc:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <eepromKontrol+0x280>)
 80048ce:	7e1a      	ldrb	r2, [r3, #24]
 80048d0:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <eepromKontrol+0x2e4>)
 80048d2:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80048d4:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <eepromKontrol+0x280>)
 80048d6:	7e5a      	ldrb	r2, [r3, #25]
 80048d8:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <eepromKontrol+0x2e8>)
 80048da:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80048dc:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <eepromKontrol+0x280>)
 80048de:	7e9a      	ldrb	r2, [r3, #26]
 80048e0:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <eepromKontrol+0x2ec>)
 80048e2:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <eepromKontrol+0x280>)
 80048e6:	7eda      	ldrb	r2, [r3, #27]
 80048e8:	4b7c      	ldr	r3, [pc, #496]	; (8004adc <eepromKontrol+0x2f0>)
 80048ea:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80048ec:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <eepromKontrol+0x280>)
 80048ee:	7f1a      	ldrb	r2, [r3, #28]
 80048f0:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <eepromKontrol+0x2f4>)
 80048f2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80048f4:	4b5d      	ldr	r3, [pc, #372]	; (8004a6c <eepromKontrol+0x280>)
 80048f6:	7f5a      	ldrb	r2, [r3, #29]
 80048f8:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <eepromKontrol+0x2f8>)
 80048fa:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <eepromKontrol+0x280>)
 80048fe:	7f9a      	ldrb	r2, [r3, #30]
 8004900:	4b79      	ldr	r3, [pc, #484]	; (8004ae8 <eepromKontrol+0x2fc>)
 8004902:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004904:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <eepromKontrol+0x280>)
 8004906:	7fda      	ldrb	r2, [r3, #31]
 8004908:	4b78      	ldr	r3, [pc, #480]	; (8004aec <eepromKontrol+0x300>)
 800490a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 800490c:	4b57      	ldr	r3, [pc, #348]	; (8004a6c <eepromKontrol+0x280>)
 800490e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004912:	4b77      	ldr	r3, [pc, #476]	; (8004af0 <eepromKontrol+0x304>)
 8004914:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004916:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <eepromKontrol+0x280>)
 8004918:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800491c:	4b75      	ldr	r3, [pc, #468]	; (8004af4 <eepromKontrol+0x308>)
 800491e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <eepromKontrol+0x280>)
 8004922:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004926:	4b74      	ldr	r3, [pc, #464]	; (8004af8 <eepromKontrol+0x30c>)
 8004928:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800492a:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <eepromKontrol+0x280>)
 800492c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004930:	4b72      	ldr	r3, [pc, #456]	; (8004afc <eepromKontrol+0x310>)
 8004932:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004934:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <eepromKontrol+0x280>)
 8004936:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800493a:	4b71      	ldr	r3, [pc, #452]	; (8004b00 <eepromKontrol+0x314>)
 800493c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <eepromKontrol+0x280>)
 8004940:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004944:	4b6f      	ldr	r3, [pc, #444]	; (8004b04 <eepromKontrol+0x318>)
 8004946:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004948:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <eepromKontrol+0x280>)
 800494a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800494e:	4b6e      	ldr	r3, [pc, #440]	; (8004b08 <eepromKontrol+0x31c>)
 8004950:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004952:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <eepromKontrol+0x280>)
 8004954:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <eepromKontrol+0x320>)
 800495a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <eepromKontrol+0x280>)
 800495e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004962:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <eepromKontrol+0x324>)
 8004964:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <eepromKontrol+0x280>)
 8004968:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800496c:	4b69      	ldr	r3, [pc, #420]	; (8004b14 <eepromKontrol+0x328>)
 800496e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <eepromKontrol+0x280>)
 8004972:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004976:	4b68      	ldr	r3, [pc, #416]	; (8004b18 <eepromKontrol+0x32c>)
 8004978:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 800497a:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <eepromKontrol+0x280>)
 800497c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004980:	4b66      	ldr	r3, [pc, #408]	; (8004b1c <eepromKontrol+0x330>)
 8004982:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <eepromKontrol+0x280>)
 8004986:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800498a:	4b65      	ldr	r3, [pc, #404]	; (8004b20 <eepromKontrol+0x334>)
 800498c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <eepromKontrol+0x280>)
 8004990:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004994:	4b63      	ldr	r3, [pc, #396]	; (8004b24 <eepromKontrol+0x338>)
 8004996:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <eepromKontrol+0x280>)
 800499a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800499e:	4b62      	ldr	r3, [pc, #392]	; (8004b28 <eepromKontrol+0x33c>)
 80049a0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80049a2:	4b54      	ldr	r3, [pc, #336]	; (8004af4 <eepromKontrol+0x308>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe ff92 	bl	80038d0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80049ac:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <eepromKontrol+0x304>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	d902      	bls.n	80049ba <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 80049b4:	4b4e      	ldr	r3, [pc, #312]	; (8004af0 <eepromKontrol+0x304>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <eepromKontrol+0x300>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b09      	cmp	r3, #9
 80049c0:	d902      	bls.n	80049c8 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 80049c2:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <eepromKontrol+0x300>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80049c8:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <eepromKontrol+0x2fc>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	d902      	bls.n	80049d6 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <eepromKontrol+0x2fc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <eepromKontrol+0x2f8>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b09      	cmp	r3, #9
 80049dc:	d902      	bls.n	80049e4 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <eepromKontrol+0x2f8>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80049e4:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <eepromKontrol+0x2f4>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d902      	bls.n	80049f2 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 80049ec:	4b3c      	ldr	r3, [pc, #240]	; (8004ae0 <eepromKontrol+0x2f4>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <eepromKontrol+0x28c>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d902      	bls.n	8004a00 <eepromKontrol+0x214>
	    calismaSekli=0;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <eepromKontrol+0x28c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004a00:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <eepromKontrol+0x290>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d902      	bls.n	8004a0e <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <eepromKontrol+0x290>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <eepromKontrol+0x294>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d902      	bls.n	8004a1c <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <eepromKontrol+0x294>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <eepromKontrol+0x298>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d902      	bls.n	8004a2a <eepromKontrol+0x23e>
	    altLimit=1;
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <eepromKontrol+0x298>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <eepromKontrol+0x29c>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d902      	bls.n	8004a38 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <eepromKontrol+0x29c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004a38:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <eepromKontrol+0x2a0>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d902      	bls.n	8004a46 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <eepromKontrol+0x2a0>)
 8004a42:	2203      	movs	r2, #3
 8004a44:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004a46:	4b2e      	ldr	r3, [pc, #184]	; (8004b00 <eepromKontrol+0x314>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d902      	bls.n	8004a54 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <eepromKontrol+0x314>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <eepromKontrol+0x2a4>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d902      	bls.n	8004a62 <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <eepromKontrol+0x2a4>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <eepromKontrol+0x2a8>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d963      	bls.n	8004b32 <eepromKontrol+0x346>
 8004a6a:	e05f      	b.n	8004b2c <eepromKontrol+0x340>
 8004a6c:	20000c18 	.word	0x20000c18
 8004a70:	20000e40 	.word	0x20000e40
 8004a74:	20000c57 	.word	0x20000c57
 8004a78:	20000c81 	.word	0x20000c81
 8004a7c:	20000c84 	.word	0x20000c84
 8004a80:	20000c85 	.word	0x20000c85
 8004a84:	20000c86 	.word	0x20000c86
 8004a88:	20000c87 	.word	0x20000c87
 8004a8c:	20000c88 	.word	0x20000c88
 8004a90:	20000c89 	.word	0x20000c89
 8004a94:	20000c99 	.word	0x20000c99
 8004a98:	20000c8a 	.word	0x20000c8a
 8004a9c:	20000c9a 	.word	0x20000c9a
 8004aa0:	20000c8b 	.word	0x20000c8b
 8004aa4:	20000c9b 	.word	0x20000c9b
 8004aa8:	20000c8e 	.word	0x20000c8e
 8004aac:	20000c8f 	.word	0x20000c8f
 8004ab0:	20000c90 	.word	0x20000c90
 8004ab4:	20000c91 	.word	0x20000c91
 8004ab8:	20000c92 	.word	0x20000c92
 8004abc:	20000c93 	.word	0x20000c93
 8004ac0:	20000c94 	.word	0x20000c94
 8004ac4:	20000c95 	.word	0x20000c95
 8004ac8:	20000c96 	.word	0x20000c96
 8004acc:	20000c97 	.word	0x20000c97
 8004ad0:	20000c98 	.word	0x20000c98
 8004ad4:	20000c9c 	.word	0x20000c9c
 8004ad8:	20000c9e 	.word	0x20000c9e
 8004adc:	20000c7c 	.word	0x20000c7c
 8004ae0:	20000c7d 	.word	0x20000c7d
 8004ae4:	20000c7e 	.word	0x20000c7e
 8004ae8:	20000940 	.word	0x20000940
 8004aec:	20000941 	.word	0x20000941
 8004af0:	20000c7f 	.word	0x20000c7f
 8004af4:	20000ca0 	.word	0x20000ca0
 8004af8:	20000c8d 	.word	0x20000c8d
 8004afc:	20000c9f 	.word	0x20000c9f
 8004b00:	20000c8c 	.word	0x20000c8c
 8004b04:	20000ca1 	.word	0x20000ca1
 8004b08:	20000ca2 	.word	0x20000ca2
 8004b0c:	20000ca3 	.word	0x20000ca3
 8004b10:	20000ca4 	.word	0x20000ca4
 8004b14:	20000ca5 	.word	0x20000ca5
 8004b18:	20000ca6 	.word	0x20000ca6
 8004b1c:	20000ca7 	.word	0x20000ca7
 8004b20:	20000ca8 	.word	0x20000ca8
 8004b24:	20000ca9 	.word	0x20000ca9
 8004b28:	20000caa 	.word	0x20000caa
	    kapi1AcSure=5;
 8004b2c:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <eepromKontrol+0x46c>)
 8004b2e:	2205      	movs	r2, #5
 8004b30:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004b32:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <eepromKontrol+0x470>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004b3a:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <eepromKontrol+0x470>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004b40:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <eepromKontrol+0x474>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d902      	bls.n	8004b4e <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004b48:	4b45      	ldr	r3, [pc, #276]	; (8004c60 <eepromKontrol+0x474>)
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004b4e:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <eepromKontrol+0x478>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d902      	bls.n	8004b5c <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004b56:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <eepromKontrol+0x478>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004b5c:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <eepromKontrol+0x47c>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004b64:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <eepromKontrol+0x47c>)
 8004b66:	2202      	movs	r2, #2
 8004b68:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004b6a:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <eepromKontrol+0x480>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d902      	bls.n	8004b78 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004b72:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <eepromKontrol+0x480>)
 8004b74:	2205      	movs	r2, #5
 8004b76:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004b78:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <eepromKontrol+0x484>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d902      	bls.n	8004b86 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004b80:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <eepromKontrol+0x484>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004b86:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <eepromKontrol+0x488>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <eepromKontrol+0x488>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004b94:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <eepromKontrol+0x48c>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d902      	bls.n	8004ba2 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <eepromKontrol+0x48c>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004ba2:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <eepromKontrol+0x490>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d902      	bls.n	8004bb0 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004baa:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <eepromKontrol+0x490>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004bb0:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <eepromKontrol+0x494>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d902      	bls.n	8004bbe <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004bb8:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <eepromKontrol+0x494>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <eepromKontrol+0x498>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d902      	bls.n	8004bcc <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <eepromKontrol+0x498>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <eepromKontrol+0x49c>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d902      	bls.n	8004bda <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004bd4:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <eepromKontrol+0x49c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004bda:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <eepromKontrol+0x4a0>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d902      	bls.n	8004be8 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <eepromKontrol+0x4a0>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004be8:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <eepromKontrol+0x4a4>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	d902      	bls.n	8004bf6 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <eepromKontrol+0x4a4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004bf6:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <eepromKontrol+0x4a8>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d902      	bls.n	8004c04 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <eepromKontrol+0x4a8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <eepromKontrol+0x4ac>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2bb4      	cmp	r3, #180	; 0xb4
 8004c0a:	d902      	bls.n	8004c12 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004c0c:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <eepromKontrol+0x4ac>)
 8004c0e:	223c      	movs	r2, #60	; 0x3c
 8004c10:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <eepromKontrol+0x4b0>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d902      	bls.n	8004c20 <eepromKontrol+0x434>
	    buzzer=0;
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <eepromKontrol+0x4b0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <eepromKontrol+0x4b4>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d902      	bls.n	8004c2e <eepromKontrol+0x442>
	    demoMode=0;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <eepromKontrol+0x4b4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <eepromKontrol+0x4b8>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d902      	bls.n	8004c3c <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <eepromKontrol+0x4b8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <eepromKontrol+0x4bc>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d902      	bls.n	8004c4a <eepromKontrol+0x45e>
	    dilSecim=0;
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <eepromKontrol+0x4bc>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c4e:	f002 fe81 	bl	8007954 <HAL_Delay>
}
 8004c52:	bf00      	nop
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000c99 	.word	0x20000c99
 8004c5c:	20000c8a 	.word	0x20000c8a
 8004c60:	20000c9a 	.word	0x20000c9a
 8004c64:	20000c8b 	.word	0x20000c8b
 8004c68:	20000c8d 	.word	0x20000c8d
 8004c6c:	20000c9b 	.word	0x20000c9b
 8004c70:	20000c8e 	.word	0x20000c8e
 8004c74:	20000c8f 	.word	0x20000c8f
 8004c78:	20000c90 	.word	0x20000c90
 8004c7c:	20000c91 	.word	0x20000c91
 8004c80:	20000c92 	.word	0x20000c92
 8004c84:	20000c93 	.word	0x20000c93
 8004c88:	20000c94 	.word	0x20000c94
 8004c8c:	20000c95 	.word	0x20000c95
 8004c90:	20000c96 	.word	0x20000c96
 8004c94:	20000c97 	.word	0x20000c97
 8004c98:	20000c98 	.word	0x20000c98
 8004c9c:	20000c9c 	.word	0x20000c9c
 8004ca0:	20000c9e 	.word	0x20000c9e
 8004ca4:	20000c9f 	.word	0x20000c9f
 8004ca8:	20000ca0 	.word	0x20000ca0

08004cac <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004cb6:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <hata2EEPROM+0xa0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	1e5a      	subs	r2, r3, #1
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <hata2EEPROM+0xa4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <hata2EEPROM+0xa8>)
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004cca:	f000 f847 	bl	8004d5c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004cce:	e000      	b.n	8004cd2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004cd0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e012      	b.n	8004cfe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <hata2EEPROM+0xa4>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <hata2EEPROM+0xa8>)
 8004ce2:	5cd3      	ldrb	r3, [r2, r3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <hata2EEPROM+0xa4>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	4918      	ldr	r1, [pc, #96]	; (8004d54 <hata2EEPROM+0xa8>)
 8004cf2:	79fa      	ldrb	r2, [r7, #7]
 8004cf4:	54ca      	strb	r2, [r1, r3]
					break;
 8004cf6:	e007      	b.n	8004d08 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <hata2EEPROM+0xa0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbe7      	blt.n	8004cd8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004d08:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <hata2EEPROM+0xa4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	b299      	uxth	r1, r3
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <hata2EEPROM+0xa0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	b298      	uxth	r0, r3
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <hata2EEPROM+0xa4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <hata2EEPROM+0xa8>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <hata2EEPROM+0xa0>)
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	b292      	uxth	r2, r2
 8004d22:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004d26:	9402      	str	r4, [sp, #8]
 8004d28:	9201      	str	r2, [sp, #4]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	460a      	mov	r2, r1
 8004d30:	21a0      	movs	r1, #160	; 0xa0
 8004d32:	4809      	ldr	r0, [pc, #36]	; (8004d58 <hata2EEPROM+0xac>)
 8004d34:	f003 fd56 	bl	80087e4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d3c:	f002 fe0a 	bl	8007954 <HAL_Delay>
	eepromKontrol();
 8004d40:	f7ff fd54 	bl	80047ec <eepromKontrol>
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	20000938 	.word	0x20000938
 8004d50:	2000093c 	.word	0x2000093c
 8004d54:	20000c18 	.word	0x20000c18
 8004d58:	20000e40 	.word	0x20000e40

08004d5c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	e009      	b.n	8004d7c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004d68:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <eepromDataFillWithEmpty+0x38>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d70:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <eepromDataFillWithEmpty+0x3c>)
 8004d72:	2100      	movs	r1, #0
 8004d74:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <eepromDataFillWithEmpty+0x40>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dbf0      	blt.n	8004d68 <eepromDataFillWithEmpty+0xc>
	}
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000910 	.word	0x20000910
 8004d98:	20000c18 	.word	0x20000c18
 8004d9c:	20000938 	.word	0x20000938

08004da0 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	20000c60 	.word	0x20000c60

08004dc0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dc6:	f002 fd63 	bl	8007890 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8004dca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dce:	f002 fdc1 	bl	8007954 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004dd2:	f002 f99d 	bl	8007110 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dd6:	f002 fabf 	bl	8007358 <MX_GPIO_Init>
  MX_CAN_Init();
 8004dda:	f002 f9df 	bl	800719c <MX_CAN_Init>
  MX_I2C1_Init();
 8004dde:	f002 fa11 	bl	8007204 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004de2:	f002 fa3d 	bl	8007260 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004de6:	f002 fa8d 	bl	8007304 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004dea:	2201      	movs	r2, #1
 8004dec:	2140      	movs	r1, #64	; 0x40
 8004dee:	484e      	ldr	r0, [pc, #312]	; (8004f28 <main+0x168>)
 8004df0:	f003 fa55 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004df4:	2201      	movs	r2, #1
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	484b      	ldr	r0, [pc, #300]	; (8004f28 <main+0x168>)
 8004dfa:	f003 fa50 	bl	800829e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004dfe:	200a      	movs	r0, #10
 8004e00:	f002 fda8 	bl	8007954 <HAL_Delay>
  lcd_init();
 8004e04:	f7fb fb29 	bl	800045a <lcd_init>
  HAL_Delay(10);
 8004e08:	200a      	movs	r0, #10
 8004e0a:	f002 fda3 	bl	8007954 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8004e0e:	4847      	ldr	r0, [pc, #284]	; (8004f2c <main+0x16c>)
 8004e10:	f005 f8a8 	bl	8009f64 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004e14:	bf00      	nop
 8004e16:	4846      	ldr	r0, [pc, #280]	; (8004f30 <main+0x170>)
 8004e18:	f004 f853 	bl	8008ec2 <HAL_I2C_GetError>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d0f9      	beq.n	8004e16 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004e22:	bf00      	nop
 8004e24:	4842      	ldr	r0, [pc, #264]	; (8004f30 <main+0x170>)
 8004e26:	f004 f83f 	bl	8008ea8 <HAL_I2C_GetState>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d1f9      	bne.n	8004e24 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e36:	483c      	ldr	r0, [pc, #240]	; (8004f28 <main+0x168>)
 8004e38:	f003 fa31 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e42:	4839      	ldr	r0, [pc, #228]	; (8004f28 <main+0x168>)
 8004e44:	f003 fa2b 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	4836      	ldr	r0, [pc, #216]	; (8004f28 <main+0x168>)
 8004e4e:	f003 fa26 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2102      	movs	r1, #2
 8004e56:	4834      	ldr	r0, [pc, #208]	; (8004f28 <main+0x168>)
 8004e58:	f003 fa21 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4831      	ldr	r0, [pc, #196]	; (8004f28 <main+0x168>)
 8004e62:	f003 fa1c 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2120      	movs	r1, #32
 8004e6a:	4832      	ldr	r0, [pc, #200]	; (8004f34 <main+0x174>)
 8004e6c:	f003 fa17 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004e70:	2200      	movs	r2, #0
 8004e72:	2110      	movs	r1, #16
 8004e74:	482f      	ldr	r0, [pc, #188]	; (8004f34 <main+0x174>)
 8004e76:	f003 fa12 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	482e      	ldr	r0, [pc, #184]	; (8004f38 <main+0x178>)
 8004e80:	f003 fa0d 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004e84:	2200      	movs	r2, #0
 8004e86:	2140      	movs	r1, #64	; 0x40
 8004e88:	482b      	ldr	r0, [pc, #172]	; (8004f38 <main+0x178>)
 8004e8a:	f003 fa08 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2120      	movs	r1, #32
 8004e92:	4829      	ldr	r0, [pc, #164]	; (8004f38 <main+0x178>)
 8004e94:	f003 fa03 	bl	800829e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	4826      	ldr	r0, [pc, #152]	; (8004f38 <main+0x178>)
 8004e9e:	f003 f9fe 	bl	800829e <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, &RxByte, 1);
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4925      	ldr	r1, [pc, #148]	; (8004f3c <main+0x17c>)
 8004ea6:	4826      	ldr	r0, [pc, #152]	; (8004f40 <main+0x180>)
 8004ea8:	f005 fc87 	bl	800a7ba <HAL_UART_Receive_IT>

  i2cTest();
 8004eac:	f000 f858 	bl	8004f60 <i2cTest>
  HAL_Delay(100);
 8004eb0:	2064      	movs	r0, #100	; 0x64
 8004eb2:	f002 fd4f 	bl	8007954 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8004eb6:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <main+0x184>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f7fb faff 	bl	80004be <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8004ec0:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <main+0x188>)
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	2002      	movs	r0, #2
 8004ec6:	f7fb fafa 	bl	80004be <lcd_print>
  HAL_Delay(1000);
 8004eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ece:	f002 fd41 	bl	8007954 <HAL_Delay>
  lcd_clear();
 8004ed2:	f7fb fb09 	bl	80004e8 <lcd_clear>

  eepromKontrol();
 8004ed6:	f7ff fc89 	bl	80047ec <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004eda:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <main+0x18c>)
 8004edc:	1d3c      	adds	r4, r7, #4
 8004ede:	461d      	mov	r5, r3
 8004ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f005 fd77 	bl	800a9e4 <osThreadCreate>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <main+0x190>)
 8004efa:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 8004efc:	2001      	movs	r0, #1
 8004efe:	f005 ff60 	bl	800adc2 <xQueueCreateMutex>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <main+0x194>)
 8004f06:	6013      	str	r3, [r2, #0]
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <main+0x198>)
 8004f16:	4811      	ldr	r0, [pc, #68]	; (8004f5c <main+0x19c>)
 8004f18:	f006 f99a 	bl	800b250 <xTaskCreate>

  vTaskStartScheduler();
 8004f1c:	f006 fafa 	bl	800b514 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004f20:	f005 fd59 	bl	800a9d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004f24:	e7fe      	b.n	8004f24 <main+0x164>
 8004f26:	bf00      	nop
 8004f28:	40010c00 	.word	0x40010c00
 8004f2c:	20000edc 	.word	0x20000edc
 8004f30:	20000e40 	.word	0x20000e40
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40010800 	.word	0x40010800
 8004f3c:	20000e14 	.word	0x20000e14
 8004f40:	20000e94 	.word	0x20000e94
 8004f44:	0800d5c4 	.word	0x0800d5c4
 8004f48:	0800d5d8 	.word	0x0800d5d8
 8004f4c:	0800d604 	.word	0x0800d604
 8004f50:	20000f24 	.word	0x20000f24
 8004f54:	20000ed8 	.word	0x20000ed8
 8004f58:	0800d5ec 	.word	0x0800d5ec
 8004f5c:	080050bd 	.word	0x080050bd

08004f60 <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004f66:	463b      	mov	r3, r7
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004f72:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <i2cTest+0x154>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <i2cTest+0x154>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004f82:	484c      	ldr	r0, [pc, #304]	; (80050b4 <i2cTest+0x154>)
 8004f84:	f003 fb00 	bl	8008588 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f88:	23c0      	movs	r3, #192	; 0xc0
 8004f8a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004f8c:	2311      	movs	r3, #17
 8004f8e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004f94:	2303      	movs	r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004f98:	463b      	mov	r3, r7
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4846      	ldr	r0, [pc, #280]	; (80050b8 <i2cTest+0x158>)
 8004f9e:	f002 ff07 	bl	8007db0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2140      	movs	r1, #64	; 0x40
 8004fa6:	4844      	ldr	r0, [pc, #272]	; (80050b8 <i2cTest+0x158>)
 8004fa8:	f003 f979 	bl	800829e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004fac:	2201      	movs	r2, #1
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	4841      	ldr	r0, [pc, #260]	; (80050b8 <i2cTest+0x158>)
 8004fb2:	f003 f974 	bl	800829e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8004fb6:	200a      	movs	r0, #10
 8004fb8:	f002 fccc 	bl	8007954 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004fbc:	bf00      	nop
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	483d      	ldr	r0, [pc, #244]	; (80050b8 <i2cTest+0x158>)
 8004fc2:	f003 f955 	bl	8008270 <HAL_GPIO_ReadPin>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d006      	beq.n	8004fda <i2cTest+0x7a>
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	483a      	ldr	r0, [pc, #232]	; (80050b8 <i2cTest+0x158>)
 8004fd0:	f003 f94e 	bl	8008270 <HAL_GPIO_ReadPin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d1f1      	bne.n	8004fbe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	4836      	ldr	r0, [pc, #216]	; (80050b8 <i2cTest+0x158>)
 8004fe0:	f003 f95d 	bl	800829e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f002 fcb5 	bl	8007954 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8004fea:	bf00      	nop
 8004fec:	2180      	movs	r1, #128	; 0x80
 8004fee:	4832      	ldr	r0, [pc, #200]	; (80050b8 <i2cTest+0x158>)
 8004ff0:	f003 f93e 	bl	8008270 <HAL_GPIO_ReadPin>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d0f8      	beq.n	8004fec <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2140      	movs	r1, #64	; 0x40
 8004ffe:	482e      	ldr	r0, [pc, #184]	; (80050b8 <i2cTest+0x158>)
 8005000:	f003 f94d 	bl	800829e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005004:	200a      	movs	r0, #10
 8005006:	f002 fca5 	bl	8007954 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800500a:	bf00      	nop
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	482a      	ldr	r0, [pc, #168]	; (80050b8 <i2cTest+0x158>)
 8005010:	f003 f92e 	bl	8008270 <HAL_GPIO_ReadPin>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d0f8      	beq.n	800500c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800501a:	2201      	movs	r2, #1
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4826      	ldr	r0, [pc, #152]	; (80050b8 <i2cTest+0x158>)
 8005020:	f003 f93d 	bl	800829e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005024:	200a      	movs	r0, #10
 8005026:	f002 fc95 	bl	8007954 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800502a:	bf00      	nop
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	4822      	ldr	r0, [pc, #136]	; (80050b8 <i2cTest+0x158>)
 8005030:	f003 f91e 	bl	8008270 <HAL_GPIO_ReadPin>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d1f8      	bne.n	800502c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800503a:	2201      	movs	r2, #1
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	481e      	ldr	r0, [pc, #120]	; (80050b8 <i2cTest+0x158>)
 8005040:	f003 f92d 	bl	800829e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005044:	200a      	movs	r0, #10
 8005046:	f002 fc85 	bl	8007954 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800504a:	bf00      	nop
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	481a      	ldr	r0, [pc, #104]	; (80050b8 <i2cTest+0x158>)
 8005050:	f003 f90e 	bl	8008270 <HAL_GPIO_ReadPin>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d1f8      	bne.n	800504c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800505a:	23c0      	movs	r3, #192	; 0xc0
 800505c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800505e:	2312      	movs	r3, #18
 8005060:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005062:	2301      	movs	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005066:	2303      	movs	r3, #3
 8005068:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800506a:	463b      	mov	r3, r7
 800506c:	4619      	mov	r1, r3
 800506e:	4812      	ldr	r0, [pc, #72]	; (80050b8 <i2cTest+0x158>)
 8005070:	f002 fe9e 	bl	8007db0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <i2cTest+0x154>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <i2cTest+0x154>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005082:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <i2cTest+0x154>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <i2cTest+0x154>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005092:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <i2cTest+0x154>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <i2cTest+0x154>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80050a4:	4803      	ldr	r0, [pc, #12]	; (80050b4 <i2cTest+0x154>)
 80050a6:	f003 f92b 	bl	8008300 <HAL_I2C_Init>
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000e40 	.word	0x20000e40
 80050b8:	40010c00 	.word	0x40010c00

080050bc <mainTask>:

void mainTask(void *pvParameters) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	6078      	str	r0, [r7, #4]
	while(1) {
		//WiFi_Connect();

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80050c4:	2101      	movs	r1, #1
 80050c6:	48a1      	ldr	r0, [pc, #644]	; (800534c <mainTask+0x290>)
 80050c8:	f003 f8d2 	bl	8008270 <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d135      	bne.n	800513e <mainTask+0x82>
 80050d2:	2108      	movs	r1, #8
 80050d4:	489e      	ldr	r0, [pc, #632]	; (8005350 <mainTask+0x294>)
 80050d6:	f003 f8cb 	bl	8008270 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12e      	bne.n	800513e <mainTask+0x82>
 80050e0:	2102      	movs	r1, #2
 80050e2:	489a      	ldr	r0, [pc, #616]	; (800534c <mainTask+0x290>)
 80050e4:	f003 f8c4 	bl	8008270 <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d127      	bne.n	800513e <mainTask+0x82>
 80050ee:	2104      	movs	r1, #4
 80050f0:	4896      	ldr	r0, [pc, #600]	; (800534c <mainTask+0x290>)
 80050f2:	f003 f8bd 	bl	8008270 <HAL_GPIO_ReadPin>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d120      	bne.n	800513e <mainTask+0x82>
 80050fc:	2108      	movs	r1, #8
 80050fe:	4893      	ldr	r0, [pc, #588]	; (800534c <mainTask+0x290>)
 8005100:	f003 f8b6 	bl	8008270 <HAL_GPIO_ReadPin>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d119      	bne.n	800513e <mainTask+0x82>
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	4890      	ldr	r0, [pc, #576]	; (8005350 <mainTask+0x294>)
 800510e:	f003 f8af 	bl	8008270 <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d112      	bne.n	800513e <mainTask+0x82>
 8005118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511c:	488c      	ldr	r0, [pc, #560]	; (8005350 <mainTask+0x294>)
 800511e:	f003 f8a7 	bl	8008270 <HAL_GPIO_ReadPin>
 8005122:	4603      	mov	r3, r0
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10a      	bne.n	800513e <mainTask+0x82>
 8005128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800512c:	4888      	ldr	r0, [pc, #544]	; (8005350 <mainTask+0x294>)
 800512e:	f003 f89f 	bl	8008270 <HAL_GPIO_ReadPin>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <mainTask+0x82>
			butonKontrol=0;
 8005138:	4b86      	ldr	r3, [pc, #536]	; (8005354 <mainTask+0x298>)
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
		}

		if(hafizaYaz==1) {
 800513e:	4b86      	ldr	r3, [pc, #536]	; (8005358 <mainTask+0x29c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d039      	beq.n	80051ba <mainTask+0xfe>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005146:	bf00      	nop
 8005148:	4884      	ldr	r0, [pc, #528]	; (800535c <mainTask+0x2a0>)
 800514a:	f003 feba 	bl	8008ec2 <HAL_I2C_GetError>
 800514e:	4603      	mov	r3, r0
 8005150:	2b04      	cmp	r3, #4
 8005152:	d0f9      	beq.n	8005148 <mainTask+0x8c>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005154:	bf00      	nop
 8005156:	4881      	ldr	r0, [pc, #516]	; (800535c <mainTask+0x2a0>)
 8005158:	f003 fea6 	bl	8008ea8 <HAL_I2C_GetState>
 800515c:	4603      	mov	r3, r0
 800515e:	2b20      	cmp	r3, #32
 8005160:	d1f9      	bne.n	8005156 <mainTask+0x9a>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005162:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	233f      	movs	r3, #63	; 0x3f
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	4b7c      	ldr	r3, [pc, #496]	; (8005360 <mainTask+0x2a4>)
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	233f      	movs	r3, #63	; 0x3f
 8005172:	2200      	movs	r2, #0
 8005174:	21a0      	movs	r1, #160	; 0xa0
 8005176:	4879      	ldr	r0, [pc, #484]	; (800535c <mainTask+0x2a0>)
 8005178:	f003 fb34 	bl	80087e4 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 800517c:	2005      	movs	r0, #5
 800517e:	f002 fbe9 	bl	8007954 <HAL_Delay>

		  hafizaYaz=0;
 8005182:	4b75      	ldr	r3, [pc, #468]	; (8005358 <mainTask+0x29c>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8005188:	4b76      	ldr	r3, [pc, #472]	; (8005364 <mainTask+0x2a8>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <mainTask+0xe0>
			  lcd_print(2,1,"Data yazildi    ");
 8005190:	4a75      	ldr	r2, [pc, #468]	; (8005368 <mainTask+0x2ac>)
 8005192:	2101      	movs	r1, #1
 8005194:	2002      	movs	r0, #2
 8005196:	f7fb f992 	bl	80004be <lcd_print>
 800519a:	e008      	b.n	80051ae <mainTask+0xf2>
		  } else if(dilSecim==1) {
 800519c:	4b71      	ldr	r3, [pc, #452]	; (8005364 <mainTask+0x2a8>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d104      	bne.n	80051ae <mainTask+0xf2>
			  lcd_print(2,1,"Data Wrote      ");
 80051a4:	4a71      	ldr	r2, [pc, #452]	; (800536c <mainTask+0x2b0>)
 80051a6:	2101      	movs	r1, #1
 80051a8:	2002      	movs	r0, #2
 80051aa:	f7fb f988 	bl	80004be <lcd_print>
		  }

		  HAL_Delay(1000);
 80051ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b2:	f002 fbcf 	bl	8007954 <HAL_Delay>
		  lcd_clear();
 80051b6:	f7fb f997 	bl	80004e8 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80051ba:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <mainTask+0x2b4>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f083 0301 	eor.w	r3, r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d06b      	beq.n	80052a0 <mainTask+0x1e4>
 80051c8:	4864      	ldr	r0, [pc, #400]	; (800535c <mainTask+0x2a0>)
 80051ca:	f003 fe6d 	bl	8008ea8 <HAL_I2C_GetState>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d165      	bne.n	80052a0 <mainTask+0x1e4>
		  if(ilkOkuma==0) {
 80051d4:	4b67      	ldr	r3, [pc, #412]	; (8005374 <mainTask+0x2b8>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <mainTask+0x1b0>
			  lcd_print(1,1,"   **EEPROM**   ");
 80051e2:	4a65      	ldr	r2, [pc, #404]	; (8005378 <mainTask+0x2bc>)
 80051e4:	2101      	movs	r1, #1
 80051e6:	2001      	movs	r0, #1
 80051e8:	f7fb f969 	bl	80004be <lcd_print>
			  if(dilSecim==0) {
 80051ec:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <mainTask+0x2a8>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <mainTask+0x144>
				  lcd_print(2,1,"Data Okunuyor...");
 80051f4:	4a61      	ldr	r2, [pc, #388]	; (800537c <mainTask+0x2c0>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	2002      	movs	r0, #2
 80051fa:	f7fb f960 	bl	80004be <lcd_print>
 80051fe:	e008      	b.n	8005212 <mainTask+0x156>
			  } else if(dilSecim==1) {
 8005200:	4b58      	ldr	r3, [pc, #352]	; (8005364 <mainTask+0x2a8>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d104      	bne.n	8005212 <mainTask+0x156>
				  lcd_print(2,1,"Data Reading... ");
 8005208:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <mainTask+0x2c4>)
 800520a:	2101      	movs	r1, #1
 800520c:	2002      	movs	r0, #2
 800520e:	f7fb f956 	bl	80004be <lcd_print>
			  }
			  HAL_Delay(1000);
 8005212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005216:	f002 fb9d 	bl	8007954 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800521a:	bf00      	nop
 800521c:	484f      	ldr	r0, [pc, #316]	; (800535c <mainTask+0x2a0>)
 800521e:	f003 fe50 	bl	8008ec2 <HAL_I2C_GetError>
 8005222:	4603      	mov	r3, r0
 8005224:	2b04      	cmp	r3, #4
 8005226:	d0f9      	beq.n	800521c <mainTask+0x160>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005228:	e003      	b.n	8005232 <mainTask+0x176>
				  HAL_Delay(1000);
 800522a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800522e:	f002 fb91 	bl	8007954 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005232:	484a      	ldr	r0, [pc, #296]	; (800535c <mainTask+0x2a0>)
 8005234:	f003 fe38 	bl	8008ea8 <HAL_I2C_GetState>
 8005238:	4603      	mov	r3, r0
 800523a:	2b20      	cmp	r3, #32
 800523c:	d1f5      	bne.n	800522a <mainTask+0x16e>
			  }

			  if(dilSecim==0) {
 800523e:	4b49      	ldr	r3, [pc, #292]	; (8005364 <mainTask+0x2a8>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <mainTask+0x196>
				  lcd_print(2,1,"Data Okundu.    ");
 8005246:	4a4f      	ldr	r2, [pc, #316]	; (8005384 <mainTask+0x2c8>)
 8005248:	2101      	movs	r1, #1
 800524a:	2002      	movs	r0, #2
 800524c:	f7fb f937 	bl	80004be <lcd_print>
 8005250:	e008      	b.n	8005264 <mainTask+0x1a8>
			  } else if(dilSecim==1) {
 8005252:	4b44      	ldr	r3, [pc, #272]	; (8005364 <mainTask+0x2a8>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d104      	bne.n	8005264 <mainTask+0x1a8>
				  lcd_print(2,1,"Data Read.      ");
 800525a:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <mainTask+0x2cc>)
 800525c:	2101      	movs	r1, #1
 800525e:	2002      	movs	r0, #2
 8005260:	f7fb f92d 	bl	80004be <lcd_print>
			  }

			  ilkOkuma=1;
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <mainTask+0x2b8>)
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e014      	b.n	8005296 <mainTask+0x1da>
		  } else {
			  if(dilSecim==0) {
 800526c:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <mainTask+0x2a8>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <mainTask+0x1c4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8005274:	4a45      	ldr	r2, [pc, #276]	; (800538c <mainTask+0x2d0>)
 8005276:	2101      	movs	r1, #1
 8005278:	2002      	movs	r0, #2
 800527a:	f7fb f920 	bl	80004be <lcd_print>
 800527e:	e008      	b.n	8005292 <mainTask+0x1d6>
			  } else if(dilSecim==1) {
 8005280:	4b38      	ldr	r3, [pc, #224]	; (8005364 <mainTask+0x2a8>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d104      	bne.n	8005292 <mainTask+0x1d6>
				  lcd_print(2,1,"Value Saved     ");
 8005288:	4a41      	ldr	r2, [pc, #260]	; (8005390 <mainTask+0x2d4>)
 800528a:	2101      	movs	r1, #1
 800528c:	2002      	movs	r0, #2
 800528e:	f7fb f916 	bl	80004be <lcd_print>
			  }
			  lcd_clear();
 8005292:	f7fb f929 	bl	80004e8 <lcd_clear>
		  }

		  eepromKontrol();
 8005296:	f7ff faa9 	bl	80047ec <eepromKontrol>
		  hafizaOku=1;
 800529a:	4b35      	ldr	r3, [pc, #212]	; (8005370 <mainTask+0x2b4>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80052a0:	4b3c      	ldr	r3, [pc, #240]	; (8005394 <mainTask+0x2d8>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11c      	bne.n	80052e2 <mainTask+0x226>
 80052a8:	4b3b      	ldr	r3, [pc, #236]	; (8005398 <mainTask+0x2dc>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d015      	beq.n	80052e2 <mainTask+0x226>
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <mainTask+0x2e0>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d111      	bne.n	80052e2 <mainTask+0x226>
			lcd_clear();
 80052be:	f7fb f913 	bl	80004e8 <lcd_clear>
			HAL_Delay(10);
 80052c2:	200a      	movs	r0, #10
 80052c4:	f002 fb46 	bl	8007954 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80052c8:	4a35      	ldr	r2, [pc, #212]	; (80053a0 <mainTask+0x2e4>)
 80052ca:	2101      	movs	r1, #1
 80052cc:	2001      	movs	r0, #1
 80052ce:	f7fb f8f6 	bl	80004be <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80052d2:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <mainTask+0x2e8>)
 80052d4:	2101      	movs	r1, #1
 80052d6:	2002      	movs	r0, #2
 80052d8:	f7fb f8f1 	bl	80004be <lcd_print>
			mesajYazildi=1;
 80052dc:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <mainTask+0x2dc>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80052e2:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <mainTask+0x2d8>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d112      	bne.n	8005310 <mainTask+0x254>
 80052ea:	2102      	movs	r1, #2
 80052ec:	4817      	ldr	r0, [pc, #92]	; (800534c <mainTask+0x290>)
 80052ee:	f002 ffbf 	bl	8008270 <HAL_GPIO_ReadPin>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10b      	bne.n	8005310 <mainTask+0x254>
 80052f8:	2104      	movs	r1, #4
 80052fa:	4814      	ldr	r0, [pc, #80]	; (800534c <mainTask+0x290>)
 80052fc:	f002 ffb8 	bl	8008270 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d104      	bne.n	8005310 <mainTask+0x254>
			menuGiris=1;
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <mainTask+0x2d8>)
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800530c:	f7fb f8ec 	bl	80004e8 <lcd_clear>
		}

		if(menuGiris==1) {
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <mainTask+0x2d8>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <mainTask+0x260>
			menu();
 8005318:	f7fb f932 	bl	8000580 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800531c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005320:	480b      	ldr	r0, [pc, #44]	; (8005350 <mainTask+0x294>)
 8005322:	f002 ffd4 	bl	80082ce <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800532a:	481f      	ldr	r0, [pc, #124]	; (80053a8 <mainTask+0x2ec>)
 800532c:	f002 ffa0 	bl	8008270 <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d13e      	bne.n	80053b4 <mainTask+0x2f8>
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <mainTask+0x2f0>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d037      	beq.n	80053b4 <mainTask+0x2f8>
			stopVar=1;
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <mainTask+0x2f4>)
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e036      	b.n	80053ba <mainTask+0x2fe>
 800534c:	40010800 	.word	0x40010800
 8005350:	40011000 	.word	0x40011000
 8005354:	20000cae 	.word	0x20000cae
 8005358:	20000cab 	.word	0x20000cab
 800535c:	20000e40 	.word	0x20000e40
 8005360:	20000c18 	.word	0x20000c18
 8005364:	20000ca0 	.word	0x20000ca0
 8005368:	0800d620 	.word	0x0800d620
 800536c:	0800d634 	.word	0x0800d634
 8005370:	20000cac 	.word	0x20000cac
 8005374:	20000cad 	.word	0x20000cad
 8005378:	0800d648 	.word	0x0800d648
 800537c:	0800d65c 	.word	0x0800d65c
 8005380:	0800d670 	.word	0x0800d670
 8005384:	0800d684 	.word	0x0800d684
 8005388:	0800d698 	.word	0x0800d698
 800538c:	0800d6ac 	.word	0x0800d6ac
 8005390:	0800d6c0 	.word	0x0800d6c0
 8005394:	20000c9d 	.word	0x20000c9d
 8005398:	20000cb3 	.word	0x20000cb3
 800539c:	20000c9e 	.word	0x20000c9e
 80053a0:	0800d3d8 	.word	0x0800d3d8
 80053a4:	0800d3ec 	.word	0x0800d3ec
 80053a8:	40010c00 	.word	0x40010c00
 80053ac:	20000cd4 	.word	0x20000cd4
 80053b0:	20000cd1 	.word	0x20000cd1
		} else {
			stopVar=0;
 80053b4:	4b70      	ldr	r3, [pc, #448]	; (8005578 <mainTask+0x4bc>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		if(basincSalteri==0) {
 80053ba:	4b70      	ldr	r3, [pc, #448]	; (800557c <mainTask+0x4c0>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <mainTask+0x30c>
			basincVar=1;
 80053c2:	4b6f      	ldr	r3, [pc, #444]	; (8005580 <mainTask+0x4c4>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
		}

		if(basincSalteri==1) {
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <mainTask+0x4c0>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d119      	bne.n	8005404 <mainTask+0x348>
			if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80053d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053d4:	486b      	ldr	r0, [pc, #428]	; (8005584 <mainTask+0x4c8>)
 80053d6:	f002 ff4b 	bl	8008270 <HAL_GPIO_ReadPin>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <mainTask+0x33a>
				if(millis-timer5>=3) {
 80053e0:	4b69      	ldr	r3, [pc, #420]	; (8005588 <mainTask+0x4cc>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b69      	ldr	r3, [pc, #420]	; (800558c <mainTask+0x4d0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d90a      	bls.n	8005404 <mainTask+0x348>
					basincVar=1;
 80053ee:	4b64      	ldr	r3, [pc, #400]	; (8005580 <mainTask+0x4c4>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e006      	b.n	8005404 <mainTask+0x348>
				}
			} else {
				timer5=millis;
 80053f6:	4b64      	ldr	r3, [pc, #400]	; (8005588 <mainTask+0x4cc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a64      	ldr	r2, [pc, #400]	; (800558c <mainTask+0x4d0>)
 80053fc:	6013      	str	r3, [r2, #0]
				basincVar=0;
 80053fe:	4b60      	ldr	r3, [pc, #384]	; (8005580 <mainTask+0x4c4>)
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
			}
		}

		/******** Bas gönder ***********/
		if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005404:	4b62      	ldr	r3, [pc, #392]	; (8005590 <mainTask+0x4d4>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10b      	bne.n	8005424 <mainTask+0x368>
 800540c:	4b61      	ldr	r3, [pc, #388]	; (8005594 <mainTask+0x4d8>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <mainTask+0x368>
 8005414:	4b60      	ldr	r3, [pc, #384]	; (8005598 <mainTask+0x4dc>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <mainTask+0x368>
			basgondercalisyukari=1;
 800541c:	4b5f      	ldr	r3, [pc, #380]	; (800559c <mainTask+0x4e0>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e009      	b.n	8005438 <mainTask+0x37c>
		} else if(yukarimotorcalisiyor==0) {
 8005424:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <mainTask+0x4d8>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f083 0301 	eor.w	r3, r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <mainTask+0x37c>
			basgondercalisyukari=0;
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <mainTask+0x4e0>)
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
		}

		if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005438:	4b55      	ldr	r3, [pc, #340]	; (8005590 <mainTask+0x4d4>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10b      	bne.n	8005458 <mainTask+0x39c>
 8005440:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <mainTask+0x4e4>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <mainTask+0x39c>
 8005448:	4b53      	ldr	r3, [pc, #332]	; (8005598 <mainTask+0x4dc>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <mainTask+0x39c>
			basgondercalisasagi=1;
 8005450:	4b54      	ldr	r3, [pc, #336]	; (80055a4 <mainTask+0x4e8>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e009      	b.n	800546c <mainTask+0x3b0>
		} else if(asagivalfcalisiyor==0) {
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <mainTask+0x4e4>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <mainTask+0x3b0>
			basgondercalisasagi=0;
 8005466:	4b4f      	ldr	r3, [pc, #316]	; (80055a4 <mainTask+0x4e8>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
		}

		/******** Kapı Secimleri ***********/

		if(kapiSecimleri==0) {
 800546c:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <mainTask+0x4ec>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <mainTask+0x3be>
			kapiSivicVar=1;
 8005474:	4b4d      	ldr	r3, [pc, #308]	; (80055ac <mainTask+0x4f0>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
		}

		if(kapiSecimleri==1) {
 800547a:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <mainTask+0x4ec>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10e      	bne.n	80054a0 <mainTask+0x3e4>
			if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005486:	484a      	ldr	r0, [pc, #296]	; (80055b0 <mainTask+0x4f4>)
 8005488:	f002 fef2 	bl	8008270 <HAL_GPIO_ReadPin>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <mainTask+0x3de>
				kapiSivicVar=1;
 8005492:	4b46      	ldr	r3, [pc, #280]	; (80055ac <mainTask+0x4f0>)
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e002      	b.n	80054a0 <mainTask+0x3e4>
			} else {
				kapiSivicVar=0;
 800549a:	4b44      	ldr	r3, [pc, #272]	; (80055ac <mainTask+0x4f0>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==2){
 80054a0:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <mainTask+0x4ec>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d10e      	bne.n	80054c6 <mainTask+0x40a>
			if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80054a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ac:	4840      	ldr	r0, [pc, #256]	; (80055b0 <mainTask+0x4f4>)
 80054ae:	f002 fedf 	bl	8008270 <HAL_GPIO_ReadPin>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <mainTask+0x404>
				kapiSivicVar=1;
 80054b8:	4b3c      	ldr	r3, [pc, #240]	; (80055ac <mainTask+0x4f0>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e002      	b.n	80054c6 <mainTask+0x40a>
			} else {
				kapiSivicVar=0;
 80054c0:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <mainTask+0x4f0>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==3) {
 80054c6:	4b38      	ldr	r3, [pc, #224]	; (80055a8 <mainTask+0x4ec>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d116      	bne.n	80054fc <mainTask+0x440>
			if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80054ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054d2:	4837      	ldr	r0, [pc, #220]	; (80055b0 <mainTask+0x4f4>)
 80054d4:	f002 fecc 	bl	8008270 <HAL_GPIO_ReadPin>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <mainTask+0x43a>
 80054de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e2:	4833      	ldr	r0, [pc, #204]	; (80055b0 <mainTask+0x4f4>)
 80054e4:	f002 fec4 	bl	8008270 <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <mainTask+0x43a>
				kapiSivicVar=1;
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <mainTask+0x4f0>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e002      	b.n	80054fc <mainTask+0x440>
			} else {
				kapiSivicVar=0;
 80054f6:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <mainTask+0x4f0>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

		/*MOTOR CALISIYOR*/

		if(demoMode==0 && menuGiris==0) {
 80054fc:	4b2d      	ldr	r3, [pc, #180]	; (80055b4 <mainTask+0x4f8>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f041 834e 	bne.w	8006ba2 <mainTask+0x1ae6>
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <mainTask+0x4fc>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f041 8349 	bne.w	8006ba2 <mainTask+0x1ae6>
			if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005510:	4b20      	ldr	r3, [pc, #128]	; (8005594 <mainTask+0x4d8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11a      	bne.n	800554e <mainTask+0x492>
 8005518:	4b28      	ldr	r3, [pc, #160]	; (80055bc <mainTask+0x500>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <mainTask+0x492>
 8005520:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <mainTask+0x4e4>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <mainTask+0x482>
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <mainTask+0x504>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f083 0301 	eor.w	r3, r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <mainTask+0x482>
 8005536:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <mainTask+0x508>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d007      	beq.n	800554e <mainTask+0x492>
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <mainTask+0x50c>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04a      	beq.n	80055dc <mainTask+0x520>
 8005546:	4b21      	ldr	r3, [pc, #132]	; (80055cc <mainTask+0x510>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d146      	bne.n	80055dc <mainTask+0x520>
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <mainTask+0x4bc>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d042      	beq.n	80055dc <mainTask+0x520>
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <mainTask+0x4f0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03e      	beq.n	80055dc <mainTask+0x520>

				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800555e:	2201      	movs	r2, #1
 8005560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005564:	481a      	ldr	r0, [pc, #104]	; (80055d0 <mainTask+0x514>)
 8005566:	f002 fe9a 	bl	800829e <HAL_GPIO_WritePin>
				motorcalisiyor=1;
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <mainTask+0x518>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
				CalismaSayisiYukari=1;
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <mainTask+0x51c>)
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e03a      	b.n	80055ee <mainTask+0x532>
 8005578:	20000cd1 	.word	0x20000cd1
 800557c:	20000c87 	.word	0x20000c87
 8005580:	20000c83 	.word	0x20000c83
 8005584:	40011000 	.word	0x40011000
 8005588:	20000c60 	.word	0x20000c60
 800558c:	20000c78 	.word	0x20000c78
 8005590:	20000c81 	.word	0x20000c81
 8005594:	20000cb4 	.word	0x20000cb4
 8005598:	20000c8f 	.word	0x20000c8f
 800559c:	20000cbb 	.word	0x20000cbb
 80055a0:	20000cb7 	.word	0x20000cb7
 80055a4:	20000cbc 	.word	0x20000cbc
 80055a8:	20000c88 	.word	0x20000c88
 80055ac:	20000cd2 	.word	0x20000cd2
 80055b0:	40010800 	.word	0x40010800
 80055b4:	20000c9e 	.word	0x20000c9e
 80055b8:	20000c9d 	.word	0x20000c9d
 80055bc:	20000cb5 	.word	0x20000cb5
 80055c0:	20000caf 	.word	0x20000caf
 80055c4:	20000c93 	.word	0x20000c93
 80055c8:	20000cb6 	.word	0x20000cb6
 80055cc:	20000c92 	.word	0x20000c92
 80055d0:	40010c00 	.word	0x40010c00
 80055d4:	20000cd3 	.word	0x20000cd3
 80055d8:	20000cbe 	.word	0x20000cbe
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80055dc:	2200      	movs	r2, #0
 80055de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055e2:	4891      	ldr	r0, [pc, #580]	; (8005828 <mainTask+0x76c>)
 80055e4:	f002 fe5b 	bl	800829e <HAL_GPIO_WritePin>
				motorcalisiyor=0;
 80055e8:	4b90      	ldr	r3, [pc, #576]	; (800582c <mainTask+0x770>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
			}

			/*YUKARI ÇALISMA*/

			if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 80055ee:	4b90      	ldr	r3, [pc, #576]	; (8005830 <mainTask+0x774>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d160      	bne.n	80056b8 <mainTask+0x5fc>
 80055f6:	4b8f      	ldr	r3, [pc, #572]	; (8005834 <mainTask+0x778>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d05c      	beq.n	80056b8 <mainTask+0x5fc>
 80055fe:	4b8e      	ldr	r3, [pc, #568]	; (8005838 <mainTask+0x77c>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d058      	beq.n	80056b8 <mainTask+0x5fc>
						&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800560a:	4887      	ldr	r0, [pc, #540]	; (8005828 <mainTask+0x76c>)
 800560c:	f002 fe30 	bl	8008270 <HAL_GPIO_ReadPin>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <mainTask+0x562>
 8005616:	4b89      	ldr	r3, [pc, #548]	; (800583c <mainTask+0x780>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d04c      	beq.n	80056b8 <mainTask+0x5fc>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800561e:	2102      	movs	r1, #2
 8005620:	4887      	ldr	r0, [pc, #540]	; (8005840 <mainTask+0x784>)
 8005622:	f002 fe25 	bl	8008270 <HAL_GPIO_ReadPin>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d145      	bne.n	80056b8 <mainTask+0x5fc>
						&& (basincVar)
 800562c:	4b85      	ldr	r3, [pc, #532]	; (8005844 <mainTask+0x788>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d041      	beq.n	80056b8 <mainTask+0x5fc>
						&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005638:	487b      	ldr	r0, [pc, #492]	; (8005828 <mainTask+0x76c>)
 800563a:	f002 fe19 	bl	8008270 <HAL_GPIO_ReadPin>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10e      	bne.n	8005662 <mainTask+0x5a6>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005648:	4877      	ldr	r0, [pc, #476]	; (8005828 <mainTask+0x76c>)
 800564a:	f002 fe11 	bl	8008270 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <mainTask+0x5a6>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	487a      	ldr	r0, [pc, #488]	; (8005840 <mainTask+0x784>)
 8005658:	f002 fe0a 	bl	8008270 <HAL_GPIO_ReadPin>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d003      	beq.n	800566a <mainTask+0x5ae>
 8005662:	4b79      	ldr	r3, [pc, #484]	; (8005848 <mainTask+0x78c>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d026      	beq.n	80056b8 <mainTask+0x5fc>
						&& (asagivalfcalisiyor==0)
 800566a:	4b78      	ldr	r3, [pc, #480]	; (800584c <mainTask+0x790>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f083 0301 	eor.w	r3, r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01f      	beq.n	80056b8 <mainTask+0x5fc>
						&& (devmotoryukaricalisiyor==0)
 8005678:	4b75      	ldr	r3, [pc, #468]	; (8005850 <mainTask+0x794>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d018      	beq.n	80056b8 <mainTask+0x5fc>
						&& (devmotorasagicalisiyor==0)
 8005686:	4b73      	ldr	r3, [pc, #460]	; (8005854 <mainTask+0x798>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f083 0301 	eor.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <mainTask+0x5fc>
						&&(devyukarivalfcalisiyor==0)
 8005694:	4b70      	ldr	r3, [pc, #448]	; (8005858 <mainTask+0x79c>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f083 0301 	eor.w	r3, r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <mainTask+0x5fc>
						&&(devasagivalfcalisiyor==0)) {
 80056a2:	4b6e      	ldr	r3, [pc, #440]	; (800585c <mainTask+0x7a0>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f083 0301 	eor.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <mainTask+0x5fc>
				yukarimotorcalisiyor=1;
 80056b0:	4b65      	ldr	r3, [pc, #404]	; (8005848 <mainTask+0x78c>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e002      	b.n	80056be <mainTask+0x602>
			} else {
				yukarimotorcalisiyor=0;
 80056b8:	4b63      	ldr	r3, [pc, #396]	; (8005848 <mainTask+0x78c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
			}

			if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80056be:	4b62      	ldr	r3, [pc, #392]	; (8005848 <mainTask+0x78c>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d012      	beq.n	80056ec <mainTask+0x630>
 80056c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ca:	485d      	ldr	r0, [pc, #372]	; (8005840 <mainTask+0x784>)
 80056cc:	f002 fdd0 	bl	8008270 <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10a      	bne.n	80056ec <mainTask+0x630>
 80056d6:	4b62      	ldr	r3, [pc, #392]	; (8005860 <mainTask+0x7a4>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <mainTask+0x630>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80056de:	2201      	movs	r2, #1
 80056e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056e4:	4850      	ldr	r0, [pc, #320]	; (8005828 <mainTask+0x76c>)
 80056e6:	f002 fdda 	bl	800829e <HAL_GPIO_WritePin>
 80056ea:	e005      	b.n	80056f8 <mainTask+0x63c>
			} else {
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80056ec:	2200      	movs	r2, #0
 80056ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056f2:	484d      	ldr	r0, [pc, #308]	; (8005828 <mainTask+0x76c>)
 80056f4:	f002 fdd3 	bl	800829e <HAL_GPIO_WritePin>
			}

			if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <mainTask+0x78c>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d013      	beq.n	8005728 <mainTask+0x66c>
 8005700:	4b58      	ldr	r3, [pc, #352]	; (8005864 <mainTask+0x7a8>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d007      	beq.n	8005718 <mainTask+0x65c>
 8005708:	4b56      	ldr	r3, [pc, #344]	; (8005864 <mainTask+0x7a8>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d003      	beq.n	8005718 <mainTask+0x65c>
 8005710:	4b55      	ldr	r3, [pc, #340]	; (8005868 <mainTask+0x7ac>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <mainTask+0x66c>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005718:	2201      	movs	r2, #1
 800571a:	2104      	movs	r1, #4
 800571c:	4842      	ldr	r0, [pc, #264]	; (8005828 <mainTask+0x76c>)
 800571e:	f002 fdbe 	bl	800829e <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=1;
 8005722:	4b52      	ldr	r3, [pc, #328]	; (800586c <mainTask+0x7b0>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
			}

			// yukari valf timer calisması

			if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <mainTask+0x7b0>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02f      	beq.n	8005790 <mainTask+0x6d4>
 8005730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005734:	483c      	ldr	r0, [pc, #240]	; (8005828 <mainTask+0x76c>)
 8005736:	f002 fd9b 	bl	8008270 <HAL_GPIO_ReadPin>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <mainTask+0x692>
 8005740:	4b3e      	ldr	r3, [pc, #248]	; (800583c <mainTask+0x780>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <mainTask+0x6a0>
 800574e:	2102      	movs	r1, #2
 8005750:	483b      	ldr	r0, [pc, #236]	; (8005840 <mainTask+0x784>)
 8005752:	f002 fd8d 	bl	8008270 <HAL_GPIO_ReadPin>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d119      	bne.n	8005790 <mainTask+0x6d4>
 800575c:	4b35      	ldr	r3, [pc, #212]	; (8005834 <mainTask+0x778>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <mainTask+0x6d4>
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <mainTask+0x77c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <mainTask+0x6d4>
 800576c:	4b35      	ldr	r3, [pc, #212]	; (8005844 <mainTask+0x788>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00d      	beq.n	8005790 <mainTask+0x6d4>
 8005774:	4b3e      	ldr	r3, [pc, #248]	; (8005870 <mainTask+0x7b4>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f083 0301 	eor.w	r3, r3, #1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <mainTask+0x6d4>
				timer2=millis;
 8005782:	4b3c      	ldr	r3, [pc, #240]	; (8005874 <mainTask+0x7b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <mainTask+0x7bc>)
 8005788:	6013      	str	r3, [r2, #0]
				butonKontrol3=1;
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <mainTask+0x7b4>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <mainTask+0x7b8>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <mainTask+0x7bc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	4a38      	ldr	r2, [pc, #224]	; (800587c <mainTask+0x7c0>)
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	4293      	cmp	r3, r2
 80057a0:	d303      	bcc.n	80057aa <mainTask+0x6ee>
 80057a2:	4b33      	ldr	r3, [pc, #204]	; (8005870 <mainTask+0x7b4>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d111      	bne.n	80057ce <mainTask+0x712>
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <mainTask+0x778>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f083 0301 	eor.w	r3, r3, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <mainTask+0x712>
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <mainTask+0x77c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <mainTask+0x712>
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <mainTask+0x788>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <mainTask+0x728>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80057ce:	2200      	movs	r2, #0
 80057d0:	2104      	movs	r1, #4
 80057d2:	4815      	ldr	r0, [pc, #84]	; (8005828 <mainTask+0x76c>)
 80057d4:	f002 fd63 	bl	800829e <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=0;
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <mainTask+0x7b0>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
				butonKontrol3=0;
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <mainTask+0x7b4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
			}

			//Ond safety

			if(emniyetCercevesi==0) {
 80057e4:	4b26      	ldr	r3, [pc, #152]	; (8005880 <mainTask+0x7c4>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <mainTask+0x736>
				cerceveVar=1;
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <mainTask+0x7c8>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
			}

			if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <mainTask+0x7c4>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d148      	bne.n	800588c <mainTask+0x7d0>
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <mainTask+0x7cc>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d144      	bne.n	800588c <mainTask+0x7d0>
 8005802:	2101      	movs	r1, #1
 8005804:	480e      	ldr	r0, [pc, #56]	; (8005840 <mainTask+0x784>)
 8005806:	f002 fd33 	bl	8008270 <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d13d      	bne.n	800588c <mainTask+0x7d0>
 8005810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005814:	4804      	ldr	r0, [pc, #16]	; (8005828 <mainTask+0x76c>)
 8005816:	f002 fd2b 	bl	8008270 <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d135      	bne.n	800588c <mainTask+0x7d0>
				cerceveVar=1;
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <mainTask+0x7c8>)
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e043      	b.n	80058b0 <mainTask+0x7f4>
 8005828:	40010c00 	.word	0x40010c00
 800582c:	20000cd3 	.word	0x20000cd3
 8005830:	20000c9d 	.word	0x20000c9d
 8005834:	20000cd1 	.word	0x20000cd1
 8005838:	20000cd2 	.word	0x20000cd2
 800583c:	20000cbb 	.word	0x20000cbb
 8005840:	40011000 	.word	0x40011000
 8005844:	20000c83 	.word	0x20000c83
 8005848:	20000cb4 	.word	0x20000cb4
 800584c:	20000cb7 	.word	0x20000cb7
 8005850:	20000cb5 	.word	0x20000cb5
 8005854:	20000cb6 	.word	0x20000cb6
 8005858:	20000cb9 	.word	0x20000cb9
 800585c:	20000cba 	.word	0x20000cba
 8005860:	20000c8e 	.word	0x20000c8e
 8005864:	20000c8f 	.word	0x20000c8f
 8005868:	20000c93 	.word	0x20000c93
 800586c:	20000cb8 	.word	0x20000cb8
 8005870:	20000cb0 	.word	0x20000cb0
 8005874:	20000c60 	.word	0x20000c60
 8005878:	20000c6c 	.word	0x20000c6c
 800587c:	20000c94 	.word	0x20000c94
 8005880:	20000c84 	.word	0x20000c84
 8005884:	20000cd6 	.word	0x20000cd6
 8005888:	20000c81 	.word	0x20000c81
			} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800588c:	4b91      	ldr	r3, [pc, #580]	; (8005ad4 <mainTask+0xa18>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10d      	bne.n	80058b0 <mainTask+0x7f4>
 8005894:	2101      	movs	r1, #1
 8005896:	4890      	ldr	r0, [pc, #576]	; (8005ad8 <mainTask+0xa1c>)
 8005898:	f002 fcea 	bl	8008270 <HAL_GPIO_ReadPin>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d106      	bne.n	80058b0 <mainTask+0x7f4>
 80058a2:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <mainTask+0xa20>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <mainTask+0x7f4>
				cerceveVar=0;
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <mainTask+0xa24>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
			}

			if (emniyetCercevesi==1 && calismaSekli==1) {
 80058b0:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <mainTask+0xa18>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d111      	bne.n	80058dc <mainTask+0x820>
 80058b8:	4b88      	ldr	r3, [pc, #544]	; (8005adc <mainTask+0xa20>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10d      	bne.n	80058dc <mainTask+0x820>
				if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80058c0:	2101      	movs	r1, #1
 80058c2:	4885      	ldr	r0, [pc, #532]	; (8005ad8 <mainTask+0xa1c>)
 80058c4:	f002 fcd4 	bl	8008270 <HAL_GPIO_ReadPin>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <mainTask+0x81a>
					cerceveVar=1;
 80058ce:	4b84      	ldr	r3, [pc, #528]	; (8005ae0 <mainTask+0xa24>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e002      	b.n	80058dc <mainTask+0x820>
				} else {
					cerceveVar=0;
 80058d6:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <mainTask+0xa24>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
				}
			}

			//Asagi calisma
			if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80058dc:	4b81      	ldr	r3, [pc, #516]	; (8005ae4 <mainTask+0xa28>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d17c      	bne.n	80059de <mainTask+0x922>
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <mainTask+0xa2c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d078      	beq.n	80059de <mainTask+0x922>
 80058ec:	4b7f      	ldr	r3, [pc, #508]	; (8005aec <mainTask+0xa30>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d074      	beq.n	80059de <mainTask+0x922>
					&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80058f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f8:	487d      	ldr	r0, [pc, #500]	; (8005af0 <mainTask+0xa34>)
 80058fa:	f002 fcb9 	bl	8008270 <HAL_GPIO_ReadPin>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <mainTask+0x850>
 8005904:	4b7b      	ldr	r3, [pc, #492]	; (8005af4 <mainTask+0xa38>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d068      	beq.n	80059de <mainTask+0x922>
					&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800590c:	4b74      	ldr	r3, [pc, #464]	; (8005ae0 <mainTask+0xa24>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d064      	beq.n	80059de <mainTask+0x922>
 8005914:	4b78      	ldr	r3, [pc, #480]	; (8005af8 <mainTask+0xa3c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f083 0301 	eor.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d05d      	beq.n	80059de <mainTask+0x922>
					&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005922:	2104      	movs	r1, #4
 8005924:	486c      	ldr	r0, [pc, #432]	; (8005ad8 <mainTask+0xa1c>)
 8005926:	f002 fca3 	bl	8008270 <HAL_GPIO_ReadPin>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <mainTask+0x87c>
 8005930:	4b72      	ldr	r3, [pc, #456]	; (8005afc <mainTask+0xa40>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d152      	bne.n	80059de <mainTask+0x922>
					&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800593c:	486c      	ldr	r0, [pc, #432]	; (8005af0 <mainTask+0xa34>)
 800593e:	f002 fc97 	bl	8008270 <HAL_GPIO_ReadPin>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10e      	bne.n	8005966 <mainTask+0x8aa>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800594c:	4868      	ldr	r0, [pc, #416]	; (8005af0 <mainTask+0xa34>)
 800594e:	f002 fc8f 	bl	8008270 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d106      	bne.n	8005966 <mainTask+0x8aa>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	485f      	ldr	r0, [pc, #380]	; (8005ad8 <mainTask+0xa1c>)
 800595c:	f002 fc88 	bl	8008270 <HAL_GPIO_ReadPin>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d003      	beq.n	800596e <mainTask+0x8b2>
 8005966:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <mainTask+0xa44>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d037      	beq.n	80059de <mainTask+0x922>
					&& (yukarimotorcalisiyor==0)
 800596e:	4b65      	ldr	r3, [pc, #404]	; (8005b04 <mainTask+0xa48>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f083 0301 	eor.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d030      	beq.n	80059de <mainTask+0x922>
					&& (yukarivalfcalisiyor==0)
 800597c:	4b62      	ldr	r3, [pc, #392]	; (8005b08 <mainTask+0xa4c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f083 0301 	eor.w	r3, r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d029      	beq.n	80059de <mainTask+0x922>
			  	  	&& (devmotoryukaricalisiyor==0)
 800598a:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <mainTask+0xa50>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f083 0301 	eor.w	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <mainTask+0x922>
					&& (devmotorasagicalisiyor==0)
 8005998:	4b5d      	ldr	r3, [pc, #372]	; (8005b10 <mainTask+0xa54>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f083 0301 	eor.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01b      	beq.n	80059de <mainTask+0x922>
					&& (devyukarivalfcalisiyor==0)
 80059a6:	4b5b      	ldr	r3, [pc, #364]	; (8005b14 <mainTask+0xa58>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d014      	beq.n	80059de <mainTask+0x922>
					&& (devasagivalfcalisiyor==0)) {
 80059b4:	4b58      	ldr	r3, [pc, #352]	; (8005b18 <mainTask+0xa5c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	f083 0301 	eor.w	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <mainTask+0x922>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059c2:	2201      	movs	r2, #1
 80059c4:	2102      	movs	r1, #2
 80059c6:	484a      	ldr	r0, [pc, #296]	; (8005af0 <mainTask+0xa34>)
 80059c8:	f002 fc69 	bl	800829e <HAL_GPIO_WritePin>
				asagivalfcalisiyor=1;
 80059cc:	4b4c      	ldr	r3, [pc, #304]	; (8005b00 <mainTask+0xa44>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=1;
 80059d2:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <mainTask+0xa60>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=1;
 80059d8:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <mainTask+0xa64>)
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
			}

			// asagi valf timer calisması

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80059de:	4b48      	ldr	r3, [pc, #288]	; (8005b00 <mainTask+0xa44>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d033      	beq.n	8005a4e <mainTask+0x992>
 80059e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059ea:	4841      	ldr	r0, [pc, #260]	; (8005af0 <mainTask+0xa34>)
 80059ec:	f002 fc40 	bl	8008270 <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d106      	bne.n	8005a04 <mainTask+0x948>
 80059f6:	4b3f      	ldr	r3, [pc, #252]	; (8005af4 <mainTask+0xa38>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f083 0301 	eor.w	r3, r3, #1
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <mainTask+0x95e>
 8005a04:	2104      	movs	r1, #4
 8005a06:	4834      	ldr	r0, [pc, #208]	; (8005ad8 <mainTask+0xa1c>)
 8005a08:	f002 fc32 	bl	8008270 <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d11d      	bne.n	8005a4e <mainTask+0x992>
 8005a12:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <mainTask+0xa40>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d019      	beq.n	8005a4e <mainTask+0x992>
 8005a1a:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <mainTask+0xa2c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d015      	beq.n	8005a4e <mainTask+0x992>
 8005a22:	4b32      	ldr	r3, [pc, #200]	; (8005aec <mainTask+0xa30>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <mainTask+0x992>
 8005a2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ae0 <mainTask+0xa24>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <mainTask+0x992>
 8005a32:	4b3c      	ldr	r3, [pc, #240]	; (8005b24 <mainTask+0xa68>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f083 0301 	eor.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <mainTask+0x992>
				timer2=millis;
 8005a40:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <mainTask+0xa6c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a39      	ldr	r2, [pc, #228]	; (8005b2c <mainTask+0xa70>)
 8005a46:	6013      	str	r3, [r2, #0]
				butonKontrol2=1;
 8005a48:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <mainTask+0xa68>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005a4e:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <mainTask+0xa6c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <mainTask+0xa70>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	4a35      	ldr	r2, [pc, #212]	; (8005b30 <mainTask+0xa74>)
 8005a5a:	7812      	ldrb	r2, [r2, #0]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d303      	bcc.n	8005a68 <mainTask+0x9ac>
 8005a60:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <mainTask+0xa68>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d114      	bne.n	8005a92 <mainTask+0x9d6>
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <mainTask+0xa2c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <mainTask+0x9d6>
 8005a76:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <mainTask+0xa30>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	f083 0301 	eor.w	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <mainTask+0x9d6>
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <mainTask+0xa24>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f083 0301 	eor.w	r3, r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <mainTask+0x9ec>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2102      	movs	r1, #2
 8005a96:	4816      	ldr	r0, [pc, #88]	; (8005af0 <mainTask+0xa34>)
 8005a98:	f002 fc01 	bl	800829e <HAL_GPIO_WritePin>
				asagivalfcalisiyor=0;
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <mainTask+0xa44>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
				butonKontrol2=0;
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <mainTask+0xa68>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
			}

			//yavaslama valf

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <mainTask+0xa44>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d043      	beq.n	8005b38 <mainTask+0xa7c>
 8005ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ab4:	4808      	ldr	r0, [pc, #32]	; (8005ad8 <mainTask+0xa1c>)
 8005ab6:	f002 fbdb 	bl	8008270 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d13b      	bne.n	8005b38 <mainTask+0xa7c>
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <mainTask+0xa78>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d037      	beq.n	8005b38 <mainTask+0xa7c>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2101      	movs	r1, #1
 8005acc:	4808      	ldr	r0, [pc, #32]	; (8005af0 <mainTask+0xa34>)
 8005ace:	f002 fbe6 	bl	800829e <HAL_GPIO_WritePin>
 8005ad2:	e036      	b.n	8005b42 <mainTask+0xa86>
 8005ad4:	20000c84 	.word	0x20000c84
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	20000c81 	.word	0x20000c81
 8005ae0:	20000cd6 	.word	0x20000cd6
 8005ae4:	20000c9d 	.word	0x20000c9d
 8005ae8:	20000cd1 	.word	0x20000cd1
 8005aec:	20000cd2 	.word	0x20000cd2
 8005af0:	40010c00 	.word	0x40010c00
 8005af4:	20000cbc 	.word	0x20000cbc
 8005af8:	20000cd0 	.word	0x20000cd0
 8005afc:	20000c86 	.word	0x20000c86
 8005b00:	20000cb7 	.word	0x20000cb7
 8005b04:	20000cb4 	.word	0x20000cb4
 8005b08:	20000cb8 	.word	0x20000cb8
 8005b0c:	20000cb5 	.word	0x20000cb5
 8005b10:	20000cb6 	.word	0x20000cb6
 8005b14:	20000cb9 	.word	0x20000cb9
 8005b18:	20000cba 	.word	0x20000cba
 8005b1c:	20000cbf 	.word	0x20000cbf
 8005b20:	20000ce0 	.word	0x20000ce0
 8005b24:	20000caf 	.word	0x20000caf
 8005b28:	20000c60 	.word	0x20000c60
 8005b2c:	20000c6c 	.word	0x20000c6c
 8005b30:	20000c95 	.word	0x20000c95
 8005b34:	20000c85 	.word	0x20000c85
			} else {
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4836      	ldr	r0, [pc, #216]	; (8005c18 <mainTask+0xb5c>)
 8005b3e:	f002 fbae 	bl	800829e <HAL_GPIO_WritePin>
			}

			/*DEVIRME veya YURUYUS Baslangic*/

			// Devirme Yukari veya yuruyus ileri calisma
			if((menuGiris==0)
 8005b42:	4b36      	ldr	r3, [pc, #216]	; (8005c1c <mainTask+0xb60>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 8080 	bne.w	8005c4c <mainTask+0xb90>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005b4c:	4b34      	ldr	r3, [pc, #208]	; (8005c20 <mainTask+0xb64>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d003      	beq.n	8005b5c <mainTask+0xaa0>
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <mainTask+0xb64>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d177      	bne.n	8005c4c <mainTask+0xb90>
					&& (stopVar) && (kapiSivicVar)
 8005b5c:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <mainTask+0xb68>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d073      	beq.n	8005c4c <mainTask+0xb90>
 8005b64:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <mainTask+0xb6c>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d06f      	beq.n	8005c4c <mainTask+0xb90>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b70:	4829      	ldr	r0, [pc, #164]	; (8005c18 <mainTask+0xb5c>)
 8005b72:	f002 fb7d 	bl	8008270 <HAL_GPIO_ReadPin>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d167      	bne.n	8005c4c <mainTask+0xb90>
					&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b80:	482a      	ldr	r0, [pc, #168]	; (8005c2c <mainTask+0xb70>)
 8005b82:	f002 fb75 	bl	8008270 <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <mainTask+0xad8>
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <mainTask+0xb74>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d15b      	bne.n	8005c4c <mainTask+0xb90>
					&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	4825      	ldr	r0, [pc, #148]	; (8005c2c <mainTask+0xb70>)
 8005b98:	f002 fb6a 	bl	8008270 <HAL_GPIO_ReadPin>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10f      	bne.n	8005bc2 <mainTask+0xb06>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ba6:	481c      	ldr	r0, [pc, #112]	; (8005c18 <mainTask+0xb5c>)
 8005ba8:	f002 fb62 	bl	8008270 <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <mainTask+0xb06>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bb6:	4818      	ldr	r0, [pc, #96]	; (8005c18 <mainTask+0xb5c>)
 8005bb8:	f002 fb5a 	bl	8008270 <HAL_GPIO_ReadPin>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d003      	beq.n	8005bca <mainTask+0xb0e>
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <mainTask+0xb78>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d040      	beq.n	8005c4c <mainTask+0xb90>
					&& (yukarimotorcalisiyor==0)
 8005bca:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <mainTask+0xb7c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d039      	beq.n	8005c4c <mainTask+0xb90>
					&& (yukarivalfcalisiyor==0)
 8005bd8:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <mainTask+0xb80>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f083 0301 	eor.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d032      	beq.n	8005c4c <mainTask+0xb90>
					&& (asagivalfcalisiyor==0)
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <mainTask+0xb84>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02b      	beq.n	8005c4c <mainTask+0xb90>
					&& (devmotorasagicalisiyor==0)
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <mainTask+0xb88>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d024      	beq.n	8005c4c <mainTask+0xb90>
					&&(devasagivalfcalisiyor==0)) {
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <mainTask+0xb8c>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f083 0301 	eor.w	r3, r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01d      	beq.n	8005c4c <mainTask+0xb90>

				devmotoryukaricalisiyor=1;
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <mainTask+0xb78>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e01c      	b.n	8005c52 <mainTask+0xb96>
 8005c18:	40010c00 	.word	0x40010c00
 8005c1c:	20000c9d 	.word	0x20000c9d
 8005c20:	20000c8f 	.word	0x20000c8f
 8005c24:	20000cd1 	.word	0x20000cd1
 8005c28:	20000cd2 	.word	0x20000cd2
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	20000c90 	.word	0x20000c90
 8005c34:	20000cb5 	.word	0x20000cb5
 8005c38:	20000cb4 	.word	0x20000cb4
 8005c3c:	20000cb8 	.word	0x20000cb8
 8005c40:	20000cb7 	.word	0x20000cb7
 8005c44:	20000cb6 	.word	0x20000cb6
 8005c48:	20000cba 	.word	0x20000cba
			} else {
				devmotoryukaricalisiyor=0;
 8005c4c:	4b64      	ldr	r3, [pc, #400]	; (8005de0 <mainTask+0xd24>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
			}

			if(devmotoryukaricalisiyor==1) {
 8005c52:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <mainTask+0xd24>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <mainTask+0xbae>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	2120      	movs	r1, #32
 8005c5e:	4861      	ldr	r0, [pc, #388]	; (8005de4 <mainTask+0xd28>)
 8005c60:	f002 fb1d 	bl	800829e <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=1;
 8005c64:	4b60      	ldr	r3, [pc, #384]	; (8005de8 <mainTask+0xd2c>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
			}
			// devirme yukari + yuruyus ileri valf timer calismasi

			if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <mainTask+0xd2c>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d025      	beq.n	8005cbe <mainTask+0xc02>
 8005c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c76:	485d      	ldr	r0, [pc, #372]	; (8005dec <mainTask+0xd30>)
 8005c78:	f002 fafa 	bl	8008270 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d007      	beq.n	8005c92 <mainTask+0xbd6>
 8005c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c86:	4857      	ldr	r0, [pc, #348]	; (8005de4 <mainTask+0xd28>)
 8005c88:	f002 faf2 	bl	8008270 <HAL_GPIO_ReadPin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d115      	bne.n	8005cbe <mainTask+0xc02>
 8005c92:	4b57      	ldr	r3, [pc, #348]	; (8005df0 <mainTask+0xd34>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <mainTask+0xc02>
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <mainTask+0xd38>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00d      	beq.n	8005cbe <mainTask+0xc02>
 8005ca2:	4b55      	ldr	r3, [pc, #340]	; (8005df8 <mainTask+0xd3c>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f083 0301 	eor.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d006      	beq.n	8005cbe <mainTask+0xc02>
				timer2=millis;
 8005cb0:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <mainTask+0xd40>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a52      	ldr	r2, [pc, #328]	; (8005e00 <mainTask+0xd44>)
 8005cb6:	6013      	str	r3, [r2, #0]
				butonKontrol4=1;
 8005cb8:	4b4f      	ldr	r3, [pc, #316]	; (8005df8 <mainTask+0xd3c>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005cbe:	4b4f      	ldr	r3, [pc, #316]	; (8005dfc <mainTask+0xd40>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	; (8005e00 <mainTask+0xd44>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <mainTask+0xd48>)
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d303      	bcc.n	8005cd8 <mainTask+0xc1c>
 8005cd0:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <mainTask+0xd3c>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10d      	bne.n	8005cf4 <mainTask+0xc38>
 8005cd8:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <mainTask+0xd34>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <mainTask+0xc38>
 8005ce6:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <mainTask+0xd38>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <mainTask+0xc4e>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	483a      	ldr	r0, [pc, #232]	; (8005de4 <mainTask+0xd28>)
 8005cfa:	f002 fad0 	bl	800829e <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=0;
 8005cfe:	4b3a      	ldr	r3, [pc, #232]	; (8005de8 <mainTask+0xd2c>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
				butonKontrol4=0;
 8005d04:	4b3c      	ldr	r3, [pc, #240]	; (8005df8 <mainTask+0xd3c>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
			}

			// Devirme Asagi veya yuruyus geri calisma

			if((menuGiris==0)
 8005d0a:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <mainTask+0xd4c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 8088 	bne.w	8005e24 <mainTask+0xd68>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005d14:	4b3d      	ldr	r3, [pc, #244]	; (8005e0c <mainTask+0xd50>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d003      	beq.n	8005d24 <mainTask+0xc68>
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <mainTask+0xd50>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d17f      	bne.n	8005e24 <mainTask+0xd68>
					&& (stopVar) && (kapiSivicVar)
 8005d24:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <mainTask+0xd34>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d07b      	beq.n	8005e24 <mainTask+0xd68>
 8005d2c:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <mainTask+0xd38>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d077      	beq.n	8005e24 <mainTask+0xd68>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005d34:	2140      	movs	r1, #64	; 0x40
 8005d36:	482b      	ldr	r0, [pc, #172]	; (8005de4 <mainTask+0xd28>)
 8005d38:	f002 fa9a 	bl	8008270 <HAL_GPIO_ReadPin>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d170      	bne.n	8005e24 <mainTask+0xd68>
					&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d46:	4827      	ldr	r0, [pc, #156]	; (8005de4 <mainTask+0xd28>)
 8005d48:	f002 fa92 	bl	8008270 <HAL_GPIO_ReadPin>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <mainTask+0xc9e>
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <mainTask+0xd54>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d164      	bne.n	8005e24 <mainTask+0xd68>
					&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d5e:	4823      	ldr	r0, [pc, #140]	; (8005dec <mainTask+0xd30>)
 8005d60:	f002 fa86 	bl	8008270 <HAL_GPIO_ReadPin>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10f      	bne.n	8005d8a <mainTask+0xcce>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d6e:	481f      	ldr	r0, [pc, #124]	; (8005dec <mainTask+0xd30>)
 8005d70:	f002 fa7e 	bl	8008270 <HAL_GPIO_ReadPin>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <mainTask+0xcce>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d7e:	481b      	ldr	r0, [pc, #108]	; (8005dec <mainTask+0xd30>)
 8005d80:	f002 fa76 	bl	8008270 <HAL_GPIO_ReadPin>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d003      	beq.n	8005d92 <mainTask+0xcd6>
 8005d8a:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <mainTask+0xd58>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d048      	beq.n	8005e24 <mainTask+0xd68>
					&& (yukarimotorcalisiyor==0)
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <mainTask+0xd5c>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f083 0301 	eor.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d041      	beq.n	8005e24 <mainTask+0xd68>
					&& (yukarivalfcalisiyor==0)
 8005da0:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <mainTask+0xd60>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d03a      	beq.n	8005e24 <mainTask+0xd68>
					&& (asagivalfcalisiyor==0)
 8005dae:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <mainTask+0xd64>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d033      	beq.n	8005e24 <mainTask+0xd68>
					&& (devyukarivalfcalisiyor==0)
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <mainTask+0xd2c>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f083 0301 	eor.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02c      	beq.n	8005e24 <mainTask+0xd68>
					&& (devmotoryukaricalisiyor==0)) {
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <mainTask+0xd24>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f083 0301 	eor.w	r3, r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d025      	beq.n	8005e24 <mainTask+0xd68>

				devmotorasagicalisiyor=1;
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <mainTask+0xd58>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e024      	b.n	8005e2a <mainTask+0xd6e>
 8005de0:	20000cb5 	.word	0x20000cb5
 8005de4:	40011000 	.word	0x40011000
 8005de8:	20000cb9 	.word	0x20000cb9
 8005dec:	40010c00 	.word	0x40010c00
 8005df0:	20000cd1 	.word	0x20000cd1
 8005df4:	20000cd2 	.word	0x20000cd2
 8005df8:	20000cb1 	.word	0x20000cb1
 8005dfc:	20000c60 	.word	0x20000c60
 8005e00:	20000c6c 	.word	0x20000c6c
 8005e04:	20000c96 	.word	0x20000c96
 8005e08:	20000c9d 	.word	0x20000c9d
 8005e0c:	20000c8f 	.word	0x20000c8f
 8005e10:	20000c91 	.word	0x20000c91
 8005e14:	20000cb6 	.word	0x20000cb6
 8005e18:	20000cb4 	.word	0x20000cb4
 8005e1c:	20000cb8 	.word	0x20000cb8
 8005e20:	20000cb7 	.word	0x20000cb7
			} else {
				devmotorasagicalisiyor=0;
 8005e24:	4b96      	ldr	r3, [pc, #600]	; (8006080 <mainTask+0xfc4>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
			}

			if(devmotorasagicalisiyor==1) {
 8005e2a:	4b95      	ldr	r3, [pc, #596]	; (8006080 <mainTask+0xfc4>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <mainTask+0xd86>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005e32:	2201      	movs	r2, #1
 8005e34:	2110      	movs	r1, #16
 8005e36:	4893      	ldr	r0, [pc, #588]	; (8006084 <mainTask+0xfc8>)
 8005e38:	f002 fa31 	bl	800829e <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=1;
 8005e3c:	4b92      	ldr	r3, [pc, #584]	; (8006088 <mainTask+0xfcc>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	701a      	strb	r2, [r3, #0]
			}

			//devirme asagi + geri valf timer calismasi

			if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005e42:	4b91      	ldr	r3, [pc, #580]	; (8006088 <mainTask+0xfcc>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d024      	beq.n	8005e94 <mainTask+0xdd8>
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	488d      	ldr	r0, [pc, #564]	; (8006084 <mainTask+0xfc8>)
 8005e4e:	f002 fa0f 	bl	8008270 <HAL_GPIO_ReadPin>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d007      	beq.n	8005e68 <mainTask+0xdac>
 8005e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e5c:	4889      	ldr	r0, [pc, #548]	; (8006084 <mainTask+0xfc8>)
 8005e5e:	f002 fa07 	bl	8008270 <HAL_GPIO_ReadPin>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d115      	bne.n	8005e94 <mainTask+0xdd8>
 8005e68:	4b88      	ldr	r3, [pc, #544]	; (800608c <mainTask+0xfd0>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <mainTask+0xdd8>
 8005e70:	4b87      	ldr	r3, [pc, #540]	; (8006090 <mainTask+0xfd4>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <mainTask+0xdd8>
 8005e78:	4b86      	ldr	r3, [pc, #536]	; (8006094 <mainTask+0xfd8>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f083 0301 	eor.w	r3, r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <mainTask+0xdd8>
				timer2=millis;
 8005e86:	4b84      	ldr	r3, [pc, #528]	; (8006098 <mainTask+0xfdc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a84      	ldr	r2, [pc, #528]	; (800609c <mainTask+0xfe0>)
 8005e8c:	6013      	str	r3, [r2, #0]
				butonKontrol5=1;
 8005e8e:	4b81      	ldr	r3, [pc, #516]	; (8006094 <mainTask+0xfd8>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e94:	4b80      	ldr	r3, [pc, #512]	; (8006098 <mainTask+0xfdc>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b80      	ldr	r3, [pc, #512]	; (800609c <mainTask+0xfe0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	4a80      	ldr	r2, [pc, #512]	; (80060a0 <mainTask+0xfe4>)
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d303      	bcc.n	8005eae <mainTask+0xdf2>
 8005ea6:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <mainTask+0xfd8>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <mainTask+0xe0e>
 8005eae:	4b77      	ldr	r3, [pc, #476]	; (800608c <mainTask+0xfd0>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f083 0301 	eor.w	r3, r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <mainTask+0xe0e>
 8005ebc:	4b74      	ldr	r3, [pc, #464]	; (8006090 <mainTask+0xfd4>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f083 0301 	eor.w	r3, r3, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <mainTask+0xe24>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2110      	movs	r1, #16
 8005ece:	486d      	ldr	r0, [pc, #436]	; (8006084 <mainTask+0xfc8>)
 8005ed0:	f002 f9e5 	bl	800829e <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=0;
 8005ed4:	4b6c      	ldr	r3, [pc, #432]	; (8006088 <mainTask+0xfcc>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
				butonKontrol5=0;
 8005eda:	4b6e      	ldr	r3, [pc, #440]	; (8006094 <mainTask+0xfd8>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
			}

			// makine durum kontrolü

			if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ee4:	486f      	ldr	r0, [pc, #444]	; (80060a4 <mainTask+0xfe8>)
 8005ee6:	f002 f9c3 	bl	8008270 <HAL_GPIO_ReadPin>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d120      	bne.n	8005f32 <mainTask+0xe76>
					&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ef4:	486b      	ldr	r0, [pc, #428]	; (80060a4 <mainTask+0xfe8>)
 8005ef6:	f002 f9bb 	bl	8008270 <HAL_GPIO_ReadPin>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d118      	bne.n	8005f32 <mainTask+0xe76>
					&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005f00:	2104      	movs	r1, #4
 8005f02:	4868      	ldr	r0, [pc, #416]	; (80060a4 <mainTask+0xfe8>)
 8005f04:	f002 f9b4 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d111      	bne.n	8005f32 <mainTask+0xe76>
					&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4864      	ldr	r0, [pc, #400]	; (80060a4 <mainTask+0xfe8>)
 8005f12:	f002 f9ad 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <mainTask+0xe76>
					&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4861      	ldr	r0, [pc, #388]	; (80060a4 <mainTask+0xfe8>)
 8005f20:	f002 f9a6 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <mainTask+0xe76>
				makineStop=1;
 8005f2a:	4b5f      	ldr	r3, [pc, #380]	; (80060a8 <mainTask+0xfec>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <mainTask+0xe7c>
			} else {
				makineStop=0;
 8005f32:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <mainTask+0xfec>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
			}

			//kapi 1 kontrol

			// kapi 1 prudhome
			if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <mainTask+0xff0>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d144      	bne.n	8005fca <mainTask+0xf0e>
 8005f40:	4b5b      	ldr	r3, [pc, #364]	; (80060b0 <mainTask+0xff4>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d003      	beq.n	8005f50 <mainTask+0xe94>
 8005f48:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <mainTask+0xff4>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d13c      	bne.n	8005fca <mainTask+0xf0e>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	484c      	ldr	r0, [pc, #304]	; (8006084 <mainTask+0xfc8>)
 8005f54:	f002 f98c 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <mainTask+0xeaa>
 8005f5e:	4b55      	ldr	r3, [pc, #340]	; (80060b4 <mainTask+0xff8>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <mainTask+0xec2>
 8005f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f6a:	484e      	ldr	r0, [pc, #312]	; (80060a4 <mainTask+0xfe8>)
 8005f6c:	f002 f980 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d129      	bne.n	8005fca <mainTask+0xf0e>
 8005f76:	4b4f      	ldr	r3, [pc, #316]	; (80060b4 <mainTask+0xff8>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d125      	bne.n	8005fca <mainTask+0xf0e>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f7e:	2104      	movs	r1, #4
 8005f80:	4840      	ldr	r0, [pc, #256]	; (8006084 <mainTask+0xfc8>)
 8005f82:	f002 f975 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d003      	beq.n	8005f94 <mainTask+0xed8>
 8005f8c:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <mainTask+0xffc>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11a      	bne.n	8005fca <mainTask+0xf0e>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f94:	2102      	movs	r1, #2
 8005f96:	483b      	ldr	r0, [pc, #236]	; (8006084 <mainTask+0xfc8>)
 8005f98:	f002 f96a 	bl	8008270 <HAL_GPIO_ReadPin>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <mainTask+0xf0e>
					&&(butonKontrol==0)
 8005fa2:	4b46      	ldr	r3, [pc, #280]	; (80060bc <mainTask+0x1000>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f083 0301 	eor.w	r3, r3, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <mainTask+0xf0e>
					&&(makineStop==1)) {
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <mainTask+0xfec>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <mainTask+0xf0e>

				kapi1prudhome=1;
 8005fb8:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <mainTask+0x1004>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
				timer = millis;
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <mainTask+0xfdc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	; (80060c4 <mainTask+0x1008>)
 8005fc4:	6013      	str	r3, [r2, #0]
				bekle();
 8005fc6:	f7fe fa3f 	bl	8004448 <bekle>
			}

			if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005fca:	4b33      	ldr	r3, [pc, #204]	; (8006098 <mainTask+0xfdc>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b3d      	ldr	r3, [pc, #244]	; (80060c4 <mainTask+0x1008>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <mainTask+0x100c>)
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d211      	bcs.n	8006000 <mainTask+0xf44>
 8005fdc:	2104      	movs	r1, #4
 8005fde:	4829      	ldr	r0, [pc, #164]	; (8006084 <mainTask+0xfc8>)
 8005fe0:	f002 f946 	bl	8008270 <HAL_GPIO_ReadPin>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <mainTask+0xf44>
 8005fea:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <mainTask+0xffc>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <mainTask+0xf44>
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <mainTask+0xfec>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f083 0301 	eor.w	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <mainTask+0xf4a>
				kapi1prudhome=0;
 8006000:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <mainTask+0x1004>)
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 buton kontrol

			if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006006:	4b29      	ldr	r3, [pc, #164]	; (80060ac <mainTask+0xff0>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d160      	bne.n	80060d0 <mainTask+0x1014>
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <mainTask+0xff4>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d003      	beq.n	800601e <mainTask+0xf62>
 8006016:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <mainTask+0xff4>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d158      	bne.n	80060d0 <mainTask+0x1014>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800601e:	2104      	movs	r1, #4
 8006020:	4818      	ldr	r0, [pc, #96]	; (8006084 <mainTask+0xfc8>)
 8006022:	f002 f925 	bl	8008270 <HAL_GPIO_ReadPin>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d003      	beq.n	8006034 <mainTask+0xf78>
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <mainTask+0xffc>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d14d      	bne.n	80060d0 <mainTask+0x1014>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006034:	2102      	movs	r1, #2
 8006036:	4813      	ldr	r0, [pc, #76]	; (8006084 <mainTask+0xfc8>)
 8006038:	f002 f91a 	bl	8008270 <HAL_GPIO_ReadPin>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d146      	bne.n	80060d0 <mainTask+0x1014>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	480f      	ldr	r0, [pc, #60]	; (8006084 <mainTask+0xfc8>)
 8006046:	f002 f913 	bl	8008270 <HAL_GPIO_ReadPin>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <mainTask+0xf9c>
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <mainTask+0xff8>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <mainTask+0xfb4>
 8006058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800605c:	4811      	ldr	r0, [pc, #68]	; (80060a4 <mainTask+0xfe8>)
 800605e:	f002 f907 	bl	8008270 <HAL_GPIO_ReadPin>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d133      	bne.n	80060d0 <mainTask+0x1014>
 8006068:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <mainTask+0xff8>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d12f      	bne.n	80060d0 <mainTask+0x1014>
					&&(makineStop==1)) {
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <mainTask+0xfec>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02b      	beq.n	80060d0 <mainTask+0x1014>

				kapi1butonkontrol=1;
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <mainTask+0x1010>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e02a      	b.n	80060d6 <mainTask+0x101a>
 8006080:	20000cb6 	.word	0x20000cb6
 8006084:	40011000 	.word	0x40011000
 8006088:	20000cba 	.word	0x20000cba
 800608c:	20000cd1 	.word	0x20000cd1
 8006090:	20000cd2 	.word	0x20000cd2
 8006094:	20000cb2 	.word	0x20000cb2
 8006098:	20000c60 	.word	0x20000c60
 800609c:	20000c6c 	.word	0x20000c6c
 80060a0:	20000c96 	.word	0x20000c96
 80060a4:	40010c00 	.word	0x40010c00
 80060a8:	20000cc1 	.word	0x20000cc1
 80060ac:	20000c89 	.word	0x20000c89
 80060b0:	20000c88 	.word	0x20000c88
 80060b4:	20000c8c 	.word	0x20000c8c
 80060b8:	20000c86 	.word	0x20000c86
 80060bc:	20000cae 	.word	0x20000cae
 80060c0:	20000cc2 	.word	0x20000cc2
 80060c4:	20000c64 	.word	0x20000c64
 80060c8:	20000c99 	.word	0x20000c99
 80060cc:	20000cc3 	.word	0x20000cc3
			} else {
				kapi1butonkontrol=0;
 80060d0:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <mainTask+0x1244>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 pizzato

			if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060d6:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <mainTask+0x1248>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d121      	bne.n	8006122 <mainTask+0x1066>
 80060de:	4b8a      	ldr	r3, [pc, #552]	; (8006308 <mainTask+0x124c>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d003      	beq.n	80060ee <mainTask+0x1032>
 80060e6:	4b88      	ldr	r3, [pc, #544]	; (8006308 <mainTask+0x124c>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d119      	bne.n	8006122 <mainTask+0x1066>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80060ee:	2104      	movs	r1, #4
 80060f0:	4886      	ldr	r0, [pc, #536]	; (800630c <mainTask+0x1250>)
 80060f2:	f002 f8bd 	bl	8008270 <HAL_GPIO_ReadPin>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d003      	beq.n	8006104 <mainTask+0x1048>
 80060fc:	4b84      	ldr	r3, [pc, #528]	; (8006310 <mainTask+0x1254>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10e      	bne.n	8006122 <mainTask+0x1066>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006104:	2102      	movs	r1, #2
 8006106:	4881      	ldr	r0, [pc, #516]	; (800630c <mainTask+0x1250>)
 8006108:	f002 f8b2 	bl	8008270 <HAL_GPIO_ReadPin>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <mainTask+0x1066>
					&&(makineStop==1)) {
 8006112:	4b80      	ldr	r3, [pc, #512]	; (8006314 <mainTask+0x1258>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <mainTask+0x1066>

				kapi1pizzato=1;
 800611a:	4b7f      	ldr	r3, [pc, #508]	; (8006318 <mainTask+0x125c>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e002      	b.n	8006128 <mainTask+0x106c>
			} else {
				kapi1pizzato=0;
 8006122:	4b7d      	ldr	r3, [pc, #500]	; (8006318 <mainTask+0x125c>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 çıkış

			if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006128:	4b75      	ldr	r3, [pc, #468]	; (8006300 <mainTask+0x1244>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <mainTask+0x1084>
 8006130:	4b79      	ldr	r3, [pc, #484]	; (8006318 <mainTask+0x125c>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <mainTask+0x1084>
 8006138:	4b78      	ldr	r3, [pc, #480]	; (800631c <mainTask+0x1260>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <mainTask+0x1090>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006140:	2201      	movs	r2, #1
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	4876      	ldr	r0, [pc, #472]	; (8006320 <mainTask+0x1264>)
 8006146:	f002 f8aa 	bl	800829e <HAL_GPIO_WritePin>
 800614a:	e004      	b.n	8006156 <mainTask+0x109a>
			} else {
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	4873      	ldr	r0, [pc, #460]	; (8006320 <mainTask+0x1264>)
 8006152:	f002 f8a4 	bl	800829e <HAL_GPIO_WritePin>

			//kapi2 kontrol

			// kapi 2 prudhome

			if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006156:	4b73      	ldr	r3, [pc, #460]	; (8006324 <mainTask+0x1268>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d141      	bne.n	80061e2 <mainTask+0x1126>
 800615e:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <mainTask+0x124c>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d003      	beq.n	800616e <mainTask+0x10b2>
 8006166:	4b68      	ldr	r3, [pc, #416]	; (8006308 <mainTask+0x124c>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d139      	bne.n	80061e2 <mainTask+0x1126>
					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800616e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006172:	4866      	ldr	r0, [pc, #408]	; (800630c <mainTask+0x1250>)
 8006174:	f002 f87c 	bl	8008270 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <mainTask+0x10ca>
 800617e:	4b6a      	ldr	r3, [pc, #424]	; (8006328 <mainTask+0x126c>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <mainTask+0x10e2>
 8006186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800618a:	4868      	ldr	r0, [pc, #416]	; (800632c <mainTask+0x1270>)
 800618c:	f002 f870 	bl	8008270 <HAL_GPIO_ReadPin>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d125      	bne.n	80061e2 <mainTask+0x1126>
 8006196:	4b64      	ldr	r3, [pc, #400]	; (8006328 <mainTask+0x126c>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d121      	bne.n	80061e2 <mainTask+0x1126>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800619e:	2102      	movs	r1, #2
 80061a0:	485a      	ldr	r0, [pc, #360]	; (800630c <mainTask+0x1250>)
 80061a2:	f002 f865 	bl	8008270 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d11a      	bne.n	80061e2 <mainTask+0x1126>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80061ac:	2104      	movs	r1, #4
 80061ae:	4857      	ldr	r0, [pc, #348]	; (800630c <mainTask+0x1250>)
 80061b0:	f002 f85e 	bl	8008270 <HAL_GPIO_ReadPin>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d113      	bne.n	80061e2 <mainTask+0x1126>
					&&(makineStop==1)
 80061ba:	4b56      	ldr	r3, [pc, #344]	; (8006314 <mainTask+0x1258>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00f      	beq.n	80061e2 <mainTask+0x1126>
					&&(butonKontrol==0)) {
 80061c2:	4b5b      	ldr	r3, [pc, #364]	; (8006330 <mainTask+0x1274>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f083 0301 	eor.w	r3, r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <mainTask+0x1126>

				kapi2prudhome=1;
 80061d0:	4b58      	ldr	r3, [pc, #352]	; (8006334 <mainTask+0x1278>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
				timer = millis;
 80061d6:	4b58      	ldr	r3, [pc, #352]	; (8006338 <mainTask+0x127c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a58      	ldr	r2, [pc, #352]	; (800633c <mainTask+0x1280>)
 80061dc:	6013      	str	r3, [r2, #0]
				bekle();
 80061de:	f7fe f933 	bl	8004448 <bekle>
			}

			if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80061e2:	4b55      	ldr	r3, [pc, #340]	; (8006338 <mainTask+0x127c>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b55      	ldr	r3, [pc, #340]	; (800633c <mainTask+0x1280>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <mainTask+0x1284>)
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d20d      	bcs.n	8006210 <mainTask+0x1154>
 80061f4:	2102      	movs	r1, #2
 80061f6:	4845      	ldr	r0, [pc, #276]	; (800630c <mainTask+0x1250>)
 80061f8:	f002 f83a 	bl	8008270 <HAL_GPIO_ReadPin>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <mainTask+0x1154>
 8006202:	4b44      	ldr	r3, [pc, #272]	; (8006314 <mainTask+0x1258>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f083 0301 	eor.w	r3, r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <mainTask+0x115a>
				kapi2prudhome=0;
 8006210:	4b48      	ldr	r3, [pc, #288]	; (8006334 <mainTask+0x1278>)
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 buton kontrol

			if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006216:	4b43      	ldr	r3, [pc, #268]	; (8006324 <mainTask+0x1268>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d135      	bne.n	800628a <mainTask+0x11ce>
 800621e:	4b3a      	ldr	r3, [pc, #232]	; (8006308 <mainTask+0x124c>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d003      	beq.n	800622e <mainTask+0x1172>
 8006226:	4b38      	ldr	r3, [pc, #224]	; (8006308 <mainTask+0x124c>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d12d      	bne.n	800628a <mainTask+0x11ce>

					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800622e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006232:	4836      	ldr	r0, [pc, #216]	; (800630c <mainTask+0x1250>)
 8006234:	f002 f81c 	bl	8008270 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <mainTask+0x118a>
 800623e:	4b3a      	ldr	r3, [pc, #232]	; (8006328 <mainTask+0x126c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <mainTask+0x11a2>
 8006246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800624a:	4838      	ldr	r0, [pc, #224]	; (800632c <mainTask+0x1270>)
 800624c:	f002 f810 	bl	8008270 <HAL_GPIO_ReadPin>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d119      	bne.n	800628a <mainTask+0x11ce>
 8006256:	4b34      	ldr	r3, [pc, #208]	; (8006328 <mainTask+0x126c>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d115      	bne.n	800628a <mainTask+0x11ce>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800625e:	2102      	movs	r1, #2
 8006260:	482a      	ldr	r0, [pc, #168]	; (800630c <mainTask+0x1250>)
 8006262:	f002 f805 	bl	8008270 <HAL_GPIO_ReadPin>
 8006266:	4603      	mov	r3, r0
 8006268:	2b01      	cmp	r3, #1
 800626a:	d10e      	bne.n	800628a <mainTask+0x11ce>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800626c:	2104      	movs	r1, #4
 800626e:	4827      	ldr	r0, [pc, #156]	; (800630c <mainTask+0x1250>)
 8006270:	f001 fffe 	bl	8008270 <HAL_GPIO_ReadPin>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d107      	bne.n	800628a <mainTask+0x11ce>
					&&(makineStop==1)) {
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <mainTask+0x1258>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <mainTask+0x11ce>

				kapi2butonkontrol=1;
 8006282:	4b30      	ldr	r3, [pc, #192]	; (8006344 <mainTask+0x1288>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e002      	b.n	8006290 <mainTask+0x11d4>
			} else {
				kapi2butonkontrol=0;
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <mainTask+0x1288>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 pizzato

			if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <mainTask+0x1268>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d11d      	bne.n	80062d4 <mainTask+0x1218>
 8006298:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <mainTask+0x124c>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d003      	beq.n	80062a8 <mainTask+0x11ec>
 80062a0:	4b19      	ldr	r3, [pc, #100]	; (8006308 <mainTask+0x124c>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d115      	bne.n	80062d4 <mainTask+0x1218>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062a8:	2102      	movs	r1, #2
 80062aa:	4818      	ldr	r0, [pc, #96]	; (800630c <mainTask+0x1250>)
 80062ac:	f001 ffe0 	bl	8008270 <HAL_GPIO_ReadPin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d10e      	bne.n	80062d4 <mainTask+0x1218>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80062b6:	2104      	movs	r1, #4
 80062b8:	4814      	ldr	r0, [pc, #80]	; (800630c <mainTask+0x1250>)
 80062ba:	f001 ffd9 	bl	8008270 <HAL_GPIO_ReadPin>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <mainTask+0x1218>
					&&(makineStop==1)) {
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <mainTask+0x1258>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <mainTask+0x1218>

				kapi2pizzato=1;
 80062cc:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <mainTask+0x128c>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e002      	b.n	80062da <mainTask+0x121e>
			} else {
				kapi2pizzato=0;
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <mainTask+0x128c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 çıkış

			if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <mainTask+0x1288>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <mainTask+0x1236>
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <mainTask+0x128c>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <mainTask+0x1236>
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <mainTask+0x1278>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d02c      	beq.n	800634c <mainTask+0x1290>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80062f2:	2201      	movs	r2, #1
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	480a      	ldr	r0, [pc, #40]	; (8006320 <mainTask+0x1264>)
 80062f8:	f001 ffd1 	bl	800829e <HAL_GPIO_WritePin>
 80062fc:	e02b      	b.n	8006356 <mainTask+0x129a>
 80062fe:	bf00      	nop
 8006300:	20000cc3 	.word	0x20000cc3
 8006304:	20000c89 	.word	0x20000c89
 8006308:	20000c88 	.word	0x20000c88
 800630c:	40011000 	.word	0x40011000
 8006310:	20000c86 	.word	0x20000c86
 8006314:	20000cc1 	.word	0x20000cc1
 8006318:	20000cc4 	.word	0x20000cc4
 800631c:	20000cc2 	.word	0x20000cc2
 8006320:	40010800 	.word	0x40010800
 8006324:	20000c8a 	.word	0x20000c8a
 8006328:	20000c8c 	.word	0x20000c8c
 800632c:	40010c00 	.word	0x40010c00
 8006330:	20000cae 	.word	0x20000cae
 8006334:	20000cc5 	.word	0x20000cc5
 8006338:	20000c60 	.word	0x20000c60
 800633c:	20000c64 	.word	0x20000c64
 8006340:	20000c9a 	.word	0x20000c9a
 8006344:	20000cc6 	.word	0x20000cc6
 8006348:	20000cc7 	.word	0x20000cc7
			} else {
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800634c:	2200      	movs	r2, #0
 800634e:	2140      	movs	r1, #64	; 0x40
 8006350:	488d      	ldr	r0, [pc, #564]	; (8006588 <mainTask+0x14cc>)
 8006352:	f001 ffa4 	bl	800829e <HAL_GPIO_WritePin>
			}

			//   kapi tabla kontrol ***

			if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006356:	4b8d      	ldr	r3, [pc, #564]	; (800658c <mainTask+0x14d0>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <mainTask+0x12aa>
 800635e:	4b8b      	ldr	r3, [pc, #556]	; (800658c <mainTask+0x14d0>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d115      	bne.n	8006392 <mainTask+0x12d6>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006366:	2104      	movs	r1, #4
 8006368:	4889      	ldr	r0, [pc, #548]	; (8006590 <mainTask+0x14d4>)
 800636a:	f001 ff81 	bl	8008270 <HAL_GPIO_ReadPin>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d003      	beq.n	800637c <mainTask+0x12c0>
 8006374:	4b87      	ldr	r3, [pc, #540]	; (8006594 <mainTask+0x14d8>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <mainTask+0x12d6>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800637c:	2102      	movs	r1, #2
 800637e:	4884      	ldr	r0, [pc, #528]	; (8006590 <mainTask+0x14d4>)
 8006380:	f001 ff76 	bl	8008270 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <mainTask+0x12d6>

				kapiTablaAcKonumKat1=1;
 800638a:	4b83      	ldr	r3, [pc, #524]	; (8006598 <mainTask+0x14dc>)
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e002      	b.n	8006398 <mainTask+0x12dc>
			} else {
				kapiTablaAcKonumKat1=0;
 8006392:	4b81      	ldr	r3, [pc, #516]	; (8006598 <mainTask+0x14dc>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
			}

			if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006398:	4b7c      	ldr	r3, [pc, #496]	; (800658c <mainTask+0x14d0>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d003      	beq.n	80063a8 <mainTask+0x12ec>
 80063a0:	4b7a      	ldr	r3, [pc, #488]	; (800658c <mainTask+0x14d0>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d111      	bne.n	80063cc <mainTask+0x1310>
					&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063a8:	2102      	movs	r1, #2
 80063aa:	4879      	ldr	r0, [pc, #484]	; (8006590 <mainTask+0x14d4>)
 80063ac:	f001 ff60 	bl	8008270 <HAL_GPIO_ReadPin>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10a      	bne.n	80063cc <mainTask+0x1310>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80063b6:	2104      	movs	r1, #4
 80063b8:	4875      	ldr	r0, [pc, #468]	; (8006590 <mainTask+0x14d4>)
 80063ba:	f001 ff59 	bl	8008270 <HAL_GPIO_ReadPin>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d103      	bne.n	80063cc <mainTask+0x1310>

				kapiTablaAcKonumKat2=1;
 80063c4:	4b75      	ldr	r3, [pc, #468]	; (800659c <mainTask+0x14e0>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <mainTask+0x1316>
			} else {
				kapiTablaAcKonumKat2=0;
 80063cc:	4b73      	ldr	r3, [pc, #460]	; (800659c <mainTask+0x14e0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat1==1
 80063d2:	4b71      	ldr	r3, [pc, #452]	; (8006598 <mainTask+0x14dc>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <mainTask+0x133e>
					&& kapiAcTipi==1
 80063da:	4b71      	ldr	r3, [pc, #452]	; (80065a0 <mainTask+0x14e4>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10b      	bne.n	80063fa <mainTask+0x133e>
					&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80063e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063e6:	486f      	ldr	r0, [pc, #444]	; (80065a4 <mainTask+0x14e8>)
 80063e8:	f001 ff42 	bl	8008270 <HAL_GPIO_ReadPin>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <mainTask+0x133e>

				kapiactablaesp1=1;
 80063f2:	4b6d      	ldr	r3, [pc, #436]	; (80065a8 <mainTask+0x14ec>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e002      	b.n	8006400 <mainTask+0x1344>
			} else {
				kapiactablaesp1=0;
 80063fa:	4b6b      	ldr	r3, [pc, #428]	; (80065a8 <mainTask+0x14ec>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat2==1
 8006400:	4b66      	ldr	r3, [pc, #408]	; (800659c <mainTask+0x14e0>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <mainTask+0x136c>
					&& kapiAcTipi==1
 8006408:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <mainTask+0x14e4>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10b      	bne.n	8006428 <mainTask+0x136c>
					&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006414:	4863      	ldr	r0, [pc, #396]	; (80065a4 <mainTask+0x14e8>)
 8006416:	f001 ff2b 	bl	8008270 <HAL_GPIO_ReadPin>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d103      	bne.n	8006428 <mainTask+0x136c>

				kapiactablaesp2=1;
 8006420:	4b62      	ldr	r3, [pc, #392]	; (80065ac <mainTask+0x14f0>)
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e002      	b.n	800642e <mainTask+0x1372>
			} else {
				kapiactablaesp2=0;
 8006428:	4b60      	ldr	r3, [pc, #384]	; (80065ac <mainTask+0x14f0>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapısı prudhome

			if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800642e:	4b60      	ldr	r3, [pc, #384]	; (80065b0 <mainTask+0x14f4>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d137      	bne.n	80064a6 <mainTask+0x13ea>
 8006436:	4b5f      	ldr	r3, [pc, #380]	; (80065b4 <mainTask+0x14f8>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d003      	beq.n	8006446 <mainTask+0x138a>
 800643e:	4b5d      	ldr	r3, [pc, #372]	; (80065b4 <mainTask+0x14f8>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d12f      	bne.n	80064a6 <mainTask+0x13ea>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006446:	4b54      	ldr	r3, [pc, #336]	; (8006598 <mainTask+0x14dc>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <mainTask+0x139a>
 800644e:	4b53      	ldr	r3, [pc, #332]	; (800659c <mainTask+0x14e0>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d027      	beq.n	80064a6 <mainTask+0x13ea>
					&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800645a:	484d      	ldr	r0, [pc, #308]	; (8006590 <mainTask+0x14d4>)
 800645c:	f001 ff08 	bl	8008270 <HAL_GPIO_ReadPin>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <mainTask+0x13b2>
 8006466:	4b4e      	ldr	r3, [pc, #312]	; (80065a0 <mainTask+0x14e4>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <mainTask+0x13c2>
					||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800646e:	4b4e      	ldr	r3, [pc, #312]	; (80065a8 <mainTask+0x14ec>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <mainTask+0x13c2>
 8006476:	4b4d      	ldr	r3, [pc, #308]	; (80065ac <mainTask+0x14f0>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <mainTask+0x13ea>
					&&(makineStop==1)
 800647e:	4b4e      	ldr	r3, [pc, #312]	; (80065b8 <mainTask+0x14fc>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <mainTask+0x13ea>
					&&(butonKontrol==0)) {
 8006486:	4b4d      	ldr	r3, [pc, #308]	; (80065bc <mainTask+0x1500>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <mainTask+0x13ea>

				kapiTablaprudhome=1;
 8006494:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <mainTask+0x1504>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
				timer = millis;
 800649a:	4b4a      	ldr	r3, [pc, #296]	; (80065c4 <mainTask+0x1508>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <mainTask+0x150c>)
 80064a0:	6013      	str	r3, [r2, #0]
				bekle();
 80064a2:	f7fd ffd1 	bl	8004448 <bekle>
			}

			if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80064a6:	4b47      	ldr	r3, [pc, #284]	; (80065c4 <mainTask+0x1508>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <mainTask+0x150c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	4a46      	ldr	r2, [pc, #280]	; (80065cc <mainTask+0x1510>)
 80064b2:	7812      	ldrb	r2, [r2, #0]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d214      	bcs.n	80064e2 <mainTask+0x1426>
 80064b8:	4b37      	ldr	r3, [pc, #220]	; (8006598 <mainTask+0x14dc>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f083 0301 	eor.w	r3, r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <mainTask+0x1418>
 80064c6:	4b35      	ldr	r3, [pc, #212]	; (800659c <mainTask+0x14e0>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	f083 0301 	eor.w	r3, r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <mainTask+0x1426>
 80064d4:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <mainTask+0x14fc>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f083 0301 	eor.w	r3, r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <mainTask+0x142c>
				kapiTablaprudhome=0;
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <mainTask+0x1504>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı buton kontrol

			if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80064e8:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <mainTask+0x14f4>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d12b      	bne.n	8006548 <mainTask+0x148c>
 80064f0:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <mainTask+0x14f8>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d003      	beq.n	8006500 <mainTask+0x1444>
 80064f8:	4b2e      	ldr	r3, [pc, #184]	; (80065b4 <mainTask+0x14f8>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d123      	bne.n	8006548 <mainTask+0x148c>

					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <mainTask+0x14dc>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <mainTask+0x1454>
 8006508:	4b24      	ldr	r3, [pc, #144]	; (800659c <mainTask+0x14e0>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01b      	beq.n	8006548 <mainTask+0x148c>
					&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006514:	481e      	ldr	r0, [pc, #120]	; (8006590 <mainTask+0x14d4>)
 8006516:	f001 feab 	bl	8008270 <HAL_GPIO_ReadPin>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <mainTask+0x146c>
 8006520:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <mainTask+0x14e4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <mainTask+0x147c>
					||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006528:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <mainTask+0x14ec>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <mainTask+0x147c>
 8006530:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <mainTask+0x14f0>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <mainTask+0x148c>
					&&(makineStop==1)) {
 8006538:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <mainTask+0x14fc>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <mainTask+0x148c>

				kapiTablabutonkontrol=1;
 8006540:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <mainTask+0x1514>)
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e002      	b.n	800654e <mainTask+0x1492>
			} else {
				kapiTablabutonkontrol=0;
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <mainTask+0x1514>)
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı pizzato

			if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800654e:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <mainTask+0x14f4>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d140      	bne.n	80065d8 <mainTask+0x151c>
 8006556:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <mainTask+0x14f8>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d003      	beq.n	8006566 <mainTask+0x14aa>
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <mainTask+0x14f8>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d138      	bne.n	80065d8 <mainTask+0x151c>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <mainTask+0x14dc>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <mainTask+0x14ba>
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <mainTask+0x14e0>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d030      	beq.n	80065d8 <mainTask+0x151c>
					&&(makineStop==1)) {
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <mainTask+0x14fc>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d02c      	beq.n	80065d8 <mainTask+0x151c>

				kapiTablapizzato=1;
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <mainTask+0x1518>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e02b      	b.n	80065de <mainTask+0x1522>
 8006586:	bf00      	nop
 8006588:	40010800 	.word	0x40010800
 800658c:	20000c8d 	.word	0x20000c8d
 8006590:	40011000 	.word	0x40011000
 8006594:	20000c86 	.word	0x20000c86
 8006598:	20000ccb 	.word	0x20000ccb
 800659c:	20000ccc 	.word	0x20000ccc
 80065a0:	20000c8c 	.word	0x20000c8c
 80065a4:	40010c00 	.word	0x40010c00
 80065a8:	20000cdb 	.word	0x20000cdb
 80065ac:	20000cdc 	.word	0x20000cdc
 80065b0:	20000c8b 	.word	0x20000c8b
 80065b4:	20000c88 	.word	0x20000c88
 80065b8:	20000cc1 	.word	0x20000cc1
 80065bc:	20000cae 	.word	0x20000cae
 80065c0:	20000cc8 	.word	0x20000cc8
 80065c4:	20000c60 	.word	0x20000c60
 80065c8:	20000c64 	.word	0x20000c64
 80065cc:	20000c9b 	.word	0x20000c9b
 80065d0:	20000cc9 	.word	0x20000cc9
 80065d4:	20000cca 	.word	0x20000cca
			} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
				kapiTablapizzato=0;
 80065d8:	4b89      	ldr	r3, [pc, #548]	; (8006800 <mainTask+0x1744>)
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
			}

			// kapi Tabla çıkış

			if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80065de:	4b89      	ldr	r3, [pc, #548]	; (8006804 <mainTask+0x1748>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <mainTask+0x153a>
 80065e6:	4b88      	ldr	r3, [pc, #544]	; (8006808 <mainTask+0x174c>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d103      	bne.n	80065f6 <mainTask+0x153a>
 80065ee:	4b84      	ldr	r3, [pc, #528]	; (8006800 <mainTask+0x1744>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <mainTask+0x1546>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	2120      	movs	r1, #32
 80065fa:	4884      	ldr	r0, [pc, #528]	; (800680c <mainTask+0x1750>)
 80065fc:	f001 fe4f 	bl	800829e <HAL_GPIO_WritePin>
 8006600:	e004      	b.n	800660c <mainTask+0x1550>
			} else {
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006602:	2200      	movs	r2, #0
 8006604:	2120      	movs	r1, #32
 8006606:	4881      	ldr	r0, [pc, #516]	; (800680c <mainTask+0x1750>)
 8006608:	f001 fe49 	bl	800829e <HAL_GPIO_WritePin>
			}

			/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

			if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800660c:	4b80      	ldr	r3, [pc, #512]	; (8006810 <mainTask+0x1754>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <mainTask+0x1576>
 8006614:	2102      	movs	r1, #2
 8006616:	487f      	ldr	r0, [pc, #508]	; (8006814 <mainTask+0x1758>)
 8006618:	f001 fe2a 	bl	8008270 <HAL_GPIO_ReadPin>
 800661c:	4603      	mov	r3, r0
 800661e:	2b01      	cmp	r3, #1
 8006620:	d107      	bne.n	8006632 <mainTask+0x1576>
 8006622:	4b7d      	ldr	r3, [pc, #500]	; (8006818 <mainTask+0x175c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d103      	bne.n	8006632 <mainTask+0x1576>
 800662a:	4b7c      	ldr	r3, [pc, #496]	; (800681c <mainTask+0x1760>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d112      	bne.n	8006658 <mainTask+0x159c>
					||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006632:	4b7b      	ldr	r3, [pc, #492]	; (8006820 <mainTask+0x1764>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d066      	beq.n	8006708 <mainTask+0x164c>
 800663a:	2104      	movs	r1, #4
 800663c:	4875      	ldr	r0, [pc, #468]	; (8006814 <mainTask+0x1758>)
 800663e:	f001 fe17 	bl	8008270 <HAL_GPIO_ReadPin>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d15f      	bne.n	8006708 <mainTask+0x164c>
 8006648:	4b73      	ldr	r3, [pc, #460]	; (8006818 <mainTask+0x175c>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05b      	beq.n	8006708 <mainTask+0x164c>
 8006650:	4b72      	ldr	r3, [pc, #456]	; (800681c <mainTask+0x1760>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d057      	beq.n	8006708 <mainTask+0x164c>


				calismaSayisi1=calismaSayisi1+1;
 8006658:	4b72      	ldr	r3, [pc, #456]	; (8006824 <mainTask+0x1768>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	4b70      	ldr	r3, [pc, #448]	; (8006824 <mainTask+0x1768>)
 8006662:	701a      	strb	r2, [r3, #0]
				if(calismaSayisi1>9) {
 8006664:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <mainTask+0x1768>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b09      	cmp	r3, #9
 800666a:	d908      	bls.n	800667e <mainTask+0x15c2>
				  	calismaSayisi1=0;
 800666c:	4b6d      	ldr	r3, [pc, #436]	; (8006824 <mainTask+0x1768>)
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10=calismaSayisi10+1;
 8006672:	4b6d      	ldr	r3, [pc, #436]	; (8006828 <mainTask+0x176c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b6b      	ldr	r3, [pc, #428]	; (8006828 <mainTask+0x176c>)
 800667c:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi10>9) {
 800667e:	4b6a      	ldr	r3, [pc, #424]	; (8006828 <mainTask+0x176c>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b09      	cmp	r3, #9
 8006684:	d908      	bls.n	8006698 <mainTask+0x15dc>
				  	calismaSayisi10=0;
 8006686:	4b68      	ldr	r3, [pc, #416]	; (8006828 <mainTask+0x176c>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi100=calismaSayisi100+1;
 800668c:	4b67      	ldr	r3, [pc, #412]	; (800682c <mainTask+0x1770>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	4b65      	ldr	r3, [pc, #404]	; (800682c <mainTask+0x1770>)
 8006696:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi100>9) {
 8006698:	4b64      	ldr	r3, [pc, #400]	; (800682c <mainTask+0x1770>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b09      	cmp	r3, #9
 800669e:	d908      	bls.n	80066b2 <mainTask+0x15f6>
				  	calismaSayisi100=0;
 80066a0:	4b62      	ldr	r3, [pc, #392]	; (800682c <mainTask+0x1770>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi1000=calismaSayisi1000+1;
 80066a6:	4b62      	ldr	r3, [pc, #392]	; (8006830 <mainTask+0x1774>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4b60      	ldr	r3, [pc, #384]	; (8006830 <mainTask+0x1774>)
 80066b0:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi1000>9) {
 80066b2:	4b5f      	ldr	r3, [pc, #380]	; (8006830 <mainTask+0x1774>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d908      	bls.n	80066cc <mainTask+0x1610>
				  	calismaSayisi1000=0;
 80066ba:	4b5d      	ldr	r3, [pc, #372]	; (8006830 <mainTask+0x1774>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10000=calismaSayisi10000+1;
 80066c0:	4b5c      	ldr	r3, [pc, #368]	; (8006834 <mainTask+0x1778>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b5a      	ldr	r3, [pc, #360]	; (8006834 <mainTask+0x1778>)
 80066ca:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 80066cc:	4b59      	ldr	r3, [pc, #356]	; (8006834 <mainTask+0x1778>)
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	4b59      	ldr	r3, [pc, #356]	; (8006838 <mainTask+0x177c>)
 80066d2:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 80066d6:	4b56      	ldr	r3, [pc, #344]	; (8006830 <mainTask+0x1774>)
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	4b57      	ldr	r3, [pc, #348]	; (8006838 <mainTask+0x177c>)
 80066dc:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 80066de:	4b53      	ldr	r3, [pc, #332]	; (800682c <mainTask+0x1770>)
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	4b55      	ldr	r3, [pc, #340]	; (8006838 <mainTask+0x177c>)
 80066e4:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 80066e6:	4b50      	ldr	r3, [pc, #320]	; (8006828 <mainTask+0x176c>)
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	4b53      	ldr	r3, [pc, #332]	; (8006838 <mainTask+0x177c>)
 80066ec:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 80066ee:	4b4d      	ldr	r3, [pc, #308]	; (8006824 <mainTask+0x1768>)
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	4b51      	ldr	r3, [pc, #324]	; (8006838 <mainTask+0x177c>)
 80066f4:	771a      	strb	r2, [r3, #28]

				hafizaYaz=1;
 80066f6:	4b51      	ldr	r3, [pc, #324]	; (800683c <mainTask+0x1780>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]

				CalismaSayisiYukari=0;
 80066fc:	4b44      	ldr	r3, [pc, #272]	; (8006810 <mainTask+0x1754>)
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=0;
 8006702:	4b47      	ldr	r3, [pc, #284]	; (8006820 <mainTask+0x1764>)
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
			}

			/******************************************* HATA BASLIYOR *******************************************/

			/************************************ ACİL STOP HATA BASLANGICI **************************************************/
			if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800670c:	484c      	ldr	r0, [pc, #304]	; (8006840 <mainTask+0x1784>)
 800670e:	f001 fdaf 	bl	8008270 <HAL_GPIO_ReadPin>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <mainTask+0x168a>
				  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800671c:	4848      	ldr	r0, [pc, #288]	; (8006840 <mainTask+0x1784>)
 800671e:	f001 fda7 	bl	8008270 <HAL_GPIO_ReadPin>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00e      	beq.n	8006746 <mainTask+0x168a>
				  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800672c:	4844      	ldr	r0, [pc, #272]	; (8006840 <mainTask+0x1784>)
 800672e:	f001 fd9f 	bl	8008270 <HAL_GPIO_ReadPin>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <mainTask+0x168a>
				  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	4836      	ldr	r0, [pc, #216]	; (8006814 <mainTask+0x1758>)
 800673c:	f001 fd98 	bl	8008270 <HAL_GPIO_ReadPin>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <mainTask+0x1692>

				startBasili=1;
 8006746:	4b3f      	ldr	r3, [pc, #252]	; (8006844 <mainTask+0x1788>)
 8006748:	2201      	movs	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e002      	b.n	8006754 <mainTask+0x1698>
			} else {
				startBasili=0;
 800674e:	4b3d      	ldr	r3, [pc, #244]	; (8006844 <mainTask+0x1788>)
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
			}


			if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006754:	4b3b      	ldr	r3, [pc, #236]	; (8006844 <mainTask+0x1788>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d014      	beq.n	8006786 <mainTask+0x16ca>
 800675c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006760:	4837      	ldr	r0, [pc, #220]	; (8006840 <mainTask+0x1784>)
 8006762:	f001 fd85 	bl	8008270 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10c      	bne.n	8006786 <mainTask+0x16ca>

				hataVar=1;
 800676c:	4b36      	ldr	r3, [pc, #216]	; (8006848 <mainTask+0x178c>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(1);
 8006772:	2001      	movs	r0, #1
 8006774:	f7fd ff58 	bl	8004628 <hataKoduLcdGoster>
				hata2EEPROM(1);
 8006778:	2001      	movs	r0, #1
 800677a:	f7fe fa97 	bl	8004cac <hata2EEPROM>
				acilstophatasi=1;
 800677e:	4b33      	ldr	r3, [pc, #204]	; (800684c <mainTask+0x1790>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e018      	b.n	80067b8 <mainTask+0x16fc>
			} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006786:	4b31      	ldr	r3, [pc, #196]	; (800684c <mainTask+0x1790>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d014      	beq.n	80067b8 <mainTask+0x16fc>
 800678e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006792:	482b      	ldr	r0, [pc, #172]	; (8006840 <mainTask+0x1784>)
 8006794:	f001 fd6c 	bl	8008270 <HAL_GPIO_ReadPin>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10c      	bne.n	80067b8 <mainTask+0x16fc>
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <mainTask+0x1788>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f083 0301 	eor.w	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <mainTask+0x16fc>
				acilstophatasi=0;
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <mainTask+0x1790>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	701a      	strb	r2, [r3, #0]
				lcdUpdate(1);
 80067b2:	2001      	movs	r0, #1
 80067b4:	f7fd fee4 	bl	8004580 <lcdUpdate>
			}

			/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

			if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <mainTask+0x1794>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f083 0301 	eor.w	r3, r3, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d04c      	beq.n	8006860 <mainTask+0x17a4>
 80067c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ca:	481d      	ldr	r0, [pc, #116]	; (8006840 <mainTask+0x1784>)
 80067cc:	f001 fd50 	bl	8008270 <HAL_GPIO_ReadPin>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <mainTask+0x1722>
 80067d6:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <mainTask+0x1798>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d040      	beq.n	8006860 <mainTask+0x17a4>
 80067de:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <mainTask+0x179c>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d13c      	bne.n	8006860 <mainTask+0x17a4>
				hataVar=1;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <mainTask+0x178c>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(2);
 80067ec:	2002      	movs	r0, #2
 80067ee:	f7fd ff1b 	bl	8004628 <hataKoduLcdGoster>
				hata2EEPROM(2);
 80067f2:	2002      	movs	r0, #2
 80067f4:	f7fe fa5a 	bl	8004cac <hata2EEPROM>
				emniyetCercevesihatasi=1;
 80067f8:	4b18      	ldr	r3, [pc, #96]	; (800685c <mainTask+0x17a0>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e047      	b.n	8006890 <mainTask+0x17d4>
 8006800:	20000cca 	.word	0x20000cca
 8006804:	20000cc9 	.word	0x20000cc9
 8006808:	20000cc8 	.word	0x20000cc8
 800680c:	40010800 	.word	0x40010800
 8006810:	20000cbe 	.word	0x20000cbe
 8006814:	40011000 	.word	0x40011000
 8006818:	20000c86 	.word	0x20000c86
 800681c:	20000cc1 	.word	0x20000cc1
 8006820:	20000cbf 	.word	0x20000cbf
 8006824:	20000c7d 	.word	0x20000c7d
 8006828:	20000c7e 	.word	0x20000c7e
 800682c:	20000940 	.word	0x20000940
 8006830:	20000941 	.word	0x20000941
 8006834:	20000c7f 	.word	0x20000c7f
 8006838:	20000c18 	.word	0x20000c18
 800683c:	20000cab 	.word	0x20000cab
 8006840:	40010c00 	.word	0x40010c00
 8006844:	20000ccd 	.word	0x20000ccd
 8006848:	20000cd4 	.word	0x20000cd4
 800684c:	20000ccf 	.word	0x20000ccf
 8006850:	20000cd6 	.word	0x20000cd6
 8006854:	20000ce0 	.word	0x20000ce0
 8006858:	20000c84 	.word	0x20000c84
 800685c:	20000cd0 	.word	0x20000cd0
			} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006860:	4b97      	ldr	r3, [pc, #604]	; (8006ac0 <mainTask+0x1a04>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d013      	beq.n	8006890 <mainTask+0x17d4>
 8006868:	4b96      	ldr	r3, [pc, #600]	; (8006ac4 <mainTask+0x1a08>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00f      	beq.n	8006890 <mainTask+0x17d4>
 8006870:	4b95      	ldr	r3, [pc, #596]	; (8006ac8 <mainTask+0x1a0c>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f083 0301 	eor.w	r3, r3, #1
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <mainTask+0x17d4>
				emniyetCercevesihatasi=0;
 800687e:	4b90      	ldr	r3, [pc, #576]	; (8006ac0 <mainTask+0x1a04>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=0;
 8006884:	4b91      	ldr	r3, [pc, #580]	; (8006acc <mainTask+0x1a10>)
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
				lcdUpdate(2);
 800688a:	2002      	movs	r0, #2
 800688c:	f7fd fe78 	bl	8004580 <lcdUpdate>
			}

			/************************************ BASINC ASIRI YUK HATASI **************************************************/

			if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006890:	4b8f      	ldr	r3, [pc, #572]	; (8006ad0 <mainTask+0x1a14>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11c      	bne.n	80068d2 <mainTask+0x1816>
 8006898:	4b8e      	ldr	r3, [pc, #568]	; (8006ad4 <mainTask+0x1a18>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d118      	bne.n	80068d2 <mainTask+0x1816>
 80068a0:	4b8d      	ldr	r3, [pc, #564]	; (8006ad8 <mainTask+0x1a1c>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d014      	beq.n	80068d2 <mainTask+0x1816>
 80068a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068ac:	488b      	ldr	r0, [pc, #556]	; (8006adc <mainTask+0x1a20>)
 80068ae:	f001 fcdf 	bl	8008270 <HAL_GPIO_ReadPin>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10c      	bne.n	80068d2 <mainTask+0x1816>
				hataVar=1;
 80068b8:	4b89      	ldr	r3, [pc, #548]	; (8006ae0 <mainTask+0x1a24>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(3);
 80068be:	2003      	movs	r0, #3
 80068c0:	f7fd feb2 	bl	8004628 <hataKoduLcdGoster>
				hata2EEPROM(3);
 80068c4:	2003      	movs	r0, #3
 80068c6:	f7fe f9f1 	bl	8004cac <hata2EEPROM>
				basinchatasi=1;
 80068ca:	4b86      	ldr	r3, [pc, #536]	; (8006ae4 <mainTask+0x1a28>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e015      	b.n	80068fe <mainTask+0x1842>
			} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80068d2:	4b84      	ldr	r3, [pc, #528]	; (8006ae4 <mainTask+0x1a28>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <mainTask+0x1842>
 80068da:	4b7d      	ldr	r3, [pc, #500]	; (8006ad0 <mainTask+0x1a14>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d10d      	bne.n	80068fe <mainTask+0x1842>
 80068e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068e6:	4880      	ldr	r0, [pc, #512]	; (8006ae8 <mainTask+0x1a2c>)
 80068e8:	f001 fcc2 	bl	8008270 <HAL_GPIO_ReadPin>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d105      	bne.n	80068fe <mainTask+0x1842>
				basinchatasi=0;
 80068f2:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <mainTask+0x1a28>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
				lcdUpdate(3);
 80068f8:	2003      	movs	r0, #3
 80068fa:	f7fd fe41 	bl	8004580 <lcdUpdate>
			}

			/************************************ KAPI SİVİÇ HATASI **************************************************/
			if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80068fe:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <mainTask+0x1a30>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <mainTask+0x1852>
 8006906:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <mainTask+0x1a34>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01c      	beq.n	8006948 <mainTask+0x188c>
 800690e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006912:	4878      	ldr	r0, [pc, #480]	; (8006af4 <mainTask+0x1a38>)
 8006914:	f001 fcac 	bl	8008270 <HAL_GPIO_ReadPin>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d114      	bne.n	8006948 <mainTask+0x188c>
 800691e:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <mainTask+0x1a3c>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d003      	beq.n	800692e <mainTask+0x1872>
 8006926:	4b74      	ldr	r3, [pc, #464]	; (8006af8 <mainTask+0x1a3c>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b03      	cmp	r3, #3
 800692c:	d10c      	bne.n	8006948 <mainTask+0x188c>
				hataVar=1;
 800692e:	4b6c      	ldr	r3, [pc, #432]	; (8006ae0 <mainTask+0x1a24>)
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(4);
 8006934:	2004      	movs	r0, #4
 8006936:	f7fd fe77 	bl	8004628 <hataKoduLcdGoster>
				hata2EEPROM(4);
 800693a:	2004      	movs	r0, #4
 800693c:	f7fe f9b6 	bl	8004cac <hata2EEPROM>
				katkapisivicihatasi=1;
 8006940:	4b6e      	ldr	r3, [pc, #440]	; (8006afc <mainTask+0x1a40>)
 8006942:	2201      	movs	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	e01f      	b.n	8006988 <mainTask+0x18cc>
			} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006948:	4b6c      	ldr	r3, [pc, #432]	; (8006afc <mainTask+0x1a40>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01b      	beq.n	8006988 <mainTask+0x18cc>
 8006950:	4b6b      	ldr	r3, [pc, #428]	; (8006b00 <mainTask+0x1a44>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d017      	beq.n	8006988 <mainTask+0x18cc>
 8006958:	4b64      	ldr	r3, [pc, #400]	; (8006aec <mainTask+0x1a30>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f083 0301 	eor.w	r3, r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d010      	beq.n	8006988 <mainTask+0x18cc>
 8006966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800696a:	4862      	ldr	r0, [pc, #392]	; (8006af4 <mainTask+0x1a38>)
 800696c:	f001 fc80 	bl	8008270 <HAL_GPIO_ReadPin>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d108      	bne.n	8006988 <mainTask+0x18cc>

				katkapisivicihatasi=0;
 8006976:	4b61      	ldr	r3, [pc, #388]	; (8006afc <mainTask+0x1a40>)
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=0;
 800697c:	4b5c      	ldr	r3, [pc, #368]	; (8006af0 <mainTask+0x1a34>)
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
				lcdUpdate(4);
 8006982:	2004      	movs	r0, #4
 8006984:	f7fd fdfc 	bl	8004580 <lcdUpdate>
			}

			/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

			if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006988:	4b58      	ldr	r3, [pc, #352]	; (8006aec <mainTask+0x1a30>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <mainTask+0x18dc>
 8006990:	4b5c      	ldr	r3, [pc, #368]	; (8006b04 <mainTask+0x1a48>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01c      	beq.n	80069d2 <mainTask+0x1916>
 8006998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800699c:	4855      	ldr	r0, [pc, #340]	; (8006af4 <mainTask+0x1a38>)
 800699e:	f001 fc67 	bl	8008270 <HAL_GPIO_ReadPin>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d114      	bne.n	80069d2 <mainTask+0x1916>
 80069a8:	4b53      	ldr	r3, [pc, #332]	; (8006af8 <mainTask+0x1a3c>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d003      	beq.n	80069b8 <mainTask+0x18fc>
 80069b0:	4b51      	ldr	r3, [pc, #324]	; (8006af8 <mainTask+0x1a3c>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d10c      	bne.n	80069d2 <mainTask+0x1916>

				hataVar=1;
 80069b8:	4b49      	ldr	r3, [pc, #292]	; (8006ae0 <mainTask+0x1a24>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(5);
 80069be:	2005      	movs	r0, #5
 80069c0:	f7fd fe32 	bl	8004628 <hataKoduLcdGoster>
				hata2EEPROM(5);
 80069c4:	2005      	movs	r0, #5
 80069c6:	f7fe f971 	bl	8004cac <hata2EEPROM>
				tablakapisivicihatasi=1;
 80069ca:	4b4f      	ldr	r3, [pc, #316]	; (8006b08 <mainTask+0x1a4c>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e023      	b.n	8006a1a <mainTask+0x195e>
			} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80069d2:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <mainTask+0x1a4c>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01f      	beq.n	8006a1a <mainTask+0x195e>
 80069da:	4b49      	ldr	r3, [pc, #292]	; (8006b00 <mainTask+0x1a44>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <mainTask+0x195e>
 80069e2:	4b42      	ldr	r3, [pc, #264]	; (8006aec <mainTask+0x1a30>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f083 0301 	eor.w	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d014      	beq.n	8006a1a <mainTask+0x195e>
 80069f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069f4:	483f      	ldr	r0, [pc, #252]	; (8006af4 <mainTask+0x1a38>)
 80069f6:	f001 fc3b 	bl	8008270 <HAL_GPIO_ReadPin>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10c      	bne.n	8006a1a <mainTask+0x195e>
 8006a00:	4b3f      	ldr	r3, [pc, #252]	; (8006b00 <mainTask+0x1a44>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <mainTask+0x195e>
				tablakapisivicihatasi=0;
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <mainTask+0x1a4c>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=0;
 8006a0e:	4b3d      	ldr	r3, [pc, #244]	; (8006b04 <mainTask+0x1a48>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
				lcdUpdate(5);
 8006a14:	2005      	movs	r0, #5
 8006a16:	f7fd fdb3 	bl	8004580 <lcdUpdate>
			}

			/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

			if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <mainTask+0x1a1c>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <mainTask+0x1976>
 8006a22:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <mainTask+0x1a0c>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <mainTask+0x1976>
 8006a2a:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <mainTask+0x1a50>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d014      	beq.n	8006a5c <mainTask+0x19a0>
			    if(millis-timer4>=makineCalismaTmr) {
 8006a32:	4b37      	ldr	r3, [pc, #220]	; (8006b10 <mainTask+0x1a54>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b37      	ldr	r3, [pc, #220]	; (8006b14 <mainTask+0x1a58>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	4a36      	ldr	r2, [pc, #216]	; (8006b18 <mainTask+0x1a5c>)
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d30b      	bcc.n	8006a5c <mainTask+0x19a0>
				  	hataVar=1;
 8006a44:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <mainTask+0x1a24>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
				  	hataKoduLcdGoster(6);
 8006a4a:	2006      	movs	r0, #6
 8006a4c:	f7fd fdec 	bl	8004628 <hataKoduLcdGoster>
				  	hata2EEPROM(6);
 8006a50:	2006      	movs	r0, #6
 8006a52:	f7fe f92b 	bl	8004cac <hata2EEPROM>
				  	maksimumcalismahatasi=1;
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <mainTask+0x1a60>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
				  }
			}

			if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006a5c:	4b2f      	ldr	r3, [pc, #188]	; (8006b1c <mainTask+0x1a60>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d013      	beq.n	8006a8c <mainTask+0x19d0>
 8006a64:	2108      	movs	r1, #8
 8006a66:	4823      	ldr	r0, [pc, #140]	; (8006af4 <mainTask+0x1a38>)
 8006a68:	f001 fc02 	bl	8008270 <HAL_GPIO_ReadPin>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <mainTask+0x19d0>
 8006a72:	4b1e      	ldr	r3, [pc, #120]	; (8006aec <mainTask+0x1a30>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f083 0301 	eor.w	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <mainTask+0x19d0>
				maksimumcalismahatasi=0;
 8006a80:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <mainTask+0x1a60>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
				lcdUpdate(6);
 8006a86:	2006      	movs	r0, #6
 8006a88:	f7fd fd7a 	bl	8004580 <lcdUpdate>
			}

			if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <mainTask+0x1a64>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <mainTask+0x19f0>
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <mainTask+0x1a0c>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d107      	bne.n	8006aac <mainTask+0x19f0>
 8006a9c:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <mainTask+0x1a68>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <mainTask+0x19f0>
 8006aa4:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <mainTask+0x1a50>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d03f      	beq.n	8006b2c <mainTask+0x1a70>
				makineCalisiyor=0;
 8006aac:	4b1e      	ldr	r3, [pc, #120]	; (8006b28 <mainTask+0x1a6c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=1;
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <mainTask+0x1a34>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=1;
 8006ab8:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <mainTask+0x1a48>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e03c      	b.n	8006b3a <mainTask+0x1a7e>
 8006ac0:	20000cd0 	.word	0x20000cd0
 8006ac4:	20000cd6 	.word	0x20000cd6
 8006ac8:	20000cb7 	.word	0x20000cb7
 8006acc:	20000ce0 	.word	0x20000ce0
 8006ad0:	20000c83 	.word	0x20000c83
 8006ad4:	20000c87 	.word	0x20000c87
 8006ad8:	20000cd3 	.word	0x20000cd3
 8006adc:	40011000 	.word	0x40011000
 8006ae0:	20000cd4 	.word	0x20000cd4
 8006ae4:	20000cdd 	.word	0x20000cdd
 8006ae8:	40010c00 	.word	0x40010c00
 8006aec:	20000ccd 	.word	0x20000ccd
 8006af0:	20000ce1 	.word	0x20000ce1
 8006af4:	40010800 	.word	0x40010800
 8006af8:	20000c88 	.word	0x20000c88
 8006afc:	20000cde 	.word	0x20000cde
 8006b00:	20000cc1 	.word	0x20000cc1
 8006b04:	20000ce2 	.word	0x20000ce2
 8006b08:	20000cdf 	.word	0x20000cdf
 8006b0c:	20000cb6 	.word	0x20000cb6
 8006b10:	20000c60 	.word	0x20000c60
 8006b14:	20000c74 	.word	0x20000c74
 8006b18:	20000c98 	.word	0x20000c98
 8006b1c:	20000cce 	.word	0x20000cce
 8006b20:	20000cb4 	.word	0x20000cb4
 8006b24:	20000cb5 	.word	0x20000cb5
 8006b28:	20000cd5 	.word	0x20000cd5
			} else {
				makineCalisiyor=1;
 8006b2c:	4b8e      	ldr	r3, [pc, #568]	; (8006d68 <mainTask+0x1cac>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
				timer4=millis;
 8006b32:	4b8e      	ldr	r3, [pc, #568]	; (8006d6c <mainTask+0x1cb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a8e      	ldr	r2, [pc, #568]	; (8006d70 <mainTask+0x1cb4>)
 8006b38:	6013      	str	r3, [r2, #0]
			}

			/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006b3a:	4b8e      	ldr	r3, [pc, #568]	; (8006d74 <mainTask+0x1cb8>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02f      	beq.n	8006ba2 <mainTask+0x1ae6>
 8006b42:	4b8d      	ldr	r3, [pc, #564]	; (8006d78 <mainTask+0x1cbc>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d028      	beq.n	8006ba2 <mainTask+0x1ae6>
 8006b50:	4b8a      	ldr	r3, [pc, #552]	; (8006d7c <mainTask+0x1cc0>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f083 0301 	eor.w	r3, r3, #1
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d021      	beq.n	8006ba2 <mainTask+0x1ae6>
 8006b5e:	4b88      	ldr	r3, [pc, #544]	; (8006d80 <mainTask+0x1cc4>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f083 0301 	eor.w	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01a      	beq.n	8006ba2 <mainTask+0x1ae6>
					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006b6c:	4b85      	ldr	r3, [pc, #532]	; (8006d84 <mainTask+0x1cc8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f083 0301 	eor.w	r3, r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d013      	beq.n	8006ba2 <mainTask+0x1ae6>
 8006b7a:	4b83      	ldr	r3, [pc, #524]	; (8006d88 <mainTask+0x1ccc>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f083 0301 	eor.w	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <mainTask+0x1ae6>
 8006b88:	4b80      	ldr	r3, [pc, #512]	; (8006d8c <mainTask+0x1cd0>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f083 0301 	eor.w	r3, r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <mainTask+0x1ae6>

				hataVar=0;
 8006b96:	4b77      	ldr	r3, [pc, #476]	; (8006d74 <mainTask+0x1cb8>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
				lcdUpdate(7);
 8006b9c:	2007      	movs	r0, #7
 8006b9e:	f7fd fcef 	bl	8004580 <lcdUpdate>

		// DEMO MOD BASLIYOR

		// DEMO YUKARI CALISMA

		if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006ba2:	4b7b      	ldr	r3, [pc, #492]	; (8006d90 <mainTask+0x1cd4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	f040 8268 	bne.w	800707c <mainTask+0x1fc0>
 8006bac:	4b79      	ldr	r3, [pc, #484]	; (8006d94 <mainTask+0x1cd8>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8263 	beq.w	800707c <mainTask+0x1fc0>
 8006bb6:	4b78      	ldr	r3, [pc, #480]	; (8006d98 <mainTask+0x1cdc>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 825e 	bne.w	800707c <mainTask+0x1fc0>
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006bc0:	2102      	movs	r1, #2
 8006bc2:	4876      	ldr	r0, [pc, #472]	; (8006d9c <mainTask+0x1ce0>)
 8006bc4:	f001 fb54 	bl	8008270 <HAL_GPIO_ReadPin>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11d      	bne.n	8006c0a <mainTask+0x1b4e>
					&& (demoAsagiCalis==0)
 8006bce:	4b74      	ldr	r3, [pc, #464]	; (8006da0 <mainTask+0x1ce4>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f083 0301 	eor.w	r3, r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d016      	beq.n	8006c0a <mainTask+0x1b4e>
					&& (demoDevYukari==0)
 8006bdc:	4b71      	ldr	r3, [pc, #452]	; (8006da4 <mainTask+0x1ce8>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00f      	beq.n	8006c0a <mainTask+0x1b4e>
					&& (demoDevAsagi==0)) {
 8006bea:	4b6f      	ldr	r3, [pc, #444]	; (8006da8 <mainTask+0x1cec>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <mainTask+0x1b4e>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	486b      	ldr	r0, [pc, #428]	; (8006dac <mainTask+0x1cf0>)
 8006bfe:	f001 fb4e 	bl	800829e <HAL_GPIO_WritePin>
				demoYukariCalis=1;
 8006c02:	4b6b      	ldr	r3, [pc, #428]	; (8006db0 <mainTask+0x1cf4>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e00e      	b.n	8006c28 <mainTask+0x1b6c>
			} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4863      	ldr	r0, [pc, #396]	; (8006d9c <mainTask+0x1ce0>)
 8006c0e:	f001 fb2f 	bl	8008270 <HAL_GPIO_ReadPin>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <mainTask+0x1b6c>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4863      	ldr	r0, [pc, #396]	; (8006dac <mainTask+0x1cf0>)
 8006c1e:	f001 fb3e 	bl	800829e <HAL_GPIO_WritePin>
				demoYukariCalis=0;
 8006c22:	4b63      	ldr	r3, [pc, #396]	; (8006db0 <mainTask+0x1cf4>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
			}

			// DEMO MOTOR CALISMASI

			if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006c28:	4b61      	ldr	r3, [pc, #388]	; (8006db0 <mainTask+0x1cf4>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <mainTask+0x1b8c>
 8006c30:	4b5c      	ldr	r3, [pc, #368]	; (8006da4 <mainTask+0x1ce8>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <mainTask+0x1b8c>
 8006c38:	4b5b      	ldr	r3, [pc, #364]	; (8006da8 <mainTask+0x1cec>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <mainTask+0x1b8c>
 8006c40:	4b57      	ldr	r3, [pc, #348]	; (8006da0 <mainTask+0x1ce4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <mainTask+0x1ba6>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c4e:	4857      	ldr	r0, [pc, #348]	; (8006dac <mainTask+0x1cf0>)
 8006c50:	f001 fb25 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006c54:	2201      	movs	r2, #1
 8006c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c5a:	4854      	ldr	r0, [pc, #336]	; (8006dac <mainTask+0x1cf0>)
 8006c5c:	f001 fb1f 	bl	800829e <HAL_GPIO_WritePin>
 8006c60:	e00b      	b.n	8006c7a <mainTask+0x1bbe>
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006c62:	2200      	movs	r2, #0
 8006c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c68:	4850      	ldr	r0, [pc, #320]	; (8006dac <mainTask+0x1cf0>)
 8006c6a:	f001 fb18 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c74:	484d      	ldr	r0, [pc, #308]	; (8006dac <mainTask+0x1cf0>)
 8006c76:	f001 fb12 	bl	800829e <HAL_GPIO_WritePin>
			}

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4847      	ldr	r0, [pc, #284]	; (8006d9c <mainTask+0x1ce0>)
 8006c7e:	f001 faf7 	bl	8008270 <HAL_GPIO_ReadPin>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10d      	bne.n	8006ca4 <mainTask+0x1be8>
					&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c8c:	4843      	ldr	r0, [pc, #268]	; (8006d9c <mainTask+0x1ce0>)
 8006c8e:	f001 faef 	bl	8008270 <HAL_GPIO_ReadPin>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <mainTask+0x1be8>
					&& (demoYukariCalis==0)
 8006c98:	4b45      	ldr	r3, [pc, #276]	; (8006db0 <mainTask+0x1cf4>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
					&& (demoAsagiCalis==0)) {
				//bos burası
			}

			//DEVİRME YUKARI CALIS
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	483d      	ldr	r0, [pc, #244]	; (8006d9c <mainTask+0x1ce0>)
 8006ca8:	f001 fae2 	bl	8008270 <HAL_GPIO_ReadPin>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d125      	bne.n	8006cfe <mainTask+0x1c42>
					&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cb6:	4839      	ldr	r0, [pc, #228]	; (8006d9c <mainTask+0x1ce0>)
 8006cb8:	f001 fada 	bl	8008270 <HAL_GPIO_ReadPin>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11d      	bne.n	8006cfe <mainTask+0x1c42>
					&&(demoYukariCalis==0)
 8006cc2:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <mainTask+0x1cf4>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	f083 0301 	eor.w	r3, r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <mainTask+0x1c42>
					&&(demoAsagiCalis==0)
 8006cd0:	4b33      	ldr	r3, [pc, #204]	; (8006da0 <mainTask+0x1ce4>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f083 0301 	eor.w	r3, r3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00f      	beq.n	8006cfe <mainTask+0x1c42>
					&& (demoDevAsagi==0)) {
 8006cde:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <mainTask+0x1cec>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <mainTask+0x1c42>

				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006cec:	2201      	movs	r2, #1
 8006cee:	2120      	movs	r1, #32
 8006cf0:	482a      	ldr	r0, [pc, #168]	; (8006d9c <mainTask+0x1ce0>)
 8006cf2:	f001 fad4 	bl	800829e <HAL_GPIO_WritePin>
				demoDevYukari=1;
 8006cf6:	4b2b      	ldr	r3, [pc, #172]	; (8006da4 <mainTask+0x1ce8>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	e007      	b.n	8006d0e <mainTask+0x1c52>
			} else {
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2120      	movs	r1, #32
 8006d02:	4826      	ldr	r0, [pc, #152]	; (8006d9c <mainTask+0x1ce0>)
 8006d04:	f001 facb 	bl	800829e <HAL_GPIO_WritePin>
				demoDevYukari=0;
 8006d08:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <mainTask+0x1ce8>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
			}

			// DEVIRME ASAGI CALIS

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d0e:	2102      	movs	r1, #2
 8006d10:	4822      	ldr	r0, [pc, #136]	; (8006d9c <mainTask+0x1ce0>)
 8006d12:	f001 faad 	bl	8008270 <HAL_GPIO_ReadPin>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d14b      	bne.n	8006db4 <mainTask+0x1cf8>
					&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d20:	481e      	ldr	r0, [pc, #120]	; (8006d9c <mainTask+0x1ce0>)
 8006d22:	f001 faa5 	bl	8008270 <HAL_GPIO_ReadPin>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d143      	bne.n	8006db4 <mainTask+0x1cf8>
					&&(demoYukariCalis==0)
 8006d2c:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <mainTask+0x1cf4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f083 0301 	eor.w	r3, r3, #1
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03c      	beq.n	8006db4 <mainTask+0x1cf8>
					&&(demoDevYukari==0)
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <mainTask+0x1ce8>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f083 0301 	eor.w	r3, r3, #1
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d035      	beq.n	8006db4 <mainTask+0x1cf8>
					&& (demoAsagiCalis==0)) {
 8006d48:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <mainTask+0x1ce4>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f083 0301 	eor.w	r3, r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02e      	beq.n	8006db4 <mainTask+0x1cf8>

				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d56:	2201      	movs	r2, #1
 8006d58:	2110      	movs	r1, #16
 8006d5a:	4810      	ldr	r0, [pc, #64]	; (8006d9c <mainTask+0x1ce0>)
 8006d5c:	f001 fa9f 	bl	800829e <HAL_GPIO_WritePin>
				demoDevAsagi=1;
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <mainTask+0x1cec>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e02d      	b.n	8006dc4 <mainTask+0x1d08>
 8006d68:	20000cd5 	.word	0x20000cd5
 8006d6c:	20000c60 	.word	0x20000c60
 8006d70:	20000c74 	.word	0x20000c74
 8006d74:	20000cd4 	.word	0x20000cd4
 8006d78:	20000ccf 	.word	0x20000ccf
 8006d7c:	20000cd0 	.word	0x20000cd0
 8006d80:	20000cdd 	.word	0x20000cdd
 8006d84:	20000cde 	.word	0x20000cde
 8006d88:	20000cdf 	.word	0x20000cdf
 8006d8c:	20000cce 	.word	0x20000cce
 8006d90:	20000c9e 	.word	0x20000c9e
 8006d94:	20000cd1 	.word	0x20000cd1
 8006d98:	20000c9d 	.word	0x20000c9d
 8006d9c:	40011000 	.word	0x40011000
 8006da0:	20000cd8 	.word	0x20000cd8
 8006da4:	20000cd9 	.word	0x20000cd9
 8006da8:	20000cda 	.word	0x20000cda
 8006dac:	40010c00 	.word	0x40010c00
 8006db0:	20000cd7 	.word	0x20000cd7
			} else {
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	2110      	movs	r1, #16
 8006db8:	489a      	ldr	r0, [pc, #616]	; (8007024 <mainTask+0x1f68>)
 8006dba:	f001 fa70 	bl	800829e <HAL_GPIO_WritePin>
				demoDevAsagi=0;
 8006dbe:	4b9a      	ldr	r3, [pc, #616]	; (8007028 <mainTask+0x1f6c>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
			}

			// DEMO ASAGI CALISMA

			if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006dc4:	2104      	movs	r1, #4
 8006dc6:	4897      	ldr	r0, [pc, #604]	; (8007024 <mainTask+0x1f68>)
 8006dc8:	f001 fa52 	bl	8008270 <HAL_GPIO_ReadPin>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d125      	bne.n	8006e1e <mainTask+0x1d62>
					&& (demoYukariCalis==0)
 8006dd2:	4b96      	ldr	r3, [pc, #600]	; (800702c <mainTask+0x1f70>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <mainTask+0x1d62>
					&& (demoDevAsagi==0)
 8006de0:	4b91      	ldr	r3, [pc, #580]	; (8007028 <mainTask+0x1f6c>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f083 0301 	eor.w	r3, r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d017      	beq.n	8006e1e <mainTask+0x1d62>
					&& (demoDevYukari==0)) {
 8006dee:	4b90      	ldr	r3, [pc, #576]	; (8007030 <mainTask+0x1f74>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f083 0301 	eor.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <mainTask+0x1d62>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2102      	movs	r1, #2
 8006e00:	488c      	ldr	r0, [pc, #560]	; (8007034 <mainTask+0x1f78>)
 8006e02:	f001 fa4c 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006e06:	2201      	movs	r2, #1
 8006e08:	2101      	movs	r1, #1
 8006e0a:	488a      	ldr	r0, [pc, #552]	; (8007034 <mainTask+0x1f78>)
 8006e0c:	f001 fa47 	bl	800829e <HAL_GPIO_WritePin>
				demoAsagiCalis=1;
 8006e10:	4b89      	ldr	r3, [pc, #548]	; (8007038 <mainTask+0x1f7c>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
				demoCalismaSayisiYar=1;
 8006e16:	4b89      	ldr	r3, [pc, #548]	; (800703c <mainTask+0x1f80>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e013      	b.n	8006e46 <mainTask+0x1d8a>
			} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006e1e:	2104      	movs	r1, #4
 8006e20:	4880      	ldr	r0, [pc, #512]	; (8007024 <mainTask+0x1f68>)
 8006e22:	f001 fa25 	bl	8008270 <HAL_GPIO_ReadPin>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10c      	bne.n	8006e46 <mainTask+0x1d8a>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4880      	ldr	r0, [pc, #512]	; (8007034 <mainTask+0x1f78>)
 8006e32:	f001 fa34 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006e36:	2200      	movs	r2, #0
 8006e38:	2101      	movs	r1, #1
 8006e3a:	487e      	ldr	r0, [pc, #504]	; (8007034 <mainTask+0x1f78>)
 8006e3c:	f001 fa2f 	bl	800829e <HAL_GPIO_WritePin>
				demoAsagiCalis=0;
 8006e40:	4b7d      	ldr	r3, [pc, #500]	; (8007038 <mainTask+0x1f7c>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006e46:	2104      	movs	r1, #4
 8006e48:	4876      	ldr	r0, [pc, #472]	; (8007024 <mainTask+0x1f68>)
 8006e4a:	f001 fa11 	bl	8008270 <HAL_GPIO_ReadPin>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10d      	bne.n	8006e70 <mainTask+0x1db4>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006e54:	2201      	movs	r2, #1
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	4879      	ldr	r0, [pc, #484]	; (8007040 <mainTask+0x1f84>)
 8006e5a:	f001 fa20 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006e5e:	2201      	movs	r2, #1
 8006e60:	2120      	movs	r1, #32
 8006e62:	4877      	ldr	r0, [pc, #476]	; (8007040 <mainTask+0x1f84>)
 8006e64:	f001 fa1b 	bl	800829e <HAL_GPIO_WritePin>
				timer3 = millis;
 8006e68:	4b76      	ldr	r3, [pc, #472]	; (8007044 <mainTask+0x1f88>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a76      	ldr	r2, [pc, #472]	; (8007048 <mainTask+0x1f8c>)
 8006e6e:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 8006e70:	4b74      	ldr	r3, [pc, #464]	; (8007044 <mainTask+0x1f88>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b74      	ldr	r3, [pc, #464]	; (8007048 <mainTask+0x1f8c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d909      	bls.n	8006e92 <mainTask+0x1dd6>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	486f      	ldr	r0, [pc, #444]	; (8007040 <mainTask+0x1f84>)
 8006e84:	f001 fa0b 	bl	800829e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2120      	movs	r1, #32
 8006e8c:	486c      	ldr	r0, [pc, #432]	; (8007040 <mainTask+0x1f84>)
 8006e8e:	f001 fa06 	bl	800829e <HAL_GPIO_WritePin>
			}

			if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006e92:	2102      	movs	r1, #2
 8006e94:	4863      	ldr	r0, [pc, #396]	; (8007024 <mainTask+0x1f68>)
 8006e96:	f001 f9eb 	bl	8008270 <HAL_GPIO_ReadPin>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d108      	bne.n	8006eb2 <mainTask+0x1df6>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	4866      	ldr	r0, [pc, #408]	; (8007040 <mainTask+0x1f84>)
 8006ea6:	f001 f9fa 	bl	800829e <HAL_GPIO_WritePin>
				timer3 = millis;
 8006eaa:	4b66      	ldr	r3, [pc, #408]	; (8007044 <mainTask+0x1f88>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a66      	ldr	r2, [pc, #408]	; (8007048 <mainTask+0x1f8c>)
 8006eb0:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 8006eb2:	4b64      	ldr	r3, [pc, #400]	; (8007044 <mainTask+0x1f88>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b64      	ldr	r3, [pc, #400]	; (8007048 <mainTask+0x1f8c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d904      	bls.n	8006eca <mainTask+0x1e0e>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2140      	movs	r1, #64	; 0x40
 8006ec4:	485e      	ldr	r0, [pc, #376]	; (8007040 <mainTask+0x1f84>)
 8006ec6:	f001 f9ea 	bl	800829e <HAL_GPIO_WritePin>
			}

			if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006eca:	4b58      	ldr	r3, [pc, #352]	; (800702c <mainTask+0x1f70>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d058      	beq.n	8006f84 <mainTask+0x1ec8>
 8006ed2:	4b5a      	ldr	r3, [pc, #360]	; (800703c <mainTask+0x1f80>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d054      	beq.n	8006f84 <mainTask+0x1ec8>
				//mesajYazildi=0;
				calismaSayisi1=calismaSayisi1+1;
 8006eda:	4b5c      	ldr	r3, [pc, #368]	; (800704c <mainTask+0x1f90>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	4b5a      	ldr	r3, [pc, #360]	; (800704c <mainTask+0x1f90>)
 8006ee4:	701a      	strb	r2, [r3, #0]

				if(calismaSayisi1>9) {
 8006ee6:	4b59      	ldr	r3, [pc, #356]	; (800704c <mainTask+0x1f90>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d908      	bls.n	8006f00 <mainTask+0x1e44>
					calismaSayisi1=0;
 8006eee:	4b57      	ldr	r3, [pc, #348]	; (800704c <mainTask+0x1f90>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
					calismaSayisi10=calismaSayisi10+1;
 8006ef4:	4b56      	ldr	r3, [pc, #344]	; (8007050 <mainTask+0x1f94>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	4b54      	ldr	r3, [pc, #336]	; (8007050 <mainTask+0x1f94>)
 8006efe:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi10>9) {
 8006f00:	4b53      	ldr	r3, [pc, #332]	; (8007050 <mainTask+0x1f94>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b09      	cmp	r3, #9
 8006f06:	d908      	bls.n	8006f1a <mainTask+0x1e5e>
					calismaSayisi10=0;
 8006f08:	4b51      	ldr	r3, [pc, #324]	; (8007050 <mainTask+0x1f94>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
					calismaSayisi100=calismaSayisi100+1;
 8006f0e:	4b51      	ldr	r3, [pc, #324]	; (8007054 <mainTask+0x1f98>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	4b4f      	ldr	r3, [pc, #316]	; (8007054 <mainTask+0x1f98>)
 8006f18:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi100>9) {
 8006f1a:	4b4e      	ldr	r3, [pc, #312]	; (8007054 <mainTask+0x1f98>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d908      	bls.n	8006f34 <mainTask+0x1e78>
					calismaSayisi100=0;
 8006f22:	4b4c      	ldr	r3, [pc, #304]	; (8007054 <mainTask+0x1f98>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
					calismaSayisi1000=calismaSayisi1000+1;
 8006f28:	4b4b      	ldr	r3, [pc, #300]	; (8007058 <mainTask+0x1f9c>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	4b49      	ldr	r3, [pc, #292]	; (8007058 <mainTask+0x1f9c>)
 8006f32:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi1000>9) {
 8006f34:	4b48      	ldr	r3, [pc, #288]	; (8007058 <mainTask+0x1f9c>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d908      	bls.n	8006f4e <mainTask+0x1e92>
					calismaSayisi1000=0;
 8006f3c:	4b46      	ldr	r3, [pc, #280]	; (8007058 <mainTask+0x1f9c>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
					calismaSayisi10000=calismaSayisi10000+1;
 8006f42:	4b46      	ldr	r3, [pc, #280]	; (800705c <mainTask+0x1fa0>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b44      	ldr	r3, [pc, #272]	; (800705c <mainTask+0x1fa0>)
 8006f4c:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 8006f4e:	4b43      	ldr	r3, [pc, #268]	; (800705c <mainTask+0x1fa0>)
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	4b43      	ldr	r3, [pc, #268]	; (8007060 <mainTask+0x1fa4>)
 8006f54:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 8006f58:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <mainTask+0x1f9c>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	4b40      	ldr	r3, [pc, #256]	; (8007060 <mainTask+0x1fa4>)
 8006f5e:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 8006f60:	4b3c      	ldr	r3, [pc, #240]	; (8007054 <mainTask+0x1f98>)
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <mainTask+0x1fa4>)
 8006f66:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 8006f68:	4b39      	ldr	r3, [pc, #228]	; (8007050 <mainTask+0x1f94>)
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	4b3c      	ldr	r3, [pc, #240]	; (8007060 <mainTask+0x1fa4>)
 8006f6e:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 8006f70:	4b36      	ldr	r3, [pc, #216]	; (800704c <mainTask+0x1f90>)
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <mainTask+0x1fa4>)
 8006f76:	771a      	strb	r2, [r3, #28]
				hafizaYaz=1;
 8006f78:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <mainTask+0x1fa8>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
		   		//mesajYazildi=0;
				demoCalismaSayisiYar=0;
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <mainTask+0x1f80>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
			}

			if (menuGiris==0) {
 8006f84:	4b38      	ldr	r3, [pc, #224]	; (8007068 <mainTask+0x1fac>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 80b4 	bne.w	80070f6 <mainTask+0x203a>
				lcd_print(2,1,"Cycle      ");
 8006f8e:	4a37      	ldr	r2, [pc, #220]	; (800706c <mainTask+0x1fb0>)
 8006f90:	2101      	movs	r1, #1
 8006f92:	2002      	movs	r0, #2
 8006f94:	f7f9 fa93 	bl	80004be <lcd_print>
				lcd_print(1,1, "    DEMO MODE   ");
 8006f98:	4a35      	ldr	r2, [pc, #212]	; (8007070 <mainTask+0x1fb4>)
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7f9 fa8e 	bl	80004be <lcd_print>
				itoa(calismaSayisi10000, snum, 10);
 8006fa2:	4b2e      	ldr	r3, [pc, #184]	; (800705c <mainTask+0x1fa0>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	220a      	movs	r2, #10
 8006fa8:	4932      	ldr	r1, [pc, #200]	; (8007074 <mainTask+0x1fb8>)
 8006faa:	4618      	mov	r0, r3
 8006fac:	f005 fb68 	bl	800c680 <itoa>
				lcd_print(2,12,snum);
 8006fb0:	4a30      	ldr	r2, [pc, #192]	; (8007074 <mainTask+0x1fb8>)
 8006fb2:	210c      	movs	r1, #12
 8006fb4:	2002      	movs	r0, #2
 8006fb6:	f7f9 fa82 	bl	80004be <lcd_print>
				itoa(calismaSayisi1000, snum, 10);
 8006fba:	4b27      	ldr	r3, [pc, #156]	; (8007058 <mainTask+0x1f9c>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	492c      	ldr	r1, [pc, #176]	; (8007074 <mainTask+0x1fb8>)
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f005 fb5c 	bl	800c680 <itoa>
				lcd_print(2,13,snum);
 8006fc8:	4a2a      	ldr	r2, [pc, #168]	; (8007074 <mainTask+0x1fb8>)
 8006fca:	210d      	movs	r1, #13
 8006fcc:	2002      	movs	r0, #2
 8006fce:	f7f9 fa76 	bl	80004be <lcd_print>
				itoa(calismaSayisi100, snum, 10);
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <mainTask+0x1f98>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	4926      	ldr	r1, [pc, #152]	; (8007074 <mainTask+0x1fb8>)
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f005 fb50 	bl	800c680 <itoa>
				lcd_print(2,14,snum);
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <mainTask+0x1fb8>)
 8006fe2:	210e      	movs	r1, #14
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	f7f9 fa6a 	bl	80004be <lcd_print>
				itoa(calismaSayisi10, snum, 10);
 8006fea:	4b19      	ldr	r3, [pc, #100]	; (8007050 <mainTask+0x1f94>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	220a      	movs	r2, #10
 8006ff0:	4920      	ldr	r1, [pc, #128]	; (8007074 <mainTask+0x1fb8>)
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f005 fb44 	bl	800c680 <itoa>
				lcd_print(2,15,snum);
 8006ff8:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <mainTask+0x1fb8>)
 8006ffa:	210f      	movs	r1, #15
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	f7f9 fa5e 	bl	80004be <lcd_print>
				itoa(calismaSayisi1, snum, 10);
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <mainTask+0x1f90>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	220a      	movs	r2, #10
 8007008:	491a      	ldr	r1, [pc, #104]	; (8007074 <mainTask+0x1fb8>)
 800700a:	4618      	mov	r0, r3
 800700c:	f005 fb38 	bl	800c680 <itoa>
				lcd_print(2,16,snum);
 8007010:	4a18      	ldr	r2, [pc, #96]	; (8007074 <mainTask+0x1fb8>)
 8007012:	2110      	movs	r1, #16
 8007014:	2002      	movs	r0, #2
 8007016:	f7f9 fa52 	bl	80004be <lcd_print>
				mesajYazildi=1;
 800701a:	4b17      	ldr	r3, [pc, #92]	; (8007078 <mainTask+0x1fbc>)
 800701c:	2201      	movs	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
			if (menuGiris==0) {
 8007020:	e069      	b.n	80070f6 <mainTask+0x203a>
 8007022:	bf00      	nop
 8007024:	40011000 	.word	0x40011000
 8007028:	20000cda 	.word	0x20000cda
 800702c:	20000cd7 	.word	0x20000cd7
 8007030:	20000cd9 	.word	0x20000cd9
 8007034:	40010c00 	.word	0x40010c00
 8007038:	20000cd8 	.word	0x20000cd8
 800703c:	20000cbd 	.word	0x20000cbd
 8007040:	40010800 	.word	0x40010800
 8007044:	20000c60 	.word	0x20000c60
 8007048:	20000c70 	.word	0x20000c70
 800704c:	20000c7d 	.word	0x20000c7d
 8007050:	20000c7e 	.word	0x20000c7e
 8007054:	20000940 	.word	0x20000940
 8007058:	20000941 	.word	0x20000941
 800705c:	20000c7f 	.word	0x20000c7f
 8007060:	20000c18 	.word	0x20000c18
 8007064:	20000cab 	.word	0x20000cab
 8007068:	20000c9d 	.word	0x20000c9d
 800706c:	0800d6d4 	.word	0x0800d6d4
 8007070:	0800d6e0 	.word	0x0800d6e0
 8007074:	20000c58 	.word	0x20000c58
 8007078:	20000cb3 	.word	0x20000cb3
			}
		} else if(demoMode==1 || menuGiris==1) {
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <mainTask+0x2040>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d004      	beq.n	800708e <mainTask+0x1fd2>
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <mainTask+0x2044>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	f47e a81b 	bne.w	80050c4 <mainTask+0x8>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007094:	481b      	ldr	r0, [pc, #108]	; (8007104 <mainTask+0x2048>)
 8007096:	f001 f902 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800709a:	2200      	movs	r2, #0
 800709c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070a0:	4818      	ldr	r0, [pc, #96]	; (8007104 <mainTask+0x2048>)
 80070a2:	f001 f8fc 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80070a6:	2200      	movs	r2, #0
 80070a8:	2104      	movs	r1, #4
 80070aa:	4816      	ldr	r0, [pc, #88]	; (8007104 <mainTask+0x2048>)
 80070ac:	f001 f8f7 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80070b0:	2200      	movs	r2, #0
 80070b2:	2102      	movs	r1, #2
 80070b4:	4813      	ldr	r0, [pc, #76]	; (8007104 <mainTask+0x2048>)
 80070b6:	f001 f8f2 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2101      	movs	r1, #1
 80070be:	4811      	ldr	r0, [pc, #68]	; (8007104 <mainTask+0x2048>)
 80070c0:	f001 f8ed 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80070c4:	2200      	movs	r2, #0
 80070c6:	2120      	movs	r1, #32
 80070c8:	480f      	ldr	r0, [pc, #60]	; (8007108 <mainTask+0x204c>)
 80070ca:	f001 f8e8 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2110      	movs	r1, #16
 80070d2:	480d      	ldr	r0, [pc, #52]	; (8007108 <mainTask+0x204c>)
 80070d4:	f001 f8e3 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80070d8:	2200      	movs	r2, #0
 80070da:	2180      	movs	r1, #128	; 0x80
 80070dc:	480b      	ldr	r0, [pc, #44]	; (800710c <mainTask+0x2050>)
 80070de:	f001 f8de 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2140      	movs	r1, #64	; 0x40
 80070e6:	4809      	ldr	r0, [pc, #36]	; (800710c <mainTask+0x2050>)
 80070e8:	f001 f8d9 	bl	800829e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80070ec:	2200      	movs	r2, #0
 80070ee:	2120      	movs	r1, #32
 80070f0:	4806      	ldr	r0, [pc, #24]	; (800710c <mainTask+0x2050>)
 80070f2:	f001 f8d4 	bl	800829e <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80070f6:	f7fd bfe5 	b.w	80050c4 <mainTask+0x8>
 80070fa:	bf00      	nop
 80070fc:	20000c9e 	.word	0x20000c9e
 8007100:	20000c9d 	.word	0x20000c9d
 8007104:	40010c00 	.word	0x40010c00
 8007108:	40011000 	.word	0x40011000
 800710c:	40010800 	.word	0x40010800

08007110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b090      	sub	sp, #64	; 0x40
 8007114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007116:	f107 0318 	add.w	r3, r7, #24
 800711a:	2228      	movs	r2, #40	; 0x28
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f005 fba6 	bl	800c870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007132:	2301      	movs	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800713a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800713c:	2300      	movs	r3, #0
 800713e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007140:	2301      	movs	r3, #1
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007144:	2302      	movs	r3, #2
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800714e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007154:	f107 0318 	add.w	r3, r7, #24
 8007158:	4618      	mov	r0, r3
 800715a:	f002 fa99 	bl	8009690 <HAL_RCC_OscConfig>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007164:	f000 f9aa 	bl	80074bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007168:	230f      	movs	r3, #15
 800716a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800716c:	2302      	movs	r3, #2
 800716e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	2102      	movs	r1, #2
 8007182:	4618      	mov	r0, r3
 8007184:	f002 fd06 	bl	8009b94 <HAL_RCC_ClockConfig>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800718e:	f000 f995 	bl	80074bc <Error_Handler>
  }
}
 8007192:	bf00      	nop
 8007194:	3740      	adds	r7, #64	; 0x40
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80071a0:	4b16      	ldr	r3, [pc, #88]	; (80071fc <MX_CAN_Init+0x60>)
 80071a2:	4a17      	ldr	r2, [pc, #92]	; (8007200 <MX_CAN_Init+0x64>)
 80071a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <MX_CAN_Init+0x60>)
 80071a8:	2210      	movs	r2, #16
 80071aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80071ac:	4b13      	ldr	r3, [pc, #76]	; (80071fc <MX_CAN_Init+0x60>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <MX_CAN_Init+0x60>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <MX_CAN_Init+0x60>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <MX_CAN_Init+0x60>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80071c4:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <MX_CAN_Init+0x60>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <MX_CAN_Init+0x60>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <MX_CAN_Init+0x60>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <MX_CAN_Init+0x60>)
 80071d8:	2200      	movs	r2, #0
 80071da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80071dc:	4b07      	ldr	r3, [pc, #28]	; (80071fc <MX_CAN_Init+0x60>)
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <MX_CAN_Init+0x60>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80071e8:	4804      	ldr	r0, [pc, #16]	; (80071fc <MX_CAN_Init+0x60>)
 80071ea:	f000 fbd7 	bl	800799c <HAL_CAN_Init>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80071f4:	f000 f962 	bl	80074bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80071f8:	bf00      	nop
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000e18 	.word	0x20000e18
 8007200:	40006400 	.word	0x40006400

08007204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <MX_I2C1_Init+0x50>)
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <MX_I2C1_Init+0x54>)
 800720c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800720e:	4b11      	ldr	r3, [pc, #68]	; (8007254 <MX_I2C1_Init+0x50>)
 8007210:	4a12      	ldr	r2, [pc, #72]	; (800725c <MX_I2C1_Init+0x58>)
 8007212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <MX_I2C1_Init+0x50>)
 8007216:	2200      	movs	r2, #0
 8007218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <MX_I2C1_Init+0x50>)
 800721c:	2200      	movs	r2, #0
 800721e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <MX_I2C1_Init+0x50>)
 8007222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <MX_I2C1_Init+0x50>)
 800722a:	2200      	movs	r2, #0
 800722c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <MX_I2C1_Init+0x50>)
 8007230:	2200      	movs	r2, #0
 8007232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <MX_I2C1_Init+0x50>)
 8007236:	2200      	movs	r2, #0
 8007238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <MX_I2C1_Init+0x50>)
 800723c:	2200      	movs	r2, #0
 800723e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007240:	4804      	ldr	r0, [pc, #16]	; (8007254 <MX_I2C1_Init+0x50>)
 8007242:	f001 f85d 	bl	8008300 <HAL_I2C_Init>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800724c:	f000 f936 	bl	80074bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007250:	bf00      	nop
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000e40 	.word	0x20000e40
 8007258:	40005400 	.word	0x40005400
 800725c:	00061a80 	.word	0x00061a80

08007260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007266:	f107 0308 	add.w	r3, r7, #8
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	605a      	str	r2, [r3, #4]
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007274:	463b      	mov	r3, r7
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800727c:	4b1f      	ldr	r3, [pc, #124]	; (80072fc <MX_TIM1_Init+0x9c>)
 800727e:	4a20      	ldr	r2, [pc, #128]	; (8007300 <MX_TIM1_Init+0xa0>)
 8007280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <MX_TIM1_Init+0x9c>)
 8007284:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <MX_TIM1_Init+0x9c>)
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007290:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <MX_TIM1_Init+0x9c>)
 8007292:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007298:	4b18      	ldr	r3, [pc, #96]	; (80072fc <MX_TIM1_Init+0x9c>)
 800729a:	2200      	movs	r2, #0
 800729c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800729e:	4b17      	ldr	r3, [pc, #92]	; (80072fc <MX_TIM1_Init+0x9c>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072a4:	4b15      	ldr	r3, [pc, #84]	; (80072fc <MX_TIM1_Init+0x9c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80072aa:	4814      	ldr	r0, [pc, #80]	; (80072fc <MX_TIM1_Init+0x9c>)
 80072ac:	f002 fe0a 	bl	8009ec4 <HAL_TIM_Base_Init>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80072b6:	f000 f901 	bl	80074bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <MX_TIM1_Init+0x9c>)
 80072c8:	f002 ffb4 	bl	800a234 <HAL_TIM_ConfigClockSource>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80072d2:	f000 f8f3 	bl	80074bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072d6:	2300      	movs	r3, #0
 80072d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80072de:	463b      	mov	r3, r7
 80072e0:	4619      	mov	r1, r3
 80072e2:	4806      	ldr	r0, [pc, #24]	; (80072fc <MX_TIM1_Init+0x9c>)
 80072e4:	f003 f99e 	bl	800a624 <HAL_TIMEx_MasterConfigSynchronization>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80072ee:	f000 f8e5 	bl	80074bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80072f2:	bf00      	nop
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000edc 	.word	0x20000edc
 8007300:	40012c00 	.word	0x40012c00

08007304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007308:	4b11      	ldr	r3, [pc, #68]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 800730a:	4a12      	ldr	r2, [pc, #72]	; (8007354 <MX_USART1_UART_Init+0x50>)
 800730c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 8007310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007316:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 8007318:	2200      	movs	r2, #0
 800731a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 800731e:	2200      	movs	r2, #0
 8007320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 8007324:	2200      	movs	r2, #0
 8007326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 800732a:	220c      	movs	r2, #12
 800732c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 8007330:	2200      	movs	r2, #0
 8007332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 8007336:	2200      	movs	r2, #0
 8007338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800733a:	4805      	ldr	r0, [pc, #20]	; (8007350 <MX_USART1_UART_Init+0x4c>)
 800733c:	f003 f9f0 	bl	800a720 <HAL_UART_Init>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007346:	f000 f8b9 	bl	80074bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000e94 	.word	0x20000e94
 8007354:	40013800 	.word	0x40013800

08007358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735e:	f107 0310 	add.w	r3, r7, #16
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	609a      	str	r2, [r3, #8]
 800736a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800736c:	4b4b      	ldr	r3, [pc, #300]	; (800749c <MX_GPIO_Init+0x144>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	4a4a      	ldr	r2, [pc, #296]	; (800749c <MX_GPIO_Init+0x144>)
 8007372:	f043 0310 	orr.w	r3, r3, #16
 8007376:	6193      	str	r3, [r2, #24]
 8007378:	4b48      	ldr	r3, [pc, #288]	; (800749c <MX_GPIO_Init+0x144>)
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007384:	4b45      	ldr	r3, [pc, #276]	; (800749c <MX_GPIO_Init+0x144>)
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	4a44      	ldr	r2, [pc, #272]	; (800749c <MX_GPIO_Init+0x144>)
 800738a:	f043 0320 	orr.w	r3, r3, #32
 800738e:	6193      	str	r3, [r2, #24]
 8007390:	4b42      	ldr	r3, [pc, #264]	; (800749c <MX_GPIO_Init+0x144>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	60bb      	str	r3, [r7, #8]
 800739a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800739c:	4b3f      	ldr	r3, [pc, #252]	; (800749c <MX_GPIO_Init+0x144>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	4a3e      	ldr	r2, [pc, #248]	; (800749c <MX_GPIO_Init+0x144>)
 80073a2:	f043 0304 	orr.w	r3, r3, #4
 80073a6:	6193      	str	r3, [r2, #24]
 80073a8:	4b3c      	ldr	r3, [pc, #240]	; (800749c <MX_GPIO_Init+0x144>)
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073b4:	4b39      	ldr	r3, [pc, #228]	; (800749c <MX_GPIO_Init+0x144>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4a38      	ldr	r2, [pc, #224]	; (800749c <MX_GPIO_Init+0x144>)
 80073ba:	f043 0308 	orr.w	r3, r3, #8
 80073be:	6193      	str	r3, [r2, #24]
 80073c0:	4b36      	ldr	r3, [pc, #216]	; (800749c <MX_GPIO_Init+0x144>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80073cc:	2200      	movs	r2, #0
 80073ce:	21f0      	movs	r1, #240	; 0xf0
 80073d0:	4833      	ldr	r0, [pc, #204]	; (80074a0 <MX_GPIO_Init+0x148>)
 80073d2:	f000 ff64 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80073d6:	2200      	movs	r2, #0
 80073d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80073dc:	4831      	ldr	r0, [pc, #196]	; (80074a4 <MX_GPIO_Init+0x14c>)
 80073de:	f000 ff5e 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80073e2:	2200      	movs	r2, #0
 80073e4:	f640 4107 	movw	r1, #3079	; 0xc07
 80073e8:	482f      	ldr	r0, [pc, #188]	; (80074a8 <MX_GPIO_Init+0x150>)
 80073ea:	f000 ff58 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80073ee:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80073f2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	4619      	mov	r1, r3
 8007402:	4828      	ldr	r0, [pc, #160]	; (80074a4 <MX_GPIO_Init+0x14c>)
 8007404:	f000 fcd4 	bl	8007db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007408:	f248 130f 	movw	r3, #33039	; 0x810f
 800740c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007416:	f107 0310 	add.w	r3, r7, #16
 800741a:	4619      	mov	r1, r3
 800741c:	4820      	ldr	r0, [pc, #128]	; (80074a0 <MX_GPIO_Init+0x148>)
 800741e:	f000 fcc7 	bl	8007db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007422:	23f0      	movs	r3, #240	; 0xf0
 8007424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007426:	2301      	movs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742a:	2300      	movs	r3, #0
 800742c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800742e:	2302      	movs	r3, #2
 8007430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007432:	f107 0310 	add.w	r3, r7, #16
 8007436:	4619      	mov	r1, r3
 8007438:	4819      	ldr	r0, [pc, #100]	; (80074a0 <MX_GPIO_Init+0x148>)
 800743a:	f000 fcb9 	bl	8007db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800743e:	f241 0330 	movw	r3, #4144	; 0x1030
 8007442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800744c:	2302      	movs	r3, #2
 800744e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007450:	f107 0310 	add.w	r3, r7, #16
 8007454:	4619      	mov	r1, r3
 8007456:	4813      	ldr	r0, [pc, #76]	; (80074a4 <MX_GPIO_Init+0x14c>)
 8007458:	f000 fcaa 	bl	8007db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800745c:	f640 4307 	movw	r3, #3079	; 0xc07
 8007460:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007462:	2301      	movs	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746a:	2302      	movs	r3, #2
 800746c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800746e:	f107 0310 	add.w	r3, r7, #16
 8007472:	4619      	mov	r1, r3
 8007474:	480c      	ldr	r0, [pc, #48]	; (80074a8 <MX_GPIO_Init+0x150>)
 8007476:	f000 fc9b 	bl	8007db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800747a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800747e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007488:	f107 0310 	add.w	r3, r7, #16
 800748c:	4619      	mov	r1, r3
 800748e:	4806      	ldr	r0, [pc, #24]	; (80074a8 <MX_GPIO_Init+0x150>)
 8007490:	f000 fc8e 	bl	8007db0 <HAL_GPIO_Init>

}
 8007494:	bf00      	nop
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40021000 	.word	0x40021000
 80074a0:	40010800 	.word	0x40010800
 80074a4:	40011000 	.word	0x40011000
 80074a8:	40010c00 	.word	0x40010c00

080074ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f003 fae1 	bl	800aa7c <osDelay>
 80074ba:	e7fb      	b.n	80074b4 <StartDefaultTask+0x8>

080074bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80074ce:	4b18      	ldr	r3, [pc, #96]	; (8007530 <HAL_MspInit+0x68>)
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	4a17      	ldr	r2, [pc, #92]	; (8007530 <HAL_MspInit+0x68>)
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	6193      	str	r3, [r2, #24]
 80074da:	4b15      	ldr	r3, [pc, #84]	; (8007530 <HAL_MspInit+0x68>)
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	60bb      	str	r3, [r7, #8]
 80074e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <HAL_MspInit+0x68>)
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	4a11      	ldr	r2, [pc, #68]	; (8007530 <HAL_MspInit+0x68>)
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	61d3      	str	r3, [r2, #28]
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <HAL_MspInit+0x68>)
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80074fe:	2200      	movs	r2, #0
 8007500:	210f      	movs	r1, #15
 8007502:	f06f 0001 	mvn.w	r0, #1
 8007506:	f000 fc1c 	bl	8007d42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <HAL_MspInit+0x6c>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	4a04      	ldr	r2, [pc, #16]	; (8007534 <HAL_MspInit+0x6c>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	40021000 	.word	0x40021000
 8007534:	40010000 	.word	0x40010000

08007538 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007540:	f107 0310 	add.w	r3, r7, #16
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	609a      	str	r2, [r3, #8]
 800754c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_CAN_MspInit+0x8c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d131      	bne.n	80075bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 800755e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007562:	61d3      	str	r3, [r2, #28]
 8007564:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007570:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	6193      	str	r3, [r2, #24]
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <HAL_CAN_MspInit+0x90>)
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800758c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	4619      	mov	r1, r3
 800759c:	480b      	ldr	r0, [pc, #44]	; (80075cc <HAL_CAN_MspInit+0x94>)
 800759e:	f000 fc07 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80075a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a8:	2302      	movs	r3, #2
 80075aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075ac:	2303      	movs	r3, #3
 80075ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b0:	f107 0310 	add.w	r3, r7, #16
 80075b4:	4619      	mov	r1, r3
 80075b6:	4805      	ldr	r0, [pc, #20]	; (80075cc <HAL_CAN_MspInit+0x94>)
 80075b8:	f000 fbfa 	bl	8007db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80075bc:	bf00      	nop
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40006400 	.word	0x40006400
 80075c8:	40021000 	.word	0x40021000
 80075cc:	40010800 	.word	0x40010800

080075d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a15      	ldr	r2, [pc, #84]	; (8007640 <HAL_I2C_MspInit+0x70>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d123      	bne.n	8007638 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f0:	4b14      	ldr	r3, [pc, #80]	; (8007644 <HAL_I2C_MspInit+0x74>)
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4a13      	ldr	r2, [pc, #76]	; (8007644 <HAL_I2C_MspInit+0x74>)
 80075f6:	f043 0308 	orr.w	r3, r3, #8
 80075fa:	6193      	str	r3, [r2, #24]
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_I2C_MspInit+0x74>)
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007608:	23c0      	movs	r3, #192	; 0xc0
 800760a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800760c:	2312      	movs	r3, #18
 800760e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007610:	2303      	movs	r3, #3
 8007612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	4619      	mov	r1, r3
 800761a:	480b      	ldr	r0, [pc, #44]	; (8007648 <HAL_I2C_MspInit+0x78>)
 800761c:	f000 fbc8 	bl	8007db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <HAL_I2C_MspInit+0x74>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	4a07      	ldr	r2, [pc, #28]	; (8007644 <HAL_I2C_MspInit+0x74>)
 8007626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800762a:	61d3      	str	r3, [r2, #28]
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_I2C_MspInit+0x74>)
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007638:	bf00      	nop
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40005400 	.word	0x40005400
 8007644:	40021000 	.word	0x40021000
 8007648:	40010c00 	.word	0x40010c00

0800764c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <HAL_I2C_MspDeInit+0x38>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10d      	bne.n	800767a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <HAL_I2C_MspDeInit+0x3c>)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4a09      	ldr	r2, [pc, #36]	; (8007688 <HAL_I2C_MspDeInit+0x3c>)
 8007664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007668:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800766a:	2140      	movs	r1, #64	; 0x40
 800766c:	4807      	ldr	r0, [pc, #28]	; (800768c <HAL_I2C_MspDeInit+0x40>)
 800766e:	f000 fd33 	bl	80080d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007672:	2180      	movs	r1, #128	; 0x80
 8007674:	4805      	ldr	r0, [pc, #20]	; (800768c <HAL_I2C_MspDeInit+0x40>)
 8007676:	f000 fd2f 	bl	80080d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40005400 	.word	0x40005400
 8007688:	40021000 	.word	0x40021000
 800768c:	40010c00 	.word	0x40010c00

08007690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a0d      	ldr	r2, [pc, #52]	; (80076d4 <HAL_TIM_Base_MspInit+0x44>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d113      	bne.n	80076ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <HAL_TIM_Base_MspInit+0x48>)
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <HAL_TIM_Base_MspInit+0x48>)
 80076a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076ac:	6193      	str	r3, [r2, #24]
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <HAL_TIM_Base_MspInit+0x48>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2105      	movs	r1, #5
 80076be:	2019      	movs	r0, #25
 80076c0:	f000 fb3f 	bl	8007d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80076c4:	2019      	movs	r0, #25
 80076c6:	f000 fb58 	bl	8007d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40021000 	.word	0x40021000

080076dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	609a      	str	r2, [r3, #8]
 80076f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <HAL_UART_MspInit+0x8c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d131      	bne.n	8007760 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80076fc:	4b1b      	ldr	r3, [pc, #108]	; (800776c <HAL_UART_MspInit+0x90>)
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	4a1a      	ldr	r2, [pc, #104]	; (800776c <HAL_UART_MspInit+0x90>)
 8007702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007706:	6193      	str	r3, [r2, #24]
 8007708:	4b18      	ldr	r3, [pc, #96]	; (800776c <HAL_UART_MspInit+0x90>)
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <HAL_UART_MspInit+0x90>)
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <HAL_UART_MspInit+0x90>)
 800771a:	f043 0304 	orr.w	r3, r3, #4
 800771e:	6193      	str	r3, [r2, #24]
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <HAL_UART_MspInit+0x90>)
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800772c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007732:	2302      	movs	r3, #2
 8007734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007736:	2303      	movs	r3, #3
 8007738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800773a:	f107 0310 	add.w	r3, r7, #16
 800773e:	4619      	mov	r1, r3
 8007740:	480b      	ldr	r0, [pc, #44]	; (8007770 <HAL_UART_MspInit+0x94>)
 8007742:	f000 fb35 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	4619      	mov	r1, r3
 800775a:	4805      	ldr	r0, [pc, #20]	; (8007770 <HAL_UART_MspInit+0x94>)
 800775c:	f000 fb28 	bl	8007db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007760:	bf00      	nop
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40013800 	.word	0x40013800
 800776c:	40021000 	.word	0x40021000
 8007770:	40010800 	.word	0x40010800

08007774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007778:	e7fe      	b.n	8007778 <NMI_Handler+0x4>

0800777a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800777a:	b480      	push	{r7}
 800777c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800777e:	e7fe      	b.n	800777e <HardFault_Handler+0x4>

08007780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007784:	e7fe      	b.n	8007784 <MemManage_Handler+0x4>

08007786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800778a:	e7fe      	b.n	800778a <BusFault_Handler+0x4>

0800778c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007790:	e7fe      	b.n	8007790 <UsageFault_Handler+0x4>

08007792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007792:	b480      	push	{r7}
 8007794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077a2:	f000 f8bb 	bl	800791c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80077a6:	f004 fabb 	bl	800bd20 <xTaskGetSchedulerState>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d001      	beq.n	80077b4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80077b0:	f004 fd32 	bl	800c218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077b4:	bf00      	nop
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80077bc:	4802      	ldr	r0, [pc, #8]	; (80077c8 <TIM1_UP_IRQHandler+0x10>)
 80077be:	f002 fc31 	bl	800a024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80077c2:	bf00      	nop
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000edc 	.word	0x20000edc

080077cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077d4:	4a14      	ldr	r2, [pc, #80]	; (8007828 <_sbrk+0x5c>)
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <_sbrk+0x60>)
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <_sbrk+0x64>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <_sbrk+0x64>)
 80077ea:	4a12      	ldr	r2, [pc, #72]	; (8007834 <_sbrk+0x68>)
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <_sbrk+0x64>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d207      	bcs.n	800780c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077fc:	f005 f850 	bl	800c8a0 <__errno>
 8007800:	4603      	mov	r3, r0
 8007802:	220c      	movs	r2, #12
 8007804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
 800780a:	e009      	b.n	8007820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <_sbrk+0x64>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <_sbrk+0x64>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	4a05      	ldr	r2, [pc, #20]	; (8007830 <_sbrk+0x64>)
 800781c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	2000c000 	.word	0x2000c000
 800782c:	00000400 	.word	0x00000400
 8007830:	20000f28 	.word	0x20000f28
 8007834:	20001dc8 	.word	0x20001dc8

08007838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800783c:	bf00      	nop
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr

08007844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007844:	480c      	ldr	r0, [pc, #48]	; (8007878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007846:	490d      	ldr	r1, [pc, #52]	; (800787c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007848:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800784a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800784c:	e002      	b.n	8007854 <LoopCopyDataInit>

0800784e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800784e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007852:	3304      	adds	r3, #4

08007854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007858:	d3f9      	bcc.n	800784e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800785a:	4a0a      	ldr	r2, [pc, #40]	; (8007884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800785c:	4c0a      	ldr	r4, [pc, #40]	; (8007888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800785e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007860:	e001      	b.n	8007866 <LoopFillZerobss>

08007862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007864:	3204      	adds	r2, #4

08007866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007868:	d3fb      	bcc.n	8007862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800786a:	f7ff ffe5 	bl	8007838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800786e:	f005 f81d 	bl	800c8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007872:	f7fd faa5 	bl	8004dc0 <main>
  bx lr
 8007876:	4770      	bx	lr
  ldr r0, =_sdata
 8007878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800787c:	200009a4 	.word	0x200009a4
  ldr r2, =_sidata
 8007880:	0800d754 	.word	0x0800d754
  ldr r2, =_sbss
 8007884:	200009a4 	.word	0x200009a4
  ldr r4, =_ebss
 8007888:	20001dc4 	.word	0x20001dc4

0800788c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800788c:	e7fe      	b.n	800788c <ADC1_2_IRQHandler>
	...

08007890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_Init+0x28>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <HAL_Init+0x28>)
 800789a:	f043 0310 	orr.w	r3, r3, #16
 800789e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078a0:	2003      	movs	r0, #3
 80078a2:	f000 fa43 	bl	8007d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078a6:	200f      	movs	r0, #15
 80078a8:	f000 f808 	bl	80078bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078ac:	f7ff fe0c 	bl	80074c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40022000 	.word	0x40022000

080078bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <HAL_InitTick+0x54>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b12      	ldr	r3, [pc, #72]	; (8007914 <HAL_InitTick+0x58>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fa5b 	bl	8007d96 <HAL_SYSTICK_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e00e      	b.n	8007908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d80a      	bhi.n	8007906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078f0:	2200      	movs	r2, #0
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	f000 fa23 	bl	8007d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078fc:	4a06      	ldr	r2, [pc, #24]	; (8007918 <HAL_InitTick+0x5c>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000944 	.word	0x20000944
 8007914:	2000094c 	.word	0x2000094c
 8007918:	20000948 	.word	0x20000948

0800791c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <HAL_IncTick+0x1c>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_IncTick+0x20>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4413      	add	r3, r2
 800792c:	4a03      	ldr	r2, [pc, #12]	; (800793c <HAL_IncTick+0x20>)
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr
 8007938:	2000094c 	.word	0x2000094c
 800793c:	20000f2c 	.word	0x20000f2c

08007940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return uwTick;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <HAL_GetTick+0x10>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	20000f2c 	.word	0x20000f2c

08007954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800795c:	f7ff fff0 	bl	8007940 <HAL_GetTick>
 8007960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d005      	beq.n	800797a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <HAL_Delay+0x44>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800797a:	bf00      	nop
 800797c:	f7ff ffe0 	bl	8007940 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d8f7      	bhi.n	800797c <HAL_Delay+0x28>
  {
  }
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000094c 	.word	0x2000094c

0800799c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e0ed      	b.n	8007b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fdbc 	bl	8007538 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079d0:	f7ff ffb6 	bl	8007940 <HAL_GetTick>
 80079d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80079d6:	e012      	b.n	80079fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80079d8:	f7ff ffb2 	bl	8007940 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b0a      	cmp	r3, #10
 80079e4:	d90b      	bls.n	80079fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2205      	movs	r2, #5
 80079f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e0c5      	b.n	8007b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0e5      	beq.n	80079d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0202 	bic.w	r2, r2, #2
 8007a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a1c:	f7ff ff90 	bl	8007940 <HAL_GetTick>
 8007a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a22:	e012      	b.n	8007a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a24:	f7ff ff8c 	bl	8007940 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b0a      	cmp	r3, #10
 8007a30:	d90b      	bls.n	8007a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2205      	movs	r2, #5
 8007a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e09f      	b.n	8007b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7e1b      	ldrb	r3, [r3, #24]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d108      	bne.n	8007a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e007      	b.n	8007a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7e5b      	ldrb	r3, [r3, #25]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d108      	bne.n	8007a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e007      	b.n	8007aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7e9b      	ldrb	r3, [r3, #26]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d108      	bne.n	8007ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0220 	orr.w	r2, r2, #32
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e007      	b.n	8007ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0220 	bic.w	r2, r2, #32
 8007ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7edb      	ldrb	r3, [r3, #27]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0210 	bic.w	r2, r2, #16
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e007      	b.n	8007b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0210 	orr.w	r2, r2, #16
 8007afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7f1b      	ldrb	r3, [r3, #28]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e007      	b.n	8007b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0208 	bic.w	r2, r2, #8
 8007b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7f5b      	ldrb	r3, [r3, #29]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d108      	bne.n	8007b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0204 	orr.w	r2, r2, #4
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0204 	bic.w	r2, r2, #4
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	ea42 0103 	orr.w	r1, r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	1e5a      	subs	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <__NVIC_SetPriorityGrouping>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bc6:	4a04      	ldr	r2, [pc, #16]	; (8007bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	60d3      	str	r3, [r2, #12]
}
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	e000ed00 	.word	0xe000ed00

08007bdc <__NVIC_GetPriorityGrouping>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	f003 0307 	and.w	r3, r3, #7
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	e000ed00 	.word	0xe000ed00

08007bf8 <__NVIC_EnableIRQ>:
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db0b      	blt.n	8007c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	f003 021f 	and.w	r2, r3, #31
 8007c10:	4906      	ldr	r1, [pc, #24]	; (8007c2c <__NVIC_EnableIRQ+0x34>)
 8007c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	2001      	movs	r0, #1
 8007c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr
 8007c2c:	e000e100 	.word	0xe000e100

08007c30 <__NVIC_SetPriority>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db0a      	blt.n	8007c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	490c      	ldr	r1, [pc, #48]	; (8007c7c <__NVIC_SetPriority+0x4c>)
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	0112      	lsls	r2, r2, #4
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	440b      	add	r3, r1
 8007c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c58:	e00a      	b.n	8007c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	4908      	ldr	r1, [pc, #32]	; (8007c80 <__NVIC_SetPriority+0x50>)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	3b04      	subs	r3, #4
 8007c68:	0112      	lsls	r2, r2, #4
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	761a      	strb	r2, [r3, #24]
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	e000e100 	.word	0xe000e100
 8007c80:	e000ed00 	.word	0xe000ed00

08007c84 <NVIC_EncodePriority>:
{
 8007c84:	b480      	push	{r7}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f1c3 0307 	rsb	r3, r3, #7
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	bf28      	it	cs
 8007ca2:	2304      	movcs	r3, #4
 8007ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d902      	bls.n	8007cb4 <NVIC_EncodePriority+0x30>
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3b03      	subs	r3, #3
 8007cb2:	e000      	b.n	8007cb6 <NVIC_EncodePriority+0x32>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	43d9      	mvns	r1, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cdc:	4313      	orrs	r3, r2
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3724      	adds	r7, #36	; 0x24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr

08007ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cf8:	d301      	bcc.n	8007cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e00f      	b.n	8007d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cfe:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <SysTick_Config+0x40>)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d06:	210f      	movs	r1, #15
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	f7ff ff90 	bl	8007c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d10:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <SysTick_Config+0x40>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d16:	4b04      	ldr	r3, [pc, #16]	; (8007d28 <SysTick_Config+0x40>)
 8007d18:	2207      	movs	r2, #7
 8007d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	e000e010 	.word	0xe000e010

08007d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff2d 	bl	8007b94 <__NVIC_SetPriorityGrouping>
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	4603      	mov	r3, r0
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d54:	f7ff ff42 	bl	8007bdc <__NVIC_GetPriorityGrouping>
 8007d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	6978      	ldr	r0, [r7, #20]
 8007d60:	f7ff ff90 	bl	8007c84 <NVIC_EncodePriority>
 8007d64:	4602      	mov	r2, r0
 8007d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff ff5f 	bl	8007c30 <__NVIC_SetPriority>
}
 8007d72:	bf00      	nop
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	4603      	mov	r3, r0
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff ff35 	bl	8007bf8 <__NVIC_EnableIRQ>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ffa2 	bl	8007ce8 <SysTick_Config>
 8007da4:	4603      	mov	r3, r0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b08b      	sub	sp, #44	; 0x2c
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dc2:	e179      	b.n	80080b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	f040 8168 	bne.w	80080b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4a96      	ldr	r2, [pc, #600]	; (8008040 <HAL_GPIO_Init+0x290>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d05e      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
 8007dec:	4a94      	ldr	r2, [pc, #592]	; (8008040 <HAL_GPIO_Init+0x290>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d875      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007df2:	4a94      	ldr	r2, [pc, #592]	; (8008044 <HAL_GPIO_Init+0x294>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d058      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
 8007df8:	4a92      	ldr	r2, [pc, #584]	; (8008044 <HAL_GPIO_Init+0x294>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d86f      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007dfe:	4a92      	ldr	r2, [pc, #584]	; (8008048 <HAL_GPIO_Init+0x298>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d052      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
 8007e04:	4a90      	ldr	r2, [pc, #576]	; (8008048 <HAL_GPIO_Init+0x298>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d869      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007e0a:	4a90      	ldr	r2, [pc, #576]	; (800804c <HAL_GPIO_Init+0x29c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04c      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
 8007e10:	4a8e      	ldr	r2, [pc, #568]	; (800804c <HAL_GPIO_Init+0x29c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d863      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007e16:	4a8e      	ldr	r2, [pc, #568]	; (8008050 <HAL_GPIO_Init+0x2a0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d046      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
 8007e1c:	4a8c      	ldr	r2, [pc, #560]	; (8008050 <HAL_GPIO_Init+0x2a0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d85d      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007e22:	2b12      	cmp	r3, #18
 8007e24:	d82a      	bhi.n	8007e7c <HAL_GPIO_Init+0xcc>
 8007e26:	2b12      	cmp	r3, #18
 8007e28:	d859      	bhi.n	8007ede <HAL_GPIO_Init+0x12e>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <HAL_GPIO_Init+0x80>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007eab 	.word	0x08007eab
 8007e34:	08007e85 	.word	0x08007e85
 8007e38:	08007e97 	.word	0x08007e97
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007edf 	.word	0x08007edf
 8007e44:	08007edf 	.word	0x08007edf
 8007e48:	08007edf 	.word	0x08007edf
 8007e4c:	08007edf 	.word	0x08007edf
 8007e50:	08007edf 	.word	0x08007edf
 8007e54:	08007edf 	.word	0x08007edf
 8007e58:	08007edf 	.word	0x08007edf
 8007e5c:	08007edf 	.word	0x08007edf
 8007e60:	08007edf 	.word	0x08007edf
 8007e64:	08007edf 	.word	0x08007edf
 8007e68:	08007edf 	.word	0x08007edf
 8007e6c:	08007edf 	.word	0x08007edf
 8007e70:	08007edf 	.word	0x08007edf
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	4a75      	ldr	r2, [pc, #468]	; (8008054 <HAL_GPIO_Init+0x2a4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007e82:	e02c      	b.n	8007ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	623b      	str	r3, [r7, #32]
          break;
 8007e8a:	e029      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	3304      	adds	r3, #4
 8007e92:	623b      	str	r3, [r7, #32]
          break;
 8007e94:	e024      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	623b      	str	r3, [r7, #32]
          break;
 8007e9e:	e01f      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	623b      	str	r3, [r7, #32]
          break;
 8007ea8:	e01a      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	623b      	str	r3, [r7, #32]
          break;
 8007eb6:	e013      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d105      	bne.n	8007ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	611a      	str	r2, [r3, #16]
          break;
 8007eca:	e009      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ecc:	2308      	movs	r3, #8
 8007ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	615a      	str	r2, [r3, #20]
          break;
 8007ed6:	e003      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	623b      	str	r3, [r7, #32]
          break;
 8007edc:	e000      	b.n	8007ee0 <HAL_GPIO_Init+0x130>
          break;
 8007ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2bff      	cmp	r3, #255	; 0xff
 8007ee4:	d801      	bhi.n	8007eea <HAL_GPIO_Init+0x13a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	e001      	b.n	8007eee <HAL_GPIO_Init+0x13e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2bff      	cmp	r3, #255	; 0xff
 8007ef4:	d802      	bhi.n	8007efc <HAL_GPIO_Init+0x14c>
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	e002      	b.n	8007f02 <HAL_GPIO_Init+0x152>
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3b08      	subs	r3, #8
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	210f      	movs	r1, #15
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f10:	43db      	mvns	r3, r3
 8007f12:	401a      	ands	r2, r3
 8007f14:	6a39      	ldr	r1, [r7, #32]
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80c1 	beq.w	80080b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007f30:	4b49      	ldr	r3, [pc, #292]	; (8008058 <HAL_GPIO_Init+0x2a8>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	4a48      	ldr	r2, [pc, #288]	; (8008058 <HAL_GPIO_Init+0x2a8>)
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	6193      	str	r3, [r2, #24]
 8007f3c:	4b46      	ldr	r3, [pc, #280]	; (8008058 <HAL_GPIO_Init+0x2a8>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007f48:	4a44      	ldr	r2, [pc, #272]	; (800805c <HAL_GPIO_Init+0x2ac>)
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	3302      	adds	r3, #2
 8007f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	220f      	movs	r2, #15
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	43db      	mvns	r3, r3
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <HAL_GPIO_Init+0x2b0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01f      	beq.n	8007fb4 <HAL_GPIO_Init+0x204>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3b      	ldr	r2, [pc, #236]	; (8008064 <HAL_GPIO_Init+0x2b4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d019      	beq.n	8007fb0 <HAL_GPIO_Init+0x200>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3a      	ldr	r2, [pc, #232]	; (8008068 <HAL_GPIO_Init+0x2b8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d013      	beq.n	8007fac <HAL_GPIO_Init+0x1fc>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a39      	ldr	r2, [pc, #228]	; (800806c <HAL_GPIO_Init+0x2bc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00d      	beq.n	8007fa8 <HAL_GPIO_Init+0x1f8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a38      	ldr	r2, [pc, #224]	; (8008070 <HAL_GPIO_Init+0x2c0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d007      	beq.n	8007fa4 <HAL_GPIO_Init+0x1f4>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a37      	ldr	r2, [pc, #220]	; (8008074 <HAL_GPIO_Init+0x2c4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d101      	bne.n	8007fa0 <HAL_GPIO_Init+0x1f0>
 8007f9c:	2305      	movs	r3, #5
 8007f9e:	e00a      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fa0:	2306      	movs	r3, #6
 8007fa2:	e008      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	e006      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e004      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e002      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	f002 0203 	and.w	r2, r2, #3
 8007fbc:	0092      	lsls	r2, r2, #2
 8007fbe:	4093      	lsls	r3, r2
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007fc6:	4925      	ldr	r1, [pc, #148]	; (800805c <HAL_GPIO_Init+0x2ac>)
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	3302      	adds	r3, #2
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d006      	beq.n	8007fee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	4924      	ldr	r1, [pc, #144]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	600b      	str	r3, [r1, #0]
 8007fec:	e006      	b.n	8007ffc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007fee:	4b22      	ldr	r3, [pc, #136]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	4920      	ldr	r1, [pc, #128]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	491a      	ldr	r1, [pc, #104]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	4313      	orrs	r3, r2
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	e006      	b.n	8008024 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008016:	4b18      	ldr	r3, [pc, #96]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	43db      	mvns	r3, r3
 800801e:	4916      	ldr	r1, [pc, #88]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8008020:	4013      	ands	r3, r2
 8008022:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d025      	beq.n	800807c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	4910      	ldr	r1, [pc, #64]	; (8008078 <HAL_GPIO_Init+0x2c8>)
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	4313      	orrs	r3, r2
 800803a:	608b      	str	r3, [r1, #8]
 800803c:	e025      	b.n	800808a <HAL_GPIO_Init+0x2da>
 800803e:	bf00      	nop
 8008040:	10320000 	.word	0x10320000
 8008044:	10310000 	.word	0x10310000
 8008048:	10220000 	.word	0x10220000
 800804c:	10210000 	.word	0x10210000
 8008050:	10120000 	.word	0x10120000
 8008054:	10110000 	.word	0x10110000
 8008058:	40021000 	.word	0x40021000
 800805c:	40010000 	.word	0x40010000
 8008060:	40010800 	.word	0x40010800
 8008064:	40010c00 	.word	0x40010c00
 8008068:	40011000 	.word	0x40011000
 800806c:	40011400 	.word	0x40011400
 8008070:	40011800 	.word	0x40011800
 8008074:	40011c00 	.word	0x40011c00
 8008078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <HAL_GPIO_Init+0x324>)
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	43db      	mvns	r3, r3
 8008084:	4913      	ldr	r1, [pc, #76]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008086:	4013      	ands	r3, r2
 8008088:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d006      	beq.n	80080a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008096:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	490e      	ldr	r1, [pc, #56]	; (80080d4 <HAL_GPIO_Init+0x324>)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60cb      	str	r3, [r1, #12]
 80080a2:	e006      	b.n	80080b2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80080a4:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <HAL_GPIO_Init+0x324>)
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	4909      	ldr	r1, [pc, #36]	; (80080d4 <HAL_GPIO_Init+0x324>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	3301      	adds	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f47f ae7e 	bne.w	8007dc4 <HAL_GPIO_Init+0x14>
  }
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	372c      	adds	r7, #44	; 0x2c
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr
 80080d4:	40010400 	.word	0x40010400

080080d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80080d8:	b480      	push	{r7}
 80080da:	b089      	sub	sp, #36	; 0x24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80080e6:	e0a6      	b.n	8008236 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80080e8:	2201      	movs	r2, #1
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4013      	ands	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8099 	beq.w	8008230 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80080fe:	4a54      	ldr	r2, [pc, #336]	; (8008250 <HAL_GPIO_DeInit+0x178>)
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	089b      	lsrs	r3, r3, #2
 8008104:	3302      	adds	r3, #2
 8008106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	220f      	movs	r2, #15
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4013      	ands	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a4c      	ldr	r2, [pc, #304]	; (8008254 <HAL_GPIO_DeInit+0x17c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d01f      	beq.n	8008168 <HAL_GPIO_DeInit+0x90>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a4b      	ldr	r2, [pc, #300]	; (8008258 <HAL_GPIO_DeInit+0x180>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d019      	beq.n	8008164 <HAL_GPIO_DeInit+0x8c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a4a      	ldr	r2, [pc, #296]	; (800825c <HAL_GPIO_DeInit+0x184>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <HAL_GPIO_DeInit+0x88>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a49      	ldr	r2, [pc, #292]	; (8008260 <HAL_GPIO_DeInit+0x188>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00d      	beq.n	800815c <HAL_GPIO_DeInit+0x84>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a48      	ldr	r2, [pc, #288]	; (8008264 <HAL_GPIO_DeInit+0x18c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d007      	beq.n	8008158 <HAL_GPIO_DeInit+0x80>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a47      	ldr	r2, [pc, #284]	; (8008268 <HAL_GPIO_DeInit+0x190>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d101      	bne.n	8008154 <HAL_GPIO_DeInit+0x7c>
 8008150:	2305      	movs	r3, #5
 8008152:	e00a      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 8008154:	2306      	movs	r3, #6
 8008156:	e008      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 8008158:	2304      	movs	r3, #4
 800815a:	e006      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 800815c:	2303      	movs	r3, #3
 800815e:	e004      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 8008160:	2302      	movs	r3, #2
 8008162:	e002      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <HAL_GPIO_DeInit+0x92>
 8008168:	2300      	movs	r3, #0
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	f002 0203 	and.w	r2, r2, #3
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	4093      	lsls	r3, r2
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	429a      	cmp	r2, r3
 8008178:	d132      	bne.n	80081e0 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	220f      	movs	r2, #15
 8008184:	fa02 f303 	lsl.w	r3, r2, r3
 8008188:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800818a:	4a31      	ldr	r2, [pc, #196]	; (8008250 <HAL_GPIO_DeInit+0x178>)
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	089b      	lsrs	r3, r3, #2
 8008190:	3302      	adds	r3, #2
 8008192:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	43da      	mvns	r2, r3
 800819a:	482d      	ldr	r0, [pc, #180]	; (8008250 <HAL_GPIO_DeInit+0x178>)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	400a      	ands	r2, r1
 80081a2:	3302      	adds	r3, #2
 80081a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80081a8:	4b30      	ldr	r3, [pc, #192]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	43db      	mvns	r3, r3
 80081b0:	492e      	ldr	r1, [pc, #184]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80081b6:	4b2d      	ldr	r3, [pc, #180]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	43db      	mvns	r3, r3
 80081be:	492b      	ldr	r1, [pc, #172]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	43db      	mvns	r3, r3
 80081cc:	4927      	ldr	r1, [pc, #156]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80081d2:	4b26      	ldr	r3, [pc, #152]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	43db      	mvns	r3, r3
 80081da:	4924      	ldr	r1, [pc, #144]	; (800826c <HAL_GPIO_DeInit+0x194>)
 80081dc:	4013      	ands	r3, r2
 80081de:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2bff      	cmp	r3, #255	; 0xff
 80081e4:	d801      	bhi.n	80081ea <HAL_GPIO_DeInit+0x112>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	e001      	b.n	80081ee <HAL_GPIO_DeInit+0x116>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2bff      	cmp	r3, #255	; 0xff
 80081f4:	d802      	bhi.n	80081fc <HAL_GPIO_DeInit+0x124>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	e002      	b.n	8008202 <HAL_GPIO_DeInit+0x12a>
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	3b08      	subs	r3, #8
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	210f      	movs	r1, #15
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	43db      	mvns	r3, r3
 8008212:	401a      	ands	r2, r3
 8008214:	2104      	movs	r1, #4
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	431a      	orrs	r2, r3
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	43db      	mvns	r3, r3
 800822a:	401a      	ands	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	3301      	adds	r3, #1
 8008234:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	fa22 f303 	lsr.w	r3, r2, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	f47f af52 	bne.w	80080e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	3724      	adds	r7, #36	; 0x24
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr
 8008250:	40010000 	.word	0x40010000
 8008254:	40010800 	.word	0x40010800
 8008258:	40010c00 	.word	0x40010c00
 800825c:	40011000 	.word	0x40011000
 8008260:	40011400 	.word	0x40011400
 8008264:	40011800 	.word	0x40011800
 8008268:	40011c00 	.word	0x40011c00
 800826c:	40010400 	.word	0x40010400

08008270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	887b      	ldrh	r3, [r7, #2]
 8008282:	4013      	ands	r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
 800828c:	e001      	b.n	8008292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	807b      	strh	r3, [r7, #2]
 80082aa:	4613      	mov	r3, r2
 80082ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082ae:	787b      	ldrb	r3, [r7, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082b4:	887a      	ldrh	r2, [r7, #2]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80082ba:	e003      	b.n	80082c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80082bc:	887b      	ldrh	r3, [r7, #2]
 80082be:	041a      	lsls	r2, r3, #16
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	611a      	str	r2, [r3, #16]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80082e0:	887a      	ldrh	r2, [r7, #2]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4013      	ands	r3, r2
 80082e6:	041a      	lsls	r2, r3, #16
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	43d9      	mvns	r1, r3
 80082ec:	887b      	ldrh	r3, [r7, #2]
 80082ee:	400b      	ands	r3, r1
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr

08008300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e12b      	b.n	800856a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff f952 	bl	80075d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2224      	movs	r2, #36	; 0x24
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008364:	f001 fd68 	bl	8009e38 <HAL_RCC_GetPCLK1Freq>
 8008368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4a81      	ldr	r2, [pc, #516]	; (8008574 <HAL_I2C_Init+0x274>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d807      	bhi.n	8008384 <HAL_I2C_Init+0x84>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a80      	ldr	r2, [pc, #512]	; (8008578 <HAL_I2C_Init+0x278>)
 8008378:	4293      	cmp	r3, r2
 800837a:	bf94      	ite	ls
 800837c:	2301      	movls	r3, #1
 800837e:	2300      	movhi	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	e006      	b.n	8008392 <HAL_I2C_Init+0x92>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a7d      	ldr	r2, [pc, #500]	; (800857c <HAL_I2C_Init+0x27c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	bf94      	ite	ls
 800838c:	2301      	movls	r3, #1
 800838e:	2300      	movhi	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e0e7      	b.n	800856a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4a78      	ldr	r2, [pc, #480]	; (8008580 <HAL_I2C_Init+0x280>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	0c9b      	lsrs	r3, r3, #18
 80083a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a6a      	ldr	r2, [pc, #424]	; (8008574 <HAL_I2C_Init+0x274>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d802      	bhi.n	80083d4 <HAL_I2C_Init+0xd4>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3301      	adds	r3, #1
 80083d2:	e009      	b.n	80083e8 <HAL_I2C_Init+0xe8>
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	4a69      	ldr	r2, [pc, #420]	; (8008584 <HAL_I2C_Init+0x284>)
 80083e0:	fba2 2303 	umull	r2, r3, r2, r3
 80083e4:	099b      	lsrs	r3, r3, #6
 80083e6:	3301      	adds	r3, #1
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80083fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	495c      	ldr	r1, [pc, #368]	; (8008574 <HAL_I2C_Init+0x274>)
 8008404:	428b      	cmp	r3, r1
 8008406:	d819      	bhi.n	800843c <HAL_I2C_Init+0x13c>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	1e59      	subs	r1, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	fbb1 f3f3 	udiv	r3, r1, r3
 8008416:	1c59      	adds	r1, r3, #1
 8008418:	f640 73fc 	movw	r3, #4092	; 0xffc
 800841c:	400b      	ands	r3, r1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <HAL_I2C_Init+0x138>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1e59      	subs	r1, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008430:	3301      	adds	r3, #1
 8008432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008436:	e051      	b.n	80084dc <HAL_I2C_Init+0x1dc>
 8008438:	2304      	movs	r3, #4
 800843a:	e04f      	b.n	80084dc <HAL_I2C_Init+0x1dc>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d111      	bne.n	8008468 <HAL_I2C_Init+0x168>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1e58      	subs	r0, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	440b      	add	r3, r1
 8008452:	fbb0 f3f3 	udiv	r3, r0, r3
 8008456:	3301      	adds	r3, #1
 8008458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	e012      	b.n	800848e <HAL_I2C_Init+0x18e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	1e58      	subs	r0, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6859      	ldr	r1, [r3, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	0099      	lsls	r1, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	fbb0 f3f3 	udiv	r3, r0, r3
 800847e:	3301      	adds	r3, #1
 8008480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <HAL_I2C_Init+0x196>
 8008492:	2301      	movs	r3, #1
 8008494:	e022      	b.n	80084dc <HAL_I2C_Init+0x1dc>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10e      	bne.n	80084bc <HAL_I2C_Init+0x1bc>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1e58      	subs	r0, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6859      	ldr	r1, [r3, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	440b      	add	r3, r1
 80084ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80084b0:	3301      	adds	r3, #1
 80084b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ba:	e00f      	b.n	80084dc <HAL_I2C_Init+0x1dc>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	1e58      	subs	r0, r3, #1
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6859      	ldr	r1, [r3, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	0099      	lsls	r1, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80084d2:	3301      	adds	r3, #1
 80084d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	6809      	ldr	r1, [r1, #0]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800850a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6911      	ldr	r1, [r2, #16]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68d2      	ldr	r2, [r2, #12]
 8008516:	4311      	orrs	r1, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	430b      	orrs	r3, r1
 800851e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695a      	ldr	r2, [r3, #20]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	000186a0 	.word	0x000186a0
 8008578:	001e847f 	.word	0x001e847f
 800857c:	003d08ff 	.word	0x003d08ff
 8008580:	431bde83 	.word	0x431bde83
 8008584:	10624dd3 	.word	0x10624dd3

08008588 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e021      	b.n	80085de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2224      	movs	r2, #36	; 0x24
 800859e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0201 	bic.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff f84a 	bl	800764c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	461a      	mov	r2, r3
 80085f4:	460b      	mov	r3, r1
 80085f6:	817b      	strh	r3, [r7, #10]
 80085f8:	4613      	mov	r3, r2
 80085fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085fc:	f7ff f9a0 	bl	8007940 <HAL_GetTick>
 8008600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b20      	cmp	r3, #32
 800860c:	f040 80e0 	bne.w	80087d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2319      	movs	r3, #25
 8008616:	2201      	movs	r2, #1
 8008618:	4970      	ldr	r1, [pc, #448]	; (80087dc <HAL_I2C_Master_Transmit+0x1f4>)
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fe5c 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008626:	2302      	movs	r3, #2
 8008628:	e0d3      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_I2C_Master_Transmit+0x50>
 8008634:	2302      	movs	r3, #2
 8008636:	e0cc      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b01      	cmp	r3, #1
 800864c:	d007      	beq.n	800865e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f042 0201 	orr.w	r2, r2, #1
 800865c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800866c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2221      	movs	r2, #33	; 0x21
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2210      	movs	r2, #16
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	893a      	ldrh	r2, [r7, #8]
 800868e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29a      	uxth	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4a50      	ldr	r2, [pc, #320]	; (80087e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800869e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80086a0:	8979      	ldrh	r1, [r7, #10]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	6a3a      	ldr	r2, [r7, #32]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fc16 	bl	8008ed8 <I2C_MasterRequestWrite>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e08d      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80086cc:	e066      	b.n	800879c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	6a39      	ldr	r1, [r7, #32]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fed6 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00d      	beq.n	80086fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d107      	bne.n	80086f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e06b      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	781a      	ldrb	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29a      	uxth	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008722:	3b01      	subs	r3, #1
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b04      	cmp	r3, #4
 8008736:	d11b      	bne.n	8008770 <HAL_I2C_Master_Transmit+0x188>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873c:	2b00      	cmp	r3, #0
 800873e:	d017      	beq.n	8008770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	6a39      	ldr	r1, [r7, #32]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fec6 	bl	8009506 <I2C_WaitOnBTFFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00d      	beq.n	800879c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	2b04      	cmp	r3, #4
 8008786:	d107      	bne.n	8008798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e01a      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d194      	bne.n	80086ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	00100002 	.word	0x00100002
 80087e0:	ffff0000 	.word	0xffff0000

080087e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	4608      	mov	r0, r1
 80087ee:	4611      	mov	r1, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	4603      	mov	r3, r0
 80087f4:	817b      	strh	r3, [r7, #10]
 80087f6:	460b      	mov	r3, r1
 80087f8:	813b      	strh	r3, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087fe:	f7ff f89f 	bl	8007940 <HAL_GetTick>
 8008802:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b20      	cmp	r3, #32
 800880e:	f040 80d9 	bne.w	80089c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	2319      	movs	r3, #25
 8008818:	2201      	movs	r2, #1
 800881a:	496d      	ldr	r1, [pc, #436]	; (80089d0 <HAL_I2C_Mem_Write+0x1ec>)
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fd5b 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008828:	2302      	movs	r3, #2
 800882a:	e0cc      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_I2C_Mem_Write+0x56>
 8008836:	2302      	movs	r3, #2
 8008838:	e0c5      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b01      	cmp	r3, #1
 800884e:	d007      	beq.n	8008860 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800886e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2221      	movs	r2, #33	; 0x21
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2240      	movs	r2, #64	; 0x40
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a3a      	ldr	r2, [r7, #32]
 800888a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008896:	b29a      	uxth	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a4d      	ldr	r2, [pc, #308]	; (80089d4 <HAL_I2C_Mem_Write+0x1f0>)
 80088a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088a2:	88f8      	ldrh	r0, [r7, #6]
 80088a4:	893a      	ldrh	r2, [r7, #8]
 80088a6:	8979      	ldrh	r1, [r7, #10]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4603      	mov	r3, r0
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fb92 	bl	8008fdc <I2C_RequestMemoryWrite>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d052      	beq.n	8008964 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e081      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fddc 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d107      	bne.n	80088ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e06b      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d11b      	bne.n	8008964 <HAL_I2C_Mem_Write+0x180>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	d017      	beq.n	8008964 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894e:	3b01      	subs	r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1aa      	bne.n	80088c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fdc8 	bl	8009506 <I2C_WaitOnBTFFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00d      	beq.n	8008998 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	2b04      	cmp	r3, #4
 8008982:	d107      	bne.n	8008994 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008992:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e016      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	00100002 	.word	0x00100002
 80089d4:	ffff0000 	.word	0xffff0000

080089d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08c      	sub	sp, #48	; 0x30
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	4608      	mov	r0, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	817b      	strh	r3, [r7, #10]
 80089ea:	460b      	mov	r3, r1
 80089ec:	813b      	strh	r3, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089f6:	f7fe ffa3 	bl	8007940 <HAL_GetTick>
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	f040 8244 	bne.w	8008e92 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2319      	movs	r3, #25
 8008a10:	2201      	movs	r2, #1
 8008a12:	4982      	ldr	r1, [pc, #520]	; (8008c1c <HAL_I2C_Mem_Read+0x244>)
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fc5f 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
 8008a22:	e237      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_I2C_Mem_Read+0x5a>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e230      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d007      	beq.n	8008a58 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2222      	movs	r2, #34	; 0x22
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2240      	movs	r2, #64	; 0x40
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a62      	ldr	r2, [pc, #392]	; (8008c20 <HAL_I2C_Mem_Read+0x248>)
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a9a:	88f8      	ldrh	r0, [r7, #6]
 8008a9c:	893a      	ldrh	r2, [r7, #8]
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fb2c 	bl	8009108 <I2C_RequestMemoryRead>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e1ec      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d113      	bne.n	8008aea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	e1c0      	b.n	8008e6c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d11e      	bne.n	8008b30 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b02:	b672      	cpsid	i
}
 8008b04:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b06:	2300      	movs	r3, #0
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008b2c:	b662      	cpsie	i
}
 8008b2e:	e035      	b.n	8008b9c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d11e      	bne.n	8008b76 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b48:	b672      	cpsid	i
}
 8008b4a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008b72:	b662      	cpsie	i
}
 8008b74:	e012      	b.n	8008b9c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b84:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b86:	2300      	movs	r3, #0
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	613b      	str	r3, [r7, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008b9c:	e166      	b.n	8008e6c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	f200 811f 	bhi.w	8008de6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d123      	bne.n	8008bf8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fce7 	bl	8009588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e167      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bf6:	e139      	b.n	8008e6c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d152      	bne.n	8008ca6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	2200      	movs	r2, #0
 8008c08:	4906      	ldr	r1, [pc, #24]	; (8008c24 <HAL_I2C_Mem_Read+0x24c>)
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fb64 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e13c      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
 8008c1a:	bf00      	nop
 8008c1c:	00100002 	.word	0x00100002
 8008c20:	ffff0000 	.word	0xffff0000
 8008c24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008c28:	b672      	cpsid	i
}
 8008c2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008c6e:	b662      	cpsie	i
}
 8008c70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ca4:	e0e2      	b.n	8008e6c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	2200      	movs	r2, #0
 8008cae:	497b      	ldr	r1, [pc, #492]	; (8008e9c <HAL_I2C_Mem_Read+0x4c4>)
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fb11 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0e9      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cd0:	b672      	cpsid	i
}
 8008cd2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d06:	4b66      	ldr	r3, [pc, #408]	; (8008ea0 <HAL_I2C_Mem_Read+0x4c8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	4a65      	ldr	r2, [pc, #404]	; (8008ea4 <HAL_I2C_Mem_Read+0x4cc>)
 8008d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d12:	0a1a      	lsrs	r2, r3, #8
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	00da      	lsls	r2, r3, #3
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d118      	bne.n	8008d5e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	f043 0220 	orr.w	r2, r3, #32
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008d4e:	b662      	cpsie	i
}
 8008d50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e09a      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d1d9      	bne.n	8008d20 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691a      	ldr	r2, [r3, #16]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008dae:	b662      	cpsie	i
}
 8008db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008de4:	e042      	b.n	8008e6c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fbcc 	bl	8009588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e04c      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	3b01      	subs	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d118      	bne.n	8008e6c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f47f ae94 	bne.w	8008b9e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e000      	b.n	8008e94 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3728      	adds	r7, #40	; 0x28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	00010004 	.word	0x00010004
 8008ea0:	20000944 	.word	0x20000944
 8008ea4:	14f8b589 	.word	0x14f8b589

08008ea8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	d006      	beq.n	8008f02 <I2C_MasterRequestWrite+0x2a>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d003      	beq.n	8008f02 <I2C_MasterRequestWrite+0x2a>
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f00:	d108      	bne.n	8008f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	e00b      	b.n	8008f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	2b12      	cmp	r3, #18
 8008f1a:	d107      	bne.n	8008f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f9cd 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00d      	beq.n	8008f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f52:	d103      	bne.n	8008f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e035      	b.n	8008fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f68:	d108      	bne.n	8008f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f6a:	897b      	ldrh	r3, [r7, #10]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f78:	611a      	str	r2, [r3, #16]
 8008f7a:	e01b      	b.n	8008fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f7c:	897b      	ldrh	r3, [r7, #10]
 8008f7e:	11db      	asrs	r3, r3, #7
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	f003 0306 	and.w	r3, r3, #6
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f063 030f 	orn	r3, r3, #15
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	490e      	ldr	r1, [pc, #56]	; (8008fd4 <I2C_MasterRequestWrite+0xfc>)
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f9f3 	bl	8009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e010      	b.n	8008fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4907      	ldr	r1, [pc, #28]	; (8008fd8 <I2C_MasterRequestWrite+0x100>)
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 f9e3 	bl	8009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	00010008 	.word	0x00010008
 8008fd8:	00010002 	.word	0x00010002

08008fdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	817b      	strh	r3, [r7, #10]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	813b      	strh	r3, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	2200      	movs	r2, #0
 800900e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 f960 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00d      	beq.n	800903a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902c:	d103      	bne.n	8009036 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009034:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e05f      	b.n	80090fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800903a:	897b      	ldrh	r3, [r7, #10]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	461a      	mov	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	6a3a      	ldr	r2, [r7, #32]
 800904e:	492d      	ldr	r1, [pc, #180]	; (8009104 <I2C_RequestMemoryWrite+0x128>)
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f998 	bl	8009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e04c      	b.n	80090fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009078:	6a39      	ldr	r1, [r7, #32]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fa02 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00d      	beq.n	80090a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	2b04      	cmp	r3, #4
 800908c:	d107      	bne.n	800909e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800909c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e02b      	b.n	80090fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d105      	bne.n	80090b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090a8:	893b      	ldrh	r3, [r7, #8]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	611a      	str	r2, [r3, #16]
 80090b2:	e021      	b.n	80090f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80090b4:	893b      	ldrh	r3, [r7, #8]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c4:	6a39      	ldr	r1, [r7, #32]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f9dc 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00d      	beq.n	80090ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d107      	bne.n	80090ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e005      	b.n	80090fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090ee:	893b      	ldrh	r3, [r7, #8]
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	00010002 	.word	0x00010002

08009108 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	461a      	mov	r2, r3
 8009116:	4603      	mov	r3, r0
 8009118:	817b      	strh	r3, [r7, #10]
 800911a:	460b      	mov	r3, r1
 800911c:	813b      	strh	r3, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009130:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	2200      	movs	r2, #0
 800914a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f8c2 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00d      	beq.n	8009176 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009168:	d103      	bne.n	8009172 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e0aa      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009176:	897b      	ldrh	r3, [r7, #10]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	461a      	mov	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	6a3a      	ldr	r2, [r7, #32]
 800918a:	4952      	ldr	r1, [pc, #328]	; (80092d4 <I2C_RequestMemoryRead+0x1cc>)
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f8fa 	bl	8009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e097      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b4:	6a39      	ldr	r1, [r7, #32]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f964 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d107      	bne.n	80091da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e076      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d105      	bne.n	80091f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091e4:	893b      	ldrh	r3, [r7, #8]
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	611a      	str	r2, [r3, #16]
 80091ee:	e021      	b.n	8009234 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80091f0:	893b      	ldrh	r3, [r7, #8]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009200:	6a39      	ldr	r1, [r7, #32]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f93e 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00d      	beq.n	800922a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	2b04      	cmp	r3, #4
 8009214:	d107      	bne.n	8009226 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e050      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800922a:	893b      	ldrh	r3, [r7, #8]
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009236:	6a39      	ldr	r1, [r7, #32]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f923 	bl	8009484 <I2C_WaitOnTXEFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00d      	beq.n	8009260 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	2b04      	cmp	r3, #4
 800924a:	d107      	bne.n	800925c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800925a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e035      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800926e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	2200      	movs	r2, #0
 8009278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f82b 	bl	80092d8 <I2C_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009296:	d103      	bne.n	80092a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800929e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e013      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092a4:	897b      	ldrh	r3, [r7, #10]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	4906      	ldr	r1, [pc, #24]	; (80092d4 <I2C_RequestMemoryRead+0x1cc>)
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f863 	bl	8009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	00010002 	.word	0x00010002

080092d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e8:	e025      	b.n	8009336 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d021      	beq.n	8009336 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f2:	f7fe fb25 	bl	8007940 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d302      	bcc.n	8009308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d116      	bne.n	8009336 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	f043 0220 	orr.w	r2, r3, #32
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e023      	b.n	800937e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10d      	bne.n	800935c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	43da      	mvns	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4013      	ands	r3, r2
 800934c:	b29b      	uxth	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	bf0c      	ite	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	2300      	movne	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	e00c      	b.n	8009376 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	43da      	mvns	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4013      	ands	r3, r2
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	bf0c      	ite	eq
 800936e:	2301      	moveq	r3, #1
 8009370:	2300      	movne	r3, #0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	461a      	mov	r2, r3
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	429a      	cmp	r2, r3
 800937a:	d0b6      	beq.n	80092ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
 8009392:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009394:	e051      	b.n	800943a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a4:	d123      	bne.n	80093ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	f043 0204 	orr.w	r2, r3, #4
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e046      	b.n	800947c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d021      	beq.n	800943a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7fe faa3 	bl	8007940 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d116      	bne.n	800943a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2220      	movs	r2, #32
 8009416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0220 	orr.w	r2, r3, #32
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e020      	b.n	800947c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b01      	cmp	r3, #1
 8009442:	d10c      	bne.n	800945e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	43da      	mvns	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4013      	ands	r3, r2
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	bf14      	ite	ne
 8009456:	2301      	movne	r3, #1
 8009458:	2300      	moveq	r3, #0
 800945a:	b2db      	uxtb	r3, r3
 800945c:	e00b      	b.n	8009476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	43da      	mvns	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4013      	ands	r3, r2
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d18d      	bne.n	8009396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009490:	e02d      	b.n	80094ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 f8ce 	bl	8009634 <I2C_IsAcknowledgeFailed>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e02d      	b.n	80094fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d021      	beq.n	80094ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094aa:	f7fe fa49 	bl	8007940 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d116      	bne.n	80094ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e007      	b.n	80094fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d1ca      	bne.n	8009492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009512:	e02d      	b.n	8009570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f88d 	bl	8009634 <I2C_IsAcknowledgeFailed>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e02d      	b.n	8009580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952a:	d021      	beq.n	8009570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800952c:	f7fe fa08 	bl	8007940 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d116      	bne.n	8009570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2220      	movs	r2, #32
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e007      	b.n	8009580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b04      	cmp	r3, #4
 800957c:	d1ca      	bne.n	8009514 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009594:	e042      	b.n	800961c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d119      	bne.n	80095d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0210 	mvn.w	r2, #16
 80095ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e029      	b.n	800962c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095d8:	f7fe f9b2 	bl	8007940 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d302      	bcc.n	80095ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d116      	bne.n	800961c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	f043 0220 	orr.w	r2, r3, #32
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e007      	b.n	800962c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d1b5      	bne.n	8009596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800964a:	d11b      	bne.n	8009684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	f043 0204 	orr.w	r2, r3, #4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e000      	b.n	8009686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr

08009690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e272      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8087 	beq.w	80097be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80096b0:	4b92      	ldr	r3, [pc, #584]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f003 030c 	and.w	r3, r3, #12
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d00c      	beq.n	80096d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80096bc:	4b8f      	ldr	r3, [pc, #572]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f003 030c 	and.w	r3, r3, #12
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d112      	bne.n	80096ee <HAL_RCC_OscConfig+0x5e>
 80096c8:	4b8c      	ldr	r3, [pc, #560]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d4:	d10b      	bne.n	80096ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d6:	4b89      	ldr	r3, [pc, #548]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d06c      	beq.n	80097bc <HAL_RCC_OscConfig+0x12c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d168      	bne.n	80097bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e24c      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f6:	d106      	bne.n	8009706 <HAL_RCC_OscConfig+0x76>
 80096f8:	4b80      	ldr	r3, [pc, #512]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a7f      	ldr	r2, [pc, #508]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80096fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e02e      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <HAL_RCC_OscConfig+0x98>
 800970e:	4b7b      	ldr	r3, [pc, #492]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a7a      	ldr	r2, [pc, #488]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	4b78      	ldr	r3, [pc, #480]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a77      	ldr	r2, [pc, #476]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	e01d      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009730:	d10c      	bne.n	800974c <HAL_RCC_OscConfig+0xbc>
 8009732:	4b72      	ldr	r3, [pc, #456]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a71      	ldr	r2, [pc, #452]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	4b6f      	ldr	r3, [pc, #444]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a6e      	ldr	r2, [pc, #440]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	e00b      	b.n	8009764 <HAL_RCC_OscConfig+0xd4>
 800974c:	4b6b      	ldr	r3, [pc, #428]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a6a      	ldr	r2, [pc, #424]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b68      	ldr	r3, [pc, #416]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a67      	ldr	r2, [pc, #412]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 800975e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d013      	beq.n	8009794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800976c:	f7fe f8e8 	bl	8007940 <HAL_GetTick>
 8009770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009772:	e008      	b.n	8009786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009774:	f7fe f8e4 	bl	8007940 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b64      	cmp	r3, #100	; 0x64
 8009780:	d901      	bls.n	8009786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e200      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009786:	4b5d      	ldr	r3, [pc, #372]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f0      	beq.n	8009774 <HAL_RCC_OscConfig+0xe4>
 8009792:	e014      	b.n	80097be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009794:	f7fe f8d4 	bl	8007940 <HAL_GetTick>
 8009798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800979c:	f7fe f8d0 	bl	8007940 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b64      	cmp	r3, #100	; 0x64
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e1ec      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097ae:	4b53      	ldr	r3, [pc, #332]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f0      	bne.n	800979c <HAL_RCC_OscConfig+0x10c>
 80097ba:	e000      	b.n	80097be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d063      	beq.n	8009892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80097ca:	4b4c      	ldr	r3, [pc, #304]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f003 030c 	and.w	r3, r3, #12
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80097d6:	4b49      	ldr	r3, [pc, #292]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f003 030c 	and.w	r3, r3, #12
 80097de:	2b08      	cmp	r3, #8
 80097e0:	d11c      	bne.n	800981c <HAL_RCC_OscConfig+0x18c>
 80097e2:	4b46      	ldr	r3, [pc, #280]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d116      	bne.n	800981c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ee:	4b43      	ldr	r3, [pc, #268]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <HAL_RCC_OscConfig+0x176>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d001      	beq.n	8009806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e1c0      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009806:	4b3d      	ldr	r3, [pc, #244]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4939      	ldr	r1, [pc, #228]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800981a:	e03a      	b.n	8009892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d020      	beq.n	8009866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009824:	4b36      	ldr	r3, [pc, #216]	; (8009900 <HAL_RCC_OscConfig+0x270>)
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982a:	f7fe f889 	bl	8007940 <HAL_GetTick>
 800982e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009832:	f7fe f885 	bl	8007940 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e1a1      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009844:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009850:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4927      	ldr	r1, [pc, #156]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009860:	4313      	orrs	r3, r2
 8009862:	600b      	str	r3, [r1, #0]
 8009864:	e015      	b.n	8009892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009866:	4b26      	ldr	r3, [pc, #152]	; (8009900 <HAL_RCC_OscConfig+0x270>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800986c:	f7fe f868 	bl	8007940 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009874:	f7fe f864 	bl	8007940 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e180      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f0      	bne.n	8009874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d03a      	beq.n	8009914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d019      	beq.n	80098da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098a6:	4b17      	ldr	r3, [pc, #92]	; (8009904 <HAL_RCC_OscConfig+0x274>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ac:	f7fe f848 	bl	8007940 <HAL_GetTick>
 80098b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098b2:	e008      	b.n	80098c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098b4:	f7fe f844 	bl	8007940 <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e160      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098c6:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <HAL_RCC_OscConfig+0x26c>)
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0f0      	beq.n	80098b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80098d2:	2001      	movs	r0, #1
 80098d4:	f000 fad8 	bl	8009e88 <RCC_Delay>
 80098d8:	e01c      	b.n	8009914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <HAL_RCC_OscConfig+0x274>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098e0:	f7fe f82e 	bl	8007940 <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098e6:	e00f      	b.n	8009908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098e8:	f7fe f82a 	bl	8007940 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d908      	bls.n	8009908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e146      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
 80098fa:	bf00      	nop
 80098fc:	40021000 	.word	0x40021000
 8009900:	42420000 	.word	0x42420000
 8009904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009908:	4b92      	ldr	r3, [pc, #584]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e9      	bne.n	80098e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80a6 	beq.w	8009a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009926:	4b8b      	ldr	r3, [pc, #556]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10d      	bne.n	800994e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009932:	4b88      	ldr	r3, [pc, #544]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	4a87      	ldr	r2, [pc, #540]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800993c:	61d3      	str	r3, [r2, #28]
 800993e:	4b85      	ldr	r3, [pc, #532]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009946:	60bb      	str	r3, [r7, #8]
 8009948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800994e:	4b82      	ldr	r3, [pc, #520]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009956:	2b00      	cmp	r3, #0
 8009958:	d118      	bne.n	800998c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800995a:	4b7f      	ldr	r3, [pc, #508]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a7e      	ldr	r2, [pc, #504]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009966:	f7fd ffeb 	bl	8007940 <HAL_GetTick>
 800996a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800996c:	e008      	b.n	8009980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800996e:	f7fd ffe7 	bl	8007940 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b64      	cmp	r3, #100	; 0x64
 800997a:	d901      	bls.n	8009980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e103      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009980:	4b75      	ldr	r3, [pc, #468]	; (8009b58 <HAL_RCC_OscConfig+0x4c8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0f0      	beq.n	800996e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d106      	bne.n	80099a2 <HAL_RCC_OscConfig+0x312>
 8009994:	4b6f      	ldr	r3, [pc, #444]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	4a6e      	ldr	r2, [pc, #440]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	6213      	str	r3, [r2, #32]
 80099a0:	e02d      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10c      	bne.n	80099c4 <HAL_RCC_OscConfig+0x334>
 80099aa:	4b6a      	ldr	r3, [pc, #424]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	4a69      	ldr	r2, [pc, #420]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	6213      	str	r3, [r2, #32]
 80099b6:	4b67      	ldr	r3, [pc, #412]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	4a66      	ldr	r2, [pc, #408]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099bc:	f023 0304 	bic.w	r3, r3, #4
 80099c0:	6213      	str	r3, [r2, #32]
 80099c2:	e01c      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d10c      	bne.n	80099e6 <HAL_RCC_OscConfig+0x356>
 80099cc:	4b61      	ldr	r3, [pc, #388]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	4a60      	ldr	r2, [pc, #384]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099d2:	f043 0304 	orr.w	r3, r3, #4
 80099d6:	6213      	str	r3, [r2, #32]
 80099d8:	4b5e      	ldr	r3, [pc, #376]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	4a5d      	ldr	r2, [pc, #372]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	6213      	str	r3, [r2, #32]
 80099e4:	e00b      	b.n	80099fe <HAL_RCC_OscConfig+0x36e>
 80099e6:	4b5b      	ldr	r3, [pc, #364]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	4a5a      	ldr	r2, [pc, #360]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	6213      	str	r3, [r2, #32]
 80099f2:	4b58      	ldr	r3, [pc, #352]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	4a57      	ldr	r2, [pc, #348]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 80099f8:	f023 0304 	bic.w	r3, r3, #4
 80099fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d015      	beq.n	8009a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a06:	f7fd ff9b 	bl	8007940 <HAL_GetTick>
 8009a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a0c:	e00a      	b.n	8009a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a0e:	f7fd ff97 	bl	8007940 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e0b1      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a24:	4b4b      	ldr	r3, [pc, #300]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0ee      	beq.n	8009a0e <HAL_RCC_OscConfig+0x37e>
 8009a30:	e014      	b.n	8009a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a32:	f7fd ff85 	bl	8007940 <HAL_GetTick>
 8009a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a38:	e00a      	b.n	8009a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a3a:	f7fd ff81 	bl	8007940 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d901      	bls.n	8009a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e09b      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a50:	4b40      	ldr	r3, [pc, #256]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1ee      	bne.n	8009a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d105      	bne.n	8009a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a62:	4b3c      	ldr	r3, [pc, #240]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4a3b      	ldr	r2, [pc, #236]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8087 	beq.w	8009b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a78:	4b36      	ldr	r3, [pc, #216]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f003 030c 	and.w	r3, r3, #12
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d061      	beq.n	8009b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d146      	bne.n	8009b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a8c:	4b33      	ldr	r3, [pc, #204]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a92:	f7fd ff55 	bl	8007940 <HAL_GetTick>
 8009a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a98:	e008      	b.n	8009aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a9a:	f7fd ff51 	bl	8007940 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e06d      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009aac:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f0      	bne.n	8009a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac0:	d108      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009ac2:	4b24      	ldr	r3, [pc, #144]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	4921      	ldr	r1, [pc, #132]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ad4:	4b1f      	ldr	r3, [pc, #124]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a19      	ldr	r1, [r3, #32]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	491b      	ldr	r1, [pc, #108]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009af2:	f7fd ff25 	bl	8007940 <HAL_GetTick>
 8009af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009af8:	e008      	b.n	8009b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009afa:	f7fd ff21 	bl	8007940 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e03d      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b0c:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0f0      	beq.n	8009afa <HAL_RCC_OscConfig+0x46a>
 8009b18:	e035      	b.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1a:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <HAL_RCC_OscConfig+0x4cc>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b20:	f7fd ff0e 	bl	8007940 <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fd ff0a 	bl	8007940 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e026      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <HAL_RCC_OscConfig+0x4c4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f0      	bne.n	8009b28 <HAL_RCC_OscConfig+0x498>
 8009b46:	e01e      	b.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d107      	bne.n	8009b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e019      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
 8009b54:	40021000 	.word	0x40021000
 8009b58:	40007000 	.word	0x40007000
 8009b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <HAL_RCC_OscConfig+0x500>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d106      	bne.n	8009b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d001      	beq.n	8009b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	40021000 	.word	0x40021000

08009b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e0d0      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ba8:	4b6a      	ldr	r3, [pc, #424]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0307 	and.w	r3, r3, #7
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d910      	bls.n	8009bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bb6:	4b67      	ldr	r3, [pc, #412]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f023 0207 	bic.w	r2, r3, #7
 8009bbe:	4965      	ldr	r1, [pc, #404]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bc6:	4b63      	ldr	r3, [pc, #396]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d001      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e0b8      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d020      	beq.n	8009c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bf0:	4b59      	ldr	r3, [pc, #356]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	4a58      	ldr	r2, [pc, #352]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c08:	4b53      	ldr	r3, [pc, #332]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a52      	ldr	r2, [pc, #328]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c14:	4b50      	ldr	r3, [pc, #320]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	494d      	ldr	r1, [pc, #308]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d040      	beq.n	8009cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d107      	bne.n	8009c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c3a:	4b47      	ldr	r3, [pc, #284]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d115      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07f      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d107      	bne.n	8009c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e073      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c62:	4b3d      	ldr	r3, [pc, #244]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e06b      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c72:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f023 0203 	bic.w	r2, r3, #3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	4936      	ldr	r1, [pc, #216]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c84:	f7fd fe5c 	bl	8007940 <HAL_GetTick>
 8009c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c8a:	e00a      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c8c:	f7fd fe58 	bl	8007940 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e053      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ca2:	4b2d      	ldr	r3, [pc, #180]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f003 020c 	and.w	r2, r3, #12
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d1eb      	bne.n	8009c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb4:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d210      	bcs.n	8009ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f023 0207 	bic.w	r2, r3, #7
 8009cca:	4922      	ldr	r1, [pc, #136]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd2:	4b20      	ldr	r3, [pc, #128]	; (8009d54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d001      	beq.n	8009ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e032      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cf0:	4b19      	ldr	r3, [pc, #100]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	4916      	ldr	r1, [pc, #88]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	490e      	ldr	r1, [pc, #56]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009d22:	f000 f821 	bl	8009d68 <HAL_RCC_GetSysClockFreq>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	091b      	lsrs	r3, r3, #4
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	490a      	ldr	r1, [pc, #40]	; (8009d5c <HAL_RCC_ClockConfig+0x1c8>)
 8009d34:	5ccb      	ldrb	r3, [r1, r3]
 8009d36:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3a:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <HAL_RCC_ClockConfig+0x1cc>)
 8009d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <HAL_RCC_ClockConfig+0x1d0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd fdba 	bl	80078bc <HAL_InitTick>

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	40022000 	.word	0x40022000
 8009d58:	40021000 	.word	0x40021000
 8009d5c:	0800d70c 	.word	0x0800d70c
 8009d60:	20000944 	.word	0x20000944
 8009d64:	20000948 	.word	0x20000948

08009d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d68:	b490      	push	{r4, r7}
 8009d6a:	b08a      	sub	sp, #40	; 0x28
 8009d6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <HAL_RCC_GetSysClockFreq+0xac>)
 8009d70:	1d3c      	adds	r4, r7, #4
 8009d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009d78:	f240 2301 	movw	r3, #513	; 0x201
 8009d7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	2300      	movs	r3, #0
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	2300      	movs	r3, #0
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009d92:	4b21      	ldr	r3, [pc, #132]	; (8009e18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	f003 030c 	and.w	r3, r3, #12
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d002      	beq.n	8009da8 <HAL_RCC_GetSysClockFreq+0x40>
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d003      	beq.n	8009dae <HAL_RCC_GetSysClockFreq+0x46>
 8009da6:	e02b      	b.n	8009e00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009daa:	623b      	str	r3, [r7, #32]
      break;
 8009dac:	e02b      	b.n	8009e06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	0c9b      	lsrs	r3, r3, #18
 8009db2:	f003 030f 	and.w	r3, r3, #15
 8009db6:	3328      	adds	r3, #40	; 0x28
 8009db8:	443b      	add	r3, r7
 8009dba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009dbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d012      	beq.n	8009df0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	0c5b      	lsrs	r3, r3, #17
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	3328      	adds	r3, #40	; 0x28
 8009dd6:	443b      	add	r3, r7
 8009dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	4a0e      	ldr	r2, [pc, #56]	; (8009e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009de2:	fb03 f202 	mul.w	r2, r3, r2
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
 8009dee:	e004      	b.n	8009dfa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4a0b      	ldr	r2, [pc, #44]	; (8009e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009df4:	fb02 f303 	mul.w	r3, r2, r3
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	623b      	str	r3, [r7, #32]
      break;
 8009dfe:	e002      	b.n	8009e06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009e02:	623b      	str	r3, [r7, #32]
      break;
 8009e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e06:	6a3b      	ldr	r3, [r7, #32]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3728      	adds	r7, #40	; 0x28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc90      	pop	{r4, r7}
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	0800d6f4 	.word	0x0800d6f4
 8009e18:	40021000 	.word	0x40021000
 8009e1c:	007a1200 	.word	0x007a1200
 8009e20:	003d0900 	.word	0x003d0900

08009e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr
 8009e34:	20000944 	.word	0x20000944

08009e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009e3c:	f7ff fff2 	bl	8009e24 <HAL_RCC_GetHCLKFreq>
 8009e40:	4602      	mov	r2, r0
 8009e42:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	4903      	ldr	r1, [pc, #12]	; (8009e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e4e:	5ccb      	ldrb	r3, [r1, r3]
 8009e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40021000 	.word	0x40021000
 8009e5c:	0800d71c 	.word	0x0800d71c

08009e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009e64:	f7ff ffde 	bl	8009e24 <HAL_RCC_GetHCLKFreq>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	0adb      	lsrs	r3, r3, #11
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	4903      	ldr	r1, [pc, #12]	; (8009e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e76:	5ccb      	ldrb	r3, [r1, r3]
 8009e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	40021000 	.word	0x40021000
 8009e84:	0800d71c 	.word	0x0800d71c

08009e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <RCC_Delay+0x34>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a0a      	ldr	r2, [pc, #40]	; (8009ec0 <RCC_Delay+0x38>)
 8009e96:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9a:	0a5b      	lsrs	r3, r3, #9
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009ea4:	bf00      	nop
  }
  while (Delay --);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	1e5a      	subs	r2, r3, #1
 8009eaa:	60fa      	str	r2, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f9      	bne.n	8009ea4 <RCC_Delay+0x1c>
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr
 8009ebc:	20000944 	.word	0x20000944
 8009ec0:	10624dd3 	.word	0x10624dd3

08009ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e041      	b.n	8009f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7fd fbd0 	bl	8007690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f000 fa7e 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d001      	beq.n	8009f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e044      	b.n	800a006 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1d      	ldr	r2, [pc, #116]	; (800a010 <HAL_TIM_Base_Start_IT+0xac>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d018      	beq.n	8009fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1c      	ldr	r2, [pc, #112]	; (800a014 <HAL_TIM_Base_Start_IT+0xb0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d013      	beq.n	8009fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb0:	d00e      	beq.n	8009fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a18      	ldr	r2, [pc, #96]	; (800a018 <HAL_TIM_Base_Start_IT+0xb4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d009      	beq.n	8009fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	; (800a01c <HAL_TIM_Base_Start_IT+0xb8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a15      	ldr	r2, [pc, #84]	; (800a020 <HAL_TIM_Base_Start_IT+0xbc>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d111      	bne.n	8009ff4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b06      	cmp	r3, #6
 8009fe0:	d010      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f042 0201 	orr.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff2:	e007      	b.n	800a004 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bc80      	pop	{r7}
 800a00e:	4770      	bx	lr
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40013400 	.word	0x40013400
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	40000c00 	.word	0x40000c00

0800a024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b02      	cmp	r3, #2
 800a038:	d122      	bne.n	800a080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b02      	cmp	r3, #2
 800a046:	d11b      	bne.n	800a080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f06f 0202 	mvn.w	r2, #2
 800a050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f9b1 	bl	800a3ce <HAL_TIM_IC_CaptureCallback>
 800a06c:	e005      	b.n	800a07a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f9a4 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f9b3 	bl	800a3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	d122      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d11b      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0204 	mvn.w	r2, #4
 800a0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f987 	bl	800a3ce <HAL_TIM_IC_CaptureCallback>
 800a0c0:	e005      	b.n	800a0ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f97a 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f989 	bl	800a3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0308 	and.w	r3, r3, #8
 800a0de:	2b08      	cmp	r3, #8
 800a0e0:	d122      	bne.n	800a128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0308 	and.w	r3, r3, #8
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d11b      	bne.n	800a128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0208 	mvn.w	r2, #8
 800a0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f95d 	bl	800a3ce <HAL_TIM_IC_CaptureCallback>
 800a114:	e005      	b.n	800a122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f950 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f95f 	bl	800a3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0310 	and.w	r3, r3, #16
 800a132:	2b10      	cmp	r3, #16
 800a134:	d122      	bne.n	800a17c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b10      	cmp	r3, #16
 800a142:	d11b      	bne.n	800a17c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0210 	mvn.w	r2, #16
 800a14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2208      	movs	r2, #8
 800a152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f933 	bl	800a3ce <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f926 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f935 	bl	800a3e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b01      	cmp	r3, #1
 800a188:	d10e      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b01      	cmp	r3, #1
 800a196:	d107      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0201 	mvn.w	r2, #1
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7fa fdfc 	bl	8004da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d10e      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c0:	2b80      	cmp	r3, #128	; 0x80
 800a1c2:	d107      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa9d 	bl	800a70e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1de:	2b40      	cmp	r3, #64	; 0x40
 800a1e0:	d10e      	bne.n	800a200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d107      	bne.n	800a200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8f9 	bl	800a3f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	f003 0320 	and.w	r3, r3, #32
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d10e      	bne.n	800a22c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0320 	and.w	r3, r3, #32
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d107      	bne.n	800a22c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f06f 0220 	mvn.w	r2, #32
 800a224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa68 	bl	800a6fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a244:	2b01      	cmp	r3, #1
 800a246:	d101      	bne.n	800a24c <HAL_TIM_ConfigClockSource+0x18>
 800a248:	2302      	movs	r3, #2
 800a24a:	e0b3      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x180>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a26a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a272:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a284:	d03e      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0xd0>
 800a286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a28a:	f200 8087 	bhi.w	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a292:	f000 8085 	beq.w	800a3a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a29a:	d87f      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a29c:	2b70      	cmp	r3, #112	; 0x70
 800a29e:	d01a      	beq.n	800a2d6 <HAL_TIM_ConfigClockSource+0xa2>
 800a2a0:	2b70      	cmp	r3, #112	; 0x70
 800a2a2:	d87b      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2a4:	2b60      	cmp	r3, #96	; 0x60
 800a2a6:	d050      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x116>
 800a2a8:	2b60      	cmp	r3, #96	; 0x60
 800a2aa:	d877      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2ac:	2b50      	cmp	r3, #80	; 0x50
 800a2ae:	d03c      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0xf6>
 800a2b0:	2b50      	cmp	r3, #80	; 0x50
 800a2b2:	d873      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2b4:	2b40      	cmp	r3, #64	; 0x40
 800a2b6:	d058      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x136>
 800a2b8:	2b40      	cmp	r3, #64	; 0x40
 800a2ba:	d86f      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2bc:	2b30      	cmp	r3, #48	; 0x30
 800a2be:	d064      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x156>
 800a2c0:	2b30      	cmp	r3, #48	; 0x30
 800a2c2:	d86b      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d060      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x156>
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d867      	bhi.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d05c      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x156>
 800a2d0:	2b10      	cmp	r3, #16
 800a2d2:	d05a      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a2d4:	e062      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	6899      	ldr	r1, [r3, #8]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f000 f97e 	bl	800a5e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	609a      	str	r2, [r3, #8]
      break;
 800a302:	e04e      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	6899      	ldr	r1, [r3, #8]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	f000 f967 	bl	800a5e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a326:	609a      	str	r2, [r3, #8]
      break;
 800a328:	e03b      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	6859      	ldr	r1, [r3, #4]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	461a      	mov	r2, r3
 800a338:	f000 f8de 	bl	800a4f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2150      	movs	r1, #80	; 0x50
 800a342:	4618      	mov	r0, r3
 800a344:	f000 f935 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a348:	e02b      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	6859      	ldr	r1, [r3, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	461a      	mov	r2, r3
 800a358:	f000 f8fc 	bl	800a554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2160      	movs	r1, #96	; 0x60
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f925 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a368:	e01b      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	6859      	ldr	r1, [r3, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	461a      	mov	r2, r3
 800a378:	f000 f8be 	bl	800a4f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2140      	movs	r1, #64	; 0x40
 800a382:	4618      	mov	r0, r3
 800a384:	f000 f915 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a388:	e00b      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4619      	mov	r1, r3
 800a394:	4610      	mov	r0, r2
 800a396:	f000 f90c 	bl	800a5b2 <TIM_ITRx_SetConfig>
        break;
 800a39a:	e002      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a3a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr

0800a3f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr

0800a404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a33      	ldr	r2, [pc, #204]	; (800a4e4 <TIM_Base_SetConfig+0xe0>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a32      	ldr	r2, [pc, #200]	; (800a4e8 <TIM_Base_SetConfig+0xe4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00f      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42a:	d00b      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a2f      	ldr	r2, [pc, #188]	; (800a4ec <TIM_Base_SetConfig+0xe8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a2e      	ldr	r2, [pc, #184]	; (800a4f0 <TIM_Base_SetConfig+0xec>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a2d      	ldr	r2, [pc, #180]	; (800a4f4 <TIM_Base_SetConfig+0xf0>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d108      	bne.n	800a456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <TIM_Base_SetConfig+0xe0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d013      	beq.n	800a486 <TIM_Base_SetConfig+0x82>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a21      	ldr	r2, [pc, #132]	; (800a4e8 <TIM_Base_SetConfig+0xe4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00f      	beq.n	800a486 <TIM_Base_SetConfig+0x82>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46c:	d00b      	beq.n	800a486 <TIM_Base_SetConfig+0x82>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <TIM_Base_SetConfig+0xe8>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d007      	beq.n	800a486 <TIM_Base_SetConfig+0x82>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <TIM_Base_SetConfig+0xec>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d003      	beq.n	800a486 <TIM_Base_SetConfig+0x82>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <TIM_Base_SetConfig+0xf0>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d108      	bne.n	800a498 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a48c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a09      	ldr	r2, [pc, #36]	; (800a4e4 <TIM_Base_SetConfig+0xe0>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d003      	beq.n	800a4cc <TIM_Base_SetConfig+0xc8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a08      	ldr	r2, [pc, #32]	; (800a4e8 <TIM_Base_SetConfig+0xe4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d103      	bne.n	800a4d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	615a      	str	r2, [r3, #20]
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	40013400 	.word	0x40013400
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00

0800a4f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f023 0201 	bic.w	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 030a 	bic.w	r3, r3, #10
 800a534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	621a      	str	r2, [r3, #32]
}
 800a54a:	bf00      	nop
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a1b      	ldr	r3, [r3, #32]
 800a564:	f023 0210 	bic.w	r2, r3, #16
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a57e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	031b      	lsls	r3, r3, #12
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	621a      	str	r2, [r3, #32]
}
 800a5a8:	bf00      	nop
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f043 0307 	orr.w	r3, r3, #7
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	609a      	str	r2, [r3, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bc80      	pop	{r7}
 800a5e4:	4770      	bx	lr

0800a5e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	021a      	lsls	r2, r3, #8
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	431a      	orrs	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	609a      	str	r2, [r3, #8]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bc80      	pop	{r7}
 800a622:	4770      	bx	lr

0800a624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a634:	2b01      	cmp	r3, #1
 800a636:	d101      	bne.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a638:	2302      	movs	r3, #2
 800a63a:	e050      	b.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2202      	movs	r2, #2
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1b      	ldr	r2, [pc, #108]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d018      	beq.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a19      	ldr	r2, [pc, #100]	; (800a6ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d013      	beq.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a692:	d00e      	beq.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a15      	ldr	r2, [pc, #84]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d009      	beq.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a14      	ldr	r2, [pc, #80]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d004      	beq.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a12      	ldr	r2, [pc, #72]	; (800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d10c      	bne.n	800a6cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bc80      	pop	{r7}
 800a6e6:	4770      	bx	lr
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40000400 	.word	0x40000400
 800a6f4:	40000800 	.word	0x40000800
 800a6f8:	40000c00 	.word	0x40000c00

0800a6fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	bc80      	pop	{r7}
 800a70c:	4770      	bx	lr

0800a70e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bc80      	pop	{r7}
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e03f      	b.n	800a7b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fc ffc8 	bl	80076dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2224      	movs	r2, #36	; 0x24
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f891 	bl	800a88c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695a      	ldr	r2, [r3, #20]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d11d      	bne.n	800a810 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <HAL_UART_Receive_IT+0x26>
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e016      	b.n	800a812 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d101      	bne.n	800a7f2 <HAL_UART_Receive_IT+0x38>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	e00f      	b.n	800a812 <HAL_UART_Receive_IT+0x58>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	461a      	mov	r2, r3
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f807 	bl	800a81a <UART_Start_Receive_IT>
 800a80c:	4603      	mov	r3, r0
 800a80e:	e000      	b.n	800a812 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a810:	2302      	movs	r3, #2
  }
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	4613      	mov	r3, r2
 800a826:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	88fa      	ldrh	r2, [r7, #6]
 800a832:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2222      	movs	r2, #34	; 0x22
 800a844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68da      	ldr	r2, [r3, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a85e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	695a      	ldr	r2, [r3, #20]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0201 	orr.w	r2, r2, #1
 800a86e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0220 	orr.w	r2, r2, #32
 800a87e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	bc80      	pop	{r7}
 800a88a:	4770      	bx	lr

0800a88c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a8c6:	f023 030c 	bic.w	r3, r3, #12
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a2c      	ldr	r2, [pc, #176]	; (800a9a0 <UART_SetConfig+0x114>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d103      	bne.n	800a8fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a8f4:	f7ff fab4 	bl	8009e60 <HAL_RCC_GetPCLK2Freq>
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	e002      	b.n	800a902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a8fc:	f7ff fa9c 	bl	8009e38 <HAL_RCC_GetPCLK1Freq>
 800a900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	009a      	lsls	r2, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	4a22      	ldr	r2, [pc, #136]	; (800a9a4 <UART_SetConfig+0x118>)
 800a91a:	fba2 2303 	umull	r2, r3, r2, r3
 800a91e:	095b      	lsrs	r3, r3, #5
 800a920:	0119      	lsls	r1, r3, #4
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009a      	lsls	r2, r3, #2
 800a92c:	441a      	add	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	fbb2 f2f3 	udiv	r2, r2, r3
 800a938:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <UART_SetConfig+0x118>)
 800a93a:	fba3 0302 	umull	r0, r3, r3, r2
 800a93e:	095b      	lsrs	r3, r3, #5
 800a940:	2064      	movs	r0, #100	; 0x64
 800a942:	fb00 f303 	mul.w	r3, r0, r3
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	011b      	lsls	r3, r3, #4
 800a94a:	3332      	adds	r3, #50	; 0x32
 800a94c:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <UART_SetConfig+0x118>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a958:	4419      	add	r1, r3
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009a      	lsls	r2, r3, #2
 800a964:	441a      	add	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a970:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <UART_SetConfig+0x118>)
 800a972:	fba3 0302 	umull	r0, r3, r3, r2
 800a976:	095b      	lsrs	r3, r3, #5
 800a978:	2064      	movs	r0, #100	; 0x64
 800a97a:	fb00 f303 	mul.w	r3, r0, r3
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	3332      	adds	r3, #50	; 0x32
 800a984:	4a07      	ldr	r2, [pc, #28]	; (800a9a4 <UART_SetConfig+0x118>)
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f003 020f 	and.w	r2, r3, #15
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	440a      	add	r2, r1
 800a996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	40013800 	.word	0x40013800
 800a9a4:	51eb851f 	.word	0x51eb851f

0800a9a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a9b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9ba:	2b84      	cmp	r3, #132	; 0x84
 800a9bc:	d005      	beq.n	800a9ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a9be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	3303      	adds	r3, #3
 800a9c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr

0800a9d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a9da:	f000 fd9b 	bl	800b514 <vTaskStartScheduler>
  
  return osOK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	b089      	sub	sp, #36	; 0x24
 800a9e8:	af04      	add	r7, sp, #16
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d020      	beq.n	800aa38 <osThreadCreate+0x54>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d01c      	beq.n	800aa38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685c      	ldr	r4, [r3, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691e      	ldr	r6, [r3, #16]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff ffc9 	bl	800a9a8 <makeFreeRtosPriority>
 800aa16:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa20:	9202      	str	r2, [sp, #8]
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	9100      	str	r1, [sp, #0]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fbb3 	bl	800b198 <xTaskCreateStatic>
 800aa32:	4603      	mov	r3, r0
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	e01c      	b.n	800aa72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685c      	ldr	r4, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa44:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff ffab 	bl	800a9a8 <makeFreeRtosPriority>
 800aa52:	4602      	mov	r2, r0
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	9200      	str	r2, [sp, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4629      	mov	r1, r5
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fbf4 	bl	800b250 <xTaskCreate>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d001      	beq.n	800aa72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e000      	b.n	800aa74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <osDelay+0x16>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	e000      	b.n	800aa94 <osDelay+0x18>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fd09 	bl	800b4ac <vTaskDelay>
  
  return osOK;
 800aa9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f103 0208 	add.w	r2, r3, #8
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f103 0208 	add.w	r2, r3, #8
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f103 0208 	add.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr

0800aae2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bc80      	pop	{r7}
 800aaf8:	4770      	bx	lr

0800aafa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	689a      	ldr	r2, [r3, #8]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	601a      	str	r2, [r3, #0]
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bc80      	pop	{r7}
 800ab3e:	4770      	bx	lr

0800ab40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab56:	d103      	bne.n	800ab60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	e00c      	b.n	800ab7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3308      	adds	r3, #8
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e002      	b.n	800ab6e <vListInsert+0x2e>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d2f6      	bcs.n	800ab68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
}
 800aba6:	bf00      	nop
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	bc80      	pop	{r7}
 800abae:	4770      	bx	lr

0800abb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	6892      	ldr	r2, [r2, #8]
 800abc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6852      	ldr	r2, [r2, #4]
 800abd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d103      	bne.n	800abe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	1e5a      	subs	r2, r3, #1
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bc80      	pop	{r7}
 800ac00:	4770      	bx	lr
	...

0800ac04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac2e:	f001 fa75 	bl	800c11c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	441a      	add	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	68f9      	ldr	r1, [r7, #12]
 800ac62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	22ff      	movs	r2, #255	; 0xff
 800ac72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	22ff      	movs	r2, #255	; 0xff
 800ac7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d114      	bne.n	800acae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3310      	adds	r3, #16
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fe85 	bl	800b9a0 <xTaskRemoveFromEventList>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d012      	beq.n	800acc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac9c:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <xQueueGenericReset+0xcc>)
 800ac9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	e009      	b.n	800acc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3310      	adds	r3, #16
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff fef6 	bl	800aaa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3324      	adds	r3, #36	; 0x24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fef1 	bl	800aaa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acc2:	f001 fa5b 	bl	800c17c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acc6:	2301      	movs	r3, #1
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4613      	mov	r3, r2
 800ace0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10a      	bne.n	800acfe <xQueueGenericCreate+0x2a>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	613b      	str	r3, [r7, #16]
}
 800acfa:	bf00      	nop
 800acfc:	e7fe      	b.n	800acfc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
 800ad08:	e004      	b.n	800ad14 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	3348      	adds	r3, #72	; 0x48
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 fac1 	bl	800c2a0 <pvPortMalloc>
 800ad1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00f      	beq.n	800ad46 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	3348      	adds	r3, #72	; 0x48
 800ad2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad34:	79fa      	ldrb	r2, [r7, #7]
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 f805 	bl	800ad50 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad46:	69bb      	ldr	r3, [r7, #24]
	}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e002      	b.n	800ad72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad7e:	2101      	movs	r1, #1
 800ad80:	69b8      	ldr	r0, [r7, #24]
 800ad82:	f7ff ff3f 	bl	800ac04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00e      	beq.n	800adba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800adae:	2300      	movs	r3, #0
 800adb0:	2200      	movs	r2, #0
 800adb2:	2100      	movs	r1, #0
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f81d 	bl	800adf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b086      	sub	sp, #24
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	4603      	mov	r3, r0
 800adca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800adcc:	2301      	movs	r3, #1
 800adce:	617b      	str	r3, [r7, #20]
 800add0:	2300      	movs	r3, #0
 800add2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	461a      	mov	r2, r3
 800add8:	6939      	ldr	r1, [r7, #16]
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	f7ff ff7a 	bl	800acd4 <xQueueGenericCreate>
 800ade0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff ffd3 	bl	800ad8e <prvInitialiseMutex>

		return pxNewQueue;
 800ade8:	68fb      	ldr	r3, [r7, #12]
	}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08e      	sub	sp, #56	; 0x38
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae02:	2300      	movs	r3, #0
 800ae04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xQueueGenericSend+0x32>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d103      	bne.n	800ae34 <xQueueGenericSend+0x40>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <xQueueGenericSend+0x44>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <xQueueGenericSend+0x46>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <xQueueGenericSend+0x60>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d103      	bne.n	800ae62 <xQueueGenericSend+0x6e>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <xQueueGenericSend+0x72>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <xQueueGenericSend+0x74>
 800ae66:	2300      	movs	r3, #0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	623b      	str	r3, [r7, #32]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae82:	f000 ff4d 	bl	800bd20 <xTaskGetSchedulerState>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <xQueueGenericSend+0x9e>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <xQueueGenericSend+0xa2>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <xQueueGenericSend+0xa4>
 800ae96:	2300      	movs	r3, #0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	61fb      	str	r3, [r7, #28]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeb2:	f001 f933 	bl	800c11c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d302      	bcc.n	800aec8 <xQueueGenericSend+0xd4>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d129      	bne.n	800af1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aece:	f000 f88f 	bl	800aff0 <prvCopyDataToQueue>
 800aed2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d010      	beq.n	800aefe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	3324      	adds	r3, #36	; 0x24
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fd5d 	bl	800b9a0 <xTaskRemoveFromEventList>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d013      	beq.n	800af14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aeec:	4b3f      	ldr	r3, [pc, #252]	; (800afec <xQueueGenericSend+0x1f8>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	e00a      	b.n	800af14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af04:	4b39      	ldr	r3, [pc, #228]	; (800afec <xQueueGenericSend+0x1f8>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af14:	f001 f932 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 800af18:	2301      	movs	r3, #1
 800af1a:	e063      	b.n	800afe4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af22:	f001 f92b 	bl	800c17c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af26:	2300      	movs	r3, #0
 800af28:	e05c      	b.n	800afe4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d106      	bne.n	800af3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af30:	f107 0314 	add.w	r3, r7, #20
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fd95 	bl	800ba64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af3a:	2301      	movs	r3, #1
 800af3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af3e:	f001 f91d 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af42:	f000 fb47 	bl	800b5d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af46:	f001 f8e9 	bl	800c11c <vPortEnterCritical>
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af50:	b25b      	sxtb	r3, r3
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d103      	bne.n	800af60 <xQueueGenericSend+0x16c>
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af66:	b25b      	sxtb	r3, r3
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d103      	bne.n	800af76 <xQueueGenericSend+0x182>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af76:	f001 f901 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af7a:	1d3a      	adds	r2, r7, #4
 800af7c:	f107 0314 	add.w	r3, r7, #20
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fd84 	bl	800ba90 <xTaskCheckForTimeOut>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d124      	bne.n	800afd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af90:	f000 f8ea 	bl	800b168 <prvIsQueueFull>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	3310      	adds	r3, #16
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fcd8 	bl	800b958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afaa:	f000 f88b 	bl	800b0c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afae:	f000 fb1f 	bl	800b5f0 <xTaskResumeAll>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f47f af7c 	bne.w	800aeb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afba:	4b0c      	ldr	r3, [pc, #48]	; (800afec <xQueueGenericSend+0x1f8>)
 800afbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	e772      	b.n	800aeb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afce:	f000 f879 	bl	800b0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afd2:	f000 fb0d 	bl	800b5f0 <xTaskResumeAll>
 800afd6:	e76c      	b.n	800aeb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afda:	f000 f873 	bl	800b0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afde:	f000 fb07 	bl	800b5f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afe2:	2300      	movs	r3, #0
		}
	}
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3738      	adds	r7, #56	; 0x38
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10d      	bne.n	800b02a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d14d      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fe9e 	bl	800bd5c <xTaskPriorityDisinherit>
 800b020:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	e043      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d119      	bne.n	800b064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6898      	ldr	r0, [r3, #8]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	461a      	mov	r2, r3
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	f001 fc64 	bl	800c908 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	441a      	add	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d32b      	bcc.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	609a      	str	r2, [r3, #8]
 800b062:	e026      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68d8      	ldr	r0, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	f001 fc4a 	bl	800c908 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	425b      	negs	r3, r3
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d207      	bcs.n	800b0a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b098:	425b      	negs	r3, r3
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d105      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0cc:	f001 f826 	bl	800c11c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0d8:	e011      	b.n	800b0fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d012      	beq.n	800b108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3324      	adds	r3, #36	; 0x24
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fc5a 	bl	800b9a0 <xTaskRemoveFromEventList>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0f2:	f000 fd2f 	bl	800bb54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b102:	2b00      	cmp	r3, #0
 800b104:	dce9      	bgt.n	800b0da <prvUnlockQueue+0x16>
 800b106:	e000      	b.n	800b10a <prvUnlockQueue+0x46>
					break;
 800b108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	22ff      	movs	r2, #255	; 0xff
 800b10e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b112:	f001 f833 	bl	800c17c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b116:	f001 f801 	bl	800c11c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b122:	e011      	b.n	800b148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d012      	beq.n	800b152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3310      	adds	r3, #16
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fc35 	bl	800b9a0 <xTaskRemoveFromEventList>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b13c:	f000 fd0a 	bl	800bb54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	3b01      	subs	r3, #1
 800b144:	b2db      	uxtb	r3, r3
 800b146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dce9      	bgt.n	800b124 <prvUnlockQueue+0x60>
 800b150:	e000      	b.n	800b154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	22ff      	movs	r2, #255	; 0xff
 800b158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b15c:	f001 f80e 	bl	800c17c <vPortExitCritical>
}
 800b160:	bf00      	nop
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b170:	f000 ffd4 	bl	800c11c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d102      	bne.n	800b186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b180:	2301      	movs	r3, #1
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	e001      	b.n	800b18a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b186:	2300      	movs	r3, #0
 800b188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b18a:	f000 fff7 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800b18e:	68fb      	ldr	r3, [r7, #12]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08e      	sub	sp, #56	; 0x38
 800b19c:	af04      	add	r7, sp, #16
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623b      	str	r3, [r7, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <xTaskCreateStatic+0x46>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	61fb      	str	r3, [r7, #28]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1de:	2354      	movs	r3, #84	; 0x54
 800b1e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b54      	cmp	r3, #84	; 0x54
 800b1e6:	d00a      	beq.n	800b1fe <xTaskCreateStatic+0x66>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	61bb      	str	r3, [r7, #24]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01e      	beq.n	800b242 <xTaskCreateStatic+0xaa>
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01b      	beq.n	800b242 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b212:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	2202      	movs	r2, #2
 800b218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b21c:	2300      	movs	r3, #0
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f850 	bl	800b2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b23a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b23c:	f000 f8cc 	bl	800b3d8 <prvAddNewTaskToReadyList>
 800b240:	e001      	b.n	800b246 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b246:	697b      	ldr	r3, [r7, #20]
	}
 800b248:	4618      	mov	r0, r3
 800b24a:	3728      	adds	r7, #40	; 0x28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08c      	sub	sp, #48	; 0x30
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4613      	mov	r3, r2
 800b25e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4618      	mov	r0, r3
 800b266:	f001 f81b 	bl	800c2a0 <pvPortMalloc>
 800b26a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b272:	2054      	movs	r0, #84	; 0x54
 800b274:	f001 f814 	bl	800c2a0 <pvPortMalloc>
 800b278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	631a      	str	r2, [r3, #48]	; 0x30
 800b286:	e005      	b.n	800b294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b288:	6978      	ldr	r0, [r7, #20]
 800b28a:	f001 f8cd 	bl	800c428 <vPortFree>
 800b28e:	e001      	b.n	800b294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d017      	beq.n	800b2ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2a2:	88fa      	ldrh	r2, [r7, #6]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9303      	str	r3, [sp, #12]
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f80e 	bl	800b2da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2be:	69f8      	ldr	r0, [r7, #28]
 800b2c0:	f000 f88a 	bl	800b3d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	e002      	b.n	800b2d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
	}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b088      	sub	sp, #32
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	f023 0307 	bic.w	r3, r3, #7
 800b300:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	617b      	str	r3, [r7, #20]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b322:	2300      	movs	r3, #0
 800b324:	61fb      	str	r3, [r7, #28]
 800b326:	e012      	b.n	800b34e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	4413      	add	r3, r2
 800b32e:	7819      	ldrb	r1, [r3, #0]
 800b330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	3334      	adds	r3, #52	; 0x34
 800b338:	460a      	mov	r2, r1
 800b33a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	3301      	adds	r3, #1
 800b34c:	61fb      	str	r3, [r7, #28]
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	2b0f      	cmp	r3, #15
 800b352:	d9e9      	bls.n	800b328 <prvInitialiseNewTask+0x4e>
 800b354:	e000      	b.n	800b358 <prvInitialiseNewTask+0x7e>
		{
			break;
 800b356:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	2b06      	cmp	r3, #6
 800b364:	d901      	bls.n	800b36a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b366:	2306      	movs	r3, #6
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b374:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	2200      	movs	r2, #0
 800b37a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	3304      	adds	r3, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fbae 	bl	800aae2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	3318      	adds	r3, #24
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fba9 	bl	800aae2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	f1c3 0207 	rsb	r2, r3, #7
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	68f9      	ldr	r1, [r7, #12]
 800b3b8:	69b8      	ldr	r0, [r7, #24]
 800b3ba:	f000 fdbb 	bl	800bf34 <pxPortInitialiseStack>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3e0:	f000 fe9c 	bl	800c11c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3e4:	4b2a      	ldr	r3, [pc, #168]	; (800b490 <prvAddNewTaskToReadyList+0xb8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	4a29      	ldr	r2, [pc, #164]	; (800b490 <prvAddNewTaskToReadyList+0xb8>)
 800b3ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3ee:	4b29      	ldr	r3, [pc, #164]	; (800b494 <prvAddNewTaskToReadyList+0xbc>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d109      	bne.n	800b40a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3f6:	4a27      	ldr	r2, [pc, #156]	; (800b494 <prvAddNewTaskToReadyList+0xbc>)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3fc:	4b24      	ldr	r3, [pc, #144]	; (800b490 <prvAddNewTaskToReadyList+0xb8>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d110      	bne.n	800b426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b404:	f000 fbca 	bl	800bb9c <prvInitialiseTaskLists>
 800b408:	e00d      	b.n	800b426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b40a:	4b23      	ldr	r3, [pc, #140]	; (800b498 <prvAddNewTaskToReadyList+0xc0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b412:	4b20      	ldr	r3, [pc, #128]	; (800b494 <prvAddNewTaskToReadyList+0xbc>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d802      	bhi.n	800b426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b420:	4a1c      	ldr	r2, [pc, #112]	; (800b494 <prvAddNewTaskToReadyList+0xbc>)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b426:	4b1d      	ldr	r3, [pc, #116]	; (800b49c <prvAddNewTaskToReadyList+0xc4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3301      	adds	r3, #1
 800b42c:	4a1b      	ldr	r2, [pc, #108]	; (800b49c <prvAddNewTaskToReadyList+0xc4>)
 800b42e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	2201      	movs	r2, #1
 800b436:	409a      	lsls	r2, r3
 800b438:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <prvAddNewTaskToReadyList+0xc8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	4a18      	ldr	r2, [pc, #96]	; (800b4a0 <prvAddNewTaskToReadyList+0xc8>)
 800b440:	6013      	str	r3, [r2, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b446:	4613      	mov	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4a15      	ldr	r2, [pc, #84]	; (800b4a4 <prvAddNewTaskToReadyList+0xcc>)
 800b450:	441a      	add	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3304      	adds	r3, #4
 800b456:	4619      	mov	r1, r3
 800b458:	4610      	mov	r0, r2
 800b45a:	f7ff fb4e 	bl	800aafa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b45e:	f000 fe8d 	bl	800c17c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b462:	4b0d      	ldr	r3, [pc, #52]	; (800b498 <prvAddNewTaskToReadyList+0xc0>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <prvAddNewTaskToReadyList+0xbc>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	429a      	cmp	r2, r3
 800b476:	d207      	bcs.n	800b488 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b478:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <prvAddNewTaskToReadyList+0xd0>)
 800b47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20001030 	.word	0x20001030
 800b494:	20000f30 	.word	0x20000f30
 800b498:	2000103c 	.word	0x2000103c
 800b49c:	2000104c 	.word	0x2000104c
 800b4a0:	20001038 	.word	0x20001038
 800b4a4:	20000f34 	.word	0x20000f34
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d017      	beq.n	800b4ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <vTaskDelay+0x60>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <vTaskDelay+0x30>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	60bb      	str	r3, [r7, #8]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4dc:	f000 f87a 	bl	800b5d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fcc0 	bl	800be68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4e8:	f000 f882 	bl	800b5f0 <xTaskResumeAll>
 800b4ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d107      	bne.n	800b504 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <vTaskDelay+0x64>)
 800b4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20001058 	.word	0x20001058
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	; 0x28
 800b518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b522:	463a      	mov	r2, r7
 800b524:	1d39      	adds	r1, r7, #4
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f4 fe88 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	9202      	str	r2, [sp, #8]
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	460a      	mov	r2, r1
 800b542:	491e      	ldr	r1, [pc, #120]	; (800b5bc <vTaskStartScheduler+0xa8>)
 800b544:	481e      	ldr	r0, [pc, #120]	; (800b5c0 <vTaskStartScheduler+0xac>)
 800b546:	f7ff fe27 	bl	800b198 <xTaskCreateStatic>
 800b54a:	4603      	mov	r3, r0
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <vTaskStartScheduler+0xb0>)
 800b54e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b550:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <vTaskStartScheduler+0xb0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b558:	2301      	movs	r3, #1
 800b55a:	617b      	str	r3, [r7, #20]
 800b55c:	e001      	b.n	800b562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d116      	bne.n	800b596 <vTaskStartScheduler+0x82>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	613b      	str	r3, [r7, #16]
}
 800b57a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b57c:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <vTaskStartScheduler+0xb4>)
 800b57e:	f04f 32ff 	mov.w	r2, #4294967295
 800b582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b584:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <vTaskStartScheduler+0xb8>)
 800b586:	2201      	movs	r2, #1
 800b588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b58a:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <vTaskStartScheduler+0xbc>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b590:	f000 fd52 	bl	800c038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b594:	e00e      	b.n	800b5b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d10a      	bne.n	800b5b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	60fb      	str	r3, [r7, #12]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <vTaskStartScheduler+0x9e>
}
 800b5b4:	bf00      	nop
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	0800d704 	.word	0x0800d704
 800b5c0:	0800bb6d 	.word	0x0800bb6d
 800b5c4:	20001054 	.word	0x20001054
 800b5c8:	20001050 	.word	0x20001050
 800b5cc:	2000103c 	.word	0x2000103c
 800b5d0:	20001034 	.word	0x20001034

0800b5d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <vTaskSuspendAll+0x18>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	4a03      	ldr	r2, [pc, #12]	; (800b5ec <vTaskSuspendAll+0x18>)
 800b5e0:	6013      	str	r3, [r2, #0]
}
 800b5e2:	bf00      	nop
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20001058 	.word	0x20001058

0800b5f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5fe:	4b41      	ldr	r3, [pc, #260]	; (800b704 <xTaskResumeAll+0x114>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10a      	bne.n	800b61c <xTaskResumeAll+0x2c>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	603b      	str	r3, [r7, #0]
}
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b61c:	f000 fd7e 	bl	800c11c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b620:	4b38      	ldr	r3, [pc, #224]	; (800b704 <xTaskResumeAll+0x114>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3b01      	subs	r3, #1
 800b626:	4a37      	ldr	r2, [pc, #220]	; (800b704 <xTaskResumeAll+0x114>)
 800b628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b62a:	4b36      	ldr	r3, [pc, #216]	; (800b704 <xTaskResumeAll+0x114>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d161      	bne.n	800b6f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b632:	4b35      	ldr	r3, [pc, #212]	; (800b708 <xTaskResumeAll+0x118>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05d      	beq.n	800b6f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b63a:	e02e      	b.n	800b69a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b63c:	4b33      	ldr	r3, [pc, #204]	; (800b70c <xTaskResumeAll+0x11c>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3318      	adds	r3, #24
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fab1 	bl	800abb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff faac 	bl	800abb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	2201      	movs	r2, #1
 800b65e:	409a      	lsls	r2, r3
 800b660:	4b2b      	ldr	r3, [pc, #172]	; (800b710 <xTaskResumeAll+0x120>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4313      	orrs	r3, r2
 800b666:	4a2a      	ldr	r2, [pc, #168]	; (800b710 <xTaskResumeAll+0x120>)
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4a27      	ldr	r2, [pc, #156]	; (800b714 <xTaskResumeAll+0x124>)
 800b678:	441a      	add	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f7ff fa3a 	bl	800aafa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	4b23      	ldr	r3, [pc, #140]	; (800b718 <xTaskResumeAll+0x128>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	429a      	cmp	r2, r3
 800b692:	d302      	bcc.n	800b69a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b694:	4b21      	ldr	r3, [pc, #132]	; (800b71c <xTaskResumeAll+0x12c>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b69a:	4b1c      	ldr	r3, [pc, #112]	; (800b70c <xTaskResumeAll+0x11c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1cc      	bne.n	800b63c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6a8:	f000 fb16 	bl	800bcd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6ac:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <xTaskResumeAll+0x130>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d010      	beq.n	800b6da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6b8:	f000 f836 	bl	800b728 <xTaskIncrementTick>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b6c2:	4b16      	ldr	r3, [pc, #88]	; (800b71c <xTaskResumeAll+0x12c>)
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1f1      	bne.n	800b6b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b6d4:	4b12      	ldr	r3, [pc, #72]	; (800b720 <xTaskResumeAll+0x130>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6da:	4b10      	ldr	r3, [pc, #64]	; (800b71c <xTaskResumeAll+0x12c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d009      	beq.n	800b6f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6e6:	4b0f      	ldr	r3, [pc, #60]	; (800b724 <xTaskResumeAll+0x134>)
 800b6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6f6:	f000 fd41 	bl	800c17c <vPortExitCritical>

	return xAlreadyYielded;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	20001058 	.word	0x20001058
 800b708:	20001030 	.word	0x20001030
 800b70c:	20000ff0 	.word	0x20000ff0
 800b710:	20001038 	.word	0x20001038
 800b714:	20000f34 	.word	0x20000f34
 800b718:	20000f30 	.word	0x20000f30
 800b71c:	20001044 	.word	0x20001044
 800b720:	20001040 	.word	0x20001040
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b732:	4b51      	ldr	r3, [pc, #324]	; (800b878 <xTaskIncrementTick+0x150>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 808d 	bne.w	800b856 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b73c:	4b4f      	ldr	r3, [pc, #316]	; (800b87c <xTaskIncrementTick+0x154>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b744:	4a4d      	ldr	r2, [pc, #308]	; (800b87c <xTaskIncrementTick+0x154>)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d120      	bne.n	800b792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b750:	4b4b      	ldr	r3, [pc, #300]	; (800b880 <xTaskIncrementTick+0x158>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <xTaskIncrementTick+0x48>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	603b      	str	r3, [r7, #0]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <xTaskIncrementTick+0x46>
 800b770:	4b43      	ldr	r3, [pc, #268]	; (800b880 <xTaskIncrementTick+0x158>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	4b43      	ldr	r3, [pc, #268]	; (800b884 <xTaskIncrementTick+0x15c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a41      	ldr	r2, [pc, #260]	; (800b880 <xTaskIncrementTick+0x158>)
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4a41      	ldr	r2, [pc, #260]	; (800b884 <xTaskIncrementTick+0x15c>)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	4b40      	ldr	r3, [pc, #256]	; (800b888 <xTaskIncrementTick+0x160>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	4a3f      	ldr	r2, [pc, #252]	; (800b888 <xTaskIncrementTick+0x160>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	f000 faa3 	bl	800bcd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b792:	4b3e      	ldr	r3, [pc, #248]	; (800b88c <xTaskIncrementTick+0x164>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d34d      	bcc.n	800b838 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b79c:	4b38      	ldr	r3, [pc, #224]	; (800b880 <xTaskIncrementTick+0x158>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <xTaskIncrementTick+0x82>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <xTaskIncrementTick+0x84>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b0:	4b36      	ldr	r3, [pc, #216]	; (800b88c <xTaskIncrementTick+0x164>)
 800b7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b6:	601a      	str	r2, [r3, #0]
					break;
 800b7b8:	e03e      	b.n	800b838 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b7ba:	4b31      	ldr	r3, [pc, #196]	; (800b880 <xTaskIncrementTick+0x158>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d203      	bcs.n	800b7da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7d2:	4a2e      	ldr	r2, [pc, #184]	; (800b88c <xTaskIncrementTick+0x164>)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6013      	str	r3, [r2, #0]
						break;
 800b7d8:	e02e      	b.n	800b838 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff f9e6 	bl	800abb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d004      	beq.n	800b7f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	3318      	adds	r3, #24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff f9dd 	bl	800abb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	409a      	lsls	r2, r3
 800b7fe:	4b24      	ldr	r3, [pc, #144]	; (800b890 <xTaskIncrementTick+0x168>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	4a22      	ldr	r2, [pc, #136]	; (800b890 <xTaskIncrementTick+0x168>)
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4a1f      	ldr	r2, [pc, #124]	; (800b894 <xTaskIncrementTick+0x16c>)
 800b816:	441a      	add	r2, r3
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f7ff f96b 	bl	800aafa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <xTaskIncrementTick+0x170>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82e:	429a      	cmp	r2, r3
 800b830:	d3b4      	bcc.n	800b79c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b832:	2301      	movs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b836:	e7b1      	b.n	800b79c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b838:	4b17      	ldr	r3, [pc, #92]	; (800b898 <xTaskIncrementTick+0x170>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83e:	4915      	ldr	r1, [pc, #84]	; (800b894 <xTaskIncrementTick+0x16c>)
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	440b      	add	r3, r1
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d907      	bls.n	800b860 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e004      	b.n	800b860 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b856:	4b11      	ldr	r3, [pc, #68]	; (800b89c <xTaskIncrementTick+0x174>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	4a0f      	ldr	r2, [pc, #60]	; (800b89c <xTaskIncrementTick+0x174>)
 800b85e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b860:	4b0f      	ldr	r3, [pc, #60]	; (800b8a0 <xTaskIncrementTick+0x178>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b868:	2301      	movs	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b86c:	697b      	ldr	r3, [r7, #20]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20001058 	.word	0x20001058
 800b87c:	20001034 	.word	0x20001034
 800b880:	20000fe8 	.word	0x20000fe8
 800b884:	20000fec 	.word	0x20000fec
 800b888:	20001048 	.word	0x20001048
 800b88c:	20001050 	.word	0x20001050
 800b890:	20001038 	.word	0x20001038
 800b894:	20000f34 	.word	0x20000f34
 800b898:	20000f30 	.word	0x20000f30
 800b89c:	20001040 	.word	0x20001040
 800b8a0:	20001044 	.word	0x20001044

0800b8a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8aa:	4b26      	ldr	r3, [pc, #152]	; (800b944 <vTaskSwitchContext+0xa0>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8b2:	4b25      	ldr	r3, [pc, #148]	; (800b948 <vTaskSwitchContext+0xa4>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8b8:	e03f      	b.n	800b93a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b8ba:	4b23      	ldr	r3, [pc, #140]	; (800b948 <vTaskSwitchContext+0xa4>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b8c0:	4b22      	ldr	r3, [pc, #136]	; (800b94c <vTaskSwitchContext+0xa8>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	fab3 f383 	clz	r3, r3
 800b8cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	f1c3 031f 	rsb	r3, r3, #31
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	491e      	ldr	r1, [pc, #120]	; (800b950 <vTaskSwitchContext+0xac>)
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	440b      	add	r3, r1
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	607b      	str	r3, [r7, #4]
}
 800b8fc:	bf00      	nop
 800b8fe:	e7fe      	b.n	800b8fe <vTaskSwitchContext+0x5a>
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4a11      	ldr	r2, [pc, #68]	; (800b950 <vTaskSwitchContext+0xac>)
 800b90c:	4413      	add	r3, r2
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	605a      	str	r2, [r3, #4]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3308      	adds	r3, #8
 800b922:	429a      	cmp	r2, r3
 800b924:	d104      	bne.n	800b930 <vTaskSwitchContext+0x8c>
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	605a      	str	r2, [r3, #4]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	4a07      	ldr	r2, [pc, #28]	; (800b954 <vTaskSwitchContext+0xb0>)
 800b938:	6013      	str	r3, [r2, #0]
}
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr
 800b944:	20001058 	.word	0x20001058
 800b948:	20001044 	.word	0x20001044
 800b94c:	20001038 	.word	0x20001038
 800b950:	20000f34 	.word	0x20000f34
 800b954:	20000f30 	.word	0x20000f30

0800b958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	60fb      	str	r3, [r7, #12]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b97e:	4b07      	ldr	r3, [pc, #28]	; (800b99c <vTaskPlaceOnEventList+0x44>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3318      	adds	r3, #24
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff f8da 	bl	800ab40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b98c:	2101      	movs	r1, #1
 800b98e:	6838      	ldr	r0, [r7, #0]
 800b990:	f000 fa6a 	bl	800be68 <prvAddCurrentTaskToDelayedList>
}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	20000f30 	.word	0x20000f30

0800b9a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10a      	bne.n	800b9cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60fb      	str	r3, [r7, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	e7fe      	b.n	800b9ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	3318      	adds	r3, #24
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff f8ed 	bl	800abb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <xTaskRemoveFromEventList+0xac>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d11c      	bne.n	800ba18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff f8e4 	bl	800abb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	409a      	lsls	r2, r3
 800b9f0:	4b17      	ldr	r3, [pc, #92]	; (800ba50 <xTaskRemoveFromEventList+0xb0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	4a16      	ldr	r2, [pc, #88]	; (800ba50 <xTaskRemoveFromEventList+0xb0>)
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <xTaskRemoveFromEventList+0xb4>)
 800ba08:	441a      	add	r2, r3
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4610      	mov	r0, r2
 800ba12:	f7ff f872 	bl	800aafa <vListInsertEnd>
 800ba16:	e005      	b.n	800ba24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3318      	adds	r3, #24
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	480e      	ldr	r0, [pc, #56]	; (800ba58 <xTaskRemoveFromEventList+0xb8>)
 800ba20:	f7ff f86b 	bl	800aafa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <xTaskRemoveFromEventList+0xbc>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d905      	bls.n	800ba3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba32:	2301      	movs	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba36:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <xTaskRemoveFromEventList+0xc0>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e001      	b.n	800ba42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ba42:	697b      	ldr	r3, [r7, #20]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20001058 	.word	0x20001058
 800ba50:	20001038 	.word	0x20001038
 800ba54:	20000f34 	.word	0x20000f34
 800ba58:	20000ff0 	.word	0x20000ff0
 800ba5c:	20000f30 	.word	0x20000f30
 800ba60:	20001044 	.word	0x20001044

0800ba64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba6c:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <vTaskInternalSetTimeOutState+0x24>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba74:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <vTaskInternalSetTimeOutState+0x28>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	605a      	str	r2, [r3, #4]
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bc80      	pop	{r7}
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	20001048 	.word	0x20001048
 800ba8c:	20001034 	.word	0x20001034

0800ba90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	613b      	str	r3, [r7, #16]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	60fb      	str	r3, [r7, #12]
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bad2:	f000 fb23 	bl	800c11c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bad6:	4b1d      	ldr	r3, [pc, #116]	; (800bb4c <xTaskCheckForTimeOut+0xbc>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	69ba      	ldr	r2, [r7, #24]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d102      	bne.n	800baf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61fb      	str	r3, [r7, #28]
 800baf4:	e023      	b.n	800bb3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <xTaskCheckForTimeOut+0xc0>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d007      	beq.n	800bb12 <xTaskCheckForTimeOut+0x82>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	69ba      	ldr	r2, [r7, #24]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d302      	bcc.n	800bb12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	61fb      	str	r3, [r7, #28]
 800bb10:	e015      	b.n	800bb3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d20b      	bcs.n	800bb34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff ff9b 	bl	800ba64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	61fb      	str	r3, [r7, #28]
 800bb32:	e004      	b.n	800bb3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb3e:	f000 fb1d 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800bb42:	69fb      	ldr	r3, [r7, #28]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3720      	adds	r7, #32
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001034 	.word	0x20001034
 800bb50:	20001048 	.word	0x20001048

0800bb54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <vTaskMissedYield+0x14>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]
}
 800bb5e:	bf00      	nop
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bc80      	pop	{r7}
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	20001044 	.word	0x20001044

0800bb6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb74:	f000 f852 	bl	800bc1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb78:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <prvIdleTask+0x28>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d9f9      	bls.n	800bb74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <prvIdleTask+0x2c>)
 800bb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb90:	e7f0      	b.n	800bb74 <prvIdleTask+0x8>
 800bb92:	bf00      	nop
 800bb94:	20000f34 	.word	0x20000f34
 800bb98:	e000ed04 	.word	0xe000ed04

0800bb9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bba2:	2300      	movs	r3, #0
 800bba4:	607b      	str	r3, [r7, #4]
 800bba6:	e00c      	b.n	800bbc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4a12      	ldr	r2, [pc, #72]	; (800bbfc <prvInitialiseTaskLists+0x60>)
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ff74 	bl	800aaa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	607b      	str	r3, [r7, #4]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b06      	cmp	r3, #6
 800bbc6:	d9ef      	bls.n	800bba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbc8:	480d      	ldr	r0, [pc, #52]	; (800bc00 <prvInitialiseTaskLists+0x64>)
 800bbca:	f7fe ff6b 	bl	800aaa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbce:	480d      	ldr	r0, [pc, #52]	; (800bc04 <prvInitialiseTaskLists+0x68>)
 800bbd0:	f7fe ff68 	bl	800aaa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbd4:	480c      	ldr	r0, [pc, #48]	; (800bc08 <prvInitialiseTaskLists+0x6c>)
 800bbd6:	f7fe ff65 	bl	800aaa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbda:	480c      	ldr	r0, [pc, #48]	; (800bc0c <prvInitialiseTaskLists+0x70>)
 800bbdc:	f7fe ff62 	bl	800aaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbe0:	480b      	ldr	r0, [pc, #44]	; (800bc10 <prvInitialiseTaskLists+0x74>)
 800bbe2:	f7fe ff5f 	bl	800aaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <prvInitialiseTaskLists+0x78>)
 800bbe8:	4a05      	ldr	r2, [pc, #20]	; (800bc00 <prvInitialiseTaskLists+0x64>)
 800bbea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbec:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <prvInitialiseTaskLists+0x7c>)
 800bbee:	4a05      	ldr	r2, [pc, #20]	; (800bc04 <prvInitialiseTaskLists+0x68>)
 800bbf0:	601a      	str	r2, [r3, #0]
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000f34 	.word	0x20000f34
 800bc00:	20000fc0 	.word	0x20000fc0
 800bc04:	20000fd4 	.word	0x20000fd4
 800bc08:	20000ff0 	.word	0x20000ff0
 800bc0c:	20001004 	.word	0x20001004
 800bc10:	2000101c 	.word	0x2000101c
 800bc14:	20000fe8 	.word	0x20000fe8
 800bc18:	20000fec 	.word	0x20000fec

0800bc1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc22:	e019      	b.n	800bc58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc24:	f000 fa7a 	bl	800c11c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bc28:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <prvCheckTasksWaitingTermination+0x50>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe ffbb 	bl	800abb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <prvCheckTasksWaitingTermination+0x54>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4a0b      	ldr	r2, [pc, #44]	; (800bc70 <prvCheckTasksWaitingTermination+0x54>)
 800bc42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc44:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <prvCheckTasksWaitingTermination+0x58>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	4a0a      	ldr	r2, [pc, #40]	; (800bc74 <prvCheckTasksWaitingTermination+0x58>)
 800bc4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc4e:	f000 fa95 	bl	800c17c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f810 	bl	800bc78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <prvCheckTasksWaitingTermination+0x58>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e1      	bne.n	800bc24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20001004 	.word	0x20001004
 800bc70:	20001030 	.word	0x20001030
 800bc74:	20001018 	.word	0x20001018

0800bc78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d108      	bne.n	800bc9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fbca 	bl	800c428 <vPortFree>
				vPortFree( pxTCB );
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fbc7 	bl	800c428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc9a:	e018      	b.n	800bcce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d103      	bne.n	800bcae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fbbe 	bl	800c428 <vPortFree>
	}
 800bcac:	e00f      	b.n	800bcce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d00a      	beq.n	800bcce <prvDeleteTCB+0x56>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	60fb      	str	r3, [r7, #12]
}
 800bcca:	bf00      	nop
 800bccc:	e7fe      	b.n	800bccc <prvDeleteTCB+0x54>
	}
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <prvResetNextTaskUnblockTime+0x40>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <prvResetNextTaskUnblockTime+0x14>
 800bce8:	2301      	movs	r3, #1
 800bcea:	e000      	b.n	800bcee <prvResetNextTaskUnblockTime+0x16>
 800bcec:	2300      	movs	r3, #0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d004      	beq.n	800bcfc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf2:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <prvResetNextTaskUnblockTime+0x44>)
 800bcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcfa:	e008      	b.n	800bd0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcfc:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <prvResetNextTaskUnblockTime+0x40>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	4a04      	ldr	r2, [pc, #16]	; (800bd1c <prvResetNextTaskUnblockTime+0x44>)
 800bd0c:	6013      	str	r3, [r2, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bc80      	pop	{r7}
 800bd16:	4770      	bx	lr
 800bd18:	20000fe8 	.word	0x20000fe8
 800bd1c:	20001050 	.word	0x20001050

0800bd20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd26:	4b0b      	ldr	r3, [pc, #44]	; (800bd54 <xTaskGetSchedulerState+0x34>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	607b      	str	r3, [r7, #4]
 800bd32:	e008      	b.n	800bd46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd34:	4b08      	ldr	r3, [pc, #32]	; (800bd58 <xTaskGetSchedulerState+0x38>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	607b      	str	r3, [r7, #4]
 800bd40:	e001      	b.n	800bd46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd46:	687b      	ldr	r3, [r7, #4]
	}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bc80      	pop	{r7}
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	2000103c 	.word	0x2000103c
 800bd58:	20001058 	.word	0x20001058

0800bd5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d06e      	beq.n	800be50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd72:	4b3a      	ldr	r3, [pc, #232]	; (800be5c <xTaskPriorityDisinherit+0x100>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d00a      	beq.n	800bd92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	60fb      	str	r3, [r7, #12]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	60bb      	str	r3, [r7, #8]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb4:	1e5a      	subs	r2, r3, #1
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d044      	beq.n	800be50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d140      	bne.n	800be50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fe feec 	bl	800abb0 <uxListRemove>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d115      	bne.n	800be0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde2:	491f      	ldr	r1, [pc, #124]	; (800be60 <xTaskPriorityDisinherit+0x104>)
 800bde4:	4613      	mov	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10a      	bne.n	800be0a <xTaskPriorityDisinherit+0xae>
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	43da      	mvns	r2, r3
 800be00:	4b18      	ldr	r3, [pc, #96]	; (800be64 <xTaskPriorityDisinherit+0x108>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4013      	ands	r3, r2
 800be06:	4a17      	ldr	r2, [pc, #92]	; (800be64 <xTaskPriorityDisinherit+0x108>)
 800be08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be16:	f1c3 0207 	rsb	r2, r3, #7
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	2201      	movs	r2, #1
 800be24:	409a      	lsls	r2, r3
 800be26:	4b0f      	ldr	r3, [pc, #60]	; (800be64 <xTaskPriorityDisinherit+0x108>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	4a0d      	ldr	r2, [pc, #52]	; (800be64 <xTaskPriorityDisinherit+0x108>)
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4a08      	ldr	r2, [pc, #32]	; (800be60 <xTaskPriorityDisinherit+0x104>)
 800be3e:	441a      	add	r2, r3
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	3304      	adds	r3, #4
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f7fe fe57 	bl	800aafa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be4c:	2301      	movs	r3, #1
 800be4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be50:	697b      	ldr	r3, [r7, #20]
	}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20000f30 	.word	0x20000f30
 800be60:	20000f34 	.word	0x20000f34
 800be64:	20001038 	.word	0x20001038

0800be68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be72:	4b29      	ldr	r3, [pc, #164]	; (800bf18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be78:	4b28      	ldr	r3, [pc, #160]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3304      	adds	r3, #4
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe fe96 	bl	800abb0 <uxListRemove>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	2201      	movs	r2, #1
 800be92:	fa02 f303 	lsl.w	r3, r2, r3
 800be96:	43da      	mvns	r2, r3
 800be98:	4b21      	ldr	r3, [pc, #132]	; (800bf20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4013      	ands	r3, r2
 800be9e:	4a20      	ldr	r2, [pc, #128]	; (800bf20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bea0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea8:	d10a      	bne.n	800bec0 <prvAddCurrentTaskToDelayedList+0x58>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d007      	beq.n	800bec0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beb0:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4619      	mov	r1, r3
 800beb8:	481a      	ldr	r0, [pc, #104]	; (800bf24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800beba:	f7fe fe1e 	bl	800aafa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bebe:	e026      	b.n	800bf0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bec8:	4b14      	ldr	r3, [pc, #80]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d209      	bcs.n	800beec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bed8:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3304      	adds	r3, #4
 800bee2:	4619      	mov	r1, r3
 800bee4:	4610      	mov	r0, r2
 800bee6:	f7fe fe2b 	bl	800ab40 <vListInsert>
}
 800beea:	e010      	b.n	800bf0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fe fe21 	bl	800ab40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800befe:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d202      	bcs.n	800bf0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf08:	4a09      	ldr	r2, [pc, #36]	; (800bf30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6013      	str	r3, [r2, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20001034 	.word	0x20001034
 800bf1c:	20000f30 	.word	0x20000f30
 800bf20:	20001038 	.word	0x20001038
 800bf24:	2000101c 	.word	0x2000101c
 800bf28:	20000fec 	.word	0x20000fec
 800bf2c:	20000fe8 	.word	0x20000fe8
 800bf30:	20001050 	.word	0x20001050

0800bf34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3b04      	subs	r3, #4
 800bf44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3b04      	subs	r3, #4
 800bf52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f023 0201 	bic.w	r2, r3, #1
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3b04      	subs	r3, #4
 800bf62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf64:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <pxPortInitialiseStack+0x54>)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3b14      	subs	r3, #20
 800bf6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3b20      	subs	r3, #32
 800bf7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	0800bf8d 	.word	0x0800bf8d

0800bf8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf96:	4b12      	ldr	r3, [pc, #72]	; (800bfe0 <prvTaskExitError+0x54>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9e:	d00a      	beq.n	800bfb6 <prvTaskExitError+0x2a>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60fb      	str	r3, [r7, #12]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <prvTaskExitError+0x28>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	60bb      	str	r3, [r7, #8]
}
 800bfc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfca:	bf00      	nop
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0fc      	beq.n	800bfcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfd2:	bf00      	nop
 800bfd4:	bf00      	nop
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bc80      	pop	{r7}
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20000950 	.word	0x20000950
	...

0800bff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bff0:	4b07      	ldr	r3, [pc, #28]	; (800c010 <pxCurrentTCBConst2>)
 800bff2:	6819      	ldr	r1, [r3, #0]
 800bff4:	6808      	ldr	r0, [r1, #0]
 800bff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bffa:	f380 8809 	msr	PSP, r0
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8811 	msr	BASEPRI, r0
 800c00a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c00e:	4770      	bx	lr

0800c010 <pxCurrentTCBConst2>:
 800c010:	20000f30 	.word	0x20000f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop

0800c018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c018:	4806      	ldr	r0, [pc, #24]	; (800c034 <prvPortStartFirstTask+0x1c>)
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	6800      	ldr	r0, [r0, #0]
 800c01e:	f380 8808 	msr	MSP, r0
 800c022:	b662      	cpsie	i
 800c024:	b661      	cpsie	f
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	df00      	svc	0
 800c030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c032:	bf00      	nop
 800c034:	e000ed08 	.word	0xe000ed08

0800c038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c03e:	4b32      	ldr	r3, [pc, #200]	; (800c108 <xPortStartScheduler+0xd0>)
 800c040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	22ff      	movs	r2, #255	; 0xff
 800c04e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4b2a      	ldr	r3, [pc, #168]	; (800c10c <xPortStartScheduler+0xd4>)
 800c064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <xPortStartScheduler+0xd8>)
 800c068:	2207      	movs	r2, #7
 800c06a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c06c:	e009      	b.n	800c082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c06e:	4b28      	ldr	r3, [pc, #160]	; (800c110 <xPortStartScheduler+0xd8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3b01      	subs	r3, #1
 800c074:	4a26      	ldr	r2, [pc, #152]	; (800c110 <xPortStartScheduler+0xd8>)
 800c076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c078:	78fb      	ldrb	r3, [r7, #3]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c082:	78fb      	ldrb	r3, [r7, #3]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08a:	2b80      	cmp	r3, #128	; 0x80
 800c08c:	d0ef      	beq.n	800c06e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c08e:	4b20      	ldr	r3, [pc, #128]	; (800c110 <xPortStartScheduler+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f1c3 0307 	rsb	r3, r3, #7
 800c096:	2b04      	cmp	r3, #4
 800c098:	d00a      	beq.n	800c0b0 <xPortStartScheduler+0x78>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	60bb      	str	r3, [r7, #8]
}
 800c0ac:	bf00      	nop
 800c0ae:	e7fe      	b.n	800c0ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0b0:	4b17      	ldr	r3, [pc, #92]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	021b      	lsls	r3, r3, #8
 800c0b6:	4a16      	ldr	r2, [pc, #88]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0c2:	4a13      	ldr	r2, [pc, #76]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0ce:	4b11      	ldr	r3, [pc, #68]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a10      	ldr	r2, [pc, #64]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0da:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a0d      	ldr	r2, [pc, #52]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0e6:	f000 f8b9 	bl	800c25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <xPortStartScheduler+0xe0>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0f0:	f7ff ff92 	bl	800c018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0f4:	f7ff fbd6 	bl	800b8a4 <vTaskSwitchContext>
	prvTaskExitError();
 800c0f8:	f7ff ff48 	bl	800bf8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	e000e400 	.word	0xe000e400
 800c10c:	2000105c 	.word	0x2000105c
 800c110:	20001060 	.word	0x20001060
 800c114:	e000ed20 	.word	0xe000ed20
 800c118:	20000950 	.word	0x20000950

0800c11c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
}
 800c134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <vPortEnterCritical+0x58>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3301      	adds	r3, #1
 800c13c:	4a0d      	ldr	r2, [pc, #52]	; (800c174 <vPortEnterCritical+0x58>)
 800c13e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c140:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <vPortEnterCritical+0x58>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d10f      	bne.n	800c168 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c148:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <vPortEnterCritical+0x5c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <vPortEnterCritical+0x4c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	603b      	str	r3, [r7, #0]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <vPortEnterCritical+0x4a>
	}
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bc80      	pop	{r7}
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20000950 	.word	0x20000950
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <vPortExitCritical+0x24>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	607b      	str	r3, [r7, #4]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d105      	bne.n	800c1be <vPortExitCritical+0x42>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bc80      	pop	{r7}
 800c1c6:	4770      	bx	lr
 800c1c8:	20000950 	.word	0x20000950
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1d0:	f3ef 8009 	mrs	r0, PSP
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <pxCurrentTCBConst>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1e0:	6010      	str	r0, [r2, #0]
 800c1e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c1e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1ea:	f380 8811 	msr	BASEPRI, r0
 800c1ee:	f7ff fb59 	bl	800b8a4 <vTaskSwitchContext>
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f380 8811 	msr	BASEPRI, r0
 800c1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1fe:	6819      	ldr	r1, [r3, #0]
 800c200:	6808      	ldr	r0, [r1, #0]
 800c202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c206:	f380 8809 	msr	PSP, r0
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	4770      	bx	lr

0800c210 <pxCurrentTCBConst>:
 800c210:	20000f30 	.word	0x20000f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop

0800c218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	607b      	str	r3, [r7, #4]
}
 800c230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c232:	f7ff fa79 	bl	800b728 <xTaskIncrementTick>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <xPortSysTickHandler+0x40>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	2300      	movs	r3, #0
 800c246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	f383 8811 	msr	BASEPRI, r3
}
 800c24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c260:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <vPortSetupTimerInterrupt+0x30>)
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c266:	4b0a      	ldr	r3, [pc, #40]	; (800c290 <vPortSetupTimerInterrupt+0x34>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c26c:	4b09      	ldr	r3, [pc, #36]	; (800c294 <vPortSetupTimerInterrupt+0x38>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a09      	ldr	r2, [pc, #36]	; (800c298 <vPortSetupTimerInterrupt+0x3c>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	099b      	lsrs	r3, r3, #6
 800c278:	4a08      	ldr	r2, [pc, #32]	; (800c29c <vPortSetupTimerInterrupt+0x40>)
 800c27a:	3b01      	subs	r3, #1
 800c27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c27e:	4b03      	ldr	r3, [pc, #12]	; (800c28c <vPortSetupTimerInterrupt+0x30>)
 800c280:	2207      	movs	r2, #7
 800c282:	601a      	str	r2, [r3, #0]
}
 800c284:	bf00      	nop
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr
 800c28c:	e000e010 	.word	0xe000e010
 800c290:	e000e018 	.word	0xe000e018
 800c294:	20000944 	.word	0x20000944
 800c298:	10624dd3 	.word	0x10624dd3
 800c29c:	e000e014 	.word	0xe000e014

0800c2a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2ac:	f7ff f992 	bl	800b5d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2b0:	4b58      	ldr	r3, [pc, #352]	; (800c414 <pvPortMalloc+0x174>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2b8:	f000 f910 	bl	800c4dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2bc:	4b56      	ldr	r3, [pc, #344]	; (800c418 <pvPortMalloc+0x178>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 808e 	bne.w	800c3e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01d      	beq.n	800c30c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d014      	beq.n	800c30c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f023 0307 	bic.w	r3, r3, #7
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <pvPortMalloc+0x6c>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	617b      	str	r3, [r7, #20]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d069      	beq.n	800c3e6 <pvPortMalloc+0x146>
 800c312:	4b42      	ldr	r3, [pc, #264]	; (800c41c <pvPortMalloc+0x17c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d864      	bhi.n	800c3e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c31c:	4b40      	ldr	r3, [pc, #256]	; (800c420 <pvPortMalloc+0x180>)
 800c31e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c320:	4b3f      	ldr	r3, [pc, #252]	; (800c420 <pvPortMalloc+0x180>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c326:	e004      	b.n	800c332 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d903      	bls.n	800c344 <pvPortMalloc+0xa4>
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f1      	bne.n	800c328 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c344:	4b33      	ldr	r3, [pc, #204]	; (800c414 <pvPortMalloc+0x174>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d04b      	beq.n	800c3e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2208      	movs	r2, #8
 800c354:	4413      	add	r3, r2
 800c356:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	1ad2      	subs	r2, r2, r3
 800c368:	2308      	movs	r3, #8
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d91f      	bls.n	800c3b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <pvPortMalloc+0xf8>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	613b      	str	r3, [r7, #16]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f000 f8f8 	bl	800c5a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3b0:	4b1a      	ldr	r3, [pc, #104]	; (800c41c <pvPortMalloc+0x17c>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	4a18      	ldr	r2, [pc, #96]	; (800c41c <pvPortMalloc+0x17c>)
 800c3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3be:	4b17      	ldr	r3, [pc, #92]	; (800c41c <pvPortMalloc+0x17c>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b18      	ldr	r3, [pc, #96]	; (800c424 <pvPortMalloc+0x184>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d203      	bcs.n	800c3d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <pvPortMalloc+0x17c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a15      	ldr	r2, [pc, #84]	; (800c424 <pvPortMalloc+0x184>)
 800c3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	4b10      	ldr	r3, [pc, #64]	; (800c418 <pvPortMalloc+0x178>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3e6:	f7ff f903 	bl	800b5f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <pvPortMalloc+0x16a>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	60fb      	str	r3, [r7, #12]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <pvPortMalloc+0x168>
	return pvReturn;
 800c40a:	69fb      	ldr	r3, [r7, #28]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3728      	adds	r7, #40	; 0x28
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20001c6c 	.word	0x20001c6c
 800c418:	20001c78 	.word	0x20001c78
 800c41c:	20001c70 	.word	0x20001c70
 800c420:	20001c64 	.word	0x20001c64
 800c424:	20001c74 	.word	0x20001c74

0800c428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d048      	beq.n	800c4cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c43a:	2308      	movs	r3, #8
 800c43c:	425b      	negs	r3, r3
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4413      	add	r3, r2
 800c442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b21      	ldr	r3, [pc, #132]	; (800c4d4 <vPortFree+0xac>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4013      	ands	r3, r2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <vPortFree+0x44>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60fb      	str	r3, [r7, #12]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00a      	beq.n	800c48a <vPortFree+0x62>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	60bb      	str	r3, [r7, #8]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	4b11      	ldr	r3, [pc, #68]	; (800c4d4 <vPortFree+0xac>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4013      	ands	r3, r2
 800c494:	2b00      	cmp	r3, #0
 800c496:	d019      	beq.n	800c4cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d115      	bne.n	800c4cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <vPortFree+0xac>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	43db      	mvns	r3, r3
 800c4aa:	401a      	ands	r2, r3
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4b0:	f7ff f890 	bl	800b5d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <vPortFree+0xb0>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4413      	add	r3, r2
 800c4be:	4a06      	ldr	r2, [pc, #24]	; (800c4d8 <vPortFree+0xb0>)
 800c4c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4c2:	6938      	ldr	r0, [r7, #16]
 800c4c4:	f000 f86c 	bl	800c5a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c4c8:	f7ff f892 	bl	800b5f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4cc:	bf00      	nop
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	20001c78 	.word	0x20001c78
 800c4d8:	20001c70 	.word	0x20001c70

0800c4dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c4e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4e8:	4b27      	ldr	r3, [pc, #156]	; (800c588 <prvHeapInit+0xac>)
 800c4ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00c      	beq.n	800c510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3307      	adds	r3, #7
 800c4fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0307 	bic.w	r3, r3, #7
 800c502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	4a1f      	ldr	r2, [pc, #124]	; (800c588 <prvHeapInit+0xac>)
 800c50c:	4413      	add	r3, r2
 800c50e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c514:	4a1d      	ldr	r2, [pc, #116]	; (800c58c <prvHeapInit+0xb0>)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c51a:	4b1c      	ldr	r3, [pc, #112]	; (800c58c <prvHeapInit+0xb0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	4413      	add	r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c528:	2208      	movs	r2, #8
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f023 0307 	bic.w	r3, r3, #7
 800c536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4a15      	ldr	r2, [pc, #84]	; (800c590 <prvHeapInit+0xb4>)
 800c53c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c53e:	4b14      	ldr	r3, [pc, #80]	; (800c590 <prvHeapInit+0xb4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2200      	movs	r2, #0
 800c544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <prvHeapInit+0xb4>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	1ad2      	subs	r2, r2, r3
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c55c:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <prvHeapInit+0xb4>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	4a0a      	ldr	r2, [pc, #40]	; (800c594 <prvHeapInit+0xb8>)
 800c56a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	4a09      	ldr	r2, [pc, #36]	; (800c598 <prvHeapInit+0xbc>)
 800c572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c574:	4b09      	ldr	r3, [pc, #36]	; (800c59c <prvHeapInit+0xc0>)
 800c576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c57a:	601a      	str	r2, [r3, #0]
}
 800c57c:	bf00      	nop
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	bc80      	pop	{r7}
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20001064 	.word	0x20001064
 800c58c:	20001c64 	.word	0x20001c64
 800c590:	20001c6c 	.word	0x20001c6c
 800c594:	20001c74 	.word	0x20001c74
 800c598:	20001c70 	.word	0x20001c70
 800c59c:	20001c78 	.word	0x20001c78

0800c5a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5a8:	4b27      	ldr	r3, [pc, #156]	; (800c648 <prvInsertBlockIntoFreeList+0xa8>)
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	e002      	b.n	800c5b4 <prvInsertBlockIntoFreeList+0x14>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d8f7      	bhi.n	800c5ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d108      	bne.n	800c5e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	441a      	add	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	441a      	add	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d118      	bne.n	800c628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	4b14      	ldr	r3, [pc, #80]	; (800c64c <prvInsertBlockIntoFreeList+0xac>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d00d      	beq.n	800c61e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	441a      	add	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	e008      	b.n	800c630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c61e:	4b0b      	ldr	r3, [pc, #44]	; (800c64c <prvInsertBlockIntoFreeList+0xac>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	e003      	b.n	800c630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	d002      	beq.n	800c63e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	bc80      	pop	{r7}
 800c646:	4770      	bx	lr
 800c648:	20001c64 	.word	0x20001c64
 800c64c:	20001c6c 	.word	0x20001c6c

0800c650 <__itoa>:
 800c650:	1e93      	subs	r3, r2, #2
 800c652:	2b22      	cmp	r3, #34	; 0x22
 800c654:	b510      	push	{r4, lr}
 800c656:	460c      	mov	r4, r1
 800c658:	d904      	bls.n	800c664 <__itoa+0x14>
 800c65a:	2300      	movs	r3, #0
 800c65c:	461c      	mov	r4, r3
 800c65e:	700b      	strb	r3, [r1, #0]
 800c660:	4620      	mov	r0, r4
 800c662:	bd10      	pop	{r4, pc}
 800c664:	2a0a      	cmp	r2, #10
 800c666:	d109      	bne.n	800c67c <__itoa+0x2c>
 800c668:	2800      	cmp	r0, #0
 800c66a:	da07      	bge.n	800c67c <__itoa+0x2c>
 800c66c:	232d      	movs	r3, #45	; 0x2d
 800c66e:	700b      	strb	r3, [r1, #0]
 800c670:	2101      	movs	r1, #1
 800c672:	4240      	negs	r0, r0
 800c674:	4421      	add	r1, r4
 800c676:	f000 f8b9 	bl	800c7ec <__utoa>
 800c67a:	e7f1      	b.n	800c660 <__itoa+0x10>
 800c67c:	2100      	movs	r1, #0
 800c67e:	e7f9      	b.n	800c674 <__itoa+0x24>

0800c680 <itoa>:
 800c680:	f7ff bfe6 	b.w	800c650 <__itoa>

0800c684 <malloc>:
 800c684:	4b02      	ldr	r3, [pc, #8]	; (800c690 <malloc+0xc>)
 800c686:	4601      	mov	r1, r0
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	f000 b823 	b.w	800c6d4 <_malloc_r>
 800c68e:	bf00      	nop
 800c690:	200009a0 	.word	0x200009a0

0800c694 <sbrk_aligned>:
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	4e0e      	ldr	r6, [pc, #56]	; (800c6d0 <sbrk_aligned+0x3c>)
 800c698:	460c      	mov	r4, r1
 800c69a:	6831      	ldr	r1, [r6, #0]
 800c69c:	4605      	mov	r5, r0
 800c69e:	b911      	cbnz	r1, 800c6a6 <sbrk_aligned+0x12>
 800c6a0:	f000 f8ee 	bl	800c880 <_sbrk_r>
 800c6a4:	6030      	str	r0, [r6, #0]
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 f8e9 	bl	800c880 <_sbrk_r>
 800c6ae:	1c43      	adds	r3, r0, #1
 800c6b0:	d00a      	beq.n	800c6c8 <sbrk_aligned+0x34>
 800c6b2:	1cc4      	adds	r4, r0, #3
 800c6b4:	f024 0403 	bic.w	r4, r4, #3
 800c6b8:	42a0      	cmp	r0, r4
 800c6ba:	d007      	beq.n	800c6cc <sbrk_aligned+0x38>
 800c6bc:	1a21      	subs	r1, r4, r0
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f000 f8de 	bl	800c880 <_sbrk_r>
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d101      	bne.n	800c6cc <sbrk_aligned+0x38>
 800c6c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	20001c80 	.word	0x20001c80

0800c6d4 <_malloc_r>:
 800c6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d8:	1ccd      	adds	r5, r1, #3
 800c6da:	f025 0503 	bic.w	r5, r5, #3
 800c6de:	3508      	adds	r5, #8
 800c6e0:	2d0c      	cmp	r5, #12
 800c6e2:	bf38      	it	cc
 800c6e4:	250c      	movcc	r5, #12
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	db01      	blt.n	800c6f0 <_malloc_r+0x1c>
 800c6ec:	42a9      	cmp	r1, r5
 800c6ee:	d905      	bls.n	800c6fc <_malloc_r+0x28>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	603b      	str	r3, [r7, #0]
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c7d0 <_malloc_r+0xfc>
 800c700:	f000 f868 	bl	800c7d4 <__malloc_lock>
 800c704:	f8d8 3000 	ldr.w	r3, [r8]
 800c708:	461c      	mov	r4, r3
 800c70a:	bb5c      	cbnz	r4, 800c764 <_malloc_r+0x90>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4638      	mov	r0, r7
 800c710:	f7ff ffc0 	bl	800c694 <sbrk_aligned>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	4604      	mov	r4, r0
 800c718:	d155      	bne.n	800c7c6 <_malloc_r+0xf2>
 800c71a:	f8d8 4000 	ldr.w	r4, [r8]
 800c71e:	4626      	mov	r6, r4
 800c720:	2e00      	cmp	r6, #0
 800c722:	d145      	bne.n	800c7b0 <_malloc_r+0xdc>
 800c724:	2c00      	cmp	r4, #0
 800c726:	d048      	beq.n	800c7ba <_malloc_r+0xe6>
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	4631      	mov	r1, r6
 800c72c:	4638      	mov	r0, r7
 800c72e:	eb04 0903 	add.w	r9, r4, r3
 800c732:	f000 f8a5 	bl	800c880 <_sbrk_r>
 800c736:	4581      	cmp	r9, r0
 800c738:	d13f      	bne.n	800c7ba <_malloc_r+0xe6>
 800c73a:	6821      	ldr	r1, [r4, #0]
 800c73c:	4638      	mov	r0, r7
 800c73e:	1a6d      	subs	r5, r5, r1
 800c740:	4629      	mov	r1, r5
 800c742:	f7ff ffa7 	bl	800c694 <sbrk_aligned>
 800c746:	3001      	adds	r0, #1
 800c748:	d037      	beq.n	800c7ba <_malloc_r+0xe6>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	442b      	add	r3, r5
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	f8d8 3000 	ldr.w	r3, [r8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d038      	beq.n	800c7ca <_malloc_r+0xf6>
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	42a2      	cmp	r2, r4
 800c75c:	d12b      	bne.n	800c7b6 <_malloc_r+0xe2>
 800c75e:	2200      	movs	r2, #0
 800c760:	605a      	str	r2, [r3, #4]
 800c762:	e00f      	b.n	800c784 <_malloc_r+0xb0>
 800c764:	6822      	ldr	r2, [r4, #0]
 800c766:	1b52      	subs	r2, r2, r5
 800c768:	d41f      	bmi.n	800c7aa <_malloc_r+0xd6>
 800c76a:	2a0b      	cmp	r2, #11
 800c76c:	d917      	bls.n	800c79e <_malloc_r+0xca>
 800c76e:	1961      	adds	r1, r4, r5
 800c770:	42a3      	cmp	r3, r4
 800c772:	6025      	str	r5, [r4, #0]
 800c774:	bf18      	it	ne
 800c776:	6059      	strne	r1, [r3, #4]
 800c778:	6863      	ldr	r3, [r4, #4]
 800c77a:	bf08      	it	eq
 800c77c:	f8c8 1000 	streq.w	r1, [r8]
 800c780:	5162      	str	r2, [r4, r5]
 800c782:	604b      	str	r3, [r1, #4]
 800c784:	4638      	mov	r0, r7
 800c786:	f104 060b 	add.w	r6, r4, #11
 800c78a:	f000 f829 	bl	800c7e0 <__malloc_unlock>
 800c78e:	f026 0607 	bic.w	r6, r6, #7
 800c792:	1d23      	adds	r3, r4, #4
 800c794:	1af2      	subs	r2, r6, r3
 800c796:	d0ae      	beq.n	800c6f6 <_malloc_r+0x22>
 800c798:	1b9b      	subs	r3, r3, r6
 800c79a:	50a3      	str	r3, [r4, r2]
 800c79c:	e7ab      	b.n	800c6f6 <_malloc_r+0x22>
 800c79e:	42a3      	cmp	r3, r4
 800c7a0:	6862      	ldr	r2, [r4, #4]
 800c7a2:	d1dd      	bne.n	800c760 <_malloc_r+0x8c>
 800c7a4:	f8c8 2000 	str.w	r2, [r8]
 800c7a8:	e7ec      	b.n	800c784 <_malloc_r+0xb0>
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	6864      	ldr	r4, [r4, #4]
 800c7ae:	e7ac      	b.n	800c70a <_malloc_r+0x36>
 800c7b0:	4634      	mov	r4, r6
 800c7b2:	6876      	ldr	r6, [r6, #4]
 800c7b4:	e7b4      	b.n	800c720 <_malloc_r+0x4c>
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	e7cc      	b.n	800c754 <_malloc_r+0x80>
 800c7ba:	230c      	movs	r3, #12
 800c7bc:	4638      	mov	r0, r7
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	f000 f80e 	bl	800c7e0 <__malloc_unlock>
 800c7c4:	e797      	b.n	800c6f6 <_malloc_r+0x22>
 800c7c6:	6025      	str	r5, [r4, #0]
 800c7c8:	e7dc      	b.n	800c784 <_malloc_r+0xb0>
 800c7ca:	605b      	str	r3, [r3, #4]
 800c7cc:	deff      	udf	#255	; 0xff
 800c7ce:	bf00      	nop
 800c7d0:	20001c7c 	.word	0x20001c7c

0800c7d4 <__malloc_lock>:
 800c7d4:	4801      	ldr	r0, [pc, #4]	; (800c7dc <__malloc_lock+0x8>)
 800c7d6:	f000 b88d 	b.w	800c8f4 <__retarget_lock_acquire_recursive>
 800c7da:	bf00      	nop
 800c7dc:	20001dc0 	.word	0x20001dc0

0800c7e0 <__malloc_unlock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	; (800c7e8 <__malloc_unlock+0x8>)
 800c7e2:	f000 b888 	b.w	800c8f6 <__retarget_lock_release_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20001dc0 	.word	0x20001dc0

0800c7ec <__utoa>:
 800c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ee:	b08b      	sub	sp, #44	; 0x2c
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	466e      	mov	r6, sp
 800c7f6:	4c1d      	ldr	r4, [pc, #116]	; (800c86c <__utoa+0x80>)
 800c7f8:	f104 0c20 	add.w	ip, r4, #32
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	6820      	ldr	r0, [r4, #0]
 800c800:	6861      	ldr	r1, [r4, #4]
 800c802:	3408      	adds	r4, #8
 800c804:	c703      	stmia	r7!, {r0, r1}
 800c806:	4564      	cmp	r4, ip
 800c808:	463e      	mov	r6, r7
 800c80a:	d1f7      	bne.n	800c7fc <__utoa+0x10>
 800c80c:	7921      	ldrb	r1, [r4, #4]
 800c80e:	6820      	ldr	r0, [r4, #0]
 800c810:	7139      	strb	r1, [r7, #4]
 800c812:	1e91      	subs	r1, r2, #2
 800c814:	2922      	cmp	r1, #34	; 0x22
 800c816:	6038      	str	r0, [r7, #0]
 800c818:	f04f 0100 	mov.w	r1, #0
 800c81c:	d904      	bls.n	800c828 <__utoa+0x3c>
 800c81e:	7019      	strb	r1, [r3, #0]
 800c820:	460b      	mov	r3, r1
 800c822:	4618      	mov	r0, r3
 800c824:	b00b      	add	sp, #44	; 0x2c
 800c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c828:	1e58      	subs	r0, r3, #1
 800c82a:	4684      	mov	ip, r0
 800c82c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c830:	fb02 5617 	mls	r6, r2, r7, r5
 800c834:	3628      	adds	r6, #40	; 0x28
 800c836:	446e      	add	r6, sp
 800c838:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c83c:	460c      	mov	r4, r1
 800c83e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c842:	462e      	mov	r6, r5
 800c844:	42b2      	cmp	r2, r6
 800c846:	463d      	mov	r5, r7
 800c848:	f101 0101 	add.w	r1, r1, #1
 800c84c:	d9ee      	bls.n	800c82c <__utoa+0x40>
 800c84e:	2200      	movs	r2, #0
 800c850:	545a      	strb	r2, [r3, r1]
 800c852:	1919      	adds	r1, r3, r4
 800c854:	1aa5      	subs	r5, r4, r2
 800c856:	42aa      	cmp	r2, r5
 800c858:	dae3      	bge.n	800c822 <__utoa+0x36>
 800c85a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c85e:	780e      	ldrb	r6, [r1, #0]
 800c860:	3201      	adds	r2, #1
 800c862:	7006      	strb	r6, [r0, #0]
 800c864:	f801 5901 	strb.w	r5, [r1], #-1
 800c868:	e7f4      	b.n	800c854 <__utoa+0x68>
 800c86a:	bf00      	nop
 800c86c:	0800d724 	.word	0x0800d724

0800c870 <memset>:
 800c870:	4603      	mov	r3, r0
 800c872:	4402      	add	r2, r0
 800c874:	4293      	cmp	r3, r2
 800c876:	d100      	bne.n	800c87a <memset+0xa>
 800c878:	4770      	bx	lr
 800c87a:	f803 1b01 	strb.w	r1, [r3], #1
 800c87e:	e7f9      	b.n	800c874 <memset+0x4>

0800c880 <_sbrk_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	2300      	movs	r3, #0
 800c884:	4d05      	ldr	r5, [pc, #20]	; (800c89c <_sbrk_r+0x1c>)
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7fa ff9e 	bl	80077cc <_sbrk>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_sbrk_r+0x1a>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_sbrk_r+0x1a>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20001dbc 	.word	0x20001dbc

0800c8a0 <__errno>:
 800c8a0:	4b01      	ldr	r3, [pc, #4]	; (800c8a8 <__errno+0x8>)
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	200009a0 	.word	0x200009a0

0800c8ac <__libc_init_array>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	2600      	movs	r6, #0
 800c8b0:	4d0c      	ldr	r5, [pc, #48]	; (800c8e4 <__libc_init_array+0x38>)
 800c8b2:	4c0d      	ldr	r4, [pc, #52]	; (800c8e8 <__libc_init_array+0x3c>)
 800c8b4:	1b64      	subs	r4, r4, r5
 800c8b6:	10a4      	asrs	r4, r4, #2
 800c8b8:	42a6      	cmp	r6, r4
 800c8ba:	d109      	bne.n	800c8d0 <__libc_init_array+0x24>
 800c8bc:	f000 f832 	bl	800c924 <_init>
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	4d0a      	ldr	r5, [pc, #40]	; (800c8ec <__libc_init_array+0x40>)
 800c8c4:	4c0a      	ldr	r4, [pc, #40]	; (800c8f0 <__libc_init_array+0x44>)
 800c8c6:	1b64      	subs	r4, r4, r5
 800c8c8:	10a4      	asrs	r4, r4, #2
 800c8ca:	42a6      	cmp	r6, r4
 800c8cc:	d105      	bne.n	800c8da <__libc_init_array+0x2e>
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d4:	4798      	blx	r3
 800c8d6:	3601      	adds	r6, #1
 800c8d8:	e7ee      	b.n	800c8b8 <__libc_init_array+0xc>
 800c8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8de:	4798      	blx	r3
 800c8e0:	3601      	adds	r6, #1
 800c8e2:	e7f2      	b.n	800c8ca <__libc_init_array+0x1e>
 800c8e4:	0800d74c 	.word	0x0800d74c
 800c8e8:	0800d74c 	.word	0x0800d74c
 800c8ec:	0800d74c 	.word	0x0800d74c
 800c8f0:	0800d750 	.word	0x0800d750

0800c8f4 <__retarget_lock_acquire_recursive>:
 800c8f4:	4770      	bx	lr

0800c8f6 <__retarget_lock_release_recursive>:
 800c8f6:	4770      	bx	lr

0800c8f8 <strcpy>:
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8fe:	f803 2b01 	strb.w	r2, [r3], #1
 800c902:	2a00      	cmp	r2, #0
 800c904:	d1f9      	bne.n	800c8fa <strcpy+0x2>
 800c906:	4770      	bx	lr

0800c908 <memcpy>:
 800c908:	440a      	add	r2, r1
 800c90a:	4291      	cmp	r1, r2
 800c90c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c910:	d100      	bne.n	800c914 <memcpy+0xc>
 800c912:	4770      	bx	lr
 800c914:	b510      	push	{r4, lr}
 800c916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c91a:	4291      	cmp	r1, r2
 800c91c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c920:	d1f9      	bne.n	800c916 <memcpy+0xe>
 800c922:	bd10      	pop	{r4, pc}

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
