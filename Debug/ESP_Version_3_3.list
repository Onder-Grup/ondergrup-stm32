
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800bec0  0800bec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc84  0800cc84  00020974  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc84  0800cc84  00020974  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc84  0800cc84  00020974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc84  0800cc84  0001cc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000974  20000000  0800cc8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  20000974  0800d600  00020974  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d88  0800d600  00021d88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016791  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f75  00000000  00000000  00037171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108b  00000000  00000000  0003b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003852  00000000  00000000  0003c65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c07  00000000  00000000  0003fead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7242  00000000  00000000  00059ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c18  00000000  00000000  00100cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00106910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000974 	.word	0x20000974
 800020c:	00000000 	.word	0x00000000
 8000210:	0800bea8 	.word	0x0800bea8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000978 	.word	0x20000978
 800022c:	0800bea8 	.word	0x0800bea8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000990 	.word	0x20000990
 800026c:	200009e4 	.word	0x200009e4

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <lcd_send_cmd+0x78>)
 80002b4:	f008 fd9d 	bl	8008df2 <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80002be:	bf00      	nop
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <lcd_send_cmd+0x78>)
 80002c2:	f008 fd89 	bl	8008dd8 <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2304      	movs	r3, #4
 80002d6:	214e      	movs	r1, #78	; 0x4e
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <lcd_send_cmd+0x78>)
 80002da:	f008 f91d 	bl	8008518 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000e08 	.word	0x20000e08

080002ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f043 030d 	orr.w	r3, r3, #13
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f043 0309 	orr.w	r3, r3, #9
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800032c:	bf00      	nop
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <lcd_send_data+0x78>)
 8000330:	f008 fd5f 	bl	8008df2 <HAL_I2C_GetError>
 8000334:	4603      	mov	r3, r0
 8000336:	2b04      	cmp	r3, #4
 8000338:	d0f9      	beq.n	800032e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800033a:	bf00      	nop
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <lcd_send_data+0x78>)
 800033e:	f008 fd4b 	bl	8008dd8 <HAL_I2C_GetState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b20      	cmp	r3, #32
 8000346:	d1f9      	bne.n	800033c <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	214e      	movs	r1, #78	; 0x4e
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <lcd_send_data+0x78>)
 8000356:	f008 f8df 	bl	8008518 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000e08 	.word	0x20000e08

08000368 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000370:	e006      	b.n	8000380 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb6 	bl	80002ec <lcd_send_data>
	while (*str)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <lcd_send_string+0xa>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcd_init>:

void lcd_init (void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff6a 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f7ff ff67 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ff64 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f7ff ff61 	bl	8000270 <lcd_send_cmd>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	337f      	adds	r3, #127	; 0x7f
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80003d4:	e008      	b.n	80003e8 <lcd_gotoxy+0x36>
 else if(row == 2)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d105      	bne.n	80003e8 <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	603a      	str	r2, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	460b      	mov	r3, r1
 80003fe:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffd3 	bl	80003b2 <lcd_gotoxy>
 lcd_send_string(str);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffab 	bl	8000368 <lcd_send_string>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_clear>:

void lcd_clear(void) {
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff26 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 fa2d 	bl	8007884 <HAL_Delay>

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000434:	f3bf 8f4f 	dsb	sy
}
 8000438:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <__NVIC_SystemReset+0x24>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000442:	4904      	ldr	r1, [pc, #16]	; (8000454 <__NVIC_SystemReset+0x24>)
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <__NVIC_SystemReset+0x28>)
 8000446:	4313      	orrs	r3, r2
 8000448:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <__NVIC_SystemReset+0x20>
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	05fa0004 	.word	0x05fa0004

0800045c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff fee3 	bl	8000230 <strlen>
 800046a:	4603      	mov	r3, r0
 800046c:	3301      	adds	r3, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f00b fbd8 	bl	800bc24 <malloc>
 8000474:	4603      	mov	r3, r0
 8000476:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <copyText+0x2a>
        strcpy(result, text);
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f00b fd09 	bl	800be98 <strcpy>
    }
    return result;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <bekle>:
        }
    }
    return result;
}

void bekle(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	timer1=millis;
 8000494:	4b47      	ldr	r3, [pc, #284]	; (80005b4 <bekle+0x124>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a47      	ldr	r2, [pc, #284]	; (80005b8 <bekle+0x128>)
 800049a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800049c:	e002      	b.n	80004a4 <bekle+0x14>
    	butonKontrol = 1;
 800049e:	4b47      	ldr	r3, [pc, #284]	; (80005bc <bekle+0x12c>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80004a4:	2101      	movs	r1, #1
 80004a6:	4846      	ldr	r0, [pc, #280]	; (80005c0 <bekle+0x130>)
 80004a8:	f007 fe7a 	bl	80081a0 <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d109      	bne.n	80004c6 <bekle+0x36>
 80004b2:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <bekle+0x124>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b40      	ldr	r3, [pc, #256]	; (80005b8 <bekle+0x128>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d0ef      	beq.n	800049e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80004be:	e002      	b.n	80004c6 <bekle+0x36>
    	butonKontrol = 1;
 80004c0:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <bekle+0x12c>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80004c6:	2108      	movs	r1, #8
 80004c8:	483e      	ldr	r0, [pc, #248]	; (80005c4 <bekle+0x134>)
 80004ca:	f007 fe69 	bl	80081a0 <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d109      	bne.n	80004e8 <bekle+0x58>
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <bekle+0x124>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <bekle+0x128>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d0ef      	beq.n	80004c0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80004e0:	e002      	b.n	80004e8 <bekle+0x58>
    	butonKontrol = 1;
 80004e2:	4b36      	ldr	r3, [pc, #216]	; (80005bc <bekle+0x12c>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80004e8:	2102      	movs	r1, #2
 80004ea:	4835      	ldr	r0, [pc, #212]	; (80005c0 <bekle+0x130>)
 80004ec:	f007 fe58 	bl	80081a0 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d109      	bne.n	800050a <bekle+0x7a>
 80004f6:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <bekle+0x124>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <bekle+0x128>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d0ef      	beq.n	80004e2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8000502:	e002      	b.n	800050a <bekle+0x7a>
    	butonKontrol = 1;
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <bekle+0x12c>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800050a:	2104      	movs	r1, #4
 800050c:	482c      	ldr	r0, [pc, #176]	; (80005c0 <bekle+0x130>)
 800050e:	f007 fe47 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d109      	bne.n	800052c <bekle+0x9c>
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <bekle+0x124>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <bekle+0x128>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	d0ef      	beq.n	8000504 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8000524:	e002      	b.n	800052c <bekle+0x9c>
    	butonKontrol = 1;
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <bekle+0x12c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800052c:	2108      	movs	r1, #8
 800052e:	4824      	ldr	r0, [pc, #144]	; (80005c0 <bekle+0x130>)
 8000530:	f007 fe36 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d109      	bne.n	800054e <bekle+0xbe>
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <bekle+0x124>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <bekle+0x128>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	429a      	cmp	r2, r3
 8000544:	d0ef      	beq.n	8000526 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8000546:	e002      	b.n	800054e <bekle+0xbe>
    	butonKontrol = 1;
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <bekle+0x12c>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	481c      	ldr	r0, [pc, #112]	; (80005c4 <bekle+0x134>)
 8000552:	f007 fe25 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d109      	bne.n	8000570 <bekle+0xe0>
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <bekle+0x124>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <bekle+0x128>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d0ef      	beq.n	8000548 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8000568:	e002      	b.n	8000570 <bekle+0xe0>
    	butonKontrol = 1;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <bekle+0x12c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <bekle+0x134>)
 8000576:	f007 fe13 	bl	80081a0 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <bekle+0x104>
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <bekle+0x124>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <bekle+0x128>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d0ee      	beq.n	800056a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800058c:	e002      	b.n	8000594 <bekle+0x104>
    	butonKontrol = 1;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <bekle+0x12c>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8000594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <bekle+0x134>)
 800059a:	f007 fe01 	bl	80081a0 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d105      	bne.n	80005b0 <bekle+0x120>
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <bekle+0x124>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <bekle+0x128>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d0ee      	beq.n	800058e <bekle+0xfe>
    }

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000c2c 	.word	0x20000c2c
 80005b8:	20000c34 	.word	0x20000c34
 80005bc:	20000c7a 	.word	0x20000c7a
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40011000 	.word	0x40011000

080005c8 <menu>:

void menu(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80005cc:	2101      	movs	r1, #1
 80005ce:	488f      	ldr	r0, [pc, #572]	; (800080c <menu+0x244>)
 80005d0:	f007 fde6 	bl	80081a0 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	f040 808e 	bne.w	80006f8 <menu+0x130>
 80005dc:	4b8c      	ldr	r3, [pc, #560]	; (8000810 <menu+0x248>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f083 0301 	eor.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 8086 	beq.w	80006f8 <menu+0x130>
		menuSayac = menuSayac+1;
 80005ec:	4b89      	ldr	r3, [pc, #548]	; (8000814 <menu+0x24c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b87      	ldr	r3, [pc, #540]	; (8000814 <menu+0x24c>)
 80005f6:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80005f8:	4b86      	ldr	r3, [pc, #536]	; (8000814 <menu+0x24c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d102      	bne.n	8000606 <menu+0x3e>
			menuSayac = 1;
 8000600:	4b84      	ldr	r3, [pc, #528]	; (8000814 <menu+0x24c>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000606:	4b83      	ldr	r3, [pc, #524]	; (8000814 <menu+0x24c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b12      	cmp	r3, #18
 800060c:	d106      	bne.n	800061c <menu+0x54>
 800060e:	4b82      	ldr	r3, [pc, #520]	; (8000818 <menu+0x250>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d102      	bne.n	800061c <menu+0x54>
			menuSayac = 21;
 8000616:	4b7f      	ldr	r3, [pc, #508]	; (8000814 <menu+0x24c>)
 8000618:	2215      	movs	r2, #21
 800061a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800061c:	4b7d      	ldr	r3, [pc, #500]	; (8000814 <menu+0x24c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d106      	bne.n	8000632 <menu+0x6a>
 8000624:	4b7d      	ldr	r3, [pc, #500]	; (800081c <menu+0x254>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <menu+0x6a>
			menuSayac = 16;
 800062c:	4b79      	ldr	r3, [pc, #484]	; (8000814 <menu+0x24c>)
 800062e:	2210      	movs	r2, #16
 8000630:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000632:	4b78      	ldr	r3, [pc, #480]	; (8000814 <menu+0x24c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b0d      	cmp	r3, #13
 8000638:	d106      	bne.n	8000648 <menu+0x80>
 800063a:	4b78      	ldr	r3, [pc, #480]	; (800081c <menu+0x254>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d102      	bne.n	8000648 <menu+0x80>
			menuSayac = 16;
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <menu+0x24c>)
 8000644:	2210      	movs	r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000648:	4b72      	ldr	r3, [pc, #456]	; (8000814 <menu+0x24c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b09      	cmp	r3, #9
 800064e:	d106      	bne.n	800065e <menu+0x96>
 8000650:	4b72      	ldr	r3, [pc, #456]	; (800081c <menu+0x254>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d102      	bne.n	800065e <menu+0x96>
			menuSayac = 13;
 8000658:	4b6e      	ldr	r3, [pc, #440]	; (8000814 <menu+0x24c>)
 800065a:	220d      	movs	r2, #13
 800065c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800065e:	4b6d      	ldr	r3, [pc, #436]	; (8000814 <menu+0x24c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b0a      	cmp	r3, #10
 8000664:	d10a      	bne.n	800067c <menu+0xb4>
 8000666:	4b6e      	ldr	r3, [pc, #440]	; (8000820 <menu+0x258>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d003      	beq.n	8000676 <menu+0xae>
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <menu+0x258>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d102      	bne.n	800067c <menu+0xb4>
			menuSayac = 11;
 8000676:	4b67      	ldr	r3, [pc, #412]	; (8000814 <menu+0x24c>)
 8000678:	220b      	movs	r2, #11
 800067a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800067c:	4b65      	ldr	r3, [pc, #404]	; (8000814 <menu+0x24c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b0c      	cmp	r3, #12
 8000682:	d10e      	bne.n	80006a2 <menu+0xda>
 8000684:	4b67      	ldr	r3, [pc, #412]	; (8000824 <menu+0x25c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d003      	beq.n	8000694 <menu+0xcc>
 800068c:	4b65      	ldr	r3, [pc, #404]	; (8000824 <menu+0x25c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d106      	bne.n	80006a2 <menu+0xda>
 8000694:	4b61      	ldr	r3, [pc, #388]	; (800081c <menu+0x254>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d102      	bne.n	80006a2 <menu+0xda>
			menuSayac = 16;
 800069c:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <menu+0x24c>)
 800069e:	2210      	movs	r2, #16
 80006a0:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80006a2:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <menu+0x24c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b0c      	cmp	r3, #12
 80006a8:	d10e      	bne.n	80006c8 <menu+0x100>
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <menu+0x25c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d003      	beq.n	80006ba <menu+0xf2>
 80006b2:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <menu+0x25c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d106      	bne.n	80006c8 <menu+0x100>
 80006ba:	4b58      	ldr	r3, [pc, #352]	; (800081c <menu+0x254>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d102      	bne.n	80006c8 <menu+0x100>
			menuSayac = 13;
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <menu+0x24c>)
 80006c4:	220d      	movs	r2, #13
 80006c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <menu+0x24c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d106      	bne.n	80006de <menu+0x116>
 80006d0:	4b55      	ldr	r3, [pc, #340]	; (8000828 <menu+0x260>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d102      	bne.n	80006de <menu+0x116>
			menuSayac = 16;
 80006d8:	4b4e      	ldr	r3, [pc, #312]	; (8000814 <menu+0x24c>)
 80006da:	2210      	movs	r2, #16
 80006dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <menu+0x24c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b18      	cmp	r3, #24
 80006e4:	d106      	bne.n	80006f4 <menu+0x12c>
 80006e6:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <menu+0x250>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <menu+0x12c>
			menuSayac = 26;
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <menu+0x24c>)
 80006f0:	221a      	movs	r2, #26
 80006f2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006f4:	f7ff fecc 	bl	8000490 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80006f8:	2108      	movs	r1, #8
 80006fa:	484c      	ldr	r0, [pc, #304]	; (800082c <menu+0x264>)
 80006fc:	f007 fd50 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d175      	bne.n	80007f2 <menu+0x22a>
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <menu+0x248>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d06e      	beq.n	80007f2 <menu+0x22a>
		if (menuSayac <= 1) {
 8000714:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <menu+0x24c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d802      	bhi.n	8000722 <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <menu+0x24c>)
 800071e:	2220      	movs	r2, #32
 8000720:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000722:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <menu+0x24c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <menu+0x24c>)
 800072c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <menu+0x24c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b14      	cmp	r3, #20
 8000734:	d106      	bne.n	8000744 <menu+0x17c>
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <menu+0x250>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <menu+0x17c>
			menuSayac = 17;
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <menu+0x24c>)
 8000740:	2211      	movs	r2, #17
 8000742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <menu+0x24c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d106      	bne.n	800075a <menu+0x192>
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <menu+0x254>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <menu+0x192>
			menuSayac = 7;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <menu+0x24c>)
 8000756:	2207      	movs	r2, #7
 8000758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <menu+0x24c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b0f      	cmp	r3, #15
 8000760:	d106      	bne.n	8000770 <menu+0x1a8>
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <menu+0x254>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d102      	bne.n	8000770 <menu+0x1a8>
			menuSayac = 12;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <menu+0x24c>)
 800076c:	220c      	movs	r2, #12
 800076e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <menu+0x24c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b0c      	cmp	r3, #12
 8000776:	d106      	bne.n	8000786 <menu+0x1be>
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <menu+0x254>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d102      	bne.n	8000786 <menu+0x1be>
			menuSayac = 8;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <menu+0x24c>)
 8000782:	2208      	movs	r2, #8
 8000784:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <menu+0x24c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b0a      	cmp	r3, #10
 800078c:	d10a      	bne.n	80007a4 <menu+0x1dc>
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <menu+0x258>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d003      	beq.n	800079e <menu+0x1d6>
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <menu+0x258>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d102      	bne.n	80007a4 <menu+0x1dc>
			menuSayac = 9;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <menu+0x24c>)
 80007a0:	2209      	movs	r2, #9
 80007a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <menu+0x24c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b0c      	cmp	r3, #12
 80007aa:	d10a      	bne.n	80007c2 <menu+0x1fa>
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <menu+0x25c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d003      	beq.n	80007bc <menu+0x1f4>
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <menu+0x25c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d102      	bne.n	80007c2 <menu+0x1fa>
			menuSayac = 11;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <menu+0x24c>)
 80007be:	220b      	movs	r2, #11
 80007c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <menu+0x24c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d106      	bne.n	80007d8 <menu+0x210>
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <menu+0x260>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d102      	bne.n	80007d8 <menu+0x210>
			menuSayac = 14;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <menu+0x24c>)
 80007d4:	220e      	movs	r2, #14
 80007d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <menu+0x24c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b19      	cmp	r3, #25
 80007de:	d106      	bne.n	80007ee <menu+0x226>
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <menu+0x250>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <menu+0x226>
			menuSayac = 23;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <menu+0x24c>)
 80007ea:	2217      	movs	r2, #23
 80007ec:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80007ee:	f7ff fe4f 	bl	8000490 <bekle>
	}

	if (menuSayac == 0) {
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <menu+0x24c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d134      	bne.n	8000864 <menu+0x29c>
		if(dilSecim == 0) {
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <menu+0x268>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d122      	bne.n	8000848 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <menu+0x26c>)
 8000804:	2101      	movs	r1, #1
 8000806:	2001      	movs	r0, #1
 8000808:	e016      	b.n	8000838 <menu+0x270>
 800080a:	bf00      	nop
 800080c:	40010800 	.word	0x40010800
 8000810:	20000c7a 	.word	0x20000c7a
 8000814:	20000c4c 	.word	0x20000c4c
 8000818:	20000c5b 	.word	0x20000c5b
 800081c:	20000c54 	.word	0x20000c54
 8000820:	20000c55 	.word	0x20000c55
 8000824:	20000c56 	.word	0x20000c56
 8000828:	20000c57 	.word	0x20000c57
 800082c:	40011000 	.word	0x40011000
 8000830:	20000c6c 	.word	0x20000c6c
 8000834:	0800bec0 	.word	0x0800bec0
 8000838:	f7ff fdda 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800083c:	4a97      	ldr	r2, [pc, #604]	; (8000a9c <menu+0x4d4>)
 800083e:	2101      	movs	r1, #1
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fdd5 	bl	80003f0 <lcd_print>
 8000846:	e00d      	b.n	8000864 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000848:	4b95      	ldr	r3, [pc, #596]	; (8000aa0 <menu+0x4d8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d109      	bne.n	8000864 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000850:	4a94      	ldr	r2, [pc, #592]	; (8000aa4 <menu+0x4dc>)
 8000852:	2101      	movs	r1, #1
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fdcb 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800085a:	4a93      	ldr	r2, [pc, #588]	; (8000aa8 <menu+0x4e0>)
 800085c:	2101      	movs	r1, #1
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fdc6 	bl	80003f0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000864:	4b91      	ldr	r3, [pc, #580]	; (8000aac <menu+0x4e4>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	f040 8365 	bne.w	8000f38 <menu+0x970>
		if(dilSecim == 0) {
 800086e:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <menu+0x4d8>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d105      	bne.n	8000882 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000876:	4a8e      	ldr	r2, [pc, #568]	; (8000ab0 <menu+0x4e8>)
 8000878:	2101      	movs	r1, #1
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fdb8 	bl	80003f0 <lcd_print>
 8000880:	e008      	b.n	8000894 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000882:	4b87      	ldr	r3, [pc, #540]	; (8000aa0 <menu+0x4d8>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d104      	bne.n	8000894 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800088a:	4a8a      	ldr	r2, [pc, #552]	; (8000ab4 <menu+0x4ec>)
 800088c:	2101      	movs	r1, #1
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fdae 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000894:	4b88      	ldr	r3, [pc, #544]	; (8000ab8 <menu+0x4f0>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d134      	bne.n	8000906 <menu+0x33e>
			if(dilSecim == 0) {
 800089c:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <menu+0x4d8>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d116      	bne.n	80008d2 <menu+0x30a>
				lcd_print(2, 1, "1.Hata Kodu:");
 80008a4:	4a85      	ldr	r2, [pc, #532]	; (8000abc <menu+0x4f4>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fda1 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 80008ae:	4a84      	ldr	r2, [pc, #528]	; (8000ac0 <menu+0x4f8>)
 80008b0:	210e      	movs	r1, #14
 80008b2:	2002      	movs	r0, #2
 80008b4:	f7ff fd9c 	bl	80003f0 <lcd_print>
				itoa(hataKayit1, snum, 10);
 80008b8:	4b82      	ldr	r3, [pc, #520]	; (8000ac4 <menu+0x4fc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	220a      	movs	r2, #10
 80008be:	4982      	ldr	r1, [pc, #520]	; (8000ac8 <menu+0x500>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00b f9ad 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 80008c6:	4a80      	ldr	r2, [pc, #512]	; (8000ac8 <menu+0x500>)
 80008c8:	210d      	movs	r1, #13
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fd90 	bl	80003f0 <lcd_print>
 80008d0:	e019      	b.n	8000906 <menu+0x33e>
			} else if(dilSecim == 1) {
 80008d2:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <menu+0x4d8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d115      	bne.n	8000906 <menu+0x33e>
				lcd_print(2, 1, "1.Error Code:");
 80008da:	4a7c      	ldr	r2, [pc, #496]	; (8000acc <menu+0x504>)
 80008dc:	2101      	movs	r1, #1
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fd86 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 80008e4:	4a7a      	ldr	r2, [pc, #488]	; (8000ad0 <menu+0x508>)
 80008e6:	210f      	movs	r1, #15
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fd81 	bl	80003f0 <lcd_print>
				itoa(hataKayit1, snum, 10);
 80008ee:	4b75      	ldr	r3, [pc, #468]	; (8000ac4 <menu+0x4fc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	220a      	movs	r2, #10
 80008f4:	4974      	ldr	r1, [pc, #464]	; (8000ac8 <menu+0x500>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00b f992 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 80008fc:	4a72      	ldr	r2, [pc, #456]	; (8000ac8 <menu+0x500>)
 80008fe:	210e      	movs	r1, #14
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fd75 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 1) {
 8000906:	4b6c      	ldr	r3, [pc, #432]	; (8000ab8 <menu+0x4f0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d134      	bne.n	8000978 <menu+0x3b0>
			if(dilSecim == 0) {
 800090e:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <menu+0x4d8>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d116      	bne.n	8000944 <menu+0x37c>
				lcd_print(2, 1, "2.Hata Kodu:");
 8000916:	4a6f      	ldr	r2, [pc, #444]	; (8000ad4 <menu+0x50c>)
 8000918:	2101      	movs	r1, #1
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fd68 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000920:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <menu+0x4f8>)
 8000922:	210e      	movs	r1, #14
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fd63 	bl	80003f0 <lcd_print>
				itoa(hataKayit2, snum, 10);
 800092a:	4b6b      	ldr	r3, [pc, #428]	; (8000ad8 <menu+0x510>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	220a      	movs	r2, #10
 8000930:	4965      	ldr	r1, [pc, #404]	; (8000ac8 <menu+0x500>)
 8000932:	4618      	mov	r0, r3
 8000934:	f00b f974 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000938:	4a63      	ldr	r2, [pc, #396]	; (8000ac8 <menu+0x500>)
 800093a:	210d      	movs	r1, #13
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fd57 	bl	80003f0 <lcd_print>
 8000942:	e019      	b.n	8000978 <menu+0x3b0>
			} else if(dilSecim == 1) {
 8000944:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <menu+0x4d8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d115      	bne.n	8000978 <menu+0x3b0>
				lcd_print(2, 1, "2.Error Code:");
 800094c:	4a63      	ldr	r2, [pc, #396]	; (8000adc <menu+0x514>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fd4d 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000956:	4a5e      	ldr	r2, [pc, #376]	; (8000ad0 <menu+0x508>)
 8000958:	210f      	movs	r1, #15
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff fd48 	bl	80003f0 <lcd_print>
				itoa(hataKayit2, snum, 10);
 8000960:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <menu+0x510>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	220a      	movs	r2, #10
 8000966:	4958      	ldr	r1, [pc, #352]	; (8000ac8 <menu+0x500>)
 8000968:	4618      	mov	r0, r3
 800096a:	f00b f959 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 800096e:	4a56      	ldr	r2, [pc, #344]	; (8000ac8 <menu+0x500>)
 8000970:	210e      	movs	r1, #14
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fd3c 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 2){
 8000978:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <menu+0x4f0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d134      	bne.n	80009ea <menu+0x422>
			if(dilSecim == 0) {
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <menu+0x4d8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d116      	bne.n	80009b6 <menu+0x3ee>
				lcd_print(2, 1, "3.Hata Kodu:");
 8000988:	4a55      	ldr	r2, [pc, #340]	; (8000ae0 <menu+0x518>)
 800098a:	2101      	movs	r1, #1
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff fd2f 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <menu+0x4f8>)
 8000994:	210e      	movs	r1, #14
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fd2a 	bl	80003f0 <lcd_print>
				itoa(hataKayit3, snum, 10);
 800099c:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <menu+0x51c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	220a      	movs	r2, #10
 80009a2:	4949      	ldr	r1, [pc, #292]	; (8000ac8 <menu+0x500>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00b f93b 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 80009aa:	4a47      	ldr	r2, [pc, #284]	; (8000ac8 <menu+0x500>)
 80009ac:	210d      	movs	r1, #13
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fd1e 	bl	80003f0 <lcd_print>
 80009b4:	e019      	b.n	80009ea <menu+0x422>
			} else if(dilSecim == 1) {
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <menu+0x4d8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d115      	bne.n	80009ea <menu+0x422>
				lcd_print(2, 1, "3.Error Code:");
 80009be:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <menu+0x520>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fd14 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 80009c8:	4a41      	ldr	r2, [pc, #260]	; (8000ad0 <menu+0x508>)
 80009ca:	210f      	movs	r1, #15
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff fd0f 	bl	80003f0 <lcd_print>
				itoa(hataKayit3, snum, 10);
 80009d2:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <menu+0x51c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	220a      	movs	r2, #10
 80009d8:	493b      	ldr	r1, [pc, #236]	; (8000ac8 <menu+0x500>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f00b f920 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 80009e0:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <menu+0x500>)
 80009e2:	210e      	movs	r1, #14
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff fd03 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 3) {
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <menu+0x4f0>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d134      	bne.n	8000a5c <menu+0x494>
			if(dilSecim == 0) {
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <menu+0x4d8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d116      	bne.n	8000a28 <menu+0x460>
				lcd_print(2, 1, "4.Hata Kodu:");
 80009fa:	4a3c      	ldr	r2, [pc, #240]	; (8000aec <menu+0x524>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff fcf6 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000a04:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <menu+0x4f8>)
 8000a06:	210e      	movs	r1, #14
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fcf1 	bl	80003f0 <lcd_print>
				itoa(hataKayit4, snum, 10);
 8000a0e:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <menu+0x528>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	220a      	movs	r2, #10
 8000a14:	492c      	ldr	r1, [pc, #176]	; (8000ac8 <menu+0x500>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00b f902 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <menu+0x500>)
 8000a1e:	210d      	movs	r1, #13
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff fce5 	bl	80003f0 <lcd_print>
 8000a26:	e019      	b.n	8000a5c <menu+0x494>
			} else if(dilSecim == 1) {
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <menu+0x4d8>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d115      	bne.n	8000a5c <menu+0x494>
				lcd_print(2, 1, "4.Error Code:");
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <menu+0x52c>)
 8000a32:	2101      	movs	r1, #1
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fcdb 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000a3a:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <menu+0x508>)
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff fcd6 	bl	80003f0 <lcd_print>
				itoa(hataKayit4, snum, 10);
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <menu+0x528>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	220a      	movs	r2, #10
 8000a4a:	491f      	ldr	r1, [pc, #124]	; (8000ac8 <menu+0x500>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00b f8e7 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000a52:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <menu+0x500>)
 8000a54:	210e      	movs	r1, #14
 8000a56:	2002      	movs	r0, #2
 8000a58:	f7ff fcca 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 4) {
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <menu+0x4f0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d167      	bne.n	8000b34 <menu+0x56c>
			if(dilSecim == 0) {
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <menu+0x4d8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d149      	bne.n	8000b00 <menu+0x538>
				lcd_print(2, 1, "5.Hata Kodu:");
 8000a6c:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <menu+0x530>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff fcbd 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <menu+0x4f8>)
 8000a78:	210e      	movs	r1, #14
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fcb8 	bl	80003f0 <lcd_print>
				itoa(hataKayit5, snum, 10);
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <menu+0x534>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	220a      	movs	r2, #10
 8000a86:	4910      	ldr	r1, [pc, #64]	; (8000ac8 <menu+0x500>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00b f8c9 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <menu+0x500>)
 8000a90:	210d      	movs	r1, #13
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fcac 	bl	80003f0 <lcd_print>
 8000a98:	e04c      	b.n	8000b34 <menu+0x56c>
 8000a9a:	bf00      	nop
 8000a9c:	0800bed4 	.word	0x0800bed4
 8000aa0:	20000c6c 	.word	0x20000c6c
 8000aa4:	0800bee8 	.word	0x0800bee8
 8000aa8:	0800befc 	.word	0x0800befc
 8000aac:	20000c4c 	.word	0x20000c4c
 8000ab0:	0800bf10 	.word	0x0800bf10
 8000ab4:	0800bf24 	.word	0x0800bf24
 8000ab8:	20000c4e 	.word	0x20000c4e
 8000abc:	0800bf38 	.word	0x0800bf38
 8000ac0:	0800bf48 	.word	0x0800bf48
 8000ac4:	20000c6d 	.word	0x20000c6d
 8000ac8:	20000c24 	.word	0x20000c24
 8000acc:	0800bf4c 	.word	0x0800bf4c
 8000ad0:	0800bf5c 	.word	0x0800bf5c
 8000ad4:	0800bf60 	.word	0x0800bf60
 8000ad8:	20000c6e 	.word	0x20000c6e
 8000adc:	0800bf70 	.word	0x0800bf70
 8000ae0:	0800bf80 	.word	0x0800bf80
 8000ae4:	20000c6f 	.word	0x20000c6f
 8000ae8:	0800bf90 	.word	0x0800bf90
 8000aec:	0800bfa0 	.word	0x0800bfa0
 8000af0:	20000c70 	.word	0x20000c70
 8000af4:	0800bfb0 	.word	0x0800bfb0
 8000af8:	0800bfc0 	.word	0x0800bfc0
 8000afc:	20000c71 	.word	0x20000c71
			} else if(dilSecim == 1) {
 8000b00:	4ba2      	ldr	r3, [pc, #648]	; (8000d8c <menu+0x7c4>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d115      	bne.n	8000b34 <menu+0x56c>
				lcd_print(2, 1, "5.Error Code:");
 8000b08:	4aa1      	ldr	r2, [pc, #644]	; (8000d90 <menu+0x7c8>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fc6f 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000b12:	4aa0      	ldr	r2, [pc, #640]	; (8000d94 <menu+0x7cc>)
 8000b14:	210f      	movs	r1, #15
 8000b16:	2002      	movs	r0, #2
 8000b18:	f7ff fc6a 	bl	80003f0 <lcd_print>
				itoa(hataKayit5, snum, 10);
 8000b1c:	4b9e      	ldr	r3, [pc, #632]	; (8000d98 <menu+0x7d0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	220a      	movs	r2, #10
 8000b22:	499e      	ldr	r1, [pc, #632]	; (8000d9c <menu+0x7d4>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00b f87b 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000b2a:	4a9c      	ldr	r2, [pc, #624]	; (8000d9c <menu+0x7d4>)
 8000b2c:	210e      	movs	r1, #14
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff fc5e 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 5) {
 8000b34:	4b9a      	ldr	r3, [pc, #616]	; (8000da0 <menu+0x7d8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b05      	cmp	r3, #5
 8000b3a:	d134      	bne.n	8000ba6 <menu+0x5de>
			if(dilSecim == 0) {
 8000b3c:	4b93      	ldr	r3, [pc, #588]	; (8000d8c <menu+0x7c4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d116      	bne.n	8000b72 <menu+0x5aa>
				lcd_print(2, 1, "6.Hata Kodu:");
 8000b44:	4a97      	ldr	r2, [pc, #604]	; (8000da4 <menu+0x7dc>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fc51 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000b4e:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <menu+0x7e0>)
 8000b50:	210e      	movs	r1, #14
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fc4c 	bl	80003f0 <lcd_print>
				itoa(hataKayit6, snum, 10);
 8000b58:	4b94      	ldr	r3, [pc, #592]	; (8000dac <menu+0x7e4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	498f      	ldr	r1, [pc, #572]	; (8000d9c <menu+0x7d4>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00b f85d 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000b66:	4a8d      	ldr	r2, [pc, #564]	; (8000d9c <menu+0x7d4>)
 8000b68:	210d      	movs	r1, #13
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f7ff fc40 	bl	80003f0 <lcd_print>
 8000b70:	e019      	b.n	8000ba6 <menu+0x5de>
			} else if(dilSecim == 1) {
 8000b72:	4b86      	ldr	r3, [pc, #536]	; (8000d8c <menu+0x7c4>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d115      	bne.n	8000ba6 <menu+0x5de>
				lcd_print(2, 1, "6.Error Code:");
 8000b7a:	4a8d      	ldr	r2, [pc, #564]	; (8000db0 <menu+0x7e8>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f7ff fc36 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000b84:	4a83      	ldr	r2, [pc, #524]	; (8000d94 <menu+0x7cc>)
 8000b86:	210f      	movs	r1, #15
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fc31 	bl	80003f0 <lcd_print>
				itoa(hataKayit6, snum, 10);
 8000b8e:	4b87      	ldr	r3, [pc, #540]	; (8000dac <menu+0x7e4>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	220a      	movs	r2, #10
 8000b94:	4981      	ldr	r1, [pc, #516]	; (8000d9c <menu+0x7d4>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00b f842 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000b9c:	4a7f      	ldr	r2, [pc, #508]	; (8000d9c <menu+0x7d4>)
 8000b9e:	210e      	movs	r1, #14
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fc25 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 6) {
 8000ba6:	4b7e      	ldr	r3, [pc, #504]	; (8000da0 <menu+0x7d8>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d134      	bne.n	8000c18 <menu+0x650>
			if(dilSecim == 0) {
 8000bae:	4b77      	ldr	r3, [pc, #476]	; (8000d8c <menu+0x7c4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <menu+0x61c>
				lcd_print(2, 1, "7.Hata Kodu:");
 8000bb6:	4a7f      	ldr	r2, [pc, #508]	; (8000db4 <menu+0x7ec>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fc18 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000bc0:	4a79      	ldr	r2, [pc, #484]	; (8000da8 <menu+0x7e0>)
 8000bc2:	210e      	movs	r1, #14
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fc13 	bl	80003f0 <lcd_print>
				itoa(hataKayit7, snum, 10);
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <menu+0x7f0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	220a      	movs	r2, #10
 8000bd0:	4972      	ldr	r1, [pc, #456]	; (8000d9c <menu+0x7d4>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f00b f824 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000bd8:	4a70      	ldr	r2, [pc, #448]	; (8000d9c <menu+0x7d4>)
 8000bda:	210d      	movs	r1, #13
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff fc07 	bl	80003f0 <lcd_print>
 8000be2:	e019      	b.n	8000c18 <menu+0x650>
			} else if(dilSecim == 1) {
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <menu+0x7c4>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d115      	bne.n	8000c18 <menu+0x650>
				lcd_print(2, 1, "7.Error Code:");
 8000bec:	4a73      	ldr	r2, [pc, #460]	; (8000dbc <menu+0x7f4>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fbfd 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000bf6:	4a67      	ldr	r2, [pc, #412]	; (8000d94 <menu+0x7cc>)
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff fbf8 	bl	80003f0 <lcd_print>
				itoa(hataKayit7, snum, 10);
 8000c00:	4b6d      	ldr	r3, [pc, #436]	; (8000db8 <menu+0x7f0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	220a      	movs	r2, #10
 8000c06:	4965      	ldr	r1, [pc, #404]	; (8000d9c <menu+0x7d4>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00b f809 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000c0e:	4a63      	ldr	r2, [pc, #396]	; (8000d9c <menu+0x7d4>)
 8000c10:	210e      	movs	r1, #14
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fbec 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 7) {
 8000c18:	4b61      	ldr	r3, [pc, #388]	; (8000da0 <menu+0x7d8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b07      	cmp	r3, #7
 8000c1e:	d134      	bne.n	8000c8a <menu+0x6c2>
			if(dilSecim == 0) {
 8000c20:	4b5a      	ldr	r3, [pc, #360]	; (8000d8c <menu+0x7c4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d116      	bne.n	8000c56 <menu+0x68e>
				lcd_print(2, 1, "8.Hata Kodu:");
 8000c28:	4a65      	ldr	r2, [pc, #404]	; (8000dc0 <menu+0x7f8>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fbdf 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000c32:	4a5d      	ldr	r2, [pc, #372]	; (8000da8 <menu+0x7e0>)
 8000c34:	210e      	movs	r1, #14
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fbda 	bl	80003f0 <lcd_print>
				itoa(hataKayit8, snum, 10);
 8000c3c:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <menu+0x7fc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	220a      	movs	r2, #10
 8000c42:	4956      	ldr	r1, [pc, #344]	; (8000d9c <menu+0x7d4>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a ffeb 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000c4a:	4a54      	ldr	r2, [pc, #336]	; (8000d9c <menu+0x7d4>)
 8000c4c:	210d      	movs	r1, #13
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fbce 	bl	80003f0 <lcd_print>
 8000c54:	e019      	b.n	8000c8a <menu+0x6c2>
			} else if(dilSecim == 1) {
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <menu+0x7c4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d115      	bne.n	8000c8a <menu+0x6c2>
				lcd_print(2, 1, "8.Error Code:");
 8000c5e:	4a5a      	ldr	r2, [pc, #360]	; (8000dc8 <menu+0x800>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff fbc4 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000c68:	4a4a      	ldr	r2, [pc, #296]	; (8000d94 <menu+0x7cc>)
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fbbf 	bl	80003f0 <lcd_print>
				itoa(hataKayit8, snum, 10);
 8000c72:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <menu+0x7fc>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	220a      	movs	r2, #10
 8000c78:	4948      	ldr	r1, [pc, #288]	; (8000d9c <menu+0x7d4>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00a ffd0 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <menu+0x7d4>)
 8000c82:	210e      	movs	r1, #14
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fbb3 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 8) {
 8000c8a:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <menu+0x7d8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d134      	bne.n	8000cfc <menu+0x734>
			if(dilSecim == 0) {
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <menu+0x7c4>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d116      	bne.n	8000cc8 <menu+0x700>
				lcd_print(2, 1, "9.Hata Kodu:");
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <menu+0x804>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff fba6 	bl	80003f0 <lcd_print>
				lcd_print(2,14,"   ");
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <menu+0x7e0>)
 8000ca6:	210e      	movs	r1, #14
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f7ff fba1 	bl	80003f0 <lcd_print>
				itoa(hataKayit9, snum, 10);
 8000cae:	4b48      	ldr	r3, [pc, #288]	; (8000dd0 <menu+0x808>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	4939      	ldr	r1, [pc, #228]	; (8000d9c <menu+0x7d4>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a ffb2 	bl	800bc20 <itoa>
				lcd_print(2,13,snum);
 8000cbc:	4a37      	ldr	r2, [pc, #220]	; (8000d9c <menu+0x7d4>)
 8000cbe:	210d      	movs	r1, #13
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fb95 	bl	80003f0 <lcd_print>
 8000cc6:	e019      	b.n	8000cfc <menu+0x734>
			} else if(dilSecim == 1) {
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <menu+0x7c4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d115      	bne.n	8000cfc <menu+0x734>
				lcd_print(2, 1, "9.Error Code:");
 8000cd0:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <menu+0x80c>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fb8b 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000cda:	4a2e      	ldr	r2, [pc, #184]	; (8000d94 <menu+0x7cc>)
 8000cdc:	210f      	movs	r1, #15
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f7ff fb86 	bl	80003f0 <lcd_print>
				itoa(hataKayit9, snum, 10);
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <menu+0x808>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	220a      	movs	r2, #10
 8000cea:	492c      	ldr	r1, [pc, #176]	; (8000d9c <menu+0x7d4>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00a ff97 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	; (8000d9c <menu+0x7d4>)
 8000cf4:	210e      	movs	r1, #14
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fb7a 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 9) {
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <menu+0x7d8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b09      	cmp	r3, #9
 8000d02:	d134      	bne.n	8000d6e <menu+0x7a6>
			if(dilSecim == 0) {
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <menu+0x7c4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d116      	bne.n	8000d3a <menu+0x772>
				lcd_print(2, 1, "10.Hata Kodu:");
 8000d0c:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <menu+0x810>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fb6d 	bl	80003f0 <lcd_print>
				lcd_print(2,15,"  ");
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <menu+0x7cc>)
 8000d18:	210f      	movs	r1, #15
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff fb68 	bl	80003f0 <lcd_print>
				itoa(hataKayit1, snum, 10);
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <menu+0x814>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	220a      	movs	r2, #10
 8000d26:	491d      	ldr	r1, [pc, #116]	; (8000d9c <menu+0x7d4>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f00a ff79 	bl	800bc20 <itoa>
				lcd_print(2,14,snum);
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <menu+0x7d4>)
 8000d30:	210e      	movs	r1, #14
 8000d32:	2002      	movs	r0, #2
 8000d34:	f7ff fb5c 	bl	80003f0 <lcd_print>
 8000d38:	e019      	b.n	8000d6e <menu+0x7a6>
			} else if(dilSecim == 1) {
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <menu+0x7c4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d115      	bne.n	8000d6e <menu+0x7a6>
				lcd_print(2, 1, "10.Error Code:");
 8000d42:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <menu+0x818>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fb52 	bl	80003f0 <lcd_print>
				lcd_print(2,16," ");
 8000d4c:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <menu+0x81c>)
 8000d4e:	2110      	movs	r1, #16
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff fb4d 	bl	80003f0 <lcd_print>
				itoa(hataKayit1, snum, 10);
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <menu+0x814>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	490f      	ldr	r1, [pc, #60]	; (8000d9c <menu+0x7d4>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00a ff5e 	bl	800bc20 <itoa>
				lcd_print(2,15,snum);
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <menu+0x7d4>)
 8000d66:	210f      	movs	r1, #15
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fb41 	bl	80003f0 <lcd_print>
			}
		}

		if(hataGostermeSirasi == 10) {
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <menu+0x7d8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	d143      	bne.n	8000dfe <menu+0x836>
			if(dilSecim == 0) {
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <menu+0x7c4>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d136      	bne.n	8000dec <menu+0x824>
				lcd_print(2, 1, "Silmek icin ent.");
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <menu+0x820>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff fb34 	bl	80003f0 <lcd_print>
 8000d88:	e039      	b.n	8000dfe <menu+0x836>
 8000d8a:	bf00      	nop
 8000d8c:	20000c6c 	.word	0x20000c6c
 8000d90:	0800bfd0 	.word	0x0800bfd0
 8000d94:	0800bf5c 	.word	0x0800bf5c
 8000d98:	20000c71 	.word	0x20000c71
 8000d9c:	20000c24 	.word	0x20000c24
 8000da0:	20000c4e 	.word	0x20000c4e
 8000da4:	0800bfe0 	.word	0x0800bfe0
 8000da8:	0800bf48 	.word	0x0800bf48
 8000dac:	20000c72 	.word	0x20000c72
 8000db0:	0800bff0 	.word	0x0800bff0
 8000db4:	0800c000 	.word	0x0800c000
 8000db8:	20000c73 	.word	0x20000c73
 8000dbc:	0800c010 	.word	0x0800c010
 8000dc0:	0800c020 	.word	0x0800c020
 8000dc4:	20000c74 	.word	0x20000c74
 8000dc8:	0800c030 	.word	0x0800c030
 8000dcc:	0800c040 	.word	0x0800c040
 8000dd0:	20000c75 	.word	0x20000c75
 8000dd4:	0800c050 	.word	0x0800c050
 8000dd8:	0800c060 	.word	0x0800c060
 8000ddc:	20000c6d 	.word	0x20000c6d
 8000de0:	0800c070 	.word	0x0800c070
 8000de4:	0800c080 	.word	0x0800c080
 8000de8:	0800c084 	.word	0x0800c084
			} else if(dilSecim == 1) {
 8000dec:	4b82      	ldr	r3, [pc, #520]	; (8000ff8 <menu+0xa30>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d104      	bne.n	8000dfe <menu+0x836>
				lcd_print(2, 1, "Del. press enter");
 8000df4:	4a81      	ldr	r2, [pc, #516]	; (8000ffc <menu+0xa34>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f7ff faf9 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000dfe:	2102      	movs	r1, #2
 8000e00:	487f      	ldr	r0, [pc, #508]	; (8001000 <menu+0xa38>)
 8000e02:	f007 f9cd 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d119      	bne.n	8000e40 <menu+0x878>
 8000e0c:	4b7d      	ldr	r3, [pc, #500]	; (8001004 <menu+0xa3c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	f083 0301 	eor.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d012      	beq.n	8000e40 <menu+0x878>
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <menu+0xa40>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10e      	bne.n	8000e40 <menu+0x878>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000e22:	4b7a      	ldr	r3, [pc, #488]	; (800100c <menu+0xa44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b78      	ldr	r3, [pc, #480]	; (800100c <menu+0xa44>)
 8000e2c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000e2e:	4b77      	ldr	r3, [pc, #476]	; (800100c <menu+0xa44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	d902      	bls.n	8000e3c <menu+0x874>
				hataGostermeSirasi = 0;
 8000e36:	4b75      	ldr	r3, [pc, #468]	; (800100c <menu+0xa44>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000e3c:	f7ff fb28 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e40:	2104      	movs	r1, #4
 8000e42:	486f      	ldr	r0, [pc, #444]	; (8001000 <menu+0xa38>)
 8000e44:	f007 f9ac 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d119      	bne.n	8000e82 <menu+0x8ba>
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <menu+0xa3c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	f083 0301 	eor.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d012      	beq.n	8000e82 <menu+0x8ba>
 8000e5c:	4b6a      	ldr	r3, [pc, #424]	; (8001008 <menu+0xa40>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10e      	bne.n	8000e82 <menu+0x8ba>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000e64:	4b69      	ldr	r3, [pc, #420]	; (800100c <menu+0xa44>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b67      	ldr	r3, [pc, #412]	; (800100c <menu+0xa44>)
 8000e6e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000e70:	4b66      	ldr	r3, [pc, #408]	; (800100c <menu+0xa44>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b0b      	cmp	r3, #11
 8000e76:	d902      	bls.n	8000e7e <menu+0x8b6>
	    		hataGostermeSirasi = 10;
 8000e78:	4b64      	ldr	r3, [pc, #400]	; (800100c <menu+0xa44>)
 8000e7a:	220a      	movs	r2, #10
 8000e7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000e7e:	f7ff fb07 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000e82:	2108      	movs	r1, #8
 8000e84:	485e      	ldr	r0, [pc, #376]	; (8001000 <menu+0xa38>)
 8000e86:	f007 f98b 	bl	80081a0 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d153      	bne.n	8000f38 <menu+0x970>
 8000e90:	4b5c      	ldr	r3, [pc, #368]	; (8001004 <menu+0xa3c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d04c      	beq.n	8000f38 <menu+0x970>
 8000e9e:	4b5b      	ldr	r3, [pc, #364]	; (800100c <menu+0xa44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d148      	bne.n	8000f38 <menu+0x970>
			hataKayit1 = 0; eepromData[37] = 0;
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <menu+0xa48>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	4b59      	ldr	r3, [pc, #356]	; (8001014 <menu+0xa4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <menu+0xa50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	4b56      	ldr	r3, [pc, #344]	; (8001014 <menu+0xa4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <menu+0xa54>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <menu+0xa4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000ed0:	4b53      	ldr	r3, [pc, #332]	; (8001020 <menu+0xa58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <menu+0xa4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <menu+0xa5c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <menu+0xa4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000eec:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <menu+0xa60>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <menu+0xa4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <menu+0xa64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <menu+0xa4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <menu+0xa68>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <menu+0xa4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <menu+0xa6c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <menu+0xa4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000f24:	4b44      	ldr	r3, [pc, #272]	; (8001038 <menu+0xa70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <menu+0xa4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <menu+0xa74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <menu+0xa78>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	f040 80fc 	bne.w	800113a <menu+0xb72>
		if(dilSecim == 0) {
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <menu+0xa30>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <menu+0x98e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000f4a:	4a3e      	ldr	r2, [pc, #248]	; (8001044 <menu+0xa7c>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fa4e 	bl	80003f0 <lcd_print>
 8000f54:	e008      	b.n	8000f68 <menu+0x9a0>
		} else if(dilSecim == 1) {
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <menu+0xa30>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d104      	bne.n	8000f68 <menu+0x9a0>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <menu+0xa80>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fa44 	bl	80003f0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <menu+0xa40>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d003      	beq.n	8000f78 <menu+0x9b0>
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <menu+0xa40>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d112      	bne.n	8000f9e <menu+0x9d6>
			if(dilSecim == 0) {
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <menu+0xa30>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d105      	bne.n	8000f8c <menu+0x9c4>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <menu+0xa84>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff fa33 	bl	80003f0 <lcd_print>
 8000f8a:	e008      	b.n	8000f9e <menu+0x9d6>
			} else if(dilSecim == 1) {
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <menu+0xa30>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d104      	bne.n	8000f9e <menu+0x9d6>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <menu+0xa88>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fa29 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <menu+0xa8c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <menu+0xa0c>
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <menu+0xa40>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d112      	bne.n	8000fd4 <menu+0xa0c>
			if(dilSecim == 0) {
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <menu+0xa30>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <menu+0x9fa>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000fb6:	4a28      	ldr	r2, [pc, #160]	; (8001058 <menu+0xa90>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fa18 	bl	80003f0 <lcd_print>
 8000fc0:	e008      	b.n	8000fd4 <menu+0xa0c>
			} else if(dilSecim == 1) {
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <menu+0xa30>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d104      	bne.n	8000fd4 <menu+0xa0c>
				lcd_print(2, 1, "Deadman Control");
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <menu+0xa94>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff fa0e 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <menu+0xa8c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d14c      	bne.n	8001076 <menu+0xaae>
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <menu+0xa40>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d148      	bne.n	8001076 <menu+0xaae>
			if(dilSecim == 0) {
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <menu+0xa30>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d13b      	bne.n	8001064 <menu+0xa9c>
				lcd_print(2, 1, "Bas gonder     ");
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <menu+0xa98>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff f9fd 	bl	80003f0 <lcd_print>
 8000ff6:	e03e      	b.n	8001076 <menu+0xaae>
 8000ff8:	20000c6c 	.word	0x20000c6c
 8000ffc:	0800c098 	.word	0x0800c098
 8001000:	40010800 	.word	0x40010800
 8001004:	20000c7a 	.word	0x20000c7a
 8001008:	20000c5b 	.word	0x20000c5b
 800100c:	20000c4e 	.word	0x20000c4e
 8001010:	20000c6d 	.word	0x20000c6d
 8001014:	20000be4 	.word	0x20000be4
 8001018:	20000c6e 	.word	0x20000c6e
 800101c:	20000c6f 	.word	0x20000c6f
 8001020:	20000c70 	.word	0x20000c70
 8001024:	20000c71 	.word	0x20000c71
 8001028:	20000c72 	.word	0x20000c72
 800102c:	20000c73 	.word	0x20000c73
 8001030:	20000c74 	.word	0x20000c74
 8001034:	20000c75 	.word	0x20000c75
 8001038:	20000c76 	.word	0x20000c76
 800103c:	20000c77 	.word	0x20000c77
 8001040:	20000c4c 	.word	0x20000c4c
 8001044:	0800c0ac 	.word	0x0800c0ac
 8001048:	0800c0c0 	.word	0x0800c0c0
 800104c:	0800c0d4 	.word	0x0800c0d4
 8001050:	0800c0e8 	.word	0x0800c0e8
 8001054:	20000c4d 	.word	0x20000c4d
 8001058:	0800c0fc 	.word	0x0800c0fc
 800105c:	0800c10c 	.word	0x0800c10c
 8001060:	0800c11c 	.word	0x0800c11c
			} else if(dilSecim == 1) {
 8001064:	4b98      	ldr	r3, [pc, #608]	; (80012c8 <menu+0xd00>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <menu+0xaae>
				lcd_print(2, 1, "Call & Send    ");
 800106c:	4a97      	ldr	r2, [pc, #604]	; (80012cc <menu+0xd04>)
 800106e:	2101      	movs	r1, #1
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff f9bd 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001076:	2102      	movs	r1, #2
 8001078:	4895      	ldr	r0, [pc, #596]	; (80012d0 <menu+0xd08>)
 800107a:	f007 f891 	bl	80081a0 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d119      	bne.n	80010b8 <menu+0xaf0>
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <menu+0xd0c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <menu+0xaf0>
 8001092:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <menu+0xd10>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10e      	bne.n	80010b8 <menu+0xaf0>
			calismaSekli = calismaSekli + 1;
 800109a:	4b90      	ldr	r3, [pc, #576]	; (80012dc <menu+0xd14>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b8e      	ldr	r3, [pc, #568]	; (80012dc <menu+0xd14>)
 80010a4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80010a6:	4b8d      	ldr	r3, [pc, #564]	; (80012dc <menu+0xd14>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d902      	bls.n	80010b4 <menu+0xaec>
				calismaSekli = 0;
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <menu+0xd14>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80010b4:	f7ff f9ec 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80010b8:	2104      	movs	r1, #4
 80010ba:	4885      	ldr	r0, [pc, #532]	; (80012d0 <menu+0xd08>)
 80010bc:	f007 f870 	bl	80081a0 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d119      	bne.n	80010fa <menu+0xb32>
 80010c6:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <menu+0xd0c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f083 0301 	eor.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d012      	beq.n	80010fa <menu+0xb32>
 80010d4:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <menu+0xd10>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10e      	bne.n	80010fa <menu+0xb32>
			calismaSekli = calismaSekli - 1;
 80010dc:	4b7f      	ldr	r3, [pc, #508]	; (80012dc <menu+0xd14>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b7d      	ldr	r3, [pc, #500]	; (80012dc <menu+0xd14>)
 80010e6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <menu+0xd14>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <menu+0xb2e>
	    		calismaSekli = 1;
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <menu+0xd14>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80010f6:	f7ff f9cb 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80010fa:	2108      	movs	r1, #8
 80010fc:	4874      	ldr	r0, [pc, #464]	; (80012d0 <menu+0xd08>)
 80010fe:	f007 f84f 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d118      	bne.n	800113a <menu+0xb72>
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <menu+0xd0c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d011      	beq.n	800113a <menu+0xb72>
			eepromData[1] = calismaSekli;
 8001116:	4b71      	ldr	r3, [pc, #452]	; (80012dc <menu+0xd14>)
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	4b71      	ldr	r3, [pc, #452]	; (80012e0 <menu+0xd18>)
 800111c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <menu+0xd14>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d106      	bne.n	8001134 <menu+0xb6c>
				altLimit = 1;
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <menu+0xd1c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800112c:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <menu+0xd1c>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <menu+0xd18>)
 8001132:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz=1;
 8001134:	4b6c      	ldr	r3, [pc, #432]	; (80012e8 <menu+0xd20>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800113a:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <menu+0xd24>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b03      	cmp	r3, #3
 8001140:	f040 8083 	bne.w	800124a <menu+0xc82>
		if(dilSecim == 0) {
 8001144:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <menu+0xd00>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <menu+0xb90>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800114c:	4a68      	ldr	r2, [pc, #416]	; (80012f0 <menu+0xd28>)
 800114e:	2101      	movs	r1, #1
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff f94d 	bl	80003f0 <lcd_print>
 8001156:	e008      	b.n	800116a <menu+0xba2>
		} else if(dilSecim == 1) {
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <menu+0xd00>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d104      	bne.n	800116a <menu+0xba2>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001160:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <menu+0xd2c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff f943 	bl	80003f0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <menu+0xd30>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d113      	bne.n	800119a <menu+0xbd2>
			if(dilSecim == 0) {
 8001172:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <menu+0xd00>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <menu+0xbbe>
				lcd_print(2, 1, "Pasif           ");
 800117a:	4a60      	ldr	r2, [pc, #384]	; (80012fc <menu+0xd34>)
 800117c:	2101      	movs	r1, #1
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff f936 	bl	80003f0 <lcd_print>
 8001184:	e012      	b.n	80011ac <menu+0xbe4>
			} else if(dilSecim == 1) {
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <menu+0xd00>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10e      	bne.n	80011ac <menu+0xbe4>
				lcd_print(2, 1, "Passive         ");
 800118e:	4a5c      	ldr	r2, [pc, #368]	; (8001300 <menu+0xd38>)
 8001190:	2101      	movs	r1, #1
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff f92c 	bl	80003f0 <lcd_print>
 8001198:	e008      	b.n	80011ac <menu+0xbe4>
			}
		} else if(emniyetCercevesi == 1) {
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <menu+0xd30>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d104      	bne.n	80011ac <menu+0xbe4>
			lcd_print(2, 1, "OND Safety     ");
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <menu+0xd3c>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff f922 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80011ac:	2102      	movs	r1, #2
 80011ae:	4848      	ldr	r0, [pc, #288]	; (80012d0 <menu+0xd08>)
 80011b0:	f006 fff6 	bl	80081a0 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d115      	bne.n	80011e6 <menu+0xc1e>
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <menu+0xd0c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00e      	beq.n	80011e6 <menu+0xc1e>
			emniyetCercevesi = emniyetCercevesi + 1;
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <menu+0xd30>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <menu+0xd30>)
 80011d2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <menu+0xd30>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d902      	bls.n	80011e2 <menu+0xc1a>
				emniyetCercevesi = 0;
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <menu+0xd30>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011e2:	f7ff f955 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80011e6:	2104      	movs	r1, #4
 80011e8:	4839      	ldr	r0, [pc, #228]	; (80012d0 <menu+0xd08>)
 80011ea:	f006 ffd9 	bl	80081a0 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d115      	bne.n	8001220 <menu+0xc58>
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <menu+0xd0c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00e      	beq.n	8001220 <menu+0xc58>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <menu+0xd30>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <menu+0xd30>)
 800120c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <menu+0xd30>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <menu+0xc54>
		   		emniyetCercevesi = 1;
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <menu+0xd30>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800121c:	f7ff f938 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001220:	2108      	movs	r1, #8
 8001222:	482b      	ldr	r0, [pc, #172]	; (80012d0 <menu+0xd08>)
 8001224:	f006 ffbc 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <menu+0xc82>
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <menu+0xd0c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <menu+0xc82>
			eepromData[2] = emniyetCercevesi;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <menu+0xd30>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <menu+0xd18>)
 8001242:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <menu+0xd20>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <menu+0xd24>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b04      	cmp	r3, #4
 8001250:	f040 80ba 	bne.w	80013c8 <menu+0xe00>
		if(dilSecim == 0) {
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <menu+0xd00>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <menu+0xca0>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800125c:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <menu+0xd40>)
 800125e:	2101      	movs	r1, #1
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff f8c5 	bl	80003f0 <lcd_print>
 8001266:	e008      	b.n	800127a <menu+0xcb2>
		} else if(dilSecim == 1) {
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <menu+0xd00>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d104      	bne.n	800127a <menu+0xcb2>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <menu+0xd44>)
 8001272:	2101      	movs	r1, #1
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff f8bb 	bl	80003f0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <menu+0xd48>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d113      	bne.n	80012aa <menu+0xce2>
			if(dilSecim == 0) {
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <menu+0xd00>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <menu+0xcce>
				lcd_print(2, 1, "Pasif           ");
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <menu+0xd34>)
 800128c:	2101      	movs	r1, #1
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff f8ae 	bl	80003f0 <lcd_print>
 8001294:	e049      	b.n	800132a <menu+0xd62>
			} else if(dilSecim == 1) {
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <menu+0xd00>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d145      	bne.n	800132a <menu+0xd62>
				lcd_print(2, 1, "Passive         ");
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <menu+0xd38>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff f8a4 	bl	80003f0 <lcd_print>
 80012a8:	e03f      	b.n	800132a <menu+0xd62>
			}
		} else if(yavaslamaLimit == 1) {
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <menu+0xd48>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d13b      	bne.n	800132a <menu+0xd62>
			if(dilSecim == 0) {
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <menu+0xd00>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d12e      	bne.n	8001318 <menu+0xd50>
				lcd_print(2, 1, "Aktif           ");
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <menu+0xd4c>)
 80012bc:	2101      	movs	r1, #1
 80012be:	2002      	movs	r0, #2
 80012c0:	f7ff f896 	bl	80003f0 <lcd_print>
 80012c4:	e031      	b.n	800132a <menu+0xd62>
 80012c6:	bf00      	nop
 80012c8:	20000c6c 	.word	0x20000c6c
 80012cc:	0800c12c 	.word	0x0800c12c
 80012d0:	40010800 	.word	0x40010800
 80012d4:	20000c7a 	.word	0x20000c7a
 80012d8:	20000c5b 	.word	0x20000c5b
 80012dc:	20000c4d 	.word	0x20000c4d
 80012e0:	20000be4 	.word	0x20000be4
 80012e4:	20000c52 	.word	0x20000c52
 80012e8:	20000c77 	.word	0x20000c77
 80012ec:	20000c4c 	.word	0x20000c4c
 80012f0:	0800c13c 	.word	0x0800c13c
 80012f4:	0800c150 	.word	0x0800c150
 80012f8:	20000c50 	.word	0x20000c50
 80012fc:	0800c164 	.word	0x0800c164
 8001300:	0800c178 	.word	0x0800c178
 8001304:	0800c18c 	.word	0x0800c18c
 8001308:	0800c19c 	.word	0x0800c19c
 800130c:	0800c1b0 	.word	0x0800c1b0
 8001310:	20000c51 	.word	0x20000c51
 8001314:	0800c1c4 	.word	0x0800c1c4
			} else if(dilSecim == 1) {
 8001318:	4b92      	ldr	r3, [pc, #584]	; (8001564 <menu+0xf9c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d104      	bne.n	800132a <menu+0xd62>
				lcd_print(2, 1, "Active          ");
 8001320:	4a91      	ldr	r2, [pc, #580]	; (8001568 <menu+0xfa0>)
 8001322:	2101      	movs	r1, #1
 8001324:	2002      	movs	r0, #2
 8001326:	f7ff f863 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800132a:	2102      	movs	r1, #2
 800132c:	488f      	ldr	r0, [pc, #572]	; (800156c <menu+0xfa4>)
 800132e:	f006 ff37 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d115      	bne.n	8001364 <menu+0xd9c>
 8001338:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <menu+0xfa8>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f083 0301 	eor.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00e      	beq.n	8001364 <menu+0xd9c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001346:	4b8b      	ldr	r3, [pc, #556]	; (8001574 <menu+0xfac>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b89      	ldr	r3, [pc, #548]	; (8001574 <menu+0xfac>)
 8001350:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <menu+0xfac>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d902      	bls.n	8001360 <menu+0xd98>
				yavaslamaLimit = 0;
 800135a:	4b86      	ldr	r3, [pc, #536]	; (8001574 <menu+0xfac>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001360:	f7ff f896 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001364:	2104      	movs	r1, #4
 8001366:	4881      	ldr	r0, [pc, #516]	; (800156c <menu+0xfa4>)
 8001368:	f006 ff1a 	bl	80081a0 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d115      	bne.n	800139e <menu+0xdd6>
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <menu+0xfa8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <menu+0xdd6>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001380:	4b7c      	ldr	r3, [pc, #496]	; (8001574 <menu+0xfac>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <menu+0xfac>)
 800138a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800138c:	4b79      	ldr	r3, [pc, #484]	; (8001574 <menu+0xfac>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <menu+0xdd2>
		   		yavaslamaLimit = 1;
 8001394:	4b77      	ldr	r3, [pc, #476]	; (8001574 <menu+0xfac>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800139a:	f7ff f879 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800139e:	2108      	movs	r1, #8
 80013a0:	4872      	ldr	r0, [pc, #456]	; (800156c <menu+0xfa4>)
 80013a2:	f006 fefd 	bl	80081a0 <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10d      	bne.n	80013c8 <menu+0xe00>
 80013ac:	4b70      	ldr	r3, [pc, #448]	; (8001570 <menu+0xfa8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f083 0301 	eor.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <menu+0xe00>
			eepromData[4] = yavaslamaLimit;
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <menu+0xfac>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b6e      	ldr	r3, [pc, #440]	; (8001578 <menu+0xfb0>)
 80013c0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80013c2:	4b6e      	ldr	r3, [pc, #440]	; (800157c <menu+0xfb4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80013c8:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <menu+0xfb8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	f040 80b9 	bne.w	8001544 <menu+0xf7c>
		if(dilSecim == 0) {
 80013d2:	4b64      	ldr	r3, [pc, #400]	; (8001564 <menu+0xf9c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <menu+0xe1e>
			lcd_print(1, 1, "ALT LIMIT       ");
 80013da:	4a6a      	ldr	r2, [pc, #424]	; (8001584 <menu+0xfbc>)
 80013dc:	2101      	movs	r1, #1
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff f806 	bl	80003f0 <lcd_print>
 80013e4:	e008      	b.n	80013f8 <menu+0xe30>
		} else if(dilSecim == 1) {
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <menu+0xf9c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d104      	bne.n	80013f8 <menu+0xe30>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80013ee:	4a66      	ldr	r2, [pc, #408]	; (8001588 <menu+0xfc0>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7fe fffc 	bl	80003f0 <lcd_print>
		}

		if(altLimit == 0) {
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <menu+0xfc4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d113      	bne.n	8001428 <menu+0xe60>
			if(dilSecim == 0) {
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <menu+0xf9c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <menu+0xe4c>
				lcd_print(2, 1, "Pasif           ");
 8001408:	4a61      	ldr	r2, [pc, #388]	; (8001590 <menu+0xfc8>)
 800140a:	2101      	movs	r1, #1
 800140c:	2002      	movs	r0, #2
 800140e:	f7fe ffef 	bl	80003f0 <lcd_print>
 8001412:	e020      	b.n	8001456 <menu+0xe8e>
			} else if(dilSecim == 1) {
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <menu+0xf9c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d11c      	bne.n	8001456 <menu+0xe8e>
				lcd_print(2, 1, "Passive         ");
 800141c:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <menu+0xfcc>)
 800141e:	2101      	movs	r1, #1
 8001420:	2002      	movs	r0, #2
 8001422:	f7fe ffe5 	bl	80003f0 <lcd_print>
 8001426:	e016      	b.n	8001456 <menu+0xe8e>
			}
		} else if(altLimit == 1) {
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <menu+0xfc4>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d112      	bne.n	8001456 <menu+0xe8e>
			if(dilSecim == 0){
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <menu+0xf9c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <menu+0xe7c>
				lcd_print(2, 1, "Aktif           ");
 8001438:	4a57      	ldr	r2, [pc, #348]	; (8001598 <menu+0xfd0>)
 800143a:	2101      	movs	r1, #1
 800143c:	2002      	movs	r0, #2
 800143e:	f7fe ffd7 	bl	80003f0 <lcd_print>
 8001442:	e008      	b.n	8001456 <menu+0xe8e>
			} else if(dilSecim == 1){
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <menu+0xf9c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d104      	bne.n	8001456 <menu+0xe8e>
				lcd_print(2, 1, "Active          ");
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <menu+0xfa0>)
 800144e:	2101      	movs	r1, #1
 8001450:	2002      	movs	r0, #2
 8001452:	f7fe ffcd 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001456:	2102      	movs	r1, #2
 8001458:	4844      	ldr	r0, [pc, #272]	; (800156c <menu+0xfa4>)
 800145a:	f006 fea1 	bl	80081a0 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d119      	bne.n	8001498 <menu+0xed0>
 8001464:	4b42      	ldr	r3, [pc, #264]	; (8001570 <menu+0xfa8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d012      	beq.n	8001498 <menu+0xed0>
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <menu+0xfd4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10e      	bne.n	8001498 <menu+0xed0>
			altLimit = altLimit + 1;
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <menu+0xfc4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <menu+0xfc4>)
 8001484:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <menu+0xfc4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d902      	bls.n	8001494 <menu+0xecc>
				altLimit = 0;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <menu+0xfc4>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001494:	f7fe fffc 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001498:	2104      	movs	r1, #4
 800149a:	4834      	ldr	r0, [pc, #208]	; (800156c <menu+0xfa4>)
 800149c:	f006 fe80 	bl	80081a0 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d119      	bne.n	80014da <menu+0xf12>
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <menu+0xfa8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d012      	beq.n	80014da <menu+0xf12>
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <menu+0xfd4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10e      	bne.n	80014da <menu+0xf12>
			altLimit = altLimit - 1;
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <menu+0xfc4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b31      	ldr	r3, [pc, #196]	; (800158c <menu+0xfc4>)
 80014c6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <menu+0xfc4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <menu+0xf0e>
		   		altLimit = 1;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <menu+0xfc4>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014d6:	f7fe ffdb 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014da:	2108      	movs	r1, #8
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <menu+0xfa4>)
 80014de:	f006 fe5f 	bl	80081a0 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d12d      	bne.n	8001544 <menu+0xf7c>
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <menu+0xfa8>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d026      	beq.n	8001544 <menu+0xf7c>
			eepromData[5] = altLimit;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <menu+0xfc4>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <menu+0xfb0>)
 80014fc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <menu+0xfc4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d110      	bne.n	8001528 <menu+0xf60>
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <menu+0xfd8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <menu+0xf4e>
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <menu+0xfd8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d108      	bne.n	8001528 <menu+0xf60>
				kapiTablaAcKonum = 3;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <menu+0xfd8>)
 8001518:	2203      	movs	r2, #3
 800151a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <menu+0xfd8>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <menu+0xfb0>)
 8001522:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001526:	e00a      	b.n	800153e <menu+0xf76>
			} else if(altLimit == 0) {
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <menu+0xfc4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <menu+0xf76>
				platformSilindirTipi = 0;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <menu+0xfdc>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <menu+0xfdc>)
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <menu+0xfb0>)
 800153c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz=1;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <menu+0xfb4>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <menu+0xfb8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b06      	cmp	r3, #6
 800154a:	f040 80b6 	bne.w	80016ba <menu+0x10f2>
		if(dilSecim == 0) {
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <menu+0xf9c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <menu+0xfe4>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <menu+0xfe0>)
 8001558:	2101      	movs	r1, #1
 800155a:	2001      	movs	r0, #1
 800155c:	f7fe ff48 	bl	80003f0 <lcd_print>
 8001560:	e02d      	b.n	80015be <menu+0xff6>
 8001562:	bf00      	nop
 8001564:	20000c6c 	.word	0x20000c6c
 8001568:	0800c1d8 	.word	0x0800c1d8
 800156c:	40010800 	.word	0x40010800
 8001570:	20000c7a 	.word	0x20000c7a
 8001574:	20000c51 	.word	0x20000c51
 8001578:	20000be4 	.word	0x20000be4
 800157c:	20000c77 	.word	0x20000c77
 8001580:	20000c4c 	.word	0x20000c4c
 8001584:	0800c1ec 	.word	0x0800c1ec
 8001588:	0800c200 	.word	0x0800c200
 800158c:	20000c52 	.word	0x20000c52
 8001590:	0800c164 	.word	0x0800c164
 8001594:	0800c178 	.word	0x0800c178
 8001598:	0800c1c4 	.word	0x0800c1c4
 800159c:	20000c4d 	.word	0x20000c4d
 80015a0:	20000c59 	.word	0x20000c59
 80015a4:	20000c5f 	.word	0x20000c5f
 80015a8:	0800c214 	.word	0x0800c214
		} else if(dilSecim == 1){
 80015ac:	4b7a      	ldr	r3, [pc, #488]	; (8001798 <menu+0x11d0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d104      	bne.n	80015be <menu+0xff6>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80015b4:	4a79      	ldr	r2, [pc, #484]	; (800179c <menu+0x11d4>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7fe ff19 	bl	80003f0 <lcd_print>
		}
		if(basincSalteri == 0){
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <menu+0x11d8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <menu+0x1026>
			if(dilSecim == 0) {
 80015c6:	4b74      	ldr	r3, [pc, #464]	; (8001798 <menu+0x11d0>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <menu+0x1012>
				lcd_print(2, 1, "Pasif           ");
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <menu+0x11dc>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7fe ff0c 	bl	80003f0 <lcd_print>
 80015d8:	e020      	b.n	800161c <menu+0x1054>
			} else if(dilSecim == 1){
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <menu+0x11d0>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d11c      	bne.n	800161c <menu+0x1054>
				lcd_print(2, 1, "Passive         ");
 80015e2:	4a71      	ldr	r2, [pc, #452]	; (80017a8 <menu+0x11e0>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7fe ff02 	bl	80003f0 <lcd_print>
 80015ec:	e016      	b.n	800161c <menu+0x1054>
			}
		} else if(basincSalteri == 1) {
 80015ee:	4b6c      	ldr	r3, [pc, #432]	; (80017a0 <menu+0x11d8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d112      	bne.n	800161c <menu+0x1054>
			if(dilSecim == 0) {
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <menu+0x11d0>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <menu+0x1042>
				lcd_print(2, 1, "Aktif           ");
 80015fe:	4a6b      	ldr	r2, [pc, #428]	; (80017ac <menu+0x11e4>)
 8001600:	2101      	movs	r1, #1
 8001602:	2002      	movs	r0, #2
 8001604:	f7fe fef4 	bl	80003f0 <lcd_print>
 8001608:	e008      	b.n	800161c <menu+0x1054>
			} else if(dilSecim == 1) {
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <menu+0x11d0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d104      	bne.n	800161c <menu+0x1054>
				lcd_print(2, 1, "Active          ");
 8001612:	4a67      	ldr	r2, [pc, #412]	; (80017b0 <menu+0x11e8>)
 8001614:	2101      	movs	r1, #1
 8001616:	2002      	movs	r0, #2
 8001618:	f7fe feea 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800161c:	2102      	movs	r1, #2
 800161e:	4865      	ldr	r0, [pc, #404]	; (80017b4 <menu+0x11ec>)
 8001620:	f006 fdbe 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d115      	bne.n	8001656 <menu+0x108e>
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <menu+0x11f0>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00e      	beq.n	8001656 <menu+0x108e>
			basincSalteri = basincSalteri + 1;
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <menu+0x11d8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <menu+0x11d8>)
 8001642:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <menu+0x11d8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d902      	bls.n	8001652 <menu+0x108a>
				basincSalteri = 0;
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <menu+0x11d8>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001652:	f7fe ff1d 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001656:	2104      	movs	r1, #4
 8001658:	4856      	ldr	r0, [pc, #344]	; (80017b4 <menu+0x11ec>)
 800165a:	f006 fda1 	bl	80081a0 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b01      	cmp	r3, #1
 8001662:	d115      	bne.n	8001690 <menu+0x10c8>
 8001664:	4b54      	ldr	r3, [pc, #336]	; (80017b8 <menu+0x11f0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00e      	beq.n	8001690 <menu+0x10c8>
			basincSalteri = basincSalteri - 1;
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <menu+0x11d8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <menu+0x11d8>)
 800167c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <menu+0x11d8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <menu+0x10c4>
		   		basincSalteri = 1;
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <menu+0x11d8>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800168c:	f7fe ff00 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001690:	2108      	movs	r1, #8
 8001692:	4848      	ldr	r0, [pc, #288]	; (80017b4 <menu+0x11ec>)
 8001694:	f006 fd84 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10d      	bne.n	80016ba <menu+0x10f2>
 800169e:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <menu+0x11f0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <menu+0x10f2>
			eepromData[6] = basincSalteri;
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <menu+0x11d8>)
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <menu+0x11f4>)
 80016b2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <menu+0x11f8>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <menu+0x11fc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	f040 80f5 	bne.w	80018ae <menu+0x12e6>
		if(dilSecim == 0) {
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <menu+0x11d0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <menu+0x1110>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80016cc:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <menu+0x1200>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7fe fe8d 	bl	80003f0 <lcd_print>
 80016d6:	e008      	b.n	80016ea <menu+0x1122>
		} else if(dilSecim == 1){
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <menu+0x11d0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d104      	bne.n	80016ea <menu+0x1122>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80016e0:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <menu+0x1204>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7fe fe83 	bl	80003f0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <menu+0x1208>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d113      	bne.n	800171a <menu+0x1152>
			if(dilSecim == 0) {
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <menu+0x11d0>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <menu+0x113e>
				lcd_print(2, 1, "Pasif           ");
 80016fa:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <menu+0x11dc>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	2002      	movs	r0, #2
 8001700:	f7fe fe76 	bl	80003f0 <lcd_print>
 8001704:	e079      	b.n	80017fa <menu+0x1232>
			} else if(dilSecim == 1){
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <menu+0x11d0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d175      	bne.n	80017fa <menu+0x1232>
				lcd_print(2, 1, "Passive         ");
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <menu+0x11e0>)
 8001710:	2101      	movs	r1, #1
 8001712:	2002      	movs	r0, #2
 8001714:	f7fe fe6c 	bl	80003f0 <lcd_print>
 8001718:	e06f      	b.n	80017fa <menu+0x1232>
			}
		} else if(kapiSecimleri == 1) {
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <menu+0x1208>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d113      	bne.n	800174a <menu+0x1182>
			if(dilSecim == 0) {
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <menu+0x11d0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <menu+0x116e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <menu+0x120c>)
 800172c:	2101      	movs	r1, #1
 800172e:	2002      	movs	r0, #2
 8001730:	f7fe fe5e 	bl	80003f0 <lcd_print>
 8001734:	e061      	b.n	80017fa <menu+0x1232>
			} else if(dilSecim == 1) {
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <menu+0x11d0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d15d      	bne.n	80017fa <menu+0x1232>
				lcd_print(2, 1, "Floor door act  ");
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <menu+0x1210>)
 8001740:	2101      	movs	r1, #1
 8001742:	2002      	movs	r0, #2
 8001744:	f7fe fe54 	bl	80003f0 <lcd_print>
 8001748:	e057      	b.n	80017fa <menu+0x1232>
			}
		} else if(kapiSecimleri == 2){
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <menu+0x1208>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d113      	bne.n	800177a <menu+0x11b2>
			if(dilSecim == 0) {
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <menu+0x11d0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <menu+0x119e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <menu+0x1214>)
 800175c:	2101      	movs	r1, #1
 800175e:	2002      	movs	r0, #2
 8001760:	f7fe fe46 	bl	80003f0 <lcd_print>
 8001764:	e049      	b.n	80017fa <menu+0x1232>
			} else if(dilSecim == 1) {
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <menu+0x11d0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d145      	bne.n	80017fa <menu+0x1232>
				lcd_print(2, 1, "Pltfrm door act ");
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <menu+0x1218>)
 8001770:	2101      	movs	r1, #1
 8001772:	2002      	movs	r0, #2
 8001774:	f7fe fe3c 	bl	80003f0 <lcd_print>
 8001778:	e03f      	b.n	80017fa <menu+0x1232>
			}
		} else if(kapiSecimleri == 3){
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <menu+0x1208>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d13b      	bne.n	80017fa <menu+0x1232>
			if(dilSecim == 0) {
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <menu+0x11d0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d12e      	bne.n	80017e8 <menu+0x1220>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <menu+0x121c>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f7fe fe2e 	bl	80003f0 <lcd_print>
 8001794:	e031      	b.n	80017fa <menu+0x1232>
 8001796:	bf00      	nop
 8001798:	20000c6c 	.word	0x20000c6c
 800179c:	0800c224 	.word	0x0800c224
 80017a0:	20000c53 	.word	0x20000c53
 80017a4:	0800c164 	.word	0x0800c164
 80017a8:	0800c178 	.word	0x0800c178
 80017ac:	0800c1c4 	.word	0x0800c1c4
 80017b0:	0800c1d8 	.word	0x0800c1d8
 80017b4:	40010800 	.word	0x40010800
 80017b8:	20000c7a 	.word	0x20000c7a
 80017bc:	20000be4 	.word	0x20000be4
 80017c0:	20000c77 	.word	0x20000c77
 80017c4:	20000c4c 	.word	0x20000c4c
 80017c8:	0800c234 	.word	0x0800c234
 80017cc:	0800c248 	.word	0x0800c248
 80017d0:	20000c54 	.word	0x20000c54
 80017d4:	0800c25c 	.word	0x0800c25c
 80017d8:	0800c270 	.word	0x0800c270
 80017dc:	0800c284 	.word	0x0800c284
 80017e0:	0800c298 	.word	0x0800c298
 80017e4:	0800c2ac 	.word	0x0800c2ac
			} else if(dilSecim == 1){
 80017e8:	4b99      	ldr	r3, [pc, #612]	; (8001a50 <menu+0x1488>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d104      	bne.n	80017fa <menu+0x1232>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80017f0:	4a98      	ldr	r2, [pc, #608]	; (8001a54 <menu+0x148c>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	2002      	movs	r0, #2
 80017f6:	f7fe fdfb 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017fa:	2102      	movs	r1, #2
 80017fc:	4896      	ldr	r0, [pc, #600]	; (8001a58 <menu+0x1490>)
 80017fe:	f006 fccf 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d115      	bne.n	8001834 <menu+0x126c>
 8001808:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <menu+0x1494>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <menu+0x126c>
			kapiSecimleri = kapiSecimleri + 1;
 8001816:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <menu+0x1498>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b90      	ldr	r3, [pc, #576]	; (8001a60 <menu+0x1498>)
 8001820:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001822:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <menu+0x1498>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d902      	bls.n	8001830 <menu+0x1268>
				kapiSecimleri = 0;
 800182a:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <menu+0x1498>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001830:	f7fe fe2e 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001834:	2104      	movs	r1, #4
 8001836:	4888      	ldr	r0, [pc, #544]	; (8001a58 <menu+0x1490>)
 8001838:	f006 fcb2 	bl	80081a0 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d115      	bne.n	800186e <menu+0x12a6>
 8001842:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <menu+0x1494>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <menu+0x12a6>
			kapiSecimleri = kapiSecimleri - 1;
 8001850:	4b83      	ldr	r3, [pc, #524]	; (8001a60 <menu+0x1498>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <menu+0x1498>)
 800185a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800185c:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <menu+0x1498>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d902      	bls.n	800186a <menu+0x12a2>
		   		kapiSecimleri = 3;
 8001864:	4b7e      	ldr	r3, [pc, #504]	; (8001a60 <menu+0x1498>)
 8001866:	2203      	movs	r2, #3
 8001868:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800186a:	f7fe fe11 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800186e:	2108      	movs	r1, #8
 8001870:	4879      	ldr	r0, [pc, #484]	; (8001a58 <menu+0x1490>)
 8001872:	f006 fc95 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d118      	bne.n	80018ae <menu+0x12e6>
 800187c:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <menu+0x1494>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d011      	beq.n	80018ae <menu+0x12e6>
			eepromData[7] = kapiSecimleri;
 800188a:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <menu+0x1498>)
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <menu+0x149c>)
 8001890:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001892:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <menu+0x1498>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <menu+0x12e0>
				altLimit = 1;
 800189a:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <menu+0x14a0>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80018a0:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <menu+0x14a0>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <menu+0x149c>)
 80018a6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80018a8:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <menu+0x14a4>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <menu+0x14a8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	f040 8092 	bne.w	80019dc <menu+0x1414>
		if(dilSecim == 0) {
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <menu+0x1488>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <menu+0x1304>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80018c0:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <menu+0x14ac>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7fe fd93 	bl	80003f0 <lcd_print>
 80018ca:	e008      	b.n	80018de <menu+0x1316>
		} else if(dilSecim == 1) {
 80018cc:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <menu+0x1488>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d104      	bne.n	80018de <menu+0x1316>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <menu+0x14b0>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2001      	movs	r0, #1
 80018da:	f7fe fd89 	bl	80003f0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <menu+0x14b4>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d113      	bne.n	800190e <menu+0x1346>
			if(dilSecim == 0) {
 80018e6:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <menu+0x1488>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <menu+0x1332>
				lcd_print(2, 1, "Kapi butonu ESP");
 80018ee:	4a64      	ldr	r2, [pc, #400]	; (8001a80 <menu+0x14b8>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7fe fd7c 	bl	80003f0 <lcd_print>
 80018f8:	e020      	b.n	800193c <menu+0x1374>
			} else if(dilSecim == 1) {
 80018fa:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <menu+0x1488>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d11c      	bne.n	800193c <menu+0x1374>
				lcd_print(2, 1, "Door Button ESP");
 8001902:	4a60      	ldr	r2, [pc, #384]	; (8001a84 <menu+0x14bc>)
 8001904:	2101      	movs	r1, #1
 8001906:	2002      	movs	r0, #2
 8001908:	f7fe fd72 	bl	80003f0 <lcd_print>
 800190c:	e016      	b.n	800193c <menu+0x1374>
			}
		} else if(kapiAcTipi == 1){
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <menu+0x14b4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d112      	bne.n	800193c <menu+0x1374>
			if(dilSecim == 0){
 8001916:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <menu+0x1488>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <menu+0x1362>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <menu+0x14c0>)
 8001920:	2101      	movs	r1, #1
 8001922:	2002      	movs	r0, #2
 8001924:	f7fe fd64 	bl	80003f0 <lcd_print>
 8001928:	e008      	b.n	800193c <menu+0x1374>
			} else if(dilSecim == 1){
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <menu+0x1488>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d104      	bne.n	800193c <menu+0x1374>
				lcd_print(2, 1, "Floor button EXT");
 8001932:	4a56      	ldr	r2, [pc, #344]	; (8001a8c <menu+0x14c4>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f7fe fd5a 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800193c:	2102      	movs	r1, #2
 800193e:	4846      	ldr	r0, [pc, #280]	; (8001a58 <menu+0x1490>)
 8001940:	f006 fc2e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	d115      	bne.n	8001976 <menu+0x13ae>
 800194a:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <menu+0x1494>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <menu+0x13ae>
			kapiAcTipi = kapiAcTipi + 1;
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <menu+0x14b4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <menu+0x14b4>)
 8001962:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <menu+0x14b4>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d902      	bls.n	8001972 <menu+0x13aa>
				kapiAcTipi = 0;
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <menu+0x14b4>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001972:	f7fe fd8d 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001976:	2104      	movs	r1, #4
 8001978:	4837      	ldr	r0, [pc, #220]	; (8001a58 <menu+0x1490>)
 800197a:	f006 fc11 	bl	80081a0 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d115      	bne.n	80019b0 <menu+0x13e8>
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <menu+0x1494>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <menu+0x13e8>
			kapiAcTipi = kapiAcTipi - 1;
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <menu+0x14b4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <menu+0x14b4>)
 800199c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <menu+0x14b4>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <menu+0x13e4>
		   		kapiAcTipi = 1;
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <menu+0x14b4>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80019ac:	f7fe fd70 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019b0:	2108      	movs	r1, #8
 80019b2:	4829      	ldr	r0, [pc, #164]	; (8001a58 <menu+0x1490>)
 80019b4:	f006 fbf4 	bl	80081a0 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <menu+0x1414>
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <menu+0x1494>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <menu+0x1414>
			eepromData[36] = kapiAcTipi;
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <menu+0x14b4>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <menu+0x149c>)
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <menu+0x14a4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <menu+0x14a8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	f040 80b9 	bne.w	8001b58 <menu+0x1590>
		if(dilSecim == 0){
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <menu+0x1488>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <menu+0x1432>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <menu+0x14c8>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7fe fcfc 	bl	80003f0 <lcd_print>
 80019f8:	e008      	b.n	8001a0c <menu+0x1444>
		} else if(dilSecim == 1) {
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <menu+0x1488>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d104      	bne.n	8001a0c <menu+0x1444>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <menu+0x14cc>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7fe fcf2 	bl	80003f0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <menu+0x14d0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <menu+0x1458>
			lcd_print(2, 1, "Prudhome        ");
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <menu+0x14d4>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7fe fce9 	bl	80003f0 <lcd_print>
 8001a1e:	e04c      	b.n	8001aba <menu+0x14f2>
		} else if(kapi1Tip == 1) {
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <menu+0x14d0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d13f      	bne.n	8001aa8 <menu+0x14e0>
			if(dilSecim == 0){
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <menu+0x1488>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <menu+0x1474>
				lcd_print(2, 1, "Buton kontrollu");
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <menu+0x14d8>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe fcdb 	bl	80003f0 <lcd_print>
 8001a3a:	e03e      	b.n	8001aba <menu+0x14f2>
			} else if(dilSecim == 1) {
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <menu+0x1488>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d13a      	bne.n	8001aba <menu+0x14f2>
				lcd_print(2, 1, "Button cntrolled");
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <menu+0x14dc>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fcd1 	bl	80003f0 <lcd_print>
 8001a4e:	e034      	b.n	8001aba <menu+0x14f2>
 8001a50:	20000c6c 	.word	0x20000c6c
 8001a54:	0800c2c0 	.word	0x0800c2c0
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	20000c7a 	.word	0x20000c7a
 8001a60:	20000c54 	.word	0x20000c54
 8001a64:	20000be4 	.word	0x20000be4
 8001a68:	20000c52 	.word	0x20000c52
 8001a6c:	20000c77 	.word	0x20000c77
 8001a70:	20000c4c 	.word	0x20000c4c
 8001a74:	0800c2d4 	.word	0x0800c2d4
 8001a78:	0800c2e8 	.word	0x0800c2e8
 8001a7c:	20000c58 	.word	0x20000c58
 8001a80:	0800c2fc 	.word	0x0800c2fc
 8001a84:	0800c30c 	.word	0x0800c30c
 8001a88:	0800c31c 	.word	0x0800c31c
 8001a8c:	0800c330 	.word	0x0800c330
 8001a90:	0800c344 	.word	0x0800c344
 8001a94:	0800c358 	.word	0x0800c358
 8001a98:	20000c55 	.word	0x20000c55
 8001a9c:	0800c36c 	.word	0x0800c36c
 8001aa0:	0800c380 	.word	0x0800c380
 8001aa4:	0800c390 	.word	0x0800c390
			}
		} else if(kapi1Tip == 2) {
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <menu+0x170c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d104      	bne.n	8001aba <menu+0x14f2>
			lcd_print(2, 1, "Pizzato        ");
 8001ab0:	4a89      	ldr	r2, [pc, #548]	; (8001cd8 <menu+0x1710>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7fe fc9b 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001aba:	2102      	movs	r1, #2
 8001abc:	4887      	ldr	r0, [pc, #540]	; (8001cdc <menu+0x1714>)
 8001abe:	f006 fb6f 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d115      	bne.n	8001af4 <menu+0x152c>
 8001ac8:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <menu+0x1718>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00e      	beq.n	8001af4 <menu+0x152c>
			kapi1Tip = kapi1Tip + 1;
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <menu+0x170c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b7d      	ldr	r3, [pc, #500]	; (8001cd4 <menu+0x170c>)
 8001ae0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <menu+0x170c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d902      	bls.n	8001af0 <menu+0x1528>
				kapi1Tip = 0;
 8001aea:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <menu+0x170c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001af0:	f7fe fcce 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001af4:	2104      	movs	r1, #4
 8001af6:	4879      	ldr	r0, [pc, #484]	; (8001cdc <menu+0x1714>)
 8001af8:	f006 fb52 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d115      	bne.n	8001b2e <menu+0x1566>
 8001b02:	4b77      	ldr	r3, [pc, #476]	; (8001ce0 <menu+0x1718>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f083 0301 	eor.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <menu+0x1566>
			kapi1Tip = kapi1Tip - 1;
 8001b10:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <menu+0x170c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <menu+0x170c>)
 8001b1a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001b1c:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <menu+0x170c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d902      	bls.n	8001b2a <menu+0x1562>
		   		kapi1Tip = 2;
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <menu+0x170c>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b2a:	f7fe fcb1 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b2e:	2108      	movs	r1, #8
 8001b30:	486a      	ldr	r0, [pc, #424]	; (8001cdc <menu+0x1714>)
 8001b32:	f006 fb35 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10d      	bne.n	8001b58 <menu+0x1590>
 8001b3c:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <menu+0x1718>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <menu+0x1590>
			eepromData[8] = kapi1Tip;
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <menu+0x170c>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <menu+0x171c>)
 8001b50:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <menu+0x1720>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <menu+0x1724>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b0a      	cmp	r3, #10
 8001b5e:	d17f      	bne.n	8001c60 <menu+0x1698>
		if(dilSecim == 0) {
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <menu+0x1728>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <menu+0x15b6>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001b68:	4a62      	ldr	r2, [pc, #392]	; (8001cf4 <menu+0x172c>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7fe fc3f 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001b72:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <menu+0x1730>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	2002      	movs	r0, #2
 8001b78:	f7fe fc3a 	bl	80003f0 <lcd_print>
 8001b7c:	e00d      	b.n	8001b9a <menu+0x15d2>
		} else if(dilSecim == 1) {
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <menu+0x1728>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d109      	bne.n	8001b9a <menu+0x15d2>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <menu+0x1734>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7fe fc30 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001b90:	4a5b      	ldr	r2, [pc, #364]	; (8001d00 <menu+0x1738>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7fe fc2b 	bl	80003f0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <menu+0x173c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	220a      	movs	r2, #10
 8001ba0:	4959      	ldr	r1, [pc, #356]	; (8001d08 <menu+0x1740>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00a f83c 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <menu+0x1740>)
 8001baa:	2110      	movs	r1, #16
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7fe fc1f 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4849      	ldr	r0, [pc, #292]	; (8001cdc <menu+0x1714>)
 8001bb6:	f006 faf3 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d119      	bne.n	8001bf4 <menu+0x162c>
 8001bc0:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <menu+0x1718>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <menu+0x162c>
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <menu+0x170c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10e      	bne.n	8001bf4 <menu+0x162c>
			kapi1AcSure = kapi1AcSure + 1;
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <menu+0x173c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <menu+0x173c>)
 8001be0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <menu+0x173c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d902      	bls.n	8001bf0 <menu+0x1628>
				kapi1AcSure = 0;
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <menu+0x173c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bf0:	f7fe fc4e 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4839      	ldr	r0, [pc, #228]	; (8001cdc <menu+0x1714>)
 8001bf8:	f006 fad2 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d119      	bne.n	8001c36 <menu+0x166e>
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <menu+0x1718>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d012      	beq.n	8001c36 <menu+0x166e>
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <menu+0x170c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10e      	bne.n	8001c36 <menu+0x166e>
			kapi1AcSure = kapi1AcSure - 1;
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <menu+0x173c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <menu+0x173c>)
 8001c22:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001c24:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <menu+0x173c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d902      	bls.n	8001c32 <menu+0x166a>
		   		kapi1AcSure = 5;
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <menu+0x173c>)
 8001c2e:	2205      	movs	r2, #5
 8001c30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c32:	f7fe fc2d 	bl	8000490 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c36:	2108      	movs	r1, #8
 8001c38:	4828      	ldr	r0, [pc, #160]	; (8001cdc <menu+0x1714>)
 8001c3a:	f006 fab1 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10d      	bne.n	8001c60 <menu+0x1698>
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <menu+0x1718>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <menu+0x1698>
			eepromData[9] = kapi1AcSure;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <menu+0x173c>)
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <menu+0x171c>)
 8001c58:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <menu+0x1720>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <menu+0x1724>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b0b      	cmp	r3, #11
 8001c66:	f040 80b5 	bne.w	8001dd4 <menu+0x180c>
		if(dilSecim == 0) {
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <menu+0x1728>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <menu+0x16b6>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <menu+0x1744>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7fe fbba 	bl	80003f0 <lcd_print>
 8001c7c:	e008      	b.n	8001c90 <menu+0x16c8>
		} else if(dilSecim == 1) {
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <menu+0x1728>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d104      	bne.n	8001c90 <menu+0x16c8>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001c86:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <menu+0x1748>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7fe fbb0 	bl	80003f0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <menu+0x174c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <menu+0x16dc>
			lcd_print(2, 1, "Prudhome        ");
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <menu+0x1750>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7fe fba7 	bl	80003f0 <lcd_print>
 8001ca2:	e048      	b.n	8001d36 <menu+0x176e>
		} else if(kapi2Tip == 1) {
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <menu+0x174c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d13b      	bne.n	8001d24 <menu+0x175c>
			if(dilSecim == 0) {
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <menu+0x1728>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <menu+0x16f8>
				lcd_print(2, 1, "Buton kontrollu");
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <menu+0x1754>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f7fe fb99 	bl	80003f0 <lcd_print>
 8001cbe:	e03a      	b.n	8001d36 <menu+0x176e>
			} else if(dilSecim == 1) {
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <menu+0x1728>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d136      	bne.n	8001d36 <menu+0x176e>
				lcd_print(2, 1, "Button cntrolled");
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <menu+0x1758>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7fe fb8f 	bl	80003f0 <lcd_print>
 8001cd2:	e030      	b.n	8001d36 <menu+0x176e>
 8001cd4:	20000c55 	.word	0x20000c55
 8001cd8:	0800c3a4 	.word	0x0800c3a4
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	20000c7a 	.word	0x20000c7a
 8001ce4:	20000be4 	.word	0x20000be4
 8001ce8:	20000c77 	.word	0x20000c77
 8001cec:	20000c4c 	.word	0x20000c4c
 8001cf0:	20000c6c 	.word	0x20000c6c
 8001cf4:	0800c3b4 	.word	0x0800c3b4
 8001cf8:	0800c3c8 	.word	0x0800c3c8
 8001cfc:	0800c3d8 	.word	0x0800c3d8
 8001d00:	0800c3ec 	.word	0x0800c3ec
 8001d04:	20000c65 	.word	0x20000c65
 8001d08:	20000c24 	.word	0x20000c24
 8001d0c:	0800c3fc 	.word	0x0800c3fc
 8001d10:	0800c410 	.word	0x0800c410
 8001d14:	20000c56 	.word	0x20000c56
 8001d18:	0800c36c 	.word	0x0800c36c
 8001d1c:	0800c380 	.word	0x0800c380
 8001d20:	0800c390 	.word	0x0800c390
			}
		} else if(kapi2Tip == 2) {
 8001d24:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <menu+0x1988>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d104      	bne.n	8001d36 <menu+0x176e>
			lcd_print(2, 1, "Pizzato        ");
 8001d2c:	4a89      	ldr	r2, [pc, #548]	; (8001f54 <menu+0x198c>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fb5d 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d36:	2102      	movs	r1, #2
 8001d38:	4887      	ldr	r0, [pc, #540]	; (8001f58 <menu+0x1990>)
 8001d3a:	f006 fa31 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d115      	bne.n	8001d70 <menu+0x17a8>
 8001d44:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <menu+0x1994>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00e      	beq.n	8001d70 <menu+0x17a8>
			kapi2Tip = kapi2Tip + 1;
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <menu+0x1988>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <menu+0x1988>)
 8001d5c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <menu+0x1988>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d902      	bls.n	8001d6c <menu+0x17a4>
				kapi2Tip = 0;
 8001d66:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <menu+0x1988>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d6c:	f7fe fb90 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d70:	2104      	movs	r1, #4
 8001d72:	4879      	ldr	r0, [pc, #484]	; (8001f58 <menu+0x1990>)
 8001d74:	f006 fa14 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d115      	bne.n	8001daa <menu+0x17e2>
 8001d7e:	4b77      	ldr	r3, [pc, #476]	; (8001f5c <menu+0x1994>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f083 0301 	eor.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <menu+0x17e2>
			kapi2Tip = kapi2Tip - 1;
 8001d8c:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <menu+0x1988>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <menu+0x1988>)
 8001d96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001d98:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <menu+0x1988>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d902      	bls.n	8001da6 <menu+0x17de>
		   		kapi2Tip = 2;
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <menu+0x1988>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001da6:	f7fe fb73 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001daa:	2108      	movs	r1, #8
 8001dac:	486a      	ldr	r0, [pc, #424]	; (8001f58 <menu+0x1990>)
 8001dae:	f006 f9f7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10d      	bne.n	8001dd4 <menu+0x180c>
 8001db8:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <menu+0x1994>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	f083 0301 	eor.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <menu+0x180c>
			eepromData[10] = kapi2Tip;
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <menu+0x1988>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <menu+0x1998>)
 8001dcc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <menu+0x199c>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <menu+0x19a0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d17f      	bne.n	8001edc <menu+0x1914>
		if(dilSecim == 0) {
 8001ddc:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <menu+0x19a4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <menu+0x1832>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001de4:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <menu+0x19a8>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7fe fb01 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001dee:	4a61      	ldr	r2, [pc, #388]	; (8001f74 <menu+0x19ac>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	2002      	movs	r0, #2
 8001df4:	f7fe fafc 	bl	80003f0 <lcd_print>
 8001df8:	e00d      	b.n	8001e16 <menu+0x184e>
		} else if(dilSecim == 1) {
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <menu+0x19a4>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d109      	bne.n	8001e16 <menu+0x184e>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001e02:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <menu+0x19b0>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7fe faf2 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001e0c:	4a5b      	ldr	r2, [pc, #364]	; (8001f7c <menu+0x19b4>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7fe faed 	bl	80003f0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001e16:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <menu+0x19b8>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	4959      	ldr	r1, [pc, #356]	; (8001f84 <menu+0x19bc>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f009 fefe 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 8001e24:	4a57      	ldr	r2, [pc, #348]	; (8001f84 <menu+0x19bc>)
 8001e26:	2110      	movs	r1, #16
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f7fe fae1 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4849      	ldr	r0, [pc, #292]	; (8001f58 <menu+0x1990>)
 8001e32:	f006 f9b5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d119      	bne.n	8001e70 <menu+0x18a8>
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <menu+0x1994>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <menu+0x18a8>
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <menu+0x1988>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <menu+0x18a8>
			kapi2AcSure = kapi2AcSure + 1;
 8001e52:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <menu+0x19b8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <menu+0x19b8>)
 8001e5c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001e5e:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <menu+0x19b8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d902      	bls.n	8001e6c <menu+0x18a4>
				kapi2AcSure = 0;
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <menu+0x19b8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6c:	f7fe fb10 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001e70:	2104      	movs	r1, #4
 8001e72:	4839      	ldr	r0, [pc, #228]	; (8001f58 <menu+0x1990>)
 8001e74:	f006 f994 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d119      	bne.n	8001eb2 <menu+0x18ea>
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <menu+0x1994>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <menu+0x18ea>
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <menu+0x1988>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10e      	bne.n	8001eb2 <menu+0x18ea>
			kapi2AcSure = kapi2AcSure - 1;
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <menu+0x19b8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <menu+0x19b8>)
 8001e9e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001ea0:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <menu+0x19b8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d902      	bls.n	8001eae <menu+0x18e6>
		   		kapi2AcSure = 5;
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <menu+0x19b8>)
 8001eaa:	2205      	movs	r2, #5
 8001eac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001eae:	f7fe faef 	bl	8000490 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <menu+0x1990>)
 8001eb6:	f006 f973 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10d      	bne.n	8001edc <menu+0x1914>
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <menu+0x1994>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <menu+0x1914>
			eepromData[11] = kapi2AcSure;
 8001ece:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <menu+0x19b8>)
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <menu+0x1998>)
 8001ed4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <menu+0x199c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <menu+0x19a0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b0d      	cmp	r3, #13
 8001ee2:	f040 80b5 	bne.w	8002050 <menu+0x1a88>
		if(dilSecim == 0) {
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <menu+0x19a4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <menu+0x1932>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <menu+0x19c0>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7fe fa7c 	bl	80003f0 <lcd_print>
 8001ef8:	e008      	b.n	8001f0c <menu+0x1944>
		} else if(dilSecim == 1){
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <menu+0x19a4>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d104      	bne.n	8001f0c <menu+0x1944>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001f02:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <menu+0x19c4>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7fe fa72 	bl	80003f0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <menu+0x19c8>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <menu+0x1958>
			lcd_print(2, 1, "Prudhome        ");
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <menu+0x19cc>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7fe fa69 	bl	80003f0 <lcd_print>
 8001f1e:	e048      	b.n	8001fb2 <menu+0x19ea>
		} else if(kapitablaTip == 1) {
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <menu+0x19c8>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d13b      	bne.n	8001fa0 <menu+0x19d8>
			if(dilSecim == 0) {
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <menu+0x19a4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <menu+0x1974>
				lcd_print(2, 1, "Buton kontrollu");
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <menu+0x19d0>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7fe fa5b 	bl	80003f0 <lcd_print>
 8001f3a:	e03a      	b.n	8001fb2 <menu+0x19ea>
			} else if(dilSecim == 1) {
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <menu+0x19a4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d136      	bne.n	8001fb2 <menu+0x19ea>
				lcd_print(2, 1, "Button cntrolled");
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <menu+0x19d4>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7fe fa51 	bl	80003f0 <lcd_print>
 8001f4e:	e030      	b.n	8001fb2 <menu+0x19ea>
 8001f50:	20000c56 	.word	0x20000c56
 8001f54:	0800c3a4 	.word	0x0800c3a4
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	20000c7a 	.word	0x20000c7a
 8001f60:	20000be4 	.word	0x20000be4
 8001f64:	20000c77 	.word	0x20000c77
 8001f68:	20000c4c 	.word	0x20000c4c
 8001f6c:	20000c6c 	.word	0x20000c6c
 8001f70:	0800c424 	.word	0x0800c424
 8001f74:	0800c3c8 	.word	0x0800c3c8
 8001f78:	0800c438 	.word	0x0800c438
 8001f7c:	0800c3ec 	.word	0x0800c3ec
 8001f80:	20000c66 	.word	0x20000c66
 8001f84:	20000c24 	.word	0x20000c24
 8001f88:	0800c44c 	.word	0x0800c44c
 8001f8c:	0800c460 	.word	0x0800c460
 8001f90:	20000c57 	.word	0x20000c57
 8001f94:	0800c36c 	.word	0x0800c36c
 8001f98:	0800c380 	.word	0x0800c380
 8001f9c:	0800c390 	.word	0x0800c390
			}
		} else if(kapitablaTip == 2) {
 8001fa0:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <menu+0x1b48>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d104      	bne.n	8001fb2 <menu+0x19ea>
			lcd_print(2, 1, "Pizzato        ");
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <menu+0x1b4c>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7fe fa1f 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4858      	ldr	r0, [pc, #352]	; (8002118 <menu+0x1b50>)
 8001fb6:	f006 f8f3 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <menu+0x1a24>
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <menu+0x1b54>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00e      	beq.n	8001fec <menu+0x1a24>
			kapitablaTip = kapitablaTip + 1;
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <menu+0x1b48>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <menu+0x1b48>)
 8001fd8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001fda:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <menu+0x1b48>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d902      	bls.n	8001fe8 <menu+0x1a20>
				kapitablaTip = 0;
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <menu+0x1b48>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe8:	f7fe fa52 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fec:	2104      	movs	r1, #4
 8001fee:	484a      	ldr	r0, [pc, #296]	; (8002118 <menu+0x1b50>)
 8001ff0:	f006 f8d6 	bl	80081a0 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d115      	bne.n	8002026 <menu+0x1a5e>
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <menu+0x1b54>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <menu+0x1a5e>
			kapitablaTip = kapitablaTip - 1;
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <menu+0x1b48>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <menu+0x1b48>)
 8002012:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <menu+0x1b48>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d902      	bls.n	8002022 <menu+0x1a5a>
		   		kapitablaTip = 2;
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <menu+0x1b48>)
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002022:	f7fe fa35 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2108      	movs	r1, #8
 8002028:	483b      	ldr	r0, [pc, #236]	; (8002118 <menu+0x1b50>)
 800202a:	f006 f8b9 	bl	80081a0 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10d      	bne.n	8002050 <menu+0x1a88>
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <menu+0x1b54>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <menu+0x1a88>
			eepromData[12] = kapitablaTip;
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <menu+0x1b48>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <menu+0x1b58>)
 8002048:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <menu+0x1b5c>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <menu+0x1b60>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b0e      	cmp	r3, #14
 8002056:	f040 80f2 	bne.w	800223e <menu+0x1c76>
		if(dilSecim == 0) {
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <menu+0x1b64>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <menu+0x1aa6>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002062:	4a33      	ldr	r2, [pc, #204]	; (8002130 <menu+0x1b68>)
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f7fe f9c2 	bl	80003f0 <lcd_print>
 800206c:	e008      	b.n	8002080 <menu+0x1ab8>
		} else if(dilSecim == 1) {
 800206e:	4b2f      	ldr	r3, [pc, #188]	; (800212c <menu+0x1b64>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <menu+0x1ab8>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002076:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <menu+0x1b6c>)
 8002078:	2101      	movs	r1, #1
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe f9b8 	bl	80003f0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <menu+0x1b70>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <menu+0x1ae8>
			if(dilSecim == 0){
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <menu+0x1b64>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <menu+0x1ad4>
				lcd_print(2, 1, "1. Katta ac    ");
 8002090:	4a2a      	ldr	r2, [pc, #168]	; (800213c <menu+0x1b74>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f7fe f9ab 	bl	80003f0 <lcd_print>
 800209a:	e071      	b.n	8002180 <menu+0x1bb8>
			} else if(dilSecim == 1) {
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <menu+0x1b64>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d16d      	bne.n	8002180 <menu+0x1bb8>
				lcd_print(2, 1, "1. Floor open  ");
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <menu+0x1b78>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	2002      	movs	r0, #2
 80020aa:	f7fe f9a1 	bl	80003f0 <lcd_print>
 80020ae:	e067      	b.n	8002180 <menu+0x1bb8>
			}
		} else if(kapiTablaAcKonum == 1) {
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <menu+0x1b70>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d112      	bne.n	80020de <menu+0x1b16>
			if(dilSecim == 0){
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <menu+0x1b64>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <menu+0x1b02>
				lcd_print(2, 1, "2. Katta ac    ");
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <menu+0x1b7c>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7fe f993 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <menu+0x1b64>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d156      	bne.n	8002180 <menu+0x1bb8>
				lcd_print(2, 1, "2. Floor open  ");
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <menu+0x1b80>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7fe f98a 	bl	80003f0 <lcd_print>
 80020dc:	e050      	b.n	8002180 <menu+0x1bb8>
			}
		} else if(kapiTablaAcKonum == 2) {
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <menu+0x1b70>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d136      	bne.n	8002154 <menu+0x1b8c>
			if(dilSecim == 0){
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <menu+0x1b64>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <menu+0x1b32>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <menu+0x1b84>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	2002      	movs	r0, #2
 80020f4:	f7fe f97c 	bl	80003f0 <lcd_print>
 80020f8:	e042      	b.n	8002180 <menu+0x1bb8>
			} else if(dilSecim == 1) {
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <menu+0x1b64>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d13e      	bne.n	8002180 <menu+0x1bb8>
				lcd_print(2, 1, "1.+2. Floor open");
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <menu+0x1b88>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f7fe f972 	bl	80003f0 <lcd_print>
 800210c:	e038      	b.n	8002180 <menu+0x1bb8>
 800210e:	bf00      	nop
 8002110:	20000c57 	.word	0x20000c57
 8002114:	0800c3a4 	.word	0x0800c3a4
 8002118:	40010800 	.word	0x40010800
 800211c:	20000c7a 	.word	0x20000c7a
 8002120:	20000be4 	.word	0x20000be4
 8002124:	20000c77 	.word	0x20000c77
 8002128:	20000c4c 	.word	0x20000c4c
 800212c:	20000c6c 	.word	0x20000c6c
 8002130:	0800c474 	.word	0x0800c474
 8002134:	0800c488 	.word	0x0800c488
 8002138:	20000c59 	.word	0x20000c59
 800213c:	0800c49c 	.word	0x0800c49c
 8002140:	0800c4ac 	.word	0x0800c4ac
 8002144:	0800c4bc 	.word	0x0800c4bc
 8002148:	0800c4cc 	.word	0x0800c4cc
 800214c:	0800c4dc 	.word	0x0800c4dc
 8002150:	0800c4f0 	.word	0x0800c4f0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002154:	4b9b      	ldr	r3, [pc, #620]	; (80023c4 <menu+0x1dfc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d111      	bne.n	8002180 <menu+0x1bb8>
			if(dilSecim == 0) {
 800215c:	4b9a      	ldr	r3, [pc, #616]	; (80023c8 <menu+0x1e00>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <menu+0x1ba6>
				lcd_print(2, 1, "Pasif           ");
 8002164:	4a99      	ldr	r2, [pc, #612]	; (80023cc <menu+0x1e04>)
 8002166:	2101      	movs	r1, #1
 8002168:	2002      	movs	r0, #2
 800216a:	f7fe f941 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 800216e:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <menu+0x1e00>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d104      	bne.n	8002180 <menu+0x1bb8>
				lcd_print(2, 1, "Passive         ");
 8002176:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <menu+0x1e08>)
 8002178:	2101      	movs	r1, #1
 800217a:	2002      	movs	r0, #2
 800217c:	f7fe f938 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002180:	2102      	movs	r1, #2
 8002182:	4894      	ldr	r0, [pc, #592]	; (80023d4 <menu+0x1e0c>)
 8002184:	f006 f80c 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002188:	4603      	mov	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d115      	bne.n	80021ba <menu+0x1bf2>
 800218e:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <menu+0x1e10>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f083 0301 	eor.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00e      	beq.n	80021ba <menu+0x1bf2>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800219c:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <menu+0x1dfc>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b87      	ldr	r3, [pc, #540]	; (80023c4 <menu+0x1dfc>)
 80021a6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80021a8:	4b86      	ldr	r3, [pc, #536]	; (80023c4 <menu+0x1dfc>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d902      	bls.n	80021b6 <menu+0x1bee>
				kapiTablaAcKonum = 0;
 80021b0:	4b84      	ldr	r3, [pc, #528]	; (80023c4 <menu+0x1dfc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021b6:	f7fe f96b 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ba:	2104      	movs	r1, #4
 80021bc:	4885      	ldr	r0, [pc, #532]	; (80023d4 <menu+0x1e0c>)
 80021be:	f005 ffef 	bl	80081a0 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d115      	bne.n	80021f4 <menu+0x1c2c>
 80021c8:	4b83      	ldr	r3, [pc, #524]	; (80023d8 <menu+0x1e10>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <menu+0x1c2c>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80021d6:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <menu+0x1dfc>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <menu+0x1dfc>)
 80021e0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80021e2:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <menu+0x1dfc>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d902      	bls.n	80021f0 <menu+0x1c28>
		   		kapiTablaAcKonum = 2;
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <menu+0x1dfc>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021f0:	f7fe f94e 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f4:	2108      	movs	r1, #8
 80021f6:	4877      	ldr	r0, [pc, #476]	; (80023d4 <menu+0x1e0c>)
 80021f8:	f005 ffd2 	bl	80081a0 <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d11d      	bne.n	800223e <menu+0x1c76>
 8002202:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <menu+0x1e10>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f083 0301 	eor.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d016      	beq.n	800223e <menu+0x1c76>
			eepromData[34] = kapiTablaAcKonum;
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <menu+0x1dfc>)
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	4b71      	ldr	r3, [pc, #452]	; (80023dc <menu+0x1e14>)
 8002216:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800221a:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <menu+0x1dfc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <menu+0x1c62>
 8002222:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <menu+0x1dfc>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d106      	bne.n	8002238 <menu+0x1c70>
				altLimit = 1;
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <menu+0x1e18>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002230:	4b6b      	ldr	r3, [pc, #428]	; (80023e0 <menu+0x1e18>)
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b69      	ldr	r3, [pc, #420]	; (80023dc <menu+0x1e14>)
 8002236:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <menu+0x1e1c>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800223e:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <menu+0x1e20>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	d17f      	bne.n	8002346 <menu+0x1d7e>
		if(dilSecim == 0) {
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <menu+0x1e00>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <menu+0x1c9c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800224e:	4a67      	ldr	r2, [pc, #412]	; (80023ec <menu+0x1e24>)
 8002250:	2101      	movs	r1, #1
 8002252:	2001      	movs	r0, #1
 8002254:	f7fe f8cc 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002258:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <menu+0x1e28>)
 800225a:	2101      	movs	r1, #1
 800225c:	2002      	movs	r0, #2
 800225e:	f7fe f8c7 	bl	80003f0 <lcd_print>
 8002262:	e00d      	b.n	8002280 <menu+0x1cb8>
		} else if(dilSecim == 1) {
 8002264:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <menu+0x1e00>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d109      	bne.n	8002280 <menu+0x1cb8>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800226c:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <menu+0x1e2c>)
 800226e:	2101      	movs	r1, #1
 8002270:	2001      	movs	r0, #1
 8002272:	f7fe f8bd 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002276:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <menu+0x1e30>)
 8002278:	2101      	movs	r1, #1
 800227a:	2002      	movs	r0, #2
 800227c:	f7fe f8b8 	bl	80003f0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002280:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <menu+0x1e34>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	220a      	movs	r2, #10
 8002286:	495e      	ldr	r1, [pc, #376]	; (8002400 <menu+0x1e38>)
 8002288:	4618      	mov	r0, r3
 800228a:	f009 fcc9 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 800228e:	4a5c      	ldr	r2, [pc, #368]	; (8002400 <menu+0x1e38>)
 8002290:	2110      	movs	r1, #16
 8002292:	2002      	movs	r0, #2
 8002294:	f7fe f8ac 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002298:	2102      	movs	r1, #2
 800229a:	484e      	ldr	r0, [pc, #312]	; (80023d4 <menu+0x1e0c>)
 800229c:	f005 ff80 	bl	80081a0 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d119      	bne.n	80022da <menu+0x1d12>
 80022a6:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <menu+0x1e10>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f083 0301 	eor.w	r3, r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <menu+0x1d12>
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <menu+0x1e3c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <menu+0x1d12>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80022bc:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <menu+0x1e34>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <menu+0x1e34>)
 80022c6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <menu+0x1e34>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d902      	bls.n	80022d6 <menu+0x1d0e>
				kapiTablaAcSure = 0;
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <menu+0x1e34>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022d6:	f7fe f8db 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80022da:	2104      	movs	r1, #4
 80022dc:	483d      	ldr	r0, [pc, #244]	; (80023d4 <menu+0x1e0c>)
 80022de:	f005 ff5f 	bl	80081a0 <HAL_GPIO_ReadPin>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d119      	bne.n	800231c <menu+0x1d54>
 80022e8:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <menu+0x1e10>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <menu+0x1d54>
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <menu+0x1e3c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <menu+0x1d54>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80022fe:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <menu+0x1e34>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <menu+0x1e34>)
 8002308:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <menu+0x1e34>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <menu+0x1d50>
		   		kapiTablaAcSure = 5;
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <menu+0x1e34>)
 8002314:	2205      	movs	r2, #5
 8002316:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002318:	f7fe f8ba 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800231c:	2108      	movs	r1, #8
 800231e:	482d      	ldr	r0, [pc, #180]	; (80023d4 <menu+0x1e0c>)
 8002320:	f005 ff3e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10d      	bne.n	8002346 <menu+0x1d7e>
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <menu+0x1e10>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <menu+0x1d7e>
			eepromData[13] = kapiTablaAcSure;
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <menu+0x1e34>)
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <menu+0x1e14>)
 800233e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <menu+0x1e1c>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <menu+0x1e20>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	f040 80bc 	bne.w	80024c8 <menu+0x1f00>
		if(dilSecim == 0) {
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <menu+0x1e00>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <menu+0x1d9c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <menu+0x1e40>)
 800235a:	2101      	movs	r1, #1
 800235c:	2001      	movs	r0, #1
 800235e:	f7fe f847 	bl	80003f0 <lcd_print>
 8002362:	e008      	b.n	8002376 <menu+0x1dae>
		} else if(dilSecim == 1) {
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <menu+0x1e00>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d104      	bne.n	8002376 <menu+0x1dae>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <menu+0x1e44>)
 800236e:	2101      	movs	r1, #1
 8002370:	2001      	movs	r0, #1
 8002372:	f7fe f83d 	bl	80003f0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <menu+0x1e48>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d113      	bne.n	80023a6 <menu+0x1dde>
			if(dilSecim == 0) {
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <menu+0x1e00>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <menu+0x1dca>
				lcd_print(2, 1, "Pasif           ");
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <menu+0x1e04>)
 8002388:	2101      	movs	r1, #1
 800238a:	2002      	movs	r0, #2
 800238c:	f7fe f830 	bl	80003f0 <lcd_print>
 8002390:	e04b      	b.n	800242a <menu+0x1e62>
			} else if(dilSecim == 1) {
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <menu+0x1e00>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d147      	bne.n	800242a <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 800239a:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <menu+0x1e08>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f7fe f826 	bl	80003f0 <lcd_print>
 80023a4:	e041      	b.n	800242a <menu+0x1e62>
			}
		} else if(yukariYavasLimit == 1) {
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <menu+0x1e48>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d13d      	bne.n	800242a <menu+0x1e62>
			if(dilSecim == 0) {
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <menu+0x1e00>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d130      	bne.n	8002418 <menu+0x1e50>
				lcd_print(2, 1, "Aktif           ");
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <menu+0x1e4c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f7fe f818 	bl	80003f0 <lcd_print>
 80023c0:	e033      	b.n	800242a <menu+0x1e62>
 80023c2:	bf00      	nop
 80023c4:	20000c59 	.word	0x20000c59
 80023c8:	20000c6c 	.word	0x20000c6c
 80023cc:	0800c164 	.word	0x0800c164
 80023d0:	0800c178 	.word	0x0800c178
 80023d4:	40010800 	.word	0x40010800
 80023d8:	20000c7a 	.word	0x20000c7a
 80023dc:	20000be4 	.word	0x20000be4
 80023e0:	20000c52 	.word	0x20000c52
 80023e4:	20000c77 	.word	0x20000c77
 80023e8:	20000c4c 	.word	0x20000c4c
 80023ec:	0800c504 	.word	0x0800c504
 80023f0:	0800c3c8 	.word	0x0800c3c8
 80023f4:	0800c518 	.word	0x0800c518
 80023f8:	0800c3ec 	.word	0x0800c3ec
 80023fc:	20000c67 	.word	0x20000c67
 8002400:	20000c24 	.word	0x20000c24
 8002404:	20000c57 	.word	0x20000c57
 8002408:	0800c52c 	.word	0x0800c52c
 800240c:	0800c540 	.word	0x0800c540
 8002410:	20000c5a 	.word	0x20000c5a
 8002414:	0800c1c4 	.word	0x0800c1c4
			} else if(dilSecim == 1) {
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <menu+0x20b8>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d104      	bne.n	800242a <menu+0x1e62>
				lcd_print(2, 1, "Active          ");
 8002420:	4a98      	ldr	r2, [pc, #608]	; (8002684 <menu+0x20bc>)
 8002422:	2101      	movs	r1, #1
 8002424:	2002      	movs	r0, #2
 8002426:	f7fd ffe3 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800242a:	2102      	movs	r1, #2
 800242c:	4896      	ldr	r0, [pc, #600]	; (8002688 <menu+0x20c0>)
 800242e:	f005 feb7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d115      	bne.n	8002464 <menu+0x1e9c>
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <menu+0x20c4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f083 0301 	eor.w	r3, r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00e      	beq.n	8002464 <menu+0x1e9c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002446:	4b92      	ldr	r3, [pc, #584]	; (8002690 <menu+0x20c8>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b90      	ldr	r3, [pc, #576]	; (8002690 <menu+0x20c8>)
 8002450:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002452:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <menu+0x20c8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d902      	bls.n	8002460 <menu+0x1e98>
				yukariYavasLimit = 0;
 800245a:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <menu+0x20c8>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002460:	f7fe f816 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002464:	2104      	movs	r1, #4
 8002466:	4888      	ldr	r0, [pc, #544]	; (8002688 <menu+0x20c0>)
 8002468:	f005 fe9a 	bl	80081a0 <HAL_GPIO_ReadPin>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d115      	bne.n	800249e <menu+0x1ed6>
 8002472:	4b86      	ldr	r3, [pc, #536]	; (800268c <menu+0x20c4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <menu+0x1ed6>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002480:	4b83      	ldr	r3, [pc, #524]	; (8002690 <menu+0x20c8>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b81      	ldr	r3, [pc, #516]	; (8002690 <menu+0x20c8>)
 800248a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <menu+0x20c8>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <menu+0x1ed2>
		   		yukariYavasLimit = 1;
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <menu+0x20c8>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800249a:	f7fd fff9 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800249e:	2108      	movs	r1, #8
 80024a0:	4879      	ldr	r0, [pc, #484]	; (8002688 <menu+0x20c0>)
 80024a2:	f005 fe7d 	bl	80081a0 <HAL_GPIO_ReadPin>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10d      	bne.n	80024c8 <menu+0x1f00>
 80024ac:	4b77      	ldr	r3, [pc, #476]	; (800268c <menu+0x20c4>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <menu+0x1f00>
			eepromData[14] = yukariYavasLimit;
 80024ba:	4b75      	ldr	r3, [pc, #468]	; (8002690 <menu+0x20c8>)
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	4b75      	ldr	r3, [pc, #468]	; (8002694 <menu+0x20cc>)
 80024c0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <menu+0x20d0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80024c8:	4b74      	ldr	r3, [pc, #464]	; (800269c <menu+0x20d4>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	f040 80c3 	bne.w	8002658 <menu+0x2090>
		if(dilSecim == 0) {
 80024d2:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <menu+0x20b8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <menu+0x1f1e>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80024da:	4a71      	ldr	r2, [pc, #452]	; (80026a0 <menu+0x20d8>)
 80024dc:	2101      	movs	r1, #1
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fd ff86 	bl	80003f0 <lcd_print>
 80024e4:	e008      	b.n	80024f8 <menu+0x1f30>
		} else if(dilSecim == 1) {
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <menu+0x20b8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d104      	bne.n	80024f8 <menu+0x1f30>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80024ee:	4a6d      	ldr	r2, [pc, #436]	; (80026a4 <menu+0x20dc>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fd ff7c 	bl	80003f0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <menu+0x20e0>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d113      	bne.n	8002528 <menu+0x1f60>
			if(dilSecim == 0){
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <menu+0x20b8>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <menu+0x1f4c>
				lcd_print(2, 1, "Devirme aktif  ");
 8002508:	4a68      	ldr	r2, [pc, #416]	; (80026ac <menu+0x20e4>)
 800250a:	2101      	movs	r1, #1
 800250c:	2002      	movs	r0, #2
 800250e:	f7fd ff6f 	bl	80003f0 <lcd_print>
 8002512:	e038      	b.n	8002586 <menu+0x1fbe>
			} else if(dilSecim == 1){
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <menu+0x20b8>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d134      	bne.n	8002586 <menu+0x1fbe>
				lcd_print(2, 1, "Tipping active ");
 800251c:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <menu+0x20e8>)
 800251e:	2101      	movs	r1, #1
 8002520:	2002      	movs	r0, #2
 8002522:	f7fd ff65 	bl	80003f0 <lcd_print>
 8002526:	e02e      	b.n	8002586 <menu+0x1fbe>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002528:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <menu+0x20e0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d113      	bne.n	8002558 <menu+0x1f90>
			if(dilSecim == 0){
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <menu+0x20b8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <menu+0x1f7c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002538:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <menu+0x20ec>)
 800253a:	2101      	movs	r1, #1
 800253c:	2002      	movs	r0, #2
 800253e:	f7fd ff57 	bl	80003f0 <lcd_print>
 8002542:	e020      	b.n	8002586 <menu+0x1fbe>
			} else if(dilSecim == 1) {
 8002544:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <menu+0x20b8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d11c      	bne.n	8002586 <menu+0x1fbe>
				lcd_print(2, 1, "Drive active   ");
 800254c:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <menu+0x20f0>)
 800254e:	2101      	movs	r1, #1
 8002550:	2002      	movs	r0, #2
 8002552:	f7fd ff4d 	bl	80003f0 <lcd_print>
 8002556:	e016      	b.n	8002586 <menu+0x1fbe>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <menu+0x20e0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d112      	bne.n	8002586 <menu+0x1fbe>
			if(dilSecim == 0) {
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <menu+0x20b8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <menu+0x1fac>
				lcd_print(2, 1, "Pasif           ");
 8002568:	4a54      	ldr	r2, [pc, #336]	; (80026bc <menu+0x20f4>)
 800256a:	2101      	movs	r1, #1
 800256c:	2002      	movs	r0, #2
 800256e:	f7fd ff3f 	bl	80003f0 <lcd_print>
 8002572:	e008      	b.n	8002586 <menu+0x1fbe>
			} else if(dilSecim == 1) {
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <menu+0x20b8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d104      	bne.n	8002586 <menu+0x1fbe>
				lcd_print(2, 1, "Passive         ");
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <menu+0x20f8>)
 800257e:	2101      	movs	r1, #1
 8002580:	2002      	movs	r0, #2
 8002582:	f7fd ff35 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002586:	2102      	movs	r1, #2
 8002588:	483f      	ldr	r0, [pc, #252]	; (8002688 <menu+0x20c0>)
 800258a:	f005 fe09 	bl	80081a0 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d115      	bne.n	80025c0 <menu+0x1ff8>
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <menu+0x20c4>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <menu+0x1ff8>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <menu+0x20e0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <menu+0x20e0>)
 80025ac:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80025ae:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <menu+0x20e0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d902      	bls.n	80025bc <menu+0x1ff4>
				devirmeYuruyusSecim = 0;
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <menu+0x20e0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025bc:	f7fd ff68 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c0:	2104      	movs	r1, #4
 80025c2:	4831      	ldr	r0, [pc, #196]	; (8002688 <menu+0x20c0>)
 80025c4:	f005 fdec 	bl	80081a0 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d115      	bne.n	80025fa <menu+0x2032>
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <menu+0x20c4>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <menu+0x2032>
			devirmeYuruyusSecim=devirmeYuruyusSecim-1;
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <menu+0x20e0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <menu+0x20e0>)
 80025e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80025e8:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <menu+0x20e0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d902      	bls.n	80025f6 <menu+0x202e>
		   		devirmeYuruyusSecim=2;
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <menu+0x20e0>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f6:	f7fd ff4b 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fa:	2108      	movs	r1, #8
 80025fc:	4822      	ldr	r0, [pc, #136]	; (8002688 <menu+0x20c0>)
 80025fe:	f005 fdcf 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d127      	bne.n	8002658 <menu+0x2090>
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <menu+0x20c4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f083 0301 	eor.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <menu+0x2090>
			eepromData[15]=devirmeYuruyusSecim;
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <menu+0x20e0>)
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <menu+0x20cc>)
 800261c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <menu+0x20e0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d003      	beq.n	800262e <menu+0x2066>
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <menu+0x20e0>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d106      	bne.n	800263c <menu+0x2074>
				calismaSekli = 0;
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <menu+0x20fc>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <menu+0x20fc>)
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <menu+0x20cc>)
 800263a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <menu+0x20e0>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <menu+0x208a>
				devirmeSilindirTipi = 1;
 8002644:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <menu+0x2100>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <menu+0x2100>)
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <menu+0x20cc>)
 8002650:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <menu+0x20d0>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <menu+0x20d4>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b12      	cmp	r3, #18
 800265e:	f040 80d5 	bne.w	800280c <menu+0x2244>
		if(devirmeYuruyusSecim == 2) {
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <menu+0x20e0>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d13c      	bne.n	80026e4 <menu+0x211c>
			if(dilSecim == 0) {
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <menu+0x20b8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12e      	bne.n	80026d0 <menu+0x2108>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <menu+0x2104>)
 8002674:	2101      	movs	r1, #1
 8002676:	2001      	movs	r0, #1
 8002678:	f7fd feba 	bl	80003f0 <lcd_print>
 800267c:	e048      	b.n	8002710 <menu+0x2148>
 800267e:	bf00      	nop
 8002680:	20000c6c 	.word	0x20000c6c
 8002684:	0800c1d8 	.word	0x0800c1d8
 8002688:	40010800 	.word	0x40010800
 800268c:	20000c7a 	.word	0x20000c7a
 8002690:	20000c5a 	.word	0x20000c5a
 8002694:	20000be4 	.word	0x20000be4
 8002698:	20000c77 	.word	0x20000c77
 800269c:	20000c4c 	.word	0x20000c4c
 80026a0:	0800c554 	.word	0x0800c554
 80026a4:	0800c568 	.word	0x0800c568
 80026a8:	20000c5b 	.word	0x20000c5b
 80026ac:	0800c57c 	.word	0x0800c57c
 80026b0:	0800c58c 	.word	0x0800c58c
 80026b4:	0800c59c 	.word	0x0800c59c
 80026b8:	0800c5ac 	.word	0x0800c5ac
 80026bc:	0800c164 	.word	0x0800c164
 80026c0:	0800c178 	.word	0x0800c178
 80026c4:	20000c4d 	.word	0x20000c4d
 80026c8:	20000c5e 	.word	0x20000c5e
 80026cc:	0800c5bc 	.word	0x0800c5bc
			} else if(dilSecim == 1) {
 80026d0:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <menu+0x22f8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d11b      	bne.n	8002710 <menu+0x2148>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80026d8:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <menu+0x22fc>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fd fe87 	bl	80003f0 <lcd_print>
 80026e2:	e015      	b.n	8002710 <menu+0x2148>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <menu+0x2300>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d111      	bne.n	8002710 <menu+0x2148>
			if(dilSecim == 0){
 80026ec:	4b74      	ldr	r3, [pc, #464]	; (80028c0 <menu+0x22f8>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <menu+0x2136>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80026f4:	4a75      	ldr	r2, [pc, #468]	; (80028cc <menu+0x2304>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7fd fe79 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <menu+0x22f8>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d104      	bne.n	8002710 <menu+0x2148>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8002706:	4a72      	ldr	r2, [pc, #456]	; (80028d0 <menu+0x2308>)
 8002708:	2101      	movs	r1, #1
 800270a:	2001      	movs	r0, #1
 800270c:	f7fd fe70 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <menu+0x230c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d113      	bne.n	8002740 <menu+0x2178>
			if(dilSecim == 0) {
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <menu+0x22f8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <menu+0x2164>
				lcd_print(2, 1, "Pasif           ");
 8002720:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <menu+0x2310>)
 8002722:	2101      	movs	r1, #1
 8002724:	2002      	movs	r0, #2
 8002726:	f7fd fe63 	bl	80003f0 <lcd_print>
 800272a:	e020      	b.n	800276e <menu+0x21a6>
			} else if(dilSecim == 1){
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <menu+0x22f8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d11c      	bne.n	800276e <menu+0x21a6>
				lcd_print(2, 1, "Passive         ");
 8002734:	4a69      	ldr	r2, [pc, #420]	; (80028dc <menu+0x2314>)
 8002736:	2101      	movs	r1, #1
 8002738:	2002      	movs	r0, #2
 800273a:	f7fd fe59 	bl	80003f0 <lcd_print>
 800273e:	e016      	b.n	800276e <menu+0x21a6>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8002740:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <menu+0x230c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d112      	bne.n	800276e <menu+0x21a6>
			if(dilSecim == 0){
 8002748:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <menu+0x22f8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <menu+0x2194>
				lcd_print(2, 1, "Aktif           ");
 8002750:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <menu+0x2318>)
 8002752:	2101      	movs	r1, #1
 8002754:	2002      	movs	r0, #2
 8002756:	f7fd fe4b 	bl	80003f0 <lcd_print>
 800275a:	e008      	b.n	800276e <menu+0x21a6>
			} else if(dilSecim == 1){
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <menu+0x22f8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d104      	bne.n	800276e <menu+0x21a6>
				lcd_print(2, 1, "Active          ");
 8002764:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <menu+0x231c>)
 8002766:	2101      	movs	r1, #1
 8002768:	2002      	movs	r0, #2
 800276a:	f7fd fe41 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800276e:	2102      	movs	r1, #2
 8002770:	485d      	ldr	r0, [pc, #372]	; (80028e8 <menu+0x2320>)
 8002772:	f005 fd15 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d115      	bne.n	80027a8 <menu+0x21e0>
 800277c:	4b5b      	ldr	r3, [pc, #364]	; (80028ec <menu+0x2324>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00e      	beq.n	80027a8 <menu+0x21e0>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <menu+0x230c>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <menu+0x230c>)
 8002794:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <menu+0x230c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d902      	bls.n	80027a4 <menu+0x21dc>
				devirmeYukariIleriLimit = 0;
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <menu+0x230c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027a4:	f7fd fe74 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a8:	2104      	movs	r1, #4
 80027aa:	484f      	ldr	r0, [pc, #316]	; (80028e8 <menu+0x2320>)
 80027ac:	f005 fcf8 	bl	80081a0 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d115      	bne.n	80027e2 <menu+0x221a>
 80027b6:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <menu+0x2324>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <menu+0x221a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <menu+0x230c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <menu+0x230c>)
 80027ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <menu+0x230c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <menu+0x2216>
		   		devirmeYukariIleriLimit = 1;
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <menu+0x230c>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027de:	f7fd fe57 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e2:	2108      	movs	r1, #8
 80027e4:	4840      	ldr	r0, [pc, #256]	; (80028e8 <menu+0x2320>)
 80027e6:	f005 fcdb 	bl	80081a0 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10d      	bne.n	800280c <menu+0x2244>
 80027f0:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <menu+0x2324>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <menu+0x2244>
			eepromData[16] = devirmeYukariIleriLimit;
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <menu+0x230c>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <menu+0x2328>)
 8002804:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <menu+0x232c>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <menu+0x2330>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b13      	cmp	r3, #19
 8002812:	f040 80d5 	bne.w	80029c0 <menu+0x23f8>
		if(devirmeYuruyusSecim == 2) {
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <menu+0x2300>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d113      	bne.n	8002846 <menu+0x227e>
			if(dilSecim == 0) {
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <menu+0x22f8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <menu+0x226a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8002826:	4a35      	ldr	r2, [pc, #212]	; (80028fc <menu+0x2334>)
 8002828:	2101      	movs	r1, #1
 800282a:	2001      	movs	r0, #1
 800282c:	f7fd fde0 	bl	80003f0 <lcd_print>
 8002830:	e01f      	b.n	8002872 <menu+0x22aa>
			} else if(dilSecim == 1) {
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <menu+0x22f8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11b      	bne.n	8002872 <menu+0x22aa>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <menu+0x2338>)
 800283c:	2101      	movs	r1, #1
 800283e:	2001      	movs	r0, #1
 8002840:	f7fd fdd6 	bl	80003f0 <lcd_print>
 8002844:	e015      	b.n	8002872 <menu+0x22aa>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <menu+0x2300>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d111      	bne.n	8002872 <menu+0x22aa>
			if(dilSecim == 0) {
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <menu+0x22f8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <menu+0x2298>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <menu+0x233c>)
 8002858:	2101      	movs	r1, #1
 800285a:	2001      	movs	r0, #1
 800285c:	f7fd fdc8 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <menu+0x22f8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d104      	bne.n	8002872 <menu+0x22aa>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <menu+0x2340>)
 800286a:	2101      	movs	r1, #1
 800286c:	2001      	movs	r0, #1
 800286e:	f7fd fdbf 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <menu+0x2344>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d113      	bne.n	80028a2 <menu+0x22da>
			if(dilSecim == 0) {
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <menu+0x22f8>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <menu+0x22c6>
				lcd_print(2, 1, "Pasif           ");
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <menu+0x2310>)
 8002884:	2101      	movs	r1, #1
 8002886:	2002      	movs	r0, #2
 8002888:	f7fd fdb2 	bl	80003f0 <lcd_print>
 800288c:	e049      	b.n	8002922 <menu+0x235a>
			} else if(dilSecim == 1) {
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <menu+0x22f8>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d145      	bne.n	8002922 <menu+0x235a>
				lcd_print(2, 1, "Passive         ");
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <menu+0x2314>)
 8002898:	2101      	movs	r1, #1
 800289a:	2002      	movs	r0, #2
 800289c:	f7fd fda8 	bl	80003f0 <lcd_print>
 80028a0:	e03f      	b.n	8002922 <menu+0x235a>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <menu+0x2344>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d13b      	bne.n	8002922 <menu+0x235a>
			if(dilSecim == 0) {
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <menu+0x22f8>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d12e      	bne.n	8002910 <menu+0x2348>
				lcd_print(2, 1, "Aktif           ");
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <menu+0x2318>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7fd fd9a 	bl	80003f0 <lcd_print>
 80028bc:	e031      	b.n	8002922 <menu+0x235a>
 80028be:	bf00      	nop
 80028c0:	20000c6c 	.word	0x20000c6c
 80028c4:	0800c5d0 	.word	0x0800c5d0
 80028c8:	20000c5b 	.word	0x20000c5b
 80028cc:	0800c5e0 	.word	0x0800c5e0
 80028d0:	0800c5f4 	.word	0x0800c5f4
 80028d4:	20000c5c 	.word	0x20000c5c
 80028d8:	0800c164 	.word	0x0800c164
 80028dc:	0800c178 	.word	0x0800c178
 80028e0:	0800c1c4 	.word	0x0800c1c4
 80028e4:	0800c1d8 	.word	0x0800c1d8
 80028e8:	40010800 	.word	0x40010800
 80028ec:	20000c7a 	.word	0x20000c7a
 80028f0:	20000be4 	.word	0x20000be4
 80028f4:	20000c77 	.word	0x20000c77
 80028f8:	20000c4c 	.word	0x20000c4c
 80028fc:	0800c608 	.word	0x0800c608
 8002900:	0800c61c 	.word	0x0800c61c
 8002904:	0800c630 	.word	0x0800c630
 8002908:	0800c644 	.word	0x0800c644
 800290c:	20000c5d 	.word	0x20000c5d
			} else if(dilSecim == 1) {
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <menu+0x258c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d104      	bne.n	8002922 <menu+0x235a>
				lcd_print(2, 1, "Active          ");
 8002918:	4a8f      	ldr	r2, [pc, #572]	; (8002b58 <menu+0x2590>)
 800291a:	2101      	movs	r1, #1
 800291c:	2002      	movs	r0, #2
 800291e:	f7fd fd67 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002922:	2102      	movs	r1, #2
 8002924:	488d      	ldr	r0, [pc, #564]	; (8002b5c <menu+0x2594>)
 8002926:	f005 fc3b 	bl	80081a0 <HAL_GPIO_ReadPin>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d115      	bne.n	800295c <menu+0x2394>
 8002930:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <menu+0x2598>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <menu+0x2394>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800293e:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <menu+0x259c>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <menu+0x259c>)
 8002948:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800294a:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <menu+0x259c>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d902      	bls.n	8002958 <menu+0x2390>
				devirmeAsagiGeriLimit = 0;
 8002952:	4b84      	ldr	r3, [pc, #528]	; (8002b64 <menu+0x259c>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002958:	f7fd fd9a 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800295c:	2104      	movs	r1, #4
 800295e:	487f      	ldr	r0, [pc, #508]	; (8002b5c <menu+0x2594>)
 8002960:	f005 fc1e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002964:	4603      	mov	r3, r0
 8002966:	2b01      	cmp	r3, #1
 8002968:	d115      	bne.n	8002996 <menu+0x23ce>
 800296a:	4b7d      	ldr	r3, [pc, #500]	; (8002b60 <menu+0x2598>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f083 0301 	eor.w	r3, r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <menu+0x23ce>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002978:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <menu+0x259c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <menu+0x259c>)
 8002982:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002984:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <menu+0x259c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <menu+0x23ca>
		   		devirmeAsagiGeriLimit = 1;
 800298c:	4b75      	ldr	r3, [pc, #468]	; (8002b64 <menu+0x259c>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002992:	f7fd fd7d 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002996:	2108      	movs	r1, #8
 8002998:	4870      	ldr	r0, [pc, #448]	; (8002b5c <menu+0x2594>)
 800299a:	f005 fc01 	bl	80081a0 <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10d      	bne.n	80029c0 <menu+0x23f8>
 80029a4:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <menu+0x2598>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <menu+0x23f8>
			eepromData[17] = devirmeAsagiGeriLimit;
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <menu+0x259c>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <menu+0x25a0>)
 80029b8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80029ba:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <menu+0x25a4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80029c0:	4b6b      	ldr	r3, [pc, #428]	; (8002b70 <menu+0x25a8>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b14      	cmp	r3, #20
 80029c6:	f040 80b5 	bne.w	8002b34 <menu+0x256c>
		if(devirmeYuruyusSecim == 1) {
 80029ca:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <menu+0x25ac>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d113      	bne.n	80029fa <menu+0x2432>
			if(dilSecim == 0) {
 80029d2:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <menu+0x258c>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <menu+0x241e>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80029da:	4a67      	ldr	r2, [pc, #412]	; (8002b78 <menu+0x25b0>)
 80029dc:	2101      	movs	r1, #1
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fd fd06 	bl	80003f0 <lcd_print>
 80029e4:	e020      	b.n	8002a28 <menu+0x2460>
			} else if(dilSecim == 1) {
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <menu+0x258c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d11c      	bne.n	8002a28 <menu+0x2460>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80029ee:	4a63      	ldr	r2, [pc, #396]	; (8002b7c <menu+0x25b4>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	2001      	movs	r0, #1
 80029f4:	f7fd fcfc 	bl	80003f0 <lcd_print>
 80029f8:	e016      	b.n	8002a28 <menu+0x2460>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <menu+0x25ac>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d112      	bne.n	8002a28 <menu+0x2460>
			if(dilSecim == 0) {
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <menu+0x258c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <menu+0x244e>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002a0a:	4a5d      	ldr	r2, [pc, #372]	; (8002b80 <menu+0x25b8>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fd fcee 	bl	80003f0 <lcd_print>
 8002a14:	e008      	b.n	8002a28 <menu+0x2460>
			} else if(dilSecim == 1) {
 8002a16:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <menu+0x258c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d104      	bne.n	8002a28 <menu+0x2460>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002a1e:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <menu+0x25bc>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7fd fce4 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002a28:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <menu+0x25c0>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d113      	bne.n	8002a58 <menu+0x2490>
			if(dilSecim == 0) {
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <menu+0x258c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <menu+0x247c>
				lcd_print(2, 1, "Tek tesir       ");
 8002a38:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <menu+0x25c4>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7fd fcd7 	bl	80003f0 <lcd_print>
 8002a42:	e020      	b.n	8002a86 <menu+0x24be>
			} else if(dilSecim == 1) {
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <menu+0x258c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d11c      	bne.n	8002a86 <menu+0x24be>
				lcd_print(2, 1, "Single acting  ");
 8002a4c:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <menu+0x25c8>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7fd fccd 	bl	80003f0 <lcd_print>
 8002a56:	e016      	b.n	8002a86 <menu+0x24be>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002a58:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <menu+0x25c0>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d112      	bne.n	8002a86 <menu+0x24be>
			if(dilSecim == 0) {
 8002a60:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <menu+0x258c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <menu+0x24ac>
				lcd_print(2, 1, "Cift tesir      ");
 8002a68:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <menu+0x25cc>)
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f7fd fcbf 	bl	80003f0 <lcd_print>
 8002a72:	e008      	b.n	8002a86 <menu+0x24be>
			} else if(dilSecim == 1) {
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <menu+0x258c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d104      	bne.n	8002a86 <menu+0x24be>
				lcd_print(2, 1, "Double acting  ");
 8002a7c:	4a46      	ldr	r2, [pc, #280]	; (8002b98 <menu+0x25d0>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2002      	movs	r0, #2
 8002a82:	f7fd fcb5 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002a86:	2102      	movs	r1, #2
 8002a88:	4834      	ldr	r0, [pc, #208]	; (8002b5c <menu+0x2594>)
 8002a8a:	f005 fb89 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d119      	bne.n	8002ac8 <menu+0x2500>
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <menu+0x2598>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <menu+0x2500>
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <menu+0x25ac>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d10e      	bne.n	8002ac8 <menu+0x2500>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <menu+0x25c0>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <menu+0x25c0>)
 8002ab4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <menu+0x25c0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d902      	bls.n	8002ac4 <menu+0x24fc>
				devirmeSilindirTipi = 0;
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <menu+0x25c0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ac4:	f7fd fce4 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002ac8:	2104      	movs	r1, #4
 8002aca:	4824      	ldr	r0, [pc, #144]	; (8002b5c <menu+0x2594>)
 8002acc:	f005 fb68 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d119      	bne.n	8002b0a <menu+0x2542>
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <menu+0x2598>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <menu+0x2542>
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <menu+0x25ac>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d10e      	bne.n	8002b0a <menu+0x2542>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <menu+0x25c0>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <menu+0x25c0>)
 8002af6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <menu+0x25c0>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <menu+0x253e>
		   		devirmeSilindirTipi = 1;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <menu+0x25c0>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b06:	f7fd fcc3 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	4813      	ldr	r0, [pc, #76]	; (8002b5c <menu+0x2594>)
 8002b0e:	f005 fb47 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10d      	bne.n	8002b34 <menu+0x256c>
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <menu+0x2598>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <menu+0x256c>
			eepromData[18] = devirmeSilindirTipi;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <menu+0x25c0>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <menu+0x25a0>)
 8002b2c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <menu+0x25a4>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <menu+0x25a8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b15      	cmp	r3, #21
 8002b3a:	f040 80c2 	bne.w	8002cc2 <menu+0x26fa>
		if(dilSecim == 0) {
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <menu+0x258c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d12c      	bne.n	8002ba0 <menu+0x25d8>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <menu+0x25d4>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fd fc50 	bl	80003f0 <lcd_print>
 8002b50:	e02f      	b.n	8002bb2 <menu+0x25ea>
 8002b52:	bf00      	nop
 8002b54:	20000c6c 	.word	0x20000c6c
 8002b58:	0800c1d8 	.word	0x0800c1d8
 8002b5c:	40010800 	.word	0x40010800
 8002b60:	20000c7a 	.word	0x20000c7a
 8002b64:	20000c5d 	.word	0x20000c5d
 8002b68:	20000be4 	.word	0x20000be4
 8002b6c:	20000c77 	.word	0x20000c77
 8002b70:	20000c4c 	.word	0x20000c4c
 8002b74:	20000c5b 	.word	0x20000c5b
 8002b78:	0800c658 	.word	0x0800c658
 8002b7c:	0800c66c 	.word	0x0800c66c
 8002b80:	0800c680 	.word	0x0800c680
 8002b84:	0800c694 	.word	0x0800c694
 8002b88:	20000c5e 	.word	0x20000c5e
 8002b8c:	0800c6a8 	.word	0x0800c6a8
 8002b90:	0800c6bc 	.word	0x0800c6bc
 8002b94:	0800c6cc 	.word	0x0800c6cc
 8002b98:	0800c6e0 	.word	0x0800c6e0
 8002b9c:	0800c6f0 	.word	0x0800c6f0
		} else if(dilSecim == 1) {
 8002ba0:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <menu+0x284c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d104      	bne.n	8002bb2 <menu+0x25ea>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002ba8:	4a9b      	ldr	r2, [pc, #620]	; (8002e18 <menu+0x2850>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7fd fc1f 	bl	80003f0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002bb2:	4b9a      	ldr	r3, [pc, #616]	; (8002e1c <menu+0x2854>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <menu+0x2618>
			if(dilSecim == 0) {
 8002bba:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <menu+0x284c>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <menu+0x2604>
				lcd_print(2, 1, "Tek tesir       ");
 8002bc2:	4a97      	ldr	r2, [pc, #604]	; (8002e20 <menu+0x2858>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f7fd fc12 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002bcc:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <menu+0x284c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d11c      	bne.n	8002c0e <menu+0x2646>
				lcd_print(2, 1, "Single acting  ");
 8002bd4:	4a93      	ldr	r2, [pc, #588]	; (8002e24 <menu+0x285c>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f7fd fc09 	bl	80003f0 <lcd_print>
 8002bde:	e016      	b.n	8002c0e <menu+0x2646>
			}
		} else if(platformSilindirTipi == 1) {
 8002be0:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <menu+0x2854>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d112      	bne.n	8002c0e <menu+0x2646>
			if(dilSecim == 0) {
 8002be8:	4b8a      	ldr	r3, [pc, #552]	; (8002e14 <menu+0x284c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <menu+0x2634>
				lcd_print(2, 1, "Cift tesir      ");
 8002bf0:	4a8d      	ldr	r2, [pc, #564]	; (8002e28 <menu+0x2860>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f7fd fbfb 	bl	80003f0 <lcd_print>
 8002bfa:	e008      	b.n	8002c0e <menu+0x2646>
			} else if(dilSecim == 1) {
 8002bfc:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <menu+0x284c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d104      	bne.n	8002c0e <menu+0x2646>
				lcd_print(2, 1, "Double acting  ");
 8002c04:	4a89      	ldr	r2, [pc, #548]	; (8002e2c <menu+0x2864>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7fd fbf1 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4887      	ldr	r0, [pc, #540]	; (8002e30 <menu+0x2868>)
 8002c12:	f005 fac5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d115      	bne.n	8002c48 <menu+0x2680>
 8002c1c:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <menu+0x286c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <menu+0x2680>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	; (8002e1c <menu+0x2854>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b7a      	ldr	r3, [pc, #488]	; (8002e1c <menu+0x2854>)
 8002c34:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002c36:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <menu+0x2854>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d902      	bls.n	8002c44 <menu+0x267c>
				platformSilindirTipi = 0;
 8002c3e:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <menu+0x2854>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c44:	f7fd fc24 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c48:	2104      	movs	r1, #4
 8002c4a:	4879      	ldr	r0, [pc, #484]	; (8002e30 <menu+0x2868>)
 8002c4c:	f005 faa8 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d115      	bne.n	8002c82 <menu+0x26ba>
 8002c56:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <menu+0x286c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f083 0301 	eor.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <menu+0x26ba>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <menu+0x2854>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <menu+0x2854>)
 8002c6e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <menu+0x2854>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <menu+0x26b6>
		   		platformSilindirTipi = 1;
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <menu+0x2854>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c7e:	f7fd fc07 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c82:	2108      	movs	r1, #8
 8002c84:	486a      	ldr	r0, [pc, #424]	; (8002e30 <menu+0x2868>)
 8002c86:	f005 fa8b 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d118      	bne.n	8002cc2 <menu+0x26fa>
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <menu+0x286c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f083 0301 	eor.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d011      	beq.n	8002cc2 <menu+0x26fa>
			eepromData[19] = platformSilindirTipi;
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <menu+0x2854>)
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <menu+0x2870>)
 8002ca4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	; (8002e1c <menu+0x2854>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <menu+0x26f4>
				altLimit = 1;
 8002cae:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <menu+0x2874>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <menu+0x2874>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <menu+0x2870>)
 8002cba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002cbc:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <menu+0x2878>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002cc2:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <menu+0x287c>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b16      	cmp	r3, #22
 8002cc8:	f040 8081 	bne.w	8002dce <menu+0x2806>
		if(dilSecim == 0) {
 8002ccc:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <menu+0x284c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <menu+0x2718>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002cd4:	4a5c      	ldr	r2, [pc, #368]	; (8002e48 <menu+0x2880>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7fd fb89 	bl	80003f0 <lcd_print>
 8002cde:	e008      	b.n	8002cf2 <menu+0x272a>
		} else if(dilSecim == 1) {
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <menu+0x284c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d104      	bne.n	8002cf2 <menu+0x272a>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <menu+0x2884>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7fd fb7f 	bl	80003f0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002cf2:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <menu+0x284c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <menu+0x273e>
				lcd_print(2, 1, "Kac Saniye     ");
 8002cfa:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <menu+0x2888>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f7fd fb76 	bl	80003f0 <lcd_print>
 8002d04:	e008      	b.n	8002d18 <menu+0x2750>
			} else if(dilSecim == 1){
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <menu+0x284c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d104      	bne.n	8002d18 <menu+0x2750>
				lcd_print(2, 1, "Second         ");
 8002d0e:	4a51      	ldr	r2, [pc, #324]	; (8002e54 <menu+0x288c>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	2002      	movs	r0, #2
 8002d14:	f7fd fb6c 	bl	80003f0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002d18:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <menu+0x2890>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	220a      	movs	r2, #10
 8002d1e:	494f      	ldr	r1, [pc, #316]	; (8002e5c <menu+0x2894>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f008 ff7d 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 8002d26:	4a4d      	ldr	r2, [pc, #308]	; (8002e5c <menu+0x2894>)
 8002d28:	2110      	movs	r1, #16
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f7fd fb60 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d30:	2102      	movs	r1, #2
 8002d32:	483f      	ldr	r0, [pc, #252]	; (8002e30 <menu+0x2868>)
 8002d34:	f005 fa34 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d115      	bne.n	8002d6a <menu+0x27a2>
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <menu+0x286c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <menu+0x27a2>
			yukariValfTmr = yukariValfTmr + 1;
 8002d4c:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <menu+0x2890>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <menu+0x2890>)
 8002d56:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <menu+0x2890>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d902      	bls.n	8002d66 <menu+0x279e>
				yukariValfTmr = 0;
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <menu+0x2890>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d66:	f7fd fb93 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	4830      	ldr	r0, [pc, #192]	; (8002e30 <menu+0x2868>)
 8002d6e:	f005 fa17 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d115      	bne.n	8002da4 <menu+0x27dc>
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <menu+0x286c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f083 0301 	eor.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <menu+0x27dc>
			yukariValfTmr = yukariValfTmr - 1;
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <menu+0x2890>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <menu+0x2890>)
 8002d90:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <menu+0x2890>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <menu+0x27d8>
		   		yukariValfTmr = 5;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <menu+0x2890>)
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002da0:	f7fd fb76 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da4:	2108      	movs	r1, #8
 8002da6:	4822      	ldr	r0, [pc, #136]	; (8002e30 <menu+0x2868>)
 8002da8:	f005 f9fa 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <menu+0x2806>
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <menu+0x286c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	f083 0301 	eor.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <menu+0x2806>
			eepromData[20] = yukariValfTmr;
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <menu+0x2890>)
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <menu+0x2870>)
 8002dc6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <menu+0x2878>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <menu+0x287c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b17      	cmp	r3, #23
 8002dd4:	f040 80ac 	bne.w	8002f30 <menu+0x2968>
		if(dilSecim == 0) {
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <menu+0x284c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <menu+0x2824>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <menu+0x2898>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fd fb03 	bl	80003f0 <lcd_print>
 8002dea:	e008      	b.n	8002dfe <menu+0x2836>
		} else if(dilSecim == 1) {
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <menu+0x284c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d104      	bne.n	8002dfe <menu+0x2836>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <menu+0x289c>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7fd faf9 	bl	80003f0 <lcd_print>
		}

		if(asagiValfTmr>=0) {
			if(dilSecim == 0) {
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <menu+0x284c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d130      	bne.n	8002e68 <menu+0x28a0>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <menu+0x2888>)
 8002e08:	2101      	movs	r1, #1
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	f7fd faf0 	bl	80003f0 <lcd_print>
 8002e10:	e033      	b.n	8002e7a <menu+0x28b2>
 8002e12:	bf00      	nop
 8002e14:	20000c6c 	.word	0x20000c6c
 8002e18:	0800c704 	.word	0x0800c704
 8002e1c:	20000c5f 	.word	0x20000c5f
 8002e20:	0800c6a8 	.word	0x0800c6a8
 8002e24:	0800c6bc 	.word	0x0800c6bc
 8002e28:	0800c6cc 	.word	0x0800c6cc
 8002e2c:	0800c6e0 	.word	0x0800c6e0
 8002e30:	40010800 	.word	0x40010800
 8002e34:	20000c7a 	.word	0x20000c7a
 8002e38:	20000be4 	.word	0x20000be4
 8002e3c:	20000c52 	.word	0x20000c52
 8002e40:	20000c77 	.word	0x20000c77
 8002e44:	20000c4c 	.word	0x20000c4c
 8002e48:	0800c714 	.word	0x0800c714
 8002e4c:	0800c728 	.word	0x0800c728
 8002e50:	0800c3c8 	.word	0x0800c3c8
 8002e54:	0800c73c 	.word	0x0800c73c
 8002e58:	20000c60 	.word	0x20000c60
 8002e5c:	20000c24 	.word	0x20000c24
 8002e60:	0800c74c 	.word	0x0800c74c
 8002e64:	0800c760 	.word	0x0800c760
			} else if(dilSecim == 1) {
 8002e68:	4b98      	ldr	r3, [pc, #608]	; (80030cc <menu+0x2b04>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d104      	bne.n	8002e7a <menu+0x28b2>
				lcd_print(2, 1, "Second         ");
 8002e70:	4a97      	ldr	r2, [pc, #604]	; (80030d0 <menu+0x2b08>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7fd fabb 	bl	80003f0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002e7a:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <menu+0x2b0c>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	220a      	movs	r2, #10
 8002e80:	4995      	ldr	r1, [pc, #596]	; (80030d8 <menu+0x2b10>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f008 fecc 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 8002e88:	4a93      	ldr	r2, [pc, #588]	; (80030d8 <menu+0x2b10>)
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fd faaf 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e92:	2102      	movs	r1, #2
 8002e94:	4891      	ldr	r0, [pc, #580]	; (80030dc <menu+0x2b14>)
 8002e96:	f005 f983 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d115      	bne.n	8002ecc <menu+0x2904>
 8002ea0:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <menu+0x2b18>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <menu+0x2904>
			asagiValfTmr = asagiValfTmr + 1;
 8002eae:	4b89      	ldr	r3, [pc, #548]	; (80030d4 <menu+0x2b0c>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <menu+0x2b0c>)
 8002eb8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002eba:	4b86      	ldr	r3, [pc, #536]	; (80030d4 <menu+0x2b0c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d902      	bls.n	8002ec8 <menu+0x2900>
				asagiValfTmr = 0;
 8002ec2:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <menu+0x2b0c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ec8:	f7fd fae2 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ecc:	2104      	movs	r1, #4
 8002ece:	4883      	ldr	r0, [pc, #524]	; (80030dc <menu+0x2b14>)
 8002ed0:	f005 f966 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d115      	bne.n	8002f06 <menu+0x293e>
 8002eda:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <menu+0x2b18>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <menu+0x293e>
			asagiValfTmr = asagiValfTmr - 1;
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <menu+0x2b0c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b78      	ldr	r3, [pc, #480]	; (80030d4 <menu+0x2b0c>)
 8002ef2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002ef4:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <menu+0x2b0c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d902      	bls.n	8002f02 <menu+0x293a>
		   		asagiValfTmr = 5;
 8002efc:	4b75      	ldr	r3, [pc, #468]	; (80030d4 <menu+0x2b0c>)
 8002efe:	2205      	movs	r2, #5
 8002f00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f02:	f7fd fac5 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f06:	2108      	movs	r1, #8
 8002f08:	4874      	ldr	r0, [pc, #464]	; (80030dc <menu+0x2b14>)
 8002f0a:	f005 f949 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10d      	bne.n	8002f30 <menu+0x2968>
 8002f14:	4b72      	ldr	r3, [pc, #456]	; (80030e0 <menu+0x2b18>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <menu+0x2968>
			eepromData[21] = asagiValfTmr;
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <menu+0x2b0c>)
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <menu+0x2b1c>)
 8002f28:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <menu+0x2b20>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002f30:	4b6e      	ldr	r3, [pc, #440]	; (80030ec <menu+0x2b24>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b18      	cmp	r3, #24
 8002f36:	f040 809d 	bne.w	8003074 <menu+0x2aac>
		if(devirmeYuruyusSecim == 2) {
 8002f3a:	4b6d      	ldr	r3, [pc, #436]	; (80030f0 <menu+0x2b28>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d113      	bne.n	8002f6a <menu+0x29a2>
			if(dilSecim == 0) {
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <menu+0x2b04>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <menu+0x298e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002f4a:	4a6a      	ldr	r2, [pc, #424]	; (80030f4 <menu+0x2b2c>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fd fa4e 	bl	80003f0 <lcd_print>
 8002f54:	e020      	b.n	8002f98 <menu+0x29d0>
			} else if(dilSecim == 1) {
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <menu+0x2b04>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d11c      	bne.n	8002f98 <menu+0x29d0>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002f5e:	4a66      	ldr	r2, [pc, #408]	; (80030f8 <menu+0x2b30>)
 8002f60:	2101      	movs	r1, #1
 8002f62:	2001      	movs	r0, #1
 8002f64:	f7fd fa44 	bl	80003f0 <lcd_print>
 8002f68:	e016      	b.n	8002f98 <menu+0x29d0>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <menu+0x2b28>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d112      	bne.n	8002f98 <menu+0x29d0>
			if(dilSecim == 0) {
 8002f72:	4b56      	ldr	r3, [pc, #344]	; (80030cc <menu+0x2b04>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <menu+0x29be>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002f7a:	4a60      	ldr	r2, [pc, #384]	; (80030fc <menu+0x2b34>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fd fa36 	bl	80003f0 <lcd_print>
 8002f84:	e008      	b.n	8002f98 <menu+0x29d0>
			} else if(dilSecim == 1) {
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <menu+0x2b04>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <menu+0x29d0>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002f8e:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <menu+0x2b38>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fd fa2c 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr>=0) {
			if(dilSecim == 0) {
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <menu+0x2b04>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <menu+0x29e4>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <menu+0x2b3c>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7fd fa23 	bl	80003f0 <lcd_print>
 8002faa:	e008      	b.n	8002fbe <menu+0x29f6>
			} else if(dilSecim == 1) {
 8002fac:	4b47      	ldr	r3, [pc, #284]	; (80030cc <menu+0x2b04>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d104      	bne.n	8002fbe <menu+0x29f6>
				lcd_print(2, 1, "Second         ");
 8002fb4:	4a46      	ldr	r2, [pc, #280]	; (80030d0 <menu+0x2b08>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f7fd fa19 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002fbe:	4b52      	ldr	r3, [pc, #328]	; (8003108 <menu+0x2b40>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	220a      	movs	r2, #10
 8002fc4:	4944      	ldr	r1, [pc, #272]	; (80030d8 <menu+0x2b10>)
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f008 fe2a 	bl	800bc20 <itoa>
		lcd_print(2, 16, snum);
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <menu+0x2b10>)
 8002fce:	2110      	movs	r1, #16
 8002fd0:	2002      	movs	r0, #2
 8002fd2:	f7fd fa0d 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4840      	ldr	r0, [pc, #256]	; (80030dc <menu+0x2b14>)
 8002fda:	f005 f8e1 	bl	80081a0 <HAL_GPIO_ReadPin>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d115      	bne.n	8003010 <menu+0x2a48>
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <menu+0x2b18>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00e      	beq.n	8003010 <menu+0x2a48>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002ff2:	4b45      	ldr	r3, [pc, #276]	; (8003108 <menu+0x2b40>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b43      	ldr	r3, [pc, #268]	; (8003108 <menu+0x2b40>)
 8002ffc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <menu+0x2b40>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d902      	bls.n	800300c <menu+0x2a44>
				devirmeYukariIleriTmr = 0;
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <menu+0x2b40>)
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800300c:	f7fd fa40 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003010:	2104      	movs	r1, #4
 8003012:	4832      	ldr	r0, [pc, #200]	; (80030dc <menu+0x2b14>)
 8003014:	f005 f8c4 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d115      	bne.n	800304a <menu+0x2a82>
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <menu+0x2b18>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <menu+0x2a82>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <menu+0x2b40>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	3b01      	subs	r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <menu+0x2b40>)
 8003036:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <menu+0x2b40>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d902      	bls.n	8003046 <menu+0x2a7e>
		   		devirmeYukariIleriTmr = 5;
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <menu+0x2b40>)
 8003042:	2205      	movs	r2, #5
 8003044:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003046:	f7fd fa23 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800304a:	2108      	movs	r1, #8
 800304c:	4823      	ldr	r0, [pc, #140]	; (80030dc <menu+0x2b14>)
 800304e:	f005 f8a7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10d      	bne.n	8003074 <menu+0x2aac>
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <menu+0x2b18>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <menu+0x2aac>
			eepromData[22] = devirmeYukariIleriTmr;
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <menu+0x2b40>)
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <menu+0x2b1c>)
 800306c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <menu+0x2b20>)
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <menu+0x2b24>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b19      	cmp	r3, #25
 800307a:	f040 80c4 	bne.w	8003206 <menu+0x2c3e>
		if(devirmeYuruyusSecim == 2) {
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <menu+0x2b28>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d113      	bne.n	80030ae <menu+0x2ae6>
			if(dilSecim == 0) {
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <menu+0x2b04>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <menu+0x2ad2>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <menu+0x2b44>)
 8003090:	2101      	movs	r1, #1
 8003092:	2001      	movs	r0, #1
 8003094:	f7fd f9ac 	bl	80003f0 <lcd_print>
 8003098:	e047      	b.n	800312a <menu+0x2b62>
			} else if(dilSecim == 1) {
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <menu+0x2b04>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d143      	bne.n	800312a <menu+0x2b62>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <menu+0x2b48>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fd f9a2 	bl	80003f0 <lcd_print>
 80030ac:	e03d      	b.n	800312a <menu+0x2b62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <menu+0x2b28>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d139      	bne.n	800312a <menu+0x2b62>
			if(dilSecim == 0) {
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <menu+0x2b04>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12c      	bne.n	8003118 <menu+0x2b50>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <menu+0x2b4c>)
 80030c0:	2101      	movs	r1, #1
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fd f994 	bl	80003f0 <lcd_print>
 80030c8:	e02f      	b.n	800312a <menu+0x2b62>
 80030ca:	bf00      	nop
 80030cc:	20000c6c 	.word	0x20000c6c
 80030d0:	0800c73c 	.word	0x0800c73c
 80030d4:	20000c61 	.word	0x20000c61
 80030d8:	20000c24 	.word	0x20000c24
 80030dc:	40010800 	.word	0x40010800
 80030e0:	20000c7a 	.word	0x20000c7a
 80030e4:	20000be4 	.word	0x20000be4
 80030e8:	20000c77 	.word	0x20000c77
 80030ec:	20000c4c 	.word	0x20000c4c
 80030f0:	20000c5b 	.word	0x20000c5b
 80030f4:	0800c774 	.word	0x0800c774
 80030f8:	0800c788 	.word	0x0800c788
 80030fc:	0800c79c 	.word	0x0800c79c
 8003100:	0800c7b0 	.word	0x0800c7b0
 8003104:	0800c3c8 	.word	0x0800c3c8
 8003108:	20000c62 	.word	0x20000c62
 800310c:	0800c7c4 	.word	0x0800c7c4
 8003110:	0800c7d8 	.word	0x0800c7d8
 8003114:	0800c7ec 	.word	0x0800c7ec
			} else if(dilSecim == 1) {
 8003118:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <menu+0x2d20>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d104      	bne.n	800312a <menu+0x2b62>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003120:	4a72      	ldr	r2, [pc, #456]	; (80032ec <menu+0x2d24>)
 8003122:	2101      	movs	r1, #1
 8003124:	2001      	movs	r0, #1
 8003126:	f7fd f963 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr>=0) {
			if(dilSecim == 0) {
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <menu+0x2d20>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <menu+0x2b76>
				lcd_print(2, 1, "Kac Saniye     ");
 8003132:	4a6f      	ldr	r2, [pc, #444]	; (80032f0 <menu+0x2d28>)
 8003134:	2101      	movs	r1, #1
 8003136:	2002      	movs	r0, #2
 8003138:	f7fd f95a 	bl	80003f0 <lcd_print>
 800313c:	e008      	b.n	8003150 <menu+0x2b88>
			} else if(dilSecim == 1) {
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <menu+0x2d20>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d104      	bne.n	8003150 <menu+0x2b88>
				lcd_print(2, 1, "Second         ");
 8003146:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <menu+0x2d2c>)
 8003148:	2101      	movs	r1, #1
 800314a:	2002      	movs	r0, #2
 800314c:	f7fd f950 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003150:	4b69      	ldr	r3, [pc, #420]	; (80032f8 <menu+0x2d30>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	220a      	movs	r2, #10
 8003156:	4969      	ldr	r1, [pc, #420]	; (80032fc <menu+0x2d34>)
 8003158:	4618      	mov	r0, r3
 800315a:	f008 fd61 	bl	800bc20 <itoa>
		lcd_print(2,16,snum);
 800315e:	4a67      	ldr	r2, [pc, #412]	; (80032fc <menu+0x2d34>)
 8003160:	2110      	movs	r1, #16
 8003162:	2002      	movs	r0, #2
 8003164:	f7fd f944 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003168:	2102      	movs	r1, #2
 800316a:	4865      	ldr	r0, [pc, #404]	; (8003300 <menu+0x2d38>)
 800316c:	f005 f818 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003170:	4603      	mov	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d115      	bne.n	80031a2 <menu+0x2bda>
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <menu+0x2d3c>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <menu+0x2bda>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003184:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <menu+0x2d30>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <menu+0x2d30>)
 800318e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003190:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <menu+0x2d30>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d902      	bls.n	800319e <menu+0x2bd6>
				devirmeAsagiGeriTmr = 0;
 8003198:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <menu+0x2d30>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800319e:	f7fd f977 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a2:	2104      	movs	r1, #4
 80031a4:	4856      	ldr	r0, [pc, #344]	; (8003300 <menu+0x2d38>)
 80031a6:	f004 fffb 	bl	80081a0 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d115      	bne.n	80031dc <menu+0x2c14>
 80031b0:	4b54      	ldr	r3, [pc, #336]	; (8003304 <menu+0x2d3c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <menu+0x2c14>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80031be:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <menu+0x2d30>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <menu+0x2d30>)
 80031c8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80031ca:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <menu+0x2d30>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <menu+0x2c10>
		   		devirmeAsagiGeriTmr = 5;
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <menu+0x2d30>)
 80031d4:	2205      	movs	r2, #5
 80031d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d8:	f7fd f95a 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031dc:	2108      	movs	r1, #8
 80031de:	4848      	ldr	r0, [pc, #288]	; (8003300 <menu+0x2d38>)
 80031e0:	f004 ffde 	bl	80081a0 <HAL_GPIO_ReadPin>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <menu+0x2c3e>
 80031ea:	4b46      	ldr	r3, [pc, #280]	; (8003304 <menu+0x2d3c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f083 0301 	eor.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <menu+0x2c3e>
			eepromData[23] = devirmeAsagiGeriTmr;
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <menu+0x2d30>)
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <menu+0x2d40>)
 80031fe:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <menu+0x2d44>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003206:	4b42      	ldr	r3, [pc, #264]	; (8003310 <menu+0x2d48>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b1a      	cmp	r3, #26
 800320c:	f040 80ec 	bne.w	80033e8 <menu+0x2e20>
		if(dilSecim == 0) {
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <menu+0x2d20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <menu+0x2c5c>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003218:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <menu+0x2d4c>)
 800321a:	2101      	movs	r1, #1
 800321c:	2001      	movs	r0, #1
 800321e:	f7fd f8e7 	bl	80003f0 <lcd_print>
 8003222:	e008      	b.n	8003236 <menu+0x2c6e>
		} else if(dilSecim == 1) {
 8003224:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <menu+0x2d20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d104      	bne.n	8003236 <menu+0x2c6e>
			lcd_print(1, 1, "WORKING TIME    ");
 800322c:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <menu+0x2d50>)
 800322e:	2101      	movs	r1, #1
 8003230:	2001      	movs	r0, #1
 8003232:	f7fd f8dd 	bl	80003f0 <lcd_print>
		}

		if(makineCalismaTmr>99) {
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <menu+0x2d54>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b63      	cmp	r3, #99	; 0x63
 800323c:	d91e      	bls.n	800327c <menu+0x2cb4>
			if(dilSecim == 0) {
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <menu+0x2d20>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <menu+0x2c88>
				lcd_print(2, 1, "Kac Saniye     ");
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <menu+0x2d28>)
 8003248:	2101      	movs	r1, #1
 800324a:	2002      	movs	r0, #2
 800324c:	f7fd f8d0 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <menu+0x2d20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d104      	bne.n	8003262 <menu+0x2c9a>
				lcd_print(2, 1, "Second         ");
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <menu+0x2d2c>)
 800325a:	2101      	movs	r1, #1
 800325c:	2002      	movs	r0, #2
 800325e:	f7fd f8c7 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <menu+0x2d54>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	220a      	movs	r2, #10
 8003268:	4924      	ldr	r1, [pc, #144]	; (80032fc <menu+0x2d34>)
 800326a:	4618      	mov	r0, r3
 800326c:	f008 fcd8 	bl	800bc20 <itoa>
			lcd_print(2,14,snum);
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <menu+0x2d34>)
 8003272:	210e      	movs	r1, #14
 8003274:	2002      	movs	r0, #2
 8003276:	f7fd f8bb 	bl	80003f0 <lcd_print>
 800327a:	e066      	b.n	800334a <menu+0x2d82>

		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <menu+0x2d54>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d923      	bls.n	80032cc <menu+0x2d04>
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <menu+0x2d54>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b63      	cmp	r3, #99	; 0x63
 800328a:	d81f      	bhi.n	80032cc <menu+0x2d04>
			if(dilSecim == 0) {
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <menu+0x2d20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <menu+0x2cd8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <menu+0x2d28>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f7fd f8a9 	bl	80003f0 <lcd_print>
 800329e:	e008      	b.n	80032b2 <menu+0x2cea>
			} else if(dilSecim == 1) {
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <menu+0x2d20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x2cea>
				lcd_print(2, 1, "Second         ");
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <menu+0x2d2c>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7fd f89f 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <menu+0x2d54>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	220a      	movs	r2, #10
 80032b8:	4910      	ldr	r1, [pc, #64]	; (80032fc <menu+0x2d34>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f008 fcb0 	bl	800bc20 <itoa>
			lcd_print(2, 15, snum);
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <menu+0x2d34>)
 80032c2:	210f      	movs	r1, #15
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd f893 	bl	80003f0 <lcd_print>
		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 80032ca:	e03e      	b.n	800334a <menu+0x2d82>
		} else if(makineCalismaTmr <= 9) {
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <menu+0x2d54>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d83a      	bhi.n	800334a <menu+0x2d82>
			if(dilSecim == 0) {
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <menu+0x2d20>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d121      	bne.n	8003320 <menu+0x2d58>
				lcd_print(2, 1, "Kac Saniye     ");
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <menu+0x2d28>)
 80032de:	2101      	movs	r1, #1
 80032e0:	2002      	movs	r0, #2
 80032e2:	f7fd f885 	bl	80003f0 <lcd_print>
 80032e6:	e024      	b.n	8003332 <menu+0x2d6a>
 80032e8:	20000c6c 	.word	0x20000c6c
 80032ec:	0800c800 	.word	0x0800c800
 80032f0:	0800c3c8 	.word	0x0800c3c8
 80032f4:	0800c73c 	.word	0x0800c73c
 80032f8:	20000c63 	.word	0x20000c63
 80032fc:	20000c24 	.word	0x20000c24
 8003300:	40010800 	.word	0x40010800
 8003304:	20000c7a 	.word	0x20000c7a
 8003308:	20000be4 	.word	0x20000be4
 800330c:	20000c77 	.word	0x20000c77
 8003310:	20000c4c 	.word	0x20000c4c
 8003314:	0800c814 	.word	0x0800c814
 8003318:	0800c828 	.word	0x0800c828
 800331c:	20000c64 	.word	0x20000c64
			} else if(dilSecim == 1) {
 8003320:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <menu+0x2f98>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d104      	bne.n	8003332 <menu+0x2d6a>
				lcd_print(2, 1, "Second         ");
 8003328:	4a8e      	ldr	r2, [pc, #568]	; (8003564 <menu+0x2f9c>)
 800332a:	2101      	movs	r1, #1
 800332c:	2002      	movs	r0, #2
 800332e:	f7fd f85f 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003332:	4b8d      	ldr	r3, [pc, #564]	; (8003568 <menu+0x2fa0>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	220a      	movs	r2, #10
 8003338:	498c      	ldr	r1, [pc, #560]	; (800356c <menu+0x2fa4>)
 800333a:	4618      	mov	r0, r3
 800333c:	f008 fc70 	bl	800bc20 <itoa>
			lcd_print(2, 16, snum);
 8003340:	4a8a      	ldr	r2, [pc, #552]	; (800356c <menu+0x2fa4>)
 8003342:	2110      	movs	r1, #16
 8003344:	2002      	movs	r0, #2
 8003346:	f7fd f853 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800334a:	2102      	movs	r1, #2
 800334c:	4888      	ldr	r0, [pc, #544]	; (8003570 <menu+0x2fa8>)
 800334e:	f004 ff27 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d115      	bne.n	8003384 <menu+0x2dbc>
 8003358:	4b86      	ldr	r3, [pc, #536]	; (8003574 <menu+0x2fac>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f083 0301 	eor.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00e      	beq.n	8003384 <menu+0x2dbc>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <menu+0x2fa0>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b7e      	ldr	r3, [pc, #504]	; (8003568 <menu+0x2fa0>)
 8003370:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003372:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <menu+0x2fa0>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2bb4      	cmp	r3, #180	; 0xb4
 8003378:	d902      	bls.n	8003380 <menu+0x2db8>
				makineCalismaTmr = 0;
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <menu+0x2fa0>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003380:	f7fd f886 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003384:	2104      	movs	r1, #4
 8003386:	487a      	ldr	r0, [pc, #488]	; (8003570 <menu+0x2fa8>)
 8003388:	f004 ff0a 	bl	80081a0 <HAL_GPIO_ReadPin>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d115      	bne.n	80033be <menu+0x2df6>
 8003392:	4b78      	ldr	r3, [pc, #480]	; (8003574 <menu+0x2fac>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <menu+0x2df6>
			makineCalismaTmr = makineCalismaTmr - 1;
 80033a0:	4b71      	ldr	r3, [pc, #452]	; (8003568 <menu+0x2fa0>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <menu+0x2fa0>)
 80033aa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80033ac:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <menu+0x2fa0>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2bb5      	cmp	r3, #181	; 0xb5
 80033b2:	d902      	bls.n	80033ba <menu+0x2df2>
		   		makineCalismaTmr = 180;
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <menu+0x2fa0>)
 80033b6:	22b4      	movs	r2, #180	; 0xb4
 80033b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033ba:	f7fd f869 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033be:	2108      	movs	r1, #8
 80033c0:	486b      	ldr	r0, [pc, #428]	; (8003570 <menu+0x2fa8>)
 80033c2:	f004 feed 	bl	80081a0 <HAL_GPIO_ReadPin>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10d      	bne.n	80033e8 <menu+0x2e20>
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <menu+0x2fac>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <menu+0x2e20>
			eepromData[24] = makineCalismaTmr;
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <menu+0x2fa0>)
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <menu+0x2fb0>)
 80033e0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80033e2:	4b66      	ldr	r3, [pc, #408]	; (800357c <menu+0x2fb4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80033e8:	4b65      	ldr	r3, [pc, #404]	; (8003580 <menu+0x2fb8>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b1b      	cmp	r3, #27
 80033ee:	f040 8083 	bne.w	80034f8 <menu+0x2f30>
		lcd_print(1, 1, "BUZZER          ");
 80033f2:	4a64      	ldr	r2, [pc, #400]	; (8003584 <menu+0x2fbc>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7fc fffa 	bl	80003f0 <lcd_print>

		if(buzzer == 0) {
 80033fc:	4b62      	ldr	r3, [pc, #392]	; (8003588 <menu+0x2fc0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d113      	bne.n	800342c <menu+0x2e64>
			if(dilSecim == 0) {
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <menu+0x2f98>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <menu+0x2e50>
				lcd_print(2, 1, "Pasif           ");
 800340c:	4a5f      	ldr	r2, [pc, #380]	; (800358c <menu+0x2fc4>)
 800340e:	2101      	movs	r1, #1
 8003410:	2002      	movs	r0, #2
 8003412:	f7fc ffed 	bl	80003f0 <lcd_print>
 8003416:	e020      	b.n	800345a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003418:	4b51      	ldr	r3, [pc, #324]	; (8003560 <menu+0x2f98>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d11c      	bne.n	800345a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003420:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <menu+0x2fc8>)
 8003422:	2101      	movs	r1, #1
 8003424:	2002      	movs	r0, #2
 8003426:	f7fc ffe3 	bl	80003f0 <lcd_print>
 800342a:	e016      	b.n	800345a <menu+0x2e92>
			}
		} else if(buzzer == 1) {
 800342c:	4b56      	ldr	r3, [pc, #344]	; (8003588 <menu+0x2fc0>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d112      	bne.n	800345a <menu+0x2e92>
			if(dilSecim == 0) {
 8003434:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <menu+0x2f98>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800343c:	4a55      	ldr	r2, [pc, #340]	; (8003594 <menu+0x2fcc>)
 800343e:	2101      	movs	r1, #1
 8003440:	2002      	movs	r0, #2
 8003442:	f7fc ffd5 	bl	80003f0 <lcd_print>
 8003446:	e008      	b.n	800345a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003448:	4b45      	ldr	r3, [pc, #276]	; (8003560 <menu+0x2f98>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d104      	bne.n	800345a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003450:	4a51      	ldr	r2, [pc, #324]	; (8003598 <menu+0x2fd0>)
 8003452:	2101      	movs	r1, #1
 8003454:	2002      	movs	r0, #2
 8003456:	f7fc ffcb 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800345a:	2102      	movs	r1, #2
 800345c:	4844      	ldr	r0, [pc, #272]	; (8003570 <menu+0x2fa8>)
 800345e:	f004 fe9f 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <menu+0x2ecc>
 8003468:	4b42      	ldr	r3, [pc, #264]	; (8003574 <menu+0x2fac>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <menu+0x2ecc>
			buzzer = buzzer + 1;
 8003476:	4b44      	ldr	r3, [pc, #272]	; (8003588 <menu+0x2fc0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b42      	ldr	r3, [pc, #264]	; (8003588 <menu+0x2fc0>)
 8003480:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <menu+0x2fc0>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d902      	bls.n	8003490 <menu+0x2ec8>
				buzzer = 0;
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <menu+0x2fc0>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003490:	f7fc fffe 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003494:	2104      	movs	r1, #4
 8003496:	4836      	ldr	r0, [pc, #216]	; (8003570 <menu+0x2fa8>)
 8003498:	f004 fe82 	bl	80081a0 <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d115      	bne.n	80034ce <menu+0x2f06>
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <menu+0x2fac>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <menu+0x2f06>
			buzzer = buzzer - 1;
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <menu+0x2fc0>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <menu+0x2fc0>)
 80034ba:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <menu+0x2fc0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <menu+0x2f02>
		   		buzzer = 1;
 80034c4:	4b30      	ldr	r3, [pc, #192]	; (8003588 <menu+0x2fc0>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ca:	f7fc ffe1 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ce:	2108      	movs	r1, #8
 80034d0:	4827      	ldr	r0, [pc, #156]	; (8003570 <menu+0x2fa8>)
 80034d2:	f004 fe65 	bl	80081a0 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10d      	bne.n	80034f8 <menu+0x2f30>
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <menu+0x2fac>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <menu+0x2f30>
			eepromData[25] = buzzer;
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <menu+0x2fc0>)
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <menu+0x2fb0>)
 80034f0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <menu+0x2fb4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <menu+0x2fb8>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b1c      	cmp	r3, #28
 80034fe:	f040 80ab 	bne.w	8003658 <menu+0x3090>
		calismaSayModu = 0;
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <menu+0x2fd4>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <menu+0x2fd8>)
 800350a:	2101      	movs	r1, #1
 800350c:	2001      	movs	r0, #1
 800350e:	f7fc ff6f 	bl	80003f0 <lcd_print>

		if(demoMode == 0) {
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <menu+0x2fdc>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <menu+0x2f7a>
			if(dilSecim == 0) {
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <menu+0x2f98>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <menu+0x2f66>
				lcd_print(2, 1, "Pasif           ");
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <menu+0x2fc4>)
 8003524:	2101      	movs	r1, #1
 8003526:	2002      	movs	r0, #2
 8003528:	f7fc ff62 	bl	80003f0 <lcd_print>
 800352c:	e045      	b.n	80035ba <menu+0x2ff2>
			} else if(dilSecim == 1) {
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <menu+0x2f98>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d141      	bne.n	80035ba <menu+0x2ff2>
				lcd_print(2, 1, "Passive         ");
 8003536:	4a16      	ldr	r2, [pc, #88]	; (8003590 <menu+0x2fc8>)
 8003538:	2101      	movs	r1, #1
 800353a:	2002      	movs	r0, #2
 800353c:	f7fc ff58 	bl	80003f0 <lcd_print>
 8003540:	e03b      	b.n	80035ba <menu+0x2ff2>
			}
		} else if(demoMode == 1) {
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <menu+0x2fdc>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d137      	bne.n	80035ba <menu+0x2ff2>
			if(dilSecim == 0){
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <menu+0x2f98>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d12a      	bne.n	80035a8 <menu+0x2fe0>
				lcd_print(2, 1, "Aktif           ");
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <menu+0x2fcc>)
 8003554:	2101      	movs	r1, #1
 8003556:	2002      	movs	r0, #2
 8003558:	f7fc ff4a 	bl	80003f0 <lcd_print>
 800355c:	e02d      	b.n	80035ba <menu+0x2ff2>
 800355e:	bf00      	nop
 8003560:	20000c6c 	.word	0x20000c6c
 8003564:	0800c73c 	.word	0x0800c73c
 8003568:	20000c64 	.word	0x20000c64
 800356c:	20000c24 	.word	0x20000c24
 8003570:	40010800 	.word	0x40010800
 8003574:	20000c7a 	.word	0x20000c7a
 8003578:	20000be4 	.word	0x20000be4
 800357c:	20000c77 	.word	0x20000c77
 8003580:	20000c4c 	.word	0x20000c4c
 8003584:	0800c83c 	.word	0x0800c83c
 8003588:	20000c68 	.word	0x20000c68
 800358c:	0800c164 	.word	0x0800c164
 8003590:	0800c178 	.word	0x0800c178
 8003594:	0800c1c4 	.word	0x0800c1c4
 8003598:	0800c1d8 	.word	0x0800c1d8
 800359c:	20000c6b 	.word	0x20000c6b
 80035a0:	0800c850 	.word	0x0800c850
 80035a4:	20000c6a 	.word	0x20000c6a
			} else if(dilSecim == 1) {
 80035a8:	4b71      	ldr	r3, [pc, #452]	; (8003770 <menu+0x31a8>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d104      	bne.n	80035ba <menu+0x2ff2>
				lcd_print(2, 1, "Active          ");
 80035b0:	4a70      	ldr	r2, [pc, #448]	; (8003774 <menu+0x31ac>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	2002      	movs	r0, #2
 80035b6:	f7fc ff1b 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ba:	2102      	movs	r1, #2
 80035bc:	486e      	ldr	r0, [pc, #440]	; (8003778 <menu+0x31b0>)
 80035be:	f004 fdef 	bl	80081a0 <HAL_GPIO_ReadPin>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d115      	bne.n	80035f4 <menu+0x302c>
 80035c8:	4b6c      	ldr	r3, [pc, #432]	; (800377c <menu+0x31b4>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <menu+0x302c>
			demoMode = demoMode + 1;
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <menu+0x31b8>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b68      	ldr	r3, [pc, #416]	; (8003780 <menu+0x31b8>)
 80035e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <menu+0x31b8>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d902      	bls.n	80035f0 <menu+0x3028>
				demoMode = 0;
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <menu+0x31b8>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035f0:	f7fc ff4e 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f4:	2104      	movs	r1, #4
 80035f6:	4860      	ldr	r0, [pc, #384]	; (8003778 <menu+0x31b0>)
 80035f8:	f004 fdd2 	bl	80081a0 <HAL_GPIO_ReadPin>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d115      	bne.n	800362e <menu+0x3066>
 8003602:	4b5e      	ldr	r3, [pc, #376]	; (800377c <menu+0x31b4>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <menu+0x3066>
			demoMode = demoMode - 1;
 8003610:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <menu+0x31b8>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b59      	ldr	r3, [pc, #356]	; (8003780 <menu+0x31b8>)
 800361a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800361c:	4b58      	ldr	r3, [pc, #352]	; (8003780 <menu+0x31b8>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <menu+0x3062>
		   		demoMode = 1;
 8003624:	4b56      	ldr	r3, [pc, #344]	; (8003780 <menu+0x31b8>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800362a:	f7fc ff31 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800362e:	2108      	movs	r1, #8
 8003630:	4851      	ldr	r0, [pc, #324]	; (8003778 <menu+0x31b0>)
 8003632:	f004 fdb5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10d      	bne.n	8003658 <menu+0x3090>
 800363c:	4b4f      	ldr	r3, [pc, #316]	; (800377c <menu+0x31b4>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <menu+0x3090>
			eepromData[26] = demoMode;
 800364a:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <menu+0x31b8>)
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <menu+0x31bc>)
 8003650:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <menu+0x31c0>)
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <menu+0x31c4>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b1d      	cmp	r3, #29
 800365e:	f040 8132 	bne.w	80038c6 <menu+0x32fe>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003662:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <menu+0x31c8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <menu+0x30ca>
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <menu+0x31cc>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <menu+0x30ca>
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <menu+0x31d0>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <menu+0x30ca>
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <menu+0x31d4>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <menu+0x30ca>
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <menu+0x31d8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <menu+0x30ca>
			calismaSayisiYar = 0;
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <menu+0x31dc>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e002      	b.n	8003698 <menu+0x30d0>
		} else {
			calismaSayisiYar = 1;
 8003692:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <menu+0x31dc>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <menu+0x31e0>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d154      	bne.n	800374a <menu+0x3182>
			if(dilSecim == 0) {
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <menu+0x31a8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <menu+0x30ec>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80036a8:	4a40      	ldr	r2, [pc, #256]	; (80037ac <menu+0x31e4>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7fc fe9f 	bl	80003f0 <lcd_print>
 80036b2:	e008      	b.n	80036c6 <menu+0x30fe>
			} else if(dilSecim == 1) {
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <menu+0x31a8>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d104      	bne.n	80036c6 <menu+0x30fe>
				lcd_print(1, 1, "Working Cycle   ");
 80036bc:	4a3c      	ldr	r2, [pc, #240]	; (80037b0 <menu+0x31e8>)
 80036be:	2101      	movs	r1, #1
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7fc fe95 	bl	80003f0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <menu+0x31d8>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	220a      	movs	r2, #10
 80036cc:	4939      	ldr	r1, [pc, #228]	; (80037b4 <menu+0x31ec>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f008 faa6 	bl	800bc20 <itoa>
			lcd_print(2, 12, snum);
 80036d4:	4a37      	ldr	r2, [pc, #220]	; (80037b4 <menu+0x31ec>)
 80036d6:	210c      	movs	r1, #12
 80036d8:	2002      	movs	r0, #2
 80036da:	f7fc fe89 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <menu+0x31d4>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	220a      	movs	r2, #10
 80036e4:	4933      	ldr	r1, [pc, #204]	; (80037b4 <menu+0x31ec>)
 80036e6:	4618      	mov	r0, r3
 80036e8:	f008 fa9a 	bl	800bc20 <itoa>
			lcd_print(2, 13, snum);
 80036ec:	4a31      	ldr	r2, [pc, #196]	; (80037b4 <menu+0x31ec>)
 80036ee:	210d      	movs	r1, #13
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7fc fe7d 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <menu+0x31d0>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	220a      	movs	r2, #10
 80036fc:	492d      	ldr	r1, [pc, #180]	; (80037b4 <menu+0x31ec>)
 80036fe:	4618      	mov	r0, r3
 8003700:	f008 fa8e 	bl	800bc20 <itoa>
			lcd_print(2, 14, snum);
 8003704:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <menu+0x31ec>)
 8003706:	210e      	movs	r1, #14
 8003708:	2002      	movs	r0, #2
 800370a:	f7fc fe71 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <menu+0x31cc>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	220a      	movs	r2, #10
 8003714:	4927      	ldr	r1, [pc, #156]	; (80037b4 <menu+0x31ec>)
 8003716:	4618      	mov	r0, r3
 8003718:	f008 fa82 	bl	800bc20 <itoa>
			lcd_print(2, 15, snum);
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <menu+0x31ec>)
 800371e:	210f      	movs	r1, #15
 8003720:	2002      	movs	r0, #2
 8003722:	f7fc fe65 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <menu+0x31c8>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	220a      	movs	r2, #10
 800372c:	4921      	ldr	r1, [pc, #132]	; (80037b4 <menu+0x31ec>)
 800372e:	4618      	mov	r0, r3
 8003730:	f008 fa76 	bl	800bc20 <itoa>
			lcd_print(2, 16, snum);
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <menu+0x31ec>)
 8003736:	2110      	movs	r1, #16
 8003738:	2002      	movs	r0, #2
 800373a:	f7fc fe59 	bl	80003f0 <lcd_print>

			lcd_print(2, 1, "           ");
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <menu+0x31f0>)
 8003740:	2101      	movs	r1, #1
 8003742:	2002      	movs	r0, #2
 8003744:	f7fc fe54 	bl	80003f0 <lcd_print>
 8003748:	e048      	b.n	80037dc <menu+0x3214>
		} else if(calismaSayModu == 1) {
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <menu+0x31e0>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d144      	bne.n	80037dc <menu+0x3214>
			if(dilSecim == 0) {
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <menu+0x31a8>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d132      	bne.n	80037c0 <menu+0x31f8>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800375a:	4a14      	ldr	r2, [pc, #80]	; (80037ac <menu+0x31e4>)
 800375c:	2101      	movs	r1, #1
 800375e:	2001      	movs	r0, #1
 8003760:	f7fc fe46 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <menu+0x31f4>)
 8003766:	2101      	movs	r1, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f7fc fe41 	bl	80003f0 <lcd_print>
 800376e:	e035      	b.n	80037dc <menu+0x3214>
 8003770:	20000c6c 	.word	0x20000c6c
 8003774:	0800c1d8 	.word	0x0800c1d8
 8003778:	40010800 	.word	0x40010800
 800377c:	20000c7a 	.word	0x20000c7a
 8003780:	20000c6a 	.word	0x20000c6a
 8003784:	20000be4 	.word	0x20000be4
 8003788:	20000c77 	.word	0x20000c77
 800378c:	20000c4c 	.word	0x20000c4c
 8003790:	20000c49 	.word	0x20000c49
 8003794:	20000c4a 	.word	0x20000c4a
 8003798:	20000910 	.word	0x20000910
 800379c:	20000911 	.word	0x20000911
 80037a0:	20000c4b 	.word	0x20000c4b
 80037a4:	20000c8c 	.word	0x20000c8c
 80037a8:	20000c6b 	.word	0x20000c6b
 80037ac:	0800c860 	.word	0x0800c860
 80037b0:	0800c874 	.word	0x0800c874
 80037b4:	20000c24 	.word	0x20000c24
 80037b8:	0800c888 	.word	0x0800c888
 80037bc:	0800c894 	.word	0x0800c894
			} else if(dilSecim == 1) {
 80037c0:	4b95      	ldr	r3, [pc, #596]	; (8003a18 <menu+0x3450>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d109      	bne.n	80037dc <menu+0x3214>
				lcd_print(1, 1, "Working Cycle   ");
 80037c8:	4a94      	ldr	r2, [pc, #592]	; (8003a1c <menu+0x3454>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	2001      	movs	r0, #1
 80037ce:	f7fc fe0f 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80037d2:	4a93      	ldr	r2, [pc, #588]	; (8003a20 <menu+0x3458>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	2002      	movs	r0, #2
 80037d8:	f7fc fe0a 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037dc:	2102      	movs	r1, #2
 80037de:	4891      	ldr	r0, [pc, #580]	; (8003a24 <menu+0x345c>)
 80037e0:	f004 fcde 	bl	80081a0 <HAL_GPIO_ReadPin>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d119      	bne.n	800381e <menu+0x3256>
 80037ea:	4b8f      	ldr	r3, [pc, #572]	; (8003a28 <menu+0x3460>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f083 0301 	eor.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <menu+0x3256>
 80037f8:	4b8c      	ldr	r3, [pc, #560]	; (8003a2c <menu+0x3464>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <menu+0x3256>
			calismaSayModu = calismaSayModu + 1;
 8003800:	4b8b      	ldr	r3, [pc, #556]	; (8003a30 <menu+0x3468>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <menu+0x3468>)
 800380a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800380c:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <menu+0x3468>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d902      	bls.n	800381a <menu+0x3252>
				calismaSayModu = 0;
 8003814:	4b86      	ldr	r3, [pc, #536]	; (8003a30 <menu+0x3468>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800381a:	f7fc fe39 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800381e:	2104      	movs	r1, #4
 8003820:	4880      	ldr	r0, [pc, #512]	; (8003a24 <menu+0x345c>)
 8003822:	f004 fcbd 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d119      	bne.n	8003860 <menu+0x3298>
 800382c:	4b7e      	ldr	r3, [pc, #504]	; (8003a28 <menu+0x3460>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <menu+0x3298>
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <menu+0x3464>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00e      	beq.n	8003860 <menu+0x3298>
			calismaSayModu = calismaSayModu - 1;
 8003842:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <menu+0x3468>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3b01      	subs	r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <menu+0x3468>)
 800384c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <menu+0x3468>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <menu+0x3294>
		   		calismaSayModu = 1;
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <menu+0x3468>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800385c:	f7fc fe18 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003860:	2108      	movs	r1, #8
 8003862:	4870      	ldr	r0, [pc, #448]	; (8003a24 <menu+0x345c>)
 8003864:	f004 fc9c 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d12b      	bne.n	80038c6 <menu+0x32fe>
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <menu+0x3460>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d024      	beq.n	80038c6 <menu+0x32fe>
			eepromData[32] = 0;
 800387c:	4b6d      	ldr	r3, [pc, #436]	; (8003a34 <menu+0x346c>)
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003884:	4b6b      	ldr	r3, [pc, #428]	; (8003a34 <menu+0x346c>)
 8003886:	2200      	movs	r2, #0
 8003888:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <menu+0x346c>)
 800388c:	2200      	movs	r2, #0
 800388e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <menu+0x346c>)
 8003892:	2200      	movs	r2, #0
 8003894:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <menu+0x346c>)
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <menu+0x3470>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80038a2:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <menu+0x3474>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80038a8:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <menu+0x3478>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80038ae:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <menu+0x347c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80038b4:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <menu+0x3480>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <menu+0x3468>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80038c0:	4b62      	ldr	r3, [pc, #392]	; (8003a4c <menu+0x3484>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <menu+0x3488>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b1e      	cmp	r3, #30
 80038cc:	d16f      	bne.n	80039ae <menu+0x33e6>
		calismaSayModu = 0;
 80038ce:	4b58      	ldr	r3, [pc, #352]	; (8003a30 <menu+0x3468>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <menu+0x3450>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <menu+0x332a>
			lcd_print(1, 1, "DIL SECIMI      ");
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <menu+0x348c>)
 80038de:	2101      	movs	r1, #1
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7fc fd85 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80038e6:	4a5c      	ldr	r2, [pc, #368]	; (8003a58 <menu+0x3490>)
 80038e8:	2101      	movs	r1, #1
 80038ea:	2002      	movs	r0, #2
 80038ec:	f7fc fd80 	bl	80003f0 <lcd_print>
 80038f0:	e00d      	b.n	800390e <menu+0x3346>
		} else if(dilSecim == 1) {
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <menu+0x3450>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d109      	bne.n	800390e <menu+0x3346>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80038fa:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <menu+0x3494>)
 80038fc:	2101      	movs	r1, #1
 80038fe:	2001      	movs	r0, #1
 8003900:	f7fc fd76 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003904:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <menu+0x3498>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f7fc fd71 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4844      	ldr	r0, [pc, #272]	; (8003a24 <menu+0x345c>)
 8003912:	f004 fc45 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d115      	bne.n	8003948 <menu+0x3380>
 800391c:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <menu+0x3460>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <menu+0x3380>
			dilSecim = dilSecim + 1;
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <menu+0x3450>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <menu+0x3450>)
 8003934:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <menu+0x3450>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d902      	bls.n	8003944 <menu+0x337c>
				dilSecim = 0;
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <menu+0x3450>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003944:	f7fc fda4 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003948:	2104      	movs	r1, #4
 800394a:	4836      	ldr	r0, [pc, #216]	; (8003a24 <menu+0x345c>)
 800394c:	f004 fc28 	bl	80081a0 <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d115      	bne.n	8003982 <menu+0x33ba>
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <menu+0x3460>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <menu+0x33ba>
			dilSecim = dilSecim - 1;
 8003964:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <menu+0x3450>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <menu+0x3450>)
 800396e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003970:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <menu+0x3450>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <menu+0x33b6>
		   		dilSecim = 1;
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <menu+0x3450>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800397e:	f7fc fd87 	bl	8000490 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003982:	2108      	movs	r1, #8
 8003984:	4827      	ldr	r0, [pc, #156]	; (8003a24 <menu+0x345c>)
 8003986:	f004 fc0b 	bl	80081a0 <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10e      	bne.n	80039ae <menu+0x33e6>
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <menu+0x3460>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <menu+0x33e6>
			eepromData[33] = dilSecim;
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <menu+0x3450>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <menu+0x346c>)
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <menu+0x3484>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80039ae:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <menu+0x3488>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b1f      	cmp	r3, #31
 80039b4:	d12e      	bne.n	8003a14 <menu+0x344c>
		if(dilSecim == 0) {
 80039b6:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <menu+0x3450>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <menu+0x340c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80039be:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <menu+0x349c>)
 80039c0:	2101      	movs	r1, #1
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7fc fd14 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80039c8:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <menu+0x34a0>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7fc fd0f 	bl	80003f0 <lcd_print>
 80039d2:	e00d      	b.n	80039f0 <menu+0x3428>
		} else if(dilSecim == 1) {
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <menu+0x3450>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d109      	bne.n	80039f0 <menu+0x3428>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <menu+0x34a4>)
 80039de:	2101      	movs	r1, #1
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7fc fd05 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80039e6:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <menu+0x34a8>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	2002      	movs	r0, #2
 80039ec:	f7fc fd00 	bl	80003f0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80039f0:	2108      	movs	r1, #8
 80039f2:	480c      	ldr	r0, [pc, #48]	; (8003a24 <menu+0x345c>)
 80039f4:	f004 fbd4 	bl	80081a0 <HAL_GPIO_ReadPin>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10a      	bne.n	8003a14 <menu+0x344c>
			menuGiris = 0;
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <menu+0x34ac>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003a04:	f7fc fd09 	bl	800041a <lcd_clear>
			HAL_Delay(500);
 8003a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a0c:	f003 ff3a 	bl	8007884 <HAL_Delay>
			NVIC_SystemReset();
 8003a10:	f7fc fd0e 	bl	8000430 <__NVIC_SystemReset>
		}
	}
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000c6c 	.word	0x20000c6c
 8003a1c:	0800c874 	.word	0x0800c874
 8003a20:	0800c8a8 	.word	0x0800c8a8
 8003a24:	40010800 	.word	0x40010800
 8003a28:	20000c7a 	.word	0x20000c7a
 8003a2c:	20000c8c 	.word	0x20000c8c
 8003a30:	20000c6b 	.word	0x20000c6b
 8003a34:	20000be4 	.word	0x20000be4
 8003a38:	20000c4b 	.word	0x20000c4b
 8003a3c:	20000911 	.word	0x20000911
 8003a40:	20000910 	.word	0x20000910
 8003a44:	20000c4a 	.word	0x20000c4a
 8003a48:	20000c49 	.word	0x20000c49
 8003a4c:	20000c77 	.word	0x20000c77
 8003a50:	20000c4c 	.word	0x20000c4c
 8003a54:	0800c8bc 	.word	0x0800c8bc
 8003a58:	0800c8d0 	.word	0x0800c8d0
 8003a5c:	0800c8e4 	.word	0x0800c8e4
 8003a60:	0800c8f8 	.word	0x0800c8f8
 8003a64:	0800c90c 	.word	0x0800c90c
 8003a68:	0800c920 	.word	0x0800c920
 8003a6c:	0800c934 	.word	0x0800c934
 8003a70:	0800c948 	.word	0x0800c948
 8003a74:	20000c69 	.word	0x20000c69

08003a78 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003a82:	48a9      	ldr	r0, [pc, #676]	; (8003d28 <loadMenuTexts+0x2b0>)
 8003a84:	f7fc fcea 	bl	800045c <copyText>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4aa8      	ldr	r2, [pc, #672]	; (8003d2c <loadMenuTexts+0x2b4>)
 8003a8c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003a8e:	48a8      	ldr	r0, [pc, #672]	; (8003d30 <loadMenuTexts+0x2b8>)
 8003a90:	f7fc fce4 	bl	800045c <copyText>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4aa7      	ldr	r2, [pc, #668]	; (8003d34 <loadMenuTexts+0x2bc>)
 8003a98:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003a9a:	48a7      	ldr	r0, [pc, #668]	; (8003d38 <loadMenuTexts+0x2c0>)
 8003a9c:	f7fc fcde 	bl	800045c <copyText>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4aa6      	ldr	r2, [pc, #664]	; (8003d3c <loadMenuTexts+0x2c4>)
 8003aa4:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003aa6:	48a6      	ldr	r0, [pc, #664]	; (8003d40 <loadMenuTexts+0x2c8>)
 8003aa8:	f7fc fcd8 	bl	800045c <copyText>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4aa5      	ldr	r2, [pc, #660]	; (8003d44 <loadMenuTexts+0x2cc>)
 8003ab0:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003ab2:	48a5      	ldr	r0, [pc, #660]	; (8003d48 <loadMenuTexts+0x2d0>)
 8003ab4:	f7fc fcd2 	bl	800045c <copyText>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4aa4      	ldr	r2, [pc, #656]	; (8003d4c <loadMenuTexts+0x2d4>)
 8003abc:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003abe:	48a4      	ldr	r0, [pc, #656]	; (8003d50 <loadMenuTexts+0x2d8>)
 8003ac0:	f7fc fccc 	bl	800045c <copyText>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4aa3      	ldr	r2, [pc, #652]	; (8003d54 <loadMenuTexts+0x2dc>)
 8003ac8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003aca:	48a3      	ldr	r0, [pc, #652]	; (8003d58 <loadMenuTexts+0x2e0>)
 8003acc:	f7fc fcc6 	bl	800045c <copyText>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4aa2      	ldr	r2, [pc, #648]	; (8003d5c <loadMenuTexts+0x2e4>)
 8003ad4:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 82d1 	bne.w	8004080 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003ade:	48a0      	ldr	r0, [pc, #640]	; (8003d60 <loadMenuTexts+0x2e8>)
 8003ae0:	f7fc fcbc 	bl	800045c <copyText>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4a9f      	ldr	r2, [pc, #636]	; (8003d64 <loadMenuTexts+0x2ec>)
 8003ae8:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003aea:	489f      	ldr	r0, [pc, #636]	; (8003d68 <loadMenuTexts+0x2f0>)
 8003aec:	f7fc fcb6 	bl	800045c <copyText>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4a9e      	ldr	r2, [pc, #632]	; (8003d6c <loadMenuTexts+0x2f4>)
 8003af4:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003af6:	489e      	ldr	r0, [pc, #632]	; (8003d70 <loadMenuTexts+0x2f8>)
 8003af8:	f7fc fcb0 	bl	800045c <copyText>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a9d      	ldr	r2, [pc, #628]	; (8003d74 <loadMenuTexts+0x2fc>)
 8003b00:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003b02:	489d      	ldr	r0, [pc, #628]	; (8003d78 <loadMenuTexts+0x300>)
 8003b04:	f7fc fcaa 	bl	800045c <copyText>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a9c      	ldr	r2, [pc, #624]	; (8003d7c <loadMenuTexts+0x304>)
 8003b0c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003b0e:	489c      	ldr	r0, [pc, #624]	; (8003d80 <loadMenuTexts+0x308>)
 8003b10:	f7fc fca4 	bl	800045c <copyText>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4a9b      	ldr	r2, [pc, #620]	; (8003d84 <loadMenuTexts+0x30c>)
 8003b18:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003b1a:	489b      	ldr	r0, [pc, #620]	; (8003d88 <loadMenuTexts+0x310>)
 8003b1c:	f7fc fc9e 	bl	800045c <copyText>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4a9a      	ldr	r2, [pc, #616]	; (8003d8c <loadMenuTexts+0x314>)
 8003b24:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003b26:	489a      	ldr	r0, [pc, #616]	; (8003d90 <loadMenuTexts+0x318>)
 8003b28:	f7fc fc98 	bl	800045c <copyText>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4a99      	ldr	r2, [pc, #612]	; (8003d94 <loadMenuTexts+0x31c>)
 8003b30:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003b32:	4899      	ldr	r0, [pc, #612]	; (8003d98 <loadMenuTexts+0x320>)
 8003b34:	f7fc fc92 	bl	800045c <copyText>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4a98      	ldr	r2, [pc, #608]	; (8003d9c <loadMenuTexts+0x324>)
 8003b3c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003b3e:	4898      	ldr	r0, [pc, #608]	; (8003da0 <loadMenuTexts+0x328>)
 8003b40:	f7fc fc8c 	bl	800045c <copyText>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a97      	ldr	r2, [pc, #604]	; (8003da4 <loadMenuTexts+0x32c>)
 8003b48:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003b4a:	4897      	ldr	r0, [pc, #604]	; (8003da8 <loadMenuTexts+0x330>)
 8003b4c:	f7fc fc86 	bl	800045c <copyText>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4a96      	ldr	r2, [pc, #600]	; (8003dac <loadMenuTexts+0x334>)
 8003b54:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003b56:	4896      	ldr	r0, [pc, #600]	; (8003db0 <loadMenuTexts+0x338>)
 8003b58:	f7fc fc80 	bl	800045c <copyText>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a95      	ldr	r2, [pc, #596]	; (8003db4 <loadMenuTexts+0x33c>)
 8003b60:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003b62:	4895      	ldr	r0, [pc, #596]	; (8003db8 <loadMenuTexts+0x340>)
 8003b64:	f7fc fc7a 	bl	800045c <copyText>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4a94      	ldr	r2, [pc, #592]	; (8003dbc <loadMenuTexts+0x344>)
 8003b6c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003b6e:	4894      	ldr	r0, [pc, #592]	; (8003dc0 <loadMenuTexts+0x348>)
 8003b70:	f7fc fc74 	bl	800045c <copyText>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a93      	ldr	r2, [pc, #588]	; (8003dc4 <loadMenuTexts+0x34c>)
 8003b78:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003b7a:	4893      	ldr	r0, [pc, #588]	; (8003dc8 <loadMenuTexts+0x350>)
 8003b7c:	f7fc fc6e 	bl	800045c <copyText>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4a92      	ldr	r2, [pc, #584]	; (8003dcc <loadMenuTexts+0x354>)
 8003b84:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003b86:	4892      	ldr	r0, [pc, #584]	; (8003dd0 <loadMenuTexts+0x358>)
 8003b88:	f7fc fc68 	bl	800045c <copyText>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4a91      	ldr	r2, [pc, #580]	; (8003dd4 <loadMenuTexts+0x35c>)
 8003b90:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003b92:	4891      	ldr	r0, [pc, #580]	; (8003dd8 <loadMenuTexts+0x360>)
 8003b94:	f7fc fc62 	bl	800045c <copyText>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <loadMenuTexts+0x364>)
 8003b9c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003b9e:	4890      	ldr	r0, [pc, #576]	; (8003de0 <loadMenuTexts+0x368>)
 8003ba0:	f7fc fc5c 	bl	800045c <copyText>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a8f      	ldr	r2, [pc, #572]	; (8003de4 <loadMenuTexts+0x36c>)
 8003ba8:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003baa:	488f      	ldr	r0, [pc, #572]	; (8003de8 <loadMenuTexts+0x370>)
 8003bac:	f7fc fc56 	bl	800045c <copyText>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a8e      	ldr	r2, [pc, #568]	; (8003dec <loadMenuTexts+0x374>)
 8003bb4:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003bb6:	488e      	ldr	r0, [pc, #568]	; (8003df0 <loadMenuTexts+0x378>)
 8003bb8:	f7fc fc50 	bl	800045c <copyText>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4a8d      	ldr	r2, [pc, #564]	; (8003df4 <loadMenuTexts+0x37c>)
 8003bc0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003bc2:	488d      	ldr	r0, [pc, #564]	; (8003df8 <loadMenuTexts+0x380>)
 8003bc4:	f7fc fc4a 	bl	800045c <copyText>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4a8c      	ldr	r2, [pc, #560]	; (8003dfc <loadMenuTexts+0x384>)
 8003bcc:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003bce:	488c      	ldr	r0, [pc, #560]	; (8003e00 <loadMenuTexts+0x388>)
 8003bd0:	f7fc fc44 	bl	800045c <copyText>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4a8b      	ldr	r2, [pc, #556]	; (8003e04 <loadMenuTexts+0x38c>)
 8003bd8:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003bda:	488b      	ldr	r0, [pc, #556]	; (8003e08 <loadMenuTexts+0x390>)
 8003bdc:	f7fc fc3e 	bl	800045c <copyText>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a8a      	ldr	r2, [pc, #552]	; (8003e0c <loadMenuTexts+0x394>)
 8003be4:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003be6:	488a      	ldr	r0, [pc, #552]	; (8003e10 <loadMenuTexts+0x398>)
 8003be8:	f7fc fc38 	bl	800045c <copyText>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4a89      	ldr	r2, [pc, #548]	; (8003e14 <loadMenuTexts+0x39c>)
 8003bf0:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003bf2:	4889      	ldr	r0, [pc, #548]	; (8003e18 <loadMenuTexts+0x3a0>)
 8003bf4:	f7fc fc32 	bl	800045c <copyText>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a88      	ldr	r2, [pc, #544]	; (8003e1c <loadMenuTexts+0x3a4>)
 8003bfc:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003bfe:	4888      	ldr	r0, [pc, #544]	; (8003e20 <loadMenuTexts+0x3a8>)
 8003c00:	f7fc fc2c 	bl	800045c <copyText>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4a87      	ldr	r2, [pc, #540]	; (8003e24 <loadMenuTexts+0x3ac>)
 8003c08:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003c0a:	4887      	ldr	r0, [pc, #540]	; (8003e28 <loadMenuTexts+0x3b0>)
 8003c0c:	f7fc fc26 	bl	800045c <copyText>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4a86      	ldr	r2, [pc, #536]	; (8003e2c <loadMenuTexts+0x3b4>)
 8003c14:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003c16:	4886      	ldr	r0, [pc, #536]	; (8003e30 <loadMenuTexts+0x3b8>)
 8003c18:	f7fc fc20 	bl	800045c <copyText>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4a85      	ldr	r2, [pc, #532]	; (8003e34 <loadMenuTexts+0x3bc>)
 8003c20:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003c22:	4885      	ldr	r0, [pc, #532]	; (8003e38 <loadMenuTexts+0x3c0>)
 8003c24:	f7fc fc1a 	bl	800045c <copyText>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4a84      	ldr	r2, [pc, #528]	; (8003e3c <loadMenuTexts+0x3c4>)
 8003c2c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003c2e:	4884      	ldr	r0, [pc, #528]	; (8003e40 <loadMenuTexts+0x3c8>)
 8003c30:	f7fc fc14 	bl	800045c <copyText>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <loadMenuTexts+0x3cc>)
 8003c38:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003c3a:	4883      	ldr	r0, [pc, #524]	; (8003e48 <loadMenuTexts+0x3d0>)
 8003c3c:	f7fc fc0e 	bl	800045c <copyText>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4a82      	ldr	r2, [pc, #520]	; (8003e4c <loadMenuTexts+0x3d4>)
 8003c44:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003c46:	4882      	ldr	r0, [pc, #520]	; (8003e50 <loadMenuTexts+0x3d8>)
 8003c48:	f7fc fc08 	bl	800045c <copyText>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a81      	ldr	r2, [pc, #516]	; (8003e54 <loadMenuTexts+0x3dc>)
 8003c50:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003c52:	4881      	ldr	r0, [pc, #516]	; (8003e58 <loadMenuTexts+0x3e0>)
 8003c54:	f7fc fc02 	bl	800045c <copyText>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <loadMenuTexts+0x3e4>)
 8003c5c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003c5e:	4880      	ldr	r0, [pc, #512]	; (8003e60 <loadMenuTexts+0x3e8>)
 8003c60:	f7fc fbfc 	bl	800045c <copyText>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a7f      	ldr	r2, [pc, #508]	; (8003e64 <loadMenuTexts+0x3ec>)
 8003c68:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003c6a:	487f      	ldr	r0, [pc, #508]	; (8003e68 <loadMenuTexts+0x3f0>)
 8003c6c:	f7fc fbf6 	bl	800045c <copyText>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a7e      	ldr	r2, [pc, #504]	; (8003e6c <loadMenuTexts+0x3f4>)
 8003c74:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003c76:	487e      	ldr	r0, [pc, #504]	; (8003e70 <loadMenuTexts+0x3f8>)
 8003c78:	f7fc fbf0 	bl	800045c <copyText>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a7d      	ldr	r2, [pc, #500]	; (8003e74 <loadMenuTexts+0x3fc>)
 8003c80:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003c82:	487d      	ldr	r0, [pc, #500]	; (8003e78 <loadMenuTexts+0x400>)
 8003c84:	f7fc fbea 	bl	800045c <copyText>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4a7c      	ldr	r2, [pc, #496]	; (8003e7c <loadMenuTexts+0x404>)
 8003c8c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003c8e:	487c      	ldr	r0, [pc, #496]	; (8003e80 <loadMenuTexts+0x408>)
 8003c90:	f7fc fbe4 	bl	800045c <copyText>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4a7b      	ldr	r2, [pc, #492]	; (8003e84 <loadMenuTexts+0x40c>)
 8003c98:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003c9a:	487b      	ldr	r0, [pc, #492]	; (8003e88 <loadMenuTexts+0x410>)
 8003c9c:	f7fc fbde 	bl	800045c <copyText>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <loadMenuTexts+0x414>)
 8003ca4:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003ca6:	487a      	ldr	r0, [pc, #488]	; (8003e90 <loadMenuTexts+0x418>)
 8003ca8:	f7fc fbd8 	bl	800045c <copyText>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a79      	ldr	r2, [pc, #484]	; (8003e94 <loadMenuTexts+0x41c>)
 8003cb0:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003cb2:	4879      	ldr	r0, [pc, #484]	; (8003e98 <loadMenuTexts+0x420>)
 8003cb4:	f7fc fbd2 	bl	800045c <copyText>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <loadMenuTexts+0x424>)
 8003cbc:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003cbe:	4878      	ldr	r0, [pc, #480]	; (8003ea0 <loadMenuTexts+0x428>)
 8003cc0:	f7fc fbcc 	bl	800045c <copyText>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a77      	ldr	r2, [pc, #476]	; (8003ea4 <loadMenuTexts+0x42c>)
 8003cc8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003cca:	4877      	ldr	r0, [pc, #476]	; (8003ea8 <loadMenuTexts+0x430>)
 8003ccc:	f7fc fbc6 	bl	800045c <copyText>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a76      	ldr	r2, [pc, #472]	; (8003eac <loadMenuTexts+0x434>)
 8003cd4:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003cd6:	4876      	ldr	r0, [pc, #472]	; (8003eb0 <loadMenuTexts+0x438>)
 8003cd8:	f7fc fbc0 	bl	800045c <copyText>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a75      	ldr	r2, [pc, #468]	; (8003eb4 <loadMenuTexts+0x43c>)
 8003ce0:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003ce2:	4875      	ldr	r0, [pc, #468]	; (8003eb8 <loadMenuTexts+0x440>)
 8003ce4:	f7fc fbba 	bl	800045c <copyText>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a74      	ldr	r2, [pc, #464]	; (8003ebc <loadMenuTexts+0x444>)
 8003cec:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003cee:	4874      	ldr	r0, [pc, #464]	; (8003ec0 <loadMenuTexts+0x448>)
 8003cf0:	f7fc fbb4 	bl	800045c <copyText>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4a73      	ldr	r2, [pc, #460]	; (8003ec4 <loadMenuTexts+0x44c>)
 8003cf8:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003cfa:	4873      	ldr	r0, [pc, #460]	; (8003ec8 <loadMenuTexts+0x450>)
 8003cfc:	f7fc fbae 	bl	800045c <copyText>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4a72      	ldr	r2, [pc, #456]	; (8003ecc <loadMenuTexts+0x454>)
 8003d04:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003d06:	4872      	ldr	r0, [pc, #456]	; (8003ed0 <loadMenuTexts+0x458>)
 8003d08:	f7fc fba8 	bl	800045c <copyText>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <loadMenuTexts+0x45c>)
 8003d10:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003d12:	4871      	ldr	r0, [pc, #452]	; (8003ed8 <loadMenuTexts+0x460>)
 8003d14:	f7fc fba2 	bl	800045c <copyText>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a70      	ldr	r2, [pc, #448]	; (8003edc <loadMenuTexts+0x464>)
 8003d1c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003d1e:	4870      	ldr	r0, [pc, #448]	; (8003ee0 <loadMenuTexts+0x468>)
 8003d20:	f7fc fb9c 	bl	800045c <copyText>
 8003d24:	4603      	mov	r3, r0
 8003d26:	e0dd      	b.n	8003ee4 <loadMenuTexts+0x46c>
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000cb0 	.word	0x20000cb0
 8003d30:	20000010 	.word	0x20000010
 8003d34:	20000cb4 	.word	0x20000cb4
 8003d38:	20000020 	.word	0x20000020
 8003d3c:	20000d0c 	.word	0x20000d0c
 8003d40:	20000030 	.word	0x20000030
 8003d44:	20000d3c 	.word	0x20000d3c
 8003d48:	20000040 	.word	0x20000040
 8003d4c:	20000d44 	.word	0x20000d44
 8003d50:	20000050 	.word	0x20000050
 8003d54:	20000dbc 	.word	0x20000dbc
 8003d58:	20000060 	.word	0x20000060
 8003d5c:	20000dc0 	.word	0x20000dc0
 8003d60:	20000070 	.word	0x20000070
 8003d64:	20000cb8 	.word	0x20000cb8
 8003d68:	20000080 	.word	0x20000080
 8003d6c:	20000cbc 	.word	0x20000cbc
 8003d70:	20000090 	.word	0x20000090
 8003d74:	20000cc0 	.word	0x20000cc0
 8003d78:	200000a0 	.word	0x200000a0
 8003d7c:	20000cc4 	.word	0x20000cc4
 8003d80:	200000b0 	.word	0x200000b0
 8003d84:	20000cc8 	.word	0x20000cc8
 8003d88:	200000c0 	.word	0x200000c0
 8003d8c:	20000ccc 	.word	0x20000ccc
 8003d90:	200000d0 	.word	0x200000d0
 8003d94:	20000cd0 	.word	0x20000cd0
 8003d98:	200000e0 	.word	0x200000e0
 8003d9c:	20000cd4 	.word	0x20000cd4
 8003da0:	200000f0 	.word	0x200000f0
 8003da4:	20000cd8 	.word	0x20000cd8
 8003da8:	20000100 	.word	0x20000100
 8003dac:	20000cdc 	.word	0x20000cdc
 8003db0:	20000110 	.word	0x20000110
 8003db4:	20000ce0 	.word	0x20000ce0
 8003db8:	20000120 	.word	0x20000120
 8003dbc:	20000ce4 	.word	0x20000ce4
 8003dc0:	20000130 	.word	0x20000130
 8003dc4:	20000ce8 	.word	0x20000ce8
 8003dc8:	20000140 	.word	0x20000140
 8003dcc:	20000cec 	.word	0x20000cec
 8003dd0:	20000150 	.word	0x20000150
 8003dd4:	20000cf0 	.word	0x20000cf0
 8003dd8:	20000160 	.word	0x20000160
 8003ddc:	20000cf4 	.word	0x20000cf4
 8003de0:	20000170 	.word	0x20000170
 8003de4:	20000cf8 	.word	0x20000cf8
 8003de8:	20000180 	.word	0x20000180
 8003dec:	20000cfc 	.word	0x20000cfc
 8003df0:	20000190 	.word	0x20000190
 8003df4:	20000d00 	.word	0x20000d00
 8003df8:	200001a0 	.word	0x200001a0
 8003dfc:	20000d04 	.word	0x20000d04
 8003e00:	200001b0 	.word	0x200001b0
 8003e04:	20000d08 	.word	0x20000d08
 8003e08:	200001c0 	.word	0x200001c0
 8003e0c:	20000d10 	.word	0x20000d10
 8003e10:	200001d0 	.word	0x200001d0
 8003e14:	20000d14 	.word	0x20000d14
 8003e18:	200001e0 	.word	0x200001e0
 8003e1c:	20000d18 	.word	0x20000d18
 8003e20:	200001f0 	.word	0x200001f0
 8003e24:	20000d1c 	.word	0x20000d1c
 8003e28:	20000200 	.word	0x20000200
 8003e2c:	20000d20 	.word	0x20000d20
 8003e30:	20000210 	.word	0x20000210
 8003e34:	20000d24 	.word	0x20000d24
 8003e38:	20000220 	.word	0x20000220
 8003e3c:	20000d28 	.word	0x20000d28
 8003e40:	20000230 	.word	0x20000230
 8003e44:	20000d2c 	.word	0x20000d2c
 8003e48:	20000240 	.word	0x20000240
 8003e4c:	20000d30 	.word	0x20000d30
 8003e50:	20000250 	.word	0x20000250
 8003e54:	20000d34 	.word	0x20000d34
 8003e58:	20000260 	.word	0x20000260
 8003e5c:	20000d38 	.word	0x20000d38
 8003e60:	20000270 	.word	0x20000270
 8003e64:	20000d40 	.word	0x20000d40
 8003e68:	20000280 	.word	0x20000280
 8003e6c:	20000d48 	.word	0x20000d48
 8003e70:	20000290 	.word	0x20000290
 8003e74:	20000d4c 	.word	0x20000d4c
 8003e78:	200002a0 	.word	0x200002a0
 8003e7c:	20000d50 	.word	0x20000d50
 8003e80:	200002b0 	.word	0x200002b0
 8003e84:	20000d54 	.word	0x20000d54
 8003e88:	200002c0 	.word	0x200002c0
 8003e8c:	20000d58 	.word	0x20000d58
 8003e90:	200002d0 	.word	0x200002d0
 8003e94:	20000d5c 	.word	0x20000d5c
 8003e98:	200002e0 	.word	0x200002e0
 8003e9c:	20000d60 	.word	0x20000d60
 8003ea0:	200002f0 	.word	0x200002f0
 8003ea4:	20000d64 	.word	0x20000d64
 8003ea8:	20000300 	.word	0x20000300
 8003eac:	20000d68 	.word	0x20000d68
 8003eb0:	20000310 	.word	0x20000310
 8003eb4:	20000d6c 	.word	0x20000d6c
 8003eb8:	20000320 	.word	0x20000320
 8003ebc:	20000d70 	.word	0x20000d70
 8003ec0:	20000330 	.word	0x20000330
 8003ec4:	20000d74 	.word	0x20000d74
 8003ec8:	20000340 	.word	0x20000340
 8003ecc:	20000d78 	.word	0x20000d78
 8003ed0:	20000350 	.word	0x20000350
 8003ed4:	20000d7c 	.word	0x20000d7c
 8003ed8:	20000360 	.word	0x20000360
 8003edc:	20000d80 	.word	0x20000d80
 8003ee0:	20000370 	.word	0x20000370
 8003ee4:	4a3d      	ldr	r2, [pc, #244]	; (8003fdc <loadMenuTexts+0x564>)
 8003ee6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003ee8:	483d      	ldr	r0, [pc, #244]	; (8003fe0 <loadMenuTexts+0x568>)
 8003eea:	f7fc fab7 	bl	800045c <copyText>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <loadMenuTexts+0x56c>)
 8003ef2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003ef4:	483c      	ldr	r0, [pc, #240]	; (8003fe8 <loadMenuTexts+0x570>)
 8003ef6:	f7fc fab1 	bl	800045c <copyText>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <loadMenuTexts+0x574>)
 8003efe:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003f00:	483b      	ldr	r0, [pc, #236]	; (8003ff0 <loadMenuTexts+0x578>)
 8003f02:	f7fc faab 	bl	800045c <copyText>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <loadMenuTexts+0x57c>)
 8003f0a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003f0c:	483a      	ldr	r0, [pc, #232]	; (8003ff8 <loadMenuTexts+0x580>)
 8003f0e:	f7fc faa5 	bl	800045c <copyText>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <loadMenuTexts+0x584>)
 8003f16:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003f18:	4839      	ldr	r0, [pc, #228]	; (8004000 <loadMenuTexts+0x588>)
 8003f1a:	f7fc fa9f 	bl	800045c <copyText>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a38      	ldr	r2, [pc, #224]	; (8004004 <loadMenuTexts+0x58c>)
 8003f22:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003f24:	4838      	ldr	r0, [pc, #224]	; (8004008 <loadMenuTexts+0x590>)
 8003f26:	f7fc fa99 	bl	800045c <copyText>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4a37      	ldr	r2, [pc, #220]	; (800400c <loadMenuTexts+0x594>)
 8003f2e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003f30:	4837      	ldr	r0, [pc, #220]	; (8004010 <loadMenuTexts+0x598>)
 8003f32:	f7fc fa93 	bl	800045c <copyText>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a36      	ldr	r2, [pc, #216]	; (8004014 <loadMenuTexts+0x59c>)
 8003f3a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003f3c:	4836      	ldr	r0, [pc, #216]	; (8004018 <loadMenuTexts+0x5a0>)
 8003f3e:	f7fc fa8d 	bl	800045c <copyText>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a35      	ldr	r2, [pc, #212]	; (800401c <loadMenuTexts+0x5a4>)
 8003f46:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003f48:	4835      	ldr	r0, [pc, #212]	; (8004020 <loadMenuTexts+0x5a8>)
 8003f4a:	f7fc fa87 	bl	800045c <copyText>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a34      	ldr	r2, [pc, #208]	; (8004024 <loadMenuTexts+0x5ac>)
 8003f52:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003f54:	4834      	ldr	r0, [pc, #208]	; (8004028 <loadMenuTexts+0x5b0>)
 8003f56:	f7fc fa81 	bl	800045c <copyText>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <loadMenuTexts+0x5b4>)
 8003f5e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003f60:	4833      	ldr	r0, [pc, #204]	; (8004030 <loadMenuTexts+0x5b8>)
 8003f62:	f7fc fa7b 	bl	800045c <copyText>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a32      	ldr	r2, [pc, #200]	; (8004034 <loadMenuTexts+0x5bc>)
 8003f6a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003f6c:	4832      	ldr	r0, [pc, #200]	; (8004038 <loadMenuTexts+0x5c0>)
 8003f6e:	f7fc fa75 	bl	800045c <copyText>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a31      	ldr	r2, [pc, #196]	; (800403c <loadMenuTexts+0x5c4>)
 8003f76:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003f78:	4831      	ldr	r0, [pc, #196]	; (8004040 <loadMenuTexts+0x5c8>)
 8003f7a:	f7fc fa6f 	bl	800045c <copyText>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a30      	ldr	r2, [pc, #192]	; (8004044 <loadMenuTexts+0x5cc>)
 8003f82:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003f84:	4830      	ldr	r0, [pc, #192]	; (8004048 <loadMenuTexts+0x5d0>)
 8003f86:	f7fc fa69 	bl	800045c <copyText>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a2f      	ldr	r2, [pc, #188]	; (800404c <loadMenuTexts+0x5d4>)
 8003f8e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003f90:	482f      	ldr	r0, [pc, #188]	; (8004050 <loadMenuTexts+0x5d8>)
 8003f92:	f7fc fa63 	bl	800045c <copyText>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <loadMenuTexts+0x5dc>)
 8003f9a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003f9c:	482e      	ldr	r0, [pc, #184]	; (8004058 <loadMenuTexts+0x5e0>)
 8003f9e:	f7fc fa5d 	bl	800045c <copyText>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <loadMenuTexts+0x5e4>)
 8003fa6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003fa8:	482d      	ldr	r0, [pc, #180]	; (8004060 <loadMenuTexts+0x5e8>)
 8003faa:	f7fc fa57 	bl	800045c <copyText>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <loadMenuTexts+0x5ec>)
 8003fb2:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003fb4:	482c      	ldr	r0, [pc, #176]	; (8004068 <loadMenuTexts+0x5f0>)
 8003fb6:	f7fc fa51 	bl	800045c <copyText>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <loadMenuTexts+0x5f4>)
 8003fbe:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003fc0:	482b      	ldr	r0, [pc, #172]	; (8004070 <loadMenuTexts+0x5f8>)
 8003fc2:	f7fc fa4b 	bl	800045c <copyText>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <loadMenuTexts+0x5fc>)
 8003fca:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003fcc:	482a      	ldr	r0, [pc, #168]	; (8004078 <loadMenuTexts+0x600>)
 8003fce:	f7fc fa45 	bl	800045c <copyText>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <loadMenuTexts+0x604>)
 8003fd6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003fd8:	e2d3      	b.n	8004582 <loadMenuTexts+0xb0a>
 8003fda:	bf00      	nop
 8003fdc:	20000d84 	.word	0x20000d84
 8003fe0:	20000380 	.word	0x20000380
 8003fe4:	20000d88 	.word	0x20000d88
 8003fe8:	20000390 	.word	0x20000390
 8003fec:	20000d8c 	.word	0x20000d8c
 8003ff0:	200003a0 	.word	0x200003a0
 8003ff4:	20000d90 	.word	0x20000d90
 8003ff8:	200003b0 	.word	0x200003b0
 8003ffc:	20000d94 	.word	0x20000d94
 8004000:	200003c0 	.word	0x200003c0
 8004004:	20000d98 	.word	0x20000d98
 8004008:	200003d0 	.word	0x200003d0
 800400c:	20000d9c 	.word	0x20000d9c
 8004010:	200003e0 	.word	0x200003e0
 8004014:	20000da0 	.word	0x20000da0
 8004018:	200003f0 	.word	0x200003f0
 800401c:	20000da4 	.word	0x20000da4
 8004020:	20000400 	.word	0x20000400
 8004024:	20000da8 	.word	0x20000da8
 8004028:	20000410 	.word	0x20000410
 800402c:	20000dac 	.word	0x20000dac
 8004030:	20000420 	.word	0x20000420
 8004034:	20000db0 	.word	0x20000db0
 8004038:	20000430 	.word	0x20000430
 800403c:	20000db4 	.word	0x20000db4
 8004040:	20000440 	.word	0x20000440
 8004044:	20000db8 	.word	0x20000db8
 8004048:	20000450 	.word	0x20000450
 800404c:	20000dc4 	.word	0x20000dc4
 8004050:	20000460 	.word	0x20000460
 8004054:	20000dc8 	.word	0x20000dc8
 8004058:	20000470 	.word	0x20000470
 800405c:	20000dcc 	.word	0x20000dcc
 8004060:	20000480 	.word	0x20000480
 8004064:	20000dd0 	.word	0x20000dd0
 8004068:	20000490 	.word	0x20000490
 800406c:	20000dd4 	.word	0x20000dd4
 8004070:	200004a0 	.word	0x200004a0
 8004074:	20000dd8 	.word	0x20000dd8
 8004078:	200004b0 	.word	0x200004b0
 800407c:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004080:	48a9      	ldr	r0, [pc, #676]	; (8004328 <loadMenuTexts+0x8b0>)
 8004082:	f7fc f9eb 	bl	800045c <copyText>
 8004086:	4603      	mov	r3, r0
 8004088:	4aa8      	ldr	r2, [pc, #672]	; (800432c <loadMenuTexts+0x8b4>)
 800408a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 800408c:	48a8      	ldr	r0, [pc, #672]	; (8004330 <loadMenuTexts+0x8b8>)
 800408e:	f7fc f9e5 	bl	800045c <copyText>
 8004092:	4603      	mov	r3, r0
 8004094:	4aa7      	ldr	r2, [pc, #668]	; (8004334 <loadMenuTexts+0x8bc>)
 8004096:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004098:	48a7      	ldr	r0, [pc, #668]	; (8004338 <loadMenuTexts+0x8c0>)
 800409a:	f7fc f9df 	bl	800045c <copyText>
 800409e:	4603      	mov	r3, r0
 80040a0:	4aa6      	ldr	r2, [pc, #664]	; (800433c <loadMenuTexts+0x8c4>)
 80040a2:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80040a4:	48a6      	ldr	r0, [pc, #664]	; (8004340 <loadMenuTexts+0x8c8>)
 80040a6:	f7fc f9d9 	bl	800045c <copyText>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4aa5      	ldr	r2, [pc, #660]	; (8004344 <loadMenuTexts+0x8cc>)
 80040ae:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80040b0:	48a5      	ldr	r0, [pc, #660]	; (8004348 <loadMenuTexts+0x8d0>)
 80040b2:	f7fc f9d3 	bl	800045c <copyText>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4aa4      	ldr	r2, [pc, #656]	; (800434c <loadMenuTexts+0x8d4>)
 80040ba:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80040bc:	48a4      	ldr	r0, [pc, #656]	; (8004350 <loadMenuTexts+0x8d8>)
 80040be:	f7fc f9cd 	bl	800045c <copyText>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4aa3      	ldr	r2, [pc, #652]	; (8004354 <loadMenuTexts+0x8dc>)
 80040c6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80040c8:	48a3      	ldr	r0, [pc, #652]	; (8004358 <loadMenuTexts+0x8e0>)
 80040ca:	f7fc f9c7 	bl	800045c <copyText>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4aa2      	ldr	r2, [pc, #648]	; (800435c <loadMenuTexts+0x8e4>)
 80040d2:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80040d4:	48a2      	ldr	r0, [pc, #648]	; (8004360 <loadMenuTexts+0x8e8>)
 80040d6:	f7fc f9c1 	bl	800045c <copyText>
 80040da:	4603      	mov	r3, r0
 80040dc:	4aa1      	ldr	r2, [pc, #644]	; (8004364 <loadMenuTexts+0x8ec>)
 80040de:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80040e0:	48a1      	ldr	r0, [pc, #644]	; (8004368 <loadMenuTexts+0x8f0>)
 80040e2:	f7fc f9bb 	bl	800045c <copyText>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4aa0      	ldr	r2, [pc, #640]	; (800436c <loadMenuTexts+0x8f4>)
 80040ea:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80040ec:	48a0      	ldr	r0, [pc, #640]	; (8004370 <loadMenuTexts+0x8f8>)
 80040ee:	f7fc f9b5 	bl	800045c <copyText>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4a9f      	ldr	r2, [pc, #636]	; (8004374 <loadMenuTexts+0x8fc>)
 80040f6:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80040f8:	489f      	ldr	r0, [pc, #636]	; (8004378 <loadMenuTexts+0x900>)
 80040fa:	f7fc f9af 	bl	800045c <copyText>
 80040fe:	4603      	mov	r3, r0
 8004100:	4a9e      	ldr	r2, [pc, #632]	; (800437c <loadMenuTexts+0x904>)
 8004102:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8004104:	489e      	ldr	r0, [pc, #632]	; (8004380 <loadMenuTexts+0x908>)
 8004106:	f7fc f9a9 	bl	800045c <copyText>
 800410a:	4603      	mov	r3, r0
 800410c:	4a9d      	ldr	r2, [pc, #628]	; (8004384 <loadMenuTexts+0x90c>)
 800410e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8004110:	489d      	ldr	r0, [pc, #628]	; (8004388 <loadMenuTexts+0x910>)
 8004112:	f7fc f9a3 	bl	800045c <copyText>
 8004116:	4603      	mov	r3, r0
 8004118:	4a9c      	ldr	r2, [pc, #624]	; (800438c <loadMenuTexts+0x914>)
 800411a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800411c:	489c      	ldr	r0, [pc, #624]	; (8004390 <loadMenuTexts+0x918>)
 800411e:	f7fc f99d 	bl	800045c <copyText>
 8004122:	4603      	mov	r3, r0
 8004124:	4a9b      	ldr	r2, [pc, #620]	; (8004394 <loadMenuTexts+0x91c>)
 8004126:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8004128:	489b      	ldr	r0, [pc, #620]	; (8004398 <loadMenuTexts+0x920>)
 800412a:	f7fc f997 	bl	800045c <copyText>
 800412e:	4603      	mov	r3, r0
 8004130:	4a9a      	ldr	r2, [pc, #616]	; (800439c <loadMenuTexts+0x924>)
 8004132:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8004134:	489a      	ldr	r0, [pc, #616]	; (80043a0 <loadMenuTexts+0x928>)
 8004136:	f7fc f991 	bl	800045c <copyText>
 800413a:	4603      	mov	r3, r0
 800413c:	4a99      	ldr	r2, [pc, #612]	; (80043a4 <loadMenuTexts+0x92c>)
 800413e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8004140:	4899      	ldr	r0, [pc, #612]	; (80043a8 <loadMenuTexts+0x930>)
 8004142:	f7fc f98b 	bl	800045c <copyText>
 8004146:	4603      	mov	r3, r0
 8004148:	4a98      	ldr	r2, [pc, #608]	; (80043ac <loadMenuTexts+0x934>)
 800414a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 800414c:	4898      	ldr	r0, [pc, #608]	; (80043b0 <loadMenuTexts+0x938>)
 800414e:	f7fc f985 	bl	800045c <copyText>
 8004152:	4603      	mov	r3, r0
 8004154:	4a97      	ldr	r2, [pc, #604]	; (80043b4 <loadMenuTexts+0x93c>)
 8004156:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8004158:	4897      	ldr	r0, [pc, #604]	; (80043b8 <loadMenuTexts+0x940>)
 800415a:	f7fc f97f 	bl	800045c <copyText>
 800415e:	4603      	mov	r3, r0
 8004160:	4a96      	ldr	r2, [pc, #600]	; (80043bc <loadMenuTexts+0x944>)
 8004162:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8004164:	4896      	ldr	r0, [pc, #600]	; (80043c0 <loadMenuTexts+0x948>)
 8004166:	f7fc f979 	bl	800045c <copyText>
 800416a:	4603      	mov	r3, r0
 800416c:	4a95      	ldr	r2, [pc, #596]	; (80043c4 <loadMenuTexts+0x94c>)
 800416e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004170:	4895      	ldr	r0, [pc, #596]	; (80043c8 <loadMenuTexts+0x950>)
 8004172:	f7fc f973 	bl	800045c <copyText>
 8004176:	4603      	mov	r3, r0
 8004178:	4a94      	ldr	r2, [pc, #592]	; (80043cc <loadMenuTexts+0x954>)
 800417a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 800417c:	4894      	ldr	r0, [pc, #592]	; (80043d0 <loadMenuTexts+0x958>)
 800417e:	f7fc f96d 	bl	800045c <copyText>
 8004182:	4603      	mov	r3, r0
 8004184:	4a93      	ldr	r2, [pc, #588]	; (80043d4 <loadMenuTexts+0x95c>)
 8004186:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8004188:	4893      	ldr	r0, [pc, #588]	; (80043d8 <loadMenuTexts+0x960>)
 800418a:	f7fc f967 	bl	800045c <copyText>
 800418e:	4603      	mov	r3, r0
 8004190:	4a92      	ldr	r2, [pc, #584]	; (80043dc <loadMenuTexts+0x964>)
 8004192:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8004194:	4892      	ldr	r0, [pc, #584]	; (80043e0 <loadMenuTexts+0x968>)
 8004196:	f7fc f961 	bl	800045c <copyText>
 800419a:	4603      	mov	r3, r0
 800419c:	4a91      	ldr	r2, [pc, #580]	; (80043e4 <loadMenuTexts+0x96c>)
 800419e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80041a0:	4891      	ldr	r0, [pc, #580]	; (80043e8 <loadMenuTexts+0x970>)
 80041a2:	f7fc f95b 	bl	800045c <copyText>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4a90      	ldr	r2, [pc, #576]	; (80043ec <loadMenuTexts+0x974>)
 80041aa:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80041ac:	4890      	ldr	r0, [pc, #576]	; (80043f0 <loadMenuTexts+0x978>)
 80041ae:	f7fc f955 	bl	800045c <copyText>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a8f      	ldr	r2, [pc, #572]	; (80043f4 <loadMenuTexts+0x97c>)
 80041b6:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80041b8:	488f      	ldr	r0, [pc, #572]	; (80043f8 <loadMenuTexts+0x980>)
 80041ba:	f7fc f94f 	bl	800045c <copyText>
 80041be:	4603      	mov	r3, r0
 80041c0:	4a8e      	ldr	r2, [pc, #568]	; (80043fc <loadMenuTexts+0x984>)
 80041c2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80041c4:	488e      	ldr	r0, [pc, #568]	; (8004400 <loadMenuTexts+0x988>)
 80041c6:	f7fc f949 	bl	800045c <copyText>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4a8d      	ldr	r2, [pc, #564]	; (8004404 <loadMenuTexts+0x98c>)
 80041ce:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80041d0:	488d      	ldr	r0, [pc, #564]	; (8004408 <loadMenuTexts+0x990>)
 80041d2:	f7fc f943 	bl	800045c <copyText>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a8c      	ldr	r2, [pc, #560]	; (800440c <loadMenuTexts+0x994>)
 80041da:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80041dc:	488c      	ldr	r0, [pc, #560]	; (8004410 <loadMenuTexts+0x998>)
 80041de:	f7fc f93d 	bl	800045c <copyText>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a8b      	ldr	r2, [pc, #556]	; (8004414 <loadMenuTexts+0x99c>)
 80041e6:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80041e8:	488b      	ldr	r0, [pc, #556]	; (8004418 <loadMenuTexts+0x9a0>)
 80041ea:	f7fc f937 	bl	800045c <copyText>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a8a      	ldr	r2, [pc, #552]	; (800441c <loadMenuTexts+0x9a4>)
 80041f2:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80041f4:	488a      	ldr	r0, [pc, #552]	; (8004420 <loadMenuTexts+0x9a8>)
 80041f6:	f7fc f931 	bl	800045c <copyText>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a89      	ldr	r2, [pc, #548]	; (8004424 <loadMenuTexts+0x9ac>)
 80041fe:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004200:	4889      	ldr	r0, [pc, #548]	; (8004428 <loadMenuTexts+0x9b0>)
 8004202:	f7fc f92b 	bl	800045c <copyText>
 8004206:	4603      	mov	r3, r0
 8004208:	4a88      	ldr	r2, [pc, #544]	; (800442c <loadMenuTexts+0x9b4>)
 800420a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800420c:	4888      	ldr	r0, [pc, #544]	; (8004430 <loadMenuTexts+0x9b8>)
 800420e:	f7fc f925 	bl	800045c <copyText>
 8004212:	4603      	mov	r3, r0
 8004214:	4a87      	ldr	r2, [pc, #540]	; (8004434 <loadMenuTexts+0x9bc>)
 8004216:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8004218:	4887      	ldr	r0, [pc, #540]	; (8004438 <loadMenuTexts+0x9c0>)
 800421a:	f7fc f91f 	bl	800045c <copyText>
 800421e:	4603      	mov	r3, r0
 8004220:	4a86      	ldr	r2, [pc, #536]	; (800443c <loadMenuTexts+0x9c4>)
 8004222:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8004224:	4886      	ldr	r0, [pc, #536]	; (8004440 <loadMenuTexts+0x9c8>)
 8004226:	f7fc f919 	bl	800045c <copyText>
 800422a:	4603      	mov	r3, r0
 800422c:	4a85      	ldr	r2, [pc, #532]	; (8004444 <loadMenuTexts+0x9cc>)
 800422e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004230:	4885      	ldr	r0, [pc, #532]	; (8004448 <loadMenuTexts+0x9d0>)
 8004232:	f7fc f913 	bl	800045c <copyText>
 8004236:	4603      	mov	r3, r0
 8004238:	4a84      	ldr	r2, [pc, #528]	; (800444c <loadMenuTexts+0x9d4>)
 800423a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 800423c:	4884      	ldr	r0, [pc, #528]	; (8004450 <loadMenuTexts+0x9d8>)
 800423e:	f7fc f90d 	bl	800045c <copyText>
 8004242:	4603      	mov	r3, r0
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <loadMenuTexts+0x9dc>)
 8004246:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8004248:	4883      	ldr	r0, [pc, #524]	; (8004458 <loadMenuTexts+0x9e0>)
 800424a:	f7fc f907 	bl	800045c <copyText>
 800424e:	4603      	mov	r3, r0
 8004250:	4a82      	ldr	r2, [pc, #520]	; (800445c <loadMenuTexts+0x9e4>)
 8004252:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8004254:	4882      	ldr	r0, [pc, #520]	; (8004460 <loadMenuTexts+0x9e8>)
 8004256:	f7fc f901 	bl	800045c <copyText>
 800425a:	4603      	mov	r3, r0
 800425c:	4a81      	ldr	r2, [pc, #516]	; (8004464 <loadMenuTexts+0x9ec>)
 800425e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8004260:	4881      	ldr	r0, [pc, #516]	; (8004468 <loadMenuTexts+0x9f0>)
 8004262:	f7fc f8fb 	bl	800045c <copyText>
 8004266:	4603      	mov	r3, r0
 8004268:	4a80      	ldr	r2, [pc, #512]	; (800446c <loadMenuTexts+0x9f4>)
 800426a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 800426c:	4880      	ldr	r0, [pc, #512]	; (8004470 <loadMenuTexts+0x9f8>)
 800426e:	f7fc f8f5 	bl	800045c <copyText>
 8004272:	4603      	mov	r3, r0
 8004274:	4a7f      	ldr	r2, [pc, #508]	; (8004474 <loadMenuTexts+0x9fc>)
 8004276:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8004278:	487f      	ldr	r0, [pc, #508]	; (8004478 <loadMenuTexts+0xa00>)
 800427a:	f7fc f8ef 	bl	800045c <copyText>
 800427e:	4603      	mov	r3, r0
 8004280:	4a7e      	ldr	r2, [pc, #504]	; (800447c <loadMenuTexts+0xa04>)
 8004282:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8004284:	487e      	ldr	r0, [pc, #504]	; (8004480 <loadMenuTexts+0xa08>)
 8004286:	f7fc f8e9 	bl	800045c <copyText>
 800428a:	4603      	mov	r3, r0
 800428c:	4a7d      	ldr	r2, [pc, #500]	; (8004484 <loadMenuTexts+0xa0c>)
 800428e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8004290:	487d      	ldr	r0, [pc, #500]	; (8004488 <loadMenuTexts+0xa10>)
 8004292:	f7fc f8e3 	bl	800045c <copyText>
 8004296:	4603      	mov	r3, r0
 8004298:	4a7c      	ldr	r2, [pc, #496]	; (800448c <loadMenuTexts+0xa14>)
 800429a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 800429c:	487c      	ldr	r0, [pc, #496]	; (8004490 <loadMenuTexts+0xa18>)
 800429e:	f7fc f8dd 	bl	800045c <copyText>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a7b      	ldr	r2, [pc, #492]	; (8004494 <loadMenuTexts+0xa1c>)
 80042a6:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80042a8:	487b      	ldr	r0, [pc, #492]	; (8004498 <loadMenuTexts+0xa20>)
 80042aa:	f7fc f8d7 	bl	800045c <copyText>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a7a      	ldr	r2, [pc, #488]	; (800449c <loadMenuTexts+0xa24>)
 80042b2:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80042b4:	487a      	ldr	r0, [pc, #488]	; (80044a0 <loadMenuTexts+0xa28>)
 80042b6:	f7fc f8d1 	bl	800045c <copyText>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a79      	ldr	r2, [pc, #484]	; (80044a4 <loadMenuTexts+0xa2c>)
 80042be:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80042c0:	4879      	ldr	r0, [pc, #484]	; (80044a8 <loadMenuTexts+0xa30>)
 80042c2:	f7fc f8cb 	bl	800045c <copyText>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a78      	ldr	r2, [pc, #480]	; (80044ac <loadMenuTexts+0xa34>)
 80042ca:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80042cc:	4878      	ldr	r0, [pc, #480]	; (80044b0 <loadMenuTexts+0xa38>)
 80042ce:	f7fc f8c5 	bl	800045c <copyText>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <loadMenuTexts+0xa3c>)
 80042d6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80042d8:	4877      	ldr	r0, [pc, #476]	; (80044b8 <loadMenuTexts+0xa40>)
 80042da:	f7fc f8bf 	bl	800045c <copyText>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a76      	ldr	r2, [pc, #472]	; (80044bc <loadMenuTexts+0xa44>)
 80042e2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80042e4:	4876      	ldr	r0, [pc, #472]	; (80044c0 <loadMenuTexts+0xa48>)
 80042e6:	f7fc f8b9 	bl	800045c <copyText>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a75      	ldr	r2, [pc, #468]	; (80044c4 <loadMenuTexts+0xa4c>)
 80042ee:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80042f0:	4875      	ldr	r0, [pc, #468]	; (80044c8 <loadMenuTexts+0xa50>)
 80042f2:	f7fc f8b3 	bl	800045c <copyText>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a74      	ldr	r2, [pc, #464]	; (80044cc <loadMenuTexts+0xa54>)
 80042fa:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80042fc:	4874      	ldr	r0, [pc, #464]	; (80044d0 <loadMenuTexts+0xa58>)
 80042fe:	f7fc f8ad 	bl	800045c <copyText>
 8004302:	4603      	mov	r3, r0
 8004304:	4a73      	ldr	r2, [pc, #460]	; (80044d4 <loadMenuTexts+0xa5c>)
 8004306:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004308:	4873      	ldr	r0, [pc, #460]	; (80044d8 <loadMenuTexts+0xa60>)
 800430a:	f7fc f8a7 	bl	800045c <copyText>
 800430e:	4603      	mov	r3, r0
 8004310:	4a72      	ldr	r2, [pc, #456]	; (80044dc <loadMenuTexts+0xa64>)
 8004312:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8004314:	4872      	ldr	r0, [pc, #456]	; (80044e0 <loadMenuTexts+0xa68>)
 8004316:	f7fc f8a1 	bl	800045c <copyText>
 800431a:	4603      	mov	r3, r0
 800431c:	4a71      	ldr	r2, [pc, #452]	; (80044e4 <loadMenuTexts+0xa6c>)
 800431e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004320:	4871      	ldr	r0, [pc, #452]	; (80044e8 <loadMenuTexts+0xa70>)
 8004322:	f7fc f89b 	bl	800045c <copyText>
 8004326:	e0e1      	b.n	80044ec <loadMenuTexts+0xa74>
 8004328:	200004c0 	.word	0x200004c0
 800432c:	20000cb8 	.word	0x20000cb8
 8004330:	200004d0 	.word	0x200004d0
 8004334:	20000cbc 	.word	0x20000cbc
 8004338:	200004e0 	.word	0x200004e0
 800433c:	20000cc0 	.word	0x20000cc0
 8004340:	200004f0 	.word	0x200004f0
 8004344:	20000cc4 	.word	0x20000cc4
 8004348:	20000500 	.word	0x20000500
 800434c:	20000cc8 	.word	0x20000cc8
 8004350:	20000510 	.word	0x20000510
 8004354:	20000ccc 	.word	0x20000ccc
 8004358:	20000520 	.word	0x20000520
 800435c:	20000cd0 	.word	0x20000cd0
 8004360:	20000530 	.word	0x20000530
 8004364:	20000cd4 	.word	0x20000cd4
 8004368:	20000540 	.word	0x20000540
 800436c:	20000cd8 	.word	0x20000cd8
 8004370:	20000550 	.word	0x20000550
 8004374:	20000cdc 	.word	0x20000cdc
 8004378:	20000560 	.word	0x20000560
 800437c:	20000ce0 	.word	0x20000ce0
 8004380:	20000570 	.word	0x20000570
 8004384:	20000ce4 	.word	0x20000ce4
 8004388:	20000580 	.word	0x20000580
 800438c:	20000ce8 	.word	0x20000ce8
 8004390:	20000590 	.word	0x20000590
 8004394:	20000cec 	.word	0x20000cec
 8004398:	200005a0 	.word	0x200005a0
 800439c:	20000cf0 	.word	0x20000cf0
 80043a0:	200005b0 	.word	0x200005b0
 80043a4:	20000cf4 	.word	0x20000cf4
 80043a8:	200005c0 	.word	0x200005c0
 80043ac:	20000cf8 	.word	0x20000cf8
 80043b0:	200005d0 	.word	0x200005d0
 80043b4:	20000cfc 	.word	0x20000cfc
 80043b8:	200005e0 	.word	0x200005e0
 80043bc:	20000d00 	.word	0x20000d00
 80043c0:	200005f0 	.word	0x200005f0
 80043c4:	20000d04 	.word	0x20000d04
 80043c8:	20000600 	.word	0x20000600
 80043cc:	20000d08 	.word	0x20000d08
 80043d0:	20000610 	.word	0x20000610
 80043d4:	20000d10 	.word	0x20000d10
 80043d8:	20000620 	.word	0x20000620
 80043dc:	20000d14 	.word	0x20000d14
 80043e0:	20000630 	.word	0x20000630
 80043e4:	20000d18 	.word	0x20000d18
 80043e8:	20000640 	.word	0x20000640
 80043ec:	20000d1c 	.word	0x20000d1c
 80043f0:	20000650 	.word	0x20000650
 80043f4:	20000d20 	.word	0x20000d20
 80043f8:	20000660 	.word	0x20000660
 80043fc:	20000d24 	.word	0x20000d24
 8004400:	20000670 	.word	0x20000670
 8004404:	20000d28 	.word	0x20000d28
 8004408:	20000680 	.word	0x20000680
 800440c:	20000d2c 	.word	0x20000d2c
 8004410:	20000690 	.word	0x20000690
 8004414:	20000d30 	.word	0x20000d30
 8004418:	200006a0 	.word	0x200006a0
 800441c:	20000d34 	.word	0x20000d34
 8004420:	200006b0 	.word	0x200006b0
 8004424:	20000d38 	.word	0x20000d38
 8004428:	200006c0 	.word	0x200006c0
 800442c:	20000d40 	.word	0x20000d40
 8004430:	200006d0 	.word	0x200006d0
 8004434:	20000d48 	.word	0x20000d48
 8004438:	200006e0 	.word	0x200006e0
 800443c:	20000d4c 	.word	0x20000d4c
 8004440:	200006f0 	.word	0x200006f0
 8004444:	20000d50 	.word	0x20000d50
 8004448:	20000700 	.word	0x20000700
 800444c:	20000d54 	.word	0x20000d54
 8004450:	20000710 	.word	0x20000710
 8004454:	20000d58 	.word	0x20000d58
 8004458:	20000720 	.word	0x20000720
 800445c:	20000d5c 	.word	0x20000d5c
 8004460:	20000730 	.word	0x20000730
 8004464:	20000d60 	.word	0x20000d60
 8004468:	20000740 	.word	0x20000740
 800446c:	20000d64 	.word	0x20000d64
 8004470:	20000750 	.word	0x20000750
 8004474:	20000d68 	.word	0x20000d68
 8004478:	20000760 	.word	0x20000760
 800447c:	20000d6c 	.word	0x20000d6c
 8004480:	20000770 	.word	0x20000770
 8004484:	20000d70 	.word	0x20000d70
 8004488:	20000780 	.word	0x20000780
 800448c:	20000d74 	.word	0x20000d74
 8004490:	20000790 	.word	0x20000790
 8004494:	20000d78 	.word	0x20000d78
 8004498:	200007a0 	.word	0x200007a0
 800449c:	20000d7c 	.word	0x20000d7c
 80044a0:	200007b0 	.word	0x200007b0
 80044a4:	20000d80 	.word	0x20000d80
 80044a8:	200007c0 	.word	0x200007c0
 80044ac:	20000d84 	.word	0x20000d84
 80044b0:	200007d0 	.word	0x200007d0
 80044b4:	20000d88 	.word	0x20000d88
 80044b8:	200007e0 	.word	0x200007e0
 80044bc:	20000d8c 	.word	0x20000d8c
 80044c0:	200007f0 	.word	0x200007f0
 80044c4:	20000d90 	.word	0x20000d90
 80044c8:	20000800 	.word	0x20000800
 80044cc:	20000d94 	.word	0x20000d94
 80044d0:	20000810 	.word	0x20000810
 80044d4:	20000d98 	.word	0x20000d98
 80044d8:	20000820 	.word	0x20000820
 80044dc:	20000d9c 	.word	0x20000d9c
 80044e0:	20000830 	.word	0x20000830
 80044e4:	20000da0 	.word	0x20000da0
 80044e8:	20000840 	.word	0x20000840
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <loadMenuTexts+0xb14>)
 80044f0:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80044f2:	4827      	ldr	r0, [pc, #156]	; (8004590 <loadMenuTexts+0xb18>)
 80044f4:	f7fb ffb2 	bl	800045c <copyText>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4a26      	ldr	r2, [pc, #152]	; (8004594 <loadMenuTexts+0xb1c>)
 80044fc:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80044fe:	4826      	ldr	r0, [pc, #152]	; (8004598 <loadMenuTexts+0xb20>)
 8004500:	f7fb ffac 	bl	800045c <copyText>
 8004504:	4603      	mov	r3, r0
 8004506:	4a25      	ldr	r2, [pc, #148]	; (800459c <loadMenuTexts+0xb24>)
 8004508:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800450a:	4825      	ldr	r0, [pc, #148]	; (80045a0 <loadMenuTexts+0xb28>)
 800450c:	f7fb ffa6 	bl	800045c <copyText>
 8004510:	4603      	mov	r3, r0
 8004512:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <loadMenuTexts+0xb2c>)
 8004514:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8004516:	4824      	ldr	r0, [pc, #144]	; (80045a8 <loadMenuTexts+0xb30>)
 8004518:	f7fb ffa0 	bl	800045c <copyText>
 800451c:	4603      	mov	r3, r0
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <loadMenuTexts+0xb34>)
 8004520:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8004522:	4823      	ldr	r0, [pc, #140]	; (80045b0 <loadMenuTexts+0xb38>)
 8004524:	f7fb ff9a 	bl	800045c <copyText>
 8004528:	4603      	mov	r3, r0
 800452a:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <loadMenuTexts+0xb3c>)
 800452c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800452e:	4822      	ldr	r0, [pc, #136]	; (80045b8 <loadMenuTexts+0xb40>)
 8004530:	f7fb ff94 	bl	800045c <copyText>
 8004534:	4603      	mov	r3, r0
 8004536:	4a21      	ldr	r2, [pc, #132]	; (80045bc <loadMenuTexts+0xb44>)
 8004538:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800453a:	4821      	ldr	r0, [pc, #132]	; (80045c0 <loadMenuTexts+0xb48>)
 800453c:	f7fb ff8e 	bl	800045c <copyText>
 8004540:	4603      	mov	r3, r0
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <loadMenuTexts+0xb4c>)
 8004544:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8004546:	4820      	ldr	r0, [pc, #128]	; (80045c8 <loadMenuTexts+0xb50>)
 8004548:	f7fb ff88 	bl	800045c <copyText>
 800454c:	4603      	mov	r3, r0
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <loadMenuTexts+0xb54>)
 8004550:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8004552:	481f      	ldr	r0, [pc, #124]	; (80045d0 <loadMenuTexts+0xb58>)
 8004554:	f7fb ff82 	bl	800045c <copyText>
 8004558:	4603      	mov	r3, r0
 800455a:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <loadMenuTexts+0xb5c>)
 800455c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800455e:	481e      	ldr	r0, [pc, #120]	; (80045d8 <loadMenuTexts+0xb60>)
 8004560:	f7fb ff7c 	bl	800045c <copyText>
 8004564:	4603      	mov	r3, r0
 8004566:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <loadMenuTexts+0xb64>)
 8004568:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800456a:	481d      	ldr	r0, [pc, #116]	; (80045e0 <loadMenuTexts+0xb68>)
 800456c:	f7fb ff76 	bl	800045c <copyText>
 8004570:	4603      	mov	r3, r0
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <loadMenuTexts+0xb6c>)
 8004574:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8004576:	481c      	ldr	r0, [pc, #112]	; (80045e8 <loadMenuTexts+0xb70>)
 8004578:	f7fb ff70 	bl	800045c <copyText>
 800457c:	4603      	mov	r3, r0
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <loadMenuTexts+0xb74>)
 8004580:	6013      	str	r3, [r2, #0]
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000da4 	.word	0x20000da4
 8004590:	20000850 	.word	0x20000850
 8004594:	20000da8 	.word	0x20000da8
 8004598:	20000860 	.word	0x20000860
 800459c:	20000dac 	.word	0x20000dac
 80045a0:	20000870 	.word	0x20000870
 80045a4:	20000db0 	.word	0x20000db0
 80045a8:	20000880 	.word	0x20000880
 80045ac:	20000db4 	.word	0x20000db4
 80045b0:	20000890 	.word	0x20000890
 80045b4:	20000db8 	.word	0x20000db8
 80045b8:	200008a0 	.word	0x200008a0
 80045bc:	20000dc4 	.word	0x20000dc4
 80045c0:	200008b0 	.word	0x200008b0
 80045c4:	20000dc8 	.word	0x20000dc8
 80045c8:	200008c0 	.word	0x200008c0
 80045cc:	20000dcc 	.word	0x20000dcc
 80045d0:	200008d0 	.word	0x200008d0
 80045d4:	20000dd0 	.word	0x20000dd0
 80045d8:	200008e0 	.word	0x200008e0
 80045dc:	20000dd4 	.word	0x20000dd4
 80045e0:	200008f0 	.word	0x200008f0
 80045e4:	20000dd8 	.word	0x20000dd8
 80045e8:	20000900 	.word	0x20000900
 80045ec:	20000ddc 	.word	0x20000ddc

080045f0 <hataKoduLcdGoster>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void hataKoduLcdGoster(uint8_t x) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d11c      	bne.n	800463a <hataKoduLcdGoster+0x4a>
		if(dilSecim==0){
 8004600:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <hataKoduLcdGoster+0x22>
		lcd_print(1, 1, "   HATA KODU    ");
 8004608:	4a5e      	ldr	r2, [pc, #376]	; (8004784 <hataKoduLcdGoster+0x194>)
 800460a:	2101      	movs	r1, #1
 800460c:	2001      	movs	r0, #1
 800460e:	f7fb feef 	bl	80003f0 <lcd_print>
		}
		if(dilSecim==1){
 8004612:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d104      	bne.n	8004624 <hataKoduLcdGoster+0x34>
		lcd_print(1, 1, "   ERROR CODE   ");
 800461a:	4a5b      	ldr	r2, [pc, #364]	; (8004788 <hataKoduLcdGoster+0x198>)
 800461c:	2101      	movs	r1, #1
 800461e:	2001      	movs	r0, #1
 8004620:	f7fb fee6 	bl	80003f0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004624:	4a59      	ldr	r2, [pc, #356]	; (800478c <hataKoduLcdGoster+0x19c>)
 8004626:	2101      	movs	r1, #1
 8004628:	2002      	movs	r0, #2
 800462a:	f7fb fee1 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800462e:	4a58      	ldr	r2, [pc, #352]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 8004630:	2107      	movs	r1, #7
 8004632:	2002      	movs	r0, #2
 8004634:	f7fb fedc 	bl	80003f0 <lcd_print>
		lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004638:	e09e      	b.n	8004778 <hataKoduLcdGoster+0x188>
	} else if(x==2){
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d11c      	bne.n	800467a <hataKoduLcdGoster+0x8a>
		if(dilSecim==0){
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <hataKoduLcdGoster+0x62>
		lcd_print(1, 1, "   HATA KODU    ");
 8004648:	4a4e      	ldr	r2, [pc, #312]	; (8004784 <hataKoduLcdGoster+0x194>)
 800464a:	2101      	movs	r1, #1
 800464c:	2001      	movs	r0, #1
 800464e:	f7fb fecf 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004652:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d104      	bne.n	8004664 <hataKoduLcdGoster+0x74>
		lcd_print(1, 1, "   ERROR CODE   ");
 800465a:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <hataKoduLcdGoster+0x198>)
 800465c:	2101      	movs	r1, #1
 800465e:	2001      	movs	r0, #1
 8004660:	f7fb fec6 	bl	80003f0 <lcd_print>
		lcd_print(2, 2, "2");
 8004664:	4a4b      	ldr	r2, [pc, #300]	; (8004794 <hataKoduLcdGoster+0x1a4>)
 8004666:	2102      	movs	r1, #2
 8004668:	2002      	movs	r0, #2
 800466a:	f7fb fec1 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800466e:	4a48      	ldr	r2, [pc, #288]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 8004670:	2107      	movs	r1, #7
 8004672:	2002      	movs	r0, #2
 8004674:	f7fb febc 	bl	80003f0 <lcd_print>
}
 8004678:	e07e      	b.n	8004778 <hataKoduLcdGoster+0x188>
	} else if(x==3){
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d11c      	bne.n	80046ba <hataKoduLcdGoster+0xca>
		if(dilSecim==0){
 8004680:	4b3f      	ldr	r3, [pc, #252]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, "   HATA KODU    ");
 8004688:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <hataKoduLcdGoster+0x194>)
 800468a:	2101      	movs	r1, #1
 800468c:	2001      	movs	r0, #1
 800468e:	f7fb feaf 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d104      	bne.n	80046a4 <hataKoduLcdGoster+0xb4>
		lcd_print(1, 1, "   ERROR CODE   ");
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <hataKoduLcdGoster+0x198>)
 800469c:	2101      	movs	r1, #1
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fb fea6 	bl	80003f0 <lcd_print>
		lcd_print(2, 3, "3");
 80046a4:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <hataKoduLcdGoster+0x1a8>)
 80046a6:	2103      	movs	r1, #3
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7fb fea1 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 80046b0:	2107      	movs	r1, #7
 80046b2:	2002      	movs	r0, #2
 80046b4:	f7fb fe9c 	bl	80003f0 <lcd_print>
}
 80046b8:	e05e      	b.n	8004778 <hataKoduLcdGoster+0x188>
	} else if(x==4){
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11c      	bne.n	80046fa <hataKoduLcdGoster+0x10a>
		if(dilSecim==0){
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <hataKoduLcdGoster+0x190>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <hataKoduLcdGoster+0xe2>
		lcd_print(1, 1, "   HATA KODU    ");
 80046c8:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <hataKoduLcdGoster+0x194>)
 80046ca:	2101      	movs	r1, #1
 80046cc:	2001      	movs	r0, #1
 80046ce:	f7fb fe8f 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 80046d2:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <hataKoduLcdGoster+0x190>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d104      	bne.n	80046e4 <hataKoduLcdGoster+0xf4>
		lcd_print(1, 1, "   ERROR CODE   ");
 80046da:	4a2b      	ldr	r2, [pc, #172]	; (8004788 <hataKoduLcdGoster+0x198>)
 80046dc:	2101      	movs	r1, #1
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fb fe86 	bl	80003f0 <lcd_print>
		lcd_print(2, 4, "4");
 80046e4:	4a2d      	ldr	r2, [pc, #180]	; (800479c <hataKoduLcdGoster+0x1ac>)
 80046e6:	2104      	movs	r1, #4
 80046e8:	2002      	movs	r0, #2
 80046ea:	f7fb fe81 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80046ee:	4a28      	ldr	r2, [pc, #160]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 80046f0:	2107      	movs	r1, #7
 80046f2:	2002      	movs	r0, #2
 80046f4:	f7fb fe7c 	bl	80003f0 <lcd_print>
}
 80046f8:	e03e      	b.n	8004778 <hataKoduLcdGoster+0x188>
	} else if(x==5){
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d11c      	bne.n	800473a <hataKoduLcdGoster+0x14a>
		if(dilSecim==0){
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <hataKoduLcdGoster+0x122>
		lcd_print(1, 1, "   HATA KODU    ");
 8004708:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <hataKoduLcdGoster+0x194>)
 800470a:	2101      	movs	r1, #1
 800470c:	2001      	movs	r0, #1
 800470e:	f7fb fe6f 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d104      	bne.n	8004724 <hataKoduLcdGoster+0x134>
		lcd_print(1, 1, "   ERROR CODE   ");
 800471a:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <hataKoduLcdGoster+0x198>)
 800471c:	2101      	movs	r1, #1
 800471e:	2001      	movs	r0, #1
 8004720:	f7fb fe66 	bl	80003f0 <lcd_print>
		lcd_print(2, 5, "5");
 8004724:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <hataKoduLcdGoster+0x1b0>)
 8004726:	2105      	movs	r1, #5
 8004728:	2002      	movs	r0, #2
 800472a:	f7fb fe61 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800472e:	4a18      	ldr	r2, [pc, #96]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 8004730:	2107      	movs	r1, #7
 8004732:	2002      	movs	r0, #2
 8004734:	f7fb fe5c 	bl	80003f0 <lcd_print>
}
 8004738:	e01e      	b.n	8004778 <hataKoduLcdGoster+0x188>
	} else if(x==6){
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b06      	cmp	r3, #6
 800473e:	d11b      	bne.n	8004778 <hataKoduLcdGoster+0x188>
		if(dilSecim==0){
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <hataKoduLcdGoster+0x162>
		lcd_print(1, 1, "   HATA KODU    ");
 8004748:	4a0e      	ldr	r2, [pc, #56]	; (8004784 <hataKoduLcdGoster+0x194>)
 800474a:	2101      	movs	r1, #1
 800474c:	2001      	movs	r0, #1
 800474e:	f7fb fe4f 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <hataKoduLcdGoster+0x190>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d104      	bne.n	8004764 <hataKoduLcdGoster+0x174>
		lcd_print(1, 1, "   ERROR CODE   ");
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <hataKoduLcdGoster+0x198>)
 800475c:	2101      	movs	r1, #1
 800475e:	2001      	movs	r0, #1
 8004760:	f7fb fe46 	bl	80003f0 <lcd_print>
		lcd_print(2, 6, "6");
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <hataKoduLcdGoster+0x1b4>)
 8004766:	2106      	movs	r1, #6
 8004768:	2002      	movs	r0, #2
 800476a:	f7fb fe41 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <hataKoduLcdGoster+0x1a0>)
 8004770:	2107      	movs	r1, #7
 8004772:	2002      	movs	r0, #2
 8004774:	f7fb fe3c 	bl	80003f0 <lcd_print>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000c6c 	.word	0x20000c6c
 8004784:	0800c95c 	.word	0x0800c95c
 8004788:	0800c970 	.word	0x0800c970
 800478c:	0800c984 	.word	0x0800c984
 8004790:	0800c988 	.word	0x0800c988
 8004794:	0800c994 	.word	0x0800c994
 8004798:	0800c998 	.word	0x0800c998
 800479c:	0800c99c 	.word	0x0800c99c
 80047a0:	0800c9a0 	.word	0x0800c9a0
 80047a4:	0800c9a4 	.word	0x0800c9a4

080047a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	20000c2c 	.word	0x20000c2c

080047c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047c8:	b5b0      	push	{r4, r5, r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047ce:	f002 fff7 	bl	80077c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80047d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047d6:	f003 f855 	bl	8007884 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047da:	f002 fc31 	bl	8007040 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047de:	f002 fd53 	bl	8007288 <MX_GPIO_Init>
  MX_CAN_Init();
 80047e2:	f002 fc73 	bl	80070cc <MX_CAN_Init>
  MX_I2C1_Init();
 80047e6:	f002 fca5 	bl	8007134 <MX_I2C1_Init>
  MX_TIM1_Init();
 80047ea:	f002 fcd1 	bl	8007190 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80047ee:	f002 fd21 	bl	8007234 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80047f2:	2201      	movs	r2, #1
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4848      	ldr	r0, [pc, #288]	; (8004918 <main+0x150>)
 80047f8:	f003 fce9 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80047fc:	2201      	movs	r2, #1
 80047fe:	2180      	movs	r1, #128	; 0x80
 8004800:	4845      	ldr	r0, [pc, #276]	; (8004918 <main+0x150>)
 8004802:	f003 fce4 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004806:	200a      	movs	r0, #10
 8004808:	f003 f83c 	bl	8007884 <HAL_Delay>
  lcd_init();
 800480c:	f7fb fdc1 	bl	8000392 <lcd_init>
  HAL_Delay(10);
 8004810:	200a      	movs	r0, #10
 8004812:	f003 f837 	bl	8007884 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8004816:	4841      	ldr	r0, [pc, #260]	; (800491c <main+0x154>)
 8004818:	f005 fb3c 	bl	8009e94 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800481c:	bf00      	nop
 800481e:	4840      	ldr	r0, [pc, #256]	; (8004920 <main+0x158>)
 8004820:	f004 fae7 	bl	8008df2 <HAL_I2C_GetError>
 8004824:	4603      	mov	r3, r0
 8004826:	2b04      	cmp	r3, #4
 8004828:	d0f9      	beq.n	800481e <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800482a:	bf00      	nop
 800482c:	483c      	ldr	r0, [pc, #240]	; (8004920 <main+0x158>)
 800482e:	f004 fad3 	bl	8008dd8 <HAL_I2C_GetState>
 8004832:	4603      	mov	r3, r0
 8004834:	2b20      	cmp	r3, #32
 8004836:	d1f9      	bne.n	800482c <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800483e:	4836      	ldr	r0, [pc, #216]	; (8004918 <main+0x150>)
 8004840:	f003 fcc5 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800484a:	4833      	ldr	r0, [pc, #204]	; (8004918 <main+0x150>)
 800484c:	f003 fcbf 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004850:	2200      	movs	r2, #0
 8004852:	2104      	movs	r1, #4
 8004854:	4830      	ldr	r0, [pc, #192]	; (8004918 <main+0x150>)
 8004856:	f003 fcba 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800485a:	2200      	movs	r2, #0
 800485c:	2102      	movs	r1, #2
 800485e:	482e      	ldr	r0, [pc, #184]	; (8004918 <main+0x150>)
 8004860:	f003 fcb5 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004864:	2200      	movs	r2, #0
 8004866:	2101      	movs	r1, #1
 8004868:	482b      	ldr	r0, [pc, #172]	; (8004918 <main+0x150>)
 800486a:	f003 fcb0 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800486e:	2200      	movs	r2, #0
 8004870:	2120      	movs	r1, #32
 8004872:	482c      	ldr	r0, [pc, #176]	; (8004924 <main+0x15c>)
 8004874:	f003 fcab 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004878:	2200      	movs	r2, #0
 800487a:	2110      	movs	r1, #16
 800487c:	4829      	ldr	r0, [pc, #164]	; (8004924 <main+0x15c>)
 800487e:	f003 fca6 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004882:	2200      	movs	r2, #0
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	4828      	ldr	r0, [pc, #160]	; (8004928 <main+0x160>)
 8004888:	f003 fca1 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800488c:	2200      	movs	r2, #0
 800488e:	2140      	movs	r1, #64	; 0x40
 8004890:	4825      	ldr	r0, [pc, #148]	; (8004928 <main+0x160>)
 8004892:	f003 fc9c 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004896:	2200      	movs	r2, #0
 8004898:	2120      	movs	r1, #32
 800489a:	4823      	ldr	r0, [pc, #140]	; (8004928 <main+0x160>)
 800489c:	f003 fc97 	bl	80081ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80048a0:	2200      	movs	r2, #0
 80048a2:	2110      	movs	r1, #16
 80048a4:	4820      	ldr	r0, [pc, #128]	; (8004928 <main+0x160>)
 80048a6:	f003 fc92 	bl	80081ce <HAL_GPIO_WritePin>

  i2cTest();
 80048aa:	f000 f84b 	bl	8004944 <i2cTest>
  HAL_Delay(100);
 80048ae:	2064      	movs	r0, #100	; 0x64
 80048b0:	f002 ffe8 	bl	8007884 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80048b4:	4a1d      	ldr	r2, [pc, #116]	; (800492c <main+0x164>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fb fd99 	bl	80003f0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <main+0x168>)
 80048c0:	2101      	movs	r1, #1
 80048c2:	2002      	movs	r0, #2
 80048c4:	f7fb fd94 	bl	80003f0 <lcd_print>
  HAL_Delay(1000);
 80048c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048cc:	f002 ffda 	bl	8007884 <HAL_Delay>
  lcd_clear();
 80048d0:	f7fb fda3 	bl	800041a <lcd_clear>

  eepromKontrol();
 80048d4:	f000 f93c 	bl	8004b50 <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80048d8:	4b16      	ldr	r3, [pc, #88]	; (8004934 <main+0x16c>)
 80048da:	1d3c      	adds	r4, r7, #4
 80048dc:	461d      	mov	r5, r3
 80048de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f005 ffa8 	bl	800a844 <osThreadCreate>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <main+0x170>)
 80048f8:	6013      	str	r3, [r2, #0]

  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80048fa:	2300      	movs	r3, #0
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	2301      	movs	r3, #1
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2300      	movs	r3, #0
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	490d      	ldr	r1, [pc, #52]	; (800493c <main+0x174>)
 8004908:	480d      	ldr	r0, [pc, #52]	; (8004940 <main+0x178>)
 800490a:	f006 f906 	bl	800ab1a <xTaskCreate>
  //xTaskCreate(wifiTask, "wifiTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  //xTaskCreate(wifiTaskTest, "wifiTaskTest", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  vTaskStartScheduler();
 800490e:	f006 fa67 	bl	800ade0 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004912:	f005 ff90 	bl	800a836 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004916:	e7fe      	b.n	8004916 <main+0x14e>
 8004918:	40010c00 	.word	0x40010c00
 800491c:	20000ea0 	.word	0x20000ea0
 8004920:	20000e08 	.word	0x20000e08
 8004924:	40011000 	.word	0x40011000
 8004928:	40010800 	.word	0x40010800
 800492c:	0800c9a8 	.word	0x0800c9a8
 8004930:	0800c9bc 	.word	0x0800c9bc
 8004934:	0800c9e8 	.word	0x0800c9e8
 8004938:	20000ee8 	.word	0x20000ee8
 800493c:	0800c9d0 	.word	0x0800c9d0
 8004940:	08005011 	.word	0x08005011

08004944 <i2cTest>:
	for(int i=0; i<indeksSayisi; i++) {
		eepromData[eepromVal[i]] = 0;
	}
}

void i2cTest(void) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800494a:	463b      	mov	r3, r7
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004956:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <i2cTest+0x154>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b4e      	ldr	r3, [pc, #312]	; (8004a98 <i2cTest+0x154>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004966:	484c      	ldr	r0, [pc, #304]	; (8004a98 <i2cTest+0x154>)
 8004968:	f003 fda6 	bl	80084b8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800496c:	23c0      	movs	r3, #192	; 0xc0
 800496e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004970:	2311      	movs	r3, #17
 8004972:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004974:	2301      	movs	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004978:	2303      	movs	r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800497c:	463b      	mov	r3, r7
 800497e:	4619      	mov	r1, r3
 8004980:	4846      	ldr	r0, [pc, #280]	; (8004a9c <i2cTest+0x158>)
 8004982:	f003 f9ad 	bl	8007ce0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004986:	2201      	movs	r2, #1
 8004988:	2140      	movs	r1, #64	; 0x40
 800498a:	4844      	ldr	r0, [pc, #272]	; (8004a9c <i2cTest+0x158>)
 800498c:	f003 fc1f 	bl	80081ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004990:	2201      	movs	r2, #1
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	4841      	ldr	r0, [pc, #260]	; (8004a9c <i2cTest+0x158>)
 8004996:	f003 fc1a 	bl	80081ce <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800499a:	200a      	movs	r0, #10
 800499c:	f002 ff72 	bl	8007884 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80049a0:	bf00      	nop
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	483d      	ldr	r0, [pc, #244]	; (8004a9c <i2cTest+0x158>)
 80049a6:	f003 fbfb 	bl	80081a0 <HAL_GPIO_ReadPin>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d006      	beq.n	80049be <i2cTest+0x7a>
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	483a      	ldr	r0, [pc, #232]	; (8004a9c <i2cTest+0x158>)
 80049b4:	f003 fbf4 	bl	80081a0 <HAL_GPIO_ReadPin>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d1f1      	bne.n	80049a2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80049be:	2200      	movs	r2, #0
 80049c0:	2180      	movs	r1, #128	; 0x80
 80049c2:	4836      	ldr	r0, [pc, #216]	; (8004a9c <i2cTest+0x158>)
 80049c4:	f003 fc03 	bl	80081ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80049c8:	200a      	movs	r0, #10
 80049ca:	f002 ff5b 	bl	8007884 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80049ce:	bf00      	nop
 80049d0:	2180      	movs	r1, #128	; 0x80
 80049d2:	4832      	ldr	r0, [pc, #200]	; (8004a9c <i2cTest+0x158>)
 80049d4:	f003 fbe4 	bl	80081a0 <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d0f8      	beq.n	80049d0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80049de:	2200      	movs	r2, #0
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	482e      	ldr	r0, [pc, #184]	; (8004a9c <i2cTest+0x158>)
 80049e4:	f003 fbf3 	bl	80081ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80049e8:	200a      	movs	r0, #10
 80049ea:	f002 ff4b 	bl	8007884 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80049ee:	bf00      	nop
 80049f0:	2140      	movs	r1, #64	; 0x40
 80049f2:	482a      	ldr	r0, [pc, #168]	; (8004a9c <i2cTest+0x158>)
 80049f4:	f003 fbd4 	bl	80081a0 <HAL_GPIO_ReadPin>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d0f8      	beq.n	80049f0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80049fe:	2201      	movs	r2, #1
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	4826      	ldr	r0, [pc, #152]	; (8004a9c <i2cTest+0x158>)
 8004a04:	f003 fbe3 	bl	80081ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004a08:	200a      	movs	r0, #10
 8004a0a:	f002 ff3b 	bl	8007884 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8004a0e:	bf00      	nop
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	4822      	ldr	r0, [pc, #136]	; (8004a9c <i2cTest+0x158>)
 8004a14:	f003 fbc4 	bl	80081a0 <HAL_GPIO_ReadPin>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d1f8      	bne.n	8004a10 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004a1e:	2201      	movs	r2, #1
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	481e      	ldr	r0, [pc, #120]	; (8004a9c <i2cTest+0x158>)
 8004a24:	f003 fbd3 	bl	80081ce <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004a28:	200a      	movs	r0, #10
 8004a2a:	f002 ff2b 	bl	8007884 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004a2e:	bf00      	nop
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	481a      	ldr	r0, [pc, #104]	; (8004a9c <i2cTest+0x158>)
 8004a34:	f003 fbb4 	bl	80081a0 <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d1f8      	bne.n	8004a30 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a3e:	23c0      	movs	r3, #192	; 0xc0
 8004a40:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004a42:	2312      	movs	r3, #18
 8004a44:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004a46:	2301      	movs	r3, #1
 8004a48:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004a4e:	463b      	mov	r3, r7
 8004a50:	4619      	mov	r1, r3
 8004a52:	4812      	ldr	r0, [pc, #72]	; (8004a9c <i2cTest+0x158>)
 8004a54:	f003 f944 	bl	8007ce0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <i2cTest+0x154>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <i2cTest+0x154>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a66:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <i2cTest+0x154>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <i2cTest+0x154>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a76:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <i2cTest+0x154>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <i2cTest+0x154>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004a88:	4803      	ldr	r0, [pc, #12]	; (8004a98 <i2cTest+0x154>)
 8004a8a:	f003 fbd1 	bl	8008230 <HAL_I2C_Init>
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000e08 	.word	0x20000e08
 8004a9c:	40010c00 	.word	0x40010c00

08004aa0 <lcdupdate>:

void lcdupdate(uint8_t y) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <lcdupdate+0x1c>
		lcd_print(2, 1, " ");
 8004ab0:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <lcdupdate+0xa4>)
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f7fb fc9b 	bl	80003f0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainText);
		lcd_print(2, 1, mainText2);
	}
}
 8004aba:	e03f      	b.n	8004b3c <lcdupdate+0x9c>
	} else if(y==2) {
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d105      	bne.n	8004ace <lcdupdate+0x2e>
		lcd_print(2, 2, " ");
 8004ac2:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <lcdupdate+0xa4>)
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f7fb fc92 	bl	80003f0 <lcd_print>
}
 8004acc:	e036      	b.n	8004b3c <lcdupdate+0x9c>
	} else if(y==3) {
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d105      	bne.n	8004ae0 <lcdupdate+0x40>
		lcd_print(2, 3, " ");
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <lcdupdate+0xa4>)
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f7fb fc89 	bl	80003f0 <lcd_print>
}
 8004ade:	e02d      	b.n	8004b3c <lcdupdate+0x9c>
	} else if(y==4) {
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d105      	bne.n	8004af2 <lcdupdate+0x52>
		lcd_print(2, 4, " ");
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <lcdupdate+0xa4>)
 8004ae8:	2104      	movs	r1, #4
 8004aea:	2002      	movs	r0, #2
 8004aec:	f7fb fc80 	bl	80003f0 <lcd_print>
}
 8004af0:	e024      	b.n	8004b3c <lcdupdate+0x9c>
	} else if(y==5) {
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d105      	bne.n	8004b04 <lcdupdate+0x64>
		lcd_print(2, 5, " ");
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <lcdupdate+0xa4>)
 8004afa:	2105      	movs	r1, #5
 8004afc:	2002      	movs	r0, #2
 8004afe:	f7fb fc77 	bl	80003f0 <lcd_print>
}
 8004b02:	e01b      	b.n	8004b3c <lcdupdate+0x9c>
	} else if(y==6) {
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d105      	bne.n	8004b16 <lcdupdate+0x76>
		lcd_print(2, 6, " ");
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <lcdupdate+0xa4>)
 8004b0c:	2106      	movs	r1, #6
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f7fb fc6e 	bl	80003f0 <lcd_print>
}
 8004b14:	e012      	b.n	8004b3c <lcdupdate+0x9c>
	} else if (y==7) {
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d10f      	bne.n	8004b3c <lcdupdate+0x9c>
		lcd_clear();
 8004b1c:	f7fb fc7d 	bl	800041a <lcd_clear>
		lcd_print(1, 1, mainText);
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <lcdupdate+0xa8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	2101      	movs	r1, #1
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f7fb fc61 	bl	80003f0 <lcd_print>
		lcd_print(2, 1, mainText2);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <lcdupdate+0xac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	2101      	movs	r1, #1
 8004b36:	2002      	movs	r0, #2
 8004b38:	f7fb fc5a 	bl	80003f0 <lcd_print>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	0800c080 	.word	0x0800c080
 8004b48:	20000cb0 	.word	0x20000cb0
 8004b4c:	20000cb4 	.word	0x20000cb4

08004b50 <eepromKontrol>:

void eepromKontrol() {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004b56:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	233f      	movs	r3, #63	; 0x3f
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	4b9b      	ldr	r3, [pc, #620]	; (8004dd0 <eepromKontrol+0x280>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	233f      	movs	r3, #63	; 0x3f
 8004b66:	2200      	movs	r2, #0
 8004b68:	21a0      	movs	r1, #160	; 0xa0
 8004b6a:	489a      	ldr	r0, [pc, #616]	; (8004dd4 <eepromKontrol+0x284>)
 8004b6c:	f003 fecc 	bl	8008908 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b74:	f002 fe86 	bl	8007884 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004b78:	4b95      	ldr	r3, [pc, #596]	; (8004dd0 <eepromKontrol+0x280>)
 8004b7a:	78da      	ldrb	r2, [r3, #3]
 8004b7c:	4b96      	ldr	r3, [pc, #600]	; (8004dd8 <eepromKontrol+0x288>)
 8004b7e:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004b80:	4b93      	ldr	r3, [pc, #588]	; (8004dd0 <eepromKontrol+0x280>)
 8004b82:	785a      	ldrb	r2, [r3, #1]
 8004b84:	4b95      	ldr	r3, [pc, #596]	; (8004ddc <eepromKontrol+0x28c>)
 8004b86:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004b88:	4b91      	ldr	r3, [pc, #580]	; (8004dd0 <eepromKontrol+0x280>)
 8004b8a:	789a      	ldrb	r2, [r3, #2]
 8004b8c:	4b94      	ldr	r3, [pc, #592]	; (8004de0 <eepromKontrol+0x290>)
 8004b8e:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004b90:	4b8f      	ldr	r3, [pc, #572]	; (8004dd0 <eepromKontrol+0x280>)
 8004b92:	791a      	ldrb	r2, [r3, #4]
 8004b94:	4b93      	ldr	r3, [pc, #588]	; (8004de4 <eepromKontrol+0x294>)
 8004b96:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004b98:	4b8d      	ldr	r3, [pc, #564]	; (8004dd0 <eepromKontrol+0x280>)
 8004b9a:	795a      	ldrb	r2, [r3, #5]
 8004b9c:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <eepromKontrol+0x298>)
 8004b9e:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004ba0:	4b8b      	ldr	r3, [pc, #556]	; (8004dd0 <eepromKontrol+0x280>)
 8004ba2:	799a      	ldrb	r2, [r3, #6]
 8004ba4:	4b91      	ldr	r3, [pc, #580]	; (8004dec <eepromKontrol+0x29c>)
 8004ba6:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004ba8:	4b89      	ldr	r3, [pc, #548]	; (8004dd0 <eepromKontrol+0x280>)
 8004baa:	79da      	ldrb	r2, [r3, #7]
 8004bac:	4b90      	ldr	r3, [pc, #576]	; (8004df0 <eepromKontrol+0x2a0>)
 8004bae:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004bb0:	4b87      	ldr	r3, [pc, #540]	; (8004dd0 <eepromKontrol+0x280>)
 8004bb2:	7a1a      	ldrb	r2, [r3, #8]
 8004bb4:	4b8f      	ldr	r3, [pc, #572]	; (8004df4 <eepromKontrol+0x2a4>)
 8004bb6:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004bb8:	4b85      	ldr	r3, [pc, #532]	; (8004dd0 <eepromKontrol+0x280>)
 8004bba:	7a5a      	ldrb	r2, [r3, #9]
 8004bbc:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <eepromKontrol+0x2a8>)
 8004bbe:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004bc0:	4b83      	ldr	r3, [pc, #524]	; (8004dd0 <eepromKontrol+0x280>)
 8004bc2:	7a9a      	ldrb	r2, [r3, #10]
 8004bc4:	4b8d      	ldr	r3, [pc, #564]	; (8004dfc <eepromKontrol+0x2ac>)
 8004bc6:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004bc8:	4b81      	ldr	r3, [pc, #516]	; (8004dd0 <eepromKontrol+0x280>)
 8004bca:	7ada      	ldrb	r2, [r3, #11]
 8004bcc:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <eepromKontrol+0x2b0>)
 8004bce:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004bd0:	4b7f      	ldr	r3, [pc, #508]	; (8004dd0 <eepromKontrol+0x280>)
 8004bd2:	7b1a      	ldrb	r2, [r3, #12]
 8004bd4:	4b8b      	ldr	r3, [pc, #556]	; (8004e04 <eepromKontrol+0x2b4>)
 8004bd6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004bd8:	4b7d      	ldr	r3, [pc, #500]	; (8004dd0 <eepromKontrol+0x280>)
 8004bda:	7b5a      	ldrb	r2, [r3, #13]
 8004bdc:	4b8a      	ldr	r3, [pc, #552]	; (8004e08 <eepromKontrol+0x2b8>)
 8004bde:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004be0:	4b7b      	ldr	r3, [pc, #492]	; (8004dd0 <eepromKontrol+0x280>)
 8004be2:	7b9a      	ldrb	r2, [r3, #14]
 8004be4:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <eepromKontrol+0x2bc>)
 8004be6:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <eepromKontrol+0x280>)
 8004bea:	7bda      	ldrb	r2, [r3, #15]
 8004bec:	4b88      	ldr	r3, [pc, #544]	; (8004e10 <eepromKontrol+0x2c0>)
 8004bee:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004bf0:	4b77      	ldr	r3, [pc, #476]	; (8004dd0 <eepromKontrol+0x280>)
 8004bf2:	7c1a      	ldrb	r2, [r3, #16]
 8004bf4:	4b87      	ldr	r3, [pc, #540]	; (8004e14 <eepromKontrol+0x2c4>)
 8004bf6:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004bf8:	4b75      	ldr	r3, [pc, #468]	; (8004dd0 <eepromKontrol+0x280>)
 8004bfa:	7c5a      	ldrb	r2, [r3, #17]
 8004bfc:	4b86      	ldr	r3, [pc, #536]	; (8004e18 <eepromKontrol+0x2c8>)
 8004bfe:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004c00:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <eepromKontrol+0x280>)
 8004c02:	7c9a      	ldrb	r2, [r3, #18]
 8004c04:	4b85      	ldr	r3, [pc, #532]	; (8004e1c <eepromKontrol+0x2cc>)
 8004c06:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004c08:	4b71      	ldr	r3, [pc, #452]	; (8004dd0 <eepromKontrol+0x280>)
 8004c0a:	7cda      	ldrb	r2, [r3, #19]
 8004c0c:	4b84      	ldr	r3, [pc, #528]	; (8004e20 <eepromKontrol+0x2d0>)
 8004c0e:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <eepromKontrol+0x280>)
 8004c12:	7d1a      	ldrb	r2, [r3, #20]
 8004c14:	4b83      	ldr	r3, [pc, #524]	; (8004e24 <eepromKontrol+0x2d4>)
 8004c16:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004c18:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <eepromKontrol+0x280>)
 8004c1a:	7d5a      	ldrb	r2, [r3, #21]
 8004c1c:	4b82      	ldr	r3, [pc, #520]	; (8004e28 <eepromKontrol+0x2d8>)
 8004c1e:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004c20:	4b6b      	ldr	r3, [pc, #428]	; (8004dd0 <eepromKontrol+0x280>)
 8004c22:	7d9a      	ldrb	r2, [r3, #22]
 8004c24:	4b81      	ldr	r3, [pc, #516]	; (8004e2c <eepromKontrol+0x2dc>)
 8004c26:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004c28:	4b69      	ldr	r3, [pc, #420]	; (8004dd0 <eepromKontrol+0x280>)
 8004c2a:	7dda      	ldrb	r2, [r3, #23]
 8004c2c:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <eepromKontrol+0x2e0>)
 8004c2e:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004c30:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <eepromKontrol+0x280>)
 8004c32:	7e1a      	ldrb	r2, [r3, #24]
 8004c34:	4b7f      	ldr	r3, [pc, #508]	; (8004e34 <eepromKontrol+0x2e4>)
 8004c36:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004c38:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <eepromKontrol+0x280>)
 8004c3a:	7e5a      	ldrb	r2, [r3, #25]
 8004c3c:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <eepromKontrol+0x2e8>)
 8004c3e:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004c40:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <eepromKontrol+0x280>)
 8004c42:	7e9a      	ldrb	r2, [r3, #26]
 8004c44:	4b7d      	ldr	r3, [pc, #500]	; (8004e3c <eepromKontrol+0x2ec>)
 8004c46:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004c48:	4b61      	ldr	r3, [pc, #388]	; (8004dd0 <eepromKontrol+0x280>)
 8004c4a:	7eda      	ldrb	r2, [r3, #27]
 8004c4c:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <eepromKontrol+0x2f0>)
 8004c4e:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004c50:	4b5f      	ldr	r3, [pc, #380]	; (8004dd0 <eepromKontrol+0x280>)
 8004c52:	7f1a      	ldrb	r2, [r3, #28]
 8004c54:	4b7b      	ldr	r3, [pc, #492]	; (8004e44 <eepromKontrol+0x2f4>)
 8004c56:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004c58:	4b5d      	ldr	r3, [pc, #372]	; (8004dd0 <eepromKontrol+0x280>)
 8004c5a:	7f5a      	ldrb	r2, [r3, #29]
 8004c5c:	4b7a      	ldr	r3, [pc, #488]	; (8004e48 <eepromKontrol+0x2f8>)
 8004c5e:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004c60:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <eepromKontrol+0x280>)
 8004c62:	7f9a      	ldrb	r2, [r3, #30]
 8004c64:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <eepromKontrol+0x2fc>)
 8004c66:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004c68:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <eepromKontrol+0x280>)
 8004c6a:	7fda      	ldrb	r2, [r3, #31]
 8004c6c:	4b78      	ldr	r3, [pc, #480]	; (8004e50 <eepromKontrol+0x300>)
 8004c6e:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004c70:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <eepromKontrol+0x280>)
 8004c72:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004c76:	4b77      	ldr	r3, [pc, #476]	; (8004e54 <eepromKontrol+0x304>)
 8004c78:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004c7a:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <eepromKontrol+0x280>)
 8004c7c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004c80:	4b75      	ldr	r3, [pc, #468]	; (8004e58 <eepromKontrol+0x308>)
 8004c82:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004c84:	4b52      	ldr	r3, [pc, #328]	; (8004dd0 <eepromKontrol+0x280>)
 8004c86:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004c8a:	4b74      	ldr	r3, [pc, #464]	; (8004e5c <eepromKontrol+0x30c>)
 8004c8c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004c8e:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <eepromKontrol+0x280>)
 8004c90:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004c94:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <eepromKontrol+0x310>)
 8004c96:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004c98:	4b4d      	ldr	r3, [pc, #308]	; (8004dd0 <eepromKontrol+0x280>)
 8004c9a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004c9e:	4b71      	ldr	r3, [pc, #452]	; (8004e64 <eepromKontrol+0x314>)
 8004ca0:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004ca2:	4b4b      	ldr	r3, [pc, #300]	; (8004dd0 <eepromKontrol+0x280>)
 8004ca4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004ca8:	4b6f      	ldr	r3, [pc, #444]	; (8004e68 <eepromKontrol+0x318>)
 8004caa:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004cac:	4b48      	ldr	r3, [pc, #288]	; (8004dd0 <eepromKontrol+0x280>)
 8004cae:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004cb2:	4b6e      	ldr	r3, [pc, #440]	; (8004e6c <eepromKontrol+0x31c>)
 8004cb4:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <eepromKontrol+0x280>)
 8004cb8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	; (8004e70 <eepromKontrol+0x320>)
 8004cbe:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004cc0:	4b43      	ldr	r3, [pc, #268]	; (8004dd0 <eepromKontrol+0x280>)
 8004cc2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004cc6:	4b6b      	ldr	r3, [pc, #428]	; (8004e74 <eepromKontrol+0x324>)
 8004cc8:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004cca:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <eepromKontrol+0x280>)
 8004ccc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004cd0:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <eepromKontrol+0x328>)
 8004cd2:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004cd4:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <eepromKontrol+0x280>)
 8004cd6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004cda:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <eepromKontrol+0x32c>)
 8004cdc:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004cde:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <eepromKontrol+0x280>)
 8004ce0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004ce4:	4b66      	ldr	r3, [pc, #408]	; (8004e80 <eepromKontrol+0x330>)
 8004ce6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <eepromKontrol+0x280>)
 8004cea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004cee:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <eepromKontrol+0x334>)
 8004cf0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004cf2:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <eepromKontrol+0x280>)
 8004cf4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004cf8:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <eepromKontrol+0x338>)
 8004cfa:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <eepromKontrol+0x280>)
 8004cfe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004d02:	4b62      	ldr	r3, [pc, #392]	; (8004e8c <eepromKontrol+0x33c>)
 8004d04:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004d06:	4b54      	ldr	r3, [pc, #336]	; (8004e58 <eepromKontrol+0x308>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe feb4 	bl	8003a78 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004d10:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <eepromKontrol+0x304>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	d902      	bls.n	8004d1e <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004d18:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <eepromKontrol+0x304>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004d1e:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <eepromKontrol+0x300>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	d902      	bls.n	8004d2c <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <eepromKontrol+0x300>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004d2c:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <eepromKontrol+0x2fc>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d902      	bls.n	8004d3a <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004d34:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <eepromKontrol+0x2fc>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004d3a:	4b43      	ldr	r3, [pc, #268]	; (8004e48 <eepromKontrol+0x2f8>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b09      	cmp	r3, #9
 8004d40:	d902      	bls.n	8004d48 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <eepromKontrol+0x2f8>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004d48:	4b3e      	ldr	r3, [pc, #248]	; (8004e44 <eepromKontrol+0x2f4>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d902      	bls.n	8004d56 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004d50:	4b3c      	ldr	r3, [pc, #240]	; (8004e44 <eepromKontrol+0x2f4>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <eepromKontrol+0x28c>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d902      	bls.n	8004d64 <eepromKontrol+0x214>
	    calismaSekli=0;
 8004d5e:	4b1f      	ldr	r3, [pc, #124]	; (8004ddc <eepromKontrol+0x28c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004d64:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <eepromKontrol+0x290>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d902      	bls.n	8004d72 <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <eepromKontrol+0x290>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <eepromKontrol+0x294>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d902      	bls.n	8004d80 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <eepromKontrol+0x294>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <eepromKontrol+0x298>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d902      	bls.n	8004d8e <eepromKontrol+0x23e>
	    altLimit=1;
 8004d88:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <eepromKontrol+0x298>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <eepromKontrol+0x29c>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d902      	bls.n	8004d9c <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <eepromKontrol+0x29c>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <eepromKontrol+0x2a0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d902      	bls.n	8004daa <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <eepromKontrol+0x2a0>)
 8004da6:	2203      	movs	r2, #3
 8004da8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <eepromKontrol+0x314>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d902      	bls.n	8004db8 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004db2:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <eepromKontrol+0x314>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004db8:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <eepromKontrol+0x2a4>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d902      	bls.n	8004dc6 <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <eepromKontrol+0x2a4>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <eepromKontrol+0x2a8>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d963      	bls.n	8004e96 <eepromKontrol+0x346>
 8004dce:	e05f      	b.n	8004e90 <eepromKontrol+0x340>
 8004dd0:	20000be4 	.word	0x20000be4
 8004dd4:	20000e08 	.word	0x20000e08
 8004dd8:	20000c23 	.word	0x20000c23
 8004ddc:	20000c4d 	.word	0x20000c4d
 8004de0:	20000c50 	.word	0x20000c50
 8004de4:	20000c51 	.word	0x20000c51
 8004de8:	20000c52 	.word	0x20000c52
 8004dec:	20000c53 	.word	0x20000c53
 8004df0:	20000c54 	.word	0x20000c54
 8004df4:	20000c55 	.word	0x20000c55
 8004df8:	20000c65 	.word	0x20000c65
 8004dfc:	20000c56 	.word	0x20000c56
 8004e00:	20000c66 	.word	0x20000c66
 8004e04:	20000c57 	.word	0x20000c57
 8004e08:	20000c67 	.word	0x20000c67
 8004e0c:	20000c5a 	.word	0x20000c5a
 8004e10:	20000c5b 	.word	0x20000c5b
 8004e14:	20000c5c 	.word	0x20000c5c
 8004e18:	20000c5d 	.word	0x20000c5d
 8004e1c:	20000c5e 	.word	0x20000c5e
 8004e20:	20000c5f 	.word	0x20000c5f
 8004e24:	20000c60 	.word	0x20000c60
 8004e28:	20000c61 	.word	0x20000c61
 8004e2c:	20000c62 	.word	0x20000c62
 8004e30:	20000c63 	.word	0x20000c63
 8004e34:	20000c64 	.word	0x20000c64
 8004e38:	20000c68 	.word	0x20000c68
 8004e3c:	20000c6a 	.word	0x20000c6a
 8004e40:	20000c48 	.word	0x20000c48
 8004e44:	20000c49 	.word	0x20000c49
 8004e48:	20000c4a 	.word	0x20000c4a
 8004e4c:	20000910 	.word	0x20000910
 8004e50:	20000911 	.word	0x20000911
 8004e54:	20000c4b 	.word	0x20000c4b
 8004e58:	20000c6c 	.word	0x20000c6c
 8004e5c:	20000c59 	.word	0x20000c59
 8004e60:	20000c6b 	.word	0x20000c6b
 8004e64:	20000c58 	.word	0x20000c58
 8004e68:	20000c6d 	.word	0x20000c6d
 8004e6c:	20000c6e 	.word	0x20000c6e
 8004e70:	20000c6f 	.word	0x20000c6f
 8004e74:	20000c70 	.word	0x20000c70
 8004e78:	20000c71 	.word	0x20000c71
 8004e7c:	20000c72 	.word	0x20000c72
 8004e80:	20000c73 	.word	0x20000c73
 8004e84:	20000c74 	.word	0x20000c74
 8004e88:	20000c75 	.word	0x20000c75
 8004e8c:	20000c76 	.word	0x20000c76
	    kapi1AcSure=5;
 8004e90:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <eepromKontrol+0x46c>)
 8004e92:	2205      	movs	r2, #5
 8004e94:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <eepromKontrol+0x470>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d902      	bls.n	8004ea4 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004e9e:	4b48      	ldr	r3, [pc, #288]	; (8004fc0 <eepromKontrol+0x470>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004ea4:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <eepromKontrol+0x474>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d902      	bls.n	8004eb2 <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004eac:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <eepromKontrol+0x474>)
 8004eae:	2205      	movs	r2, #5
 8004eb0:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004eb2:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <eepromKontrol+0x478>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d902      	bls.n	8004ec0 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004eba:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <eepromKontrol+0x478>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <eepromKontrol+0x47c>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d902      	bls.n	8004ece <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <eepromKontrol+0x47c>)
 8004eca:	2202      	movs	r2, #2
 8004ecc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004ece:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <eepromKontrol+0x480>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d902      	bls.n	8004edc <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <eepromKontrol+0x480>)
 8004ed8:	2205      	movs	r2, #5
 8004eda:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004edc:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <eepromKontrol+0x484>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d902      	bls.n	8004eea <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <eepromKontrol+0x484>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <eepromKontrol+0x488>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004ef2:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <eepromKontrol+0x488>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004ef8:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <eepromKontrol+0x48c>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d902      	bls.n	8004f06 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004f00:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <eepromKontrol+0x48c>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004f06:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <eepromKontrol+0x490>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d902      	bls.n	8004f14 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004f0e:	4b34      	ldr	r3, [pc, #208]	; (8004fe0 <eepromKontrol+0x490>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004f14:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <eepromKontrol+0x494>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d902      	bls.n	8004f22 <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004f1c:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <eepromKontrol+0x494>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004f22:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <eepromKontrol+0x498>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d902      	bls.n	8004f30 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	; (8004fe8 <eepromKontrol+0x498>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004f30:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <eepromKontrol+0x49c>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d902      	bls.n	8004f3e <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <eepromKontrol+0x49c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004f3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <eepromKontrol+0x4a0>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d902      	bls.n	8004f4c <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <eepromKontrol+0x4a0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <eepromKontrol+0x4a4>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d902      	bls.n	8004f5a <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <eepromKontrol+0x4a4>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <eepromKontrol+0x4a8>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d902      	bls.n	8004f68 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004f62:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <eepromKontrol+0x4a8>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <eepromKontrol+0x4ac>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2bb4      	cmp	r3, #180	; 0xb4
 8004f6e:	d902      	bls.n	8004f76 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <eepromKontrol+0x4ac>)
 8004f72:	223c      	movs	r2, #60	; 0x3c
 8004f74:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <eepromKontrol+0x4b0>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d902      	bls.n	8004f84 <eepromKontrol+0x434>
	    buzzer=0;
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <eepromKontrol+0x4b0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004f84:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <eepromKontrol+0x4b4>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d902      	bls.n	8004f92 <eepromKontrol+0x442>
	    demoMode=0;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <eepromKontrol+0x4b4>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <eepromKontrol+0x4b8>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d902      	bls.n	8004fa0 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <eepromKontrol+0x4b8>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <eepromKontrol+0x4bc>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d902      	bls.n	8004fae <eepromKontrol+0x45e>
	    dilSecim=0;
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <eepromKontrol+0x4bc>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fb2:	f002 fc67 	bl	8007884 <HAL_Delay>
}
 8004fb6:	bf00      	nop
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000c65 	.word	0x20000c65
 8004fc0:	20000c56 	.word	0x20000c56
 8004fc4:	20000c66 	.word	0x20000c66
 8004fc8:	20000c57 	.word	0x20000c57
 8004fcc:	20000c59 	.word	0x20000c59
 8004fd0:	20000c67 	.word	0x20000c67
 8004fd4:	20000c5a 	.word	0x20000c5a
 8004fd8:	20000c5b 	.word	0x20000c5b
 8004fdc:	20000c5c 	.word	0x20000c5c
 8004fe0:	20000c5d 	.word	0x20000c5d
 8004fe4:	20000c5e 	.word	0x20000c5e
 8004fe8:	20000c5f 	.word	0x20000c5f
 8004fec:	20000c60 	.word	0x20000c60
 8004ff0:	20000c61 	.word	0x20000c61
 8004ff4:	20000c62 	.word	0x20000c62
 8004ff8:	20000c63 	.word	0x20000c63
 8004ffc:	20000c64 	.word	0x20000c64
 8005000:	20000c68 	.word	0x20000c68
 8005004:	20000c6a 	.word	0x20000c6a
 8005008:	20000c6b 	.word	0x20000c6b
 800500c:	20000c6c 	.word	0x20000c6c

08005010 <mainTask>:

void mainTask(void *pvParameters) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af04      	add	r7, sp, #16
 8005016:	6078      	str	r0, [r7, #4]
	while(1) {
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8005018:	2101      	movs	r1, #1
 800501a:	48a1      	ldr	r0, [pc, #644]	; (80052a0 <mainTask+0x290>)
 800501c:	f003 f8c0 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d135      	bne.n	8005092 <mainTask+0x82>
 8005026:	2108      	movs	r1, #8
 8005028:	489e      	ldr	r0, [pc, #632]	; (80052a4 <mainTask+0x294>)
 800502a:	f003 f8b9 	bl	80081a0 <HAL_GPIO_ReadPin>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d12e      	bne.n	8005092 <mainTask+0x82>
 8005034:	2102      	movs	r1, #2
 8005036:	489a      	ldr	r0, [pc, #616]	; (80052a0 <mainTask+0x290>)
 8005038:	f003 f8b2 	bl	80081a0 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d127      	bne.n	8005092 <mainTask+0x82>
 8005042:	2104      	movs	r1, #4
 8005044:	4896      	ldr	r0, [pc, #600]	; (80052a0 <mainTask+0x290>)
 8005046:	f003 f8ab 	bl	80081a0 <HAL_GPIO_ReadPin>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d120      	bne.n	8005092 <mainTask+0x82>
 8005050:	2108      	movs	r1, #8
 8005052:	4893      	ldr	r0, [pc, #588]	; (80052a0 <mainTask+0x290>)
 8005054:	f003 f8a4 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d119      	bne.n	8005092 <mainTask+0x82>
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	4890      	ldr	r0, [pc, #576]	; (80052a4 <mainTask+0x294>)
 8005062:	f003 f89d 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d112      	bne.n	8005092 <mainTask+0x82>
 800506c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005070:	488c      	ldr	r0, [pc, #560]	; (80052a4 <mainTask+0x294>)
 8005072:	f003 f895 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d10a      	bne.n	8005092 <mainTask+0x82>
 800507c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005080:	4888      	ldr	r0, [pc, #544]	; (80052a4 <mainTask+0x294>)
 8005082:	f003 f88d 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005086:	4603      	mov	r3, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <mainTask+0x82>
				   {
					   butonKontrol=0;
 800508c:	4b86      	ldr	r3, [pc, #536]	; (80052a8 <mainTask+0x298>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
				   }

				  if(hafizaYaz==1){
 8005092:	4b86      	ldr	r3, [pc, #536]	; (80052ac <mainTask+0x29c>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d038      	beq.n	800510c <mainTask+0xfc>
					  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800509a:	bf00      	nop
 800509c:	4884      	ldr	r0, [pc, #528]	; (80052b0 <mainTask+0x2a0>)
 800509e:	f003 fea8 	bl	8008df2 <HAL_I2C_GetError>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d0f9      	beq.n	800509c <mainTask+0x8c>
					  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80050a8:	bf00      	nop
 80050aa:	4881      	ldr	r0, [pc, #516]	; (80052b0 <mainTask+0x2a0>)
 80050ac:	f003 fe94 	bl	8008dd8 <HAL_I2C_GetState>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d1f9      	bne.n	80050aa <mainTask+0x9a>

					  }
					  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80050b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	233f      	movs	r3, #63	; 0x3f
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	4b7c      	ldr	r3, [pc, #496]	; (80052b4 <mainTask+0x2a4>)
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	233f      	movs	r3, #63	; 0x3f
 80050c6:	2200      	movs	r2, #0
 80050c8:	21a0      	movs	r1, #160	; 0xa0
 80050ca:	4879      	ldr	r0, [pc, #484]	; (80052b0 <mainTask+0x2a0>)
 80050cc:	f003 fb22 	bl	8008714 <HAL_I2C_Mem_Write>
					  HAL_Delay(5);
 80050d0:	2005      	movs	r0, #5
 80050d2:	f002 fbd7 	bl	8007884 <HAL_Delay>
					  hafizaYaz=0;
 80050d6:	4b75      	ldr	r3, [pc, #468]	; (80052ac <mainTask+0x29c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
					  if(dilSecim==0){
 80050dc:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <mainTask+0x2a8>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <mainTask+0xde>
						  lcd_print(2,1,"Data yazildi    ");
 80050e4:	4a75      	ldr	r2, [pc, #468]	; (80052bc <mainTask+0x2ac>)
 80050e6:	2101      	movs	r1, #1
 80050e8:	2002      	movs	r0, #2
 80050ea:	f7fb f981 	bl	80003f0 <lcd_print>
					  }
					  if(dilSecim==1){
 80050ee:	4b72      	ldr	r3, [pc, #456]	; (80052b8 <mainTask+0x2a8>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d104      	bne.n	8005100 <mainTask+0xf0>
						  lcd_print(2,1,"Data Wrote      ");
 80050f6:	4a72      	ldr	r2, [pc, #456]	; (80052c0 <mainTask+0x2b0>)
 80050f8:	2101      	movs	r1, #1
 80050fa:	2002      	movs	r0, #2
 80050fc:	f7fb f978 	bl	80003f0 <lcd_print>
					  }
					  HAL_Delay(1000);
 8005100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005104:	f002 fbbe 	bl	8007884 <HAL_Delay>
					  lcd_clear();
 8005108:	f7fb f987 	bl	800041a <lcd_clear>
				  }

				  if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)){
 800510c:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <mainTask+0x2b4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	f083 0301 	eor.w	r3, r3, #1
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d068      	beq.n	80051ec <mainTask+0x1dc>
 800511a:	4865      	ldr	r0, [pc, #404]	; (80052b0 <mainTask+0x2a0>)
 800511c:	f003 fe5c 	bl	8008dd8 <HAL_I2C_GetState>
 8005120:	4603      	mov	r3, r0
 8005122:	2b20      	cmp	r3, #32
 8005124:	d162      	bne.n	80051ec <mainTask+0x1dc>
					  if(ilkOkuma==0){
 8005126:	4b68      	ldr	r3, [pc, #416]	; (80052c8 <mainTask+0x2b8>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f083 0301 	eor.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d042      	beq.n	80051ba <mainTask+0x1aa>
						  lcd_print(1,1,"   **EEPROM**   ");
 8005134:	4a65      	ldr	r2, [pc, #404]	; (80052cc <mainTask+0x2bc>)
 8005136:	2101      	movs	r1, #1
 8005138:	2001      	movs	r0, #1
 800513a:	f7fb f959 	bl	80003f0 <lcd_print>
						  if(dilSecim==0){
 800513e:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <mainTask+0x2a8>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <mainTask+0x140>
							  lcd_print(2,1,"Data Okunuyor...");
 8005146:	4a62      	ldr	r2, [pc, #392]	; (80052d0 <mainTask+0x2c0>)
 8005148:	2101      	movs	r1, #1
 800514a:	2002      	movs	r0, #2
 800514c:	f7fb f950 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 8005150:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <mainTask+0x2a8>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d104      	bne.n	8005162 <mainTask+0x152>
							  lcd_print(2,1,"Data Reading... ");
 8005158:	4a5e      	ldr	r2, [pc, #376]	; (80052d4 <mainTask+0x2c4>)
 800515a:	2101      	movs	r1, #1
 800515c:	2002      	movs	r0, #2
 800515e:	f7fb f947 	bl	80003f0 <lcd_print>
						  }
						  HAL_Delay(1000);
 8005162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005166:	f002 fb8d 	bl	8007884 <HAL_Delay>
						  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800516a:	bf00      	nop
 800516c:	4850      	ldr	r0, [pc, #320]	; (80052b0 <mainTask+0x2a0>)
 800516e:	f003 fe40 	bl	8008df2 <HAL_I2C_GetError>
 8005172:	4603      	mov	r3, r0
 8005174:	2b04      	cmp	r3, #4
 8005176:	d0f9      	beq.n	800516c <mainTask+0x15c>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8005178:	e003      	b.n	8005182 <mainTask+0x172>
							  HAL_Delay(1000);
 800517a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800517e:	f002 fb81 	bl	8007884 <HAL_Delay>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8005182:	484b      	ldr	r0, [pc, #300]	; (80052b0 <mainTask+0x2a0>)
 8005184:	f003 fe28 	bl	8008dd8 <HAL_I2C_GetState>
 8005188:	4603      	mov	r3, r0
 800518a:	2b20      	cmp	r3, #32
 800518c:	d1f5      	bne.n	800517a <mainTask+0x16a>
						  }
						  if(dilSecim==0){
 800518e:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <mainTask+0x2a8>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <mainTask+0x190>
							  lcd_print(2,1,"Data Okundu.    ");
 8005196:	4a50      	ldr	r2, [pc, #320]	; (80052d8 <mainTask+0x2c8>)
 8005198:	2101      	movs	r1, #1
 800519a:	2002      	movs	r0, #2
 800519c:	f7fb f928 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 80051a0:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <mainTask+0x2a8>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d104      	bne.n	80051b2 <mainTask+0x1a2>
							  lcd_print(2,1,"Data Read.      ");
 80051a8:	4a4c      	ldr	r2, [pc, #304]	; (80052dc <mainTask+0x2cc>)
 80051aa:	2101      	movs	r1, #1
 80051ac:	2002      	movs	r0, #2
 80051ae:	f7fb f91f 	bl	80003f0 <lcd_print>
						  }
						  ilkOkuma=1;
 80051b2:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <mainTask+0x2b8>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e013      	b.n	80051e2 <mainTask+0x1d2>
					  }
					  else{
						  if(dilSecim==0){
 80051ba:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <mainTask+0x2a8>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <mainTask+0x1bc>
							  lcd_print(2,1,"Deger Kaydedildi");
 80051c2:	4a47      	ldr	r2, [pc, #284]	; (80052e0 <mainTask+0x2d0>)
 80051c4:	2101      	movs	r1, #1
 80051c6:	2002      	movs	r0, #2
 80051c8:	f7fb f912 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 80051cc:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <mainTask+0x2a8>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d104      	bne.n	80051de <mainTask+0x1ce>
							  lcd_print(2,1,"Value Saved     ");
 80051d4:	4a43      	ldr	r2, [pc, #268]	; (80052e4 <mainTask+0x2d4>)
 80051d6:	2101      	movs	r1, #1
 80051d8:	2002      	movs	r0, #2
 80051da:	f7fb f909 	bl	80003f0 <lcd_print>
						  }
						  lcd_clear();
 80051de:	f7fb f91c 	bl	800041a <lcd_clear>
					  }

					  eepromKontrol();
 80051e2:	f7ff fcb5 	bl	8004b50 <eepromKontrol>
					  hafizaOku=1;
 80051e6:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <mainTask+0x2b4>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
				  }

				  if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)){
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <mainTask+0x2d8>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d120      	bne.n	8005236 <mainTask+0x226>
 80051f4:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <mainTask+0x2dc>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <mainTask+0x226>
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <mainTask+0x2e0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d115      	bne.n	8005236 <mainTask+0x226>
					  lcd_clear();
 800520a:	f7fb f906 	bl	800041a <lcd_clear>
					  HAL_Delay(10);
 800520e:	200a      	movs	r0, #10
 8005210:	f002 fb38 	bl	8007884 <HAL_Delay>
					  lcd_print(1, 1, mainText);
 8005214:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <mainTask+0x2e4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	2101      	movs	r1, #1
 800521c:	2001      	movs	r0, #1
 800521e:	f7fb f8e7 	bl	80003f0 <lcd_print>
					  lcd_print(2, 1, mainText2);
 8005222:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <mainTask+0x2e8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	2101      	movs	r1, #1
 800522a:	2002      	movs	r0, #2
 800522c:	f7fb f8e0 	bl	80003f0 <lcd_print>
					  mesajYazildi=1;
 8005230:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <mainTask+0x2dc>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
				  }

				  if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1))
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <mainTask+0x2d8>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d112      	bne.n	8005264 <mainTask+0x254>
 800523e:	2102      	movs	r1, #2
 8005240:	4817      	ldr	r0, [pc, #92]	; (80052a0 <mainTask+0x290>)
 8005242:	f002 ffad 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10b      	bne.n	8005264 <mainTask+0x254>
 800524c:	2104      	movs	r1, #4
 800524e:	4814      	ldr	r0, [pc, #80]	; (80052a0 <mainTask+0x290>)
 8005250:	f002 ffa6 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d104      	bne.n	8005264 <mainTask+0x254>
				  {
					  menuGiris=1;
 800525a:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <mainTask+0x2d8>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8005260:	f7fb f8db 	bl	800041a <lcd_clear>
				  }
				  if(menuGiris==1){
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <mainTask+0x2d8>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <mainTask+0x260>
					  menu();
 800526c:	f7fb f9ac 	bl	80005c8 <menu>
				  }
				  HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005274:	480b      	ldr	r0, [pc, #44]	; (80052a4 <mainTask+0x294>)
 8005276:	f002 ffc2 	bl	80081fe <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

				  if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0){
 800527a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800527e:	481f      	ldr	r0, [pc, #124]	; (80052fc <mainTask+0x2ec>)
 8005280:	f002 ff8e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d13e      	bne.n	8005308 <mainTask+0x2f8>
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <mainTask+0x2f0>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	f083 0301 	eor.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d037      	beq.n	8005308 <mainTask+0x2f8>

					  stopVar=1;
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <mainTask+0x2f4>)
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e036      	b.n	800530e <mainTask+0x2fe>
 80052a0:	40010800 	.word	0x40010800
 80052a4:	40011000 	.word	0x40011000
 80052a8:	20000c7a 	.word	0x20000c7a
 80052ac:	20000c77 	.word	0x20000c77
 80052b0:	20000e08 	.word	0x20000e08
 80052b4:	20000be4 	.word	0x20000be4
 80052b8:	20000c6c 	.word	0x20000c6c
 80052bc:	0800ca04 	.word	0x0800ca04
 80052c0:	0800ca18 	.word	0x0800ca18
 80052c4:	20000c78 	.word	0x20000c78
 80052c8:	20000c79 	.word	0x20000c79
 80052cc:	0800ca2c 	.word	0x0800ca2c
 80052d0:	0800ca40 	.word	0x0800ca40
 80052d4:	0800ca54 	.word	0x0800ca54
 80052d8:	0800ca68 	.word	0x0800ca68
 80052dc:	0800ca7c 	.word	0x0800ca7c
 80052e0:	0800ca90 	.word	0x0800ca90
 80052e4:	0800caa4 	.word	0x0800caa4
 80052e8:	20000c69 	.word	0x20000c69
 80052ec:	20000c7f 	.word	0x20000c7f
 80052f0:	20000c6a 	.word	0x20000c6a
 80052f4:	20000cb0 	.word	0x20000cb0
 80052f8:	20000cb4 	.word	0x20000cb4
 80052fc:	40010c00 	.word	0x40010c00
 8005300:	20000ca0 	.word	0x20000ca0
 8005304:	20000c9d 	.word	0x20000c9d
				  }

				  else{
					  stopVar=0;
 8005308:	4b70      	ldr	r3, [pc, #448]	; (80054cc <mainTask+0x4bc>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
				  }

		/****************************************  BASINC SALTERI ********************************************/
				  if(basincSalteri==0){
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <mainTask+0x4c0>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <mainTask+0x30c>
				 		basincVar=1;
 8005316:	4b6f      	ldr	r3, [pc, #444]	; (80054d4 <mainTask+0x4c4>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
				 	}

					  if(basincSalteri==1)
 800531c:	4b6c      	ldr	r3, [pc, #432]	; (80054d0 <mainTask+0x4c0>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d119      	bne.n	8005358 <mainTask+0x348>
					  {
						  if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0)
 8005324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005328:	486b      	ldr	r0, [pc, #428]	; (80054d8 <mainTask+0x4c8>)
 800532a:	f002 ff39 	bl	80081a0 <HAL_GPIO_ReadPin>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <mainTask+0x33a>
						  {
							  if(millis-timer5>=3){
 8005334:	4b69      	ldr	r3, [pc, #420]	; (80054dc <mainTask+0x4cc>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b69      	ldr	r3, [pc, #420]	; (80054e0 <mainTask+0x4d0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d90a      	bls.n	8005358 <mainTask+0x348>
								  basincVar=1;
 8005342:	4b64      	ldr	r3, [pc, #400]	; (80054d4 <mainTask+0x4c4>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e006      	b.n	8005358 <mainTask+0x348>
							  }
						  }
						  else
						 	{
							  timer5=millis;
 800534a:	4b64      	ldr	r3, [pc, #400]	; (80054dc <mainTask+0x4cc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a64      	ldr	r2, [pc, #400]	; (80054e0 <mainTask+0x4d0>)
 8005350:	6013      	str	r3, [r2, #0]
						  	  basincVar=0;
 8005352:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <mainTask+0x4c4>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
						 	}
					  }

				  /******** Bas gönder ***********/

				  if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 8005358:	4b62      	ldr	r3, [pc, #392]	; (80054e4 <mainTask+0x4d4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10b      	bne.n	8005378 <mainTask+0x368>
 8005360:	4b61      	ldr	r3, [pc, #388]	; (80054e8 <mainTask+0x4d8>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <mainTask+0x368>
 8005368:	4b60      	ldr	r3, [pc, #384]	; (80054ec <mainTask+0x4dc>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <mainTask+0x368>

					  basgondercalisyukari=1;
 8005370:	4b5f      	ldr	r3, [pc, #380]	; (80054f0 <mainTask+0x4e0>)
 8005372:	2201      	movs	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e009      	b.n	800538c <mainTask+0x37c>
				  }
				  else if(yukarimotorcalisiyor==0)
 8005378:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <mainTask+0x4d8>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f083 0301 	eor.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <mainTask+0x37c>

					  basgondercalisyukari=0;
 8005386:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <mainTask+0x4e0>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]

				  if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 800538c:	4b55      	ldr	r3, [pc, #340]	; (80054e4 <mainTask+0x4d4>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10b      	bne.n	80053ac <mainTask+0x39c>
 8005394:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <mainTask+0x4e4>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <mainTask+0x39c>
 800539c:	4b53      	ldr	r3, [pc, #332]	; (80054ec <mainTask+0x4dc>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <mainTask+0x39c>

					  basgondercalisasagi=1;
 80053a4:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <mainTask+0x4e8>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e009      	b.n	80053c0 <mainTask+0x3b0>
				  }
				  else if(asagivalfcalisiyor==0)
 80053ac:	4b51      	ldr	r3, [pc, #324]	; (80054f4 <mainTask+0x4e4>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f083 0301 	eor.w	r3, r3, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <mainTask+0x3b0>
					  basgondercalisasagi=0;
 80053ba:	4b4f      	ldr	r3, [pc, #316]	; (80054f8 <mainTask+0x4e8>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]

				  /******** Kapı Secimleri ***********/

				  if(kapiSecimleri==0){
 80053c0:	4b4e      	ldr	r3, [pc, #312]	; (80054fc <mainTask+0x4ec>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <mainTask+0x3be>

					  kapiSivicVar=1;
 80053c8:	4b4d      	ldr	r3, [pc, #308]	; (8005500 <mainTask+0x4f0>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==1){
 80053ce:	4b4b      	ldr	r3, [pc, #300]	; (80054fc <mainTask+0x4ec>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10e      	bne.n	80053f4 <mainTask+0x3e4>

					  if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 80053d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053da:	484a      	ldr	r0, [pc, #296]	; (8005504 <mainTask+0x4f4>)
 80053dc:	f002 fee0 	bl	80081a0 <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <mainTask+0x3de>
						  kapiSivicVar=1;
 80053e6:	4b46      	ldr	r3, [pc, #280]	; (8005500 <mainTask+0x4f0>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e002      	b.n	80053f4 <mainTask+0x3e4>
					  else
						  kapiSivicVar=0;
 80053ee:	4b44      	ldr	r3, [pc, #272]	; (8005500 <mainTask+0x4f0>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==2){
 80053f4:	4b41      	ldr	r3, [pc, #260]	; (80054fc <mainTask+0x4ec>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d10e      	bne.n	800541a <mainTask+0x40a>

					  if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)
 80053fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005400:	4840      	ldr	r0, [pc, #256]	; (8005504 <mainTask+0x4f4>)
 8005402:	f002 fecd 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <mainTask+0x404>
						  kapiSivicVar=1;
 800540c:	4b3c      	ldr	r3, [pc, #240]	; (8005500 <mainTask+0x4f0>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e002      	b.n	800541a <mainTask+0x40a>
					  else
						  kapiSivicVar=0;
 8005414:	4b3a      	ldr	r3, [pc, #232]	; (8005500 <mainTask+0x4f0>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==3){
 800541a:	4b38      	ldr	r3, [pc, #224]	; (80054fc <mainTask+0x4ec>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d116      	bne.n	8005450 <mainTask+0x440>

					  if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0))
 8005422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005426:	4837      	ldr	r0, [pc, #220]	; (8005504 <mainTask+0x4f4>)
 8005428:	f002 feba 	bl	80081a0 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <mainTask+0x43a>
 8005432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005436:	4833      	ldr	r0, [pc, #204]	; (8005504 <mainTask+0x4f4>)
 8005438:	f002 feb2 	bl	80081a0 <HAL_GPIO_ReadPin>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <mainTask+0x43a>
						  kapiSivicVar=1;
 8005442:	4b2f      	ldr	r3, [pc, #188]	; (8005500 <mainTask+0x4f0>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e002      	b.n	8005450 <mainTask+0x440>
					  else
						  kapiSivicVar=0;
 800544a:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <mainTask+0x4f0>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
				  }

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
				/*MOTOR CALISIYOR*/
				  if(demoMode==0 && menuGiris==0){
 8005450:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <mainTask+0x4f8>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f041 833c 	bne.w	8006ad2 <mainTask+0x1ac2>
 800545a:	4b2c      	ldr	r3, [pc, #176]	; (800550c <mainTask+0x4fc>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f041 8337 	bne.w	8006ad2 <mainTask+0x1ac2>
				  if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar))
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <mainTask+0x4d8>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11a      	bne.n	80054a2 <mainTask+0x492>
 800546c:	4b28      	ldr	r3, [pc, #160]	; (8005510 <mainTask+0x500>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d116      	bne.n	80054a2 <mainTask+0x492>
 8005474:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <mainTask+0x4e4>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <mainTask+0x482>
 800547c:	4b25      	ldr	r3, [pc, #148]	; (8005514 <mainTask+0x504>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f083 0301 	eor.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <mainTask+0x482>
 800548a:	4b23      	ldr	r3, [pc, #140]	; (8005518 <mainTask+0x508>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d007      	beq.n	80054a2 <mainTask+0x492>
 8005492:	4b22      	ldr	r3, [pc, #136]	; (800551c <mainTask+0x50c>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04a      	beq.n	8005530 <mainTask+0x520>
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <mainTask+0x510>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d146      	bne.n	8005530 <mainTask+0x520>
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <mainTask+0x4bc>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d042      	beq.n	8005530 <mainTask+0x520>
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <mainTask+0x4f0>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03e      	beq.n	8005530 <mainTask+0x520>

				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80054b2:	2201      	movs	r2, #1
 80054b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054b8:	481a      	ldr	r0, [pc, #104]	; (8005524 <mainTask+0x514>)
 80054ba:	f002 fe88 	bl	80081ce <HAL_GPIO_WritePin>
					  motorcalisiyor=1;
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <mainTask+0x518>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiYukari=1;
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <mainTask+0x51c>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e03a      	b.n	8005542 <mainTask+0x532>
 80054cc:	20000c9d 	.word	0x20000c9d
 80054d0:	20000c53 	.word	0x20000c53
 80054d4:	20000c4f 	.word	0x20000c4f
 80054d8:	40011000 	.word	0x40011000
 80054dc:	20000c2c 	.word	0x20000c2c
 80054e0:	20000c44 	.word	0x20000c44
 80054e4:	20000c4d 	.word	0x20000c4d
 80054e8:	20000c80 	.word	0x20000c80
 80054ec:	20000c5b 	.word	0x20000c5b
 80054f0:	20000c87 	.word	0x20000c87
 80054f4:	20000c83 	.word	0x20000c83
 80054f8:	20000c88 	.word	0x20000c88
 80054fc:	20000c54 	.word	0x20000c54
 8005500:	20000c9e 	.word	0x20000c9e
 8005504:	40010800 	.word	0x40010800
 8005508:	20000c6a 	.word	0x20000c6a
 800550c:	20000c69 	.word	0x20000c69
 8005510:	20000c81 	.word	0x20000c81
 8005514:	20000c7b 	.word	0x20000c7b
 8005518:	20000c5f 	.word	0x20000c5f
 800551c:	20000c82 	.word	0x20000c82
 8005520:	20000c5e 	.word	0x20000c5e
 8005524:	40010c00 	.word	0x40010c00
 8005528:	20000c9f 	.word	0x20000c9f
 800552c:	20000c8a 	.word	0x20000c8a
				  }
				  else
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005536:	4891      	ldr	r0, [pc, #580]	; (800577c <mainTask+0x76c>)
 8005538:	f002 fe49 	bl	80081ce <HAL_GPIO_WritePin>
					  motorcalisiyor=0;
 800553c:	4b90      	ldr	r3, [pc, #576]	; (8005780 <mainTask+0x770>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
				  }

				  /*YUKARI ÇALISMA*/


				  if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005542:	4b90      	ldr	r3, [pc, #576]	; (8005784 <mainTask+0x774>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d160      	bne.n	800560c <mainTask+0x5fc>
 800554a:	4b8f      	ldr	r3, [pc, #572]	; (8005788 <mainTask+0x778>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05c      	beq.n	800560c <mainTask+0x5fc>
 8005552:	4b8e      	ldr	r3, [pc, #568]	; (800578c <mainTask+0x77c>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d058      	beq.n	800560c <mainTask+0x5fc>
									&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800555a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800555e:	4887      	ldr	r0, [pc, #540]	; (800577c <mainTask+0x76c>)
 8005560:	f002 fe1e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <mainTask+0x562>
 800556a:	4b89      	ldr	r3, [pc, #548]	; (8005790 <mainTask+0x780>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04c      	beq.n	800560c <mainTask+0x5fc>
									&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005572:	2102      	movs	r1, #2
 8005574:	4887      	ldr	r0, [pc, #540]	; (8005794 <mainTask+0x784>)
 8005576:	f002 fe13 	bl	80081a0 <HAL_GPIO_ReadPin>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d145      	bne.n	800560c <mainTask+0x5fc>
									&& (basincVar)
 8005580:	4b85      	ldr	r3, [pc, #532]	; (8005798 <mainTask+0x788>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d041      	beq.n	800560c <mainTask+0x5fc>
									&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800558c:	487b      	ldr	r0, [pc, #492]	; (800577c <mainTask+0x76c>)
 800558e:	f002 fe07 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005592:	4603      	mov	r3, r0
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10e      	bne.n	80055b6 <mainTask+0x5a6>
									&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800559c:	4877      	ldr	r0, [pc, #476]	; (800577c <mainTask+0x76c>)
 800559e:	f002 fdff 	bl	80081a0 <HAL_GPIO_ReadPin>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <mainTask+0x5a6>
									&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	487a      	ldr	r0, [pc, #488]	; (8005794 <mainTask+0x784>)
 80055ac:	f002 fdf8 	bl	80081a0 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d003      	beq.n	80055be <mainTask+0x5ae>
 80055b6:	4b79      	ldr	r3, [pc, #484]	; (800579c <mainTask+0x78c>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d026      	beq.n	800560c <mainTask+0x5fc>
									&& (asagivalfcalisiyor==0)
 80055be:	4b78      	ldr	r3, [pc, #480]	; (80057a0 <mainTask+0x790>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01f      	beq.n	800560c <mainTask+0x5fc>
									&& (devmotoryukaricalisiyor==0)
 80055cc:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <mainTask+0x794>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f083 0301 	eor.w	r3, r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <mainTask+0x5fc>
									&& (devmotorasagicalisiyor==0)
 80055da:	4b73      	ldr	r3, [pc, #460]	; (80057a8 <mainTask+0x798>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f083 0301 	eor.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d011      	beq.n	800560c <mainTask+0x5fc>
									&&(devyukarivalfcalisiyor==0)
 80055e8:	4b70      	ldr	r3, [pc, #448]	; (80057ac <mainTask+0x79c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f083 0301 	eor.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <mainTask+0x5fc>
									&&(devasagivalfcalisiyor==0))
 80055f6:	4b6e      	ldr	r3, [pc, #440]	; (80057b0 <mainTask+0x7a0>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	f083 0301 	eor.w	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <mainTask+0x5fc>
				  {
					  yukarimotorcalisiyor=1;
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <mainTask+0x78c>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e002      	b.n	8005612 <mainTask+0x602>
				  }
				  else
				  {
					  yukarimotorcalisiyor=0;
 800560c:	4b63      	ldr	r3, [pc, #396]	; (800579c <mainTask+0x78c>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
				  }

				  if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))){	/* ikinci hız */
 8005612:	4b62      	ldr	r3, [pc, #392]	; (800579c <mainTask+0x78c>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <mainTask+0x630>
 800561a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800561e:	485d      	ldr	r0, [pc, #372]	; (8005794 <mainTask+0x784>)
 8005620:	f002 fdbe 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10a      	bne.n	8005640 <mainTask+0x630>
 800562a:	4b62      	ldr	r3, [pc, #392]	; (80057b4 <mainTask+0x7a4>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <mainTask+0x630>

					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005632:	2201      	movs	r2, #1
 8005634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005638:	4850      	ldr	r0, [pc, #320]	; (800577c <mainTask+0x76c>)
 800563a:	f002 fdc8 	bl	80081ce <HAL_GPIO_WritePin>
 800563e:	e005      	b.n	800564c <mainTask+0x63c>
				  }
				  else
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005646:	484d      	ldr	r0, [pc, #308]	; (800577c <mainTask+0x76c>)
 8005648:	f002 fdc1 	bl	80081ce <HAL_GPIO_WritePin>

				  if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1))
 800564c:	4b53      	ldr	r3, [pc, #332]	; (800579c <mainTask+0x78c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <mainTask+0x66c>
 8005654:	4b58      	ldr	r3, [pc, #352]	; (80057b8 <mainTask+0x7a8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d007      	beq.n	800566c <mainTask+0x65c>
 800565c:	4b56      	ldr	r3, [pc, #344]	; (80057b8 <mainTask+0x7a8>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d003      	beq.n	800566c <mainTask+0x65c>
 8005664:	4b55      	ldr	r3, [pc, #340]	; (80057bc <mainTask+0x7ac>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <mainTask+0x66c>

				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800566c:	2201      	movs	r2, #1
 800566e:	2104      	movs	r1, #4
 8005670:	4842      	ldr	r0, [pc, #264]	; (800577c <mainTask+0x76c>)
 8005672:	f002 fdac 	bl	80081ce <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=1;
 8005676:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <mainTask+0x7b0>)
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]

				  }

				  // yukari valf timer calisması

				  if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)){
 800567c:	4b50      	ldr	r3, [pc, #320]	; (80057c0 <mainTask+0x7b0>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02f      	beq.n	80056e4 <mainTask+0x6d4>
 8005684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005688:	483c      	ldr	r0, [pc, #240]	; (800577c <mainTask+0x76c>)
 800568a:	f002 fd89 	bl	80081a0 <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	d106      	bne.n	80056a2 <mainTask+0x692>
 8005694:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <mainTask+0x780>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f083 0301 	eor.w	r3, r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <mainTask+0x6a0>
 80056a2:	2102      	movs	r1, #2
 80056a4:	483b      	ldr	r0, [pc, #236]	; (8005794 <mainTask+0x784>)
 80056a6:	f002 fd7b 	bl	80081a0 <HAL_GPIO_ReadPin>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d119      	bne.n	80056e4 <mainTask+0x6d4>
 80056b0:	4b35      	ldr	r3, [pc, #212]	; (8005788 <mainTask+0x778>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <mainTask+0x6d4>
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <mainTask+0x77c>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d011      	beq.n	80056e4 <mainTask+0x6d4>
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <mainTask+0x788>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00d      	beq.n	80056e4 <mainTask+0x6d4>
 80056c8:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <mainTask+0x7b4>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f083 0301 	eor.w	r3, r3, #1
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <mainTask+0x6d4>

					  timer2=millis;
 80056d6:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <mainTask+0x7b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <mainTask+0x7bc>)
 80056dc:	6013      	str	r3, [r2, #0]
					  butonKontrol3=1;
 80056de:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <mainTask+0x7b4>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0))))
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <mainTask+0x7b8>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b38      	ldr	r3, [pc, #224]	; (80057cc <mainTask+0x7bc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	4a38      	ldr	r2, [pc, #224]	; (80057d0 <mainTask+0x7c0>)
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d303      	bcc.n	80056fe <mainTask+0x6ee>
 80056f6:	4b33      	ldr	r3, [pc, #204]	; (80057c4 <mainTask+0x7b4>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d111      	bne.n	8005722 <mainTask+0x712>
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <mainTask+0x778>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f083 0301 	eor.w	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <mainTask+0x712>
 800570c:	4b1f      	ldr	r3, [pc, #124]	; (800578c <mainTask+0x77c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <mainTask+0x712>
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <mainTask+0x788>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <mainTask+0x728>
				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005722:	2200      	movs	r2, #0
 8005724:	2104      	movs	r1, #4
 8005726:	4815      	ldr	r0, [pc, #84]	; (800577c <mainTask+0x76c>)
 8005728:	f002 fd51 	bl	80081ce <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=0;
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <mainTask+0x7b0>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
					  butonKontrol3=0;
 8005732:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <mainTask+0x7b4>)
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]

				  }

				  //Ond safety

				  if(emniyetCercevesi==0){
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <mainTask+0x7c4>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <mainTask+0x736>

					  cerceveVar=1;
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <mainTask+0x7c8>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
				  }

				  if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)){
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <mainTask+0x7c4>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d148      	bne.n	80057e0 <mainTask+0x7d0>
 800574e:	4b23      	ldr	r3, [pc, #140]	; (80057dc <mainTask+0x7cc>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d144      	bne.n	80057e0 <mainTask+0x7d0>
 8005756:	2101      	movs	r1, #1
 8005758:	480e      	ldr	r0, [pc, #56]	; (8005794 <mainTask+0x784>)
 800575a:	f002 fd21 	bl	80081a0 <HAL_GPIO_ReadPin>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d13d      	bne.n	80057e0 <mainTask+0x7d0>
 8005764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005768:	4804      	ldr	r0, [pc, #16]	; (800577c <mainTask+0x76c>)
 800576a:	f002 fd19 	bl	80081a0 <HAL_GPIO_ReadPin>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d135      	bne.n	80057e0 <mainTask+0x7d0>

					  cerceveVar=1;
 8005774:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <mainTask+0x7c8>)
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e043      	b.n	8005804 <mainTask+0x7f4>
 800577c:	40010c00 	.word	0x40010c00
 8005780:	20000c9f 	.word	0x20000c9f
 8005784:	20000c69 	.word	0x20000c69
 8005788:	20000c9d 	.word	0x20000c9d
 800578c:	20000c9e 	.word	0x20000c9e
 8005790:	20000c87 	.word	0x20000c87
 8005794:	40011000 	.word	0x40011000
 8005798:	20000c4f 	.word	0x20000c4f
 800579c:	20000c80 	.word	0x20000c80
 80057a0:	20000c83 	.word	0x20000c83
 80057a4:	20000c81 	.word	0x20000c81
 80057a8:	20000c82 	.word	0x20000c82
 80057ac:	20000c85 	.word	0x20000c85
 80057b0:	20000c86 	.word	0x20000c86
 80057b4:	20000c5a 	.word	0x20000c5a
 80057b8:	20000c5b 	.word	0x20000c5b
 80057bc:	20000c5f 	.word	0x20000c5f
 80057c0:	20000c84 	.word	0x20000c84
 80057c4:	20000c7c 	.word	0x20000c7c
 80057c8:	20000c2c 	.word	0x20000c2c
 80057cc:	20000c38 	.word	0x20000c38
 80057d0:	20000c60 	.word	0x20000c60
 80057d4:	20000c50 	.word	0x20000c50
 80057d8:	20000ca2 	.word	0x20000ca2
 80057dc:	20000c4d 	.word	0x20000c4d
				  }
				  else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)){
 80057e0:	4b91      	ldr	r3, [pc, #580]	; (8005a28 <mainTask+0xa18>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10d      	bne.n	8005804 <mainTask+0x7f4>
 80057e8:	2101      	movs	r1, #1
 80057ea:	4890      	ldr	r0, [pc, #576]	; (8005a2c <mainTask+0xa1c>)
 80057ec:	f002 fcd8 	bl	80081a0 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d106      	bne.n	8005804 <mainTask+0x7f4>
 80057f6:	4b8e      	ldr	r3, [pc, #568]	; (8005a30 <mainTask+0xa20>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <mainTask+0x7f4>

					  cerceveVar=0;
 80057fe:	4b8d      	ldr	r3, [pc, #564]	; (8005a34 <mainTask+0xa24>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
				  }

				  if (emniyetCercevesi==1 && calismaSekli==1){
 8005804:	4b88      	ldr	r3, [pc, #544]	; (8005a28 <mainTask+0xa18>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d111      	bne.n	8005830 <mainTask+0x820>
 800580c:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <mainTask+0xa20>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d10d      	bne.n	8005830 <mainTask+0x820>
					  if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0){
 8005814:	2101      	movs	r1, #1
 8005816:	4885      	ldr	r0, [pc, #532]	; (8005a2c <mainTask+0xa1c>)
 8005818:	f002 fcc2 	bl	80081a0 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <mainTask+0x81a>
						  cerceveVar=1;
 8005822:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <mainTask+0xa24>)
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e002      	b.n	8005830 <mainTask+0x820>
					  }
					  else{
						  cerceveVar=0;
 800582a:	4b82      	ldr	r3, [pc, #520]	; (8005a34 <mainTask+0xa24>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
					  }
				  }

				  //Asagi calisma

				  if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005830:	4b81      	ldr	r3, [pc, #516]	; (8005a38 <mainTask+0xa28>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d17c      	bne.n	8005932 <mainTask+0x922>
 8005838:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <mainTask+0xa2c>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d078      	beq.n	8005932 <mainTask+0x922>
 8005840:	4b7f      	ldr	r3, [pc, #508]	; (8005a40 <mainTask+0xa30>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d074      	beq.n	8005932 <mainTask+0x922>
								   && ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800584c:	487d      	ldr	r0, [pc, #500]	; (8005a44 <mainTask+0xa34>)
 800584e:	f002 fca7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <mainTask+0x850>
 8005858:	4b7b      	ldr	r3, [pc, #492]	; (8005a48 <mainTask+0xa38>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d068      	beq.n	8005932 <mainTask+0x922>
								   && (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005860:	4b74      	ldr	r3, [pc, #464]	; (8005a34 <mainTask+0xa24>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d064      	beq.n	8005932 <mainTask+0x922>
 8005868:	4b78      	ldr	r3, [pc, #480]	; (8005a4c <mainTask+0xa3c>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f083 0301 	eor.w	r3, r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d05d      	beq.n	8005932 <mainTask+0x922>
								   && ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005876:	2104      	movs	r1, #4
 8005878:	486c      	ldr	r0, [pc, #432]	; (8005a2c <mainTask+0xa1c>)
 800587a:	f002 fc91 	bl	80081a0 <HAL_GPIO_ReadPin>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <mainTask+0x87c>
 8005884:	4b72      	ldr	r3, [pc, #456]	; (8005a50 <mainTask+0xa40>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d152      	bne.n	8005932 <mainTask+0x922>
								   && (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800588c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005890:	486c      	ldr	r0, [pc, #432]	; (8005a44 <mainTask+0xa34>)
 8005892:	f002 fc85 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10e      	bne.n	80058ba <mainTask+0x8aa>
								   && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800589c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058a0:	4868      	ldr	r0, [pc, #416]	; (8005a44 <mainTask+0xa34>)
 80058a2:	f002 fc7d 	bl	80081a0 <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d106      	bne.n	80058ba <mainTask+0x8aa>
								   && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80058ac:	2140      	movs	r1, #64	; 0x40
 80058ae:	485f      	ldr	r0, [pc, #380]	; (8005a2c <mainTask+0xa1c>)
 80058b0:	f002 fc76 	bl	80081a0 <HAL_GPIO_ReadPin>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d003      	beq.n	80058c2 <mainTask+0x8b2>
 80058ba:	4b66      	ldr	r3, [pc, #408]	; (8005a54 <mainTask+0xa44>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d037      	beq.n	8005932 <mainTask+0x922>
								   && (yukarimotorcalisiyor==0)
 80058c2:	4b65      	ldr	r3, [pc, #404]	; (8005a58 <mainTask+0xa48>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f083 0301 	eor.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d030      	beq.n	8005932 <mainTask+0x922>
								   && (yukarivalfcalisiyor==0)
 80058d0:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <mainTask+0xa4c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f083 0301 	eor.w	r3, r3, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d029      	beq.n	8005932 <mainTask+0x922>
					  	  	  	   && (devmotoryukaricalisiyor==0)
 80058de:	4b60      	ldr	r3, [pc, #384]	; (8005a60 <mainTask+0xa50>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d022      	beq.n	8005932 <mainTask+0x922>
					  			   && (devmotorasagicalisiyor==0)
 80058ec:	4b5d      	ldr	r3, [pc, #372]	; (8005a64 <mainTask+0xa54>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f083 0301 	eor.w	r3, r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01b      	beq.n	8005932 <mainTask+0x922>
								   && (devyukarivalfcalisiyor==0)
 80058fa:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <mainTask+0xa58>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <mainTask+0x922>
								   && (devasagivalfcalisiyor==0))
 8005908:	4b58      	ldr	r3, [pc, #352]	; (8005a6c <mainTask+0xa5c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f083 0301 	eor.w	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <mainTask+0x922>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005916:	2201      	movs	r2, #1
 8005918:	2102      	movs	r1, #2
 800591a:	484a      	ldr	r0, [pc, #296]	; (8005a44 <mainTask+0xa34>)
 800591c:	f002 fc57 	bl	80081ce <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=1;
 8005920:	4b4c      	ldr	r3, [pc, #304]	; (8005a54 <mainTask+0xa44>)
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiAsagi=1;
 8005926:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <mainTask+0xa60>)
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
					  cercevesasagicalisma=1;
 800592c:	4b51      	ldr	r3, [pc, #324]	; (8005a74 <mainTask+0xa64>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
				  }

				  // asagi valf timer calisması

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)){
 8005932:	4b48      	ldr	r3, [pc, #288]	; (8005a54 <mainTask+0xa44>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d033      	beq.n	80059a2 <mainTask+0x992>
 800593a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800593e:	4841      	ldr	r0, [pc, #260]	; (8005a44 <mainTask+0xa34>)
 8005940:	f002 fc2e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005944:	4603      	mov	r3, r0
 8005946:	2b01      	cmp	r3, #1
 8005948:	d106      	bne.n	8005958 <mainTask+0x948>
 800594a:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <mainTask+0xa38>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <mainTask+0x95e>
 8005958:	2104      	movs	r1, #4
 800595a:	4834      	ldr	r0, [pc, #208]	; (8005a2c <mainTask+0xa1c>)
 800595c:	f002 fc20 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d11d      	bne.n	80059a2 <mainTask+0x992>
 8005966:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <mainTask+0xa40>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d019      	beq.n	80059a2 <mainTask+0x992>
 800596e:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <mainTask+0xa2c>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d015      	beq.n	80059a2 <mainTask+0x992>
 8005976:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <mainTask+0xa30>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <mainTask+0x992>
 800597e:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <mainTask+0xa24>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <mainTask+0x992>
 8005986:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <mainTask+0xa68>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <mainTask+0x992>

					  timer2=millis;
 8005994:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <mainTask+0xa6c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a39      	ldr	r2, [pc, #228]	; (8005a80 <mainTask+0xa70>)
 800599a:	6013      	str	r3, [r2, #0]
					  butonKontrol2=1;
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <mainTask+0xa68>)
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0))))
 80059a2:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <mainTask+0xa6c>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <mainTask+0xa70>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	4a35      	ldr	r2, [pc, #212]	; (8005a84 <mainTask+0xa74>)
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d303      	bcc.n	80059bc <mainTask+0x9ac>
 80059b4:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <mainTask+0xa68>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <mainTask+0x9d6>
 80059bc:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <mainTask+0xa2c>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f083 0301 	eor.w	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <mainTask+0x9d6>
 80059ca:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <mainTask+0xa30>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <mainTask+0x9d6>
 80059d8:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <mainTask+0xa24>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f083 0301 	eor.w	r3, r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <mainTask+0x9ec>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80059e6:	2200      	movs	r2, #0
 80059e8:	2102      	movs	r1, #2
 80059ea:	4816      	ldr	r0, [pc, #88]	; (8005a44 <mainTask+0xa34>)
 80059ec:	f002 fbef 	bl	80081ce <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=0;
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <mainTask+0xa44>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
					  butonKontrol2=0;
 80059f6:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <mainTask+0xa68>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]

				  }

				  //yavaslama valf

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))){	/* ikinci hız */
 80059fc:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <mainTask+0xa44>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d043      	beq.n	8005a8c <mainTask+0xa7c>
 8005a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <mainTask+0xa1c>)
 8005a0a:	f002 fbc9 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d13b      	bne.n	8005a8c <mainTask+0xa7c>
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <mainTask+0xa78>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d037      	beq.n	8005a8c <mainTask+0xa7c>

					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4808      	ldr	r0, [pc, #32]	; (8005a44 <mainTask+0xa34>)
 8005a22:	f002 fbd4 	bl	80081ce <HAL_GPIO_WritePin>
 8005a26:	e036      	b.n	8005a96 <mainTask+0xa86>
 8005a28:	20000c50 	.word	0x20000c50
 8005a2c:	40011000 	.word	0x40011000
 8005a30:	20000c4d 	.word	0x20000c4d
 8005a34:	20000ca2 	.word	0x20000ca2
 8005a38:	20000c69 	.word	0x20000c69
 8005a3c:	20000c9d 	.word	0x20000c9d
 8005a40:	20000c9e 	.word	0x20000c9e
 8005a44:	40010c00 	.word	0x40010c00
 8005a48:	20000c88 	.word	0x20000c88
 8005a4c:	20000c9c 	.word	0x20000c9c
 8005a50:	20000c52 	.word	0x20000c52
 8005a54:	20000c83 	.word	0x20000c83
 8005a58:	20000c80 	.word	0x20000c80
 8005a5c:	20000c84 	.word	0x20000c84
 8005a60:	20000c81 	.word	0x20000c81
 8005a64:	20000c82 	.word	0x20000c82
 8005a68:	20000c85 	.word	0x20000c85
 8005a6c:	20000c86 	.word	0x20000c86
 8005a70:	20000c8b 	.word	0x20000c8b
 8005a74:	20000cac 	.word	0x20000cac
 8005a78:	20000c7b 	.word	0x20000c7b
 8005a7c:	20000c2c 	.word	0x20000c2c
 8005a80:	20000c38 	.word	0x20000c38
 8005a84:	20000c61 	.word	0x20000c61
 8005a88:	20000c51 	.word	0x20000c51
				  }
				  else
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4836      	ldr	r0, [pc, #216]	; (8005b6c <mainTask+0xb5c>)
 8005a92:	f002 fb9c 	bl	80081ce <HAL_GPIO_WritePin>

				  /*DEVIRME veya YURUYUS Baslangic*/

				  // Devirme Yukari veya yuruyus ileri calisma
				  if((menuGiris==0)
 8005a96:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <mainTask+0xb60>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 8080 	bne.w	8005ba0 <mainTask+0xb90>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005aa0:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <mainTask+0xb64>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d003      	beq.n	8005ab0 <mainTask+0xaa0>
 8005aa8:	4b32      	ldr	r3, [pc, #200]	; (8005b74 <mainTask+0xb64>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d177      	bne.n	8005ba0 <mainTask+0xb90>
						  && (stopVar) && (kapiSivicVar)
 8005ab0:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <mainTask+0xb68>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d073      	beq.n	8005ba0 <mainTask+0xb90>
 8005ab8:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <mainTask+0xb6c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d06f      	beq.n	8005ba0 <mainTask+0xb90>
						  && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ac4:	4829      	ldr	r0, [pc, #164]	; (8005b6c <mainTask+0xb5c>)
 8005ac6:	f002 fb6b 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d167      	bne.n	8005ba0 <mainTask+0xb90>
						  && ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ad4:	482a      	ldr	r0, [pc, #168]	; (8005b80 <mainTask+0xb70>)
 8005ad6:	f002 fb63 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <mainTask+0xad8>
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <mainTask+0xb74>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d15b      	bne.n	8005ba0 <mainTask+0xb90>
						  && (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	4825      	ldr	r0, [pc, #148]	; (8005b80 <mainTask+0xb70>)
 8005aec:	f002 fb58 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10f      	bne.n	8005b16 <mainTask+0xb06>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005afa:	481c      	ldr	r0, [pc, #112]	; (8005b6c <mainTask+0xb5c>)
 8005afc:	f002 fb50 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <mainTask+0xb06>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b0a:	4818      	ldr	r0, [pc, #96]	; (8005b6c <mainTask+0xb5c>)
 8005b0c:	f002 fb48 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <mainTask+0xb0e>
 8005b16:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <mainTask+0xb78>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d040      	beq.n	8005ba0 <mainTask+0xb90>
						  && (yukarimotorcalisiyor==0)
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <mainTask+0xb7c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f083 0301 	eor.w	r3, r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d039      	beq.n	8005ba0 <mainTask+0xb90>
						  && (yukarivalfcalisiyor==0)
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <mainTask+0xb80>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f083 0301 	eor.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d032      	beq.n	8005ba0 <mainTask+0xb90>
						  && (asagivalfcalisiyor==0)
 8005b3a:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <mainTask+0xb84>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f083 0301 	eor.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d02b      	beq.n	8005ba0 <mainTask+0xb90>
						  && (devmotorasagicalisiyor==0)
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <mainTask+0xb88>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d024      	beq.n	8005ba0 <mainTask+0xb90>
						  &&(devasagivalfcalisiyor==0))
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <mainTask+0xb8c>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01d      	beq.n	8005ba0 <mainTask+0xb90>

				  {
					  devmotoryukaricalisiyor=1;
 8005b64:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <mainTask+0xb78>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e01c      	b.n	8005ba6 <mainTask+0xb96>
 8005b6c:	40010c00 	.word	0x40010c00
 8005b70:	20000c69 	.word	0x20000c69
 8005b74:	20000c5b 	.word	0x20000c5b
 8005b78:	20000c9d 	.word	0x20000c9d
 8005b7c:	20000c9e 	.word	0x20000c9e
 8005b80:	40011000 	.word	0x40011000
 8005b84:	20000c5c 	.word	0x20000c5c
 8005b88:	20000c81 	.word	0x20000c81
 8005b8c:	20000c80 	.word	0x20000c80
 8005b90:	20000c84 	.word	0x20000c84
 8005b94:	20000c83 	.word	0x20000c83
 8005b98:	20000c82 	.word	0x20000c82
 8005b9c:	20000c86 	.word	0x20000c86
				  }

				  else
					  devmotoryukaricalisiyor=0;
 8005ba0:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <mainTask+0xd24>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]

				  if(devmotoryukaricalisiyor==1){
 8005ba6:	4b63      	ldr	r3, [pc, #396]	; (8005d34 <mainTask+0xd24>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <mainTask+0xbae>

					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	4861      	ldr	r0, [pc, #388]	; (8005d38 <mainTask+0xd28>)
 8005bb4:	f002 fb0b 	bl	80081ce <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=1;
 8005bb8:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <mainTask+0xd2c>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]

				  }
				  // devirme yukari + yuruyus ileri valf timer calismasi

				  if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)){
 8005bbe:	4b5f      	ldr	r3, [pc, #380]	; (8005d3c <mainTask+0xd2c>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d025      	beq.n	8005c12 <mainTask+0xc02>
 8005bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bca:	485d      	ldr	r0, [pc, #372]	; (8005d40 <mainTask+0xd30>)
 8005bcc:	f002 fae8 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d007      	beq.n	8005be6 <mainTask+0xbd6>
 8005bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005bda:	4857      	ldr	r0, [pc, #348]	; (8005d38 <mainTask+0xd28>)
 8005bdc:	f002 fae0 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d115      	bne.n	8005c12 <mainTask+0xc02>
 8005be6:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <mainTask+0xd34>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <mainTask+0xc02>
 8005bee:	4b56      	ldr	r3, [pc, #344]	; (8005d48 <mainTask+0xd38>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <mainTask+0xc02>
 8005bf6:	4b55      	ldr	r3, [pc, #340]	; (8005d4c <mainTask+0xd3c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f083 0301 	eor.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <mainTask+0xc02>

					  timer2=millis;
 8005c04:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <mainTask+0xd40>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <mainTask+0xd44>)
 8005c0a:	6013      	str	r3, [r2, #0]
					  butonKontrol4=1;
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <mainTask+0xd3c>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005c12:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <mainTask+0xd40>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b4f      	ldr	r3, [pc, #316]	; (8005d54 <mainTask+0xd44>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	4a4e      	ldr	r2, [pc, #312]	; (8005d58 <mainTask+0xd48>)
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d303      	bcc.n	8005c2c <mainTask+0xc1c>
 8005c24:	4b49      	ldr	r3, [pc, #292]	; (8005d4c <mainTask+0xd3c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10d      	bne.n	8005c48 <mainTask+0xc38>
 8005c2c:	4b45      	ldr	r3, [pc, #276]	; (8005d44 <mainTask+0xd34>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f083 0301 	eor.w	r3, r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <mainTask+0xc38>
 8005c3a:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <mainTask+0xd38>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f083 0301 	eor.w	r3, r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <mainTask+0xc4e>
				  {
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2120      	movs	r1, #32
 8005c4c:	483a      	ldr	r0, [pc, #232]	; (8005d38 <mainTask+0xd28>)
 8005c4e:	f002 fabe 	bl	80081ce <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=0;
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <mainTask+0xd2c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
					  butonKontrol4=0;
 8005c58:	4b3c      	ldr	r3, [pc, #240]	; (8005d4c <mainTask+0xd3c>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]

				  }

				  // Devirme Asagi veya yuruyus geri calisma

				  if((menuGiris==0)
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <mainTask+0xd4c>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f040 8088 	bne.w	8005d78 <mainTask+0xd68>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c68:	4b3d      	ldr	r3, [pc, #244]	; (8005d60 <mainTask+0xd50>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d003      	beq.n	8005c78 <mainTask+0xc68>
 8005c70:	4b3b      	ldr	r3, [pc, #236]	; (8005d60 <mainTask+0xd50>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d17f      	bne.n	8005d78 <mainTask+0xd68>
						  && (stopVar) && (kapiSivicVar)
 8005c78:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <mainTask+0xd34>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d07b      	beq.n	8005d78 <mainTask+0xd68>
 8005c80:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <mainTask+0xd38>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d077      	beq.n	8005d78 <mainTask+0xd68>
						  && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005c88:	2140      	movs	r1, #64	; 0x40
 8005c8a:	482b      	ldr	r0, [pc, #172]	; (8005d38 <mainTask+0xd28>)
 8005c8c:	f002 fa88 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d170      	bne.n	8005d78 <mainTask+0xd68>
						  && ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c9a:	4827      	ldr	r0, [pc, #156]	; (8005d38 <mainTask+0xd28>)
 8005c9c:	f002 fa80 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <mainTask+0xc9e>
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <mainTask+0xd54>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d164      	bne.n	8005d78 <mainTask+0xd68>
						  && (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cb2:	4823      	ldr	r0, [pc, #140]	; (8005d40 <mainTask+0xd30>)
 8005cb4:	f002 fa74 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d10f      	bne.n	8005cde <mainTask+0xcce>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cc2:	481f      	ldr	r0, [pc, #124]	; (8005d40 <mainTask+0xd30>)
 8005cc4:	f002 fa6c 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <mainTask+0xcce>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cd2:	481b      	ldr	r0, [pc, #108]	; (8005d40 <mainTask+0xd30>)
 8005cd4:	f002 fa64 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d003      	beq.n	8005ce6 <mainTask+0xcd6>
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <mainTask+0xd58>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d048      	beq.n	8005d78 <mainTask+0xd68>
						  && (yukarimotorcalisiyor==0)
 8005ce6:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <mainTask+0xd5c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d041      	beq.n	8005d78 <mainTask+0xd68>
						  && (yukarivalfcalisiyor==0)
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <mainTask+0xd60>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f083 0301 	eor.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d03a      	beq.n	8005d78 <mainTask+0xd68>
						  && (asagivalfcalisiyor==0)
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <mainTask+0xd64>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f083 0301 	eor.w	r3, r3, #1
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d033      	beq.n	8005d78 <mainTask+0xd68>
						  && (devyukarivalfcalisiyor==0)
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <mainTask+0xd2c>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	f083 0301 	eor.w	r3, r3, #1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02c      	beq.n	8005d78 <mainTask+0xd68>
						  && (devmotoryukaricalisiyor==0))
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <mainTask+0xd24>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d025      	beq.n	8005d78 <mainTask+0xd68>

				  {
					   devmotorasagicalisiyor=1;
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <mainTask+0xd58>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e024      	b.n	8005d7e <mainTask+0xd6e>
 8005d34:	20000c81 	.word	0x20000c81
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	20000c85 	.word	0x20000c85
 8005d40:	40010c00 	.word	0x40010c00
 8005d44:	20000c9d 	.word	0x20000c9d
 8005d48:	20000c9e 	.word	0x20000c9e
 8005d4c:	20000c7d 	.word	0x20000c7d
 8005d50:	20000c2c 	.word	0x20000c2c
 8005d54:	20000c38 	.word	0x20000c38
 8005d58:	20000c62 	.word	0x20000c62
 8005d5c:	20000c69 	.word	0x20000c69
 8005d60:	20000c5b 	.word	0x20000c5b
 8005d64:	20000c5d 	.word	0x20000c5d
 8005d68:	20000c82 	.word	0x20000c82
 8005d6c:	20000c80 	.word	0x20000c80
 8005d70:	20000c84 	.word	0x20000c84
 8005d74:	20000c83 	.word	0x20000c83
				  }

				  else
				  {
					 devmotorasagicalisiyor=0;
 8005d78:	4b96      	ldr	r3, [pc, #600]	; (8005fd4 <mainTask+0xfc4>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
				  }

				  if(devmotorasagicalisiyor==1)
 8005d7e:	4b95      	ldr	r3, [pc, #596]	; (8005fd4 <mainTask+0xfc4>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <mainTask+0xd86>
				  {
					   HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005d86:	2201      	movs	r2, #1
 8005d88:	2110      	movs	r1, #16
 8005d8a:	4893      	ldr	r0, [pc, #588]	; (8005fd8 <mainTask+0xfc8>)
 8005d8c:	f002 fa1f 	bl	80081ce <HAL_GPIO_WritePin>
					   devasagivalfcalisiyor=1;
 8005d90:	4b92      	ldr	r3, [pc, #584]	; (8005fdc <mainTask+0xfcc>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
				  }

				  //devirme asagi + geri valf timer calismasi

				  if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)){
 8005d96:	4b91      	ldr	r3, [pc, #580]	; (8005fdc <mainTask+0xfcc>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d024      	beq.n	8005de8 <mainTask+0xdd8>
 8005d9e:	2140      	movs	r1, #64	; 0x40
 8005da0:	488d      	ldr	r0, [pc, #564]	; (8005fd8 <mainTask+0xfc8>)
 8005da2:	f002 f9fd 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d007      	beq.n	8005dbc <mainTask+0xdac>
 8005dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005db0:	4889      	ldr	r0, [pc, #548]	; (8005fd8 <mainTask+0xfc8>)
 8005db2:	f002 f9f5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d115      	bne.n	8005de8 <mainTask+0xdd8>
 8005dbc:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <mainTask+0xfd0>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <mainTask+0xdd8>
 8005dc4:	4b87      	ldr	r3, [pc, #540]	; (8005fe4 <mainTask+0xfd4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <mainTask+0xdd8>
 8005dcc:	4b86      	ldr	r3, [pc, #536]	; (8005fe8 <mainTask+0xfd8>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <mainTask+0xdd8>

					  timer2=millis;
 8005dda:	4b84      	ldr	r3, [pc, #528]	; (8005fec <mainTask+0xfdc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a84      	ldr	r2, [pc, #528]	; (8005ff0 <mainTask+0xfe0>)
 8005de0:	6013      	str	r3, [r2, #0]
					  butonKontrol5=1;
 8005de2:	4b81      	ldr	r3, [pc, #516]	; (8005fe8 <mainTask+0xfd8>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005de8:	4b80      	ldr	r3, [pc, #512]	; (8005fec <mainTask+0xfdc>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b80      	ldr	r3, [pc, #512]	; (8005ff0 <mainTask+0xfe0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	4a80      	ldr	r2, [pc, #512]	; (8005ff4 <mainTask+0xfe4>)
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d303      	bcc.n	8005e02 <mainTask+0xdf2>
 8005dfa:	4b7b      	ldr	r3, [pc, #492]	; (8005fe8 <mainTask+0xfd8>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <mainTask+0xe0e>
 8005e02:	4b77      	ldr	r3, [pc, #476]	; (8005fe0 <mainTask+0xfd0>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f083 0301 	eor.w	r3, r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <mainTask+0xe0e>
 8005e10:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <mainTask+0xfd4>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f083 0301 	eor.w	r3, r3, #1
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <mainTask+0xe24>
				  {
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2110      	movs	r1, #16
 8005e22:	486d      	ldr	r0, [pc, #436]	; (8005fd8 <mainTask+0xfc8>)
 8005e24:	f002 f9d3 	bl	80081ce <HAL_GPIO_WritePin>
					  devasagivalfcalisiyor=0;
 8005e28:	4b6c      	ldr	r3, [pc, #432]	; (8005fdc <mainTask+0xfcc>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
					  butonKontrol5=0;
 8005e2e:	4b6e      	ldr	r3, [pc, #440]	; (8005fe8 <mainTask+0xfd8>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]

				  }

				  // makine durum kontrolü

				  if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e38:	486f      	ldr	r0, [pc, #444]	; (8005ff8 <mainTask+0xfe8>)
 8005e3a:	f002 f9b1 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d120      	bne.n	8005e86 <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e48:	486b      	ldr	r0, [pc, #428]	; (8005ff8 <mainTask+0xfe8>)
 8005e4a:	f002 f9a9 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d118      	bne.n	8005e86 <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005e54:	2104      	movs	r1, #4
 8005e56:	4868      	ldr	r0, [pc, #416]	; (8005ff8 <mainTask+0xfe8>)
 8005e58:	f002 f9a2 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005e62:	2102      	movs	r1, #2
 8005e64:	4864      	ldr	r0, [pc, #400]	; (8005ff8 <mainTask+0xfe8>)
 8005e66:	f002 f99b 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0))
 8005e70:	2101      	movs	r1, #1
 8005e72:	4861      	ldr	r0, [pc, #388]	; (8005ff8 <mainTask+0xfe8>)
 8005e74:	f002 f994 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <mainTask+0xe76>

					  makineStop=1;
 8005e7e:	4b5f      	ldr	r3, [pc, #380]	; (8005ffc <mainTask+0xfec>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <mainTask+0xe7c>
				  else
					  makineStop=0;
 8005e86:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <mainTask+0xfec>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]

				  //kapi 1 kontrol

				  // kapi 1 prudhome

				  if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e8c:	4b5c      	ldr	r3, [pc, #368]	; (8006000 <mainTask+0xff0>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d144      	bne.n	8005f1e <mainTask+0xf0e>
 8005e94:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <mainTask+0xff4>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d003      	beq.n	8005ea4 <mainTask+0xe94>
 8005e9c:	4b59      	ldr	r3, [pc, #356]	; (8006004 <mainTask+0xff4>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d13c      	bne.n	8005f1e <mainTask+0xf0e>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ea4:	2180      	movs	r1, #128	; 0x80
 8005ea6:	484c      	ldr	r0, [pc, #304]	; (8005fd8 <mainTask+0xfc8>)
 8005ea8:	f002 f97a 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <mainTask+0xeaa>
 8005eb2:	4b55      	ldr	r3, [pc, #340]	; (8006008 <mainTask+0xff8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <mainTask+0xec2>
 8005eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ebe:	484e      	ldr	r0, [pc, #312]	; (8005ff8 <mainTask+0xfe8>)
 8005ec0:	f002 f96e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d129      	bne.n	8005f1e <mainTask+0xf0e>
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <mainTask+0xff8>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d125      	bne.n	8005f1e <mainTask+0xf0e>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	4840      	ldr	r0, [pc, #256]	; (8005fd8 <mainTask+0xfc8>)
 8005ed6:	f002 f963 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d003      	beq.n	8005ee8 <mainTask+0xed8>
 8005ee0:	4b4a      	ldr	r3, [pc, #296]	; (800600c <mainTask+0xffc>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11a      	bne.n	8005f1e <mainTask+0xf0e>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ee8:	2102      	movs	r1, #2
 8005eea:	483b      	ldr	r0, [pc, #236]	; (8005fd8 <mainTask+0xfc8>)
 8005eec:	f002 f958 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d113      	bne.n	8005f1e <mainTask+0xf0e>
						  &&(butonKontrol==0)
 8005ef6:	4b46      	ldr	r3, [pc, #280]	; (8006010 <mainTask+0x1000>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	f083 0301 	eor.w	r3, r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <mainTask+0xf0e>
						  &&(makineStop==1))
 8005f04:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <mainTask+0xfec>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <mainTask+0xf0e>
				  {

					  kapi1prudhome=1;
 8005f0c:	4b41      	ldr	r3, [pc, #260]	; (8006014 <mainTask+0x1004>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <mainTask+0xfdc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a40      	ldr	r2, [pc, #256]	; (8006018 <mainTask+0x1008>)
 8005f18:	6013      	str	r3, [r2, #0]
					  bekle();
 8005f1a:	f7fa fab9 	bl	8000490 <bekle>
				  }

				  if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0))
 8005f1e:	4b33      	ldr	r3, [pc, #204]	; (8005fec <mainTask+0xfdc>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <mainTask+0x1008>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	4a3c      	ldr	r2, [pc, #240]	; (800601c <mainTask+0x100c>)
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d211      	bcs.n	8005f54 <mainTask+0xf44>
 8005f30:	2104      	movs	r1, #4
 8005f32:	4829      	ldr	r0, [pc, #164]	; (8005fd8 <mainTask+0xfc8>)
 8005f34:	f002 f934 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <mainTask+0xf44>
 8005f3e:	4b33      	ldr	r3, [pc, #204]	; (800600c <mainTask+0xffc>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d006      	beq.n	8005f54 <mainTask+0xf44>
 8005f46:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <mainTask+0xfec>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f083 0301 	eor.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <mainTask+0xf4a>
				  {
					  kapi1prudhome=0;
 8005f54:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <mainTask+0x1004>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 buton kontrol

				  if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <mainTask+0xff0>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d160      	bne.n	8006024 <mainTask+0x1014>
 8005f62:	4b28      	ldr	r3, [pc, #160]	; (8006004 <mainTask+0xff4>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d003      	beq.n	8005f72 <mainTask+0xf62>
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <mainTask+0xff4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d158      	bne.n	8006024 <mainTask+0x1014>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f72:	2104      	movs	r1, #4
 8005f74:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <mainTask+0xfc8>)
 8005f76:	f002 f913 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d003      	beq.n	8005f88 <mainTask+0xf78>
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <mainTask+0xffc>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d14d      	bne.n	8006024 <mainTask+0x1014>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f88:	2102      	movs	r1, #2
 8005f8a:	4813      	ldr	r0, [pc, #76]	; (8005fd8 <mainTask+0xfc8>)
 8005f8c:	f002 f908 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d146      	bne.n	8006024 <mainTask+0x1014>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	480f      	ldr	r0, [pc, #60]	; (8005fd8 <mainTask+0xfc8>)
 8005f9a:	f002 f901 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <mainTask+0xf9c>
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <mainTask+0xff8>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <mainTask+0xfb4>
 8005fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fb0:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <mainTask+0xfe8>)
 8005fb2:	f002 f8f5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d133      	bne.n	8006024 <mainTask+0x1014>
 8005fbc:	4b12      	ldr	r3, [pc, #72]	; (8006008 <mainTask+0xff8>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d12f      	bne.n	8006024 <mainTask+0x1014>
						  &&(makineStop==1))
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <mainTask+0xfec>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02b      	beq.n	8006024 <mainTask+0x1014>
				  {
					  kapi1butonkontrol=1;
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <mainTask+0x1010>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e02a      	b.n	800602a <mainTask+0x101a>
 8005fd4:	20000c82 	.word	0x20000c82
 8005fd8:	40011000 	.word	0x40011000
 8005fdc:	20000c86 	.word	0x20000c86
 8005fe0:	20000c9d 	.word	0x20000c9d
 8005fe4:	20000c9e 	.word	0x20000c9e
 8005fe8:	20000c7e 	.word	0x20000c7e
 8005fec:	20000c2c 	.word	0x20000c2c
 8005ff0:	20000c38 	.word	0x20000c38
 8005ff4:	20000c62 	.word	0x20000c62
 8005ff8:	40010c00 	.word	0x40010c00
 8005ffc:	20000c8d 	.word	0x20000c8d
 8006000:	20000c55 	.word	0x20000c55
 8006004:	20000c54 	.word	0x20000c54
 8006008:	20000c58 	.word	0x20000c58
 800600c:	20000c52 	.word	0x20000c52
 8006010:	20000c7a 	.word	0x20000c7a
 8006014:	20000c8e 	.word	0x20000c8e
 8006018:	20000c30 	.word	0x20000c30
 800601c:	20000c65 	.word	0x20000c65
 8006020:	20000c8f 	.word	0x20000c8f
				  }

				  else
				  {
					  kapi1butonkontrol=0;
 8006024:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <mainTask+0x1244>)
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 pizzato

				  if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800602a:	4b8b      	ldr	r3, [pc, #556]	; (8006258 <mainTask+0x1248>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d121      	bne.n	8006076 <mainTask+0x1066>
 8006032:	4b8a      	ldr	r3, [pc, #552]	; (800625c <mainTask+0x124c>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d003      	beq.n	8006042 <mainTask+0x1032>
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <mainTask+0x124c>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d119      	bne.n	8006076 <mainTask+0x1066>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006042:	2104      	movs	r1, #4
 8006044:	4886      	ldr	r0, [pc, #536]	; (8006260 <mainTask+0x1250>)
 8006046:	f002 f8ab 	bl	80081a0 <HAL_GPIO_ReadPin>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d003      	beq.n	8006058 <mainTask+0x1048>
 8006050:	4b84      	ldr	r3, [pc, #528]	; (8006264 <mainTask+0x1254>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <mainTask+0x1066>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006058:	2102      	movs	r1, #2
 800605a:	4881      	ldr	r0, [pc, #516]	; (8006260 <mainTask+0x1250>)
 800605c:	f002 f8a0 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <mainTask+0x1066>
						  &&(makineStop==1))
 8006066:	4b80      	ldr	r3, [pc, #512]	; (8006268 <mainTask+0x1258>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <mainTask+0x1066>
				  {
					  kapi1pizzato=1;
 800606e:	4b7f      	ldr	r3, [pc, #508]	; (800626c <mainTask+0x125c>)
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e002      	b.n	800607c <mainTask+0x106c>
				  }

				  else
				  {
					  kapi1pizzato=0;
 8006076:	4b7d      	ldr	r3, [pc, #500]	; (800626c <mainTask+0x125c>)
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 çıkış

				  if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1)
 800607c:	4b75      	ldr	r3, [pc, #468]	; (8006254 <mainTask+0x1244>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d107      	bne.n	8006094 <mainTask+0x1084>
 8006084:	4b79      	ldr	r3, [pc, #484]	; (800626c <mainTask+0x125c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <mainTask+0x1084>
 800608c:	4b78      	ldr	r3, [pc, #480]	; (8006270 <mainTask+0x1260>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <mainTask+0x1090>
				  {
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006094:	2201      	movs	r2, #1
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	4876      	ldr	r0, [pc, #472]	; (8006274 <mainTask+0x1264>)
 800609a:	f002 f898 	bl	80081ce <HAL_GPIO_WritePin>
 800609e:	e004      	b.n	80060aa <mainTask+0x109a>
				  }

				  else
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80060a0:	2200      	movs	r2, #0
 80060a2:	2180      	movs	r1, #128	; 0x80
 80060a4:	4873      	ldr	r0, [pc, #460]	; (8006274 <mainTask+0x1264>)
 80060a6:	f002 f892 	bl	80081ce <HAL_GPIO_WritePin>

				  //kapi2 kontrol

				  // kapi 2 prudhome

				  if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060aa:	4b73      	ldr	r3, [pc, #460]	; (8006278 <mainTask+0x1268>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d141      	bne.n	8006136 <mainTask+0x1126>
 80060b2:	4b6a      	ldr	r3, [pc, #424]	; (800625c <mainTask+0x124c>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d003      	beq.n	80060c2 <mainTask+0x10b2>
 80060ba:	4b68      	ldr	r3, [pc, #416]	; (800625c <mainTask+0x124c>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d139      	bne.n	8006136 <mainTask+0x1126>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80060c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060c6:	4866      	ldr	r0, [pc, #408]	; (8006260 <mainTask+0x1250>)
 80060c8:	f002 f86a 	bl	80081a0 <HAL_GPIO_ReadPin>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <mainTask+0x10ca>
 80060d2:	4b6a      	ldr	r3, [pc, #424]	; (800627c <mainTask+0x126c>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <mainTask+0x10e2>
 80060da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060de:	4868      	ldr	r0, [pc, #416]	; (8006280 <mainTask+0x1270>)
 80060e0:	f002 f85e 	bl	80081a0 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d125      	bne.n	8006136 <mainTask+0x1126>
 80060ea:	4b64      	ldr	r3, [pc, #400]	; (800627c <mainTask+0x126c>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d121      	bne.n	8006136 <mainTask+0x1126>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80060f2:	2102      	movs	r1, #2
 80060f4:	485a      	ldr	r0, [pc, #360]	; (8006260 <mainTask+0x1250>)
 80060f6:	f002 f853 	bl	80081a0 <HAL_GPIO_ReadPin>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11a      	bne.n	8006136 <mainTask+0x1126>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006100:	2104      	movs	r1, #4
 8006102:	4857      	ldr	r0, [pc, #348]	; (8006260 <mainTask+0x1250>)
 8006104:	f002 f84c 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d113      	bne.n	8006136 <mainTask+0x1126>
						  &&(makineStop==1)
 800610e:	4b56      	ldr	r3, [pc, #344]	; (8006268 <mainTask+0x1258>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00f      	beq.n	8006136 <mainTask+0x1126>
						  &&(butonKontrol==0))
 8006116:	4b5b      	ldr	r3, [pc, #364]	; (8006284 <mainTask+0x1274>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f083 0301 	eor.w	r3, r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <mainTask+0x1126>
				  {

					  kapi2prudhome=1;
 8006124:	4b58      	ldr	r3, [pc, #352]	; (8006288 <mainTask+0x1278>)
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 800612a:	4b58      	ldr	r3, [pc, #352]	; (800628c <mainTask+0x127c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a58      	ldr	r2, [pc, #352]	; (8006290 <mainTask+0x1280>)
 8006130:	6013      	str	r3, [r2, #0]
					  bekle();
 8006132:	f7fa f9ad 	bl	8000490 <bekle>
				  }

				  if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0))
 8006136:	4b55      	ldr	r3, [pc, #340]	; (800628c <mainTask+0x127c>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <mainTask+0x1280>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	4a54      	ldr	r2, [pc, #336]	; (8006294 <mainTask+0x1284>)
 8006142:	7812      	ldrb	r2, [r2, #0]
 8006144:	4293      	cmp	r3, r2
 8006146:	d20d      	bcs.n	8006164 <mainTask+0x1154>
 8006148:	2102      	movs	r1, #2
 800614a:	4845      	ldr	r0, [pc, #276]	; (8006260 <mainTask+0x1250>)
 800614c:	f002 f828 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d006      	beq.n	8006164 <mainTask+0x1154>
 8006156:	4b44      	ldr	r3, [pc, #272]	; (8006268 <mainTask+0x1258>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f083 0301 	eor.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <mainTask+0x115a>
				  {
					  kapi2prudhome=0;
 8006164:	4b48      	ldr	r3, [pc, #288]	; (8006288 <mainTask+0x1278>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 buton kontrol

				  if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800616a:	4b43      	ldr	r3, [pc, #268]	; (8006278 <mainTask+0x1268>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d135      	bne.n	80061de <mainTask+0x11ce>
 8006172:	4b3a      	ldr	r3, [pc, #232]	; (800625c <mainTask+0x124c>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d003      	beq.n	8006182 <mainTask+0x1172>
 800617a:	4b38      	ldr	r3, [pc, #224]	; (800625c <mainTask+0x124c>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d12d      	bne.n	80061de <mainTask+0x11ce>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006186:	4836      	ldr	r0, [pc, #216]	; (8006260 <mainTask+0x1250>)
 8006188:	f002 f80a 	bl	80081a0 <HAL_GPIO_ReadPin>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <mainTask+0x118a>
 8006192:	4b3a      	ldr	r3, [pc, #232]	; (800627c <mainTask+0x126c>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <mainTask+0x11a2>
 800619a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800619e:	4838      	ldr	r0, [pc, #224]	; (8006280 <mainTask+0x1270>)
 80061a0:	f001 fffe 	bl	80081a0 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d119      	bne.n	80061de <mainTask+0x11ce>
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <mainTask+0x126c>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d115      	bne.n	80061de <mainTask+0x11ce>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80061b2:	2102      	movs	r1, #2
 80061b4:	482a      	ldr	r0, [pc, #168]	; (8006260 <mainTask+0x1250>)
 80061b6:	f001 fff3 	bl	80081a0 <HAL_GPIO_ReadPin>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d10e      	bne.n	80061de <mainTask+0x11ce>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80061c0:	2104      	movs	r1, #4
 80061c2:	4827      	ldr	r0, [pc, #156]	; (8006260 <mainTask+0x1250>)
 80061c4:	f001 ffec 	bl	80081a0 <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d107      	bne.n	80061de <mainTask+0x11ce>
						  &&(makineStop==1)
 80061ce:	4b26      	ldr	r3, [pc, #152]	; (8006268 <mainTask+0x1258>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <mainTask+0x11ce>
				  	  	  	  )
				  {
					  kapi2butonkontrol=1;
 80061d6:	4b30      	ldr	r3, [pc, #192]	; (8006298 <mainTask+0x1288>)
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e002      	b.n	80061e4 <mainTask+0x11d4>
				  }
				  else
				  {
					  kapi2butonkontrol=0;
 80061de:	4b2e      	ldr	r3, [pc, #184]	; (8006298 <mainTask+0x1288>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 pizzato

				  if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061e4:	4b24      	ldr	r3, [pc, #144]	; (8006278 <mainTask+0x1268>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11d      	bne.n	8006228 <mainTask+0x1218>
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <mainTask+0x124c>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d003      	beq.n	80061fc <mainTask+0x11ec>
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <mainTask+0x124c>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d115      	bne.n	8006228 <mainTask+0x1218>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80061fc:	2102      	movs	r1, #2
 80061fe:	4818      	ldr	r0, [pc, #96]	; (8006260 <mainTask+0x1250>)
 8006200:	f001 ffce 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10e      	bne.n	8006228 <mainTask+0x1218>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800620a:	2104      	movs	r1, #4
 800620c:	4814      	ldr	r0, [pc, #80]	; (8006260 <mainTask+0x1250>)
 800620e:	f001 ffc7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <mainTask+0x1218>
						  &&(makineStop==1)
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <mainTask+0x1258>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <mainTask+0x1218>
				  	  	  	  )
				  {
					  kapi2pizzato=1;
 8006220:	4b1e      	ldr	r3, [pc, #120]	; (800629c <mainTask+0x128c>)
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <mainTask+0x121e>
				  }
				  else
				  {
					  kapi2pizzato=0;
 8006228:	4b1c      	ldr	r3, [pc, #112]	; (800629c <mainTask+0x128c>)
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 çıkış

				  if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1)
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <mainTask+0x1288>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <mainTask+0x1236>
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <mainTask+0x128c>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <mainTask+0x1236>
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <mainTask+0x1278>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d02c      	beq.n	80062a0 <mainTask+0x1290>
				  {
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006246:	2201      	movs	r2, #1
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	480a      	ldr	r0, [pc, #40]	; (8006274 <mainTask+0x1264>)
 800624c:	f001 ffbf 	bl	80081ce <HAL_GPIO_WritePin>
 8006250:	e02b      	b.n	80062aa <mainTask+0x129a>
 8006252:	bf00      	nop
 8006254:	20000c8f 	.word	0x20000c8f
 8006258:	20000c55 	.word	0x20000c55
 800625c:	20000c54 	.word	0x20000c54
 8006260:	40011000 	.word	0x40011000
 8006264:	20000c52 	.word	0x20000c52
 8006268:	20000c8d 	.word	0x20000c8d
 800626c:	20000c90 	.word	0x20000c90
 8006270:	20000c8e 	.word	0x20000c8e
 8006274:	40010800 	.word	0x40010800
 8006278:	20000c56 	.word	0x20000c56
 800627c:	20000c58 	.word	0x20000c58
 8006280:	40010c00 	.word	0x40010c00
 8006284:	20000c7a 	.word	0x20000c7a
 8006288:	20000c91 	.word	0x20000c91
 800628c:	20000c2c 	.word	0x20000c2c
 8006290:	20000c30 	.word	0x20000c30
 8006294:	20000c66 	.word	0x20000c66
 8006298:	20000c92 	.word	0x20000c92
 800629c:	20000c93 	.word	0x20000c93
				  }

				  else
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80062a0:	2200      	movs	r2, #0
 80062a2:	2140      	movs	r1, #64	; 0x40
 80062a4:	488d      	ldr	r0, [pc, #564]	; (80064dc <mainTask+0x14cc>)
 80062a6:	f001 ff92 	bl	80081ce <HAL_GPIO_WritePin>


				  //   kapi tabla kontrol ***


				  if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80062aa:	4b8d      	ldr	r3, [pc, #564]	; (80064e0 <mainTask+0x14d0>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <mainTask+0x12aa>
 80062b2:	4b8b      	ldr	r3, [pc, #556]	; (80064e0 <mainTask+0x14d0>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d115      	bne.n	80062e6 <mainTask+0x12d6>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80062ba:	2104      	movs	r1, #4
 80062bc:	4889      	ldr	r0, [pc, #548]	; (80064e4 <mainTask+0x14d4>)
 80062be:	f001 ff6f 	bl	80081a0 <HAL_GPIO_ReadPin>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d003      	beq.n	80062d0 <mainTask+0x12c0>
 80062c8:	4b87      	ldr	r3, [pc, #540]	; (80064e8 <mainTask+0x14d8>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <mainTask+0x12d6>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0))
 80062d0:	2102      	movs	r1, #2
 80062d2:	4884      	ldr	r0, [pc, #528]	; (80064e4 <mainTask+0x14d4>)
 80062d4:	f001 ff64 	bl	80081a0 <HAL_GPIO_ReadPin>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <mainTask+0x12d6>

					  kapiTablaAcKonumKat1=1;
 80062de:	4b83      	ldr	r3, [pc, #524]	; (80064ec <mainTask+0x14dc>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e002      	b.n	80062ec <mainTask+0x12dc>
				  else
					  kapiTablaAcKonumKat1=0;
 80062e6:	4b81      	ldr	r3, [pc, #516]	; (80064ec <mainTask+0x14dc>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]

				  if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80062ec:	4b7c      	ldr	r3, [pc, #496]	; (80064e0 <mainTask+0x14d0>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d003      	beq.n	80062fc <mainTask+0x12ec>
 80062f4:	4b7a      	ldr	r3, [pc, #488]	; (80064e0 <mainTask+0x14d0>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d111      	bne.n	8006320 <mainTask+0x1310>
						  && (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062fc:	2102      	movs	r1, #2
 80062fe:	4879      	ldr	r0, [pc, #484]	; (80064e4 <mainTask+0x14d4>)
 8006300:	f001 ff4e 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006304:	4603      	mov	r3, r0
 8006306:	2b01      	cmp	r3, #1
 8006308:	d10a      	bne.n	8006320 <mainTask+0x1310>
					  	  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0))
 800630a:	2104      	movs	r1, #4
 800630c:	4875      	ldr	r0, [pc, #468]	; (80064e4 <mainTask+0x14d4>)
 800630e:	f001 ff47 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <mainTask+0x1310>
					  kapiTablaAcKonumKat2=1;
 8006318:	4b75      	ldr	r3, [pc, #468]	; (80064f0 <mainTask+0x14e0>)
 800631a:	2201      	movs	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e002      	b.n	8006326 <mainTask+0x1316>
				  else
					  kapiTablaAcKonumKat2=0;
 8006320:	4b73      	ldr	r3, [pc, #460]	; (80064f0 <mainTask+0x14e0>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat1==1
 8006326:	4b71      	ldr	r3, [pc, #452]	; (80064ec <mainTask+0x14dc>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <mainTask+0x133e>
						  && kapiAcTipi==1
 800632e:	4b71      	ldr	r3, [pc, #452]	; (80064f4 <mainTask+0x14e4>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10b      	bne.n	800634e <mainTask+0x133e>
					  	  && HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)
 8006336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800633a:	486f      	ldr	r0, [pc, #444]	; (80064f8 <mainTask+0x14e8>)
 800633c:	f001 ff30 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <mainTask+0x133e>
				  {
					  kapiactablaesp1=1;
 8006346:	4b6d      	ldr	r3, [pc, #436]	; (80064fc <mainTask+0x14ec>)
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	e002      	b.n	8006354 <mainTask+0x1344>
				  }
				  else
					  kapiactablaesp1=0;
 800634e:	4b6b      	ldr	r3, [pc, #428]	; (80064fc <mainTask+0x14ec>)
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat2==1
 8006354:	4b66      	ldr	r3, [pc, #408]	; (80064f0 <mainTask+0x14e0>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00f      	beq.n	800637c <mainTask+0x136c>
						  && kapiAcTipi==1
 800635c:	4b65      	ldr	r3, [pc, #404]	; (80064f4 <mainTask+0x14e4>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d10b      	bne.n	800637c <mainTask+0x136c>
					  	  && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)
 8006364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006368:	4863      	ldr	r0, [pc, #396]	; (80064f8 <mainTask+0x14e8>)
 800636a:	f001 ff19 	bl	80081a0 <HAL_GPIO_ReadPin>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <mainTask+0x136c>
				  {
					  kapiactablaesp2=1;
 8006374:	4b62      	ldr	r3, [pc, #392]	; (8006500 <mainTask+0x14f0>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e002      	b.n	8006382 <mainTask+0x1372>
				  }
				  else
					  kapiactablaesp2=0;
 800637c:	4b60      	ldr	r3, [pc, #384]	; (8006500 <mainTask+0x14f0>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]

				  // tabla kapısı prudhome

				  if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006382:	4b60      	ldr	r3, [pc, #384]	; (8006504 <mainTask+0x14f4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d137      	bne.n	80063fa <mainTask+0x13ea>
 800638a:	4b5f      	ldr	r3, [pc, #380]	; (8006508 <mainTask+0x14f8>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d003      	beq.n	800639a <mainTask+0x138a>
 8006392:	4b5d      	ldr	r3, [pc, #372]	; (8006508 <mainTask+0x14f8>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d12f      	bne.n	80063fa <mainTask+0x13ea>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <mainTask+0x14dc>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <mainTask+0x139a>
 80063a2:	4b53      	ldr	r3, [pc, #332]	; (80064f0 <mainTask+0x14e0>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d027      	beq.n	80063fa <mainTask+0x13ea>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80063aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063ae:	484d      	ldr	r0, [pc, #308]	; (80064e4 <mainTask+0x14d4>)
 80063b0:	f001 fef6 	bl	80081a0 <HAL_GPIO_ReadPin>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <mainTask+0x13b2>
 80063ba:	4b4e      	ldr	r3, [pc, #312]	; (80064f4 <mainTask+0x14e4>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <mainTask+0x13c2>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <mainTask+0x14ec>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <mainTask+0x13c2>
 80063ca:	4b4d      	ldr	r3, [pc, #308]	; (8006500 <mainTask+0x14f0>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d013      	beq.n	80063fa <mainTask+0x13ea>
						  &&(makineStop==1)
 80063d2:	4b4e      	ldr	r3, [pc, #312]	; (800650c <mainTask+0x14fc>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <mainTask+0x13ea>
						  &&(butonKontrol==0))
 80063da:	4b4d      	ldr	r3, [pc, #308]	; (8006510 <mainTask+0x1500>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f083 0301 	eor.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <mainTask+0x13ea>
				  {

					  kapiTablaprudhome=1;
 80063e8:	4b4a      	ldr	r3, [pc, #296]	; (8006514 <mainTask+0x1504>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 80063ee:	4b4a      	ldr	r3, [pc, #296]	; (8006518 <mainTask+0x1508>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4a      	ldr	r2, [pc, #296]	; (800651c <mainTask+0x150c>)
 80063f4:	6013      	str	r3, [r2, #0]
					  bekle();
 80063f6:	f7fa f84b 	bl	8000490 <bekle>
				  }

				  if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0))
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <mainTask+0x1508>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b47      	ldr	r3, [pc, #284]	; (800651c <mainTask+0x150c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	4a46      	ldr	r2, [pc, #280]	; (8006520 <mainTask+0x1510>)
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4293      	cmp	r3, r2
 800640a:	d214      	bcs.n	8006436 <mainTask+0x1426>
 800640c:	4b37      	ldr	r3, [pc, #220]	; (80064ec <mainTask+0x14dc>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f083 0301 	eor.w	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <mainTask+0x1418>
 800641a:	4b35      	ldr	r3, [pc, #212]	; (80064f0 <mainTask+0x14e0>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f083 0301 	eor.w	r3, r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <mainTask+0x1426>
 8006428:	4b38      	ldr	r3, [pc, #224]	; (800650c <mainTask+0x14fc>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f083 0301 	eor.w	r3, r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <mainTask+0x142c>
				  {
					  kapiTablaprudhome=0;
 8006436:	4b37      	ldr	r3, [pc, #220]	; (8006514 <mainTask+0x1504>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı buton kontrol

				  if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <mainTask+0x14f4>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d12b      	bne.n	800649c <mainTask+0x148c>
 8006444:	4b30      	ldr	r3, [pc, #192]	; (8006508 <mainTask+0x14f8>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d003      	beq.n	8006454 <mainTask+0x1444>
 800644c:	4b2e      	ldr	r3, [pc, #184]	; (8006508 <mainTask+0x14f8>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d123      	bne.n	800649c <mainTask+0x148c>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <mainTask+0x14dc>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <mainTask+0x1454>
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <mainTask+0x14e0>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01b      	beq.n	800649c <mainTask+0x148c>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006468:	481e      	ldr	r0, [pc, #120]	; (80064e4 <mainTask+0x14d4>)
 800646a:	f001 fe99 	bl	80081a0 <HAL_GPIO_ReadPin>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <mainTask+0x146c>
 8006474:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <mainTask+0x14e4>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <mainTask+0x147c>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800647c:	4b1f      	ldr	r3, [pc, #124]	; (80064fc <mainTask+0x14ec>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <mainTask+0x147c>
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <mainTask+0x14f0>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <mainTask+0x148c>
						  &&(makineStop==1))
 800648c:	4b1f      	ldr	r3, [pc, #124]	; (800650c <mainTask+0x14fc>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <mainTask+0x148c>
				  {
					  kapiTablabutonkontrol=1;
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <mainTask+0x1514>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e002      	b.n	80064a2 <mainTask+0x1492>
				  }

				  else
				  {
					  kapiTablabutonkontrol=0;
 800649c:	4b21      	ldr	r3, [pc, #132]	; (8006524 <mainTask+0x1514>)
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı pizzato

				  if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80064a2:	4b18      	ldr	r3, [pc, #96]	; (8006504 <mainTask+0x14f4>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d140      	bne.n	800652c <mainTask+0x151c>
 80064aa:	4b17      	ldr	r3, [pc, #92]	; (8006508 <mainTask+0x14f8>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d003      	beq.n	80064ba <mainTask+0x14aa>
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <mainTask+0x14f8>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d138      	bne.n	800652c <mainTask+0x151c>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <mainTask+0x14dc>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <mainTask+0x14ba>
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <mainTask+0x14e0>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d030      	beq.n	800652c <mainTask+0x151c>
						  &&(makineStop==1))
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <mainTask+0x14fc>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02c      	beq.n	800652c <mainTask+0x151c>
				  {
					  kapiTablapizzato=1;
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <mainTask+0x1518>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e02b      	b.n	8006532 <mainTask+0x1522>
 80064da:	bf00      	nop
 80064dc:	40010800 	.word	0x40010800
 80064e0:	20000c59 	.word	0x20000c59
 80064e4:	40011000 	.word	0x40011000
 80064e8:	20000c52 	.word	0x20000c52
 80064ec:	20000c97 	.word	0x20000c97
 80064f0:	20000c98 	.word	0x20000c98
 80064f4:	20000c58 	.word	0x20000c58
 80064f8:	40010c00 	.word	0x40010c00
 80064fc:	20000ca7 	.word	0x20000ca7
 8006500:	20000ca8 	.word	0x20000ca8
 8006504:	20000c57 	.word	0x20000c57
 8006508:	20000c54 	.word	0x20000c54
 800650c:	20000c8d 	.word	0x20000c8d
 8006510:	20000c7a 	.word	0x20000c7a
 8006514:	20000c94 	.word	0x20000c94
 8006518:	20000c2c 	.word	0x20000c2c
 800651c:	20000c30 	.word	0x20000c30
 8006520:	20000c67 	.word	0x20000c67
 8006524:	20000c95 	.word	0x20000c95
 8006528:	20000c96 	.word	0x20000c96
				  }

				  else //if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3)))
				  {
					  kapiTablapizzato=0;
 800652c:	4b86      	ldr	r3, [pc, #536]	; (8006748 <mainTask+0x1738>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi Tabla çıkış

				  if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1)
 8006532:	4b86      	ldr	r3, [pc, #536]	; (800674c <mainTask+0x173c>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d107      	bne.n	800654a <mainTask+0x153a>
 800653a:	4b85      	ldr	r3, [pc, #532]	; (8006750 <mainTask+0x1740>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <mainTask+0x153a>
 8006542:	4b81      	ldr	r3, [pc, #516]	; (8006748 <mainTask+0x1738>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <mainTask+0x1546>
				  {
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800654a:	2201      	movs	r2, #1
 800654c:	2120      	movs	r1, #32
 800654e:	4881      	ldr	r0, [pc, #516]	; (8006754 <mainTask+0x1744>)
 8006550:	f001 fe3d 	bl	80081ce <HAL_GPIO_WritePin>
 8006554:	e004      	b.n	8006560 <mainTask+0x1550>
				  }

				  else
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006556:	2200      	movs	r2, #0
 8006558:	2120      	movs	r1, #32
 800655a:	487e      	ldr	r0, [pc, #504]	; (8006754 <mainTask+0x1744>)
 800655c:	f001 fe37 	bl	80081ce <HAL_GPIO_WritePin>

				  /********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				  if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006560:	4b7d      	ldr	r3, [pc, #500]	; (8006758 <mainTask+0x1748>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00e      	beq.n	8006586 <mainTask+0x1576>
 8006568:	2102      	movs	r1, #2
 800656a:	487c      	ldr	r0, [pc, #496]	; (800675c <mainTask+0x174c>)
 800656c:	f001 fe18 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <mainTask+0x1576>
 8006576:	4b7a      	ldr	r3, [pc, #488]	; (8006760 <mainTask+0x1750>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <mainTask+0x1576>
 800657e:	4b79      	ldr	r3, [pc, #484]	; (8006764 <mainTask+0x1754>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d112      	bne.n	80065ac <mainTask+0x159c>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))){
 8006586:	4b78      	ldr	r3, [pc, #480]	; (8006768 <mainTask+0x1758>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d066      	beq.n	800665c <mainTask+0x164c>
 800658e:	2104      	movs	r1, #4
 8006590:	4872      	ldr	r0, [pc, #456]	; (800675c <mainTask+0x174c>)
 8006592:	f001 fe05 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d15f      	bne.n	800665c <mainTask+0x164c>
 800659c:	4b70      	ldr	r3, [pc, #448]	; (8006760 <mainTask+0x1750>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d05b      	beq.n	800665c <mainTask+0x164c>
 80065a4:	4b6f      	ldr	r3, [pc, #444]	; (8006764 <mainTask+0x1754>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d057      	beq.n	800665c <mainTask+0x164c>

				  		calismaSayisi1=calismaSayisi1+1;
 80065ac:	4b6f      	ldr	r3, [pc, #444]	; (800676c <mainTask+0x175c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b6d      	ldr	r3, [pc, #436]	; (800676c <mainTask+0x175c>)
 80065b6:	701a      	strb	r2, [r3, #0]
				  		if(calismaSayisi1>9){
 80065b8:	4b6c      	ldr	r3, [pc, #432]	; (800676c <mainTask+0x175c>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b09      	cmp	r3, #9
 80065be:	d908      	bls.n	80065d2 <mainTask+0x15c2>
				  		calismaSayisi1=0;
 80065c0:	4b6a      	ldr	r3, [pc, #424]	; (800676c <mainTask+0x175c>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10=calismaSayisi10+1;
 80065c6:	4b6a      	ldr	r3, [pc, #424]	; (8006770 <mainTask+0x1760>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	4b68      	ldr	r3, [pc, #416]	; (8006770 <mainTask+0x1760>)
 80065d0:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi10>9){
 80065d2:	4b67      	ldr	r3, [pc, #412]	; (8006770 <mainTask+0x1760>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b09      	cmp	r3, #9
 80065d8:	d908      	bls.n	80065ec <mainTask+0x15dc>
				  		calismaSayisi10=0;
 80065da:	4b65      	ldr	r3, [pc, #404]	; (8006770 <mainTask+0x1760>)
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi100=calismaSayisi100+1;
 80065e0:	4b64      	ldr	r3, [pc, #400]	; (8006774 <mainTask+0x1764>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	4b62      	ldr	r3, [pc, #392]	; (8006774 <mainTask+0x1764>)
 80065ea:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi100>9){
 80065ec:	4b61      	ldr	r3, [pc, #388]	; (8006774 <mainTask+0x1764>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d908      	bls.n	8006606 <mainTask+0x15f6>
				  		calismaSayisi100=0;
 80065f4:	4b5f      	ldr	r3, [pc, #380]	; (8006774 <mainTask+0x1764>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi1000=calismaSayisi1000+1;
 80065fa:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <mainTask+0x1768>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b5d      	ldr	r3, [pc, #372]	; (8006778 <mainTask+0x1768>)
 8006604:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi1000>9){
 8006606:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <mainTask+0x1768>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b09      	cmp	r3, #9
 800660c:	d908      	bls.n	8006620 <mainTask+0x1610>
				  		calismaSayisi1000=0;
 800660e:	4b5a      	ldr	r3, [pc, #360]	; (8006778 <mainTask+0x1768>)
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10000=calismaSayisi10000+1;
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <mainTask+0x176c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	4b57      	ldr	r3, [pc, #348]	; (800677c <mainTask+0x176c>)
 800661e:	701a      	strb	r2, [r3, #0]
				  		}
				  		eepromData[32]=calismaSayisi10000;
 8006620:	4b56      	ldr	r3, [pc, #344]	; (800677c <mainTask+0x176c>)
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <mainTask+0x1770>)
 8006626:	f883 2020 	strb.w	r2, [r3, #32]
				  		eepromData[31]=calismaSayisi1000;
 800662a:	4b53      	ldr	r3, [pc, #332]	; (8006778 <mainTask+0x1768>)
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	4b54      	ldr	r3, [pc, #336]	; (8006780 <mainTask+0x1770>)
 8006630:	77da      	strb	r2, [r3, #31]
				  		eepromData[30]=calismaSayisi100;
 8006632:	4b50      	ldr	r3, [pc, #320]	; (8006774 <mainTask+0x1764>)
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	4b52      	ldr	r3, [pc, #328]	; (8006780 <mainTask+0x1770>)
 8006638:	779a      	strb	r2, [r3, #30]
				  		eepromData[29]=calismaSayisi10;
 800663a:	4b4d      	ldr	r3, [pc, #308]	; (8006770 <mainTask+0x1760>)
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	4b50      	ldr	r3, [pc, #320]	; (8006780 <mainTask+0x1770>)
 8006640:	775a      	strb	r2, [r3, #29]
				  		eepromData[28]=calismaSayisi1;
 8006642:	4b4a      	ldr	r3, [pc, #296]	; (800676c <mainTask+0x175c>)
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	4b4e      	ldr	r3, [pc, #312]	; (8006780 <mainTask+0x1770>)
 8006648:	771a      	strb	r2, [r3, #28]

				  		hafizaYaz=1;
 800664a:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <mainTask+0x1774>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]

				  		CalismaSayisiYukari=0;
 8006650:	4b41      	ldr	r3, [pc, #260]	; (8006758 <mainTask+0x1748>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
				  		CalismaSayisiAsagi=0;
 8006656:	4b44      	ldr	r3, [pc, #272]	; (8006768 <mainTask+0x1758>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
				  }

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				  if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800665c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006660:	4849      	ldr	r0, [pc, #292]	; (8006788 <mainTask+0x1778>)
 8006662:	f001 fd9d 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d016      	beq.n	800669a <mainTask+0x168a>
				  		||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800666c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006670:	4845      	ldr	r0, [pc, #276]	; (8006788 <mainTask+0x1778>)
 8006672:	f001 fd95 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00e      	beq.n	800669a <mainTask+0x168a>
				  		||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800667c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006680:	4841      	ldr	r0, [pc, #260]	; (8006788 <mainTask+0x1778>)
 8006682:	f001 fd8d 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <mainTask+0x168a>
				  	    ||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)){
 800668c:	2140      	movs	r1, #64	; 0x40
 800668e:	4833      	ldr	r0, [pc, #204]	; (800675c <mainTask+0x174c>)
 8006690:	f001 fd86 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <mainTask+0x1692>

				  		 startBasili=1;
 800669a:	4b3c      	ldr	r3, [pc, #240]	; (800678c <mainTask+0x177c>)
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e002      	b.n	80066a8 <mainTask+0x1698>
				  }
				  else
				  	     startBasili=0;
 80066a2:	4b3a      	ldr	r3, [pc, #232]	; (800678c <mainTask+0x177c>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]

				  if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1)
 80066a8:	4b38      	ldr	r3, [pc, #224]	; (800678c <mainTask+0x177c>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <mainTask+0x16c4>
 80066b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066b4:	4834      	ldr	r0, [pc, #208]	; (8006788 <mainTask+0x1778>)
 80066b6:	f001 fd73 	bl	80081a0 <HAL_GPIO_ReadPin>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d109      	bne.n	80066d4 <mainTask+0x16c4>
				  	{
				  		hataVar=1;
 80066c0:	4b33      	ldr	r3, [pc, #204]	; (8006790 <mainTask+0x1780>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(1);
 80066c6:	2001      	movs	r0, #1
 80066c8:	f7fd ff92 	bl	80045f0 <hataKoduLcdGoster>
				  		acilstophatasi=1;
 80066cc:	4b31      	ldr	r3, [pc, #196]	; (8006794 <mainTask+0x1784>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	e018      	b.n	8006706 <mainTask+0x16f6>
				  	}

				  else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0)
 80066d4:	4b2f      	ldr	r3, [pc, #188]	; (8006794 <mainTask+0x1784>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d014      	beq.n	8006706 <mainTask+0x16f6>
 80066dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066e0:	4829      	ldr	r0, [pc, #164]	; (8006788 <mainTask+0x1778>)
 80066e2:	f001 fd5d 	bl	80081a0 <HAL_GPIO_ReadPin>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10c      	bne.n	8006706 <mainTask+0x16f6>
 80066ec:	4b27      	ldr	r3, [pc, #156]	; (800678c <mainTask+0x177c>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <mainTask+0x16f6>
				  	 {
				  		acilstophatasi=0;
 80066fa:	4b26      	ldr	r3, [pc, #152]	; (8006794 <mainTask+0x1784>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
				  		lcdupdate(1);
 8006700:	2001      	movs	r0, #1
 8006702:	f7fe f9cd 	bl	8004aa0 <lcdupdate>
				  	}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				  if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1))
 8006706:	4b24      	ldr	r3, [pc, #144]	; (8006798 <mainTask+0x1788>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f083 0301 	eor.w	r3, r3, #1
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d049      	beq.n	80067a8 <mainTask+0x1798>
 8006714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006718:	481b      	ldr	r0, [pc, #108]	; (8006788 <mainTask+0x1778>)
 800671a:	f001 fd41 	bl	80081a0 <HAL_GPIO_ReadPin>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <mainTask+0x171c>
 8006724:	4b1d      	ldr	r3, [pc, #116]	; (800679c <mainTask+0x178c>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d03d      	beq.n	80067a8 <mainTask+0x1798>
 800672c:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <mainTask+0x1790>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d139      	bne.n	80067a8 <mainTask+0x1798>
				   {
				  		hataVar=1;
 8006734:	4b16      	ldr	r3, [pc, #88]	; (8006790 <mainTask+0x1780>)
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(2);
 800673a:	2002      	movs	r0, #2
 800673c:	f7fd ff58 	bl	80045f0 <hataKoduLcdGoster>
				  		emniyetCercevesihatasi=1;
 8006740:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <mainTask+0x1794>)
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e047      	b.n	80067d8 <mainTask+0x17c8>
 8006748:	20000c96 	.word	0x20000c96
 800674c:	20000c95 	.word	0x20000c95
 8006750:	20000c94 	.word	0x20000c94
 8006754:	40010800 	.word	0x40010800
 8006758:	20000c8a 	.word	0x20000c8a
 800675c:	40011000 	.word	0x40011000
 8006760:	20000c52 	.word	0x20000c52
 8006764:	20000c8d 	.word	0x20000c8d
 8006768:	20000c8b 	.word	0x20000c8b
 800676c:	20000c49 	.word	0x20000c49
 8006770:	20000c4a 	.word	0x20000c4a
 8006774:	20000910 	.word	0x20000910
 8006778:	20000911 	.word	0x20000911
 800677c:	20000c4b 	.word	0x20000c4b
 8006780:	20000be4 	.word	0x20000be4
 8006784:	20000c77 	.word	0x20000c77
 8006788:	40010c00 	.word	0x40010c00
 800678c:	20000c99 	.word	0x20000c99
 8006790:	20000ca0 	.word	0x20000ca0
 8006794:	20000c9b 	.word	0x20000c9b
 8006798:	20000ca2 	.word	0x20000ca2
 800679c:	20000cac 	.word	0x20000cac
 80067a0:	20000c50 	.word	0x20000c50
 80067a4:	20000c9c 	.word	0x20000c9c
				  	}
				  	else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0){
 80067a8:	4b91      	ldr	r3, [pc, #580]	; (80069f0 <mainTask+0x19e0>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d013      	beq.n	80067d8 <mainTask+0x17c8>
 80067b0:	4b90      	ldr	r3, [pc, #576]	; (80069f4 <mainTask+0x19e4>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <mainTask+0x17c8>
 80067b8:	4b8f      	ldr	r3, [pc, #572]	; (80069f8 <mainTask+0x19e8>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f083 0301 	eor.w	r3, r3, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <mainTask+0x17c8>
				  		emniyetCercevesihatasi=0;
 80067c6:	4b8a      	ldr	r3, [pc, #552]	; (80069f0 <mainTask+0x19e0>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
				  		cercevesasagicalisma=0;
 80067cc:	4b8b      	ldr	r3, [pc, #556]	; (80069fc <mainTask+0x19ec>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
				  		lcdupdate(2);
 80067d2:	2002      	movs	r0, #2
 80067d4:	f7fe f964 	bl	8004aa0 <lcdupdate>
				  	}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

				  	if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1)
 80067d8:	4b89      	ldr	r3, [pc, #548]	; (8006a00 <mainTask+0x19f0>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d119      	bne.n	8006814 <mainTask+0x1804>
 80067e0:	4b88      	ldr	r3, [pc, #544]	; (8006a04 <mainTask+0x19f4>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d115      	bne.n	8006814 <mainTask+0x1804>
 80067e8:	4b87      	ldr	r3, [pc, #540]	; (8006a08 <mainTask+0x19f8>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <mainTask+0x1804>
 80067f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067f4:	4885      	ldr	r0, [pc, #532]	; (8006a0c <mainTask+0x19fc>)
 80067f6:	f001 fcd3 	bl	80081a0 <HAL_GPIO_ReadPin>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d109      	bne.n	8006814 <mainTask+0x1804>
				  	{
				  		hataVar=1;
 8006800:	4b83      	ldr	r3, [pc, #524]	; (8006a10 <mainTask+0x1a00>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(3);
 8006806:	2003      	movs	r0, #3
 8006808:	f7fd fef2 	bl	80045f0 <hataKoduLcdGoster>
				  		basinchatasi=1;
 800680c:	4b81      	ldr	r3, [pc, #516]	; (8006a14 <mainTask+0x1a04>)
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e015      	b.n	8006840 <mainTask+0x1830>
				  	}
				  	else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1){
 8006814:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <mainTask+0x1a04>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d011      	beq.n	8006840 <mainTask+0x1830>
 800681c:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <mainTask+0x19f0>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10d      	bne.n	8006840 <mainTask+0x1830>
 8006824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006828:	487b      	ldr	r0, [pc, #492]	; (8006a18 <mainTask+0x1a08>)
 800682a:	f001 fcb9 	bl	80081a0 <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d105      	bne.n	8006840 <mainTask+0x1830>
				  		basinchatasi=0;
 8006834:	4b77      	ldr	r3, [pc, #476]	; (8006a14 <mainTask+0x1a04>)
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
				  		lcdupdate(3);
 800683a:	2003      	movs	r0, #3
 800683c:	f7fe f930 	bl	8004aa0 <lcdupdate>

				  	}
		/************************************ KAPI SİVİÇ HATASI **************************************************/
				  if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 8006840:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <mainTask+0x1a0c>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d103      	bne.n	8006850 <mainTask+0x1840>
 8006848:	4b75      	ldr	r3, [pc, #468]	; (8006a20 <mainTask+0x1a10>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d019      	beq.n	8006884 <mainTask+0x1874>
 8006850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006854:	4873      	ldr	r0, [pc, #460]	; (8006a24 <mainTask+0x1a14>)
 8006856:	f001 fca3 	bl	80081a0 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d111      	bne.n	8006884 <mainTask+0x1874>
 8006860:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <mainTask+0x1a18>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d003      	beq.n	8006870 <mainTask+0x1860>
 8006868:	4b6f      	ldr	r3, [pc, #444]	; (8006a28 <mainTask+0x1a18>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d109      	bne.n	8006884 <mainTask+0x1874>
				  {
					  hataVar=1;
 8006870:	4b67      	ldr	r3, [pc, #412]	; (8006a10 <mainTask+0x1a00>)
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(4);
 8006876:	2004      	movs	r0, #4
 8006878:	f7fd feba 	bl	80045f0 <hataKoduLcdGoster>
					  katkapisivicihatasi=1;
 800687c:	4b6b      	ldr	r3, [pc, #428]	; (8006a2c <mainTask+0x1a1c>)
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e01f      	b.n	80068c4 <mainTask+0x18b4>
				  }
				  else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 8006884:	4b69      	ldr	r3, [pc, #420]	; (8006a2c <mainTask+0x1a1c>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <mainTask+0x18b4>
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <mainTask+0x1a20>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <mainTask+0x18b4>
 8006894:	4b61      	ldr	r3, [pc, #388]	; (8006a1c <mainTask+0x1a0c>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f083 0301 	eor.w	r3, r3, #1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <mainTask+0x18b4>
 80068a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068a6:	485f      	ldr	r0, [pc, #380]	; (8006a24 <mainTask+0x1a14>)
 80068a8:	f001 fc7a 	bl	80081a0 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <mainTask+0x18b4>
				  {
					  katkapisivicihatasi=0;
 80068b2:	4b5e      	ldr	r3, [pc, #376]	; (8006a2c <mainTask+0x1a1c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyorkapi=0;
 80068b8:	4b59      	ldr	r3, [pc, #356]	; (8006a20 <mainTask+0x1a10>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
				  	  lcdupdate(4);
 80068be:	2004      	movs	r0, #4
 80068c0:	f7fe f8ee 	bl	8004aa0 <lcdupdate>
				  }

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				  if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 80068c4:	4b55      	ldr	r3, [pc, #340]	; (8006a1c <mainTask+0x1a0c>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <mainTask+0x18c4>
 80068cc:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <mainTask+0x1a24>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d019      	beq.n	8006908 <mainTask+0x18f8>
 80068d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d8:	4852      	ldr	r0, [pc, #328]	; (8006a24 <mainTask+0x1a14>)
 80068da:	f001 fc61 	bl	80081a0 <HAL_GPIO_ReadPin>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d111      	bne.n	8006908 <mainTask+0x18f8>
 80068e4:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <mainTask+0x1a18>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d003      	beq.n	80068f4 <mainTask+0x18e4>
 80068ec:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <mainTask+0x1a18>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d109      	bne.n	8006908 <mainTask+0x18f8>
				  {
					  hataVar=1;
 80068f4:	4b46      	ldr	r3, [pc, #280]	; (8006a10 <mainTask+0x1a00>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(5);
 80068fa:	2005      	movs	r0, #5
 80068fc:	f7fd fe78 	bl	80045f0 <hataKoduLcdGoster>
					  tablakapisivicihatasi=1;
 8006900:	4b4d      	ldr	r3, [pc, #308]	; (8006a38 <mainTask+0x1a28>)
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e023      	b.n	8006950 <mainTask+0x1940>
				  }
				  else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1)
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <mainTask+0x1a28>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <mainTask+0x1940>
 8006910:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <mainTask+0x1a20>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <mainTask+0x1940>
 8006918:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <mainTask+0x1a0c>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f083 0301 	eor.w	r3, r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d014      	beq.n	8006950 <mainTask+0x1940>
 8006926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800692a:	483e      	ldr	r0, [pc, #248]	; (8006a24 <mainTask+0x1a14>)
 800692c:	f001 fc38 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10c      	bne.n	8006950 <mainTask+0x1940>
 8006936:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <mainTask+0x1a20>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <mainTask+0x1940>
				  {
					  tablakapisivicihatasi=0;
 800693e:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <mainTask+0x1a28>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyortabla=0;
 8006944:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <mainTask+0x1a24>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
				  	  lcdupdate(5);
 800694a:	2005      	movs	r0, #5
 800694c:	f7fe f8a8 	bl	8004aa0 <lcdupdate>
				  }


		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				   if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor))
 8006950:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <mainTask+0x19f8>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d107      	bne.n	8006968 <mainTask+0x1958>
 8006958:	4b27      	ldr	r3, [pc, #156]	; (80069f8 <mainTask+0x19e8>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <mainTask+0x1958>
 8006960:	4b36      	ldr	r3, [pc, #216]	; (8006a3c <mainTask+0x1a2c>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d011      	beq.n	800698c <mainTask+0x197c>
				  	 {

			    	if(millis-timer4>=makineCalismaTmr)
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <mainTask+0x1a30>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b35      	ldr	r3, [pc, #212]	; (8006a44 <mainTask+0x1a34>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	4a35      	ldr	r2, [pc, #212]	; (8006a48 <mainTask+0x1a38>)
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	4293      	cmp	r3, r2
 8006978:	d308      	bcc.n	800698c <mainTask+0x197c>
				  	  {
				  		hataVar=1;
 800697a:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <mainTask+0x1a00>)
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(6);
 8006980:	2006      	movs	r0, #6
 8006982:	f7fd fe35 	bl	80045f0 <hataKoduLcdGoster>
				  		maksimumcalismahatasi=1;
 8006986:	4b31      	ldr	r3, [pc, #196]	; (8006a4c <mainTask+0x1a3c>)
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
				  	  }
				    }

				   if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0){
 800698c:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <mainTask+0x1a3c>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <mainTask+0x19ac>
 8006994:	2108      	movs	r1, #8
 8006996:	4823      	ldr	r0, [pc, #140]	; (8006a24 <mainTask+0x1a14>)
 8006998:	f001 fc02 	bl	80081a0 <HAL_GPIO_ReadPin>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <mainTask+0x19ac>
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <mainTask+0x1a0c>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <mainTask+0x19ac>

				  		maksimumcalismahatasi=0;
 80069b0:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <mainTask+0x1a3c>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
				  		lcdupdate(6);
 80069b6:	2006      	movs	r0, #6
 80069b8:	f7fe f872 	bl	8004aa0 <lcdupdate>
				  	}

				  	if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)){
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <mainTask+0x1a40>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <mainTask+0x19cc>
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <mainTask+0x19e8>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d107      	bne.n	80069dc <mainTask+0x19cc>
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <mainTask+0x1a44>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <mainTask+0x19cc>
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <mainTask+0x1a2c>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03f      	beq.n	8006a5c <mainTask+0x1a4c>
				  		makineCalisiyor=0;
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <mainTask+0x1a48>)
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyorkapi=1;
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <mainTask+0x1a10>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyortabla=1;
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <mainTask+0x1a24>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e03c      	b.n	8006a6a <mainTask+0x1a5a>
 80069f0:	20000c9c 	.word	0x20000c9c
 80069f4:	20000ca2 	.word	0x20000ca2
 80069f8:	20000c83 	.word	0x20000c83
 80069fc:	20000cac 	.word	0x20000cac
 8006a00:	20000c4f 	.word	0x20000c4f
 8006a04:	20000c53 	.word	0x20000c53
 8006a08:	20000c9f 	.word	0x20000c9f
 8006a0c:	40011000 	.word	0x40011000
 8006a10:	20000ca0 	.word	0x20000ca0
 8006a14:	20000ca9 	.word	0x20000ca9
 8006a18:	40010c00 	.word	0x40010c00
 8006a1c:	20000c99 	.word	0x20000c99
 8006a20:	20000cad 	.word	0x20000cad
 8006a24:	40010800 	.word	0x40010800
 8006a28:	20000c54 	.word	0x20000c54
 8006a2c:	20000caa 	.word	0x20000caa
 8006a30:	20000c8d 	.word	0x20000c8d
 8006a34:	20000cae 	.word	0x20000cae
 8006a38:	20000cab 	.word	0x20000cab
 8006a3c:	20000c82 	.word	0x20000c82
 8006a40:	20000c2c 	.word	0x20000c2c
 8006a44:	20000c40 	.word	0x20000c40
 8006a48:	20000c64 	.word	0x20000c64
 8006a4c:	20000c9a 	.word	0x20000c9a
 8006a50:	20000c80 	.word	0x20000c80
 8006a54:	20000c81 	.word	0x20000c81
 8006a58:	20000ca1 	.word	0x20000ca1
				  	}
				  	else
				  	{
				  		makineCalisiyor=1;
 8006a5c:	4b8e      	ldr	r3, [pc, #568]	; (8006c98 <mainTask+0x1c88>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
				  		timer4=millis;
 8006a62:	4b8e      	ldr	r3, [pc, #568]	; (8006c9c <mainTask+0x1c8c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a8e      	ldr	r2, [pc, #568]	; (8006ca0 <mainTask+0x1c90>)
 8006a68:	6013      	str	r3, [r2, #0]
				  	}
		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				  if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006a6a:	4b8e      	ldr	r3, [pc, #568]	; (8006ca4 <mainTask+0x1c94>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d02f      	beq.n	8006ad2 <mainTask+0x1ac2>
 8006a72:	4b8d      	ldr	r3, [pc, #564]	; (8006ca8 <mainTask+0x1c98>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f083 0301 	eor.w	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d028      	beq.n	8006ad2 <mainTask+0x1ac2>
 8006a80:	4b8a      	ldr	r3, [pc, #552]	; (8006cac <mainTask+0x1c9c>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f083 0301 	eor.w	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d021      	beq.n	8006ad2 <mainTask+0x1ac2>
 8006a8e:	4b88      	ldr	r3, [pc, #544]	; (8006cb0 <mainTask+0x1ca0>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f083 0301 	eor.w	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <mainTask+0x1ac2>
						  && katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0){
 8006a9c:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <mainTask+0x1ca4>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f083 0301 	eor.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d013      	beq.n	8006ad2 <mainTask+0x1ac2>
 8006aaa:	4b83      	ldr	r3, [pc, #524]	; (8006cb8 <mainTask+0x1ca8>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <mainTask+0x1ac2>
 8006ab8:	4b80      	ldr	r3, [pc, #512]	; (8006cbc <mainTask+0x1cac>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f083 0301 	eor.w	r3, r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <mainTask+0x1ac2>
					  hataVar=0;
 8006ac6:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <mainTask+0x1c94>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
					  lcdupdate(7);
 8006acc:	2007      	movs	r0, #7
 8006ace:	f7fd ffe7 	bl	8004aa0 <lcdupdate>

				  // DEMO MOD BASLIYOR

				  // DEMO YUKARI CALISMA

				  if((demoMode==1)&&(stopVar)&&(menuGiris==0)){
 8006ad2:	4b7b      	ldr	r3, [pc, #492]	; (8006cc0 <mainTask+0x1cb0>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f040 8268 	bne.w	8006fac <mainTask+0x1f9c>
 8006adc:	4b79      	ldr	r3, [pc, #484]	; (8006cc4 <mainTask+0x1cb4>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8263 	beq.w	8006fac <mainTask+0x1f9c>
 8006ae6:	4b78      	ldr	r3, [pc, #480]	; (8006cc8 <mainTask+0x1cb8>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 825e 	bne.w	8006fac <mainTask+0x1f9c>

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006af0:	2102      	movs	r1, #2
 8006af2:	4876      	ldr	r0, [pc, #472]	; (8006ccc <mainTask+0x1cbc>)
 8006af4:	f001 fb54 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11d      	bne.n	8006b3a <mainTask+0x1b2a>
						      && (demoAsagiCalis==0)
 8006afe:	4b74      	ldr	r3, [pc, #464]	; (8006cd0 <mainTask+0x1cc0>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f083 0301 	eor.w	r3, r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d016      	beq.n	8006b3a <mainTask+0x1b2a>
							  && (demoDevYukari==0)
 8006b0c:	4b71      	ldr	r3, [pc, #452]	; (8006cd4 <mainTask+0x1cc4>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f083 0301 	eor.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00f      	beq.n	8006b3a <mainTask+0x1b2a>
							  && (demoDevAsagi==0)){
 8006b1a:	4b6f      	ldr	r3, [pc, #444]	; (8006cd8 <mainTask+0x1cc8>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f083 0301 	eor.w	r3, r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <mainTask+0x1b2a>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006b28:	2201      	movs	r2, #1
 8006b2a:	2104      	movs	r1, #4
 8006b2c:	486b      	ldr	r0, [pc, #428]	; (8006cdc <mainTask+0x1ccc>)
 8006b2e:	f001 fb4e 	bl	80081ce <HAL_GPIO_WritePin>
						  demoYukariCalis=1;
 8006b32:	4b6b      	ldr	r3, [pc, #428]	; (8006ce0 <mainTask+0x1cd0>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e00e      	b.n	8006b58 <mainTask+0x1b48>
					  }
					  else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1){
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	4863      	ldr	r0, [pc, #396]	; (8006ccc <mainTask+0x1cbc>)
 8006b3e:	f001 fb2f 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <mainTask+0x1b48>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	4863      	ldr	r0, [pc, #396]	; (8006cdc <mainTask+0x1ccc>)
 8006b4e:	f001 fb3e 	bl	80081ce <HAL_GPIO_WritePin>
						  demoYukariCalis=0;
 8006b52:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <mainTask+0x1cd0>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO MOTOR CALISMASI

					  if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)){
 8006b58:	4b61      	ldr	r3, [pc, #388]	; (8006ce0 <mainTask+0x1cd0>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <mainTask+0x1b68>
 8006b60:	4b5c      	ldr	r3, [pc, #368]	; (8006cd4 <mainTask+0x1cc4>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <mainTask+0x1b68>
 8006b68:	4b5b      	ldr	r3, [pc, #364]	; (8006cd8 <mainTask+0x1cc8>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <mainTask+0x1b68>
 8006b70:	4b57      	ldr	r3, [pc, #348]	; (8006cd0 <mainTask+0x1cc0>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <mainTask+0x1b82>

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b7e:	4857      	ldr	r0, [pc, #348]	; (8006cdc <mainTask+0x1ccc>)
 8006b80:	f001 fb25 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006b84:	2201      	movs	r2, #1
 8006b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b8a:	4854      	ldr	r0, [pc, #336]	; (8006cdc <mainTask+0x1ccc>)
 8006b8c:	f001 fb1f 	bl	80081ce <HAL_GPIO_WritePin>
 8006b90:	e00b      	b.n	8006baa <mainTask+0x1b9a>

					  }
					  else {

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b92:	2200      	movs	r2, #0
 8006b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b98:	4850      	ldr	r0, [pc, #320]	; (8006cdc <mainTask+0x1ccc>)
 8006b9a:	f001 fb18 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ba4:	484d      	ldr	r0, [pc, #308]	; (8006cdc <mainTask+0x1ccc>)
 8006ba6:	f001 fb12 	bl	80081ce <HAL_GPIO_WritePin>
					  }
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006baa:	2102      	movs	r1, #2
 8006bac:	4847      	ldr	r0, [pc, #284]	; (8006ccc <mainTask+0x1cbc>)
 8006bae:	f001 faf7 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10d      	bne.n	8006bd4 <mainTask+0x1bc4>
							  && (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bbc:	4843      	ldr	r0, [pc, #268]	; (8006ccc <mainTask+0x1cbc>)
 8006bbe:	f001 faef 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <mainTask+0x1bc4>
							  && (demoYukariCalis==0)
 8006bc8:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <mainTask+0x1cd0>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f083 0301 	eor.w	r3, r3, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0


					  }

					  //DEVİRME YUKARI CALIS
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	483d      	ldr	r0, [pc, #244]	; (8006ccc <mainTask+0x1cbc>)
 8006bd8:	f001 fae2 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d125      	bne.n	8006c2e <mainTask+0x1c1e>
							  &&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006be6:	4839      	ldr	r0, [pc, #228]	; (8006ccc <mainTask+0x1cbc>)
 8006be8:	f001 fada 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11d      	bne.n	8006c2e <mainTask+0x1c1e>
							  &&(demoYukariCalis==0)
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <mainTask+0x1cd0>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f083 0301 	eor.w	r3, r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d016      	beq.n	8006c2e <mainTask+0x1c1e>
							  &&(demoAsagiCalis==0)
 8006c00:	4b33      	ldr	r3, [pc, #204]	; (8006cd0 <mainTask+0x1cc0>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f083 0301 	eor.w	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <mainTask+0x1c1e>
							  && (demoDevAsagi==0)){
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <mainTask+0x1cc8>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f083 0301 	eor.w	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <mainTask+0x1c1e>
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2120      	movs	r1, #32
 8006c20:	482a      	ldr	r0, [pc, #168]	; (8006ccc <mainTask+0x1cbc>)
 8006c22:	f001 fad4 	bl	80081ce <HAL_GPIO_WritePin>
						  demoDevYukari=1;
 8006c26:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <mainTask+0x1cc4>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <mainTask+0x1c2e>
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2120      	movs	r1, #32
 8006c32:	4826      	ldr	r0, [pc, #152]	; (8006ccc <mainTask+0x1cbc>)
 8006c34:	f001 facb 	bl	80081ce <HAL_GPIO_WritePin>
						  demoDevYukari=0;
 8006c38:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <mainTask+0x1cc4>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
					  }

					  // DEVIRME ASAGI CALIS

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c3e:	2102      	movs	r1, #2
 8006c40:	4822      	ldr	r0, [pc, #136]	; (8006ccc <mainTask+0x1cbc>)
 8006c42:	f001 faad 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d14b      	bne.n	8006ce4 <mainTask+0x1cd4>
							  &&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c50:	481e      	ldr	r0, [pc, #120]	; (8006ccc <mainTask+0x1cbc>)
 8006c52:	f001 faa5 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d143      	bne.n	8006ce4 <mainTask+0x1cd4>
							  &&(demoYukariCalis==0)
 8006c5c:	4b20      	ldr	r3, [pc, #128]	; (8006ce0 <mainTask+0x1cd0>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03c      	beq.n	8006ce4 <mainTask+0x1cd4>
							  &&(demoDevYukari==0)
 8006c6a:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <mainTask+0x1cc4>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f083 0301 	eor.w	r3, r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d035      	beq.n	8006ce4 <mainTask+0x1cd4>
							  && (demoAsagiCalis==0)){
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <mainTask+0x1cc0>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f083 0301 	eor.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02e      	beq.n	8006ce4 <mainTask+0x1cd4>
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006c86:	2201      	movs	r2, #1
 8006c88:	2110      	movs	r1, #16
 8006c8a:	4810      	ldr	r0, [pc, #64]	; (8006ccc <mainTask+0x1cbc>)
 8006c8c:	f001 fa9f 	bl	80081ce <HAL_GPIO_WritePin>
						  demoDevAsagi=1;
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <mainTask+0x1cc8>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e02d      	b.n	8006cf4 <mainTask+0x1ce4>
 8006c98:	20000ca1 	.word	0x20000ca1
 8006c9c:	20000c2c 	.word	0x20000c2c
 8006ca0:	20000c40 	.word	0x20000c40
 8006ca4:	20000ca0 	.word	0x20000ca0
 8006ca8:	20000c9b 	.word	0x20000c9b
 8006cac:	20000c9c 	.word	0x20000c9c
 8006cb0:	20000ca9 	.word	0x20000ca9
 8006cb4:	20000caa 	.word	0x20000caa
 8006cb8:	20000cab 	.word	0x20000cab
 8006cbc:	20000c9a 	.word	0x20000c9a
 8006cc0:	20000c6a 	.word	0x20000c6a
 8006cc4:	20000c9d 	.word	0x20000c9d
 8006cc8:	20000c69 	.word	0x20000c69
 8006ccc:	40011000 	.word	0x40011000
 8006cd0:	20000ca4 	.word	0x20000ca4
 8006cd4:	20000ca5 	.word	0x20000ca5
 8006cd8:	20000ca6 	.word	0x20000ca6
 8006cdc:	40010c00 	.word	0x40010c00
 8006ce0:	20000ca3 	.word	0x20000ca3
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2110      	movs	r1, #16
 8006ce8:	489a      	ldr	r0, [pc, #616]	; (8006f54 <mainTask+0x1f44>)
 8006cea:	f001 fa70 	bl	80081ce <HAL_GPIO_WritePin>
						  demoDevAsagi=0;
 8006cee:	4b9a      	ldr	r3, [pc, #616]	; (8006f58 <mainTask+0x1f48>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO ASAGI CALISMA

					  if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006cf4:	2104      	movs	r1, #4
 8006cf6:	4897      	ldr	r0, [pc, #604]	; (8006f54 <mainTask+0x1f44>)
 8006cf8:	f001 fa52 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d125      	bne.n	8006d4e <mainTask+0x1d3e>
						      && (demoYukariCalis==0)
 8006d02:	4b96      	ldr	r3, [pc, #600]	; (8006f5c <mainTask+0x1f4c>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f083 0301 	eor.w	r3, r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01e      	beq.n	8006d4e <mainTask+0x1d3e>
							  && (demoDevAsagi==0)
 8006d10:	4b91      	ldr	r3, [pc, #580]	; (8006f58 <mainTask+0x1f48>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f083 0301 	eor.w	r3, r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d017      	beq.n	8006d4e <mainTask+0x1d3e>
							  && (demoDevYukari==0)){
 8006d1e:	4b90      	ldr	r3, [pc, #576]	; (8006f60 <mainTask+0x1f50>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f083 0301 	eor.w	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <mainTask+0x1d3e>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2102      	movs	r1, #2
 8006d30:	488c      	ldr	r0, [pc, #560]	; (8006f64 <mainTask+0x1f54>)
 8006d32:	f001 fa4c 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006d36:	2201      	movs	r2, #1
 8006d38:	2101      	movs	r1, #1
 8006d3a:	488a      	ldr	r0, [pc, #552]	; (8006f64 <mainTask+0x1f54>)
 8006d3c:	f001 fa47 	bl	80081ce <HAL_GPIO_WritePin>
						  demoAsagiCalis=1;
 8006d40:	4b89      	ldr	r3, [pc, #548]	; (8006f68 <mainTask+0x1f58>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
						  demoCalismaSayisiYar=1;
 8006d46:	4b89      	ldr	r3, [pc, #548]	; (8006f6c <mainTask+0x1f5c>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e013      	b.n	8006d76 <mainTask+0x1d66>
					  }
					  else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)){
 8006d4e:	2104      	movs	r1, #4
 8006d50:	4880      	ldr	r0, [pc, #512]	; (8006f54 <mainTask+0x1f44>)
 8006d52:	f001 fa25 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d10c      	bne.n	8006d76 <mainTask+0x1d66>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2102      	movs	r1, #2
 8006d60:	4880      	ldr	r0, [pc, #512]	; (8006f64 <mainTask+0x1f54>)
 8006d62:	f001 fa34 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006d66:	2200      	movs	r2, #0
 8006d68:	2101      	movs	r1, #1
 8006d6a:	487e      	ldr	r0, [pc, #504]	; (8006f64 <mainTask+0x1f54>)
 8006d6c:	f001 fa2f 	bl	80081ce <HAL_GPIO_WritePin>
						  demoAsagiCalis=0;
 8006d70:	4b7d      	ldr	r3, [pc, #500]	; (8006f68 <mainTask+0x1f58>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
					  }

					  if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)
 8006d76:	2104      	movs	r1, #4
 8006d78:	4876      	ldr	r0, [pc, #472]	; (8006f54 <mainTask+0x1f44>)
 8006d7a:	f001 fa11 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10d      	bne.n	8006da0 <mainTask+0x1d90>
					  {

						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006d84:	2201      	movs	r2, #1
 8006d86:	2180      	movs	r1, #128	; 0x80
 8006d88:	4879      	ldr	r0, [pc, #484]	; (8006f70 <mainTask+0x1f60>)
 8006d8a:	f001 fa20 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2120      	movs	r1, #32
 8006d92:	4877      	ldr	r0, [pc, #476]	; (8006f70 <mainTask+0x1f60>)
 8006d94:	f001 fa1b 	bl	80081ce <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006d98:	4b76      	ldr	r3, [pc, #472]	; (8006f74 <mainTask+0x1f64>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a76      	ldr	r2, [pc, #472]	; (8006f78 <mainTask+0x1f68>)
 8006d9e:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006da0:	4b74      	ldr	r3, [pc, #464]	; (8006f74 <mainTask+0x1f64>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b74      	ldr	r3, [pc, #464]	; (8006f78 <mainTask+0x1f68>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d909      	bls.n	8006dc2 <mainTask+0x1db2>
					  {
						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006dae:	2200      	movs	r2, #0
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	486f      	ldr	r0, [pc, #444]	; (8006f70 <mainTask+0x1f60>)
 8006db4:	f001 fa0b 	bl	80081ce <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006db8:	2200      	movs	r2, #0
 8006dba:	2120      	movs	r1, #32
 8006dbc:	486c      	ldr	r0, [pc, #432]	; (8006f70 <mainTask+0x1f60>)
 8006dbe:	f001 fa06 	bl	80081ce <HAL_GPIO_WritePin>
					  }

					  if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4863      	ldr	r0, [pc, #396]	; (8006f54 <mainTask+0x1f44>)
 8006dc6:	f001 f9eb 	bl	80081a0 <HAL_GPIO_ReadPin>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d108      	bne.n	8006de2 <mainTask+0x1dd2>
					  {

						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2140      	movs	r1, #64	; 0x40
 8006dd4:	4866      	ldr	r0, [pc, #408]	; (8006f70 <mainTask+0x1f60>)
 8006dd6:	f001 f9fa 	bl	80081ce <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006dda:	4b66      	ldr	r3, [pc, #408]	; (8006f74 <mainTask+0x1f64>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a66      	ldr	r2, [pc, #408]	; (8006f78 <mainTask+0x1f68>)
 8006de0:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006de2:	4b64      	ldr	r3, [pc, #400]	; (8006f74 <mainTask+0x1f64>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b64      	ldr	r3, [pc, #400]	; (8006f78 <mainTask+0x1f68>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d904      	bls.n	8006dfa <mainTask+0x1dea>
					  {
						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2140      	movs	r1, #64	; 0x40
 8006df4:	485e      	ldr	r0, [pc, #376]	; (8006f70 <mainTask+0x1f60>)
 8006df6:	f001 f9ea 	bl	80081ce <HAL_GPIO_WritePin>

					  }
					  if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)){
 8006dfa:	4b58      	ldr	r3, [pc, #352]	; (8006f5c <mainTask+0x1f4c>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d058      	beq.n	8006eb4 <mainTask+0x1ea4>
 8006e02:	4b5a      	ldr	r3, [pc, #360]	; (8006f6c <mainTask+0x1f5c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d054      	beq.n	8006eb4 <mainTask+0x1ea4>
						  //mesajYazildi=0;
							calismaSayisi1=calismaSayisi1+1;
 8006e0a:	4b5c      	ldr	r3, [pc, #368]	; (8006f7c <mainTask+0x1f6c>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	4b5a      	ldr	r3, [pc, #360]	; (8006f7c <mainTask+0x1f6c>)
 8006e14:	701a      	strb	r2, [r3, #0]
							if(calismaSayisi1>9){
 8006e16:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <mainTask+0x1f6c>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d908      	bls.n	8006e30 <mainTask+0x1e20>
								calismaSayisi1=0;
 8006e1e:	4b57      	ldr	r3, [pc, #348]	; (8006f7c <mainTask+0x1f6c>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
								calismaSayisi10=calismaSayisi10+1;
 8006e24:	4b56      	ldr	r3, [pc, #344]	; (8006f80 <mainTask+0x1f70>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	4b54      	ldr	r3, [pc, #336]	; (8006f80 <mainTask+0x1f70>)
 8006e2e:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi10>9){
 8006e30:	4b53      	ldr	r3, [pc, #332]	; (8006f80 <mainTask+0x1f70>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d908      	bls.n	8006e4a <mainTask+0x1e3a>
								calismaSayisi10=0;
 8006e38:	4b51      	ldr	r3, [pc, #324]	; (8006f80 <mainTask+0x1f70>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
								calismaSayisi100=calismaSayisi100+1;
 8006e3e:	4b51      	ldr	r3, [pc, #324]	; (8006f84 <mainTask+0x1f74>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	4b4f      	ldr	r3, [pc, #316]	; (8006f84 <mainTask+0x1f74>)
 8006e48:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi100>9){
 8006e4a:	4b4e      	ldr	r3, [pc, #312]	; (8006f84 <mainTask+0x1f74>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d908      	bls.n	8006e64 <mainTask+0x1e54>
								calismaSayisi100=0;
 8006e52:	4b4c      	ldr	r3, [pc, #304]	; (8006f84 <mainTask+0x1f74>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
								calismaSayisi1000=calismaSayisi1000+1;
 8006e58:	4b4b      	ldr	r3, [pc, #300]	; (8006f88 <mainTask+0x1f78>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	4b49      	ldr	r3, [pc, #292]	; (8006f88 <mainTask+0x1f78>)
 8006e62:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi1000>9){
 8006e64:	4b48      	ldr	r3, [pc, #288]	; (8006f88 <mainTask+0x1f78>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d908      	bls.n	8006e7e <mainTask+0x1e6e>
								calismaSayisi1000=0;
 8006e6c:	4b46      	ldr	r3, [pc, #280]	; (8006f88 <mainTask+0x1f78>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
								calismaSayisi10000=calismaSayisi10000+1;
 8006e72:	4b46      	ldr	r3, [pc, #280]	; (8006f8c <mainTask+0x1f7c>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b44      	ldr	r3, [pc, #272]	; (8006f8c <mainTask+0x1f7c>)
 8006e7c:	701a      	strb	r2, [r3, #0]
							}
							eepromData[32]=calismaSayisi10000;
 8006e7e:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <mainTask+0x1f7c>)
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	4b43      	ldr	r3, [pc, #268]	; (8006f90 <mainTask+0x1f80>)
 8006e84:	f883 2020 	strb.w	r2, [r3, #32]
							eepromData[31]=calismaSayisi1000;
 8006e88:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <mainTask+0x1f78>)
 8006e8a:	781a      	ldrb	r2, [r3, #0]
 8006e8c:	4b40      	ldr	r3, [pc, #256]	; (8006f90 <mainTask+0x1f80>)
 8006e8e:	77da      	strb	r2, [r3, #31]
							eepromData[30]=calismaSayisi100;
 8006e90:	4b3c      	ldr	r3, [pc, #240]	; (8006f84 <mainTask+0x1f74>)
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <mainTask+0x1f80>)
 8006e96:	779a      	strb	r2, [r3, #30]
							eepromData[29]=calismaSayisi10;
 8006e98:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <mainTask+0x1f70>)
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	4b3c      	ldr	r3, [pc, #240]	; (8006f90 <mainTask+0x1f80>)
 8006e9e:	775a      	strb	r2, [r3, #29]
							eepromData[28]=calismaSayisi1;
 8006ea0:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <mainTask+0x1f6c>)
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <mainTask+0x1f80>)
 8006ea6:	771a      	strb	r2, [r3, #28]
							hafizaYaz=1;
 8006ea8:	4b3a      	ldr	r3, [pc, #232]	; (8006f94 <mainTask+0x1f84>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
		   				  //mesajYazildi=0;
						  demoCalismaSayisiYar=0;
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <mainTask+0x1f5c>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
					  }
					  if (menuGiris==0){
 8006eb4:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <mainTask+0x1f88>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 80b4 	bne.w	8007026 <mainTask+0x2016>
						  lcd_print(2,1,"Cycle      ");
 8006ebe:	4a37      	ldr	r2, [pc, #220]	; (8006f9c <mainTask+0x1f8c>)
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	2002      	movs	r0, #2
 8006ec4:	f7f9 fa94 	bl	80003f0 <lcd_print>
						  lcd_print(1,1, "    DEMO MODE   ");
 8006ec8:	4a35      	ldr	r2, [pc, #212]	; (8006fa0 <mainTask+0x1f90>)
 8006eca:	2101      	movs	r1, #1
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f7f9 fa8f 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10000, snum, 10);
 8006ed2:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <mainTask+0x1f7c>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4932      	ldr	r1, [pc, #200]	; (8006fa4 <mainTask+0x1f94>)
 8006eda:	4618      	mov	r0, r3
 8006edc:	f004 fea0 	bl	800bc20 <itoa>
						    lcd_print(2,12,snum);
 8006ee0:	4a30      	ldr	r2, [pc, #192]	; (8006fa4 <mainTask+0x1f94>)
 8006ee2:	210c      	movs	r1, #12
 8006ee4:	2002      	movs	r0, #2
 8006ee6:	f7f9 fa83 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1000, snum, 10);
 8006eea:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <mainTask+0x1f78>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	220a      	movs	r2, #10
 8006ef0:	492c      	ldr	r1, [pc, #176]	; (8006fa4 <mainTask+0x1f94>)
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 fe94 	bl	800bc20 <itoa>
						    lcd_print(2,13,snum);
 8006ef8:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <mainTask+0x1f94>)
 8006efa:	210d      	movs	r1, #13
 8006efc:	2002      	movs	r0, #2
 8006efe:	f7f9 fa77 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi100, snum, 10);
 8006f02:	4b20      	ldr	r3, [pc, #128]	; (8006f84 <mainTask+0x1f74>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	220a      	movs	r2, #10
 8006f08:	4926      	ldr	r1, [pc, #152]	; (8006fa4 <mainTask+0x1f94>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f004 fe88 	bl	800bc20 <itoa>
						    lcd_print(2,14,snum);
 8006f10:	4a24      	ldr	r2, [pc, #144]	; (8006fa4 <mainTask+0x1f94>)
 8006f12:	210e      	movs	r1, #14
 8006f14:	2002      	movs	r0, #2
 8006f16:	f7f9 fa6b 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10, snum, 10);
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <mainTask+0x1f70>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	220a      	movs	r2, #10
 8006f20:	4920      	ldr	r1, [pc, #128]	; (8006fa4 <mainTask+0x1f94>)
 8006f22:	4618      	mov	r0, r3
 8006f24:	f004 fe7c 	bl	800bc20 <itoa>
						    lcd_print(2,15,snum);
 8006f28:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <mainTask+0x1f94>)
 8006f2a:	210f      	movs	r1, #15
 8006f2c:	2002      	movs	r0, #2
 8006f2e:	f7f9 fa5f 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1, snum, 10);
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <mainTask+0x1f6c>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	220a      	movs	r2, #10
 8006f38:	491a      	ldr	r1, [pc, #104]	; (8006fa4 <mainTask+0x1f94>)
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f004 fe70 	bl	800bc20 <itoa>
						    lcd_print(2,16,snum);
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <mainTask+0x1f94>)
 8006f42:	2110      	movs	r1, #16
 8006f44:	2002      	movs	r0, #2
 8006f46:	f7f9 fa53 	bl	80003f0 <lcd_print>
						  mesajYazildi=1;
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <mainTask+0x1f98>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
					  if (menuGiris==0){
 8006f50:	e069      	b.n	8007026 <mainTask+0x2016>
 8006f52:	bf00      	nop
 8006f54:	40011000 	.word	0x40011000
 8006f58:	20000ca6 	.word	0x20000ca6
 8006f5c:	20000ca3 	.word	0x20000ca3
 8006f60:	20000ca5 	.word	0x20000ca5
 8006f64:	40010c00 	.word	0x40010c00
 8006f68:	20000ca4 	.word	0x20000ca4
 8006f6c:	20000c89 	.word	0x20000c89
 8006f70:	40010800 	.word	0x40010800
 8006f74:	20000c2c 	.word	0x20000c2c
 8006f78:	20000c3c 	.word	0x20000c3c
 8006f7c:	20000c49 	.word	0x20000c49
 8006f80:	20000c4a 	.word	0x20000c4a
 8006f84:	20000910 	.word	0x20000910
 8006f88:	20000911 	.word	0x20000911
 8006f8c:	20000c4b 	.word	0x20000c4b
 8006f90:	20000be4 	.word	0x20000be4
 8006f94:	20000c77 	.word	0x20000c77
 8006f98:	20000c69 	.word	0x20000c69
 8006f9c:	0800cab8 	.word	0x0800cab8
 8006fa0:	0800cac4 	.word	0x0800cac4
 8006fa4:	20000c24 	.word	0x20000c24
 8006fa8:	20000c7f 	.word	0x20000c7f
				  }
		    /* USER CODE END WHILE */

		    /* USER CODE BEGIN 3 */

				  else if(demoMode==1 || menuGiris==1)
 8006fac:	4b1f      	ldr	r3, [pc, #124]	; (800702c <mainTask+0x201c>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d004      	beq.n	8006fbe <mainTask+0x1fae>
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <mainTask+0x2020>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	f47e a82d 	bne.w	8005018 <mainTask+0x8>
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc4:	481b      	ldr	r0, [pc, #108]	; (8007034 <mainTask+0x2024>)
 8006fc6:	f001 f902 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fd0:	4818      	ldr	r0, [pc, #96]	; (8007034 <mainTask+0x2024>)
 8006fd2:	f001 f8fc 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4816      	ldr	r0, [pc, #88]	; (8007034 <mainTask+0x2024>)
 8006fdc:	f001 f8f7 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	4813      	ldr	r0, [pc, #76]	; (8007034 <mainTask+0x2024>)
 8006fe6:	f001 f8f2 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006fea:	2200      	movs	r2, #0
 8006fec:	2101      	movs	r1, #1
 8006fee:	4811      	ldr	r0, [pc, #68]	; (8007034 <mainTask+0x2024>)
 8006ff0:	f001 f8ed 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2120      	movs	r1, #32
 8006ff8:	480f      	ldr	r0, [pc, #60]	; (8007038 <mainTask+0x2028>)
 8006ffa:	f001 f8e8 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ffe:	2200      	movs	r2, #0
 8007000:	2110      	movs	r1, #16
 8007002:	480d      	ldr	r0, [pc, #52]	; (8007038 <mainTask+0x2028>)
 8007004:	f001 f8e3 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	480b      	ldr	r0, [pc, #44]	; (800703c <mainTask+0x202c>)
 800700e:	f001 f8de 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007012:	2200      	movs	r2, #0
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	4809      	ldr	r0, [pc, #36]	; (800703c <mainTask+0x202c>)
 8007018:	f001 f8d9 	bl	80081ce <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800701c:	2200      	movs	r2, #0
 800701e:	2120      	movs	r1, #32
 8007020:	4806      	ldr	r0, [pc, #24]	; (800703c <mainTask+0x202c>)
 8007022:	f001 f8d4 	bl	80081ce <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8007026:	f7fd bff7 	b.w	8005018 <mainTask+0x8>
 800702a:	bf00      	nop
 800702c:	20000c6a 	.word	0x20000c6a
 8007030:	20000c69 	.word	0x20000c69
 8007034:	40010c00 	.word	0x40010c00
 8007038:	40011000 	.word	0x40011000
 800703c:	40010800 	.word	0x40010800

08007040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b090      	sub	sp, #64	; 0x40
 8007044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007046:	f107 0318 	add.w	r3, r7, #24
 800704a:	2228      	movs	r2, #40	; 0x28
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f004 fede 	bl	800be10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	605a      	str	r2, [r3, #4]
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	60da      	str	r2, [r3, #12]
 8007060:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007062:	2301      	movs	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800706a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800706c:	2300      	movs	r3, #0
 800706e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007070:	2301      	movs	r3, #1
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007074:	2302      	movs	r3, #2
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800707e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007084:	f107 0318 	add.w	r3, r7, #24
 8007088:	4618      	mov	r0, r3
 800708a:	f002 fa99 	bl	80095c0 <HAL_RCC_OscConfig>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007094:	f000 f9aa 	bl	80073ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007098:	230f      	movs	r3, #15
 800709a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800709c:	2302      	movs	r3, #2
 800709e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80070a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 fd06 	bl	8009ac4 <HAL_RCC_ClockConfig>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80070be:	f000 f995 	bl	80073ec <Error_Handler>
  }
}
 80070c2:	bf00      	nop
 80070c4:	3740      	adds	r7, #64	; 0x40
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80070d0:	4b16      	ldr	r3, [pc, #88]	; (800712c <MX_CAN_Init+0x60>)
 80070d2:	4a17      	ldr	r2, [pc, #92]	; (8007130 <MX_CAN_Init+0x64>)
 80070d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80070d6:	4b15      	ldr	r3, [pc, #84]	; (800712c <MX_CAN_Init+0x60>)
 80070d8:	2210      	movs	r2, #16
 80070da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <MX_CAN_Init+0x60>)
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <MX_CAN_Init+0x60>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80070e8:	4b10      	ldr	r3, [pc, #64]	; (800712c <MX_CAN_Init+0x60>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80070ee:	4b0f      	ldr	r3, [pc, #60]	; (800712c <MX_CAN_Init+0x60>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <MX_CAN_Init+0x60>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <MX_CAN_Init+0x60>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <MX_CAN_Init+0x60>)
 8007102:	2200      	movs	r2, #0
 8007104:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <MX_CAN_Init+0x60>)
 8007108:	2200      	movs	r2, #0
 800710a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <MX_CAN_Init+0x60>)
 800710e:	2200      	movs	r2, #0
 8007110:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <MX_CAN_Init+0x60>)
 8007114:	2200      	movs	r2, #0
 8007116:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007118:	4804      	ldr	r0, [pc, #16]	; (800712c <MX_CAN_Init+0x60>)
 800711a:	f000 fbd7 	bl	80078cc <HAL_CAN_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007124:	f000 f962 	bl	80073ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007128:	bf00      	nop
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000de0 	.word	0x20000de0
 8007130:	40006400 	.word	0x40006400

08007134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <MX_I2C1_Init+0x50>)
 800713a:	4a13      	ldr	r2, [pc, #76]	; (8007188 <MX_I2C1_Init+0x54>)
 800713c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <MX_I2C1_Init+0x50>)
 8007140:	4a12      	ldr	r2, [pc, #72]	; (800718c <MX_I2C1_Init+0x58>)
 8007142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <MX_I2C1_Init+0x50>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <MX_I2C1_Init+0x50>)
 800714c:	2200      	movs	r2, #0
 800714e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <MX_I2C1_Init+0x50>)
 8007152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <MX_I2C1_Init+0x50>)
 800715a:	2200      	movs	r2, #0
 800715c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <MX_I2C1_Init+0x50>)
 8007160:	2200      	movs	r2, #0
 8007162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007164:	4b07      	ldr	r3, [pc, #28]	; (8007184 <MX_I2C1_Init+0x50>)
 8007166:	2200      	movs	r2, #0
 8007168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <MX_I2C1_Init+0x50>)
 800716c:	2200      	movs	r2, #0
 800716e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007170:	4804      	ldr	r0, [pc, #16]	; (8007184 <MX_I2C1_Init+0x50>)
 8007172:	f001 f85d 	bl	8008230 <HAL_I2C_Init>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800717c:	f000 f936 	bl	80073ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007180:	bf00      	nop
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000e08 	.word	0x20000e08
 8007188:	40005400 	.word	0x40005400
 800718c:	00061a80 	.word	0x00061a80

08007190 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	609a      	str	r2, [r3, #8]
 80071a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071a4:	463b      	mov	r3, r7
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <MX_TIM1_Init+0x9c>)
 80071ae:	4a20      	ldr	r2, [pc, #128]	; (8007230 <MX_TIM1_Init+0xa0>)
 80071b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80071b2:	4b1e      	ldr	r3, [pc, #120]	; (800722c <MX_TIM1_Init+0x9c>)
 80071b4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80071b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071ba:	4b1c      	ldr	r3, [pc, #112]	; (800722c <MX_TIM1_Init+0x9c>)
 80071bc:	2200      	movs	r2, #0
 80071be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <MX_TIM1_Init+0x9c>)
 80071c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80071c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071c8:	4b18      	ldr	r3, [pc, #96]	; (800722c <MX_TIM1_Init+0x9c>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <MX_TIM1_Init+0x9c>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <MX_TIM1_Init+0x9c>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80071da:	4814      	ldr	r0, [pc, #80]	; (800722c <MX_TIM1_Init+0x9c>)
 80071dc:	f002 fe0a 	bl	8009df4 <HAL_TIM_Base_Init>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80071e6:	f000 f901 	bl	80073ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80071f0:	f107 0308 	add.w	r3, r7, #8
 80071f4:	4619      	mov	r1, r3
 80071f6:	480d      	ldr	r0, [pc, #52]	; (800722c <MX_TIM1_Init+0x9c>)
 80071f8:	f002 ffb4 	bl	800a164 <HAL_TIM_ConfigClockSource>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007202:	f000 f8f3 	bl	80073ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007206:	2300      	movs	r3, #0
 8007208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800720e:	463b      	mov	r3, r7
 8007210:	4619      	mov	r1, r3
 8007212:	4806      	ldr	r0, [pc, #24]	; (800722c <MX_TIM1_Init+0x9c>)
 8007214:	f003 f99e 	bl	800a554 <HAL_TIMEx_MasterConfigSynchronization>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800721e:	f000 f8e5 	bl	80073ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007222:	bf00      	nop
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000ea0 	.word	0x20000ea0
 8007230:	40012c00 	.word	0x40012c00

08007234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 800723a:	4a12      	ldr	r2, [pc, #72]	; (8007284 <MX_USART1_UART_Init+0x50>)
 800723c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800723e:	4b10      	ldr	r3, [pc, #64]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 8007240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007246:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 8007248:	2200      	movs	r2, #0
 800724a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 800724e:	2200      	movs	r2, #0
 8007250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 8007254:	2200      	movs	r2, #0
 8007256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 800725a:	220c      	movs	r2, #12
 800725c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 8007260:	2200      	movs	r2, #0
 8007262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 8007266:	2200      	movs	r2, #0
 8007268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <MX_USART1_UART_Init+0x4c>)
 800726c:	f003 f9f0 	bl	800a650 <HAL_UART_Init>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007276:	f000 f8b9 	bl	80073ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000e5c 	.word	0x20000e5c
 8007284:	40013800 	.word	0x40013800

08007288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800728e:	f107 0310 	add.w	r3, r7, #16
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800729c:	4b4b      	ldr	r3, [pc, #300]	; (80073cc <MX_GPIO_Init+0x144>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	4a4a      	ldr	r2, [pc, #296]	; (80073cc <MX_GPIO_Init+0x144>)
 80072a2:	f043 0310 	orr.w	r3, r3, #16
 80072a6:	6193      	str	r3, [r2, #24]
 80072a8:	4b48      	ldr	r3, [pc, #288]	; (80073cc <MX_GPIO_Init+0x144>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072b4:	4b45      	ldr	r3, [pc, #276]	; (80073cc <MX_GPIO_Init+0x144>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4a44      	ldr	r2, [pc, #272]	; (80073cc <MX_GPIO_Init+0x144>)
 80072ba:	f043 0320 	orr.w	r3, r3, #32
 80072be:	6193      	str	r3, [r2, #24]
 80072c0:	4b42      	ldr	r3, [pc, #264]	; (80073cc <MX_GPIO_Init+0x144>)
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072cc:	4b3f      	ldr	r3, [pc, #252]	; (80073cc <MX_GPIO_Init+0x144>)
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	4a3e      	ldr	r2, [pc, #248]	; (80073cc <MX_GPIO_Init+0x144>)
 80072d2:	f043 0304 	orr.w	r3, r3, #4
 80072d6:	6193      	str	r3, [r2, #24]
 80072d8:	4b3c      	ldr	r3, [pc, #240]	; (80073cc <MX_GPIO_Init+0x144>)
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e4:	4b39      	ldr	r3, [pc, #228]	; (80073cc <MX_GPIO_Init+0x144>)
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	4a38      	ldr	r2, [pc, #224]	; (80073cc <MX_GPIO_Init+0x144>)
 80072ea:	f043 0308 	orr.w	r3, r3, #8
 80072ee:	6193      	str	r3, [r2, #24]
 80072f0:	4b36      	ldr	r3, [pc, #216]	; (80073cc <MX_GPIO_Init+0x144>)
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80072fc:	2200      	movs	r2, #0
 80072fe:	21f0      	movs	r1, #240	; 0xf0
 8007300:	4833      	ldr	r0, [pc, #204]	; (80073d0 <MX_GPIO_Init+0x148>)
 8007302:	f000 ff64 	bl	80081ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007306:	2200      	movs	r2, #0
 8007308:	f241 0130 	movw	r1, #4144	; 0x1030
 800730c:	4831      	ldr	r0, [pc, #196]	; (80073d4 <MX_GPIO_Init+0x14c>)
 800730e:	f000 ff5e 	bl	80081ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007312:	2200      	movs	r2, #0
 8007314:	f640 4107 	movw	r1, #3079	; 0xc07
 8007318:	482f      	ldr	r0, [pc, #188]	; (80073d8 <MX_GPIO_Init+0x150>)
 800731a:	f000 ff58 	bl	80081ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800731e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007322:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800732c:	f107 0310 	add.w	r3, r7, #16
 8007330:	4619      	mov	r1, r3
 8007332:	4828      	ldr	r0, [pc, #160]	; (80073d4 <MX_GPIO_Init+0x14c>)
 8007334:	f000 fcd4 	bl	8007ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007338:	f248 130f 	movw	r3, #33039	; 0x810f
 800733c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007346:	f107 0310 	add.w	r3, r7, #16
 800734a:	4619      	mov	r1, r3
 800734c:	4820      	ldr	r0, [pc, #128]	; (80073d0 <MX_GPIO_Init+0x148>)
 800734e:	f000 fcc7 	bl	8007ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007352:	23f0      	movs	r3, #240	; 0xf0
 8007354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007356:	2301      	movs	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800735e:	2302      	movs	r3, #2
 8007360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007362:	f107 0310 	add.w	r3, r7, #16
 8007366:	4619      	mov	r1, r3
 8007368:	4819      	ldr	r0, [pc, #100]	; (80073d0 <MX_GPIO_Init+0x148>)
 800736a:	f000 fcb9 	bl	8007ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800736e:	f241 0330 	movw	r3, #4144	; 0x1030
 8007372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007374:	2301      	movs	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737c:	2302      	movs	r3, #2
 800737e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007380:	f107 0310 	add.w	r3, r7, #16
 8007384:	4619      	mov	r1, r3
 8007386:	4813      	ldr	r0, [pc, #76]	; (80073d4 <MX_GPIO_Init+0x14c>)
 8007388:	f000 fcaa 	bl	8007ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800738c:	f640 4307 	movw	r3, #3079	; 0xc07
 8007390:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007392:	2301      	movs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739a:	2302      	movs	r3, #2
 800739c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	4619      	mov	r1, r3
 80073a4:	480c      	ldr	r0, [pc, #48]	; (80073d8 <MX_GPIO_Init+0x150>)
 80073a6:	f000 fc9b 	bl	8007ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80073aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80073ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b8:	f107 0310 	add.w	r3, r7, #16
 80073bc:	4619      	mov	r1, r3
 80073be:	4806      	ldr	r0, [pc, #24]	; (80073d8 <MX_GPIO_Init+0x150>)
 80073c0:	f000 fc8e 	bl	8007ce0 <HAL_GPIO_Init>

}
 80073c4:	bf00      	nop
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40010800 	.word	0x40010800
 80073d4:	40011000 	.word	0x40011000
 80073d8:	40010c00 	.word	0x40010c00

080073dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80073e4:	2001      	movs	r0, #1
 80073e6:	f003 fa79 	bl	800a8dc <osDelay>
 80073ea:	e7fb      	b.n	80073e4 <StartDefaultTask+0x8>

080073ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80073f0:	bf00      	nop
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80073fe:	4b18      	ldr	r3, [pc, #96]	; (8007460 <HAL_MspInit+0x68>)
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <HAL_MspInit+0x68>)
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	6193      	str	r3, [r2, #24]
 800740a:	4b15      	ldr	r3, [pc, #84]	; (8007460 <HAL_MspInit+0x68>)
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007416:	4b12      	ldr	r3, [pc, #72]	; (8007460 <HAL_MspInit+0x68>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	4a11      	ldr	r2, [pc, #68]	; (8007460 <HAL_MspInit+0x68>)
 800741c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007420:	61d3      	str	r3, [r2, #28]
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <HAL_MspInit+0x68>)
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	210f      	movs	r1, #15
 8007432:	f06f 0001 	mvn.w	r0, #1
 8007436:	f000 fc1c 	bl	8007c72 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800743a:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <HAL_MspInit+0x6c>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	4a04      	ldr	r2, [pc, #16]	; (8007464 <HAL_MspInit+0x6c>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40021000 	.word	0x40021000
 8007464:	40010000 	.word	0x40010000

08007468 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007470:	f107 0310 	add.w	r3, r7, #16
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1c      	ldr	r2, [pc, #112]	; (80074f4 <HAL_CAN_MspInit+0x8c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d131      	bne.n	80074ec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007488:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 800748e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007492:	61d3      	str	r3, [r2, #28]
 8007494:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a0:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 80074a6:	f043 0304 	orr.w	r3, r3, #4
 80074aa:	6193      	str	r3, [r2, #24]
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_CAN_MspInit+0x90>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80074b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c6:	f107 0310 	add.w	r3, r7, #16
 80074ca:	4619      	mov	r1, r3
 80074cc:	480b      	ldr	r0, [pc, #44]	; (80074fc <HAL_CAN_MspInit+0x94>)
 80074ce:	f000 fc07 	bl	8007ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d8:	2302      	movs	r3, #2
 80074da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074dc:	2303      	movs	r3, #3
 80074de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	4619      	mov	r1, r3
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <HAL_CAN_MspInit+0x94>)
 80074e8:	f000 fbfa 	bl	8007ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80074ec:	bf00      	nop
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40006400 	.word	0x40006400
 80074f8:	40021000 	.word	0x40021000
 80074fc:	40010800 	.word	0x40010800

08007500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007508:	f107 0310 	add.w	r3, r7, #16
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a15      	ldr	r2, [pc, #84]	; (8007570 <HAL_I2C_MspInit+0x70>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d123      	bne.n	8007568 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <HAL_I2C_MspInit+0x74>)
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <HAL_I2C_MspInit+0x74>)
 8007526:	f043 0308 	orr.w	r3, r3, #8
 800752a:	6193      	str	r3, [r2, #24]
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <HAL_I2C_MspInit+0x74>)
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007538:	23c0      	movs	r3, #192	; 0xc0
 800753a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800753c:	2312      	movs	r3, #18
 800753e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007540:	2303      	movs	r3, #3
 8007542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007544:	f107 0310 	add.w	r3, r7, #16
 8007548:	4619      	mov	r1, r3
 800754a:	480b      	ldr	r0, [pc, #44]	; (8007578 <HAL_I2C_MspInit+0x78>)
 800754c:	f000 fbc8 	bl	8007ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <HAL_I2C_MspInit+0x74>)
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4a07      	ldr	r2, [pc, #28]	; (8007574 <HAL_I2C_MspInit+0x74>)
 8007556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800755a:	61d3      	str	r3, [r2, #28]
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <HAL_I2C_MspInit+0x74>)
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007568:	bf00      	nop
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40005400 	.word	0x40005400
 8007574:	40021000 	.word	0x40021000
 8007578:	40010c00 	.word	0x40010c00

0800757c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <HAL_I2C_MspDeInit+0x38>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10d      	bne.n	80075aa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <HAL_I2C_MspDeInit+0x3c>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <HAL_I2C_MspDeInit+0x3c>)
 8007594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007598:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800759a:	2140      	movs	r1, #64	; 0x40
 800759c:	4807      	ldr	r0, [pc, #28]	; (80075bc <HAL_I2C_MspDeInit+0x40>)
 800759e:	f000 fd33 	bl	8008008 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	4805      	ldr	r0, [pc, #20]	; (80075bc <HAL_I2C_MspDeInit+0x40>)
 80075a6:	f000 fd2f 	bl	8008008 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40005400 	.word	0x40005400
 80075b8:	40021000 	.word	0x40021000
 80075bc:	40010c00 	.word	0x40010c00

080075c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <HAL_TIM_Base_MspInit+0x44>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d113      	bne.n	80075fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075d2:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <HAL_TIM_Base_MspInit+0x48>)
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <HAL_TIM_Base_MspInit+0x48>)
 80075d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075dc:	6193      	str	r3, [r2, #24]
 80075de:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <HAL_TIM_Base_MspInit+0x48>)
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80075ea:	2200      	movs	r2, #0
 80075ec:	2105      	movs	r1, #5
 80075ee:	2019      	movs	r0, #25
 80075f0:	f000 fb3f 	bl	8007c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80075f4:	2019      	movs	r0, #25
 80075f6:	f000 fb58 	bl	8007caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40021000 	.word	0x40021000

0800760c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <HAL_UART_MspInit+0x8c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d131      	bne.n	8007690 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800762c:	4b1b      	ldr	r3, [pc, #108]	; (800769c <HAL_UART_MspInit+0x90>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4a1a      	ldr	r2, [pc, #104]	; (800769c <HAL_UART_MspInit+0x90>)
 8007632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007636:	6193      	str	r3, [r2, #24]
 8007638:	4b18      	ldr	r3, [pc, #96]	; (800769c <HAL_UART_MspInit+0x90>)
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007644:	4b15      	ldr	r3, [pc, #84]	; (800769c <HAL_UART_MspInit+0x90>)
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	4a14      	ldr	r2, [pc, #80]	; (800769c <HAL_UART_MspInit+0x90>)
 800764a:	f043 0304 	orr.w	r3, r3, #4
 800764e:	6193      	str	r3, [r2, #24]
 8007650:	4b12      	ldr	r3, [pc, #72]	; (800769c <HAL_UART_MspInit+0x90>)
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800765c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007662:	2302      	movs	r3, #2
 8007664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007666:	2303      	movs	r3, #3
 8007668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766a:	f107 0310 	add.w	r3, r7, #16
 800766e:	4619      	mov	r1, r3
 8007670:	480b      	ldr	r0, [pc, #44]	; (80076a0 <HAL_UART_MspInit+0x94>)
 8007672:	f000 fb35 	bl	8007ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	4619      	mov	r1, r3
 800768a:	4805      	ldr	r0, [pc, #20]	; (80076a0 <HAL_UART_MspInit+0x94>)
 800768c:	f000 fb28 	bl	8007ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007690:	bf00      	nop
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40013800 	.word	0x40013800
 800769c:	40021000 	.word	0x40021000
 80076a0:	40010800 	.word	0x40010800

080076a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80076a8:	e7fe      	b.n	80076a8 <NMI_Handler+0x4>

080076aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076ae:	e7fe      	b.n	80076ae <HardFault_Handler+0x4>

080076b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076b4:	e7fe      	b.n	80076b4 <MemManage_Handler+0x4>

080076b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076ba:	e7fe      	b.n	80076ba <BusFault_Handler+0x4>

080076bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076c0:	e7fe      	b.n	80076c0 <UsageFault_Handler+0x4>

080076c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076c2:	b480      	push	{r7}
 80076c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076c6:	bf00      	nop
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076d2:	f000 f8bb 	bl	800784c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80076d6:	f003 fe7f 	bl	800b3d8 <xTaskGetSchedulerState>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80076e0:	f004 f86a 	bl	800b7b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076e4:	bf00      	nop
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80076ec:	4802      	ldr	r0, [pc, #8]	; (80076f8 <TIM1_UP_IRQHandler+0x10>)
 80076ee:	f002 fc31 	bl	8009f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80076f2:	bf00      	nop
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000ea0 	.word	0x20000ea0

080076fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007704:	4a14      	ldr	r2, [pc, #80]	; (8007758 <_sbrk+0x5c>)
 8007706:	4b15      	ldr	r3, [pc, #84]	; (800775c <_sbrk+0x60>)
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <_sbrk+0x64>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <_sbrk+0x64>)
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <_sbrk+0x68>)
 800771c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800771e:	4b10      	ldr	r3, [pc, #64]	; (8007760 <_sbrk+0x64>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4413      	add	r3, r2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	429a      	cmp	r2, r3
 800772a:	d207      	bcs.n	800773c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800772c:	f004 fb88 	bl	800be40 <__errno>
 8007730:	4603      	mov	r3, r0
 8007732:	220c      	movs	r2, #12
 8007734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
 800773a:	e009      	b.n	8007750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800773c:	4b08      	ldr	r3, [pc, #32]	; (8007760 <_sbrk+0x64>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007742:	4b07      	ldr	r3, [pc, #28]	; (8007760 <_sbrk+0x64>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	4a05      	ldr	r2, [pc, #20]	; (8007760 <_sbrk+0x64>)
 800774c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2000c000 	.word	0x2000c000
 800775c:	00000400 	.word	0x00000400
 8007760:	20000eec 	.word	0x20000eec
 8007764:	20001d88 	.word	0x20001d88

08007768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007774:	480c      	ldr	r0, [pc, #48]	; (80077a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007776:	490d      	ldr	r1, [pc, #52]	; (80077ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007778:	4a0d      	ldr	r2, [pc, #52]	; (80077b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800777a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800777c:	e002      	b.n	8007784 <LoopCopyDataInit>

0800777e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800777e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007782:	3304      	adds	r3, #4

08007784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007788:	d3f9      	bcc.n	800777e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800778a:	4a0a      	ldr	r2, [pc, #40]	; (80077b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800778c:	4c0a      	ldr	r4, [pc, #40]	; (80077b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800778e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007790:	e001      	b.n	8007796 <LoopFillZerobss>

08007792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007794:	3204      	adds	r2, #4

08007796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007798:	d3fb      	bcc.n	8007792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800779a:	f7ff ffe5 	bl	8007768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800779e:	f004 fb55 	bl	800be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80077a2:	f7fd f811 	bl	80047c8 <main>
  bx lr
 80077a6:	4770      	bx	lr
  ldr r0, =_sdata
 80077a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80077ac:	20000974 	.word	0x20000974
  ldr r2, =_sidata
 80077b0:	0800cc8c 	.word	0x0800cc8c
  ldr r2, =_sbss
 80077b4:	20000974 	.word	0x20000974
  ldr r4, =_ebss
 80077b8:	20001d88 	.word	0x20001d88

080077bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80077bc:	e7fe      	b.n	80077bc <ADC1_2_IRQHandler>
	...

080077c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <HAL_Init+0x28>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <HAL_Init+0x28>)
 80077ca:	f043 0310 	orr.w	r3, r3, #16
 80077ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077d0:	2003      	movs	r0, #3
 80077d2:	f000 fa43 	bl	8007c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077d6:	200f      	movs	r0, #15
 80077d8:	f000 f808 	bl	80077ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077dc:	f7ff fe0c 	bl	80073f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40022000 	.word	0x40022000

080077ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077f4:	4b12      	ldr	r3, [pc, #72]	; (8007840 <HAL_InitTick+0x54>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4b12      	ldr	r3, [pc, #72]	; (8007844 <HAL_InitTick+0x58>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007802:	fbb3 f3f1 	udiv	r3, r3, r1
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fa5b 	bl	8007cc6 <HAL_SYSTICK_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e00e      	b.n	8007838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b0f      	cmp	r3, #15
 800781e:	d80a      	bhi.n	8007836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007820:	2200      	movs	r2, #0
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	f000 fa23 	bl	8007c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800782c:	4a06      	ldr	r2, [pc, #24]	; (8007848 <HAL_InitTick+0x5c>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e000      	b.n	8007838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000914 	.word	0x20000914
 8007844:	2000091c 	.word	0x2000091c
 8007848:	20000918 	.word	0x20000918

0800784c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007850:	4b05      	ldr	r3, [pc, #20]	; (8007868 <HAL_IncTick+0x1c>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <HAL_IncTick+0x20>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4413      	add	r3, r2
 800785c:	4a03      	ldr	r2, [pc, #12]	; (800786c <HAL_IncTick+0x20>)
 800785e:	6013      	str	r3, [r2, #0]
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr
 8007868:	2000091c 	.word	0x2000091c
 800786c:	20000ef0 	.word	0x20000ef0

08007870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  return uwTick;
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <HAL_GetTick+0x10>)
 8007876:	681b      	ldr	r3, [r3, #0]
}
 8007878:	4618      	mov	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr
 8007880:	20000ef0 	.word	0x20000ef0

08007884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800788c:	f7ff fff0 	bl	8007870 <HAL_GetTick>
 8007890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d005      	beq.n	80078aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <HAL_Delay+0x44>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80078aa:	bf00      	nop
 80078ac:	f7ff ffe0 	bl	8007870 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d8f7      	bhi.n	80078ac <HAL_Delay+0x28>
  {
  }
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2000091c 	.word	0x2000091c

080078cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0ed      	b.n	8007aba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fdbc 	bl	8007468 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007900:	f7ff ffb6 	bl	8007870 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007906:	e012      	b.n	800792e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007908:	f7ff ffb2 	bl	8007870 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b0a      	cmp	r3, #10
 8007914:	d90b      	bls.n	800792e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2205      	movs	r2, #5
 8007926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e0c5      	b.n	8007aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0e5      	beq.n	8007908 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0202 	bic.w	r2, r2, #2
 800794a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800794c:	f7ff ff90 	bl	8007870 <HAL_GetTick>
 8007950:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007952:	e012      	b.n	800797a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007954:	f7ff ff8c 	bl	8007870 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b0a      	cmp	r3, #10
 8007960:	d90b      	bls.n	800797a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2205      	movs	r2, #5
 8007972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e09f      	b.n	8007aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7e1b      	ldrb	r3, [r3, #24]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d108      	bne.n	80079a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e007      	b.n	80079b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7e5b      	ldrb	r3, [r3, #25]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d108      	bne.n	80079cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e007      	b.n	80079dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7e9b      	ldrb	r3, [r3, #26]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d108      	bne.n	80079f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0220 	orr.w	r2, r2, #32
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e007      	b.n	8007a06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0220 	bic.w	r2, r2, #32
 8007a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7edb      	ldrb	r3, [r3, #27]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d108      	bne.n	8007a20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0210 	bic.w	r2, r2, #16
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e007      	b.n	8007a30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0210 	orr.w	r2, r2, #16
 8007a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7f1b      	ldrb	r3, [r3, #28]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d108      	bne.n	8007a4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0208 	orr.w	r2, r2, #8
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	e007      	b.n	8007a5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0208 	bic.w	r2, r2, #8
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7f5b      	ldrb	r3, [r3, #29]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d108      	bne.n	8007a74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0204 	orr.w	r2, r2, #4
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e007      	b.n	8007a84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0204 	bic.w	r2, r2, #4
 8007a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	ea42 0103 	orr.w	r1, r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <__NVIC_SetPriorityGrouping>:
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <__NVIC_SetPriorityGrouping+0x44>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007af6:	4a04      	ldr	r2, [pc, #16]	; (8007b08 <__NVIC_SetPriorityGrouping+0x44>)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	60d3      	str	r3, [r2, #12]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000ed00 	.word	0xe000ed00

08007b0c <__NVIC_GetPriorityGrouping>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <__NVIC_GetPriorityGrouping+0x18>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	f003 0307 	and.w	r3, r3, #7
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <__NVIC_EnableIRQ>:
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	db0b      	blt.n	8007b52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f003 021f 	and.w	r2, r3, #31
 8007b40:	4906      	ldr	r1, [pc, #24]	; (8007b5c <__NVIC_EnableIRQ+0x34>)
 8007b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	2001      	movs	r0, #1
 8007b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr
 8007b5c:	e000e100 	.word	0xe000e100

08007b60 <__NVIC_SetPriority>:
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	db0a      	blt.n	8007b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	490c      	ldr	r1, [pc, #48]	; (8007bac <__NVIC_SetPriority+0x4c>)
 8007b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b7e:	0112      	lsls	r2, r2, #4
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	440b      	add	r3, r1
 8007b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b88:	e00a      	b.n	8007ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	4908      	ldr	r1, [pc, #32]	; (8007bb0 <__NVIC_SetPriority+0x50>)
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	3b04      	subs	r3, #4
 8007b98:	0112      	lsls	r2, r2, #4
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	761a      	strb	r2, [r3, #24]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	e000e100 	.word	0xe000e100
 8007bb0:	e000ed00 	.word	0xe000ed00

08007bb4 <NVIC_EncodePriority>:
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b089      	sub	sp, #36	; 0x24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f1c3 0307 	rsb	r3, r3, #7
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	bf28      	it	cs
 8007bd2:	2304      	movcs	r3, #4
 8007bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d902      	bls.n	8007be4 <NVIC_EncodePriority+0x30>
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	3b03      	subs	r3, #3
 8007be2:	e000      	b.n	8007be6 <NVIC_EncodePriority+0x32>
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	401a      	ands	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	fa01 f303 	lsl.w	r3, r1, r3
 8007c06:	43d9      	mvns	r1, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c0c:	4313      	orrs	r3, r2
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3724      	adds	r7, #36	; 0x24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c28:	d301      	bcc.n	8007c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e00f      	b.n	8007c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c2e:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <SysTick_Config+0x40>)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c36:	210f      	movs	r1, #15
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	f7ff ff90 	bl	8007b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <SysTick_Config+0x40>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c46:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <SysTick_Config+0x40>)
 8007c48:	2207      	movs	r2, #7
 8007c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	e000e010 	.word	0xe000e010

08007c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ff2d 	bl	8007ac4 <__NVIC_SetPriorityGrouping>
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c84:	f7ff ff42 	bl	8007b0c <__NVIC_GetPriorityGrouping>
 8007c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	6978      	ldr	r0, [r7, #20]
 8007c90:	f7ff ff90 	bl	8007bb4 <NVIC_EncodePriority>
 8007c94:	4602      	mov	r2, r0
 8007c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff ff5f 	bl	8007b60 <__NVIC_SetPriority>
}
 8007ca2:	bf00      	nop
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff ff35 	bl	8007b28 <__NVIC_EnableIRQ>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ffa2 	bl	8007c18 <SysTick_Config>
 8007cd4:	4603      	mov	r3, r0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b08b      	sub	sp, #44	; 0x2c
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007cea:	2300      	movs	r3, #0
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007cf2:	e179      	b.n	8007fe8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	4013      	ands	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	f040 8168 	bne.w	8007fe2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	4a96      	ldr	r2, [pc, #600]	; (8007f70 <HAL_GPIO_Init+0x290>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d05e      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
 8007d1c:	4a94      	ldr	r2, [pc, #592]	; (8007f70 <HAL_GPIO_Init+0x290>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d875      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d22:	4a94      	ldr	r2, [pc, #592]	; (8007f74 <HAL_GPIO_Init+0x294>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d058      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
 8007d28:	4a92      	ldr	r2, [pc, #584]	; (8007f74 <HAL_GPIO_Init+0x294>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d86f      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d2e:	4a92      	ldr	r2, [pc, #584]	; (8007f78 <HAL_GPIO_Init+0x298>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d052      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
 8007d34:	4a90      	ldr	r2, [pc, #576]	; (8007f78 <HAL_GPIO_Init+0x298>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d869      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d3a:	4a90      	ldr	r2, [pc, #576]	; (8007f7c <HAL_GPIO_Init+0x29c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d04c      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
 8007d40:	4a8e      	ldr	r2, [pc, #568]	; (8007f7c <HAL_GPIO_Init+0x29c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d863      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d46:	4a8e      	ldr	r2, [pc, #568]	; (8007f80 <HAL_GPIO_Init+0x2a0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d046      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
 8007d4c:	4a8c      	ldr	r2, [pc, #560]	; (8007f80 <HAL_GPIO_Init+0x2a0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d85d      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d52:	2b12      	cmp	r3, #18
 8007d54:	d82a      	bhi.n	8007dac <HAL_GPIO_Init+0xcc>
 8007d56:	2b12      	cmp	r3, #18
 8007d58:	d859      	bhi.n	8007e0e <HAL_GPIO_Init+0x12e>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <HAL_GPIO_Init+0x80>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007ddb 	.word	0x08007ddb
 8007d64:	08007db5 	.word	0x08007db5
 8007d68:	08007dc7 	.word	0x08007dc7
 8007d6c:	08007e09 	.word	0x08007e09
 8007d70:	08007e0f 	.word	0x08007e0f
 8007d74:	08007e0f 	.word	0x08007e0f
 8007d78:	08007e0f 	.word	0x08007e0f
 8007d7c:	08007e0f 	.word	0x08007e0f
 8007d80:	08007e0f 	.word	0x08007e0f
 8007d84:	08007e0f 	.word	0x08007e0f
 8007d88:	08007e0f 	.word	0x08007e0f
 8007d8c:	08007e0f 	.word	0x08007e0f
 8007d90:	08007e0f 	.word	0x08007e0f
 8007d94:	08007e0f 	.word	0x08007e0f
 8007d98:	08007e0f 	.word	0x08007e0f
 8007d9c:	08007e0f 	.word	0x08007e0f
 8007da0:	08007e0f 	.word	0x08007e0f
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	4a75      	ldr	r2, [pc, #468]	; (8007f84 <HAL_GPIO_Init+0x2a4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007db2:	e02c      	b.n	8007e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	623b      	str	r3, [r7, #32]
          break;
 8007dba:	e029      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	623b      	str	r3, [r7, #32]
          break;
 8007dc4:	e024      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	623b      	str	r3, [r7, #32]
          break;
 8007dce:	e01f      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	623b      	str	r3, [r7, #32]
          break;
 8007dd8:	e01a      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007de2:	2304      	movs	r3, #4
 8007de4:	623b      	str	r3, [r7, #32]
          break;
 8007de6:	e013      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d105      	bne.n	8007dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007df0:	2308      	movs	r3, #8
 8007df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	611a      	str	r2, [r3, #16]
          break;
 8007dfa:	e009      	b.n	8007e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	615a      	str	r2, [r3, #20]
          break;
 8007e06:	e003      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	623b      	str	r3, [r7, #32]
          break;
 8007e0c:	e000      	b.n	8007e10 <HAL_GPIO_Init+0x130>
          break;
 8007e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d801      	bhi.n	8007e1a <HAL_GPIO_Init+0x13a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	e001      	b.n	8007e1e <HAL_GPIO_Init+0x13e>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d802      	bhi.n	8007e2c <HAL_GPIO_Init+0x14c>
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	e002      	b.n	8007e32 <HAL_GPIO_Init+0x152>
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	3b08      	subs	r3, #8
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	210f      	movs	r1, #15
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e40:	43db      	mvns	r3, r3
 8007e42:	401a      	ands	r2, r3
 8007e44:	6a39      	ldr	r1, [r7, #32]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80c1 	beq.w	8007fe2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e60:	4b49      	ldr	r3, [pc, #292]	; (8007f88 <HAL_GPIO_Init+0x2a8>)
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	4a48      	ldr	r2, [pc, #288]	; (8007f88 <HAL_GPIO_Init+0x2a8>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	6193      	str	r3, [r2, #24]
 8007e6c:	4b46      	ldr	r3, [pc, #280]	; (8007f88 <HAL_GPIO_Init+0x2a8>)
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007e78:	4a44      	ldr	r2, [pc, #272]	; (8007f8c <HAL_GPIO_Init+0x2ac>)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	089b      	lsrs	r3, r3, #2
 8007e7e:	3302      	adds	r3, #2
 8007e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	220f      	movs	r2, #15
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	43db      	mvns	r3, r3
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a3c      	ldr	r2, [pc, #240]	; (8007f90 <HAL_GPIO_Init+0x2b0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d01f      	beq.n	8007ee4 <HAL_GPIO_Init+0x204>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a3b      	ldr	r2, [pc, #236]	; (8007f94 <HAL_GPIO_Init+0x2b4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d019      	beq.n	8007ee0 <HAL_GPIO_Init+0x200>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a3a      	ldr	r2, [pc, #232]	; (8007f98 <HAL_GPIO_Init+0x2b8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d013      	beq.n	8007edc <HAL_GPIO_Init+0x1fc>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a39      	ldr	r2, [pc, #228]	; (8007f9c <HAL_GPIO_Init+0x2bc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00d      	beq.n	8007ed8 <HAL_GPIO_Init+0x1f8>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a38      	ldr	r2, [pc, #224]	; (8007fa0 <HAL_GPIO_Init+0x2c0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <HAL_GPIO_Init+0x1f4>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a37      	ldr	r2, [pc, #220]	; (8007fa4 <HAL_GPIO_Init+0x2c4>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d101      	bne.n	8007ed0 <HAL_GPIO_Init+0x1f0>
 8007ecc:	2305      	movs	r3, #5
 8007ece:	e00a      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007ed0:	2306      	movs	r3, #6
 8007ed2:	e008      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	e006      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e004      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e002      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <HAL_GPIO_Init+0x206>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee8:	f002 0203 	and.w	r2, r2, #3
 8007eec:	0092      	lsls	r2, r2, #2
 8007eee:	4093      	lsls	r3, r2
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007ef6:	4925      	ldr	r1, [pc, #148]	; (8007f8c <HAL_GPIO_Init+0x2ac>)
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	089b      	lsrs	r3, r3, #2
 8007efc:	3302      	adds	r3, #2
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007f10:	4b25      	ldr	r3, [pc, #148]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4924      	ldr	r1, [pc, #144]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]
 8007f1c:	e006      	b.n	8007f2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007f1e:	4b22      	ldr	r3, [pc, #136]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	4920      	ldr	r1, [pc, #128]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007f38:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	491a      	ldr	r1, [pc, #104]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	604b      	str	r3, [r1, #4]
 8007f44:	e006      	b.n	8007f54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	4916      	ldr	r1, [pc, #88]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d025      	beq.n	8007fac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	4910      	ldr	r1, [pc, #64]	; (8007fa8 <HAL_GPIO_Init+0x2c8>)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	608b      	str	r3, [r1, #8]
 8007f6c:	e025      	b.n	8007fba <HAL_GPIO_Init+0x2da>
 8007f6e:	bf00      	nop
 8007f70:	10320000 	.word	0x10320000
 8007f74:	10310000 	.word	0x10310000
 8007f78:	10220000 	.word	0x10220000
 8007f7c:	10210000 	.word	0x10210000
 8007f80:	10120000 	.word	0x10120000
 8007f84:	10110000 	.word	0x10110000
 8007f88:	40021000 	.word	0x40021000
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40010800 	.word	0x40010800
 8007f94:	40010c00 	.word	0x40010c00
 8007f98:	40011000 	.word	0x40011000
 8007f9c:	40011400 	.word	0x40011400
 8007fa0:	40011800 	.word	0x40011800
 8007fa4:	40011c00 	.word	0x40011c00
 8007fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007fac:	4b15      	ldr	r3, [pc, #84]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	4913      	ldr	r1, [pc, #76]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007fc6:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	490e      	ldr	r1, [pc, #56]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60cb      	str	r3, [r1, #12]
 8007fd2:	e006      	b.n	8007fe2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	4909      	ldr	r1, [pc, #36]	; (8008004 <HAL_GPIO_Init+0x324>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f47f ae7e 	bne.w	8007cf4 <HAL_GPIO_Init+0x14>
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	372c      	adds	r7, #44	; 0x2c
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr
 8008004:	40010400 	.word	0x40010400

08008008 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008012:	2300      	movs	r3, #0
 8008014:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008016:	e0a6      	b.n	8008166 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008018:	2201      	movs	r2, #1
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	4013      	ands	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 8099 	beq.w	8008160 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800802e:	4a54      	ldr	r2, [pc, #336]	; (8008180 <HAL_GPIO_DeInit+0x178>)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	089b      	lsrs	r3, r3, #2
 8008034:	3302      	adds	r3, #2
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	220f      	movs	r2, #15
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4013      	ands	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a4c      	ldr	r2, [pc, #304]	; (8008184 <HAL_GPIO_DeInit+0x17c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d01f      	beq.n	8008098 <HAL_GPIO_DeInit+0x90>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a4b      	ldr	r2, [pc, #300]	; (8008188 <HAL_GPIO_DeInit+0x180>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d019      	beq.n	8008094 <HAL_GPIO_DeInit+0x8c>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a4a      	ldr	r2, [pc, #296]	; (800818c <HAL_GPIO_DeInit+0x184>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_GPIO_DeInit+0x88>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a49      	ldr	r2, [pc, #292]	; (8008190 <HAL_GPIO_DeInit+0x188>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00d      	beq.n	800808c <HAL_GPIO_DeInit+0x84>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a48      	ldr	r2, [pc, #288]	; (8008194 <HAL_GPIO_DeInit+0x18c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <HAL_GPIO_DeInit+0x80>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a47      	ldr	r2, [pc, #284]	; (8008198 <HAL_GPIO_DeInit+0x190>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_GPIO_DeInit+0x7c>
 8008080:	2305      	movs	r3, #5
 8008082:	e00a      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 8008084:	2306      	movs	r3, #6
 8008086:	e008      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 8008088:	2304      	movs	r3, #4
 800808a:	e006      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 800808c:	2303      	movs	r3, #3
 800808e:	e004      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 8008090:	2302      	movs	r3, #2
 8008092:	e002      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <HAL_GPIO_DeInit+0x92>
 8008098:	2300      	movs	r3, #0
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	f002 0203 	and.w	r2, r2, #3
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	4093      	lsls	r3, r2
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d132      	bne.n	8008110 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	220f      	movs	r2, #15
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80080ba:	4a31      	ldr	r2, [pc, #196]	; (8008180 <HAL_GPIO_DeInit+0x178>)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	3302      	adds	r3, #2
 80080c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	43da      	mvns	r2, r3
 80080ca:	482d      	ldr	r0, [pc, #180]	; (8008180 <HAL_GPIO_DeInit+0x178>)
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	089b      	lsrs	r3, r3, #2
 80080d0:	400a      	ands	r2, r1
 80080d2:	3302      	adds	r3, #2
 80080d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80080d8:	4b30      	ldr	r3, [pc, #192]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	43db      	mvns	r3, r3
 80080e0:	492e      	ldr	r1, [pc, #184]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80080e6:	4b2d      	ldr	r3, [pc, #180]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	492b      	ldr	r1, [pc, #172]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	4927      	ldr	r1, [pc, #156]	; (800819c <HAL_GPIO_DeInit+0x194>)
 80080fe:	4013      	ands	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008102:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_GPIO_DeInit+0x194>)
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	43db      	mvns	r3, r3
 800810a:	4924      	ldr	r1, [pc, #144]	; (800819c <HAL_GPIO_DeInit+0x194>)
 800810c:	4013      	ands	r3, r2
 800810e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2bff      	cmp	r3, #255	; 0xff
 8008114:	d801      	bhi.n	800811a <HAL_GPIO_DeInit+0x112>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	e001      	b.n	800811e <HAL_GPIO_DeInit+0x116>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2bff      	cmp	r3, #255	; 0xff
 8008124:	d802      	bhi.n	800812c <HAL_GPIO_DeInit+0x124>
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	e002      	b.n	8008132 <HAL_GPIO_DeInit+0x12a>
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	3b08      	subs	r3, #8
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	210f      	movs	r1, #15
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	2104      	movs	r1, #4
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	fa01 f303 	lsl.w	r3, r1, r3
 800814c:	431a      	orrs	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	43db      	mvns	r3, r3
 800815a:	401a      	ands	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	3301      	adds	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	fa22 f303 	lsr.w	r3, r2, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	f47f af52 	bne.w	8008018 <HAL_GPIO_DeInit+0x10>
  }
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	3724      	adds	r7, #36	; 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr
 8008180:	40010000 	.word	0x40010000
 8008184:	40010800 	.word	0x40010800
 8008188:	40010c00 	.word	0x40010c00
 800818c:	40011000 	.word	0x40011000
 8008190:	40011400 	.word	0x40011400
 8008194:	40011800 	.word	0x40011800
 8008198:	40011c00 	.word	0x40011c00
 800819c:	40010400 	.word	0x40010400

080081a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	4013      	ands	r3, r2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
 80081bc:	e001      	b.n	80081c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	807b      	strh	r3, [r7, #2]
 80081da:	4613      	mov	r3, r2
 80081dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081de:	787b      	ldrb	r3, [r7, #1]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081e4:	887a      	ldrh	r2, [r7, #2]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80081ea:	e003      	b.n	80081f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80081ec:	887b      	ldrh	r3, [r7, #2]
 80081ee:	041a      	lsls	r2, r3, #16
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	611a      	str	r2, [r3, #16]
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr

080081fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008210:	887a      	ldrh	r2, [r7, #2]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4013      	ands	r3, r2
 8008216:	041a      	lsls	r2, r3, #16
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	43d9      	mvns	r1, r3
 800821c:	887b      	ldrh	r3, [r7, #2]
 800821e:	400b      	ands	r3, r1
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e12b      	b.n	800849a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff f952 	bl	8007500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2224      	movs	r2, #36	; 0x24
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008294:	f001 fd68 	bl	8009d68 <HAL_RCC_GetPCLK1Freq>
 8008298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	4a81      	ldr	r2, [pc, #516]	; (80084a4 <HAL_I2C_Init+0x274>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d807      	bhi.n	80082b4 <HAL_I2C_Init+0x84>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4a80      	ldr	r2, [pc, #512]	; (80084a8 <HAL_I2C_Init+0x278>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	bf94      	ite	ls
 80082ac:	2301      	movls	r3, #1
 80082ae:	2300      	movhi	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	e006      	b.n	80082c2 <HAL_I2C_Init+0x92>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4a7d      	ldr	r2, [pc, #500]	; (80084ac <HAL_I2C_Init+0x27c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bf94      	ite	ls
 80082bc:	2301      	movls	r3, #1
 80082be:	2300      	movhi	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e0e7      	b.n	800849a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a78      	ldr	r2, [pc, #480]	; (80084b0 <HAL_I2C_Init+0x280>)
 80082ce:	fba2 2303 	umull	r2, r3, r2, r3
 80082d2:	0c9b      	lsrs	r3, r3, #18
 80082d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4a6a      	ldr	r2, [pc, #424]	; (80084a4 <HAL_I2C_Init+0x274>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d802      	bhi.n	8008304 <HAL_I2C_Init+0xd4>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	3301      	adds	r3, #1
 8008302:	e009      	b.n	8008318 <HAL_I2C_Init+0xe8>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	4a69      	ldr	r2, [pc, #420]	; (80084b4 <HAL_I2C_Init+0x284>)
 8008310:	fba2 2303 	umull	r2, r3, r2, r3
 8008314:	099b      	lsrs	r3, r3, #6
 8008316:	3301      	adds	r3, #1
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	430b      	orrs	r3, r1
 800831e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800832a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	495c      	ldr	r1, [pc, #368]	; (80084a4 <HAL_I2C_Init+0x274>)
 8008334:	428b      	cmp	r3, r1
 8008336:	d819      	bhi.n	800836c <HAL_I2C_Init+0x13c>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	1e59      	subs	r1, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	fbb1 f3f3 	udiv	r3, r1, r3
 8008346:	1c59      	adds	r1, r3, #1
 8008348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800834c:	400b      	ands	r3, r1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <HAL_I2C_Init+0x138>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1e59      	subs	r1, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008360:	3301      	adds	r3, #1
 8008362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008366:	e051      	b.n	800840c <HAL_I2C_Init+0x1dc>
 8008368:	2304      	movs	r3, #4
 800836a:	e04f      	b.n	800840c <HAL_I2C_Init+0x1dc>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d111      	bne.n	8008398 <HAL_I2C_Init+0x168>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	1e58      	subs	r0, r3, #1
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6859      	ldr	r1, [r3, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	440b      	add	r3, r1
 8008382:	fbb0 f3f3 	udiv	r3, r0, r3
 8008386:	3301      	adds	r3, #1
 8008388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	e012      	b.n	80083be <HAL_I2C_Init+0x18e>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	1e58      	subs	r0, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6859      	ldr	r1, [r3, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	0099      	lsls	r1, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ae:	3301      	adds	r3, #1
 80083b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_I2C_Init+0x196>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e022      	b.n	800840c <HAL_I2C_Init+0x1dc>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10e      	bne.n	80083ec <HAL_I2C_Init+0x1bc>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1e58      	subs	r0, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6859      	ldr	r1, [r3, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	440b      	add	r3, r1
 80083dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80083e0:	3301      	adds	r3, #1
 80083e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ea:	e00f      	b.n	800840c <HAL_I2C_Init+0x1dc>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	1e58      	subs	r0, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	0099      	lsls	r1, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008402:	3301      	adds	r3, #1
 8008404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	6809      	ldr	r1, [r1, #0]
 8008410:	4313      	orrs	r3, r2
 8008412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69da      	ldr	r2, [r3, #28]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800843a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6911      	ldr	r1, [r2, #16]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68d2      	ldr	r2, [r2, #12]
 8008446:	4311      	orrs	r1, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	430b      	orrs	r3, r1
 800844e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695a      	ldr	r2, [r3, #20]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	000186a0 	.word	0x000186a0
 80084a8:	001e847f 	.word	0x001e847f
 80084ac:	003d08ff 	.word	0x003d08ff
 80084b0:	431bde83 	.word	0x431bde83
 80084b4:	10624dd3 	.word	0x10624dd3

080084b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e021      	b.n	800850e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2224      	movs	r2, #36	; 0x24
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff f84a 	bl	800757c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	461a      	mov	r2, r3
 8008524:	460b      	mov	r3, r1
 8008526:	817b      	strh	r3, [r7, #10]
 8008528:	4613      	mov	r3, r2
 800852a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800852c:	f7ff f9a0 	bl	8007870 <HAL_GetTick>
 8008530:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b20      	cmp	r3, #32
 800853c:	f040 80e0 	bne.w	8008700 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2319      	movs	r3, #25
 8008546:	2201      	movs	r2, #1
 8008548:	4970      	ldr	r1, [pc, #448]	; (800870c <HAL_I2C_Master_Transmit+0x1f4>)
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fe5c 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008556:	2302      	movs	r3, #2
 8008558:	e0d3      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_I2C_Master_Transmit+0x50>
 8008564:	2302      	movs	r3, #2
 8008566:	e0cc      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b01      	cmp	r3, #1
 800857c:	d007      	beq.n	800858e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0201 	orr.w	r2, r2, #1
 800858c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800859c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2221      	movs	r2, #33	; 0x21
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2210      	movs	r2, #16
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	893a      	ldrh	r2, [r7, #8]
 80085be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a50      	ldr	r2, [pc, #320]	; (8008710 <HAL_I2C_Master_Transmit+0x1f8>)
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80085d0:	8979      	ldrh	r1, [r7, #10]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6a3a      	ldr	r2, [r7, #32]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fc16 	bl	8008e08 <I2C_MasterRequestWrite>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e08d      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80085fc:	e066      	b.n	80086cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	6a39      	ldr	r1, [r7, #32]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fed6 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00d      	beq.n	800862a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	2b04      	cmp	r3, #4
 8008614:	d107      	bne.n	8008626 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e06b      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008652:	3b01      	subs	r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b04      	cmp	r3, #4
 8008666:	d11b      	bne.n	80086a0 <HAL_I2C_Master_Transmit+0x188>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d017      	beq.n	80086a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	6a39      	ldr	r1, [r7, #32]
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fec6 	bl	8009436 <I2C_WaitOnBTFFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00d      	beq.n	80086cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d107      	bne.n	80086c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e01a      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d194      	bne.n	80085fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	e000      	b.n	8008702 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008700:	2302      	movs	r3, #2
  }
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	00100002 	.word	0x00100002
 8008710:	ffff0000 	.word	0xffff0000

08008714 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	4608      	mov	r0, r1
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4603      	mov	r3, r0
 8008724:	817b      	strh	r3, [r7, #10]
 8008726:	460b      	mov	r3, r1
 8008728:	813b      	strh	r3, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800872e:	f7ff f89f 	bl	8007870 <HAL_GetTick>
 8008732:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b20      	cmp	r3, #32
 800873e:	f040 80d9 	bne.w	80088f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	2319      	movs	r3, #25
 8008748:	2201      	movs	r2, #1
 800874a:	496d      	ldr	r1, [pc, #436]	; (8008900 <HAL_I2C_Mem_Write+0x1ec>)
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fd5b 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
 800875a:	e0cc      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_I2C_Mem_Write+0x56>
 8008766:	2302      	movs	r3, #2
 8008768:	e0c5      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d007      	beq.n	8008790 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800879e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2221      	movs	r2, #33	; 0x21
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2240      	movs	r2, #64	; 0x40
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a3a      	ldr	r2, [r7, #32]
 80087ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a4d      	ldr	r2, [pc, #308]	; (8008904 <HAL_I2C_Mem_Write+0x1f0>)
 80087d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087d2:	88f8      	ldrh	r0, [r7, #6]
 80087d4:	893a      	ldrh	r2, [r7, #8]
 80087d6:	8979      	ldrh	r1, [r7, #10]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4603      	mov	r3, r0
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 fb92 	bl	8008f0c <I2C_RequestMemoryWrite>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d052      	beq.n	8008894 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e081      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fddc 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b04      	cmp	r3, #4
 8008808:	d107      	bne.n	800881a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e06b      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b04      	cmp	r3, #4
 800885a:	d11b      	bne.n	8008894 <HAL_I2C_Mem_Write+0x180>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1aa      	bne.n	80087f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fdc8 	bl	8009436 <I2C_WaitOnBTFFlagUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00d      	beq.n	80088c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d107      	bne.n	80088c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e016      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e000      	b.n	80088f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	00100002 	.word	0x00100002
 8008904:	ffff0000 	.word	0xffff0000

08008908 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08c      	sub	sp, #48	; 0x30
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4603      	mov	r3, r0
 8008918:	817b      	strh	r3, [r7, #10]
 800891a:	460b      	mov	r3, r1
 800891c:	813b      	strh	r3, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008926:	f7fe ffa3 	bl	8007870 <HAL_GetTick>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b20      	cmp	r3, #32
 8008936:	f040 8244 	bne.w	8008dc2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2319      	movs	r3, #25
 8008940:	2201      	movs	r2, #1
 8008942:	4982      	ldr	r1, [pc, #520]	; (8008b4c <HAL_I2C_Mem_Read+0x244>)
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fc5f 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
 8008952:	e237      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <HAL_I2C_Mem_Read+0x5a>
 800895e:	2302      	movs	r3, #2
 8008960:	e230      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b01      	cmp	r3, #1
 8008976:	d007      	beq.n	8008988 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2222      	movs	r2, #34	; 0x22
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2240      	movs	r2, #64	; 0x40
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80089b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a62      	ldr	r2, [pc, #392]	; (8008b50 <HAL_I2C_Mem_Read+0x248>)
 80089c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089ca:	88f8      	ldrh	r0, [r7, #6]
 80089cc:	893a      	ldrh	r2, [r7, #8]
 80089ce:	8979      	ldrh	r1, [r7, #10]
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4603      	mov	r3, r0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fb2c 	bl	8009038 <I2C_RequestMemoryRead>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e1ec      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d113      	bne.n	8008a1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	61fb      	str	r3, [r7, #28]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	61fb      	str	r3, [r7, #28]
 8008a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	e1c0      	b.n	8008d9c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d11e      	bne.n	8008a60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a32:	b672      	cpsid	i
}
 8008a34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a36:	2300      	movs	r3, #0
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	61bb      	str	r3, [r7, #24]
 8008a4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008a5c:	b662      	cpsie	i
}
 8008a5e:	e035      	b.n	8008acc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d11e      	bne.n	8008aa6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a78:	b672      	cpsid	i
}
 8008a7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008aa2:	b662      	cpsie	i
}
 8008aa4:	e012      	b.n	8008acc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ab4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008acc:	e166      	b.n	8008d9c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	f200 811f 	bhi.w	8008d16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d123      	bne.n	8008b28 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fce7 	bl	80094b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e167      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b26:	e139      	b.n	8008d9c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d152      	bne.n	8008bd6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	2200      	movs	r2, #0
 8008b38:	4906      	ldr	r1, [pc, #24]	; (8008b54 <HAL_I2C_Mem_Read+0x24c>)
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fb64 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e13c      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
 8008b4a:	bf00      	nop
 8008b4c:	00100002 	.word	0x00100002
 8008b50:	ffff0000 	.word	0xffff0000
 8008b54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008b58:	b672      	cpsid	i
}
 8008b5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008b9e:	b662      	cpsie	i
}
 8008ba0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	b2d2      	uxtb	r2, r2
 8008bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bd4:	e0e2      	b.n	8008d9c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	2200      	movs	r2, #0
 8008bde:	497b      	ldr	r1, [pc, #492]	; (8008dcc <HAL_I2C_Mem_Read+0x4c4>)
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fb11 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0e9      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c00:	b672      	cpsid	i
}
 8008c02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	691a      	ldr	r2, [r3, #16]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008c36:	4b66      	ldr	r3, [pc, #408]	; (8008dd0 <HAL_I2C_Mem_Read+0x4c8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	08db      	lsrs	r3, r3, #3
 8008c3c:	4a65      	ldr	r2, [pc, #404]	; (8008dd4 <HAL_I2C_Mem_Read+0x4cc>)
 8008c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c42:	0a1a      	lsrs	r2, r3, #8
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	00da      	lsls	r2, r3, #3
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d118      	bne.n	8008c8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f043 0220 	orr.w	r2, r3, #32
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008c7e:	b662      	cpsie	i
}
 8008c80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e09a      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d1d9      	bne.n	8008c50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008cde:	b662      	cpsie	i
}
 8008ce0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d14:	e042      	b.n	8008d9c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fbcc 	bl	80094b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e04c      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691a      	ldr	r2, [r3, #16]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d118      	bne.n	8008d9c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f47f ae94 	bne.w	8008ace <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008dc2:	2302      	movs	r3, #2
  }
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3728      	adds	r7, #40	; 0x28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	00010004 	.word	0x00010004
 8008dd0:	20000914 	.word	0x20000914
 8008dd4:	14f8b589 	.word	0x14f8b589

08008dd8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de6:	b2db      	uxtb	r3, r3
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bc80      	pop	{r7}
 8008e06:	4770      	bx	lr

08008e08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	460b      	mov	r3, r1
 8008e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d006      	beq.n	8008e32 <I2C_MasterRequestWrite+0x2a>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d003      	beq.n	8008e32 <I2C_MasterRequestWrite+0x2a>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e30:	d108      	bne.n	8008e44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e00b      	b.n	8008e5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	2b12      	cmp	r3, #18
 8008e4a:	d107      	bne.n	8008e5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 f9cd 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d103      	bne.n	8008e8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e035      	b.n	8008efc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e98:	d108      	bne.n	8008eac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e9a:	897b      	ldrh	r3, [r7, #10]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ea8:	611a      	str	r2, [r3, #16]
 8008eaa:	e01b      	b.n	8008ee4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008eac:	897b      	ldrh	r3, [r7, #10]
 8008eae:	11db      	asrs	r3, r3, #7
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0306 	and.w	r3, r3, #6
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f063 030f 	orn	r3, r3, #15
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	490e      	ldr	r1, [pc, #56]	; (8008f04 <I2C_MasterRequestWrite+0xfc>)
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f9f3 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e010      	b.n	8008efc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008eda:	897b      	ldrh	r3, [r7, #10]
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4907      	ldr	r1, [pc, #28]	; (8008f08 <I2C_MasterRequestWrite+0x100>)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f9e3 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	00010008 	.word	0x00010008
 8008f08:	00010002 	.word	0x00010002

08008f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	817b      	strh	r3, [r7, #10]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	813b      	strh	r3, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 f960 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5c:	d103      	bne.n	8008f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e05f      	b.n	800902a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f6a:	897b      	ldrh	r3, [r7, #10]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	6a3a      	ldr	r2, [r7, #32]
 8008f7e:	492d      	ldr	r1, [pc, #180]	; (8009034 <I2C_RequestMemoryWrite+0x128>)
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f998 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e04c      	b.n	800902a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	6a39      	ldr	r1, [r7, #32]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fa02 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	2b04      	cmp	r3, #4
 8008fbc:	d107      	bne.n	8008fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e02b      	b.n	800902a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d105      	bne.n	8008fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fd8:	893b      	ldrh	r3, [r7, #8]
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	611a      	str	r2, [r3, #16]
 8008fe2:	e021      	b.n	8009028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff4:	6a39      	ldr	r1, [r7, #32]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f9dc 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b04      	cmp	r3, #4
 8009008:	d107      	bne.n	800901a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e005      	b.n	800902a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800901e:	893b      	ldrh	r3, [r7, #8]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	00010002 	.word	0x00010002

08009038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	817b      	strh	r3, [r7, #10]
 800904a:	460b      	mov	r3, r1
 800904c:	813b      	strh	r3, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	2200      	movs	r2, #0
 800907a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 f8c2 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009098:	d103      	bne.n	80090a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e0aa      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	4952      	ldr	r1, [pc, #328]	; (8009204 <I2C_RequestMemoryRead+0x1cc>)
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f8fa 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e097      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e4:	6a39      	ldr	r1, [r7, #32]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f964 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d107      	bne.n	800910a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e076      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d105      	bne.n	8009120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	611a      	str	r2, [r3, #16]
 800911e:	e021      	b.n	8009164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009120:	893b      	ldrh	r3, [r7, #8]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	b2da      	uxtb	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009130:	6a39      	ldr	r1, [r7, #32]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f93e 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00d      	beq.n	800915a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b04      	cmp	r3, #4
 8009144:	d107      	bne.n	8009156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e050      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	b2da      	uxtb	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	6a39      	ldr	r1, [r7, #32]
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f923 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00d      	beq.n	8009190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	2b04      	cmp	r3, #4
 800917a:	d107      	bne.n	800918c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e035      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800919e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f82b 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00d      	beq.n	80091d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c6:	d103      	bne.n	80091d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e013      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091d4:	897b      	ldrh	r3, [r7, #10]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	4906      	ldr	r1, [pc, #24]	; (8009204 <I2C_RequestMemoryRead+0x1cc>)
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 f863 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	00010002 	.word	0x00010002

08009208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	4613      	mov	r3, r2
 8009216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009218:	e025      	b.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009220:	d021      	beq.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009222:	f7fe fb25 	bl	8007870 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d116      	bne.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f043 0220 	orr.w	r2, r3, #32
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e023      	b.n	80092ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10d      	bne.n	800928c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	43da      	mvns	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4013      	ands	r3, r2
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf0c      	ite	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	2300      	movne	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	461a      	mov	r2, r3
 800928a:	e00c      	b.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	43da      	mvns	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4013      	ands	r3, r2
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d0b6      	beq.n	800921a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092c4:	e051      	b.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d4:	d123      	bne.n	800931e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f043 0204 	orr.w	r2, r3, #4
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e046      	b.n	80093ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d021      	beq.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009326:	f7fe faa3 	bl	8007870 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d302      	bcc.n	800933c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d116      	bne.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e020      	b.n	80093ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	0c1b      	lsrs	r3, r3, #16
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d10c      	bne.n	800938e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	43da      	mvns	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4013      	ands	r3, r2
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	bf14      	ite	ne
 8009386:	2301      	movne	r3, #1
 8009388:	2300      	moveq	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	e00b      	b.n	80093a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	43da      	mvns	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf14      	ite	ne
 80093a0:	2301      	movne	r3, #1
 80093a2:	2300      	moveq	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d18d      	bne.n	80092c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093c0:	e02d      	b.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f8ce 	bl	8009564 <I2C_IsAcknowledgeFailed>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e02d      	b.n	800942e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d021      	beq.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093da:	f7fe fa49 	bl	8007870 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d116      	bne.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e007      	b.n	800942e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009428:	2b80      	cmp	r3, #128	; 0x80
 800942a:	d1ca      	bne.n	80093c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009442:	e02d      	b.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f88d 	bl	8009564 <I2C_IsAcknowledgeFailed>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e02d      	b.n	80094b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d021      	beq.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945c:	f7fe fa08 	bl	8007870 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d302      	bcc.n	8009472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d116      	bne.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	f043 0220 	orr.w	r2, r3, #32
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e007      	b.n	80094b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d1ca      	bne.n	8009444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094c4:	e042      	b.n	800954c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d119      	bne.n	8009508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0210 	mvn.w	r2, #16
 80094dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e029      	b.n	800955c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009508:	f7fe f9b2 	bl	8007870 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	429a      	cmp	r2, r3
 8009516:	d302      	bcc.n	800951e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d116      	bne.n	800954c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	f043 0220 	orr.w	r2, r3, #32
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e007      	b.n	800955c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009556:	2b40      	cmp	r3, #64	; 0x40
 8009558:	d1b5      	bne.n	80094c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800957a:	d11b      	bne.n	80095b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	f043 0204 	orr.w	r2, r3, #4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e000      	b.n	80095b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr

080095c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e272      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8087 	beq.w	80096ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80095e0:	4b92      	ldr	r3, [pc, #584]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f003 030c 	and.w	r3, r3, #12
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d00c      	beq.n	8009606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80095ec:	4b8f      	ldr	r3, [pc, #572]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f003 030c 	and.w	r3, r3, #12
 80095f4:	2b08      	cmp	r3, #8
 80095f6:	d112      	bne.n	800961e <HAL_RCC_OscConfig+0x5e>
 80095f8:	4b8c      	ldr	r3, [pc, #560]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009604:	d10b      	bne.n	800961e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009606:	4b89      	ldr	r3, [pc, #548]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d06c      	beq.n	80096ec <HAL_RCC_OscConfig+0x12c>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d168      	bne.n	80096ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e24c      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009626:	d106      	bne.n	8009636 <HAL_RCC_OscConfig+0x76>
 8009628:	4b80      	ldr	r3, [pc, #512]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a7f      	ldr	r2, [pc, #508]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800962e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	e02e      	b.n	8009694 <HAL_RCC_OscConfig+0xd4>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10c      	bne.n	8009658 <HAL_RCC_OscConfig+0x98>
 800963e:	4b7b      	ldr	r3, [pc, #492]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a7a      	ldr	r2, [pc, #488]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	4b78      	ldr	r3, [pc, #480]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a77      	ldr	r2, [pc, #476]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e01d      	b.n	8009694 <HAL_RCC_OscConfig+0xd4>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009660:	d10c      	bne.n	800967c <HAL_RCC_OscConfig+0xbc>
 8009662:	4b72      	ldr	r3, [pc, #456]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a71      	ldr	r2, [pc, #452]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	4b6f      	ldr	r3, [pc, #444]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a6e      	ldr	r2, [pc, #440]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	e00b      	b.n	8009694 <HAL_RCC_OscConfig+0xd4>
 800967c:	4b6b      	ldr	r3, [pc, #428]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a6a      	ldr	r2, [pc, #424]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	4b68      	ldr	r3, [pc, #416]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a67      	ldr	r2, [pc, #412]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 800968e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d013      	beq.n	80096c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800969c:	f7fe f8e8 	bl	8007870 <HAL_GetTick>
 80096a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096a4:	f7fe f8e4 	bl	8007870 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b64      	cmp	r3, #100	; 0x64
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e200      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096b6:	4b5d      	ldr	r3, [pc, #372]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f0      	beq.n	80096a4 <HAL_RCC_OscConfig+0xe4>
 80096c2:	e014      	b.n	80096ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c4:	f7fe f8d4 	bl	8007870 <HAL_GetTick>
 80096c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ca:	e008      	b.n	80096de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096cc:	f7fe f8d0 	bl	8007870 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b64      	cmp	r3, #100	; 0x64
 80096d8:	d901      	bls.n	80096de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e1ec      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096de:	4b53      	ldr	r3, [pc, #332]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f0      	bne.n	80096cc <HAL_RCC_OscConfig+0x10c>
 80096ea:	e000      	b.n	80096ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d063      	beq.n	80097c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80096fa:	4b4c      	ldr	r3, [pc, #304]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f003 030c 	and.w	r3, r3, #12
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009706:	4b49      	ldr	r3, [pc, #292]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f003 030c 	and.w	r3, r3, #12
 800970e:	2b08      	cmp	r3, #8
 8009710:	d11c      	bne.n	800974c <HAL_RCC_OscConfig+0x18c>
 8009712:	4b46      	ldr	r3, [pc, #280]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d116      	bne.n	800974c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800971e:	4b43      	ldr	r3, [pc, #268]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <HAL_RCC_OscConfig+0x176>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d001      	beq.n	8009736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e1c0      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009736:	4b3d      	ldr	r3, [pc, #244]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	4939      	ldr	r1, [pc, #228]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009746:	4313      	orrs	r3, r2
 8009748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800974a:	e03a      	b.n	80097c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d020      	beq.n	8009796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009754:	4b36      	ldr	r3, [pc, #216]	; (8009830 <HAL_RCC_OscConfig+0x270>)
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800975a:	f7fe f889 	bl	8007870 <HAL_GetTick>
 800975e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009760:	e008      	b.n	8009774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009762:	f7fe f885 	bl	8007870 <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b02      	cmp	r3, #2
 800976e:	d901      	bls.n	8009774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e1a1      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009774:	4b2d      	ldr	r3, [pc, #180]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0f0      	beq.n	8009762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009780:	4b2a      	ldr	r3, [pc, #168]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	4927      	ldr	r1, [pc, #156]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 8009790:	4313      	orrs	r3, r2
 8009792:	600b      	str	r3, [r1, #0]
 8009794:	e015      	b.n	80097c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009796:	4b26      	ldr	r3, [pc, #152]	; (8009830 <HAL_RCC_OscConfig+0x270>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800979c:	f7fe f868 	bl	8007870 <HAL_GetTick>
 80097a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097a2:	e008      	b.n	80097b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097a4:	f7fe f864 	bl	8007870 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e180      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097b6:	4b1d      	ldr	r3, [pc, #116]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f0      	bne.n	80097a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d03a      	beq.n	8009844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d019      	beq.n	800980a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097d6:	4b17      	ldr	r3, [pc, #92]	; (8009834 <HAL_RCC_OscConfig+0x274>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097dc:	f7fe f848 	bl	8007870 <HAL_GetTick>
 80097e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097e4:	f7fe f844 	bl	8007870 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e160      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097f6:	4b0d      	ldr	r3, [pc, #52]	; (800982c <HAL_RCC_OscConfig+0x26c>)
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0f0      	beq.n	80097e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009802:	2001      	movs	r0, #1
 8009804:	f000 fad8 	bl	8009db8 <RCC_Delay>
 8009808:	e01c      	b.n	8009844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <HAL_RCC_OscConfig+0x274>)
 800980c:	2200      	movs	r2, #0
 800980e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009810:	f7fe f82e 	bl	8007870 <HAL_GetTick>
 8009814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009816:	e00f      	b.n	8009838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009818:	f7fe f82a 	bl	8007870 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d908      	bls.n	8009838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e146      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
 800982a:	bf00      	nop
 800982c:	40021000 	.word	0x40021000
 8009830:	42420000 	.word	0x42420000
 8009834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009838:	4b92      	ldr	r3, [pc, #584]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e9      	bne.n	8009818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80a6 	beq.w	800999e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009852:	2300      	movs	r3, #0
 8009854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009856:	4b8b      	ldr	r3, [pc, #556]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009862:	4b88      	ldr	r3, [pc, #544]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	4a87      	ldr	r2, [pc, #540]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986c:	61d3      	str	r3, [r2, #28]
 800986e:	4b85      	ldr	r3, [pc, #532]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009876:	60bb      	str	r3, [r7, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800987e:	4b82      	ldr	r3, [pc, #520]	; (8009a88 <HAL_RCC_OscConfig+0x4c8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009886:	2b00      	cmp	r3, #0
 8009888:	d118      	bne.n	80098bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800988a:	4b7f      	ldr	r3, [pc, #508]	; (8009a88 <HAL_RCC_OscConfig+0x4c8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a7e      	ldr	r2, [pc, #504]	; (8009a88 <HAL_RCC_OscConfig+0x4c8>)
 8009890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009896:	f7fd ffeb 	bl	8007870 <HAL_GetTick>
 800989a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800989e:	f7fd ffe7 	bl	8007870 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b64      	cmp	r3, #100	; 0x64
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e103      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b0:	4b75      	ldr	r3, [pc, #468]	; (8009a88 <HAL_RCC_OscConfig+0x4c8>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f0      	beq.n	800989e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d106      	bne.n	80098d2 <HAL_RCC_OscConfig+0x312>
 80098c4:	4b6f      	ldr	r3, [pc, #444]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	4a6e      	ldr	r2, [pc, #440]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	6213      	str	r3, [r2, #32]
 80098d0:	e02d      	b.n	800992e <HAL_RCC_OscConfig+0x36e>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10c      	bne.n	80098f4 <HAL_RCC_OscConfig+0x334>
 80098da:	4b6a      	ldr	r3, [pc, #424]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	4a69      	ldr	r2, [pc, #420]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098e0:	f023 0301 	bic.w	r3, r3, #1
 80098e4:	6213      	str	r3, [r2, #32]
 80098e6:	4b67      	ldr	r3, [pc, #412]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	4a66      	ldr	r2, [pc, #408]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098ec:	f023 0304 	bic.w	r3, r3, #4
 80098f0:	6213      	str	r3, [r2, #32]
 80098f2:	e01c      	b.n	800992e <HAL_RCC_OscConfig+0x36e>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	d10c      	bne.n	8009916 <HAL_RCC_OscConfig+0x356>
 80098fc:	4b61      	ldr	r3, [pc, #388]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	4a60      	ldr	r2, [pc, #384]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	6213      	str	r3, [r2, #32]
 8009908:	4b5e      	ldr	r3, [pc, #376]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	4a5d      	ldr	r2, [pc, #372]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	6213      	str	r3, [r2, #32]
 8009914:	e00b      	b.n	800992e <HAL_RCC_OscConfig+0x36e>
 8009916:	4b5b      	ldr	r3, [pc, #364]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	4a5a      	ldr	r2, [pc, #360]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	6213      	str	r3, [r2, #32]
 8009922:	4b58      	ldr	r3, [pc, #352]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	4a57      	ldr	r2, [pc, #348]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009928:	f023 0304 	bic.w	r3, r3, #4
 800992c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d015      	beq.n	8009962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009936:	f7fd ff9b 	bl	8007870 <HAL_GetTick>
 800993a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800993c:	e00a      	b.n	8009954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800993e:	f7fd ff97 	bl	8007870 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	4293      	cmp	r3, r2
 800994e:	d901      	bls.n	8009954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e0b1      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009954:	4b4b      	ldr	r3, [pc, #300]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0ee      	beq.n	800993e <HAL_RCC_OscConfig+0x37e>
 8009960:	e014      	b.n	800998c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009962:	f7fd ff85 	bl	8007870 <HAL_GetTick>
 8009966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009968:	e00a      	b.n	8009980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800996a:	f7fd ff81 	bl	8007870 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	f241 3288 	movw	r2, #5000	; 0x1388
 8009978:	4293      	cmp	r3, r2
 800997a:	d901      	bls.n	8009980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e09b      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009980:	4b40      	ldr	r3, [pc, #256]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1ee      	bne.n	800996a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d105      	bne.n	800999e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009992:	4b3c      	ldr	r3, [pc, #240]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	4a3b      	ldr	r2, [pc, #236]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800999c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8087 	beq.w	8009ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099a8:	4b36      	ldr	r3, [pc, #216]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f003 030c 	and.w	r3, r3, #12
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d061      	beq.n	8009a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d146      	bne.n	8009a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099bc:	4b33      	ldr	r3, [pc, #204]	; (8009a8c <HAL_RCC_OscConfig+0x4cc>)
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c2:	f7fd ff55 	bl	8007870 <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099c8:	e008      	b.n	80099dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099ca:	f7fd ff51 	bl	8007870 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e06d      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099dc:	4b29      	ldr	r3, [pc, #164]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1f0      	bne.n	80099ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f0:	d108      	bne.n	8009a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80099f2:	4b24      	ldr	r3, [pc, #144]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	4921      	ldr	r1, [pc, #132]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a04:	4b1f      	ldr	r3, [pc, #124]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a19      	ldr	r1, [r3, #32]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	430b      	orrs	r3, r1
 8009a16:	491b      	ldr	r1, [pc, #108]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a1c:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <HAL_RCC_OscConfig+0x4cc>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a22:	f7fd ff25 	bl	8007870 <HAL_GetTick>
 8009a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009a28:	e008      	b.n	8009a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a2a:	f7fd ff21 	bl	8007870 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e03d      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009a3c:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0f0      	beq.n	8009a2a <HAL_RCC_OscConfig+0x46a>
 8009a48:	e035      	b.n	8009ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a4a:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <HAL_RCC_OscConfig+0x4cc>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a50:	f7fd ff0e 	bl	8007870 <HAL_GetTick>
 8009a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a58:	f7fd ff0a 	bl	8007870 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e026      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <HAL_RCC_OscConfig+0x4c4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1f0      	bne.n	8009a58 <HAL_RCC_OscConfig+0x498>
 8009a76:	e01e      	b.n	8009ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d107      	bne.n	8009a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e019      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
 8009a84:	40021000 	.word	0x40021000
 8009a88:	40007000 	.word	0x40007000
 8009a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <HAL_RCC_OscConfig+0x500>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d106      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d001      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	40021000 	.word	0x40021000

08009ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e0d0      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b6a      	ldr	r3, [pc, #424]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d910      	bls.n	8009b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae6:	4b67      	ldr	r3, [pc, #412]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f023 0207 	bic.w	r2, r3, #7
 8009aee:	4965      	ldr	r1, [pc, #404]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009af6:	4b63      	ldr	r3, [pc, #396]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d001      	beq.n	8009b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0b8      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d020      	beq.n	8009b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b20:	4b59      	ldr	r3, [pc, #356]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4a58      	ldr	r2, [pc, #352]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b38:	4b53      	ldr	r3, [pc, #332]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	4a52      	ldr	r2, [pc, #328]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b44:	4b50      	ldr	r3, [pc, #320]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	494d      	ldr	r1, [pc, #308]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d040      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d107      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b6a:	4b47      	ldr	r3, [pc, #284]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d115      	bne.n	8009ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e07f      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d107      	bne.n	8009b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b82:	4b41      	ldr	r3, [pc, #260]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e073      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b92:	4b3d      	ldr	r3, [pc, #244]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e06b      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ba2:	4b39      	ldr	r3, [pc, #228]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f023 0203 	bic.w	r2, r3, #3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4936      	ldr	r1, [pc, #216]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bb4:	f7fd fe5c 	bl	8007870 <HAL_GetTick>
 8009bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bba:	e00a      	b.n	8009bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bbc:	f7fd fe58 	bl	8007870 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e053      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bd2:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f003 020c 	and.w	r2, r3, #12
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d1eb      	bne.n	8009bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009be4:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0307 	and.w	r3, r3, #7
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d210      	bcs.n	8009c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f023 0207 	bic.w	r2, r3, #7
 8009bfa:	4922      	ldr	r1, [pc, #136]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c02:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <HAL_RCC_ClockConfig+0x1c0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d001      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e032      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c20:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	4916      	ldr	r1, [pc, #88]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	490e      	ldr	r1, [pc, #56]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c52:	f000 f821 	bl	8009c98 <HAL_RCC_GetSysClockFreq>
 8009c56:	4602      	mov	r2, r0
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <HAL_RCC_ClockConfig+0x1c4>)
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	490a      	ldr	r1, [pc, #40]	; (8009c8c <HAL_RCC_ClockConfig+0x1c8>)
 8009c64:	5ccb      	ldrb	r3, [r1, r3]
 8009c66:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <HAL_RCC_ClockConfig+0x1cc>)
 8009c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009c6e:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <HAL_RCC_ClockConfig+0x1d0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd fdba 	bl	80077ec <HAL_InitTick>

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	40022000 	.word	0x40022000
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	0800cc44 	.word	0x0800cc44
 8009c90:	20000914 	.word	0x20000914
 8009c94:	20000918 	.word	0x20000918

08009c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c98:	b490      	push	{r4, r7}
 8009c9a:	b08a      	sub	sp, #40	; 0x28
 8009c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009c9e:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <HAL_RCC_GetSysClockFreq+0xac>)
 8009ca0:	1d3c      	adds	r4, r7, #4
 8009ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009ca8:	f240 2301 	movw	r3, #513	; 0x201
 8009cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009cc2:	4b21      	ldr	r3, [pc, #132]	; (8009d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f003 030c 	and.w	r3, r3, #12
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d002      	beq.n	8009cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	d003      	beq.n	8009cde <HAL_RCC_GetSysClockFreq+0x46>
 8009cd6:	e02b      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	; (8009d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009cda:	623b      	str	r3, [r7, #32]
      break;
 8009cdc:	e02b      	b.n	8009d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	0c9b      	lsrs	r3, r3, #18
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	3328      	adds	r3, #40	; 0x28
 8009ce8:	443b      	add	r3, r7
 8009cea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009cee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d012      	beq.n	8009d20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	0c5b      	lsrs	r3, r3, #17
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	3328      	adds	r3, #40	; 0x28
 8009d06:	443b      	add	r3, r7
 8009d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	4a0e      	ldr	r2, [pc, #56]	; (8009d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009d12:	fb03 f202 	mul.w	r2, r3, r2
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1e:	e004      	b.n	8009d2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	4a0b      	ldr	r2, [pc, #44]	; (8009d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d24:	fb02 f303 	mul.w	r3, r2, r3
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	623b      	str	r3, [r7, #32]
      break;
 8009d2e:	e002      	b.n	8009d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009d32:	623b      	str	r3, [r7, #32]
      break;
 8009d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d36:	6a3b      	ldr	r3, [r7, #32]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3728      	adds	r7, #40	; 0x28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc90      	pop	{r4, r7}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	0800cc2c 	.word	0x0800cc2c
 8009d48:	40021000 	.word	0x40021000
 8009d4c:	007a1200 	.word	0x007a1200
 8009d50:	003d0900 	.word	0x003d0900

08009d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d58:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bc80      	pop	{r7}
 8009d62:	4770      	bx	lr
 8009d64:	20000914 	.word	0x20000914

08009d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d6c:	f7ff fff2 	bl	8009d54 <HAL_RCC_GetHCLKFreq>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	0a1b      	lsrs	r3, r3, #8
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	4903      	ldr	r1, [pc, #12]	; (8009d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d7e:	5ccb      	ldrb	r3, [r1, r3]
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	0800cc54 	.word	0x0800cc54

08009d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d94:	f7ff ffde 	bl	8009d54 <HAL_RCC_GetHCLKFreq>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	0adb      	lsrs	r3, r3, #11
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	4903      	ldr	r1, [pc, #12]	; (8009db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009da6:	5ccb      	ldrb	r3, [r1, r3]
 8009da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	40021000 	.word	0x40021000
 8009db4:	0800cc54 	.word	0x0800cc54

08009db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <RCC_Delay+0x34>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a0a      	ldr	r2, [pc, #40]	; (8009df0 <RCC_Delay+0x38>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	0a5b      	lsrs	r3, r3, #9
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	fb02 f303 	mul.w	r3, r2, r3
 8009dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009dd4:	bf00      	nop
  }
  while (Delay --);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	1e5a      	subs	r2, r3, #1
 8009dda:	60fa      	str	r2, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f9      	bne.n	8009dd4 <RCC_Delay+0x1c>
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr
 8009dec:	20000914 	.word	0x20000914
 8009df0:	10624dd3 	.word	0x10624dd3

08009df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e041      	b.n	8009e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7fd fbd0 	bl	80075c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f000 fa7e 	bl	800a334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d001      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e044      	b.n	8009f36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a1d      	ldr	r2, [pc, #116]	; (8009f40 <HAL_TIM_Base_Start_IT+0xac>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d018      	beq.n	8009f00 <HAL_TIM_Base_Start_IT+0x6c>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a1c      	ldr	r2, [pc, #112]	; (8009f44 <HAL_TIM_Base_Start_IT+0xb0>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d013      	beq.n	8009f00 <HAL_TIM_Base_Start_IT+0x6c>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee0:	d00e      	beq.n	8009f00 <HAL_TIM_Base_Start_IT+0x6c>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	; (8009f48 <HAL_TIM_Base_Start_IT+0xb4>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d009      	beq.n	8009f00 <HAL_TIM_Base_Start_IT+0x6c>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <HAL_TIM_Base_Start_IT+0xb8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d004      	beq.n	8009f00 <HAL_TIM_Base_Start_IT+0x6c>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a15      	ldr	r2, [pc, #84]	; (8009f50 <HAL_TIM_Base_Start_IT+0xbc>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d111      	bne.n	8009f24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b06      	cmp	r3, #6
 8009f10:	d010      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0201 	orr.w	r2, r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f22:	e007      	b.n	8009f34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40013400 	.word	0x40013400
 8009f48:	40000400 	.word	0x40000400
 8009f4c:	40000800 	.word	0x40000800
 8009f50:	40000c00 	.word	0x40000c00

08009f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d122      	bne.n	8009fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d11b      	bne.n	8009fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f06f 0202 	mvn.w	r2, #2
 8009f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f003 0303 	and.w	r3, r3, #3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f9b1 	bl	800a2fe <HAL_TIM_IC_CaptureCallback>
 8009f9c:	e005      	b.n	8009faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9a4 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f9b3 	bl	800a310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d122      	bne.n	800a004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d11b      	bne.n	800a004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f06f 0204 	mvn.w	r2, #4
 8009fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f987 	bl	800a2fe <HAL_TIM_IC_CaptureCallback>
 8009ff0:	e005      	b.n	8009ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f97a 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f989 	bl	800a310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d122      	bne.n	800a058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d11b      	bne.n	800a058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0208 	mvn.w	r2, #8
 800a028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2204      	movs	r2, #4
 800a02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f95d 	bl	800a2fe <HAL_TIM_IC_CaptureCallback>
 800a044:	e005      	b.n	800a052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f950 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f95f 	bl	800a310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f003 0310 	and.w	r3, r3, #16
 800a062:	2b10      	cmp	r3, #16
 800a064:	d122      	bne.n	800a0ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b10      	cmp	r3, #16
 800a072:	d11b      	bne.n	800a0ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f06f 0210 	mvn.w	r2, #16
 800a07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2208      	movs	r2, #8
 800a082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f933 	bl	800a2fe <HAL_TIM_IC_CaptureCallback>
 800a098:	e005      	b.n	800a0a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f926 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f935 	bl	800a310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d10e      	bne.n	800a0d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d107      	bne.n	800a0d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0201 	mvn.w	r2, #1
 800a0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fa fb68 	bl	80047a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e2:	2b80      	cmp	r3, #128	; 0x80
 800a0e4:	d10e      	bne.n	800a104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f0:	2b80      	cmp	r3, #128	; 0x80
 800a0f2:	d107      	bne.n	800a104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa9d 	bl	800a63e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b40      	cmp	r3, #64	; 0x40
 800a110:	d10e      	bne.n	800a130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d107      	bne.n	800a130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f8f9 	bl	800a322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d10e      	bne.n	800a15c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f003 0320 	and.w	r3, r3, #32
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d107      	bne.n	800a15c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0220 	mvn.w	r2, #32
 800a154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa68 	bl	800a62c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIM_ConfigClockSource+0x18>
 800a178:	2302      	movs	r3, #2
 800a17a:	e0b3      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x180>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b4:	d03e      	beq.n	800a234 <HAL_TIM_ConfigClockSource+0xd0>
 800a1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ba:	f200 8087 	bhi.w	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c2:	f000 8085 	beq.w	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ca:	d87f      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1cc:	2b70      	cmp	r3, #112	; 0x70
 800a1ce:	d01a      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0xa2>
 800a1d0:	2b70      	cmp	r3, #112	; 0x70
 800a1d2:	d87b      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1d4:	2b60      	cmp	r3, #96	; 0x60
 800a1d6:	d050      	beq.n	800a27a <HAL_TIM_ConfigClockSource+0x116>
 800a1d8:	2b60      	cmp	r3, #96	; 0x60
 800a1da:	d877      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1dc:	2b50      	cmp	r3, #80	; 0x50
 800a1de:	d03c      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0xf6>
 800a1e0:	2b50      	cmp	r3, #80	; 0x50
 800a1e2:	d873      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1e4:	2b40      	cmp	r3, #64	; 0x40
 800a1e6:	d058      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x136>
 800a1e8:	2b40      	cmp	r3, #64	; 0x40
 800a1ea:	d86f      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1ec:	2b30      	cmp	r3, #48	; 0x30
 800a1ee:	d064      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x156>
 800a1f0:	2b30      	cmp	r3, #48	; 0x30
 800a1f2:	d86b      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	d060      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x156>
 800a1f8:	2b20      	cmp	r3, #32
 800a1fa:	d867      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05c      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x156>
 800a200:	2b10      	cmp	r3, #16
 800a202:	d05a      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a204:	e062      	b.n	800a2cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	6899      	ldr	r1, [r3, #8]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f000 f97e 	bl	800a516 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a228:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	609a      	str	r2, [r3, #8]
      break;
 800a232:	e04e      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6899      	ldr	r1, [r3, #8]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f000 f967 	bl	800a516 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a256:	609a      	str	r2, [r3, #8]
      break;
 800a258:	e03b      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6818      	ldr	r0, [r3, #0]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6859      	ldr	r1, [r3, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	461a      	mov	r2, r3
 800a268:	f000 f8de 	bl	800a428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2150      	movs	r1, #80	; 0x50
 800a272:	4618      	mov	r0, r3
 800a274:	f000 f935 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a278:	e02b      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6859      	ldr	r1, [r3, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	461a      	mov	r2, r3
 800a288:	f000 f8fc 	bl	800a484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2160      	movs	r1, #96	; 0x60
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f925 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a298:	e01b      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6859      	ldr	r1, [r3, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f000 f8be 	bl	800a428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2140      	movs	r1, #64	; 0x40
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f915 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a2b8:	e00b      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	f000 f90c 	bl	800a4e2 <TIM_ITRx_SetConfig>
        break;
 800a2ca:	e002      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2cc:	bf00      	nop
 800a2ce:	e000      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr

0800a2fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bc80      	pop	{r7}
 800a320:	4770      	bx	lr

0800a322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	bc80      	pop	{r7}
 800a332:	4770      	bx	lr

0800a334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a33      	ldr	r2, [pc, #204]	; (800a414 <TIM_Base_SetConfig+0xe0>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d013      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a32      	ldr	r2, [pc, #200]	; (800a418 <TIM_Base_SetConfig+0xe4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d00f      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35a:	d00b      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a2f      	ldr	r2, [pc, #188]	; (800a41c <TIM_Base_SetConfig+0xe8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d007      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a2e      	ldr	r2, [pc, #184]	; (800a420 <TIM_Base_SetConfig+0xec>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d003      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a2d      	ldr	r2, [pc, #180]	; (800a424 <TIM_Base_SetConfig+0xf0>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d108      	bne.n	800a386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a22      	ldr	r2, [pc, #136]	; (800a414 <TIM_Base_SetConfig+0xe0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <TIM_Base_SetConfig+0x82>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a21      	ldr	r2, [pc, #132]	; (800a418 <TIM_Base_SetConfig+0xe4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00f      	beq.n	800a3b6 <TIM_Base_SetConfig+0x82>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39c:	d00b      	beq.n	800a3b6 <TIM_Base_SetConfig+0x82>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a1e      	ldr	r2, [pc, #120]	; (800a41c <TIM_Base_SetConfig+0xe8>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d007      	beq.n	800a3b6 <TIM_Base_SetConfig+0x82>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <TIM_Base_SetConfig+0xec>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d003      	beq.n	800a3b6 <TIM_Base_SetConfig+0x82>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <TIM_Base_SetConfig+0xf0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d108      	bne.n	800a3c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a09      	ldr	r2, [pc, #36]	; (800a414 <TIM_Base_SetConfig+0xe0>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_Base_SetConfig+0xc8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a08      	ldr	r2, [pc, #32]	; (800a418 <TIM_Base_SetConfig+0xe4>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d103      	bne.n	800a404 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	615a      	str	r2, [r3, #20]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc80      	pop	{r7}
 800a412:	4770      	bx	lr
 800a414:	40012c00 	.word	0x40012c00
 800a418:	40013400 	.word	0x40013400
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00

0800a428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f023 0201 	bic.w	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f023 030a 	bic.w	r3, r3, #10
 800a464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	621a      	str	r2, [r3, #32]
}
 800a47a:	bf00      	nop
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr

0800a484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	f023 0210 	bic.w	r2, r3, #16
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	031b      	lsls	r3, r3, #12
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	621a      	str	r2, [r3, #32]
}
 800a4d8:	bf00      	nop
 800a4da:	371c      	adds	r7, #28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr

0800a4e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f043 0307 	orr.w	r3, r3, #7
 800a504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	609a      	str	r2, [r3, #8]
}
 800a50c:	bf00      	nop
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a516:	b480      	push	{r7}
 800a518:	b087      	sub	sp, #28
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
 800a522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	021a      	lsls	r2, r3, #8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	431a      	orrs	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	609a      	str	r2, [r3, #8]
}
 800a54a:	bf00      	nop
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d101      	bne.n	800a56c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a568:	2302      	movs	r3, #2
 800a56a:	e050      	b.n	800a60e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a1b      	ldr	r2, [pc, #108]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d018      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a19      	ldr	r2, [pc, #100]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a15      	ldr	r2, [pc, #84]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d009      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a14      	ldr	r2, [pc, #80]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a12      	ldr	r2, [pc, #72]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10c      	bne.n	800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr
 800a618:	40012c00 	.word	0x40012c00
 800a61c:	40013400 	.word	0x40013400
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40000c00 	.word	0x40000c00

0800a62c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr

0800a63e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a63e:	b480      	push	{r7}
 800a640:	b083      	sub	sp, #12
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e03f      	b.n	800a6e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fc ffc8 	bl	800760c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2224      	movs	r2, #36	; 0x24
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f829 	bl	800a6ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695a      	ldr	r2, [r3, #20]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689a      	ldr	r2, [r3, #8]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a726:	f023 030c 	bic.w	r3, r3, #12
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6812      	ldr	r2, [r2, #0]
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	430b      	orrs	r3, r1
 800a732:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2c      	ldr	r2, [pc, #176]	; (800a800 <UART_SetConfig+0x114>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d103      	bne.n	800a75c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a754:	f7ff fb1c 	bl	8009d90 <HAL_RCC_GetPCLK2Freq>
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	e002      	b.n	800a762 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a75c:	f7ff fb04 	bl	8009d68 <HAL_RCC_GetPCLK1Freq>
 800a760:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009a      	lsls	r2, r3, #2
 800a76c:	441a      	add	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	fbb2 f3f3 	udiv	r3, r2, r3
 800a778:	4a22      	ldr	r2, [pc, #136]	; (800a804 <UART_SetConfig+0x118>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	0119      	lsls	r1, r3, #4
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009a      	lsls	r2, r3, #2
 800a78c:	441a      	add	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	fbb2 f2f3 	udiv	r2, r2, r3
 800a798:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <UART_SetConfig+0x118>)
 800a79a:	fba3 0302 	umull	r0, r3, r3, r2
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	2064      	movs	r0, #100	; 0x64
 800a7a2:	fb00 f303 	mul.w	r3, r0, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	3332      	adds	r3, #50	; 0x32
 800a7ac:	4a15      	ldr	r2, [pc, #84]	; (800a804 <UART_SetConfig+0x118>)
 800a7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b2:	095b      	lsrs	r3, r3, #5
 800a7b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7b8:	4419      	add	r1, r3
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009a      	lsls	r2, r3, #2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <UART_SetConfig+0x118>)
 800a7d2:	fba3 0302 	umull	r0, r3, r3, r2
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	2064      	movs	r0, #100	; 0x64
 800a7da:	fb00 f303 	mul.w	r3, r0, r3
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	3332      	adds	r3, #50	; 0x32
 800a7e4:	4a07      	ldr	r2, [pc, #28]	; (800a804 <UART_SetConfig+0x118>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	095b      	lsrs	r3, r3, #5
 800a7ec:	f003 020f 	and.w	r2, r3, #15
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	440a      	add	r2, r1
 800a7f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a7f8:	bf00      	nop
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40013800 	.word	0x40013800
 800a804:	51eb851f 	.word	0x51eb851f

0800a808 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a812:	2300      	movs	r3, #0
 800a814:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a81a:	2b84      	cmp	r3, #132	; 0x84
 800a81c:	d005      	beq.n	800a82a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a81e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	3303      	adds	r3, #3
 800a828:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a82a:	68fb      	ldr	r3, [r7, #12]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	bc80      	pop	{r7}
 800a834:	4770      	bx	lr

0800a836 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a83a:	f000 fad1 	bl	800ade0 <vTaskStartScheduler>
  
  return osOK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	bd80      	pop	{r7, pc}

0800a844 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a846:	b089      	sub	sp, #36	; 0x24
 800a848:	af04      	add	r7, sp, #16
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d020      	beq.n	800a898 <osThreadCreate+0x54>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01c      	beq.n	800a898 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685c      	ldr	r4, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691e      	ldr	r6, [r3, #16]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff ffc9 	bl	800a808 <makeFreeRtosPriority>
 800a876:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a880:	9202      	str	r2, [sp, #8]
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	9100      	str	r1, [sp, #0]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	4632      	mov	r2, r6
 800a88a:	4629      	mov	r1, r5
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 f8e8 	bl	800aa62 <xTaskCreateStatic>
 800a892:	4603      	mov	r3, r0
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	e01c      	b.n	800a8d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685c      	ldr	r4, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff ffab 	bl	800a808 <makeFreeRtosPriority>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	f107 030c 	add.w	r3, r7, #12
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	9200      	str	r2, [sp, #0]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	4632      	mov	r2, r6
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 f929 	bl	800ab1a <xTaskCreate>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d001      	beq.n	800a8d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e000      	b.n	800a8d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <osDelay+0x16>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	e000      	b.n	800a8f4 <osDelay+0x18>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fa3f 	bl	800ad78 <vTaskDelay>
  
  return osOK;
 800a8fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f103 0208 	add.w	r2, r3, #8
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f04f 32ff 	mov.w	r2, #4294967295
 800a91c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f103 0208 	add.w	r2, r3, #8
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f103 0208 	add.w	r2, r3, #8
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr

0800a942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr

0800a95a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	601a      	str	r2, [r3, #0]
}
 800a996:	bf00      	nop
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr

0800a9a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b6:	d103      	bne.n	800a9c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	e00c      	b.n	800a9da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	e002      	b.n	800a9ce <vListInsert+0x2e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d2f6      	bcs.n	800a9c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bc80      	pop	{r7}
 800aa0e:	4770      	bx	lr

0800aa10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	6892      	ldr	r2, [r2, #8]
 800aa26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6852      	ldr	r2, [r2, #4]
 800aa30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d103      	bne.n	800aa44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	1e5a      	subs	r2, r3, #1
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr

0800aa62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b08e      	sub	sp, #56	; 0x38
 800aa66:	af04      	add	r7, sp, #16
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	61fb      	str	r3, [r7, #28]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aaa8:	2354      	movs	r3, #84	; 0x54
 800aaaa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2b54      	cmp	r3, #84	; 0x54
 800aab0:	d00a      	beq.n	800aac8 <xTaskCreateStatic+0x66>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	61bb      	str	r3, [r7, #24]
}
 800aac4:	bf00      	nop
 800aac6:	e7fe      	b.n	800aac6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01e      	beq.n	800ab0c <xTaskCreateStatic+0xaa>
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d01b      	beq.n	800ab0c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	2202      	movs	r2, #2
 800aae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aae6:	2300      	movs	r3, #0
 800aae8:	9303      	str	r3, [sp, #12]
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	9302      	str	r3, [sp, #8]
 800aaee:	f107 0314 	add.w	r3, r7, #20
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	68b9      	ldr	r1, [r7, #8]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f850 	bl	800aba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab06:	f000 f8cd 	bl	800aca4 <prvAddNewTaskToReadyList>
 800ab0a:	e001      	b.n	800ab10 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab10:	697b      	ldr	r3, [r7, #20]
	}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3728      	adds	r7, #40	; 0x28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b08c      	sub	sp, #48	; 0x30
 800ab1e:	af04      	add	r7, sp, #16
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	603b      	str	r3, [r7, #0]
 800ab26:	4613      	mov	r3, r2
 800ab28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fe86 	bl	800b840 <pvPortMalloc>
 800ab34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ab3c:	2054      	movs	r0, #84	; 0x54
 800ab3e:	f000 fe7f 	bl	800b840 <pvPortMalloc>
 800ab42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab50:	e005      	b.n	800ab5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab52:	6978      	ldr	r0, [r7, #20]
 800ab54:	f000 ff38 	bl	800b9c8 <vPortFree>
 800ab58:	e001      	b.n	800ab5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d017      	beq.n	800ab94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab6c:	88fa      	ldrh	r2, [r7, #6]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	9302      	str	r3, [sp, #8]
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68b9      	ldr	r1, [r7, #8]
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f000 f80e 	bl	800aba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab88:	69f8      	ldr	r0, [r7, #28]
 800ab8a:	f000 f88b 	bl	800aca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	e002      	b.n	800ab9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab94:	f04f 33ff 	mov.w	r3, #4294967295
 800ab98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab9a:	69bb      	ldr	r3, [r7, #24]
	}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3720      	adds	r7, #32
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abbc:	3b01      	subs	r3, #1
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	f023 0307 	bic.w	r3, r3, #7
 800abca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <prvInitialiseNewTask+0x48>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	617b      	str	r3, [r7, #20]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abec:	2300      	movs	r3, #0
 800abee:	61fb      	str	r3, [r7, #28]
 800abf0:	e012      	b.n	800ac18 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	4413      	add	r3, r2
 800abf8:	7819      	ldrb	r1, [r3, #0]
 800abfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	4413      	add	r3, r2
 800ac00:	3334      	adds	r3, #52	; 0x34
 800ac02:	460a      	mov	r2, r1
 800ac04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d006      	beq.n	800ac20 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	3301      	adds	r3, #1
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	d9e9      	bls.n	800abf2 <prvInitialiseNewTask+0x4e>
 800ac1e:	e000      	b.n	800ac22 <prvInitialiseNewTask+0x7e>
		{
			break;
 800ac20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	2b06      	cmp	r3, #6
 800ac2e:	d901      	bls.n	800ac34 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac30:	2306      	movs	r3, #6
 800ac32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	2200      	movs	r2, #0
 800ac44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	3304      	adds	r3, #4
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fe79 	bl	800a942 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	3318      	adds	r3, #24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fe74 	bl	800a942 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	f1c3 0207 	rsb	r2, r3, #7
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2200      	movs	r2, #0
 800ac74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	68f9      	ldr	r1, [r7, #12]
 800ac82:	69b8      	ldr	r0, [r7, #24]
 800ac84:	f000 fc2c 	bl	800b4e0 <pxPortInitialiseStack>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac9a:	bf00      	nop
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acac:	f000 fd06 	bl	800b6bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acb0:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <prvAddNewTaskToReadyList+0xb8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3301      	adds	r3, #1
 800acb6:	4a29      	ldr	r2, [pc, #164]	; (800ad5c <prvAddNewTaskToReadyList+0xb8>)
 800acb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acba:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <prvAddNewTaskToReadyList+0xbc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acc2:	4a27      	ldr	r2, [pc, #156]	; (800ad60 <prvAddNewTaskToReadyList+0xbc>)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acc8:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <prvAddNewTaskToReadyList+0xb8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d110      	bne.n	800acf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acd0:	f000 fac0 	bl	800b254 <prvInitialiseTaskLists>
 800acd4:	e00d      	b.n	800acf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acd6:	4b23      	ldr	r3, [pc, #140]	; (800ad64 <prvAddNewTaskToReadyList+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acde:	4b20      	ldr	r3, [pc, #128]	; (800ad60 <prvAddNewTaskToReadyList+0xbc>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	429a      	cmp	r2, r3
 800acea:	d802      	bhi.n	800acf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acec:	4a1c      	ldr	r2, [pc, #112]	; (800ad60 <prvAddNewTaskToReadyList+0xbc>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acf2:	4b1d      	ldr	r3, [pc, #116]	; (800ad68 <prvAddNewTaskToReadyList+0xc4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3301      	adds	r3, #1
 800acf8:	4a1b      	ldr	r2, [pc, #108]	; (800ad68 <prvAddNewTaskToReadyList+0xc4>)
 800acfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	2201      	movs	r2, #1
 800ad02:	409a      	lsls	r2, r3
 800ad04:	4b19      	ldr	r3, [pc, #100]	; (800ad6c <prvAddNewTaskToReadyList+0xc8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	4a18      	ldr	r2, [pc, #96]	; (800ad6c <prvAddNewTaskToReadyList+0xc8>)
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4a15      	ldr	r2, [pc, #84]	; (800ad70 <prvAddNewTaskToReadyList+0xcc>)
 800ad1c:	441a      	add	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3304      	adds	r3, #4
 800ad22:	4619      	mov	r1, r3
 800ad24:	4610      	mov	r0, r2
 800ad26:	f7ff fe18 	bl	800a95a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad2a:	f000 fcf7 	bl	800b71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <prvAddNewTaskToReadyList+0xc0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00e      	beq.n	800ad54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad36:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <prvAddNewTaskToReadyList+0xbc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d207      	bcs.n	800ad54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <prvAddNewTaskToReadyList+0xd0>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000ff4 	.word	0x20000ff4
 800ad60:	20000ef4 	.word	0x20000ef4
 800ad64:	20001000 	.word	0x20001000
 800ad68:	20001010 	.word	0x20001010
 800ad6c:	20000ffc 	.word	0x20000ffc
 800ad70:	20000ef8 	.word	0x20000ef8
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d017      	beq.n	800adba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad8a:	4b13      	ldr	r3, [pc, #76]	; (800add8 <vTaskDelay+0x60>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <vTaskDelay+0x30>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60bb      	str	r3, [r7, #8]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ada8:	f000 f87a 	bl	800aea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adac:	2100      	movs	r1, #0
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fb30 	bl	800b414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adb4:	f000 f882 	bl	800aebc <xTaskResumeAll>
 800adb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d107      	bne.n	800add0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adc0:	4b06      	ldr	r3, [pc, #24]	; (800addc <vTaskDelay+0x64>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	2000101c 	.word	0x2000101c
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adee:	463a      	mov	r2, r7
 800adf0:	1d39      	adds	r1, r7, #4
 800adf2:	f107 0308 	add.w	r3, r7, #8
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f5 fa22 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	9202      	str	r2, [sp, #8]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	460a      	mov	r2, r1
 800ae0e:	491e      	ldr	r1, [pc, #120]	; (800ae88 <vTaskStartScheduler+0xa8>)
 800ae10:	481e      	ldr	r0, [pc, #120]	; (800ae8c <vTaskStartScheduler+0xac>)
 800ae12:	f7ff fe26 	bl	800aa62 <xTaskCreateStatic>
 800ae16:	4603      	mov	r3, r0
 800ae18:	4a1d      	ldr	r2, [pc, #116]	; (800ae90 <vTaskStartScheduler+0xb0>)
 800ae1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae1c:	4b1c      	ldr	r3, [pc, #112]	; (800ae90 <vTaskStartScheduler+0xb0>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	e001      	b.n	800ae2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d116      	bne.n	800ae62 <vTaskStartScheduler+0x82>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	613b      	str	r3, [r7, #16]
}
 800ae46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae48:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <vTaskStartScheduler+0xb4>)
 800ae4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae50:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <vTaskStartScheduler+0xb8>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ae56:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <vTaskStartScheduler+0xbc>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae5c:	f000 fbbc 	bl	800b5d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae60:	e00e      	b.n	800ae80 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d10a      	bne.n	800ae80 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	60fb      	str	r3, [r7, #12]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <vTaskStartScheduler+0x9e>
}
 800ae80:	bf00      	nop
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	0800cc3c 	.word	0x0800cc3c
 800ae8c:	0800b225 	.word	0x0800b225
 800ae90:	20001018 	.word	0x20001018
 800ae94:	20001014 	.word	0x20001014
 800ae98:	20001000 	.word	0x20001000
 800ae9c:	20000ff8 	.word	0x20000ff8

0800aea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aea4:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <vTaskSuspendAll+0x18>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	4a03      	ldr	r2, [pc, #12]	; (800aeb8 <vTaskSuspendAll+0x18>)
 800aeac:	6013      	str	r3, [r2, #0]
}
 800aeae:	bf00      	nop
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	2000101c 	.word	0x2000101c

0800aebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aeca:	4b41      	ldr	r3, [pc, #260]	; (800afd0 <xTaskResumeAll+0x114>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <xTaskResumeAll+0x2c>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	603b      	str	r3, [r7, #0]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aee8:	f000 fbe8 	bl	800b6bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aeec:	4b38      	ldr	r3, [pc, #224]	; (800afd0 <xTaskResumeAll+0x114>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	4a37      	ldr	r2, [pc, #220]	; (800afd0 <xTaskResumeAll+0x114>)
 800aef4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef6:	4b36      	ldr	r3, [pc, #216]	; (800afd0 <xTaskResumeAll+0x114>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d161      	bne.n	800afc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aefe:	4b35      	ldr	r3, [pc, #212]	; (800afd4 <xTaskResumeAll+0x118>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d05d      	beq.n	800afc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af06:	e02e      	b.n	800af66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800af08:	4b33      	ldr	r3, [pc, #204]	; (800afd8 <xTaskResumeAll+0x11c>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	3318      	adds	r3, #24
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff fd7b 	bl	800aa10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fd76 	bl	800aa10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	2201      	movs	r2, #1
 800af2a:	409a      	lsls	r2, r3
 800af2c:	4b2b      	ldr	r3, [pc, #172]	; (800afdc <xTaskResumeAll+0x120>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4313      	orrs	r3, r2
 800af32:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <xTaskResumeAll+0x120>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4a27      	ldr	r2, [pc, #156]	; (800afe0 <xTaskResumeAll+0x124>)
 800af44:	441a      	add	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7ff fd04 	bl	800a95a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af56:	4b23      	ldr	r3, [pc, #140]	; (800afe4 <xTaskResumeAll+0x128>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d302      	bcc.n	800af66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800af60:	4b21      	ldr	r3, [pc, #132]	; (800afe8 <xTaskResumeAll+0x12c>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af66:	4b1c      	ldr	r3, [pc, #112]	; (800afd8 <xTaskResumeAll+0x11c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1cc      	bne.n	800af08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af74:	f000 fa0c 	bl	800b390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800af78:	4b1c      	ldr	r3, [pc, #112]	; (800afec <xTaskResumeAll+0x130>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d010      	beq.n	800afa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af84:	f000 f836 	bl	800aff4 <xTaskIncrementTick>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800af8e:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <xTaskResumeAll+0x12c>)
 800af90:	2201      	movs	r2, #1
 800af92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3b01      	subs	r3, #1
 800af98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1f1      	bne.n	800af84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800afa0:	4b12      	ldr	r3, [pc, #72]	; (800afec <xTaskResumeAll+0x130>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afa6:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <xTaskResumeAll+0x12c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d009      	beq.n	800afc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afae:	2301      	movs	r3, #1
 800afb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afb2:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <xTaskResumeAll+0x134>)
 800afb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afc2:	f000 fbab 	bl	800b71c <vPortExitCritical>

	return xAlreadyYielded;
 800afc6:	68bb      	ldr	r3, [r7, #8]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	2000101c 	.word	0x2000101c
 800afd4:	20000ff4 	.word	0x20000ff4
 800afd8:	20000fb4 	.word	0x20000fb4
 800afdc:	20000ffc 	.word	0x20000ffc
 800afe0:	20000ef8 	.word	0x20000ef8
 800afe4:	20000ef4 	.word	0x20000ef4
 800afe8:	20001008 	.word	0x20001008
 800afec:	20001004 	.word	0x20001004
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800affe:	4b51      	ldr	r3, [pc, #324]	; (800b144 <xTaskIncrementTick+0x150>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f040 808d 	bne.w	800b122 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b008:	4b4f      	ldr	r3, [pc, #316]	; (800b148 <xTaskIncrementTick+0x154>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b010:	4a4d      	ldr	r2, [pc, #308]	; (800b148 <xTaskIncrementTick+0x154>)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d120      	bne.n	800b05e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b01c:	4b4b      	ldr	r3, [pc, #300]	; (800b14c <xTaskIncrementTick+0x158>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <xTaskIncrementTick+0x48>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	603b      	str	r3, [r7, #0]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <xTaskIncrementTick+0x46>
 800b03c:	4b43      	ldr	r3, [pc, #268]	; (800b14c <xTaskIncrementTick+0x158>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	4b43      	ldr	r3, [pc, #268]	; (800b150 <xTaskIncrementTick+0x15c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a41      	ldr	r2, [pc, #260]	; (800b14c <xTaskIncrementTick+0x158>)
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	4a41      	ldr	r2, [pc, #260]	; (800b150 <xTaskIncrementTick+0x15c>)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	4b40      	ldr	r3, [pc, #256]	; (800b154 <xTaskIncrementTick+0x160>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3301      	adds	r3, #1
 800b056:	4a3f      	ldr	r2, [pc, #252]	; (800b154 <xTaskIncrementTick+0x160>)
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	f000 f999 	bl	800b390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b05e:	4b3e      	ldr	r3, [pc, #248]	; (800b158 <xTaskIncrementTick+0x164>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	429a      	cmp	r2, r3
 800b066:	d34d      	bcc.n	800b104 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b068:	4b38      	ldr	r3, [pc, #224]	; (800b14c <xTaskIncrementTick+0x158>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <xTaskIncrementTick+0x82>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <xTaskIncrementTick+0x84>
 800b076:	2300      	movs	r3, #0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07c:	4b36      	ldr	r3, [pc, #216]	; (800b158 <xTaskIncrementTick+0x164>)
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	601a      	str	r2, [r3, #0]
					break;
 800b084:	e03e      	b.n	800b104 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b086:	4b31      	ldr	r3, [pc, #196]	; (800b14c <xTaskIncrementTick+0x158>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d203      	bcs.n	800b0a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b09e:	4a2e      	ldr	r2, [pc, #184]	; (800b158 <xTaskIncrementTick+0x164>)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6013      	str	r3, [r2, #0]
						break;
 800b0a4:	e02e      	b.n	800b104 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fcb0 	bl	800aa10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3318      	adds	r3, #24
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff fca7 	bl	800aa10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	409a      	lsls	r2, r3
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <xTaskIncrementTick+0x168>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	4a22      	ldr	r2, [pc, #136]	; (800b15c <xTaskIncrementTick+0x168>)
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4a1f      	ldr	r2, [pc, #124]	; (800b160 <xTaskIncrementTick+0x16c>)
 800b0e2:	441a      	add	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7ff fc35 	bl	800a95a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f4:	4b1b      	ldr	r3, [pc, #108]	; (800b164 <xTaskIncrementTick+0x170>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d3b4      	bcc.n	800b068 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0fe:	2301      	movs	r3, #1
 800b100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b102:	e7b1      	b.n	800b068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b104:	4b17      	ldr	r3, [pc, #92]	; (800b164 <xTaskIncrementTick+0x170>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	4915      	ldr	r1, [pc, #84]	; (800b160 <xTaskIncrementTick+0x16c>)
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	440b      	add	r3, r1
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d907      	bls.n	800b12c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b11c:	2301      	movs	r3, #1
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e004      	b.n	800b12c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b122:	4b11      	ldr	r3, [pc, #68]	; (800b168 <xTaskIncrementTick+0x174>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	4a0f      	ldr	r2, [pc, #60]	; (800b168 <xTaskIncrementTick+0x174>)
 800b12a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <xTaskIncrementTick+0x178>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b138:	697b      	ldr	r3, [r7, #20]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	2000101c 	.word	0x2000101c
 800b148:	20000ff8 	.word	0x20000ff8
 800b14c:	20000fac 	.word	0x20000fac
 800b150:	20000fb0 	.word	0x20000fb0
 800b154:	2000100c 	.word	0x2000100c
 800b158:	20001014 	.word	0x20001014
 800b15c:	20000ffc 	.word	0x20000ffc
 800b160:	20000ef8 	.word	0x20000ef8
 800b164:	20000ef4 	.word	0x20000ef4
 800b168:	20001004 	.word	0x20001004
 800b16c:	20001008 	.word	0x20001008

0800b170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b176:	4b26      	ldr	r3, [pc, #152]	; (800b210 <vTaskSwitchContext+0xa0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b17e:	4b25      	ldr	r3, [pc, #148]	; (800b214 <vTaskSwitchContext+0xa4>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b184:	e03f      	b.n	800b206 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b186:	4b23      	ldr	r3, [pc, #140]	; (800b214 <vTaskSwitchContext+0xa4>)
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b18c:	4b22      	ldr	r3, [pc, #136]	; (800b218 <vTaskSwitchContext+0xa8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	fab3 f383 	clz	r3, r3
 800b198:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	f1c3 031f 	rsb	r3, r3, #31
 800b1a0:	617b      	str	r3, [r7, #20]
 800b1a2:	491e      	ldr	r1, [pc, #120]	; (800b21c <vTaskSwitchContext+0xac>)
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <vTaskSwitchContext+0x5c>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	607b      	str	r3, [r7, #4]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskSwitchContext+0x5a>
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4a11      	ldr	r2, [pc, #68]	; (800b21c <vTaskSwitchContext+0xac>)
 800b1d8:	4413      	add	r3, r2
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	605a      	str	r2, [r3, #4]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d104      	bne.n	800b1fc <vTaskSwitchContext+0x8c>
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	4a07      	ldr	r2, [pc, #28]	; (800b220 <vTaskSwitchContext+0xb0>)
 800b204:	6013      	str	r3, [r2, #0]
}
 800b206:	bf00      	nop
 800b208:	371c      	adds	r7, #28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr
 800b210:	2000101c 	.word	0x2000101c
 800b214:	20001008 	.word	0x20001008
 800b218:	20000ffc 	.word	0x20000ffc
 800b21c:	20000ef8 	.word	0x20000ef8
 800b220:	20000ef4 	.word	0x20000ef4

0800b224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b22c:	f000 f852 	bl	800b2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b230:	4b06      	ldr	r3, [pc, #24]	; (800b24c <prvIdleTask+0x28>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d9f9      	bls.n	800b22c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <prvIdleTask+0x2c>)
 800b23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b248:	e7f0      	b.n	800b22c <prvIdleTask+0x8>
 800b24a:	bf00      	nop
 800b24c:	20000ef8 	.word	0x20000ef8
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b25a:	2300      	movs	r3, #0
 800b25c:	607b      	str	r3, [r7, #4]
 800b25e:	e00c      	b.n	800b27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	4613      	mov	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <prvInitialiseTaskLists+0x60>)
 800b26c:	4413      	add	r3, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fb48 	bl	800a904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3301      	adds	r3, #1
 800b278:	607b      	str	r3, [r7, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b06      	cmp	r3, #6
 800b27e:	d9ef      	bls.n	800b260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b280:	480d      	ldr	r0, [pc, #52]	; (800b2b8 <prvInitialiseTaskLists+0x64>)
 800b282:	f7ff fb3f 	bl	800a904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b286:	480d      	ldr	r0, [pc, #52]	; (800b2bc <prvInitialiseTaskLists+0x68>)
 800b288:	f7ff fb3c 	bl	800a904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b28c:	480c      	ldr	r0, [pc, #48]	; (800b2c0 <prvInitialiseTaskLists+0x6c>)
 800b28e:	f7ff fb39 	bl	800a904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b292:	480c      	ldr	r0, [pc, #48]	; (800b2c4 <prvInitialiseTaskLists+0x70>)
 800b294:	f7ff fb36 	bl	800a904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b298:	480b      	ldr	r0, [pc, #44]	; (800b2c8 <prvInitialiseTaskLists+0x74>)
 800b29a:	f7ff fb33 	bl	800a904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b29e:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <prvInitialiseTaskLists+0x78>)
 800b2a0:	4a05      	ldr	r2, [pc, #20]	; (800b2b8 <prvInitialiseTaskLists+0x64>)
 800b2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <prvInitialiseTaskLists+0x7c>)
 800b2a6:	4a05      	ldr	r2, [pc, #20]	; (800b2bc <prvInitialiseTaskLists+0x68>)
 800b2a8:	601a      	str	r2, [r3, #0]
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000ef8 	.word	0x20000ef8
 800b2b8:	20000f84 	.word	0x20000f84
 800b2bc:	20000f98 	.word	0x20000f98
 800b2c0:	20000fb4 	.word	0x20000fb4
 800b2c4:	20000fc8 	.word	0x20000fc8
 800b2c8:	20000fe0 	.word	0x20000fe0
 800b2cc:	20000fac 	.word	0x20000fac
 800b2d0:	20000fb0 	.word	0x20000fb0

0800b2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2da:	e019      	b.n	800b310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2dc:	f000 f9ee 	bl	800b6bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b2e0:	4b10      	ldr	r3, [pc, #64]	; (800b324 <prvCheckTasksWaitingTermination+0x50>)
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fb8f 	bl	800aa10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2f2:	4b0d      	ldr	r3, [pc, #52]	; (800b328 <prvCheckTasksWaitingTermination+0x54>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4a0b      	ldr	r2, [pc, #44]	; (800b328 <prvCheckTasksWaitingTermination+0x54>)
 800b2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	; (800b32c <prvCheckTasksWaitingTermination+0x58>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	3b01      	subs	r3, #1
 800b302:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <prvCheckTasksWaitingTermination+0x58>)
 800b304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b306:	f000 fa09 	bl	800b71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f810 	bl	800b330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b310:	4b06      	ldr	r3, [pc, #24]	; (800b32c <prvCheckTasksWaitingTermination+0x58>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e1      	bne.n	800b2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b318:	bf00      	nop
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000fc8 	.word	0x20000fc8
 800b328:	20000ff4 	.word	0x20000ff4
 800b32c:	20000fdc 	.word	0x20000fdc

0800b330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d108      	bne.n	800b354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	4618      	mov	r0, r3
 800b348:	f000 fb3e 	bl	800b9c8 <vPortFree>
				vPortFree( pxTCB );
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fb3b 	bl	800b9c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b352:	e018      	b.n	800b386 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d103      	bne.n	800b366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fb32 	bl	800b9c8 <vPortFree>
	}
 800b364:	e00f      	b.n	800b386 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d00a      	beq.n	800b386 <prvDeleteTCB+0x56>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <prvDeleteTCB+0x54>
	}
 800b386:	bf00      	nop
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <prvResetNextTaskUnblockTime+0x40>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <prvResetNextTaskUnblockTime+0x14>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <prvResetNextTaskUnblockTime+0x16>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <prvResetNextTaskUnblockTime+0x44>)
 800b3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3b2:	e008      	b.n	800b3c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvResetNextTaskUnblockTime+0x40>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <prvResetNextTaskUnblockTime+0x44>)
 800b3c4:	6013      	str	r3, [r2, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bc80      	pop	{r7}
 800b3ce:	4770      	bx	lr
 800b3d0:	20000fac 	.word	0x20000fac
 800b3d4:	20001014 	.word	0x20001014

0800b3d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3de:	4b0b      	ldr	r3, [pc, #44]	; (800b40c <xTaskGetSchedulerState+0x34>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	e008      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <xTaskGetSchedulerState+0x38>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e001      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3fe:	687b      	ldr	r3, [r7, #4]
	}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	bc80      	pop	{r7}
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20001000 	.word	0x20001000
 800b410:	2000101c 	.word	0x2000101c

0800b414 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b41e:	4b29      	ldr	r3, [pc, #164]	; (800b4c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b424:	4b28      	ldr	r3, [pc, #160]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3304      	adds	r3, #4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff faf0 	bl	800aa10 <uxListRemove>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b436:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	2201      	movs	r2, #1
 800b43e:	fa02 f303 	lsl.w	r3, r2, r3
 800b442:	43da      	mvns	r2, r3
 800b444:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4013      	ands	r3, r2
 800b44a:	4a20      	ldr	r2, [pc, #128]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b44c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b454:	d10a      	bne.n	800b46c <prvAddCurrentTaskToDelayedList+0x58>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b45c:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3304      	adds	r3, #4
 800b462:	4619      	mov	r1, r3
 800b464:	481a      	ldr	r0, [pc, #104]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b466:	f7ff fa78 	bl	800a95a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b46a:	e026      	b.n	800b4ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b474:	4b14      	ldr	r3, [pc, #80]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	429a      	cmp	r2, r3
 800b482:	d209      	bcs.n	800b498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b484:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	4b0f      	ldr	r3, [pc, #60]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7ff fa85 	bl	800a9a0 <vListInsert>
}
 800b496:	e010      	b.n	800b4ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b498:	4b0f      	ldr	r3, [pc, #60]	; (800b4d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	f7ff fa7b 	bl	800a9a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4aa:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d202      	bcs.n	800b4ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b4b4:	4a09      	ldr	r2, [pc, #36]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6013      	str	r3, [r2, #0]
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20000ff8 	.word	0x20000ff8
 800b4c8:	20000ef4 	.word	0x20000ef4
 800b4cc:	20000ffc 	.word	0x20000ffc
 800b4d0:	20000fe0 	.word	0x20000fe0
 800b4d4:	20000fb0 	.word	0x20000fb0
 800b4d8:	20000fac 	.word	0x20000fac
 800b4dc:	20001014 	.word	0x20001014

0800b4e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3b04      	subs	r3, #4
 800b4f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3b04      	subs	r3, #4
 800b4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f023 0201 	bic.w	r2, r3, #1
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3b04      	subs	r3, #4
 800b50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b510:	4a08      	ldr	r2, [pc, #32]	; (800b534 <pxPortInitialiseStack+0x54>)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	3b14      	subs	r3, #20
 800b51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3b20      	subs	r3, #32
 800b526:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b528:	68fb      	ldr	r3, [r7, #12]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr
 800b534:	0800b539 	.word	0x0800b539

0800b538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b53e:	2300      	movs	r3, #0
 800b540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b542:	4b12      	ldr	r3, [pc, #72]	; (800b58c <prvTaskExitError+0x54>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54a:	d00a      	beq.n	800b562 <prvTaskExitError+0x2a>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60fb      	str	r3, [r7, #12]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <prvTaskExitError+0x28>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	60bb      	str	r3, [r7, #8]
}
 800b574:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b576:	bf00      	nop
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0fc      	beq.n	800b578 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20000920 	.word	0x20000920

0800b590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b590:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <pxCurrentTCBConst2>)
 800b592:	6819      	ldr	r1, [r3, #0]
 800b594:	6808      	ldr	r0, [r1, #0]
 800b596:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b59a:	f380 8809 	msr	PSP, r0
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f04f 0000 	mov.w	r0, #0
 800b5a6:	f380 8811 	msr	BASEPRI, r0
 800b5aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b5ae:	4770      	bx	lr

0800b5b0 <pxCurrentTCBConst2>:
 800b5b0:	20000ef4 	.word	0x20000ef4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop

0800b5b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b5b8:	4806      	ldr	r0, [pc, #24]	; (800b5d4 <prvPortStartFirstTask+0x1c>)
 800b5ba:	6800      	ldr	r0, [r0, #0]
 800b5bc:	6800      	ldr	r0, [r0, #0]
 800b5be:	f380 8808 	msr	MSP, r0
 800b5c2:	b662      	cpsie	i
 800b5c4:	b661      	cpsie	f
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	df00      	svc	0
 800b5d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5d2:	bf00      	nop
 800b5d4:	e000ed08 	.word	0xe000ed08

0800b5d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5de:	4b32      	ldr	r3, [pc, #200]	; (800b6a8 <xPortStartScheduler+0xd0>)
 800b5e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	22ff      	movs	r2, #255	; 0xff
 800b5ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b600:	b2da      	uxtb	r2, r3
 800b602:	4b2a      	ldr	r3, [pc, #168]	; (800b6ac <xPortStartScheduler+0xd4>)
 800b604:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b606:	4b2a      	ldr	r3, [pc, #168]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b608:	2207      	movs	r2, #7
 800b60a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b60c:	e009      	b.n	800b622 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b60e:	4b28      	ldr	r3, [pc, #160]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3b01      	subs	r3, #1
 800b614:	4a26      	ldr	r2, [pc, #152]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b616:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d0ef      	beq.n	800b60e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b62e:	4b20      	ldr	r3, [pc, #128]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1c3 0307 	rsb	r3, r3, #7
 800b636:	2b04      	cmp	r3, #4
 800b638:	d00a      	beq.n	800b650 <xPortStartScheduler+0x78>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	60bb      	str	r3, [r7, #8]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b650:	4b17      	ldr	r3, [pc, #92]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	021b      	lsls	r3, r3, #8
 800b656:	4a16      	ldr	r2, [pc, #88]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b658:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b65a:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b662:	4a13      	ldr	r2, [pc, #76]	; (800b6b0 <xPortStartScheduler+0xd8>)
 800b664:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b66e:	4b11      	ldr	r3, [pc, #68]	; (800b6b4 <xPortStartScheduler+0xdc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a10      	ldr	r2, [pc, #64]	; (800b6b4 <xPortStartScheduler+0xdc>)
 800b674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b67a:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <xPortStartScheduler+0xdc>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a0d      	ldr	r2, [pc, #52]	; (800b6b4 <xPortStartScheduler+0xdc>)
 800b680:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b684:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b686:	f000 f8b9 	bl	800b7fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <xPortStartScheduler+0xe0>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b690:	f7ff ff92 	bl	800b5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b694:	f7ff fd6c 	bl	800b170 <vTaskSwitchContext>
	prvTaskExitError();
 800b698:	f7ff ff4e 	bl	800b538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	e000e400 	.word	0xe000e400
 800b6ac:	20001020 	.word	0x20001020
 800b6b0:	20001024 	.word	0x20001024
 800b6b4:	e000ed20 	.word	0xe000ed20
 800b6b8:	20000920 	.word	0x20000920

0800b6bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	607b      	str	r3, [r7, #4]
}
 800b6d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6d6:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <vPortEnterCritical+0x58>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	4a0d      	ldr	r2, [pc, #52]	; (800b714 <vPortEnterCritical+0x58>)
 800b6de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6e0:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <vPortEnterCritical+0x58>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d10f      	bne.n	800b708 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6e8:	4b0b      	ldr	r3, [pc, #44]	; (800b718 <vPortEnterCritical+0x5c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	603b      	str	r3, [r7, #0]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <vPortEnterCritical+0x4a>
	}
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20000920 	.word	0x20000920
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b722:	4b11      	ldr	r3, [pc, #68]	; (800b768 <vPortExitCritical+0x4c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <vPortExitCritical+0x24>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	607b      	str	r3, [r7, #4]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b740:	4b09      	ldr	r3, [pc, #36]	; (800b768 <vPortExitCritical+0x4c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3b01      	subs	r3, #1
 800b746:	4a08      	ldr	r2, [pc, #32]	; (800b768 <vPortExitCritical+0x4c>)
 800b748:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <vPortExitCritical+0x4c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <vPortExitCritical+0x42>
 800b752:	2300      	movs	r3, #0
 800b754:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b75c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr
 800b768:	20000920 	.word	0x20000920
 800b76c:	00000000 	.word	0x00000000

0800b770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b770:	f3ef 8009 	mrs	r0, PSP
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <pxCurrentTCBConst>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b780:	6010      	str	r0, [r2, #0]
 800b782:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b786:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b78a:	f380 8811 	msr	BASEPRI, r0
 800b78e:	f7ff fcef 	bl	800b170 <vTaskSwitchContext>
 800b792:	f04f 0000 	mov.w	r0, #0
 800b796:	f380 8811 	msr	BASEPRI, r0
 800b79a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b79e:	6819      	ldr	r1, [r3, #0]
 800b7a0:	6808      	ldr	r0, [r1, #0]
 800b7a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b7a6:	f380 8809 	msr	PSP, r0
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	4770      	bx	lr

0800b7b0 <pxCurrentTCBConst>:
 800b7b0:	20000ef4 	.word	0x20000ef4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7b4:	bf00      	nop
 800b7b6:	bf00      	nop

0800b7b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	607b      	str	r3, [r7, #4]
}
 800b7d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7d2:	f7ff fc0f 	bl	800aff4 <xTaskIncrementTick>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <xPortSysTickHandler+0x40>)
 800b7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f383 8811 	msr	BASEPRI, r3
}
 800b7ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <vPortSetupTimerInterrupt+0x30>)
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b806:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <vPortSetupTimerInterrupt+0x34>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <vPortSetupTimerInterrupt+0x38>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a09      	ldr	r2, [pc, #36]	; (800b838 <vPortSetupTimerInterrupt+0x3c>)
 800b812:	fba2 2303 	umull	r2, r3, r2, r3
 800b816:	099b      	lsrs	r3, r3, #6
 800b818:	4a08      	ldr	r2, [pc, #32]	; (800b83c <vPortSetupTimerInterrupt+0x40>)
 800b81a:	3b01      	subs	r3, #1
 800b81c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b81e:	4b03      	ldr	r3, [pc, #12]	; (800b82c <vPortSetupTimerInterrupt+0x30>)
 800b820:	2207      	movs	r2, #7
 800b822:	601a      	str	r2, [r3, #0]
}
 800b824:	bf00      	nop
 800b826:	46bd      	mov	sp, r7
 800b828:	bc80      	pop	{r7}
 800b82a:	4770      	bx	lr
 800b82c:	e000e010 	.word	0xe000e010
 800b830:	e000e018 	.word	0xe000e018
 800b834:	20000914 	.word	0x20000914
 800b838:	10624dd3 	.word	0x10624dd3
 800b83c:	e000e014 	.word	0xe000e014

0800b840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08a      	sub	sp, #40	; 0x28
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b84c:	f7ff fb28 	bl	800aea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b850:	4b58      	ldr	r3, [pc, #352]	; (800b9b4 <pvPortMalloc+0x174>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b858:	f000 f910 	bl	800ba7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b85c:	4b56      	ldr	r3, [pc, #344]	; (800b9b8 <pvPortMalloc+0x178>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4013      	ands	r3, r2
 800b864:	2b00      	cmp	r3, #0
 800b866:	f040 808e 	bne.w	800b986 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01d      	beq.n	800b8ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b870:	2208      	movs	r2, #8
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4413      	add	r3, r2
 800b876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d014      	beq.n	800b8ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	3308      	adds	r3, #8
 800b88a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <pvPortMalloc+0x6c>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	617b      	str	r3, [r7, #20]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d069      	beq.n	800b986 <pvPortMalloc+0x146>
 800b8b2:	4b42      	ldr	r3, [pc, #264]	; (800b9bc <pvPortMalloc+0x17c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d864      	bhi.n	800b986 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8bc:	4b40      	ldr	r3, [pc, #256]	; (800b9c0 <pvPortMalloc+0x180>)
 800b8be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8c0:	4b3f      	ldr	r3, [pc, #252]	; (800b9c0 <pvPortMalloc+0x180>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8c6:	e004      	b.n	800b8d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d903      	bls.n	800b8e4 <pvPortMalloc+0xa4>
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1f1      	bne.n	800b8c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8e4:	4b33      	ldr	r3, [pc, #204]	; (800b9b4 <pvPortMalloc+0x174>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d04b      	beq.n	800b986 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	4413      	add	r3, r2
 800b8f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	1ad2      	subs	r2, r2, r3
 800b908:	2308      	movs	r3, #8
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d91f      	bls.n	800b950 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <pvPortMalloc+0xf8>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	613b      	str	r3, [r7, #16]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	1ad2      	subs	r2, r2, r3
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b94a:	69b8      	ldr	r0, [r7, #24]
 800b94c:	f000 f8f8 	bl	800bb40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b950:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <pvPortMalloc+0x17c>)
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	4a18      	ldr	r2, [pc, #96]	; (800b9bc <pvPortMalloc+0x17c>)
 800b95c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b95e:	4b17      	ldr	r3, [pc, #92]	; (800b9bc <pvPortMalloc+0x17c>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <pvPortMalloc+0x184>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d203      	bcs.n	800b972 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b96a:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <pvPortMalloc+0x17c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a15      	ldr	r2, [pc, #84]	; (800b9c4 <pvPortMalloc+0x184>)
 800b970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <pvPortMalloc+0x178>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	431a      	orrs	r2, r3
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b986:	f7ff fa99 	bl	800aebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	f003 0307 	and.w	r3, r3, #7
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00a      	beq.n	800b9aa <pvPortMalloc+0x16a>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	60fb      	str	r3, [r7, #12]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <pvPortMalloc+0x168>
	return pvReturn;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3728      	adds	r7, #40	; 0x28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	20001c30 	.word	0x20001c30
 800b9b8:	20001c3c 	.word	0x20001c3c
 800b9bc:	20001c34 	.word	0x20001c34
 800b9c0:	20001c28 	.word	0x20001c28
 800b9c4:	20001c38 	.word	0x20001c38

0800b9c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d048      	beq.n	800ba6c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9da:	2308      	movs	r3, #8
 800b9dc:	425b      	negs	r3, r3
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	4b21      	ldr	r3, [pc, #132]	; (800ba74 <vPortFree+0xac>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <vPortFree+0x44>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00a      	beq.n	800ba2a <vPortFree+0x62>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	60bb      	str	r3, [r7, #8]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <vPortFree+0xac>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d019      	beq.n	800ba6c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d115      	bne.n	800ba6c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <vPortFree+0xac>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	43db      	mvns	r3, r3
 800ba4a:	401a      	ands	r2, r3
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba50:	f7ff fa26 	bl	800aea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <vPortFree+0xb0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	4a06      	ldr	r2, [pc, #24]	; (800ba78 <vPortFree+0xb0>)
 800ba60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba62:	6938      	ldr	r0, [r7, #16]
 800ba64:	f000 f86c 	bl	800bb40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ba68:	f7ff fa28 	bl	800aebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20001c3c 	.word	0x20001c3c
 800ba78:	20001c34 	.word	0x20001c34

0800ba7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ba86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba88:	4b27      	ldr	r3, [pc, #156]	; (800bb28 <prvHeapInit+0xac>)
 800ba8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f003 0307 	and.w	r3, r3, #7
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00c      	beq.n	800bab0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3307      	adds	r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	4a1f      	ldr	r2, [pc, #124]	; (800bb28 <prvHeapInit+0xac>)
 800baac:	4413      	add	r3, r2
 800baae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bab4:	4a1d      	ldr	r2, [pc, #116]	; (800bb2c <prvHeapInit+0xb0>)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baba:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <prvHeapInit+0xb0>)
 800babc:	2200      	movs	r2, #0
 800babe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	4413      	add	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bac8:	2208      	movs	r2, #8
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	1a9b      	subs	r3, r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f023 0307 	bic.w	r3, r3, #7
 800bad6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4a15      	ldr	r2, [pc, #84]	; (800bb30 <prvHeapInit+0xb4>)
 800badc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bade:	4b14      	ldr	r3, [pc, #80]	; (800bb30 <prvHeapInit+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bae6:	4b12      	ldr	r3, [pc, #72]	; (800bb30 <prvHeapInit+0xb4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	1ad2      	subs	r2, r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bafc:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <prvHeapInit+0xb4>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a0a      	ldr	r2, [pc, #40]	; (800bb34 <prvHeapInit+0xb8>)
 800bb0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	4a09      	ldr	r2, [pc, #36]	; (800bb38 <prvHeapInit+0xbc>)
 800bb12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb14:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <prvHeapInit+0xc0>)
 800bb16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb1a:	601a      	str	r2, [r3, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bc80      	pop	{r7}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20001028 	.word	0x20001028
 800bb2c:	20001c28 	.word	0x20001c28
 800bb30:	20001c30 	.word	0x20001c30
 800bb34:	20001c38 	.word	0x20001c38
 800bb38:	20001c34 	.word	0x20001c34
 800bb3c:	20001c3c 	.word	0x20001c3c

0800bb40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb48:	4b27      	ldr	r3, [pc, #156]	; (800bbe8 <prvInsertBlockIntoFreeList+0xa8>)
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	e002      	b.n	800bb54 <prvInsertBlockIntoFreeList+0x14>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d8f7      	bhi.n	800bb4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	4413      	add	r3, r2
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d108      	bne.n	800bb82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	441a      	add	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	441a      	add	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d118      	bne.n	800bbc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4b14      	ldr	r3, [pc, #80]	; (800bbec <prvInsertBlockIntoFreeList+0xac>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d00d      	beq.n	800bbbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	441a      	add	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	e008      	b.n	800bbd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <prvInsertBlockIntoFreeList+0xac>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	e003      	b.n	800bbd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d002      	beq.n	800bbde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr
 800bbe8:	20001c28 	.word	0x20001c28
 800bbec:	20001c30 	.word	0x20001c30

0800bbf0 <__itoa>:
 800bbf0:	1e93      	subs	r3, r2, #2
 800bbf2:	2b22      	cmp	r3, #34	; 0x22
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	d904      	bls.n	800bc04 <__itoa+0x14>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	461c      	mov	r4, r3
 800bbfe:	700b      	strb	r3, [r1, #0]
 800bc00:	4620      	mov	r0, r4
 800bc02:	bd10      	pop	{r4, pc}
 800bc04:	2a0a      	cmp	r2, #10
 800bc06:	d109      	bne.n	800bc1c <__itoa+0x2c>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	da07      	bge.n	800bc1c <__itoa+0x2c>
 800bc0c:	232d      	movs	r3, #45	; 0x2d
 800bc0e:	700b      	strb	r3, [r1, #0]
 800bc10:	2101      	movs	r1, #1
 800bc12:	4240      	negs	r0, r0
 800bc14:	4421      	add	r1, r4
 800bc16:	f000 f8b9 	bl	800bd8c <__utoa>
 800bc1a:	e7f1      	b.n	800bc00 <__itoa+0x10>
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	e7f9      	b.n	800bc14 <__itoa+0x24>

0800bc20 <itoa>:
 800bc20:	f7ff bfe6 	b.w	800bbf0 <__itoa>

0800bc24 <malloc>:
 800bc24:	4b02      	ldr	r3, [pc, #8]	; (800bc30 <malloc+0xc>)
 800bc26:	4601      	mov	r1, r0
 800bc28:	6818      	ldr	r0, [r3, #0]
 800bc2a:	f000 b823 	b.w	800bc74 <_malloc_r>
 800bc2e:	bf00      	nop
 800bc30:	20000970 	.word	0x20000970

0800bc34 <sbrk_aligned>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	4e0e      	ldr	r6, [pc, #56]	; (800bc70 <sbrk_aligned+0x3c>)
 800bc38:	460c      	mov	r4, r1
 800bc3a:	6831      	ldr	r1, [r6, #0]
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	b911      	cbnz	r1, 800bc46 <sbrk_aligned+0x12>
 800bc40:	f000 f8ee 	bl	800be20 <_sbrk_r>
 800bc44:	6030      	str	r0, [r6, #0]
 800bc46:	4621      	mov	r1, r4
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f000 f8e9 	bl	800be20 <_sbrk_r>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d00a      	beq.n	800bc68 <sbrk_aligned+0x34>
 800bc52:	1cc4      	adds	r4, r0, #3
 800bc54:	f024 0403 	bic.w	r4, r4, #3
 800bc58:	42a0      	cmp	r0, r4
 800bc5a:	d007      	beq.n	800bc6c <sbrk_aligned+0x38>
 800bc5c:	1a21      	subs	r1, r4, r0
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f000 f8de 	bl	800be20 <_sbrk_r>
 800bc64:	3001      	adds	r0, #1
 800bc66:	d101      	bne.n	800bc6c <sbrk_aligned+0x38>
 800bc68:	f04f 34ff 	mov.w	r4, #4294967295
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	20001c44 	.word	0x20001c44

0800bc74 <_malloc_r>:
 800bc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc78:	1ccd      	adds	r5, r1, #3
 800bc7a:	f025 0503 	bic.w	r5, r5, #3
 800bc7e:	3508      	adds	r5, #8
 800bc80:	2d0c      	cmp	r5, #12
 800bc82:	bf38      	it	cc
 800bc84:	250c      	movcc	r5, #12
 800bc86:	2d00      	cmp	r5, #0
 800bc88:	4607      	mov	r7, r0
 800bc8a:	db01      	blt.n	800bc90 <_malloc_r+0x1c>
 800bc8c:	42a9      	cmp	r1, r5
 800bc8e:	d905      	bls.n	800bc9c <_malloc_r+0x28>
 800bc90:	230c      	movs	r3, #12
 800bc92:	2600      	movs	r6, #0
 800bc94:	603b      	str	r3, [r7, #0]
 800bc96:	4630      	mov	r0, r6
 800bc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd70 <_malloc_r+0xfc>
 800bca0:	f000 f868 	bl	800bd74 <__malloc_lock>
 800bca4:	f8d8 3000 	ldr.w	r3, [r8]
 800bca8:	461c      	mov	r4, r3
 800bcaa:	bb5c      	cbnz	r4, 800bd04 <_malloc_r+0x90>
 800bcac:	4629      	mov	r1, r5
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f7ff ffc0 	bl	800bc34 <sbrk_aligned>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	d155      	bne.n	800bd66 <_malloc_r+0xf2>
 800bcba:	f8d8 4000 	ldr.w	r4, [r8]
 800bcbe:	4626      	mov	r6, r4
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	d145      	bne.n	800bd50 <_malloc_r+0xdc>
 800bcc4:	2c00      	cmp	r4, #0
 800bcc6:	d048      	beq.n	800bd5a <_malloc_r+0xe6>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	4631      	mov	r1, r6
 800bccc:	4638      	mov	r0, r7
 800bcce:	eb04 0903 	add.w	r9, r4, r3
 800bcd2:	f000 f8a5 	bl	800be20 <_sbrk_r>
 800bcd6:	4581      	cmp	r9, r0
 800bcd8:	d13f      	bne.n	800bd5a <_malloc_r+0xe6>
 800bcda:	6821      	ldr	r1, [r4, #0]
 800bcdc:	4638      	mov	r0, r7
 800bcde:	1a6d      	subs	r5, r5, r1
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7ff ffa7 	bl	800bc34 <sbrk_aligned>
 800bce6:	3001      	adds	r0, #1
 800bce8:	d037      	beq.n	800bd5a <_malloc_r+0xe6>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	442b      	add	r3, r5
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	f8d8 3000 	ldr.w	r3, [r8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d038      	beq.n	800bd6a <_malloc_r+0xf6>
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	42a2      	cmp	r2, r4
 800bcfc:	d12b      	bne.n	800bd56 <_malloc_r+0xe2>
 800bcfe:	2200      	movs	r2, #0
 800bd00:	605a      	str	r2, [r3, #4]
 800bd02:	e00f      	b.n	800bd24 <_malloc_r+0xb0>
 800bd04:	6822      	ldr	r2, [r4, #0]
 800bd06:	1b52      	subs	r2, r2, r5
 800bd08:	d41f      	bmi.n	800bd4a <_malloc_r+0xd6>
 800bd0a:	2a0b      	cmp	r2, #11
 800bd0c:	d917      	bls.n	800bd3e <_malloc_r+0xca>
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	6025      	str	r5, [r4, #0]
 800bd14:	bf18      	it	ne
 800bd16:	6059      	strne	r1, [r3, #4]
 800bd18:	6863      	ldr	r3, [r4, #4]
 800bd1a:	bf08      	it	eq
 800bd1c:	f8c8 1000 	streq.w	r1, [r8]
 800bd20:	5162      	str	r2, [r4, r5]
 800bd22:	604b      	str	r3, [r1, #4]
 800bd24:	4638      	mov	r0, r7
 800bd26:	f104 060b 	add.w	r6, r4, #11
 800bd2a:	f000 f829 	bl	800bd80 <__malloc_unlock>
 800bd2e:	f026 0607 	bic.w	r6, r6, #7
 800bd32:	1d23      	adds	r3, r4, #4
 800bd34:	1af2      	subs	r2, r6, r3
 800bd36:	d0ae      	beq.n	800bc96 <_malloc_r+0x22>
 800bd38:	1b9b      	subs	r3, r3, r6
 800bd3a:	50a3      	str	r3, [r4, r2]
 800bd3c:	e7ab      	b.n	800bc96 <_malloc_r+0x22>
 800bd3e:	42a3      	cmp	r3, r4
 800bd40:	6862      	ldr	r2, [r4, #4]
 800bd42:	d1dd      	bne.n	800bd00 <_malloc_r+0x8c>
 800bd44:	f8c8 2000 	str.w	r2, [r8]
 800bd48:	e7ec      	b.n	800bd24 <_malloc_r+0xb0>
 800bd4a:	4623      	mov	r3, r4
 800bd4c:	6864      	ldr	r4, [r4, #4]
 800bd4e:	e7ac      	b.n	800bcaa <_malloc_r+0x36>
 800bd50:	4634      	mov	r4, r6
 800bd52:	6876      	ldr	r6, [r6, #4]
 800bd54:	e7b4      	b.n	800bcc0 <_malloc_r+0x4c>
 800bd56:	4613      	mov	r3, r2
 800bd58:	e7cc      	b.n	800bcf4 <_malloc_r+0x80>
 800bd5a:	230c      	movs	r3, #12
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	603b      	str	r3, [r7, #0]
 800bd60:	f000 f80e 	bl	800bd80 <__malloc_unlock>
 800bd64:	e797      	b.n	800bc96 <_malloc_r+0x22>
 800bd66:	6025      	str	r5, [r4, #0]
 800bd68:	e7dc      	b.n	800bd24 <_malloc_r+0xb0>
 800bd6a:	605b      	str	r3, [r3, #4]
 800bd6c:	deff      	udf	#255	; 0xff
 800bd6e:	bf00      	nop
 800bd70:	20001c40 	.word	0x20001c40

0800bd74 <__malloc_lock>:
 800bd74:	4801      	ldr	r0, [pc, #4]	; (800bd7c <__malloc_lock+0x8>)
 800bd76:	f000 b88d 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800bd7a:	bf00      	nop
 800bd7c:	20001d84 	.word	0x20001d84

0800bd80 <__malloc_unlock>:
 800bd80:	4801      	ldr	r0, [pc, #4]	; (800bd88 <__malloc_unlock+0x8>)
 800bd82:	f000 b888 	b.w	800be96 <__retarget_lock_release_recursive>
 800bd86:	bf00      	nop
 800bd88:	20001d84 	.word	0x20001d84

0800bd8c <__utoa>:
 800bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8e:	b08b      	sub	sp, #44	; 0x2c
 800bd90:	4605      	mov	r5, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	466e      	mov	r6, sp
 800bd96:	4c1d      	ldr	r4, [pc, #116]	; (800be0c <__utoa+0x80>)
 800bd98:	f104 0c20 	add.w	ip, r4, #32
 800bd9c:	4637      	mov	r7, r6
 800bd9e:	6820      	ldr	r0, [r4, #0]
 800bda0:	6861      	ldr	r1, [r4, #4]
 800bda2:	3408      	adds	r4, #8
 800bda4:	c703      	stmia	r7!, {r0, r1}
 800bda6:	4564      	cmp	r4, ip
 800bda8:	463e      	mov	r6, r7
 800bdaa:	d1f7      	bne.n	800bd9c <__utoa+0x10>
 800bdac:	7921      	ldrb	r1, [r4, #4]
 800bdae:	6820      	ldr	r0, [r4, #0]
 800bdb0:	7139      	strb	r1, [r7, #4]
 800bdb2:	1e91      	subs	r1, r2, #2
 800bdb4:	2922      	cmp	r1, #34	; 0x22
 800bdb6:	6038      	str	r0, [r7, #0]
 800bdb8:	f04f 0100 	mov.w	r1, #0
 800bdbc:	d904      	bls.n	800bdc8 <__utoa+0x3c>
 800bdbe:	7019      	strb	r1, [r3, #0]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	b00b      	add	sp, #44	; 0x2c
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc8:	1e58      	subs	r0, r3, #1
 800bdca:	4684      	mov	ip, r0
 800bdcc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bdd0:	fb02 5617 	mls	r6, r2, r7, r5
 800bdd4:	3628      	adds	r6, #40	; 0x28
 800bdd6:	446e      	add	r6, sp
 800bdd8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bddc:	460c      	mov	r4, r1
 800bdde:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bde2:	462e      	mov	r6, r5
 800bde4:	42b2      	cmp	r2, r6
 800bde6:	463d      	mov	r5, r7
 800bde8:	f101 0101 	add.w	r1, r1, #1
 800bdec:	d9ee      	bls.n	800bdcc <__utoa+0x40>
 800bdee:	2200      	movs	r2, #0
 800bdf0:	545a      	strb	r2, [r3, r1]
 800bdf2:	1919      	adds	r1, r3, r4
 800bdf4:	1aa5      	subs	r5, r4, r2
 800bdf6:	42aa      	cmp	r2, r5
 800bdf8:	dae3      	bge.n	800bdc2 <__utoa+0x36>
 800bdfa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bdfe:	780e      	ldrb	r6, [r1, #0]
 800be00:	3201      	adds	r2, #1
 800be02:	7006      	strb	r6, [r0, #0]
 800be04:	f801 5901 	strb.w	r5, [r1], #-1
 800be08:	e7f4      	b.n	800bdf4 <__utoa+0x68>
 800be0a:	bf00      	nop
 800be0c:	0800cc5c 	.word	0x0800cc5c

0800be10 <memset>:
 800be10:	4603      	mov	r3, r0
 800be12:	4402      	add	r2, r0
 800be14:	4293      	cmp	r3, r2
 800be16:	d100      	bne.n	800be1a <memset+0xa>
 800be18:	4770      	bx	lr
 800be1a:	f803 1b01 	strb.w	r1, [r3], #1
 800be1e:	e7f9      	b.n	800be14 <memset+0x4>

0800be20 <_sbrk_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	2300      	movs	r3, #0
 800be24:	4d05      	ldr	r5, [pc, #20]	; (800be3c <_sbrk_r+0x1c>)
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7fb fc66 	bl	80076fc <_sbrk>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_sbrk_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_sbrk_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20001d80 	.word	0x20001d80

0800be40 <__errno>:
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <__errno+0x8>)
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20000970 	.word	0x20000970

0800be4c <__libc_init_array>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	2600      	movs	r6, #0
 800be50:	4d0c      	ldr	r5, [pc, #48]	; (800be84 <__libc_init_array+0x38>)
 800be52:	4c0d      	ldr	r4, [pc, #52]	; (800be88 <__libc_init_array+0x3c>)
 800be54:	1b64      	subs	r4, r4, r5
 800be56:	10a4      	asrs	r4, r4, #2
 800be58:	42a6      	cmp	r6, r4
 800be5a:	d109      	bne.n	800be70 <__libc_init_array+0x24>
 800be5c:	f000 f824 	bl	800bea8 <_init>
 800be60:	2600      	movs	r6, #0
 800be62:	4d0a      	ldr	r5, [pc, #40]	; (800be8c <__libc_init_array+0x40>)
 800be64:	4c0a      	ldr	r4, [pc, #40]	; (800be90 <__libc_init_array+0x44>)
 800be66:	1b64      	subs	r4, r4, r5
 800be68:	10a4      	asrs	r4, r4, #2
 800be6a:	42a6      	cmp	r6, r4
 800be6c:	d105      	bne.n	800be7a <__libc_init_array+0x2e>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	f855 3b04 	ldr.w	r3, [r5], #4
 800be74:	4798      	blx	r3
 800be76:	3601      	adds	r6, #1
 800be78:	e7ee      	b.n	800be58 <__libc_init_array+0xc>
 800be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7e:	4798      	blx	r3
 800be80:	3601      	adds	r6, #1
 800be82:	e7f2      	b.n	800be6a <__libc_init_array+0x1e>
 800be84:	0800cc84 	.word	0x0800cc84
 800be88:	0800cc84 	.word	0x0800cc84
 800be8c:	0800cc84 	.word	0x0800cc84
 800be90:	0800cc88 	.word	0x0800cc88

0800be94 <__retarget_lock_acquire_recursive>:
 800be94:	4770      	bx	lr

0800be96 <__retarget_lock_release_recursive>:
 800be96:	4770      	bx	lr

0800be98 <strcpy>:
 800be98:	4603      	mov	r3, r0
 800be9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be9e:	f803 2b01 	strb.w	r2, [r3], #1
 800bea2:	2a00      	cmp	r2, #0
 800bea4:	d1f9      	bne.n	800be9a <strcpy+0x2>
 800bea6:	4770      	bx	lr

0800bea8 <_init>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	bf00      	nop
 800beac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beae:	bc08      	pop	{r3}
 800beb0:	469e      	mov	lr, r3
 800beb2:	4770      	bx	lr

0800beb4 <_fini>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	bf00      	nop
 800beb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beba:	bc08      	pop	{r3}
 800bebc:	469e      	mov	lr, r3
 800bebe:	4770      	bx	lr
