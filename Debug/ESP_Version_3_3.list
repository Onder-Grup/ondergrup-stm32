
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800715c  0800715c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800715c  0800715c  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800715c  0800715c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08007164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  200000e8  0800724c  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  0800724c  000212a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001559e  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7f  00000000  00000000  000356af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00039910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2b0  00000000  00000000  0003ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f4f  00000000  00000000  00056fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7cfa  00000000  00000000  0006ff07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb8  00000000  00000000  00117c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000e8 	.word	0x200000e8
 800020c:	00000000 	.word	0x00000000
 8000210:	080063c4 	.word	0x080063c4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000ec 	.word	0x200000ec
 800022c:	080063c4 	.word	0x080063c4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000104 	.word	0x20000104
 800026c:	20000158 	.word	0x20000158

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <lcd_send_cmd+0x78>)
 80002b4:	f002 fbcf 	bl	8002a56 <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80002be:	bf00      	nop
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <lcd_send_cmd+0x78>)
 80002c2:	f002 fbbb 	bl	8002a3c <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2304      	movs	r3, #4
 80002d6:	214e      	movs	r1, #78	; 0x4e
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <lcd_send_cmd+0x78>)
 80002da:	f002 f849 	bl	8002370 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000460 	.word	0x20000460

080002ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f043 030d 	orr.w	r3, r3, #13
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f043 0309 	orr.w	r3, r3, #9
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800032c:	bf00      	nop
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <lcd_send_data+0x78>)
 8000330:	f002 fb91 	bl	8002a56 <HAL_I2C_GetError>
 8000334:	4603      	mov	r3, r0
 8000336:	2b04      	cmp	r3, #4
 8000338:	d0f9      	beq.n	800032e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800033a:	bf00      	nop
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <lcd_send_data+0x78>)
 800033e:	f002 fb7d 	bl	8002a3c <HAL_I2C_GetState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b20      	cmp	r3, #32
 8000346:	d1f9      	bne.n	800033c <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	214e      	movs	r1, #78	; 0x4e
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <lcd_send_data+0x78>)
 8000356:	f002 f80b 	bl	8002370 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000460 	.word	0x20000460

08000368 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000370:	e006      	b.n	8000380 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb6 	bl	80002ec <lcd_send_data>
	while (*str)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <lcd_send_string+0xa>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcd_init>:

void lcd_init (void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff6a 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f7ff ff67 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ff64 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f7ff ff61 	bl	8000270 <lcd_send_cmd>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	337f      	adds	r3, #127	; 0x7f
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80003d4:	e008      	b.n	80003e8 <lcd_gotoxy+0x36>
 else if(row == 2)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d105      	bne.n	80003e8 <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	603a      	str	r2, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	460b      	mov	r3, r1
 80003fe:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffd3 	bl	80003b2 <lcd_gotoxy>
 lcd_send_string(str);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffab 	bl	8000368 <lcd_send_string>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_clear>:

void lcd_clear(void) {
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff26 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 8000424:	2002      	movs	r0, #2
 8000426:	f001 f971 	bl	800170c <HAL_Delay>

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_TIM_PeriodElapsedCallback>:
		lcd_print(2, 7, "          ");
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	4a03      	ldr	r2, [pc, #12]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000398 	.word	0x20000398

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5b0      	push	{r4, r5, r7, lr}
 8000452:	b08a      	sub	sp, #40	; 0x28
 8000454:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f001 f8f7 	bl	8001648 <HAL_Init>

  /* USER CODE BEGIN Init */
  run_delay();
 800045a:	f000 f909 	bl	8000670 <run_delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 fd33 	bl	8000ec8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f000 fe55 	bl	8001110 <MX_GPIO_Init>
  MX_CAN_Init();
 8000466:	f000 fd75 	bl	8000f54 <MX_CAN_Init>
  MX_I2C1_Init();
 800046a:	f000 fda7 	bl	8000fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 800046e:	f000 fdd3 	bl	8001018 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000472:	f000 fe23 	bl	80010bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	484f      	ldr	r0, [pc, #316]	; (80005b8 <main+0x168>)
 800047c:	f001 fdeb 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	484c      	ldr	r0, [pc, #304]	; (80005b8 <main+0x168>)
 8000486:	f001 fde6 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800048a:	200a      	movs	r0, #10
 800048c:	f001 f93e 	bl	800170c <HAL_Delay>
  lcd_init();
 8000490:	f7ff ff7f 	bl	8000392 <lcd_init>
  HAL_Delay(10);
 8000494:	200a      	movs	r0, #10
 8000496:	f001 f939 	bl	800170c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800049a:	4848      	ldr	r0, [pc, #288]	; (80005bc <main+0x16c>)
 800049c:	f003 fa96 	bl	80039cc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004a0:	bf00      	nop
 80004a2:	4847      	ldr	r0, [pc, #284]	; (80005c0 <main+0x170>)
 80004a4:	f002 fad7 	bl	8002a56 <HAL_I2C_GetError>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d0f9      	beq.n	80004a2 <main+0x52>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004ae:	bf00      	nop
 80004b0:	4843      	ldr	r0, [pc, #268]	; (80005c0 <main+0x170>)
 80004b2:	f002 fac3 	bl	8002a3c <HAL_I2C_GetState>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b20      	cmp	r3, #32
 80004ba:	d1f9      	bne.n	80004b0 <main+0x60>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c2:	483d      	ldr	r0, [pc, #244]	; (80005b8 <main+0x168>)
 80004c4:	f001 fdc7 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	483a      	ldr	r0, [pc, #232]	; (80005b8 <main+0x168>)
 80004d0:	f001 fdc1 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2104      	movs	r1, #4
 80004d8:	4837      	ldr	r0, [pc, #220]	; (80005b8 <main+0x168>)
 80004da:	f001 fdbc 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2102      	movs	r1, #2
 80004e2:	4835      	ldr	r0, [pc, #212]	; (80005b8 <main+0x168>)
 80004e4:	f001 fdb7 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	4832      	ldr	r0, [pc, #200]	; (80005b8 <main+0x168>)
 80004ee:	f001 fdb2 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2120      	movs	r1, #32
 80004f6:	4833      	ldr	r0, [pc, #204]	; (80005c4 <main+0x174>)
 80004f8:	f001 fdad 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	4830      	ldr	r0, [pc, #192]	; (80005c4 <main+0x174>)
 8000502:	f001 fda8 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	482f      	ldr	r0, [pc, #188]	; (80005c8 <main+0x178>)
 800050c:	f001 fda3 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	482c      	ldr	r0, [pc, #176]	; (80005c8 <main+0x178>)
 8000516:	f001 fd9e 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <main+0x178>)
 8000520:	f001 fd99 	bl	8002056 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2110      	movs	r1, #16
 8000528:	4827      	ldr	r0, [pc, #156]	; (80005c8 <main+0x178>)
 800052a:	f001 fd94 	bl	8002056 <HAL_GPIO_WritePin>

  i2cTest();
 800052e:	f000 f8a7 	bl	8000680 <i2cTest>
  HAL_Delay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f001 f8ea 	bl	800170c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <main+0x17c>)
 800053a:	2101      	movs	r1, #1
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff57 	bl	80003f0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <main+0x180>)
 8000544:	2101      	movs	r1, #1
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff ff52 	bl	80003f0 <lcd_print>
  HAL_Delay(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f001 f8dc 	bl	800170c <HAL_Delay>
  lcd_clear();
 8000554:	f7ff ff61 	bl	800041a <lcd_clear>

  eepromKontrol();
 8000558:	f000 f940 	bl	80007dc <eepromKontrol>
  loadMenuTexts(dilSecim);
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <main+0x184>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f845 	bl	80005f0 <loadMenuTexts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0x188>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f004 f87b 	bl	8004678 <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x18c>)
 8000586:	6013      	str	r3, [r2, #0]
  xTaskCreate(ledTask, "ledTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000588:	2300      	movs	r3, #0
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2301      	movs	r3, #1
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	4912      	ldr	r1, [pc, #72]	; (80005e0 <main+0x190>)
 8000596:	4813      	ldr	r0, [pc, #76]	; (80005e4 <main+0x194>)
 8000598:	f004 f9d9 	bl	800494e <xTaskCreate>
  xTaskCreate(wifiTask, "wifiTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800059c:	2300      	movs	r3, #0
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2301      	movs	r3, #1
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	490f      	ldr	r1, [pc, #60]	; (80005e8 <main+0x198>)
 80005aa:	4810      	ldr	r0, [pc, #64]	; (80005ec <main+0x19c>)
 80005ac:	f004 f9cf 	bl	800494e <xTaskCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f004 f85b 	bl	800466a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x164>
 80005b6:	bf00      	nop
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	200004b4 	.word	0x200004b4
 80005c0:	20000460 	.word	0x20000460
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010800 	.word	0x40010800
 80005cc:	08006ea4 	.word	0x08006ea4
 80005d0:	08006eb8 	.word	0x08006eb8
 80005d4:	200003bc 	.word	0x200003bc
 80005d8:	08006ee0 	.word	0x08006ee0
 80005dc:	20000540 	.word	0x20000540
 80005e0:	08006ecc 	.word	0x08006ecc
 80005e4:	08000c91 	.word	0x08000c91
 80005e8:	08006ed4 	.word	0x08006ed4
 80005ec:	08000cc1 	.word	0x08000cc1

080005f0 <loadMenuTexts>:

	   }
  /* USER CODE END 3 */
}

void loadMenuTexts(int dilSecim) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	strcpy(mainText, mainTextGN);
 80005f8:	490f      	ldr	r1, [pc, #60]	; (8000638 <loadMenuTexts+0x48>)
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <loadMenuTexts+0x4c>)
 80005fc:	f005 fa78 	bl	8005af0 <strcpy>
	strcpy(mainText2, mainText2GN);
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <loadMenuTexts+0x50>)
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <loadMenuTexts+0x54>)
 8000604:	f005 fa74 	bl	8005af0 <strcpy>
	strcpy(ondSafetyText, ondSafetyTextGN);
 8000608:	490f      	ldr	r1, [pc, #60]	; (8000648 <loadMenuTexts+0x58>)
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <loadMenuTexts+0x5c>)
 800060c:	f005 fa70 	bl	8005af0 <strcpy>
	strcpy(prudhomeText, prudhomeTextGN);
 8000610:	490f      	ldr	r1, [pc, #60]	; (8000650 <loadMenuTexts+0x60>)
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <loadMenuTexts+0x64>)
 8000614:	f005 fa6c 	bl	8005af0 <strcpy>
	strcpy(pizzattoText, pizzattoTextGN);
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <loadMenuTexts+0x68>)
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <loadMenuTexts+0x6c>)
 800061c:	f005 fa68 	bl	8005af0 <strcpy>
	strcpy(buzzerText, buzzerTextGN);
 8000620:	490f      	ldr	r1, [pc, #60]	; (8000660 <loadMenuTexts+0x70>)
 8000622:	4810      	ldr	r0, [pc, #64]	; (8000664 <loadMenuTexts+0x74>)
 8000624:	f005 fa64 	bl	8005af0 <strcpy>
	strcpy(demoModText, demoModTextGN);
 8000628:	490f      	ldr	r1, [pc, #60]	; (8000668 <loadMenuTexts+0x78>)
 800062a:	4810      	ldr	r0, [pc, #64]	; (800066c <loadMenuTexts+0x7c>)
 800062c:	f005 fa60 	bl	8005af0 <strcpy>
		strcpy(secilenDilText, secilenDilTextEN);
		strcpy(menudenCikisText, menudenCikisTextEN);
		strcpy(enteraBasinizText, enteraBasinizTextEN);
		strcpy(hataKoduText, hataKoduTextEN);
	}*/
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	200003c8 	.word	0x200003c8
 8000640:	20000010 	.word	0x20000010
 8000644:	200003d8 	.word	0x200003d8
 8000648:	20000020 	.word	0x20000020
 800064c:	200003e8 	.word	0x200003e8
 8000650:	20000030 	.word	0x20000030
 8000654:	200003f8 	.word	0x200003f8
 8000658:	20000040 	.word	0x20000040
 800065c:	20000408 	.word	0x20000408
 8000660:	20000050 	.word	0x20000050
 8000664:	20000418 	.word	0x20000418
 8000668:	20000060 	.word	0x20000060
 800066c:	20000428 	.word	0x20000428

08000670 <run_delay>:
	for(int i=0; i<indeksSayisi; i++) {
		eepromData[eepromVal[i]] = 0;
	}
}

void run_delay(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000678:	f001 f848 	bl	800170c <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <i2cTest>:
    	butonKontrol=1;
    }

}

void i2cTest(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000692:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <i2cTest+0x154>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b4e      	ldr	r3, [pc, #312]	; (80007d4 <i2cTest+0x154>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0201 	bic.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80006a2:	484c      	ldr	r0, [pc, #304]	; (80007d4 <i2cTest+0x154>)
 80006a4:	f001 fe34 	bl	8002310 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a8:	23c0      	movs	r3, #192	; 0xc0
 80006aa:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80006ac:	2311      	movs	r3, #17
 80006ae:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4846      	ldr	r0, [pc, #280]	; (80007d8 <i2cTest+0x158>)
 80006be:	f001 fa53 	bl	8001b68 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4844      	ldr	r0, [pc, #272]	; (80007d8 <i2cTest+0x158>)
 80006c8:	f001 fcc5 	bl	8002056 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4841      	ldr	r0, [pc, #260]	; (80007d8 <i2cTest+0x158>)
 80006d2:	f001 fcc0 	bl	8002056 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f001 f818 	bl	800170c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80006dc:	bf00      	nop
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	483d      	ldr	r0, [pc, #244]	; (80007d8 <i2cTest+0x158>)
 80006e2:	f001 fca1 	bl	8002028 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d006      	beq.n	80006fa <i2cTest+0x7a>
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	483a      	ldr	r0, [pc, #232]	; (80007d8 <i2cTest+0x158>)
 80006f0:	f001 fc9a 	bl	8002028 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1f1      	bne.n	80006de <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4836      	ldr	r0, [pc, #216]	; (80007d8 <i2cTest+0x158>)
 8000700:	f001 fca9 	bl	8002056 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f001 f801 	bl	800170c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800070a:	bf00      	nop
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4832      	ldr	r0, [pc, #200]	; (80007d8 <i2cTest+0x158>)
 8000710:	f001 fc8a 	bl	8002028 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d0f8      	beq.n	800070c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	482e      	ldr	r0, [pc, #184]	; (80007d8 <i2cTest+0x158>)
 8000720:	f001 fc99 	bl	8002056 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000724:	200a      	movs	r0, #10
 8000726:	f000 fff1 	bl	800170c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800072a:	bf00      	nop
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	482a      	ldr	r0, [pc, #168]	; (80007d8 <i2cTest+0x158>)
 8000730:	f001 fc7a 	bl	8002028 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d0f8      	beq.n	800072c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4826      	ldr	r0, [pc, #152]	; (80007d8 <i2cTest+0x158>)
 8000740:	f001 fc89 	bl	8002056 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 ffe1 	bl	800170c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800074a:	bf00      	nop
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4822      	ldr	r0, [pc, #136]	; (80007d8 <i2cTest+0x158>)
 8000750:	f001 fc6a 	bl	8002028 <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d1f8      	bne.n	800074c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <i2cTest+0x158>)
 8000760:	f001 fc79 	bl	8002056 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000764:	200a      	movs	r0, #10
 8000766:	f000 ffd1 	bl	800170c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800076a:	bf00      	nop
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	481a      	ldr	r0, [pc, #104]	; (80007d8 <i2cTest+0x158>)
 8000770:	f001 fc5a 	bl	8002028 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d1f8      	bne.n	800076c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077a:	23c0      	movs	r3, #192	; 0xc0
 800077c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000782:	2301      	movs	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <i2cTest+0x158>)
 8000790:	f001 f9ea 	bl	8001b68 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <i2cTest+0x154>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <i2cTest+0x154>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007a2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <i2cTest+0x154>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <i2cTest+0x154>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007b2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <i2cTest+0x154>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <i2cTest+0x154>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0201 	orr.w	r2, r2, #1
 80007c2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <i2cTest+0x154>)
 80007c6:	f001 fc5f 	bl	8002088 <HAL_I2C_Init>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000460 	.word	0x20000460
 80007d8:	40010c00 	.word	0x40010c00

080007dc <eepromKontrol>:
		lcd_print(1, 1, mainText);
		lcd_print(2, 1, mainText2);
	}
}

void eepromKontrol() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80007e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	233f      	movs	r3, #63	; 0x3f
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <eepromKontrol+0x27c>)
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	233f      	movs	r3, #63	; 0x3f
 80007f2:	2200      	movs	r2, #0
 80007f4:	21a0      	movs	r1, #160	; 0xa0
 80007f6:	4899      	ldr	r0, [pc, #612]	; (8000a5c <eepromKontrol+0x280>)
 80007f8:	f001 feb8 	bl	800256c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000800:	f000 ff84 	bl	800170c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8000804:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <eepromKontrol+0x27c>)
 8000806:	78da      	ldrb	r2, [r3, #3]
 8000808:	4b95      	ldr	r3, [pc, #596]	; (8000a60 <eepromKontrol+0x284>)
 800080a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <eepromKontrol+0x27c>)
 800080e:	785a      	ldrb	r2, [r3, #1]
 8000810:	4b94      	ldr	r3, [pc, #592]	; (8000a64 <eepromKontrol+0x288>)
 8000812:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000814:	4b90      	ldr	r3, [pc, #576]	; (8000a58 <eepromKontrol+0x27c>)
 8000816:	789a      	ldrb	r2, [r3, #2]
 8000818:	4b93      	ldr	r3, [pc, #588]	; (8000a68 <eepromKontrol+0x28c>)
 800081a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800081c:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <eepromKontrol+0x27c>)
 800081e:	791a      	ldrb	r2, [r3, #4]
 8000820:	4b92      	ldr	r3, [pc, #584]	; (8000a6c <eepromKontrol+0x290>)
 8000822:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000824:	4b8c      	ldr	r3, [pc, #560]	; (8000a58 <eepromKontrol+0x27c>)
 8000826:	795a      	ldrb	r2, [r3, #5]
 8000828:	4b91      	ldr	r3, [pc, #580]	; (8000a70 <eepromKontrol+0x294>)
 800082a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800082c:	4b8a      	ldr	r3, [pc, #552]	; (8000a58 <eepromKontrol+0x27c>)
 800082e:	799a      	ldrb	r2, [r3, #6]
 8000830:	4b90      	ldr	r3, [pc, #576]	; (8000a74 <eepromKontrol+0x298>)
 8000832:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000834:	4b88      	ldr	r3, [pc, #544]	; (8000a58 <eepromKontrol+0x27c>)
 8000836:	79da      	ldrb	r2, [r3, #7]
 8000838:	4b8f      	ldr	r3, [pc, #572]	; (8000a78 <eepromKontrol+0x29c>)
 800083a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800083c:	4b86      	ldr	r3, [pc, #536]	; (8000a58 <eepromKontrol+0x27c>)
 800083e:	7a1a      	ldrb	r2, [r3, #8]
 8000840:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <eepromKontrol+0x2a0>)
 8000842:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000844:	4b84      	ldr	r3, [pc, #528]	; (8000a58 <eepromKontrol+0x27c>)
 8000846:	7a5a      	ldrb	r2, [r3, #9]
 8000848:	4b8d      	ldr	r3, [pc, #564]	; (8000a80 <eepromKontrol+0x2a4>)
 800084a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <eepromKontrol+0x27c>)
 800084e:	7a9a      	ldrb	r2, [r3, #10]
 8000850:	4b8c      	ldr	r3, [pc, #560]	; (8000a84 <eepromKontrol+0x2a8>)
 8000852:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8000854:	4b80      	ldr	r3, [pc, #512]	; (8000a58 <eepromKontrol+0x27c>)
 8000856:	7ada      	ldrb	r2, [r3, #11]
 8000858:	4b8b      	ldr	r3, [pc, #556]	; (8000a88 <eepromKontrol+0x2ac>)
 800085a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 800085c:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <eepromKontrol+0x27c>)
 800085e:	7b1a      	ldrb	r2, [r3, #12]
 8000860:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <eepromKontrol+0x2b0>)
 8000862:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8000864:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <eepromKontrol+0x27c>)
 8000866:	7b5a      	ldrb	r2, [r3, #13]
 8000868:	4b89      	ldr	r3, [pc, #548]	; (8000a90 <eepromKontrol+0x2b4>)
 800086a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 800086c:	4b7a      	ldr	r3, [pc, #488]	; (8000a58 <eepromKontrol+0x27c>)
 800086e:	7b9a      	ldrb	r2, [r3, #14]
 8000870:	4b88      	ldr	r3, [pc, #544]	; (8000a94 <eepromKontrol+0x2b8>)
 8000872:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8000874:	4b78      	ldr	r3, [pc, #480]	; (8000a58 <eepromKontrol+0x27c>)
 8000876:	7bda      	ldrb	r2, [r3, #15]
 8000878:	4b87      	ldr	r3, [pc, #540]	; (8000a98 <eepromKontrol+0x2bc>)
 800087a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 800087c:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <eepromKontrol+0x27c>)
 800087e:	7c1a      	ldrb	r2, [r3, #16]
 8000880:	4b86      	ldr	r3, [pc, #536]	; (8000a9c <eepromKontrol+0x2c0>)
 8000882:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <eepromKontrol+0x27c>)
 8000886:	7c5a      	ldrb	r2, [r3, #17]
 8000888:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <eepromKontrol+0x2c4>)
 800088a:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 800088c:	4b72      	ldr	r3, [pc, #456]	; (8000a58 <eepromKontrol+0x27c>)
 800088e:	7c9a      	ldrb	r2, [r3, #18]
 8000890:	4b84      	ldr	r3, [pc, #528]	; (8000aa4 <eepromKontrol+0x2c8>)
 8000892:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8000894:	4b70      	ldr	r3, [pc, #448]	; (8000a58 <eepromKontrol+0x27c>)
 8000896:	7cda      	ldrb	r2, [r3, #19]
 8000898:	4b83      	ldr	r3, [pc, #524]	; (8000aa8 <eepromKontrol+0x2cc>)
 800089a:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 800089c:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <eepromKontrol+0x27c>)
 800089e:	7d1a      	ldrb	r2, [r3, #20]
 80008a0:	4b82      	ldr	r3, [pc, #520]	; (8000aac <eepromKontrol+0x2d0>)
 80008a2:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80008a4:	4b6c      	ldr	r3, [pc, #432]	; (8000a58 <eepromKontrol+0x27c>)
 80008a6:	7d5a      	ldrb	r2, [r3, #21]
 80008a8:	4b81      	ldr	r3, [pc, #516]	; (8000ab0 <eepromKontrol+0x2d4>)
 80008aa:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80008ac:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <eepromKontrol+0x27c>)
 80008ae:	7d9a      	ldrb	r2, [r3, #22]
 80008b0:	4b80      	ldr	r3, [pc, #512]	; (8000ab4 <eepromKontrol+0x2d8>)
 80008b2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80008b4:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <eepromKontrol+0x27c>)
 80008b6:	7dda      	ldrb	r2, [r3, #23]
 80008b8:	4b7f      	ldr	r3, [pc, #508]	; (8000ab8 <eepromKontrol+0x2dc>)
 80008ba:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80008bc:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <eepromKontrol+0x27c>)
 80008be:	7e1a      	ldrb	r2, [r3, #24]
 80008c0:	4b7e      	ldr	r3, [pc, #504]	; (8000abc <eepromKontrol+0x2e0>)
 80008c2:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80008c4:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <eepromKontrol+0x27c>)
 80008c6:	7e5a      	ldrb	r2, [r3, #25]
 80008c8:	4b7d      	ldr	r3, [pc, #500]	; (8000ac0 <eepromKontrol+0x2e4>)
 80008ca:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80008cc:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <eepromKontrol+0x27c>)
 80008ce:	7e9a      	ldrb	r2, [r3, #26]
 80008d0:	4b7c      	ldr	r3, [pc, #496]	; (8000ac4 <eepromKontrol+0x2e8>)
 80008d2:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80008d4:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <eepromKontrol+0x27c>)
 80008d6:	7eda      	ldrb	r2, [r3, #27]
 80008d8:	4b7b      	ldr	r3, [pc, #492]	; (8000ac8 <eepromKontrol+0x2ec>)
 80008da:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80008dc:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <eepromKontrol+0x27c>)
 80008de:	7f1a      	ldrb	r2, [r3, #28]
 80008e0:	4b7a      	ldr	r3, [pc, #488]	; (8000acc <eepromKontrol+0x2f0>)
 80008e2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80008e4:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <eepromKontrol+0x27c>)
 80008e6:	7f5a      	ldrb	r2, [r3, #29]
 80008e8:	4b79      	ldr	r3, [pc, #484]	; (8000ad0 <eepromKontrol+0x2f4>)
 80008ea:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <eepromKontrol+0x27c>)
 80008ee:	7f9a      	ldrb	r2, [r3, #30]
 80008f0:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <eepromKontrol+0x2f8>)
 80008f2:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80008f4:	4b58      	ldr	r3, [pc, #352]	; (8000a58 <eepromKontrol+0x27c>)
 80008f6:	7fda      	ldrb	r2, [r3, #31]
 80008f8:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <eepromKontrol+0x2fc>)
 80008fa:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <eepromKontrol+0x27c>)
 80008fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000902:	4b76      	ldr	r3, [pc, #472]	; (8000adc <eepromKontrol+0x300>)
 8000904:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000906:	4b54      	ldr	r3, [pc, #336]	; (8000a58 <eepromKontrol+0x27c>)
 8000908:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800090c:	4b74      	ldr	r3, [pc, #464]	; (8000ae0 <eepromKontrol+0x304>)
 800090e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <eepromKontrol+0x27c>)
 8000912:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000916:	4b73      	ldr	r3, [pc, #460]	; (8000ae4 <eepromKontrol+0x308>)
 8000918:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800091a:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <eepromKontrol+0x27c>)
 800091c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000920:	4b71      	ldr	r3, [pc, #452]	; (8000ae8 <eepromKontrol+0x30c>)
 8000922:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000924:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <eepromKontrol+0x27c>)
 8000926:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800092a:	4b70      	ldr	r3, [pc, #448]	; (8000aec <eepromKontrol+0x310>)
 800092c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 800092e:	4b4a      	ldr	r3, [pc, #296]	; (8000a58 <eepromKontrol+0x27c>)
 8000930:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000934:	4b6e      	ldr	r3, [pc, #440]	; (8000af0 <eepromKontrol+0x314>)
 8000936:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8000938:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <eepromKontrol+0x27c>)
 800093a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800093e:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <eepromKontrol+0x318>)
 8000940:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8000942:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <eepromKontrol+0x27c>)
 8000944:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <eepromKontrol+0x31c>)
 800094a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <eepromKontrol+0x27c>)
 800094e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000952:	4b6a      	ldr	r3, [pc, #424]	; (8000afc <eepromKontrol+0x320>)
 8000954:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8000956:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <eepromKontrol+0x27c>)
 8000958:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800095c:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <eepromKontrol+0x324>)
 800095e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <eepromKontrol+0x27c>)
 8000962:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000966:	4b67      	ldr	r3, [pc, #412]	; (8000b04 <eepromKontrol+0x328>)
 8000968:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 800096a:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <eepromKontrol+0x27c>)
 800096c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000970:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <eepromKontrol+0x32c>)
 8000972:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <eepromKontrol+0x27c>)
 8000976:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800097a:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <eepromKontrol+0x330>)
 800097c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <eepromKontrol+0x27c>)
 8000980:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000984:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <eepromKontrol+0x334>)
 8000986:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <eepromKontrol+0x27c>)
 800098a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800098e:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <eepromKontrol+0x338>)
 8000990:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8000992:	4b52      	ldr	r3, [pc, #328]	; (8000adc <eepromKontrol+0x300>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b09      	cmp	r3, #9
 8000998:	d902      	bls.n	80009a0 <eepromKontrol+0x1c4>
	    calismaSayisi10000=0;
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <eepromKontrol+0x300>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <eepromKontrol+0x2fc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	d902      	bls.n	80009ae <eepromKontrol+0x1d2>
	    calismaSayisi1000=0;
 80009a8:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <eepromKontrol+0x2fc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80009ae:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <eepromKontrol+0x2f8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d902      	bls.n	80009bc <eepromKontrol+0x1e0>
	    calismaSayisi100=0;
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <eepromKontrol+0x2f8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80009bc:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <eepromKontrol+0x2f4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b09      	cmp	r3, #9
 80009c2:	d902      	bls.n	80009ca <eepromKontrol+0x1ee>
	    calismaSayisi10=0;
 80009c4:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <eepromKontrol+0x2f4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <eepromKontrol+0x2f0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b09      	cmp	r3, #9
 80009d0:	d902      	bls.n	80009d8 <eepromKontrol+0x1fc>
	    calismaSayisi1=0;
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <eepromKontrol+0x2f0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <eepromKontrol+0x288>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d902      	bls.n	80009e6 <eepromKontrol+0x20a>
	    calismaSekli=0;
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <eepromKontrol+0x288>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <eepromKontrol+0x28c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d902      	bls.n	80009f4 <eepromKontrol+0x218>
	    emniyetCercevesi=1;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <eepromKontrol+0x28c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <eepromKontrol+0x290>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d902      	bls.n	8000a02 <eepromKontrol+0x226>
	    yavaslamaLimit=0;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <eepromKontrol+0x290>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <eepromKontrol+0x294>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d902      	bls.n	8000a10 <eepromKontrol+0x234>
	    altLimit=1;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <eepromKontrol+0x294>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <eepromKontrol+0x298>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d902      	bls.n	8000a1e <eepromKontrol+0x242>
	    basincSalteri=1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <eepromKontrol+0x298>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <eepromKontrol+0x29c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d902      	bls.n	8000a2c <eepromKontrol+0x250>
	    kapiSecimleri=3;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <eepromKontrol+0x29c>)
 8000a28:	2203      	movs	r2, #3
 8000a2a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <eepromKontrol+0x310>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d902      	bls.n	8000a3a <eepromKontrol+0x25e>
	    kapiAcTipi=0;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <eepromKontrol+0x310>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <eepromKontrol+0x2a0>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d902      	bls.n	8000a48 <eepromKontrol+0x26c>
	    kapi1Tip=1;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <eepromKontrol+0x2a0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <eepromKontrol+0x2a4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d963      	bls.n	8000b18 <eepromKontrol+0x33c>
	    kapi1AcSure=5;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <eepromKontrol+0x2a4>)
 8000a52:	2205      	movs	r2, #5
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e05f      	b.n	8000b18 <eepromKontrol+0x33c>
 8000a58:	20000358 	.word	0x20000358
 8000a5c:	20000460 	.word	0x20000460
 8000a60:	20000397 	.word	0x20000397
 8000a64:	200003a0 	.word	0x200003a0
 8000a68:	200003a1 	.word	0x200003a1
 8000a6c:	200003a2 	.word	0x200003a2
 8000a70:	200003a3 	.word	0x200003a3
 8000a74:	200003a4 	.word	0x200003a4
 8000a78:	200003a5 	.word	0x200003a5
 8000a7c:	200003a6 	.word	0x200003a6
 8000a80:	200003b6 	.word	0x200003b6
 8000a84:	200003a7 	.word	0x200003a7
 8000a88:	200003b7 	.word	0x200003b7
 8000a8c:	200003a8 	.word	0x200003a8
 8000a90:	200003b8 	.word	0x200003b8
 8000a94:	200003ab 	.word	0x200003ab
 8000a98:	200003ac 	.word	0x200003ac
 8000a9c:	200003ad 	.word	0x200003ad
 8000aa0:	200003ae 	.word	0x200003ae
 8000aa4:	200003af 	.word	0x200003af
 8000aa8:	200003b0 	.word	0x200003b0
 8000aac:	200003b1 	.word	0x200003b1
 8000ab0:	200003b2 	.word	0x200003b2
 8000ab4:	200003b3 	.word	0x200003b3
 8000ab8:	200003b4 	.word	0x200003b4
 8000abc:	200003b5 	.word	0x200003b5
 8000ac0:	200003b9 	.word	0x200003b9
 8000ac4:	200003ba 	.word	0x200003ba
 8000ac8:	2000039c 	.word	0x2000039c
 8000acc:	2000039d 	.word	0x2000039d
 8000ad0:	2000039e 	.word	0x2000039e
 8000ad4:	20000070 	.word	0x20000070
 8000ad8:	20000071 	.word	0x20000071
 8000adc:	2000039f 	.word	0x2000039f
 8000ae0:	200003bc 	.word	0x200003bc
 8000ae4:	200003aa 	.word	0x200003aa
 8000ae8:	200003bb 	.word	0x200003bb
 8000aec:	200003a9 	.word	0x200003a9
 8000af0:	200003bd 	.word	0x200003bd
 8000af4:	200003be 	.word	0x200003be
 8000af8:	200003bf 	.word	0x200003bf
 8000afc:	200003c0 	.word	0x200003c0
 8000b00:	200003c1 	.word	0x200003c1
 8000b04:	200003c2 	.word	0x200003c2
 8000b08:	200003c3 	.word	0x200003c3
 8000b0c:	200003c4 	.word	0x200003c4
 8000b10:	200003c5 	.word	0x200003c5
 8000b14:	200003c6 	.word	0x200003c6
	}

	if(kapi2Tip>2) {
 8000b18:	4b49      	ldr	r3, [pc, #292]	; (8000c40 <eepromKontrol+0x464>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d902      	bls.n	8000b26 <eepromKontrol+0x34a>
	    kapi2Tip=1;
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <eepromKontrol+0x464>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <eepromKontrol+0x468>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d902      	bls.n	8000b34 <eepromKontrol+0x358>
	    kapi2AcSure=5;
 8000b2e:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <eepromKontrol+0x468>)
 8000b30:	2205      	movs	r2, #5
 8000b32:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000b34:	4b44      	ldr	r3, [pc, #272]	; (8000c48 <eepromKontrol+0x46c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d902      	bls.n	8000b42 <eepromKontrol+0x366>
	    kapitablaTip=1;
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <eepromKontrol+0x46c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000b42:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <eepromKontrol+0x470>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d902      	bls.n	8000b50 <eepromKontrol+0x374>
	    kapiTablaAcKonum=2;
 8000b4a:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <eepromKontrol+0x470>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000b50:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <eepromKontrol+0x474>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d902      	bls.n	8000b5e <eepromKontrol+0x382>
	    kapiTablaAcSure=5;
 8000b58:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <eepromKontrol+0x474>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <eepromKontrol+0x478>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d902      	bls.n	8000b6c <eepromKontrol+0x390>
	    yukariYavasLimit=0;
 8000b66:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <eepromKontrol+0x478>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <eepromKontrol+0x47c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d902      	bls.n	8000b7a <eepromKontrol+0x39e>
	    devirmeYuruyusSecim=0;
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <eepromKontrol+0x47c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000b7a:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <eepromKontrol+0x480>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d902      	bls.n	8000b88 <eepromKontrol+0x3ac>
	    devirmeYukariIleriLimit=1;
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <eepromKontrol+0x480>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000b88:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <eepromKontrol+0x484>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d902      	bls.n	8000b96 <eepromKontrol+0x3ba>
	    devirmeAsagiGeriLimit=1;
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <eepromKontrol+0x484>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <eepromKontrol+0x488>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d902      	bls.n	8000ba4 <eepromKontrol+0x3c8>
	    devirmeSilindirTipi=0;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <eepromKontrol+0x488>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <eepromKontrol+0x48c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d902      	bls.n	8000bb2 <eepromKontrol+0x3d6>
	    platformSilindirTipi=0;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <eepromKontrol+0x48c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <eepromKontrol+0x490>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	d902      	bls.n	8000bc0 <eepromKontrol+0x3e4>
	    yukariValfTmr=0;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <eepromKontrol+0x490>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <eepromKontrol+0x494>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	d902      	bls.n	8000bce <eepromKontrol+0x3f2>
	    asagiValfTmr=0;
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <eepromKontrol+0x494>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <eepromKontrol+0x498>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	d902      	bls.n	8000bdc <eepromKontrol+0x400>
	    devirmeYukariIleriTmr=0;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <eepromKontrol+0x498>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <eepromKontrol+0x49c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b05      	cmp	r3, #5
 8000be2:	d902      	bls.n	8000bea <eepromKontrol+0x40e>
	    devirmeAsagiGeriTmr=0;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <eepromKontrol+0x49c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <eepromKontrol+0x4a0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2bb4      	cmp	r3, #180	; 0xb4
 8000bf0:	d902      	bls.n	8000bf8 <eepromKontrol+0x41c>
	    makineCalismaTmr=60;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <eepromKontrol+0x4a0>)
 8000bf4:	223c      	movs	r2, #60	; 0x3c
 8000bf6:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <eepromKontrol+0x4a4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d902      	bls.n	8000c06 <eepromKontrol+0x42a>
	    buzzer=0;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <eepromKontrol+0x4a4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <eepromKontrol+0x4a8>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d902      	bls.n	8000c14 <eepromKontrol+0x438>
	    demoMode=0;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <eepromKontrol+0x4a8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <eepromKontrol+0x4ac>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d902      	bls.n	8000c22 <eepromKontrol+0x446>
	    calismaSayModu=0;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <eepromKontrol+0x4ac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <eepromKontrol+0x4b0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d902      	bls.n	8000c30 <eepromKontrol+0x454>
	    dilSecim=0;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <eepromKontrol+0x4b0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f000 fd6a 	bl	800170c <HAL_Delay>
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003a7 	.word	0x200003a7
 8000c44:	200003b7 	.word	0x200003b7
 8000c48:	200003a8 	.word	0x200003a8
 8000c4c:	200003aa 	.word	0x200003aa
 8000c50:	200003b8 	.word	0x200003b8
 8000c54:	200003ab 	.word	0x200003ab
 8000c58:	200003ac 	.word	0x200003ac
 8000c5c:	200003ad 	.word	0x200003ad
 8000c60:	200003ae 	.word	0x200003ae
 8000c64:	200003af 	.word	0x200003af
 8000c68:	200003b0 	.word	0x200003b0
 8000c6c:	200003b1 	.word	0x200003b1
 8000c70:	200003b2 	.word	0x200003b2
 8000c74:	200003b3 	.word	0x200003b3
 8000c78:	200003b4 	.word	0x200003b4
 8000c7c:	200003b5 	.word	0x200003b5
 8000c80:	200003b9 	.word	0x200003b9
 8000c84:	200003ba 	.word	0x200003ba
 8000c88:	200003bb 	.word	0x200003bb
 8000c8c:	200003bc 	.word	0x200003bc

08000c90 <ledTask>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void ledTask(void *pvParameters) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <ledTask+0x2c>)
 8000c9e:	f001 f9da 	bl	8002056 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca6:	f000 fd31 	bl	800170c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2120      	movs	r1, #32
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <ledTask+0x2c>)
 8000cb0:	f001 f9d1 	bl	8002056 <HAL_GPIO_WritePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <wifiTask>:

void wifiTask(void *pvParameters) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ccc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8000cd0:	6018      	str	r0, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	486e      	ldr	r0, [pc, #440]	; (8000e90 <wifiTask+0x1d0>)
 8000cd8:	f001 f9bd 	bl	8002056 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), HAL_MAX_DELAY);
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	220d      	movs	r2, #13
 8000ce2:	496c      	ldr	r1, [pc, #432]	; (8000e94 <wifiTask+0x1d4>)
 8000ce4:	486c      	ldr	r0, [pc, #432]	; (8000e98 <wifiTask+0x1d8>)
 8000ce6:	f003 fa9c 	bl	8004222 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cee:	f000 fd0d 	bl	800170c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWJAP=\"iPhone SE (2nd generation)\",\"asdasd00991\"\r\n", strlen("AT+CWJAP=\"iPhone SE (2nd generation)\",\"asdasd00991\"\r\n"), HAL_MAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2235      	movs	r2, #53	; 0x35
 8000cf8:	4968      	ldr	r1, [pc, #416]	; (8000e9c <wifiTask+0x1dc>)
 8000cfa:	4867      	ldr	r0, [pc, #412]	; (8000e98 <wifiTask+0x1d8>)
 8000cfc:	f003 fa91 	bl	8004222 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWJAP=\"3Oda1Salon\",\"ucsalonbiroda\"\r\n", strlen("AT+CWJAP=\"3Oda1Salon\",\"ucsalonbiroda\"\r\n"), HAL_MAX_DELAY);
    HAL_Delay(2000);
 8000d00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d04:	f000 fd02 	bl	800170c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	4860      	ldr	r0, [pc, #384]	; (8000e90 <wifiTask+0x1d0>)
 8000d0e:	f001 f9a2 	bl	8002056 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d16:	f000 fcf9 	bl	800170c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	485c      	ldr	r0, [pc, #368]	; (8000e90 <wifiTask+0x1d0>)
 8000d20:	f001 f999 	bl	8002056 <HAL_GPIO_WritePin>

    HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSTART=0,\"TCP\",\"yst.com.tr\",80\r\n", strlen("AT+CIPSTART=0,\"TCP\",\"yst.com.tr\",80\r\n"), HAL_MAX_DELAY);
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	2225      	movs	r2, #37	; 0x25
 8000d2a:	495d      	ldr	r1, [pc, #372]	; (8000ea0 <wifiTask+0x1e0>)
 8000d2c:	485a      	ldr	r0, [pc, #360]	; (8000e98 <wifiTask+0x1d8>)
 8000d2e:	f003 fa78 	bl	8004222 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d36:	f000 fce9 	bl	800170c <HAL_Delay>

    char requestBuffer[512];
    sprintf(requestBuffer, "GET /api/updateMachine2.php?MachineID=%s&acilStop1=%s HTTP/1.1\r\nHost: yst.com.tr\r\n\r\n",
 8000d3a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000d3e:	4b59      	ldr	r3, [pc, #356]	; (8000ea4 <wifiTask+0x1e4>)
 8000d40:	4a58      	ldr	r2, [pc, #352]	; (8000ea4 <wifiTask+0x1e4>)
 8000d42:	4959      	ldr	r1, [pc, #356]	; (8000ea8 <wifiTask+0x1e8>)
 8000d44:	f004 feb4 	bl	8005ab0 <siprintf>
            "12345", "12345");

    char requestLength[8];
    sprintf(requestLength, "%d", strlen(requestBuffer));
 8000d48:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fa6f 	bl	8000230 <strlen>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d58:	4954      	ldr	r1, [pc, #336]	; (8000eac <wifiTask+0x1ec>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fea8 	bl	8005ab0 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSEND=0,", strlen("AT+CIPSEND=0,"), HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	220d      	movs	r2, #13
 8000d66:	4952      	ldr	r1, [pc, #328]	; (8000eb0 <wifiTask+0x1f0>)
 8000d68:	484b      	ldr	r0, [pc, #300]	; (8000e98 <wifiTask+0x1d8>)
 8000d6a:	f003 fa5a 	bl	8004222 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)requestLength, strlen(requestLength), HAL_MAX_DELAY);
 8000d6e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fa5c 	bl	8000230 <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	4844      	ldr	r0, [pc, #272]	; (8000e98 <wifiTask+0x1d8>)
 8000d86:	f003 fa4c 	bl	8004222 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4948      	ldr	r1, [pc, #288]	; (8000eb4 <wifiTask+0x1f4>)
 8000d92:	4841      	ldr	r0, [pc, #260]	; (8000e98 <wifiTask+0x1d8>)
 8000d94:	f003 fa45 	bl	8004222 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d9c:	f000 fcb6 	bl	800170c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t *)requestBuffer, strlen(requestBuffer), HAL_MAX_DELAY);
 8000da0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa43 	bl	8000230 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	4838      	ldr	r0, [pc, #224]	; (8000e98 <wifiTask+0x1d8>)
 8000db8:	f003 fa33 	bl	8004222 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc0:	f000 fca4 	bl	800170c <HAL_Delay>

    char responseBuffer[256];
    memset(responseBuffer, 0, sizeof(responseBuffer));
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 fe66 	bl	8005aa0 <memset>
    uint16_t responseLength = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
    while (responseLength < sizeof(responseBuffer) - 1)
 8000dda:	e021      	b.n	8000e20 <wifiTask+0x160>
    {
        uint16_t bytesRead = HAL_UART_Receive(&huart1, (uint8_t *)(responseBuffer + responseLength), sizeof(responseBuffer) - responseLength - 1, HAL_MAX_DELAY);
 8000ddc:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8000de0:	f107 020c 	add.w	r2, r7, #12
 8000de4:	18d1      	adds	r1, r2, r3
 8000de6:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8000dea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <wifiTask+0x1d8>)
 8000df6:	f003 faa6 	bl	8004346 <HAL_UART_Receive>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f8a7 3314 	strh.w	r3, [r7, #788]	; 0x314
        responseLength += bytesRead;
 8000e00:	f8b7 2316 	ldrh.w	r2, [r7, #790]	; 0x316
 8000e04:	f8b7 3314 	ldrh.w	r3, [r7, #788]	; 0x314
 8000e08:	4413      	add	r3, r2
 8000e0a:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316

        if (strstr(responseBuffer, "\r\n\r\n") != NULL)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4929      	ldr	r1, [pc, #164]	; (8000eb8 <wifiTask+0x1f8>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fe73 	bl	8005b00 <strstr>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <wifiTask+0x16a>
    while (responseLength < sizeof(responseBuffer) - 1)
 8000e20:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8000e24:	2bfe      	cmp	r3, #254	; 0xfe
 8000e26:	d9d9      	bls.n	8000ddc <wifiTask+0x11c>
 8000e28:	e000      	b.n	8000e2c <wifiTask+0x16c>
        {
            break;
 8000e2a:	bf00      	nop
        }
    }

    if (strstr(responseBuffer, "Kayıt güncellendi.") != NULL)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <wifiTask+0x1fc>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fe64 	bl	8005b00 <strstr>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <wifiTask+0x18a>
    {
        // İşlem başarıyla tamamlandı
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2120      	movs	r1, #32
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <wifiTask+0x1d0>)
 8000e44:	f001 f907 	bl	8002056 <HAL_GPIO_WritePin>
 8000e48:	e00d      	b.n	8000e66 <wifiTask+0x1a6>
    }
    else if (strstr(responseBuffer, "Kayıt eklendi.") != NULL)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <wifiTask+0x200>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fe55 	bl	8005b00 <strstr>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <wifiTask+0x1a6>
    {
        // İşlem başarıyla tamamlandı
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2120      	movs	r1, #32
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <wifiTask+0x1d0>)
 8000e62:	f001 f8f8 	bl	8002056 <HAL_GPIO_WritePin>
    {
        // İşlem başarısız oldu, tekrar denemek için uygun bir if bloğu ekleyebilirsiniz

    }

    HAL_Delay(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6a:	f000 fc4f 	bl	800170c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPCLOSE=0\r\n", strlen("AT+CIPCLOSE=0\r\n"), HAL_MAX_DELAY);
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	220f      	movs	r2, #15
 8000e74:	4913      	ldr	r1, [pc, #76]	; (8000ec4 <wifiTask+0x204>)
 8000e76:	4808      	ldr	r0, [pc, #32]	; (8000e98 <wifiTask+0x1d8>)
 8000e78:	f003 f9d3 	bl	8004222 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 fc44 	bl	800170c <HAL_Delay>
}
 8000e84:	bf00      	nop
 8000e86:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	08006fd0 	.word	0x08006fd0
 8000e98:	200004fc 	.word	0x200004fc
 8000e9c:	08006fe0 	.word	0x08006fe0
 8000ea0:	08007018 	.word	0x08007018
 8000ea4:	08007040 	.word	0x08007040
 8000ea8:	08007048 	.word	0x08007048
 8000eac:	080070a0 	.word	0x080070a0
 8000eb0:	080070a4 	.word	0x080070a4
 8000eb4:	080070b4 	.word	0x080070b4
 8000eb8:	080070b8 	.word	0x080070b8
 8000ebc:	080070c0 	.word	0x080070c0
 8000ec0:	080070d8 	.word	0x080070d8
 8000ec4:	080070e8 	.word	0x080070e8

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2228      	movs	r2, #40	; 0x28
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fde2 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f8f1 	bl	80030f8 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f1c:	f000 f9aa 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fb5e 	bl	80035fc <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f46:	f000 f995 	bl	8001274 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <MX_CAN_Init+0x64>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000fa2:	f000 fbd7 	bl	8001754 <HAL_CAN_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000fac:	f000 f962 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000438 	.word	0x20000438
 8000fb8:	40006400 	.word	0x40006400

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f001 f845 	bl	8002088 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f936 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000460 	.word	0x20000460
 8001010:	40005400 	.word	0x40005400
 8001014:	00061a80 	.word	0x00061a80

08001018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <MX_TIM1_Init+0xa0>)
 8001038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM1_Init+0x9c>)
 800103c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001040:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM1_Init+0x9c>)
 800104a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800104e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_TIM1_Init+0x9c>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001064:	f002 fc62 	bl	800392c <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800106e:	f000 f901 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001080:	f002 fe0c 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800108a:	f000 f8f3 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_TIM1_Init+0x9c>)
 800109c:	f002 fff6 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80010a6:	f000 f8e5 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200004b4 	.word	0x200004b4
 80010b8:	40012c00 	.word	0x40012c00

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART1_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010f4:	f003 f848 	bl	8004188 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f8b9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200004fc 	.word	0x200004fc
 800110c:	40013800 	.word	0x40013800

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <MX_GPIO_Init+0x144>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <MX_GPIO_Init+0x144>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <MX_GPIO_Init+0x144>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b45      	ldr	r3, [pc, #276]	; (8001254 <MX_GPIO_Init+0x144>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <MX_GPIO_Init+0x144>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <MX_GPIO_Init+0x144>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <MX_GPIO_Init+0x144>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <MX_GPIO_Init+0x144>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <MX_GPIO_Init+0x144>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <MX_GPIO_Init+0x144>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <MX_GPIO_Init+0x144>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <MX_GPIO_Init+0x144>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	21f0      	movs	r1, #240	; 0xf0
 8001188:	4833      	ldr	r0, [pc, #204]	; (8001258 <MX_GPIO_Init+0x148>)
 800118a:	f000 ff64 	bl	8002056 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f241 0130 	movw	r1, #4144	; 0x1030
 8001194:	4831      	ldr	r0, [pc, #196]	; (800125c <MX_GPIO_Init+0x14c>)
 8001196:	f000 ff5e 	bl	8002056 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800119a:	2200      	movs	r2, #0
 800119c:	f640 4107 	movw	r1, #3079	; 0xc07
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <MX_GPIO_Init+0x150>)
 80011a2:	f000 ff58 	bl	8002056 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80011a6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80011aa:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4828      	ldr	r0, [pc, #160]	; (800125c <MX_GPIO_Init+0x14c>)
 80011bc:	f000 fcd4 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80011c0:	f248 130f 	movw	r3, #33039	; 0x810f
 80011c4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_GPIO_Init+0x148>)
 80011d6:	f000 fcc7 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80011da:	23f0      	movs	r3, #240	; 0xf0
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <MX_GPIO_Init+0x148>)
 80011f2:	f000 fcb9 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80011f6:	f241 0330 	movw	r3, #4144	; 0x1030
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_GPIO_Init+0x14c>)
 8001210:	f000 fcaa 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8001214:	f640 4307 	movw	r3, #3079	; 0xc07
 8001218:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_GPIO_Init+0x150>)
 800122e:	f000 fc9b 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8001232:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_GPIO_Init+0x150>)
 8001248:	f000 fc8e 	bl	8001b68 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800
 800125c:	40011000 	.word	0x40011000
 8001260:	40010c00 	.word	0x40010c00

08001264 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f003 fa4f 	bl	8004710 <osDelay>
 8001272:	e7fb      	b.n	800126c <StartDefaultTask+0x8>

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_MspInit+0x68>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_MspInit+0x68>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_MspInit+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_MspInit+0x68>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_MspInit+0x68>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x68>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	210f      	movs	r1, #15
 80012ba:	f06f 0001 	mvn.w	r0, #1
 80012be:	f000 fc1c 	bl	8001afa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x6c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_MspInit+0x6c>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000

080012f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_CAN_MspInit+0x8c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d131      	bne.n	8001374 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_CAN_MspInit+0x90>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <HAL_CAN_MspInit+0x90>)
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_CAN_MspInit+0x90>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_CAN_MspInit+0x90>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_CAN_MspInit+0x90>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_CAN_MspInit+0x90>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <HAL_CAN_MspInit+0x94>)
 8001356:	f000 fc07 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_CAN_MspInit+0x94>)
 8001370:	f000 fbfa 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40006400 	.word	0x40006400
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_I2C_MspInit+0x70>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d123      	bne.n	80013f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c0:	23c0      	movs	r3, #192	; 0xc0
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	2312      	movs	r3, #18
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_I2C_MspInit+0x78>)
 80013d4:	f000 fbc8 	bl	8001b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e2:	61d3      	str	r3, [r2, #28]
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00

08001404 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_I2C_MspDeInit+0x38>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10d      	bne.n	8001432 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_I2C_MspDeInit+0x3c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_I2C_MspDeInit+0x3c>)
 800141c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001420:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001422:	2140      	movs	r1, #64	; 0x40
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <HAL_I2C_MspDeInit+0x40>)
 8001426:	f000 fd33 	bl	8001e90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_I2C_MspDeInit+0x40>)
 800142e:	f000 fd2f 	bl	8001e90 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <HAL_TIM_Base_MspInit+0x44>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_TIM_Base_MspInit+0x48>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_TIM_Base_MspInit+0x48>)
 8001460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_TIM_Base_MspInit+0x48>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	2019      	movs	r0, #25
 8001478:	f000 fb3f 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800147c:	2019      	movs	r0, #25
 800147e:	f000 fb58 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_UART_MspInit+0x8c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d131      	bne.n	8001518 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_UART_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_UART_MspInit+0x94>)
 80014fa:	f000 fb35 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_UART_MspInit+0x94>)
 8001514:	f000 fb28 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013800 	.word	0x40013800
 8001524:	40021000 	.word	0x40021000
 8001528:	40010800 	.word	0x40010800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f8bb 	bl	80016d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800155e:	f003 fe55 	bl	800520c <xTaskGetSchedulerState>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d001      	beq.n	800156c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001568:	f004 f846 	bl	80055f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM1_UP_IRQHandler+0x10>)
 8001576:	f002 fa89 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200004b4 	.word	0x200004b4

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f004 fa3c 	bl	8005a30 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000c000 	.word	0x2000c000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	20000544 	.word	0x20000544
 80015ec:	200012a8 	.word	0x200012a8

080015f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001622:	f7ff ffe5 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f004 fa09 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7fe ff11 	bl	8000450 <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001638:	08007164 	.word	0x08007164
  ldr r2, =_sbss
 800163c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001640:	200012a8 	.word	0x200012a8

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 fa43 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fe0c 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fa5b 	bl	8001b4e <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 fa23 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000074 	.word	0x20000074
 80016cc:	2000007c 	.word	0x2000007c
 80016d0:	20000078 	.word	0x20000078

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	2000007c 	.word	0x2000007c
 80016f4:	20000548 	.word	0x20000548

080016f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000548 	.word	0x20000548

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000007c 	.word	0x2000007c

08001754 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0ed      	b.n	8001942 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fdbc 	bl	80012f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001788:	f7ff ffb6 	bl	80016f8 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800178e:	e012      	b.n	80017b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001790:	f7ff ffb2 	bl	80016f8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d90b      	bls.n	80017b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2205      	movs	r2, #5
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0c5      	b.n	8001942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0e5      	beq.n	8001790 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0202 	bic.w	r2, r2, #2
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d4:	f7ff ff90 	bl	80016f8 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017da:	e012      	b.n	8001802 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017dc:	f7ff ff8c 	bl	80016f8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b0a      	cmp	r3, #10
 80017e8:	d90b      	bls.n	8001802 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2205      	movs	r2, #5
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e09f      	b.n	8001942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e5      	bne.n	80017dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e007      	b.n	800183a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7e5b      	ldrb	r3, [r3, #25]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e007      	b.n	8001864 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001862:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e9b      	ldrb	r3, [r3, #26]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0220 	bic.w	r2, r2, #32
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7edb      	ldrb	r3, [r3, #27]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0210 	bic.w	r2, r2, #16
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0210 	orr.w	r2, r2, #16
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7f1b      	ldrb	r3, [r3, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0208 	orr.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0208 	bic.w	r2, r2, #8
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7f5b      	ldrb	r3, [r3, #29]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0204 	orr.w	r2, r2, #4
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	ea42 0103 	orr.w	r1, r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4906      	ldr	r1, [pc, #24]	; (80019e4 <__NVIC_EnableIRQ+0x34>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff90 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff2d 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff42 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff90 	bl	8001a3c <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5f 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff35 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa2 	bl	8001aa0 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b08b      	sub	sp, #44	; 0x2c
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e179      	b.n	8001e70 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8168 	bne.w	8001e6a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a96      	ldr	r2, [pc, #600]	; (8001df8 <HAL_GPIO_Init+0x290>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d05e      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a94      	ldr	r2, [pc, #592]	; (8001df8 <HAL_GPIO_Init+0x290>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d875      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001baa:	4a94      	ldr	r2, [pc, #592]	; (8001dfc <HAL_GPIO_Init+0x294>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d058      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bb0:	4a92      	ldr	r2, [pc, #584]	; (8001dfc <HAL_GPIO_Init+0x294>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d86f      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bb6:	4a92      	ldr	r2, [pc, #584]	; (8001e00 <HAL_GPIO_Init+0x298>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d052      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_GPIO_Init+0x298>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d869      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a90      	ldr	r2, [pc, #576]	; (8001e04 <HAL_GPIO_Init+0x29c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04c      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a8e      	ldr	r2, [pc, #568]	; (8001e04 <HAL_GPIO_Init+0x29c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d863      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bce:	4a8e      	ldr	r2, [pc, #568]	; (8001e08 <HAL_GPIO_Init+0x2a0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d046      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a8c      	ldr	r2, [pc, #560]	; (8001e08 <HAL_GPIO_Init+0x2a0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d85d      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d82a      	bhi.n	8001c34 <HAL_GPIO_Init+0xcc>
 8001bde:	2b12      	cmp	r3, #18
 8001be0:	d859      	bhi.n	8001c96 <HAL_GPIO_Init+0x12e>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <HAL_GPIO_Init+0x80>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001c4f 	.word	0x08001c4f
 8001bf4:	08001c91 	.word	0x08001c91
 8001bf8:	08001c97 	.word	0x08001c97
 8001bfc:	08001c97 	.word	0x08001c97
 8001c00:	08001c97 	.word	0x08001c97
 8001c04:	08001c97 	.word	0x08001c97
 8001c08:	08001c97 	.word	0x08001c97
 8001c0c:	08001c97 	.word	0x08001c97
 8001c10:	08001c97 	.word	0x08001c97
 8001c14:	08001c97 	.word	0x08001c97
 8001c18:	08001c97 	.word	0x08001c97
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c97 	.word	0x08001c97
 8001c24:	08001c97 	.word	0x08001c97
 8001c28:	08001c97 	.word	0x08001c97
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c59 	.word	0x08001c59
 8001c34:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c3a:	e02c      	b.n	8001c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e029      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e024      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	3308      	adds	r3, #8
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e01f      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e01a      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e013      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	611a      	str	r2, [r3, #16]
          break;
 8001c82:	e009      	b.n	8001c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	615a      	str	r2, [r3, #20]
          break;
 8001c8e:	e003      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x130>
          break;
 8001c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d801      	bhi.n	8001ca2 <HAL_GPIO_Init+0x13a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_Init+0x13e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d802      	bhi.n	8001cb4 <HAL_GPIO_Init+0x14c>
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x152>
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3b08      	subs	r3, #8
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80c1 	beq.w	8001e6a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_GPIO_Init+0x2a8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d00:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <HAL_GPIO_Init+0x2ac>)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_GPIO_Init+0x2b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d01f      	beq.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <HAL_GPIO_Init+0x2b4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d019      	beq.n	8001d68 <HAL_GPIO_Init+0x200>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <HAL_GPIO_Init+0x2b8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1fc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <HAL_GPIO_Init+0x2bc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1f8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_GPIO_Init+0x2c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1f4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a37      	ldr	r2, [pc, #220]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1f0>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e00a      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d58:	2306      	movs	r3, #6
 8001d5a:	e008      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e006      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d60:	2303      	movs	r3, #3
 8001d62:	e004      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e002      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	f002 0203 	and.w	r2, r2, #3
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	4093      	lsls	r3, r2
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7e:	4925      	ldr	r1, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x2ac>)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4924      	ldr	r1, [pc, #144]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4920      	ldr	r1, [pc, #128]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	491a      	ldr	r1, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4916      	ldr	r1, [pc, #88]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d025      	beq.n	8001e34 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4910      	ldr	r1, [pc, #64]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
 8001df4:	e025      	b.n	8001e42 <HAL_GPIO_Init+0x2da>
 8001df6:	bf00      	nop
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10310000 	.word	0x10310000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	10210000 	.word	0x10210000
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40011400 	.word	0x40011400
 8001e28:	40011800 	.word	0x40011800
 8001e2c:	40011c00 	.word	0x40011c00
 8001e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4913      	ldr	r1, [pc, #76]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60cb      	str	r3, [r1, #12]
 8001e5a:	e006      	b.n	8001e6a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	4909      	ldr	r1, [pc, #36]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f47f ae7e 	bne.w	8001b7c <HAL_GPIO_Init+0x14>
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	372c      	adds	r7, #44	; 0x2c
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001e9e:	e0a6      	b.n	8001fee <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8099 	beq.w	8001fe8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001eb6:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_GPIO_DeInit+0x178>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_DeInit+0x17c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_DeInit+0x90>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_GPIO_DeInit+0x180>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_DeInit+0x8c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_GPIO_DeInit+0x184>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_DeInit+0x88>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	; (8002018 <HAL_GPIO_DeInit+0x188>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_DeInit+0x84>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_GPIO_DeInit+0x18c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_DeInit+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a47      	ldr	r2, [pc, #284]	; (8002020 <HAL_GPIO_DeInit+0x190>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_DeInit+0x7c>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e00a      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	e008      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_DeInit+0x92>
 8001f20:	2300      	movs	r3, #0
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d132      	bne.n	8001f98 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001f42:	4a31      	ldr	r2, [pc, #196]	; (8002008 <HAL_GPIO_DeInit+0x178>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	482d      	ldr	r0, [pc, #180]	; (8002008 <HAL_GPIO_DeInit+0x178>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	400a      	ands	r2, r1
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	492e      	ldr	r1, [pc, #184]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	492b      	ldr	r1, [pc, #172]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4924      	ldr	r1, [pc, #144]	; (8002024 <HAL_GPIO_DeInit+0x194>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d801      	bhi.n	8001fa2 <HAL_GPIO_DeInit+0x112>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_DeInit+0x116>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d802      	bhi.n	8001fb4 <HAL_GPIO_DeInit+0x124>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_DeInit+0x12a>
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	2104      	movs	r1, #4
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f47f af52 	bne.w	8001ea0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40010000 	.word	0x40010000
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	40011000 	.word	0x40011000
 8002018:	40011400 	.word	0x40011400
 800201c:	40011800 	.word	0x40011800
 8002020:	40011c00 	.word	0x40011c00
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]
 8002062:	4613      	mov	r3, r2
 8002064:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002072:	e003      	b.n	800207c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	041a      	lsls	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	611a      	str	r2, [r3, #16]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
	...

08002088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e12b      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f96a 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ec:	f001 fbd8 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a81      	ldr	r2, [pc, #516]	; (80022fc <HAL_I2C_Init+0x274>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d807      	bhi.n	800210c <HAL_I2C_Init+0x84>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a80      	ldr	r2, [pc, #512]	; (8002300 <HAL_I2C_Init+0x278>)
 8002100:	4293      	cmp	r3, r2
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e006      	b.n	800211a <HAL_I2C_Init+0x92>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a7d      	ldr	r2, [pc, #500]	; (8002304 <HAL_I2C_Init+0x27c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0e7      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a78      	ldr	r2, [pc, #480]	; (8002308 <HAL_I2C_Init+0x280>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9b      	lsrs	r3, r3, #18
 800212c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_I2C_Init+0x274>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d802      	bhi.n	800215c <HAL_I2C_Init+0xd4>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3301      	adds	r3, #1
 800215a:	e009      	b.n	8002170 <HAL_I2C_Init+0xe8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a69      	ldr	r2, [pc, #420]	; (800230c <HAL_I2C_Init+0x284>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	3301      	adds	r3, #1
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	495c      	ldr	r1, [pc, #368]	; (80022fc <HAL_I2C_Init+0x274>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d819      	bhi.n	80021c4 <HAL_I2C_Init+0x13c>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e59      	subs	r1, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fbb1 f3f3 	udiv	r3, r1, r3
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021a4:	400b      	ands	r3, r1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_I2C_Init+0x138>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e59      	subs	r1, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	e051      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e04f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_I2C_Init+0x168>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	fbb0 f3f3 	udiv	r3, r0, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e012      	b.n	8002216 <HAL_I2C_Init+0x18e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x196>
 800221a:	2301      	movs	r3, #1
 800221c:	e022      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <HAL_I2C_Init+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e58      	subs	r0, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	440b      	add	r3, r1
 8002234:	fbb0 f3f3 	udiv	r3, r0, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	0099      	lsls	r1, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6809      	ldr	r1, [r1, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6911      	ldr	r1, [r2, #16]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	000186a0 	.word	0x000186a0
 8002300:	001e847f 	.word	0x001e847f
 8002304:	003d08ff 	.word	0x003d08ff
 8002308:	431bde83 	.word	0x431bde83
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e021      	b.n	8002366 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2224      	movs	r2, #36	; 0x24
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff f862 	bl	8001404 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
 8002380:	4613      	mov	r3, r2
 8002382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff f9b8 	bl	80016f8 <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	f040 80e0 	bne.w	8002558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2319      	movs	r3, #25
 800239e:	2201      	movs	r2, #1
 80023a0:	4970      	ldr	r1, [pc, #448]	; (8002564 <HAL_I2C_Master_Transmit+0x1f4>)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fccc 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0d3      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_I2C_Master_Transmit+0x50>
 80023bc:	2302      	movs	r3, #2
 80023be:	e0cc      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d007      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2221      	movs	r2, #33	; 0x21
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2210      	movs	r2, #16
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	893a      	ldrh	r2, [r7, #8]
 8002416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_I2C_Master_Transmit+0x1f8>)
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002428:	8979      	ldrh	r1, [r7, #10]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fb1c 	bl	8002a6c <I2C_MasterRequestWrite>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e08d      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002454:	e066      	b.n	8002524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	6a39      	ldr	r1, [r7, #32]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fd46 	bl	8002eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b04      	cmp	r3, #4
 800246c:	d107      	bne.n	800247e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d11b      	bne.n	80024f8 <HAL_I2C_Master_Transmit+0x188>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d017      	beq.n	80024f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6a39      	ldr	r1, [r7, #32]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fd36 	bl	8002f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b04      	cmp	r3, #4
 800250e:	d107      	bne.n	8002520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e01a      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d194      	bne.n	8002456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	00100002 	.word	0x00100002
 8002568:	ffff0000 	.word	0xffff0000

0800256c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800258a:	f7ff f8b5 	bl	80016f8 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b20      	cmp	r3, #32
 800259a:	f040 8244 	bne.w	8002a26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2319      	movs	r3, #25
 80025a4:	2201      	movs	r2, #1
 80025a6:	4982      	ldr	r1, [pc, #520]	; (80027b0 <HAL_I2C_Mem_Read+0x244>)
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fbc9 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
 80025b6:	e237      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Mem_Read+0x5a>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e230      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d007      	beq.n	80025ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2222      	movs	r2, #34	; 0x22
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <HAL_I2C_Mem_Read+0x248>)
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800262e:	88f8      	ldrh	r0, [r7, #6]
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4603      	mov	r3, r0
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fa96 	bl	8002b70 <I2C_RequestMemoryRead>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1ec      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e1c0      	b.n	8002a00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b01      	cmp	r3, #1
 8002684:	d11e      	bne.n	80026c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002694:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002696:	b672      	cpsid	i
}
 8002698:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026c0:	b662      	cpsie	i
}
 80026c2:	e035      	b.n	8002730 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11e      	bne.n	800270a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002706:	b662      	cpsie	i
}
 8002708:	e012      	b.n	8002730 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002730:	e166      	b.n	8002a00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	2b03      	cmp	r3, #3
 8002738:	f200 811f 	bhi.w	800297a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	2b01      	cmp	r3, #1
 8002742:	d123      	bne.n	800278c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fc51 	bl	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e167      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a
 800278a:	e139      	b.n	8002a00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b02      	cmp	r3, #2
 8002792:	d152      	bne.n	800283a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	2200      	movs	r2, #0
 800279c:	4906      	ldr	r1, [pc, #24]	; (80027b8 <HAL_I2C_Mem_Read+0x24c>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 face 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e13c      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
 80027ae:	bf00      	nop
 80027b0:	00100002 	.word	0x00100002
 80027b4:	ffff0000 	.word	0xffff0000
 80027b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002802:	b662      	cpsie	i
}
 8002804:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002838:	e0e2      	b.n	8002a00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	2200      	movs	r2, #0
 8002842:	497b      	ldr	r1, [pc, #492]	; (8002a30 <HAL_I2C_Mem_Read+0x4c4>)
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fa7b 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0e9      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002862:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002864:	b672      	cpsid	i
}
 8002866:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_I2C_Mem_Read+0x4c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_I2C_Mem_Read+0x4cc>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a1a      	lsrs	r2, r3, #8
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00da      	lsls	r2, r3, #3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d118      	bne.n	80028f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028e2:	b662      	cpsie	i
}
 80028e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e09a      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d1d9      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002942:	b662      	cpsie	i
}
 8002944:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002978:	e042      	b.n	8002a00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fb36 	bl	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04c      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d118      	bne.n	8002a00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f ae94 	bne.w	8002732 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	00010004 	.word	0x00010004
 8002a34:	20000074 	.word	0x20000074
 8002a38:	14f8b589 	.word	0x14f8b589

08002a3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d006      	beq.n	8002a96 <I2C_MasterRequestWrite+0x2a>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d003      	beq.n	8002a96 <I2C_MasterRequestWrite+0x2a>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00b      	b.n	8002ac0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b12      	cmp	r3, #18
 8002aae:	d107      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f937 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00d      	beq.n	8002af4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae6:	d103      	bne.n	8002af0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e035      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	e01b      	b.n	8002b48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b10:	897b      	ldrh	r3, [r7, #10]
 8002b12:	11db      	asrs	r3, r3, #7
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0306 	and.w	r3, r3, #6
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 030f 	orn	r3, r3, #15
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <I2C_MasterRequestWrite+0xfc>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f95d 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e010      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <I2C_MasterRequestWrite+0x100>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f94d 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00010008 	.word	0x00010008
 8002b6c:	00010002 	.word	0x00010002

08002b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8c2 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd0:	d103      	bne.n	8002bda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0aa      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	4952      	ldr	r1, [pc, #328]	; (8002d3c <I2C_RequestMemoryRead+0x1cc>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f8fa 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e097      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f964 	bl	8002eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e076      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]
 8002c56:	e021      	b.n	8002c9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c68:	6a39      	ldr	r1, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f93e 	bl	8002eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e050      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c92:	893b      	ldrh	r3, [r7, #8]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f923 	bl	8002eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e035      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f82b 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	d103      	bne.n	8002d08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e013      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	4906      	ldr	r1, [pc, #24]	; (8002d3c <I2C_RequestMemoryRead+0x1cc>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f863 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	00010002 	.word	0x00010002

08002d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	e025      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d021      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fccd 	bl	80016f8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d116      	bne.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e023      	b.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10d      	bne.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	e00c      	b.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d0b6      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfc:	e051      	b.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d123      	bne.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e046      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d021      	beq.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7fe fc4b 	bl	80016f8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e020      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10c      	bne.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e00b      	b.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d18d      	bne.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef8:	e02d      	b.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f8ce 	bl	800309c <I2C_IsAcknowledgeFailed>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e02d      	b.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d021      	beq.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fe fbf1 	bl	80016f8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e007      	b.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d1ca      	bne.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f7a:	e02d      	b.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f88d 	bl	800309c <I2C_IsAcknowledgeFailed>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e02d      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d021      	beq.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fe fbb0 	bl	80016f8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d1ca      	bne.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ffc:	e042      	b.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d119      	bne.n	8003040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e029      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003040:	f7fe fb5a 	bl	80016f8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d1b5      	bne.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d11b      	bne.n	80030ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0204 	orr.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e272      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8087 	beq.w	8003226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	4b92      	ldr	r3, [pc, #584]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00c      	beq.n	800313e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003124:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d112      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
 8003130:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06c      	beq.n	8003224 <HAL_RCC_OscConfig+0x12c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d168      	bne.n	8003224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e24c      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x76>
 8003160:	4b80      	ldr	r3, [pc, #512]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a7f      	ldr	r2, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e02e      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x98>
 8003176:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b78      	ldr	r3, [pc, #480]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a77      	ldr	r2, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0xbc>
 800319a:	4b72      	ldr	r3, [pc, #456]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a71      	ldr	r2, [pc, #452]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b6f      	ldr	r3, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6e      	ldr	r2, [pc, #440]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 80031b4:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fa90 	bl	80016f8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fa8c 	bl	80016f8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e200      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b5d      	ldr	r3, [pc, #372]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xe4>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fa7c 	bl	80016f8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fa78 	bl	80016f8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1ec      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x10c>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003232:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c0      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4939      	ldr	r1, [pc, #228]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x270>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fa31 	bl	80016f8 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fa2d 	bl	80016f8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a1      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCC_OscConfig+0x270>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa10 	bl	80016f8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fa0c 	bl	80016f8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e180      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d03a      	beq.n	800337c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d019      	beq.n	8003342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe f9f0 	bl	80016f8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe f9ec 	bl	80016f8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e160      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f000 fad8 	bl	80038f0 <RCC_Delay>
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe f9d6 	bl	80016f8 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe f9d2 	bl	80016f8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d908      	bls.n	8003370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e146      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	42420000 	.word	0x42420000
 800336c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e9      	bne.n	8003350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a6 	beq.w	80034d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a87      	ldr	r2, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b85      	ldr	r3, [pc, #532]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b7f      	ldr	r3, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7e      	ldr	r2, [pc, #504]	; (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fe f993 	bl	80016f8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe f98f 	bl	80016f8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b64      	cmp	r3, #100	; 0x64
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e103      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x312>
 80033fc:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e02d      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x334>
 8003412:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4a69      	ldr	r2, [pc, #420]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6213      	str	r3, [r2, #32]
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4a66      	ldr	r2, [pc, #408]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	6213      	str	r3, [r2, #32]
 800342a:	e01c      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d10c      	bne.n	800344e <HAL_RCC_OscConfig+0x356>
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4a60      	ldr	r2, [pc, #384]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	e00b      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a5a      	ldr	r2, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b58      	ldr	r3, [pc, #352]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a57      	ldr	r2, [pc, #348]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe f943 	bl	80016f8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe f93f 	bl	80016f8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0b1      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <HAL_RCC_OscConfig+0x37e>
 8003498:	e014      	b.n	80034c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fe f92d 	bl	80016f8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe f929 	bl	80016f8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e09b      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8087 	beq.w	80035ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d061      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d146      	bne.n	8003582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe f8fd 	bl	80016f8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe f8f9 	bl	80016f8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e06d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d108      	bne.n	800353c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4921      	ldr	r1, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a19      	ldr	r1, [r3, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	430b      	orrs	r3, r1
 800354e:	491b      	ldr	r1, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe f8cd 	bl	80016f8 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe f8c9 	bl	80016f8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e03d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x46a>
 8003580:	e035      	b.n	80035ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe f8b6 	bl	80016f8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe f8b2 	bl	80016f8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e026      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x498>
 80035ae:	e01e      	b.n	80035ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e019      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x500>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0d0      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d910      	bls.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4965      	ldr	r1, [pc, #404]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800367a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d040      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d115      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e073      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06b      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4936      	ldr	r1, [pc, #216]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe f804 	bl	80016f8 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe f800 	bl	80016f8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e053      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d210      	bcs.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4922      	ldr	r1, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1cc>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd ff62 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	08007110 	.word	0x08007110
 80037c8:	20000074 	.word	0x20000074
 80037cc:	20000078 	.word	0x20000078

080037d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b490      	push	{r4, r7}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037d6:	4b29      	ldr	r3, [pc, #164]	; (800387c <HAL_RCC_GetSysClockFreq+0xac>)
 80037d8:	1d3c      	adds	r4, r7, #4
 80037da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e0:	f240 2301 	movw	r3, #513	; 0x201
 80037e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 800380a:	2b08      	cmp	r3, #8
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x46>
 800380e:	e02b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e02b      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3328      	adds	r3, #40	; 0x28
 8003820:	443b      	add	r3, r7
 8003822:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003826:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0c5b      	lsrs	r3, r3, #17
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	3328      	adds	r3, #40	; 0x28
 800383e:	443b      	add	r3, r7
 8003840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	fb03 f202 	mul.w	r2, r3, r2
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e004      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	623b      	str	r3, [r7, #32]
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb4>)
 800386a:	623b      	str	r3, [r7, #32]
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	6a3b      	ldr	r3, [r7, #32]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bc90      	pop	{r4, r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	080070f8 	.word	0x080070f8
 8003880:	40021000 	.word	0x40021000
 8003884:	007a1200 	.word	0x007a1200
 8003888:	003d0900 	.word	0x003d0900

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_RCC_GetHCLKFreq+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000074 	.word	0x20000074

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08007120 	.word	0x08007120

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffde 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08007120 	.word	0x08007120

080038f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <RCC_Delay+0x34>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <RCC_Delay+0x38>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0a5b      	lsrs	r3, r3, #9
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800390c:	bf00      	nop
  }
  while (Delay --);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	60fa      	str	r2, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f9      	bne.n	800390c <RCC_Delay+0x1c>
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	20000074 	.word	0x20000074
 8003928:	10624dd3 	.word	0x10624dd3

0800392c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fd78 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fa7e 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e044      	b.n	8003a6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_TIM_Base_Start_IT+0xac>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x6c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIM_Base_Start_IT+0xb0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x6c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d00e      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x6c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x6c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x6c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d010      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	e007      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40013400 	.word	0x40013400
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00

08003a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9b1 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9a4 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9b3 	bl	8003e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0204 	mvn.w	r2, #4
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f987 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f97a 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f989 	bl	8003e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0208 	mvn.w	r2, #8
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f95d 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f950 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f95f 	bl	8003e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0210 	mvn.w	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f933 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f926 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f935 	bl	8003e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fc fc10 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa9d 	bl	8004176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8f9 	bl	8003e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0220 	mvn.w	r2, #32
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa68 	bl	8004164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIM_ConfigClockSource+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0b3      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x180>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cec:	d03e      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0xd0>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	f200 8087 	bhi.w	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	f000 8085 	beq.w	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d87f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d01a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0xa2>
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d87b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d0c:	2b60      	cmp	r3, #96	; 0x60
 8003d0e:	d050      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x116>
 8003d10:	2b60      	cmp	r3, #96	; 0x60
 8003d12:	d877      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d14:	2b50      	cmp	r3, #80	; 0x50
 8003d16:	d03c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xf6>
 8003d18:	2b50      	cmp	r3, #80	; 0x50
 8003d1a:	d873      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d058      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x136>
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d86f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d064      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x156>
 8003d28:	2b30      	cmp	r3, #48	; 0x30
 8003d2a:	d86b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d060      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x156>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d867      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x156>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d05a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d3c:	e062      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6899      	ldr	r1, [r3, #8]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f000 f97e 	bl	800404e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	609a      	str	r2, [r3, #8]
      break;
 8003d6a:	e04e      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f000 f967 	bl	800404e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d8e:	609a      	str	r2, [r3, #8]
      break;
 8003d90:	e03b      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 f8de 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2150      	movs	r1, #80	; 0x50
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f935 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003db0:	e02b      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f8fc 	bl	8003fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2160      	movs	r1, #96	; 0x60
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f925 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e01b      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 f8be 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2140      	movs	r1, #64	; 0x40
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f915 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 f90c 	bl	800401a <TIM_ITRx_SetConfig>
        break;
 8003e02:	e002      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <TIM_Base_SetConfig+0xe0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2e      	ldr	r2, [pc, #184]	; (8003f58 <TIM_Base_SetConfig+0xec>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <TIM_Base_SetConfig+0xf0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <TIM_Base_SetConfig+0xe0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_Base_SetConfig+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0x82>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <TIM_Base_SetConfig+0xe8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0x82>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <TIM_Base_SetConfig+0xec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0x82>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <TIM_Base_SetConfig+0xf0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <TIM_Base_SetConfig+0xe0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0xc8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40013400 	.word	0x40013400
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f023 0210 	bic.w	r2, r3, #16
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	031b      	lsls	r3, r3, #12
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 0307 	orr.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	431a      	orrs	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	609a      	str	r2, [r3, #8]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e050      	b.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d00e      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a12      	ldr	r2, [pc, #72]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10c      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800
 8004160:	40000c00 	.word	0x40000c00

08004164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e03f      	b.n	800421a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd f970 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9a7 	bl	8004520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08a      	sub	sp, #40	; 0x28
 8004226:	af02      	add	r7, sp, #8
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	d17c      	bne.n	800433c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_UART_Transmit+0x2c>
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e075      	b.n	800433e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_UART_Transmit+0x3e>
 800425c:	2302      	movs	r3, #2
 800425e:	e06e      	b.n	800433e <HAL_UART_Transmit+0x11c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2221      	movs	r2, #33	; 0x21
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd fa3f 	bl	80016f8 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Transmit+0x82>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042b4:	e02a      	b.n	800430c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f8e2 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e036      	b.n	800433e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	3302      	adds	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e007      	b.n	80042fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3301      	adds	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1cf      	bne.n	80042b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2140      	movs	r1, #64	; 0x40
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f8b2 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e006      	b.n	800433e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b08a      	sub	sp, #40	; 0x28
 800434a:	af02      	add	r7, sp, #8
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b20      	cmp	r3, #32
 8004364:	f040 808c 	bne.w	8004480 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Receive+0x2e>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e084      	b.n	8004482 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_UART_Receive+0x40>
 8004382:	2302      	movs	r3, #2
 8004384:	e07d      	b.n	8004482 <HAL_UART_Receive+0x13c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2222      	movs	r2, #34	; 0x22
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a2:	f7fd f9a9 	bl	80016f8 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d108      	bne.n	80043d0 <HAL_UART_Receive+0x8a>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e003      	b.n	80043d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80043e0:	e043      	b.n	800446a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2120      	movs	r1, #32
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f84c 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e042      	b.n	8004482 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	b29a      	uxth	r2, r3
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	3302      	adds	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e01f      	b.n	800445c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004424:	d007      	beq.n	8004436 <HAL_UART_Receive+0xf0>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_UART_Receive+0xfe>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e008      	b.n	8004456 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	b2da      	uxtb	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3301      	adds	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1b6      	bne.n	80043e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	e02c      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d028      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <UART_WaitOnFlagUntilTimeout+0x30>
 80044aa:	f7fd f925 	bl	80016f8 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d21d      	bcs.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d0c3      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800455a:	f023 030c 	bic.w	r3, r3, #12
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <UART_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7ff f99e 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	e002      	b.n	8004596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7ff f986 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009a      	lsls	r2, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	4a22      	ldr	r2, [pc, #136]	; (8004638 <UART_SetConfig+0x118>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	0119      	lsls	r1, r3, #4
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009a      	lsls	r2, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <UART_SetConfig+0x118>)
 80045ce:	fba3 0302 	umull	r0, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2064      	movs	r0, #100	; 0x64
 80045d6:	fb00 f303 	mul.w	r3, r0, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	3332      	adds	r3, #50	; 0x32
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <UART_SetConfig+0x118>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ec:	4419      	add	r1, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009a      	lsls	r2, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	fbb2 f2f3 	udiv	r2, r2, r3
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <UART_SetConfig+0x118>)
 8004606:	fba3 0302 	umull	r0, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2064      	movs	r0, #100	; 0x64
 800460e:	fb00 f303 	mul.w	r3, r0, r3
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	3332      	adds	r3, #50	; 0x32
 8004618:	4a07      	ldr	r2, [pc, #28]	; (8004638 <UART_SetConfig+0x118>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	f003 020f 	and.w	r2, r3, #15
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	440a      	add	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40013800 	.word	0x40013800
 8004638:	51eb851f 	.word	0x51eb851f

0800463c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	2b84      	cmp	r3, #132	; 0x84
 8004650:	d005      	beq.n	800465e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	3303      	adds	r3, #3
 800465c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800466e:	f000 fad1 	bl	8004c14 <vTaskStartScheduler>
  
  return osOK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}

08004678 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af04      	add	r7, sp, #16
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <osThreadCreate+0x54>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01c      	beq.n	80046cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685c      	ldr	r4, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691e      	ldr	r6, [r3, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ffc9 	bl	800463c <makeFreeRtosPriority>
 80046aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046b4:	9202      	str	r2, [sp, #8]
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	9100      	str	r1, [sp, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4632      	mov	r2, r6
 80046be:	4629      	mov	r1, r5
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 f8e8 	bl	8004896 <xTaskCreateStatic>
 80046c6:	4603      	mov	r3, r0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e01c      	b.n	8004706 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685c      	ldr	r4, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d8:	b29e      	uxth	r6, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ffab 	bl	800463c <makeFreeRtosPriority>
 80046e6:	4602      	mov	r2, r0
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	9200      	str	r2, [sp, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4632      	mov	r2, r6
 80046f4:	4629      	mov	r1, r5
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f929 	bl	800494e <xTaskCreate>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004710 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <osDelay+0x16>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	e000      	b.n	8004728 <osDelay+0x18>
 8004726:	2301      	movs	r3, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fa3f 	bl	8004bac <vTaskDelay>
  
  return osOK;
 800472e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f103 0208 	add.w	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f103 0208 	add.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d103      	bne.n	80047f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e00c      	b.n	800480e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3308      	adds	r3, #8
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e002      	b.n	8004802 <vListInsert+0x2e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d2f6      	bcs.n	80047fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6852      	ldr	r2, [r2, #4]
 8004864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d103      	bne.n	8004878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08e      	sub	sp, #56	; 0x38
 800489a:	af04      	add	r7, sp, #16
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <xTaskCreateStatic+0x46>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048dc:	2354      	movs	r3, #84	; 0x54
 80048de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b54      	cmp	r3, #84	; 0x54
 80048e4:	d00a      	beq.n	80048fc <xTaskCreateStatic+0x66>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	61bb      	str	r3, [r7, #24]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01e      	beq.n	8004940 <xTaskCreateStatic+0xaa>
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004910:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	2202      	movs	r2, #2
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800491a:	2300      	movs	r3, #0
 800491c:	9303      	str	r3, [sp, #12]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9302      	str	r3, [sp, #8]
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f850 	bl	80049d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800493a:	f000 f8cd 	bl	8004ad8 <prvAddNewTaskToReadyList>
 800493e:	e001      	b.n	8004944 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004944:	697b      	ldr	r3, [r7, #20]
	}
 8004946:	4618      	mov	r0, r3
 8004948:	3728      	adds	r7, #40	; 0x28
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08c      	sub	sp, #48	; 0x30
 8004952:	af04      	add	r7, sp, #16
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fe8c 	bl	8005680 <pvPortMalloc>
 8004968:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004970:	2054      	movs	r0, #84	; 0x54
 8004972:	f000 fe85 	bl	8005680 <pvPortMalloc>
 8004976:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
 8004984:	e005      	b.n	8004992 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f000 ff3e 	bl	8005808 <vPortFree>
 800498c:	e001      	b.n	8004992 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d017      	beq.n	80049c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f80e 	bl	80049d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049bc:	69f8      	ldr	r0, [r7, #28]
 80049be:	f000 f88b 	bl	8004ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e002      	b.n	80049ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049ce:	69bb      	ldr	r3, [r7, #24]
	}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049f0:	3b01      	subs	r3, #1
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	617b      	str	r3, [r7, #20]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e012      	b.n	8004a4c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	7819      	ldrb	r1, [r3, #0]
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	3334      	adds	r3, #52	; 0x34
 8004a36:	460a      	mov	r2, r1
 8004a38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d9e9      	bls.n	8004a26 <prvInitialiseNewTask+0x4e>
 8004a52:	e000      	b.n	8004a56 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004a54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b06      	cmp	r3, #6
 8004a62:	d901      	bls.n	8004a68 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a64:	2306      	movs	r3, #6
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	2200      	movs	r2, #0
 8004a78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fe79 	bl	8004776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	3318      	adds	r3, #24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fe74 	bl	8004776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f1c3 0207 	rsb	r2, r3, #7
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f000 fc2c 	bl	8005314 <pxPortInitialiseStack>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ace:	bf00      	nop
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ae0:	f000 fd0c 	bl	80054fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004aec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004af6:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d110      	bne.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b04:	f000 fac0 	bl	8005088 <prvInitialiseTaskLists>
 8004b08:	e00d      	b.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <prvAddNewTaskToReadyList+0xc0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d802      	bhi.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <prvAddNewTaskToReadyList+0xc4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <prvAddNewTaskToReadyList+0xc4>)
 8004b2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2201      	movs	r2, #1
 8004b36:	409a      	lsls	r2, r3
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <prvAddNewTaskToReadyList+0xc8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <prvAddNewTaskToReadyList+0xc8>)
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <prvAddNewTaskToReadyList+0xcc>)
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7ff fe18 	bl	800478e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b5e:	f000 fcfd 	bl	800555c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <prvAddNewTaskToReadyList+0xc0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00e      	beq.n	8004b88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d207      	bcs.n	8004b88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <prvAddNewTaskToReadyList+0xd0>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2000064c 	.word	0x2000064c
 8004b94:	2000054c 	.word	0x2000054c
 8004b98:	20000658 	.word	0x20000658
 8004b9c:	20000668 	.word	0x20000668
 8004ba0:	20000654 	.word	0x20000654
 8004ba4:	20000550 	.word	0x20000550
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <vTaskDelay+0x60>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <vTaskDelay+0x30>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bdc:	f000 f87a 	bl	8004cd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004be0:	2100      	movs	r1, #0
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fb30 	bl	8005248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004be8:	f000 f882 	bl	8004cf0 <xTaskResumeAll>
 8004bec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <vTaskDelay+0x64>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000674 	.word	0x20000674
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c22:	463a      	mov	r2, r7
 8004c24:	1d39      	adds	r1, r7, #4
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fb fb08 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	9202      	str	r2, [sp, #8]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	460a      	mov	r2, r1
 8004c42:	491e      	ldr	r1, [pc, #120]	; (8004cbc <vTaskStartScheduler+0xa8>)
 8004c44:	481e      	ldr	r0, [pc, #120]	; (8004cc0 <vTaskStartScheduler+0xac>)
 8004c46:	f7ff fe26 	bl	8004896 <xTaskCreateStatic>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <vTaskStartScheduler+0xb0>)
 8004c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c50:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <vTaskStartScheduler+0xb0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e001      	b.n	8004c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d116      	bne.n	8004c96 <vTaskStartScheduler+0x82>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	613b      	str	r3, [r7, #16]
}
 8004c7a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <vTaskStartScheduler+0xb4>)
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <vTaskStartScheduler+0xb8>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <vTaskStartScheduler+0xbc>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c90:	f000 fbc2 	bl	8005418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c94:	e00e      	b.n	8004cb4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d10a      	bne.n	8004cb4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60fb      	str	r3, [r7, #12]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <vTaskStartScheduler+0x9e>
}
 8004cb4:	bf00      	nop
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08007108 	.word	0x08007108
 8004cc0:	08005059 	.word	0x08005059
 8004cc4:	20000670 	.word	0x20000670
 8004cc8:	2000066c 	.word	0x2000066c
 8004ccc:	20000658 	.word	0x20000658
 8004cd0:	20000650 	.word	0x20000650

08004cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <vTaskSuspendAll+0x18>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	4a03      	ldr	r2, [pc, #12]	; (8004cec <vTaskSuspendAll+0x18>)
 8004ce0:	6013      	str	r3, [r2, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000674 	.word	0x20000674

08004cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	603b      	str	r3, [r7, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d1c:	f000 fbee 	bl	80054fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d20:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	4a37      	ldr	r2, [pc, #220]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d161      	bne.n	8004df6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <xTaskResumeAll+0x118>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d05d      	beq.n	8004df6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d3a:	e02e      	b.n	8004d9a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d3c:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <xTaskResumeAll+0x11c>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3318      	adds	r3, #24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fd7b 	bl	8004844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fd76 	bl	8004844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <xTaskResumeAll+0x120>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <xTaskResumeAll+0x120>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <xTaskResumeAll+0x124>)
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff fd04 	bl	800478e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <xTaskResumeAll+0x128>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d302      	bcc.n	8004d9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <xTaskResumeAll+0x12c>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9a:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <xTaskResumeAll+0x11c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1cc      	bne.n	8004d3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004da8:	f000 fa0c 	bl	80051c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004dac:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <xTaskResumeAll+0x130>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d010      	beq.n	8004dda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004db8:	f000 f836 	bl	8004e28 <xTaskIncrementTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004dc2:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <xTaskResumeAll+0x12c>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f1      	bne.n	8004db8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <xTaskResumeAll+0x130>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <xTaskResumeAll+0x12c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <xTaskResumeAll+0x134>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f000 fbb1 	bl	800555c <vPortExitCritical>

	return xAlreadyYielded;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000674 	.word	0x20000674
 8004e08:	2000064c 	.word	0x2000064c
 8004e0c:	2000060c 	.word	0x2000060c
 8004e10:	20000654 	.word	0x20000654
 8004e14:	20000550 	.word	0x20000550
 8004e18:	2000054c 	.word	0x2000054c
 8004e1c:	20000660 	.word	0x20000660
 8004e20:	2000065c 	.word	0x2000065c
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e32:	4b51      	ldr	r3, [pc, #324]	; (8004f78 <xTaskIncrementTick+0x150>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 808d 	bne.w	8004f56 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e3c:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <xTaskIncrementTick+0x154>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e44:	4a4d      	ldr	r2, [pc, #308]	; (8004f7c <xTaskIncrementTick+0x154>)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d120      	bne.n	8004e92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e50:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <xTaskIncrementTick+0x158>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <xTaskIncrementTick+0x46>
 8004e70:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <xTaskIncrementTick+0x158>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <xTaskIncrementTick+0x15c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a41      	ldr	r2, [pc, #260]	; (8004f80 <xTaskIncrementTick+0x158>)
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4a41      	ldr	r2, [pc, #260]	; (8004f84 <xTaskIncrementTick+0x15c>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <xTaskIncrementTick+0x160>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <xTaskIncrementTick+0x160>)
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	f000 f999 	bl	80051c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e92:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <xTaskIncrementTick+0x164>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d34d      	bcc.n	8004f38 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e9c:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <xTaskIncrementTick+0x158>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xTaskIncrementTick+0x82>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xTaskIncrementTick+0x84>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb0:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <xTaskIncrementTick+0x164>)
 8004eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb6:	601a      	str	r2, [r3, #0]
					break;
 8004eb8:	e03e      	b.n	8004f38 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <xTaskIncrementTick+0x158>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d203      	bcs.n	8004eda <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ed2:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <xTaskIncrementTick+0x164>)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6013      	str	r3, [r2, #0]
						break;
 8004ed8:	e02e      	b.n	8004f38 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fcb0 	bl	8004844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	3318      	adds	r3, #24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fca7 	bl	8004844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	2201      	movs	r2, #1
 8004efc:	409a      	lsls	r2, r3
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <xTaskIncrementTick+0x168>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <xTaskIncrementTick+0x168>)
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <xTaskIncrementTick+0x16c>)
 8004f16:	441a      	add	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7ff fc35 	bl	800478e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <xTaskIncrementTick+0x170>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d3b4      	bcc.n	8004e9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f32:	2301      	movs	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f36:	e7b1      	b.n	8004e9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f38:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <xTaskIncrementTick+0x170>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	4915      	ldr	r1, [pc, #84]	; (8004f94 <xTaskIncrementTick+0x16c>)
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d907      	bls.n	8004f60 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e004      	b.n	8004f60 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <xTaskIncrementTick+0x174>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <xTaskIncrementTick+0x174>)
 8004f5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <xTaskIncrementTick+0x178>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f6c:	697b      	ldr	r3, [r7, #20]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000674 	.word	0x20000674
 8004f7c:	20000650 	.word	0x20000650
 8004f80:	20000604 	.word	0x20000604
 8004f84:	20000608 	.word	0x20000608
 8004f88:	20000664 	.word	0x20000664
 8004f8c:	2000066c 	.word	0x2000066c
 8004f90:	20000654 	.word	0x20000654
 8004f94:	20000550 	.word	0x20000550
 8004f98:	2000054c 	.word	0x2000054c
 8004f9c:	2000065c 	.word	0x2000065c
 8004fa0:	20000660 	.word	0x20000660

08004fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <vTaskSwitchContext+0xa0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <vTaskSwitchContext+0xa4>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb8:	e03f      	b.n	800503a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <vTaskSwitchContext+0xa4>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fc0:	4b22      	ldr	r3, [pc, #136]	; (800504c <vTaskSwitchContext+0xa8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	fab3 f383 	clz	r3, r3
 8004fcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	f1c3 031f 	rsb	r3, r3, #31
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	491e      	ldr	r1, [pc, #120]	; (8005050 <vTaskSwitchContext+0xac>)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	607b      	str	r3, [r7, #4]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <vTaskSwitchContext+0x5a>
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a11      	ldr	r2, [pc, #68]	; (8005050 <vTaskSwitchContext+0xac>)
 800500c:	4413      	add	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3308      	adds	r3, #8
 8005022:	429a      	cmp	r2, r3
 8005024:	d104      	bne.n	8005030 <vTaskSwitchContext+0x8c>
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <vTaskSwitchContext+0xb0>)
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	20000674 	.word	0x20000674
 8005048:	20000660 	.word	0x20000660
 800504c:	20000654 	.word	0x20000654
 8005050:	20000550 	.word	0x20000550
 8005054:	2000054c 	.word	0x2000054c

08005058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005060:	f000 f852 	bl	8005108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <prvIdleTask+0x28>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d9f9      	bls.n	8005060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <prvIdleTask+0x2c>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800507c:	e7f0      	b.n	8005060 <prvIdleTask+0x8>
 800507e:	bf00      	nop
 8005080:	20000550 	.word	0x20000550
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e00c      	b.n	80050ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <prvInitialiseTaskLists+0x60>)
 80050a0:	4413      	add	r3, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fb48 	bl	8004738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d9ef      	bls.n	8005094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b4:	480d      	ldr	r0, [pc, #52]	; (80050ec <prvInitialiseTaskLists+0x64>)
 80050b6:	f7ff fb3f 	bl	8004738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050ba:	480d      	ldr	r0, [pc, #52]	; (80050f0 <prvInitialiseTaskLists+0x68>)
 80050bc:	f7ff fb3c 	bl	8004738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c0:	480c      	ldr	r0, [pc, #48]	; (80050f4 <prvInitialiseTaskLists+0x6c>)
 80050c2:	f7ff fb39 	bl	8004738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050c6:	480c      	ldr	r0, [pc, #48]	; (80050f8 <prvInitialiseTaskLists+0x70>)
 80050c8:	f7ff fb36 	bl	8004738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <prvInitialiseTaskLists+0x74>)
 80050ce:	f7ff fb33 	bl	8004738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <prvInitialiseTaskLists+0x78>)
 80050d4:	4a05      	ldr	r2, [pc, #20]	; (80050ec <prvInitialiseTaskLists+0x64>)
 80050d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <prvInitialiseTaskLists+0x7c>)
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <prvInitialiseTaskLists+0x68>)
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000550 	.word	0x20000550
 80050ec:	200005dc 	.word	0x200005dc
 80050f0:	200005f0 	.word	0x200005f0
 80050f4:	2000060c 	.word	0x2000060c
 80050f8:	20000620 	.word	0x20000620
 80050fc:	20000638 	.word	0x20000638
 8005100:	20000604 	.word	0x20000604
 8005104:	20000608 	.word	0x20000608

08005108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510e:	e019      	b.n	8005144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005110:	f000 f9f4 	bl	80054fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <prvCheckTasksWaitingTermination+0x50>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fb8f 	bl	8004844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <prvCheckTasksWaitingTermination+0x54>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3b01      	subs	r3, #1
 800512c:	4a0b      	ldr	r2, [pc, #44]	; (800515c <prvCheckTasksWaitingTermination+0x54>)
 800512e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800513a:	f000 fa0f 	bl	800555c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f810 	bl	8005164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e1      	bne.n	8005110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000620 	.word	0x20000620
 800515c:	2000064c 	.word	0x2000064c
 8005160:	20000634 	.word	0x20000634

08005164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fb44 	bl	8005808 <vPortFree>
				vPortFree( pxTCB );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb41 	bl	8005808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005186:	e018      	b.n	80051ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	2b01      	cmp	r3, #1
 8005190:	d103      	bne.n	800519a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fb38 	bl	8005808 <vPortFree>
	}
 8005198:	e00f      	b.n	80051ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d00a      	beq.n	80051ba <prvDeleteTCB+0x56>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <prvDeleteTCB+0x54>
	}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <prvResetNextTaskUnblockTime+0x40>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <prvResetNextTaskUnblockTime+0x14>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <prvResetNextTaskUnblockTime+0x16>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <prvResetNextTaskUnblockTime+0x44>)
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e6:	e008      	b.n	80051fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <prvResetNextTaskUnblockTime+0x40>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <prvResetNextTaskUnblockTime+0x44>)
 80051f8:	6013      	str	r3, [r2, #0]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000604 	.word	0x20000604
 8005208:	2000066c 	.word	0x2000066c

0800520c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <xTaskGetSchedulerState+0x34>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800521a:	2301      	movs	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	e008      	b.n	8005232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <xTaskGetSchedulerState+0x38>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005228:	2302      	movs	r3, #2
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	e001      	b.n	8005232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005232:	687b      	ldr	r3, [r7, #4]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000658 	.word	0x20000658
 8005244:	20000674 	.word	0x20000674

08005248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3304      	adds	r3, #4
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff faf0 	bl	8004844 <uxListRemove>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	2201      	movs	r2, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43da      	mvns	r2, r3
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4013      	ands	r3, r2
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d10a      	bne.n	80052a0 <prvAddCurrentTaskToDelayedList+0x58>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	481a      	ldr	r0, [pc, #104]	; (8005304 <prvAddCurrentTaskToDelayedList+0xbc>)
 800529a:	f7ff fa78 	bl	800478e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800529e:	e026      	b.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d209      	bcs.n	80052cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7ff fa85 	bl	80047d4 <vListInsert>
}
 80052ca:	e010      	b.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <prvAddCurrentTaskToDelayedList+0xc4>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff fa7b 	bl	80047d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d202      	bcs.n	80052ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6013      	str	r3, [r2, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000650 	.word	0x20000650
 80052fc:	2000054c 	.word	0x2000054c
 8005300:	20000654 	.word	0x20000654
 8005304:	20000638 	.word	0x20000638
 8005308:	20000608 	.word	0x20000608
 800530c:	20000604 	.word	0x20000604
 8005310:	2000066c 	.word	0x2000066c

08005314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b04      	subs	r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b04      	subs	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <pxPortInitialiseStack+0x54>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3b14      	subs	r3, #20
 800534e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3b20      	subs	r3, #32
 800535a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	0800536d 	.word	0x0800536d

0800536c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <prvTaskExitError+0x54>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d00a      	beq.n	8005396 <prvTaskExitError+0x2a>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <prvTaskExitError+0x28>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60bb      	str	r3, [r7, #8]
}
 80053a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053aa:	bf00      	nop
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0fc      	beq.n	80053ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000080 	.word	0x20000080
	...

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ee:	4770      	bx	lr

080053f0 <pxCurrentTCBConst2>:
 80053f0:	2000054c 	.word	0x2000054c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80053f8:	4806      	ldr	r0, [pc, #24]	; (8005414 <prvPortStartFirstTask+0x1c>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	b662      	cpsie	i
 8005404:	b661      	cpsie	f
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	df00      	svc	0
 8005410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005412:	bf00      	nop
 8005414:	e000ed08 	.word	0xe000ed08

08005418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800541e:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <xPortStartScheduler+0xd0>)
 8005420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <xPortStartScheduler+0xd4>)
 8005444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005448:	2207      	movs	r2, #7
 800544a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800544c:	e009      	b.n	8005462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800544e:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3b01      	subs	r3, #1
 8005454:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	b2db      	uxtb	r3, r3
 8005460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d0ef      	beq.n	800544e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f1c3 0307 	rsb	r3, r3, #7
 8005476:	2b04      	cmp	r3, #4
 8005478:	d00a      	beq.n	8005490 <xPortStartScheduler+0x78>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60bb      	str	r3, [r7, #8]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <xPortStartScheduler+0xd8>)
 8005498:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <xPortStartScheduler+0xd8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a2:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <xPortStartScheduler+0xd8>)
 80054a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <xPortStartScheduler+0xdc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <xPortStartScheduler+0xdc>)
 80054b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054ba:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <xPortStartScheduler+0xdc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <xPortStartScheduler+0xdc>)
 80054c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054c6:	f000 f8b9 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <xPortStartScheduler+0xe0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054d0:	f7ff ff92 	bl	80053f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054d4:	f7ff fd66 	bl	8004fa4 <vTaskSwitchContext>
	prvTaskExitError();
 80054d8:	f7ff ff48 	bl	800536c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	e000e400 	.word	0xe000e400
 80054ec:	20000678 	.word	0x20000678
 80054f0:	2000067c 	.word	0x2000067c
 80054f4:	e000ed20 	.word	0xe000ed20
 80054f8:	20000080 	.word	0x20000080

080054fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005516:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <vPortEnterCritical+0x58>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	4a0d      	ldr	r2, [pc, #52]	; (8005554 <vPortEnterCritical+0x58>)
 800551e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <vPortEnterCritical+0x58>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10f      	bne.n	8005548 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <vPortEnterCritical+0x5c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <vPortEnterCritical+0x4c>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	603b      	str	r3, [r7, #0]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <vPortEnterCritical+0x4a>
	}
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000080 	.word	0x20000080
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005562:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <vPortExitCritical+0x4c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <vPortExitCritical+0x24>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <vPortExitCritical+0x4c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3b01      	subs	r3, #1
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <vPortExitCritical+0x4c>)
 8005588:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <vPortExitCritical+0x4c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <vPortExitCritical+0x42>
 8005592:	2300      	movs	r3, #0
 8005594:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800559c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	20000080 	.word	0x20000080
 80055ac:	00000000 	.word	0x00000000

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055c0:	6010      	str	r0, [r2, #0]
 80055c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055ca:	f380 8811 	msr	BASEPRI, r0
 80055ce:	f7ff fce9 	bl	8004fa4 <vTaskSwitchContext>
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8811 	msr	BASEPRI, r0
 80055da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055e6:	f380 8809 	msr	PSP, r0
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	4770      	bx	lr

080055f0 <pxCurrentTCBConst>:
 80055f0:	2000054c 	.word	0x2000054c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7ff fc09 	bl	8004e28 <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <xPortSysTickHandler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <vPortSetupTimerInterrupt+0x30>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <vPortSetupTimerInterrupt+0x38>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a09      	ldr	r2, [pc, #36]	; (8005678 <vPortSetupTimerInterrupt+0x3c>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <vPortSetupTimerInterrupt+0x40>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b03      	ldr	r3, [pc, #12]	; (800566c <vPortSetupTimerInterrupt+0x30>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	e000e010 	.word	0xe000e010
 8005670:	e000e018 	.word	0xe000e018
 8005674:	20000074 	.word	0x20000074
 8005678:	10624dd3 	.word	0x10624dd3
 800567c:	e000e014 	.word	0xe000e014

08005680 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800568c:	f7ff fb22 	bl	8004cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005690:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <pvPortMalloc+0x174>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005698:	f000 f910 	bl	80058bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800569c:	4b56      	ldr	r3, [pc, #344]	; (80057f8 <pvPortMalloc+0x178>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 808e 	bne.w	80057c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01d      	beq.n	80056ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056b0:	2208      	movs	r2, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d014      	beq.n	80056ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f023 0307 	bic.w	r3, r3, #7
 80056c8:	3308      	adds	r3, #8
 80056ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <pvPortMalloc+0x6c>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	617b      	str	r3, [r7, #20]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d069      	beq.n	80057c6 <pvPortMalloc+0x146>
 80056f2:	4b42      	ldr	r3, [pc, #264]	; (80057fc <pvPortMalloc+0x17c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d864      	bhi.n	80057c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056fc:	4b40      	ldr	r3, [pc, #256]	; (8005800 <pvPortMalloc+0x180>)
 80056fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005700:	4b3f      	ldr	r3, [pc, #252]	; (8005800 <pvPortMalloc+0x180>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005706:	e004      	b.n	8005712 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <pvPortMalloc+0xa4>
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f1      	bne.n	8005708 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005724:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <pvPortMalloc+0x174>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	429a      	cmp	r2, r3
 800572c:	d04b      	beq.n	80057c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2208      	movs	r2, #8
 8005734:	4413      	add	r3, r2
 8005736:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	2308      	movs	r3, #8
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	429a      	cmp	r2, r3
 800574e:	d91f      	bls.n	8005790 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <pvPortMalloc+0xf8>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	613b      	str	r3, [r7, #16]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800578a:	69b8      	ldr	r0, [r7, #24]
 800578c:	f000 f8f8 	bl	8005980 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <pvPortMalloc+0x17c>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <pvPortMalloc+0x17c>)
 800579c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <pvPortMalloc+0x17c>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b18      	ldr	r3, [pc, #96]	; (8005804 <pvPortMalloc+0x184>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d203      	bcs.n	80057b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <pvPortMalloc+0x17c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <pvPortMalloc+0x184>)
 80057b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <pvPortMalloc+0x178>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057c6:	f7ff fa93 	bl	8004cf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <pvPortMalloc+0x16a>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <pvPortMalloc+0x168>
	return pvReturn;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3728      	adds	r7, #40	; 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20001288 	.word	0x20001288
 80057f8:	20001294 	.word	0x20001294
 80057fc:	2000128c 	.word	0x2000128c
 8005800:	20001280 	.word	0x20001280
 8005804:	20001290 	.word	0x20001290

08005808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d048      	beq.n	80058ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800581a:	2308      	movs	r3, #8
 800581c:	425b      	negs	r3, r3
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <vPortFree+0xac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <vPortFree+0x44>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60fb      	str	r3, [r7, #12]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <vPortFree+0x62>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60bb      	str	r3, [r7, #8]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <vPortFree+0xac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d019      	beq.n	80058ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d115      	bne.n	80058ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <vPortFree+0xac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005890:	f7ff fa20 	bl	8004cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <vPortFree+0xb0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4413      	add	r3, r2
 800589e:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <vPortFree+0xb0>)
 80058a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058a2:	6938      	ldr	r0, [r7, #16]
 80058a4:	f000 f86c 	bl	8005980 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058a8:	f7ff fa22 	bl	8004cf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ac:	bf00      	nop
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20001294 	.word	0x20001294
 80058b8:	2000128c 	.word	0x2000128c

080058bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058c8:	4b27      	ldr	r3, [pc, #156]	; (8005968 <prvHeapInit+0xac>)
 80058ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3307      	adds	r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0307 	bic.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <prvHeapInit+0xac>)
 80058ec:	4413      	add	r3, r2
 80058ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058f4:	4a1d      	ldr	r2, [pc, #116]	; (800596c <prvHeapInit+0xb0>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <prvHeapInit+0xb0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4413      	add	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005908:	2208      	movs	r2, #8
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <prvHeapInit+0xb4>)
 800591c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <prvHeapInit+0xb4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <prvHeapInit+0xb4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <prvHeapInit+0xb4>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <prvHeapInit+0xb8>)
 800594a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a09      	ldr	r2, [pc, #36]	; (8005978 <prvHeapInit+0xbc>)
 8005952:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <prvHeapInit+0xc0>)
 8005956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000680 	.word	0x20000680
 800596c:	20001280 	.word	0x20001280
 8005970:	20001288 	.word	0x20001288
 8005974:	20001290 	.word	0x20001290
 8005978:	2000128c 	.word	0x2000128c
 800597c:	20001294 	.word	0x20001294

08005980 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005988:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <prvInsertBlockIntoFreeList+0xa8>)
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e002      	b.n	8005994 <prvInsertBlockIntoFreeList+0x14>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d8f7      	bhi.n	800598e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	4413      	add	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d108      	bne.n	80059c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	441a      	add	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	441a      	add	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d118      	bne.n	8005a08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <prvInsertBlockIntoFreeList+0xac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d00d      	beq.n	80059fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e008      	b.n	8005a10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <prvInsertBlockIntoFreeList+0xac>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e003      	b.n	8005a10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d002      	beq.n	8005a1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr
 8005a28:	20001280 	.word	0x20001280
 8005a2c:	20001288 	.word	0x20001288

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	; (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000084 	.word	0x20000084

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	; (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	; (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f000 fcba 	bl	80063c4 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	; (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	; (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	0800715c 	.word	0x0800715c
 8005a78:	0800715c 	.word	0x0800715c
 8005a7c:	0800715c 	.word	0x0800715c
 8005a80:	08007160 	.word	0x08007160

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memset>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <siprintf>:
 8005ab0:	b40e      	push	{r1, r2, r3}
 8005ab2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab6:	b500      	push	{lr}
 8005ab8:	b09c      	sub	sp, #112	; 0x70
 8005aba:	ab1d      	add	r3, sp, #116	; 0x74
 8005abc:	9002      	str	r0, [sp, #8]
 8005abe:	9006      	str	r0, [sp, #24]
 8005ac0:	9107      	str	r1, [sp, #28]
 8005ac2:	9104      	str	r1, [sp, #16]
 8005ac4:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <siprintf+0x38>)
 8005ac6:	4909      	ldr	r1, [pc, #36]	; (8005aec <siprintf+0x3c>)
 8005ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005acc:	9105      	str	r1, [sp, #20]
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	a902      	add	r1, sp, #8
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f000 f886 	bl	8005be4 <_svfiprintf_r>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	9b02      	ldr	r3, [sp, #8]
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	b01c      	add	sp, #112	; 0x70
 8005ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ae4:	b003      	add	sp, #12
 8005ae6:	4770      	bx	lr
 8005ae8:	20000084 	.word	0x20000084
 8005aec:	ffff0208 	.word	0xffff0208

08005af0 <strcpy>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af6:	f803 2b01 	strb.w	r2, [r3], #1
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d1f9      	bne.n	8005af2 <strcpy+0x2>
 8005afe:	4770      	bx	lr

08005b00 <strstr>:
 8005b00:	780a      	ldrb	r2, [r1, #0]
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	b96a      	cbnz	r2, 8005b22 <strstr+0x22>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d109      	bne.n	8005b20 <strstr+0x20>
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	4605      	mov	r5, r0
 8005b10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f6      	beq.n	8005b06 <strstr+0x6>
 8005b18:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b1c:	429e      	cmp	r6, r3
 8005b1e:	d0f7      	beq.n	8005b10 <strstr+0x10>
 8005b20:	3001      	adds	r0, #1
 8005b22:	7803      	ldrb	r3, [r0, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ef      	bne.n	8005b08 <strstr+0x8>
 8005b28:	4618      	mov	r0, r3
 8005b2a:	e7ec      	b.n	8005b06 <strstr+0x6>

08005b2c <__ssputs_r>:
 8005b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	688e      	ldr	r6, [r1, #8]
 8005b32:	4682      	mov	sl, r0
 8005b34:	429e      	cmp	r6, r3
 8005b36:	460c      	mov	r4, r1
 8005b38:	4690      	mov	r8, r2
 8005b3a:	461f      	mov	r7, r3
 8005b3c:	d838      	bhi.n	8005bb0 <__ssputs_r+0x84>
 8005b3e:	898a      	ldrh	r2, [r1, #12]
 8005b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b44:	d032      	beq.n	8005bac <__ssputs_r+0x80>
 8005b46:	6825      	ldr	r5, [r4, #0]
 8005b48:	6909      	ldr	r1, [r1, #16]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	eba5 0901 	sub.w	r9, r5, r1
 8005b50:	6965      	ldr	r5, [r4, #20]
 8005b52:	444b      	add	r3, r9
 8005b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b5c:	106d      	asrs	r5, r5, #1
 8005b5e:	429d      	cmp	r5, r3
 8005b60:	bf38      	it	cc
 8005b62:	461d      	movcc	r5, r3
 8005b64:	0553      	lsls	r3, r2, #21
 8005b66:	d531      	bpl.n	8005bcc <__ssputs_r+0xa0>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f000 fb61 	bl	8006230 <_malloc_r>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	b950      	cbnz	r0, 8005b88 <__ssputs_r+0x5c>
 8005b72:	230c      	movs	r3, #12
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	f8ca 3000 	str.w	r3, [sl]
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	464a      	mov	r2, r9
 8005b8a:	6921      	ldr	r1, [r4, #16]
 8005b8c:	f7ff ff7a 	bl	8005a84 <memcpy>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	6126      	str	r6, [r4, #16]
 8005b9e:	444e      	add	r6, r9
 8005ba0:	6026      	str	r6, [r4, #0]
 8005ba2:	463e      	mov	r6, r7
 8005ba4:	6165      	str	r5, [r4, #20]
 8005ba6:	eba5 0509 	sub.w	r5, r5, r9
 8005baa:	60a5      	str	r5, [r4, #8]
 8005bac:	42be      	cmp	r6, r7
 8005bae:	d900      	bls.n	8005bb2 <__ssputs_r+0x86>
 8005bb0:	463e      	mov	r6, r7
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	f000 fab8 	bl	800612c <memmove>
 8005bbc:	68a3      	ldr	r3, [r4, #8]
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	1b9b      	subs	r3, r3, r6
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	4433      	add	r3, r6
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e7db      	b.n	8005b84 <__ssputs_r+0x58>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	f000 fba3 	bl	8006318 <_realloc_r>
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1e1      	bne.n	8005b9c <__ssputs_r+0x70>
 8005bd8:	4650      	mov	r0, sl
 8005bda:	6921      	ldr	r1, [r4, #16]
 8005bdc:	f000 fac0 	bl	8006160 <_free_r>
 8005be0:	e7c7      	b.n	8005b72 <__ssputs_r+0x46>
	...

08005be4 <_svfiprintf_r>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	4698      	mov	r8, r3
 8005bea:	898b      	ldrh	r3, [r1, #12]
 8005bec:	4607      	mov	r7, r0
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	4614      	mov	r4, r2
 8005bf4:	b09d      	sub	sp, #116	; 0x74
 8005bf6:	d50e      	bpl.n	8005c16 <_svfiprintf_r+0x32>
 8005bf8:	690b      	ldr	r3, [r1, #16]
 8005bfa:	b963      	cbnz	r3, 8005c16 <_svfiprintf_r+0x32>
 8005bfc:	2140      	movs	r1, #64	; 0x40
 8005bfe:	f000 fb17 	bl	8006230 <_malloc_r>
 8005c02:	6028      	str	r0, [r5, #0]
 8005c04:	6128      	str	r0, [r5, #16]
 8005c06:	b920      	cbnz	r0, 8005c12 <_svfiprintf_r+0x2e>
 8005c08:	230c      	movs	r3, #12
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e0d1      	b.n	8005db6 <_svfiprintf_r+0x1d2>
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	616b      	str	r3, [r5, #20]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1a:	2320      	movs	r3, #32
 8005c1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	f04f 0901 	mov.w	r9, #1
 8005c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dd0 <_svfiprintf_r+0x1ec>
 8005c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c32:	4623      	mov	r3, r4
 8005c34:	469a      	mov	sl, r3
 8005c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3a:	b10a      	cbz	r2, 8005c40 <_svfiprintf_r+0x5c>
 8005c3c:	2a25      	cmp	r2, #37	; 0x25
 8005c3e:	d1f9      	bne.n	8005c34 <_svfiprintf_r+0x50>
 8005c40:	ebba 0b04 	subs.w	fp, sl, r4
 8005c44:	d00b      	beq.n	8005c5e <_svfiprintf_r+0x7a>
 8005c46:	465b      	mov	r3, fp
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7ff ff6d 	bl	8005b2c <__ssputs_r>
 8005c52:	3001      	adds	r0, #1
 8005c54:	f000 80aa 	beq.w	8005dac <_svfiprintf_r+0x1c8>
 8005c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c5a:	445a      	add	r2, fp
 8005c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80a2 	beq.w	8005dac <_svfiprintf_r+0x1c8>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c72:	f10a 0a01 	add.w	sl, sl, #1
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	9307      	str	r3, [sp, #28]
 8005c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c80:	4654      	mov	r4, sl
 8005c82:	2205      	movs	r2, #5
 8005c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c88:	4851      	ldr	r0, [pc, #324]	; (8005dd0 <_svfiprintf_r+0x1ec>)
 8005c8a:	f000 fa41 	bl	8006110 <memchr>
 8005c8e:	9a04      	ldr	r2, [sp, #16]
 8005c90:	b9d8      	cbnz	r0, 8005cca <_svfiprintf_r+0xe6>
 8005c92:	06d0      	lsls	r0, r2, #27
 8005c94:	bf44      	itt	mi
 8005c96:	2320      	movmi	r3, #32
 8005c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9c:	0711      	lsls	r1, r2, #28
 8005c9e:	bf44      	itt	mi
 8005ca0:	232b      	movmi	r3, #43	; 0x2b
 8005ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8005caa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cac:	d015      	beq.n	8005cda <_svfiprintf_r+0xf6>
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	9a07      	ldr	r2, [sp, #28]
 8005cb8:	4621      	mov	r1, r4
 8005cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cbe:	3b30      	subs	r3, #48	; 0x30
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d94e      	bls.n	8005d62 <_svfiprintf_r+0x17e>
 8005cc4:	b1b0      	cbz	r0, 8005cf4 <_svfiprintf_r+0x110>
 8005cc6:	9207      	str	r2, [sp, #28]
 8005cc8:	e014      	b.n	8005cf4 <_svfiprintf_r+0x110>
 8005cca:	eba0 0308 	sub.w	r3, r0, r8
 8005cce:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	46a2      	mov	sl, r4
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	e7d2      	b.n	8005c80 <_svfiprintf_r+0x9c>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	1d19      	adds	r1, r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	9103      	str	r1, [sp, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfbb      	ittet	lt
 8005ce6:	425b      	neglt	r3, r3
 8005ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8005cec:	9307      	strge	r3, [sp, #28]
 8005cee:	9307      	strlt	r3, [sp, #28]
 8005cf0:	bfb8      	it	lt
 8005cf2:	9204      	strlt	r2, [sp, #16]
 8005cf4:	7823      	ldrb	r3, [r4, #0]
 8005cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf8:	d10c      	bne.n	8005d14 <_svfiprintf_r+0x130>
 8005cfa:	7863      	ldrb	r3, [r4, #1]
 8005cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfe:	d135      	bne.n	8005d6c <_svfiprintf_r+0x188>
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	3402      	adds	r4, #2
 8005d04:	1d1a      	adds	r2, r3, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	9203      	str	r2, [sp, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfb8      	it	lt
 8005d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005dd4 <_svfiprintf_r+0x1f0>
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	7821      	ldrb	r1, [r4, #0]
 8005d1e:	f000 f9f7 	bl	8006110 <memchr>
 8005d22:	b140      	cbz	r0, 8005d36 <_svfiprintf_r+0x152>
 8005d24:	2340      	movs	r3, #64	; 0x40
 8005d26:	eba0 000a 	sub.w	r0, r0, sl
 8005d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	3401      	adds	r4, #1
 8005d32:	4303      	orrs	r3, r0
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3a:	2206      	movs	r2, #6
 8005d3c:	4826      	ldr	r0, [pc, #152]	; (8005dd8 <_svfiprintf_r+0x1f4>)
 8005d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d42:	f000 f9e5 	bl	8006110 <memchr>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d038      	beq.n	8005dbc <_svfiprintf_r+0x1d8>
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <_svfiprintf_r+0x1f8>)
 8005d4c:	bb1b      	cbnz	r3, 8005d96 <_svfiprintf_r+0x1b2>
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	3307      	adds	r3, #7
 8005d52:	f023 0307 	bic.w	r3, r3, #7
 8005d56:	3308      	adds	r3, #8
 8005d58:	9303      	str	r3, [sp, #12]
 8005d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5c:	4433      	add	r3, r6
 8005d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d60:	e767      	b.n	8005c32 <_svfiprintf_r+0x4e>
 8005d62:	460c      	mov	r4, r1
 8005d64:	2001      	movs	r0, #1
 8005d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d6a:	e7a5      	b.n	8005cb8 <_svfiprintf_r+0xd4>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	4619      	mov	r1, r3
 8005d74:	3401      	adds	r4, #1
 8005d76:	9305      	str	r3, [sp, #20]
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7e:	3a30      	subs	r2, #48	; 0x30
 8005d80:	2a09      	cmp	r2, #9
 8005d82:	d903      	bls.n	8005d8c <_svfiprintf_r+0x1a8>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0c5      	beq.n	8005d14 <_svfiprintf_r+0x130>
 8005d88:	9105      	str	r1, [sp, #20]
 8005d8a:	e7c3      	b.n	8005d14 <_svfiprintf_r+0x130>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2301      	movs	r3, #1
 8005d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d94:	e7f0      	b.n	8005d78 <_svfiprintf_r+0x194>
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <_svfiprintf_r+0x1fc>)
 8005da0:	a904      	add	r1, sp, #16
 8005da2:	f3af 8000 	nop.w
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	4606      	mov	r6, r0
 8005daa:	d1d6      	bne.n	8005d5a <_svfiprintf_r+0x176>
 8005dac:	89ab      	ldrh	r3, [r5, #12]
 8005dae:	065b      	lsls	r3, r3, #25
 8005db0:	f53f af2c 	bmi.w	8005c0c <_svfiprintf_r+0x28>
 8005db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db6:	b01d      	add	sp, #116	; 0x74
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	ab03      	add	r3, sp, #12
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <_svfiprintf_r+0x1fc>)
 8005dc6:	a904      	add	r1, sp, #16
 8005dc8:	f000 f87c 	bl	8005ec4 <_printf_i>
 8005dcc:	e7eb      	b.n	8005da6 <_svfiprintf_r+0x1c2>
 8005dce:	bf00      	nop
 8005dd0:	08007128 	.word	0x08007128
 8005dd4:	0800712e 	.word	0x0800712e
 8005dd8:	08007132 	.word	0x08007132
 8005ddc:	00000000 	.word	0x00000000
 8005de0:	08005b2d 	.word	0x08005b2d

08005de4 <_printf_common>:
 8005de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	4616      	mov	r6, r2
 8005dea:	4699      	mov	r9, r3
 8005dec:	688a      	ldr	r2, [r1, #8]
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	4607      	mov	r7, r0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfb8      	it	lt
 8005df6:	4613      	movlt	r3, r2
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfe:	460c      	mov	r4, r1
 8005e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e04:	b10a      	cbz	r2, 8005e0a <_printf_common+0x26>
 8005e06:	3301      	adds	r3, #1
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	0699      	lsls	r1, r3, #26
 8005e0e:	bf42      	ittt	mi
 8005e10:	6833      	ldrmi	r3, [r6, #0]
 8005e12:	3302      	addmi	r3, #2
 8005e14:	6033      	strmi	r3, [r6, #0]
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	f015 0506 	ands.w	r5, r5, #6
 8005e1c:	d106      	bne.n	8005e2c <_printf_common+0x48>
 8005e1e:	f104 0a19 	add.w	sl, r4, #25
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dc28      	bgt.n	8005e7e <_printf_common+0x9a>
 8005e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e30:	1e13      	subs	r3, r2, #0
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	bf18      	it	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	0692      	lsls	r2, r2, #26
 8005e3a:	d42d      	bmi.n	8005e98 <_printf_common+0xb4>
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d020      	beq.n	8005e8c <_printf_common+0xa8>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	68e5      	ldr	r5, [r4, #12]
 8005e4e:	f003 0306 	and.w	r3, r3, #6
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	bf18      	it	ne
 8005e56:	2500      	movne	r5, #0
 8005e58:	6832      	ldr	r2, [r6, #0]
 8005e5a:	f04f 0600 	mov.w	r6, #0
 8005e5e:	68a3      	ldr	r3, [r4, #8]
 8005e60:	bf08      	it	eq
 8005e62:	1aad      	subeq	r5, r5, r2
 8005e64:	6922      	ldr	r2, [r4, #16]
 8005e66:	bf08      	it	eq
 8005e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bfc4      	itt	gt
 8005e70:	1a9b      	subgt	r3, r3, r2
 8005e72:	18ed      	addgt	r5, r5, r3
 8005e74:	341a      	adds	r4, #26
 8005e76:	42b5      	cmp	r5, r6
 8005e78:	d11a      	bne.n	8005eb0 <_printf_common+0xcc>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e008      	b.n	8005e90 <_printf_common+0xac>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4652      	mov	r2, sl
 8005e82:	4649      	mov	r1, r9
 8005e84:	4638      	mov	r0, r7
 8005e86:	47c0      	blx	r8
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d103      	bne.n	8005e94 <_printf_common+0xb0>
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e94:	3501      	adds	r5, #1
 8005e96:	e7c4      	b.n	8005e22 <_printf_common+0x3e>
 8005e98:	2030      	movs	r0, #48	; 0x30
 8005e9a:	18e1      	adds	r1, r4, r3
 8005e9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea6:	4422      	add	r2, r4
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eae:	e7c5      	b.n	8005e3c <_printf_common+0x58>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c0      	blx	r8
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d0e6      	beq.n	8005e8c <_printf_common+0xa8>
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7d9      	b.n	8005e76 <_printf_common+0x92>
	...

08005ec4 <_printf_i>:
 8005ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	7e0f      	ldrb	r7, [r1, #24]
 8005eca:	4691      	mov	r9, r2
 8005ecc:	2f78      	cmp	r7, #120	; 0x78
 8005ece:	4680      	mov	r8, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	469a      	mov	sl, r3
 8005ed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eda:	d807      	bhi.n	8005eec <_printf_i+0x28>
 8005edc:	2f62      	cmp	r7, #98	; 0x62
 8005ede:	d80a      	bhi.n	8005ef6 <_printf_i+0x32>
 8005ee0:	2f00      	cmp	r7, #0
 8005ee2:	f000 80d9 	beq.w	8006098 <_printf_i+0x1d4>
 8005ee6:	2f58      	cmp	r7, #88	; 0x58
 8005ee8:	f000 80a4 	beq.w	8006034 <_printf_i+0x170>
 8005eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ef4:	e03a      	b.n	8005f6c <_printf_i+0xa8>
 8005ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005efa:	2b15      	cmp	r3, #21
 8005efc:	d8f6      	bhi.n	8005eec <_printf_i+0x28>
 8005efe:	a101      	add	r1, pc, #4	; (adr r1, 8005f04 <_printf_i+0x40>)
 8005f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f04:	08005f5d 	.word	0x08005f5d
 8005f08:	08005f71 	.word	0x08005f71
 8005f0c:	08005eed 	.word	0x08005eed
 8005f10:	08005eed 	.word	0x08005eed
 8005f14:	08005eed 	.word	0x08005eed
 8005f18:	08005eed 	.word	0x08005eed
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08005eed 	.word	0x08005eed
 8005f24:	08005eed 	.word	0x08005eed
 8005f28:	08005eed 	.word	0x08005eed
 8005f2c:	08005eed 	.word	0x08005eed
 8005f30:	0800607f 	.word	0x0800607f
 8005f34:	08005fa1 	.word	0x08005fa1
 8005f38:	08006061 	.word	0x08006061
 8005f3c:	08005eed 	.word	0x08005eed
 8005f40:	08005eed 	.word	0x08005eed
 8005f44:	080060a1 	.word	0x080060a1
 8005f48:	08005eed 	.word	0x08005eed
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005eed 	.word	0x08005eed
 8005f54:	08005eed 	.word	0x08005eed
 8005f58:	08006069 	.word	0x08006069
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	602a      	str	r2, [r5, #0]
 8005f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0a4      	b.n	80060ba <_printf_i+0x1f6>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	6829      	ldr	r1, [r5, #0]
 8005f74:	0606      	lsls	r6, r0, #24
 8005f76:	f101 0304 	add.w	r3, r1, #4
 8005f7a:	d50a      	bpl.n	8005f92 <_printf_i+0xce>
 8005f7c:	680e      	ldr	r6, [r1, #0]
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	da03      	bge.n	8005f8c <_printf_i+0xc8>
 8005f84:	232d      	movs	r3, #45	; 0x2d
 8005f86:	4276      	negs	r6, r6
 8005f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8c:	230a      	movs	r3, #10
 8005f8e:	485e      	ldr	r0, [pc, #376]	; (8006108 <_printf_i+0x244>)
 8005f90:	e019      	b.n	8005fc6 <_printf_i+0x102>
 8005f92:	680e      	ldr	r6, [r1, #0]
 8005f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	bf18      	it	ne
 8005f9c:	b236      	sxthne	r6, r6
 8005f9e:	e7ef      	b.n	8005f80 <_printf_i+0xbc>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	6820      	ldr	r0, [r4, #0]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	6029      	str	r1, [r5, #0]
 8005fa8:	0601      	lsls	r1, r0, #24
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0xec>
 8005fac:	681e      	ldr	r6, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <_printf_i+0xf2>
 8005fb0:	0646      	lsls	r6, r0, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0xe8>
 8005fb4:	881e      	ldrh	r6, [r3, #0]
 8005fb6:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb8:	bf0c      	ite	eq
 8005fba:	2308      	moveq	r3, #8
 8005fbc:	230a      	movne	r3, #10
 8005fbe:	4852      	ldr	r0, [pc, #328]	; (8006108 <_printf_i+0x244>)
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc6:	6865      	ldr	r5, [r4, #4]
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	bfa8      	it	ge
 8005fcc:	6821      	ldrge	r1, [r4, #0]
 8005fce:	60a5      	str	r5, [r4, #8]
 8005fd0:	bfa4      	itt	ge
 8005fd2:	f021 0104 	bicge.w	r1, r1, #4
 8005fd6:	6021      	strge	r1, [r4, #0]
 8005fd8:	b90e      	cbnz	r6, 8005fde <_printf_i+0x11a>
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	d04d      	beq.n	800607a <_printf_i+0x1b6>
 8005fde:	4615      	mov	r5, r2
 8005fe0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fe4:	fb03 6711 	mls	r7, r3, r1, r6
 8005fe8:	5dc7      	ldrb	r7, [r0, r7]
 8005fea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fee:	4637      	mov	r7, r6
 8005ff0:	42bb      	cmp	r3, r7
 8005ff2:	460e      	mov	r6, r1
 8005ff4:	d9f4      	bls.n	8005fe0 <_printf_i+0x11c>
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d10b      	bne.n	8006012 <_printf_i+0x14e>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	07de      	lsls	r6, r3, #31
 8005ffe:	d508      	bpl.n	8006012 <_printf_i+0x14e>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	6861      	ldr	r1, [r4, #4]
 8006004:	4299      	cmp	r1, r3
 8006006:	bfde      	ittt	le
 8006008:	2330      	movle	r3, #48	; 0x30
 800600a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800600e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006012:	1b52      	subs	r2, r2, r5
 8006014:	6122      	str	r2, [r4, #16]
 8006016:	464b      	mov	r3, r9
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f8cd a000 	str.w	sl, [sp]
 8006020:	aa03      	add	r2, sp, #12
 8006022:	f7ff fedf 	bl	8005de4 <_printf_common>
 8006026:	3001      	adds	r0, #1
 8006028:	d14c      	bne.n	80060c4 <_printf_i+0x200>
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	b004      	add	sp, #16
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006034:	4834      	ldr	r0, [pc, #208]	; (8006108 <_printf_i+0x244>)
 8006036:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800603a:	6829      	ldr	r1, [r5, #0]
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006042:	6029      	str	r1, [r5, #0]
 8006044:	061d      	lsls	r5, r3, #24
 8006046:	d514      	bpl.n	8006072 <_printf_i+0x1ae>
 8006048:	07df      	lsls	r7, r3, #31
 800604a:	bf44      	itt	mi
 800604c:	f043 0320 	orrmi.w	r3, r3, #32
 8006050:	6023      	strmi	r3, [r4, #0]
 8006052:	b91e      	cbnz	r6, 800605c <_printf_i+0x198>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	2310      	movs	r3, #16
 800605e:	e7af      	b.n	8005fc0 <_printf_i+0xfc>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	f043 0320 	orr.w	r3, r3, #32
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	2378      	movs	r3, #120	; 0x78
 800606a:	4828      	ldr	r0, [pc, #160]	; (800610c <_printf_i+0x248>)
 800606c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006070:	e7e3      	b.n	800603a <_printf_i+0x176>
 8006072:	0659      	lsls	r1, r3, #25
 8006074:	bf48      	it	mi
 8006076:	b2b6      	uxthmi	r6, r6
 8006078:	e7e6      	b.n	8006048 <_printf_i+0x184>
 800607a:	4615      	mov	r5, r2
 800607c:	e7bb      	b.n	8005ff6 <_printf_i+0x132>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	6826      	ldr	r6, [r4, #0]
 8006082:	1d18      	adds	r0, r3, #4
 8006084:	6961      	ldr	r1, [r4, #20]
 8006086:	6028      	str	r0, [r5, #0]
 8006088:	0635      	lsls	r5, r6, #24
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	d501      	bpl.n	8006092 <_printf_i+0x1ce>
 800608e:	6019      	str	r1, [r3, #0]
 8006090:	e002      	b.n	8006098 <_printf_i+0x1d4>
 8006092:	0670      	lsls	r0, r6, #25
 8006094:	d5fb      	bpl.n	800608e <_printf_i+0x1ca>
 8006096:	8019      	strh	r1, [r3, #0]
 8006098:	2300      	movs	r3, #0
 800609a:	4615      	mov	r5, r2
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	e7ba      	b.n	8006016 <_printf_i+0x152>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	602a      	str	r2, [r5, #0]
 80060a8:	681d      	ldr	r5, [r3, #0]
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f82f 	bl	8006110 <memchr>
 80060b2:	b108      	cbz	r0, 80060b8 <_printf_i+0x1f4>
 80060b4:	1b40      	subs	r0, r0, r5
 80060b6:	6060      	str	r0, [r4, #4]
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2300      	movs	r3, #0
 80060be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c2:	e7a8      	b.n	8006016 <_printf_i+0x152>
 80060c4:	462a      	mov	r2, r5
 80060c6:	4649      	mov	r1, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	47d0      	blx	sl
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0ab      	beq.n	800602a <_printf_i+0x166>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	079b      	lsls	r3, r3, #30
 80060d6:	d413      	bmi.n	8006100 <_printf_i+0x23c>
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	4298      	cmp	r0, r3
 80060de:	bfb8      	it	lt
 80060e0:	4618      	movlt	r0, r3
 80060e2:	e7a4      	b.n	800602e <_printf_i+0x16a>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4632      	mov	r2, r6
 80060e8:	4649      	mov	r1, r9
 80060ea:	4640      	mov	r0, r8
 80060ec:	47d0      	blx	sl
 80060ee:	3001      	adds	r0, #1
 80060f0:	d09b      	beq.n	800602a <_printf_i+0x166>
 80060f2:	3501      	adds	r5, #1
 80060f4:	68e3      	ldr	r3, [r4, #12]
 80060f6:	9903      	ldr	r1, [sp, #12]
 80060f8:	1a5b      	subs	r3, r3, r1
 80060fa:	42ab      	cmp	r3, r5
 80060fc:	dcf2      	bgt.n	80060e4 <_printf_i+0x220>
 80060fe:	e7eb      	b.n	80060d8 <_printf_i+0x214>
 8006100:	2500      	movs	r5, #0
 8006102:	f104 0619 	add.w	r6, r4, #25
 8006106:	e7f5      	b.n	80060f4 <_printf_i+0x230>
 8006108:	08007139 	.word	0x08007139
 800610c:	0800714a 	.word	0x0800714a

08006110 <memchr>:
 8006110:	4603      	mov	r3, r0
 8006112:	b510      	push	{r4, lr}
 8006114:	b2c9      	uxtb	r1, r1
 8006116:	4402      	add	r2, r0
 8006118:	4293      	cmp	r3, r2
 800611a:	4618      	mov	r0, r3
 800611c:	d101      	bne.n	8006122 <memchr+0x12>
 800611e:	2000      	movs	r0, #0
 8006120:	e003      	b.n	800612a <memchr+0x1a>
 8006122:	7804      	ldrb	r4, [r0, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	428c      	cmp	r4, r1
 8006128:	d1f6      	bne.n	8006118 <memchr+0x8>
 800612a:	bd10      	pop	{r4, pc}

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4601      	mov	r1, r0
 800614e:	4402      	add	r2, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <_free_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	2900      	cmp	r1, #0
 8006166:	d040      	beq.n	80061ea <_free_r+0x8a>
 8006168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616c:	1f0c      	subs	r4, r1, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfb8      	it	lt
 8006172:	18e4      	addlt	r4, r4, r3
 8006174:	f000 f910 	bl	8006398 <__malloc_lock>
 8006178:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <_free_r+0x8c>)
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	b933      	cbnz	r3, 800618c <_free_r+0x2c>
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	4628      	mov	r0, r5
 8006184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006188:	f000 b90c 	b.w	80063a4 <__malloc_unlock>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d908      	bls.n	80061a2 <_free_r+0x42>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	1821      	adds	r1, r4, r0
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	e7ed      	b.n	800617e <_free_r+0x1e>
 80061a2:	461a      	mov	r2, r3
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b10b      	cbz	r3, 80061ac <_free_r+0x4c>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d9fa      	bls.n	80061a2 <_free_r+0x42>
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	1850      	adds	r0, r2, r1
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d10b      	bne.n	80061cc <_free_r+0x6c>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	4401      	add	r1, r0
 80061b8:	1850      	adds	r0, r2, r1
 80061ba:	4283      	cmp	r3, r0
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	d1e0      	bne.n	8006182 <_free_r+0x22>
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4401      	add	r1, r0
 80061c6:	6011      	str	r1, [r2, #0]
 80061c8:	6053      	str	r3, [r2, #4]
 80061ca:	e7da      	b.n	8006182 <_free_r+0x22>
 80061cc:	d902      	bls.n	80061d4 <_free_r+0x74>
 80061ce:	230c      	movs	r3, #12
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	e7d6      	b.n	8006182 <_free_r+0x22>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	1821      	adds	r1, r4, r0
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf01      	itttt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	1809      	addeq	r1, r1, r0
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6054      	str	r4, [r2, #4]
 80061e8:	e7cb      	b.n	8006182 <_free_r+0x22>
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20001298 	.word	0x20001298

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 f8bc 	bl	8006378 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f8b7 	bl	8006378 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f8ac 	bl	8006378 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	2000129c 	.word	0x2000129c

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	2600      	movs	r6, #0
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 f89d 	bl	8006398 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 f878 	bl	8006378 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4638      	mov	r0, r7
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 f865 	bl	80063a4 <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	4638      	mov	r0, r7
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f000 f84c 	bl	80063a4 <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	20001298 	.word	0x20001298

08006318 <_realloc_r>:
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4680      	mov	r8, r0
 800631e:	4614      	mov	r4, r2
 8006320:	460e      	mov	r6, r1
 8006322:	b921      	cbnz	r1, 800632e <_realloc_r+0x16>
 8006324:	4611      	mov	r1, r2
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f7ff bf81 	b.w	8006230 <_malloc_r>
 800632e:	b92a      	cbnz	r2, 800633c <_realloc_r+0x24>
 8006330:	f7ff ff16 	bl	8006160 <_free_r>
 8006334:	4625      	mov	r5, r4
 8006336:	4628      	mov	r0, r5
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800633c:	f000 f838 	bl	80063b0 <_malloc_usable_size_r>
 8006340:	4284      	cmp	r4, r0
 8006342:	4607      	mov	r7, r0
 8006344:	d802      	bhi.n	800634c <_realloc_r+0x34>
 8006346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800634a:	d812      	bhi.n	8006372 <_realloc_r+0x5a>
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f7ff ff6e 	bl	8006230 <_malloc_r>
 8006354:	4605      	mov	r5, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d0ed      	beq.n	8006336 <_realloc_r+0x1e>
 800635a:	42bc      	cmp	r4, r7
 800635c:	4622      	mov	r2, r4
 800635e:	4631      	mov	r1, r6
 8006360:	bf28      	it	cs
 8006362:	463a      	movcs	r2, r7
 8006364:	f7ff fb8e 	bl	8005a84 <memcpy>
 8006368:	4631      	mov	r1, r6
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff fef8 	bl	8006160 <_free_r>
 8006370:	e7e1      	b.n	8006336 <_realloc_r+0x1e>
 8006372:	4635      	mov	r5, r6
 8006374:	e7df      	b.n	8006336 <_realloc_r+0x1e>
	...

08006378 <_sbrk_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	2300      	movs	r3, #0
 800637c:	4d05      	ldr	r5, [pc, #20]	; (8006394 <_sbrk_r+0x1c>)
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	f7fb f8fe 	bl	8001584 <_sbrk>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_sbrk_r+0x1a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_sbrk_r+0x1a>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	200012a0 	.word	0x200012a0

08006398 <__malloc_lock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_lock+0x8>)
 800639a:	f000 b811 	b.w	80063c0 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	200012a4 	.word	0x200012a4

080063a4 <__malloc_unlock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_unlock+0x8>)
 80063a6:	f000 b80c 	b.w	80063c2 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	200012a4 	.word	0x200012a4

080063b0 <_malloc_usable_size_r>:
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f18      	subs	r0, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbc      	itt	lt
 80063ba:	580b      	ldrlt	r3, [r1, r0]
 80063bc:	18c0      	addlt	r0, r0, r3
 80063be:	4770      	bx	lr

080063c0 <__retarget_lock_acquire_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <__retarget_lock_release_recursive>:
 80063c2:	4770      	bx	lr

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
