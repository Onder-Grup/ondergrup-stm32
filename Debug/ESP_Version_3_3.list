
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f70  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f58  08008f58  00020980  2**0
                  CONTENTS
  4 .ARM          00000000  08008f58  08008f58  00020980  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f58  08008f58  00020980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000980  20000000  08008f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  20000980  080098e0  00020980  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e48  080098e0  00021e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b5f  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d6  00000000  00000000  0003954b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d6  00000000  00000000  0003e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cdc7  00000000  00000000  0003f2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9a1  00000000  00000000  0005c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9a11  00000000  00000000  00077a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006928  00000000  00000000  00121438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00127d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000980 	.word	0x20000980
 800020c:	00000000 	.word	0x00000000
 8000210:	08008148 	.word	0x08008148

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000984 	.word	0x20000984
 800022c:	08008148 	.word	0x08008148

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000099c 	.word	0x2000099c
 800026c:	200009f0 	.word	0x200009f0

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <lcd_send_cmd+0x78>)
 80002b4:	f003 f91b 	bl	80034ee <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80002be:	bf00      	nop
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <lcd_send_cmd+0x78>)
 80002c2:	f003 f907 	bl	80034d4 <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2304      	movs	r3, #4
 80002d6:	214e      	movs	r1, #78	; 0x4e
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <lcd_send_cmd+0x78>)
 80002da:	f002 fd95 	bl	8002e08 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000ebc 	.word	0x20000ebc

080002ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f043 030d 	orr.w	r3, r3, #13
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f043 0309 	orr.w	r3, r3, #9
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800032c:	bf00      	nop
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <lcd_send_data+0x78>)
 8000330:	f003 f8dd 	bl	80034ee <HAL_I2C_GetError>
 8000334:	4603      	mov	r3, r0
 8000336:	2b04      	cmp	r3, #4
 8000338:	d0f9      	beq.n	800032e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800033a:	bf00      	nop
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <lcd_send_data+0x78>)
 800033e:	f003 f8c9 	bl	80034d4 <HAL_I2C_GetState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b20      	cmp	r3, #32
 8000346:	d1f9      	bne.n	800033c <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	214e      	movs	r1, #78	; 0x4e
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <lcd_send_data+0x78>)
 8000356:	f002 fd57 	bl	8002e08 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000ebc 	.word	0x20000ebc

08000368 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000370:	e006      	b.n	8000380 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb6 	bl	80002ec <lcd_send_data>
	while (*str)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <lcd_send_string+0xa>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcd_init>:

void lcd_init (void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff6a 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f7ff ff67 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ff64 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f7ff ff61 	bl	8000270 <lcd_send_cmd>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	337f      	adds	r3, #127	; 0x7f
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80003d4:	e008      	b.n	80003e8 <lcd_gotoxy+0x36>
 else if(row == 2)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d105      	bne.n	80003e8 <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	603a      	str	r2, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	460b      	mov	r3, r1
 80003fe:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffd3 	bl	80003b2 <lcd_gotoxy>
 lcd_send_string(str);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffab 	bl	8000368 <lcd_send_string>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_clear>:

void lcd_clear(void) {
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff26 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 8000424:	2002      	movs	r0, #2
 8000426:	f001 febd 	bl	80021a4 <HAL_Delay>

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}

0800042e <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800042e:	b580      	push	{r7, lr}
 8000430:	b084      	sub	sp, #16
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f7ff fefa 	bl	8000230 <strlen>
 800043c:	4603      	mov	r3, r0
 800043e:	3301      	adds	r3, #1
 8000440:	4618      	mov	r0, r3
 8000442:	f006 fe3d 	bl	80070c0 <malloc>
 8000446:	4603      	mov	r3, r0
 8000448:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d003      	beq.n	8000458 <copyText+0x2a>
        strcpy(result, text);
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	68f8      	ldr	r0, [r7, #12]
 8000454:	f007 f9a0 	bl	8007798 <strcpy>
    }
    return result;
 8000458:	68fb      	ldr	r3, [r7, #12]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <loadMenuTexts>:
			NVIC_SystemReset();
		}
	}
}

void loadMenuTexts(uint8_t dilSecim) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 800046e:	48a9      	ldr	r0, [pc, #676]	; (8000714 <loadMenuTexts+0x2b0>)
 8000470:	f7ff ffdd 	bl	800042e <copyText>
 8000474:	4603      	mov	r3, r0
 8000476:	4aa8      	ldr	r2, [pc, #672]	; (8000718 <loadMenuTexts+0x2b4>)
 8000478:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 800047a:	48a8      	ldr	r0, [pc, #672]	; (800071c <loadMenuTexts+0x2b8>)
 800047c:	f7ff ffd7 	bl	800042e <copyText>
 8000480:	4603      	mov	r3, r0
 8000482:	4aa7      	ldr	r2, [pc, #668]	; (8000720 <loadMenuTexts+0x2bc>)
 8000484:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8000486:	48a7      	ldr	r0, [pc, #668]	; (8000724 <loadMenuTexts+0x2c0>)
 8000488:	f7ff ffd1 	bl	800042e <copyText>
 800048c:	4603      	mov	r3, r0
 800048e:	4aa6      	ldr	r2, [pc, #664]	; (8000728 <loadMenuTexts+0x2c4>)
 8000490:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8000492:	48a6      	ldr	r0, [pc, #664]	; (800072c <loadMenuTexts+0x2c8>)
 8000494:	f7ff ffcb 	bl	800042e <copyText>
 8000498:	4603      	mov	r3, r0
 800049a:	4aa5      	ldr	r2, [pc, #660]	; (8000730 <loadMenuTexts+0x2cc>)
 800049c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800049e:	48a5      	ldr	r0, [pc, #660]	; (8000734 <loadMenuTexts+0x2d0>)
 80004a0:	f7ff ffc5 	bl	800042e <copyText>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4aa4      	ldr	r2, [pc, #656]	; (8000738 <loadMenuTexts+0x2d4>)
 80004a8:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 80004aa:	48a4      	ldr	r0, [pc, #656]	; (800073c <loadMenuTexts+0x2d8>)
 80004ac:	f7ff ffbf 	bl	800042e <copyText>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4aa3      	ldr	r2, [pc, #652]	; (8000740 <loadMenuTexts+0x2dc>)
 80004b4:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 80004b6:	48a3      	ldr	r0, [pc, #652]	; (8000744 <loadMenuTexts+0x2e0>)
 80004b8:	f7ff ffb9 	bl	800042e <copyText>
 80004bc:	4603      	mov	r3, r0
 80004be:	4aa2      	ldr	r2, [pc, #648]	; (8000748 <loadMenuTexts+0x2e4>)
 80004c0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	f040 82d1 	bne.w	8000a6c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 80004ca:	48a0      	ldr	r0, [pc, #640]	; (800074c <loadMenuTexts+0x2e8>)
 80004cc:	f7ff ffaf 	bl	800042e <copyText>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a9f      	ldr	r2, [pc, #636]	; (8000750 <loadMenuTexts+0x2ec>)
 80004d4:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 80004d6:	489f      	ldr	r0, [pc, #636]	; (8000754 <loadMenuTexts+0x2f0>)
 80004d8:	f7ff ffa9 	bl	800042e <copyText>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a9e      	ldr	r2, [pc, #632]	; (8000758 <loadMenuTexts+0x2f4>)
 80004e0:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 80004e2:	489e      	ldr	r0, [pc, #632]	; (800075c <loadMenuTexts+0x2f8>)
 80004e4:	f7ff ffa3 	bl	800042e <copyText>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a9d      	ldr	r2, [pc, #628]	; (8000760 <loadMenuTexts+0x2fc>)
 80004ec:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 80004ee:	489d      	ldr	r0, [pc, #628]	; (8000764 <loadMenuTexts+0x300>)
 80004f0:	f7ff ff9d 	bl	800042e <copyText>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a9c      	ldr	r2, [pc, #624]	; (8000768 <loadMenuTexts+0x304>)
 80004f8:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 80004fa:	489c      	ldr	r0, [pc, #624]	; (800076c <loadMenuTexts+0x308>)
 80004fc:	f7ff ff97 	bl	800042e <copyText>
 8000500:	4603      	mov	r3, r0
 8000502:	4a9b      	ldr	r2, [pc, #620]	; (8000770 <loadMenuTexts+0x30c>)
 8000504:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8000506:	489b      	ldr	r0, [pc, #620]	; (8000774 <loadMenuTexts+0x310>)
 8000508:	f7ff ff91 	bl	800042e <copyText>
 800050c:	4603      	mov	r3, r0
 800050e:	4a9a      	ldr	r2, [pc, #616]	; (8000778 <loadMenuTexts+0x314>)
 8000510:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8000512:	489a      	ldr	r0, [pc, #616]	; (800077c <loadMenuTexts+0x318>)
 8000514:	f7ff ff8b 	bl	800042e <copyText>
 8000518:	4603      	mov	r3, r0
 800051a:	4a99      	ldr	r2, [pc, #612]	; (8000780 <loadMenuTexts+0x31c>)
 800051c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800051e:	4899      	ldr	r0, [pc, #612]	; (8000784 <loadMenuTexts+0x320>)
 8000520:	f7ff ff85 	bl	800042e <copyText>
 8000524:	4603      	mov	r3, r0
 8000526:	4a98      	ldr	r2, [pc, #608]	; (8000788 <loadMenuTexts+0x324>)
 8000528:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 800052a:	4898      	ldr	r0, [pc, #608]	; (800078c <loadMenuTexts+0x328>)
 800052c:	f7ff ff7f 	bl	800042e <copyText>
 8000530:	4603      	mov	r3, r0
 8000532:	4a97      	ldr	r2, [pc, #604]	; (8000790 <loadMenuTexts+0x32c>)
 8000534:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8000536:	4897      	ldr	r0, [pc, #604]	; (8000794 <loadMenuTexts+0x330>)
 8000538:	f7ff ff79 	bl	800042e <copyText>
 800053c:	4603      	mov	r3, r0
 800053e:	4a96      	ldr	r2, [pc, #600]	; (8000798 <loadMenuTexts+0x334>)
 8000540:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8000542:	4896      	ldr	r0, [pc, #600]	; (800079c <loadMenuTexts+0x338>)
 8000544:	f7ff ff73 	bl	800042e <copyText>
 8000548:	4603      	mov	r3, r0
 800054a:	4a95      	ldr	r2, [pc, #596]	; (80007a0 <loadMenuTexts+0x33c>)
 800054c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 800054e:	4895      	ldr	r0, [pc, #596]	; (80007a4 <loadMenuTexts+0x340>)
 8000550:	f7ff ff6d 	bl	800042e <copyText>
 8000554:	4603      	mov	r3, r0
 8000556:	4a94      	ldr	r2, [pc, #592]	; (80007a8 <loadMenuTexts+0x344>)
 8000558:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800055a:	4894      	ldr	r0, [pc, #592]	; (80007ac <loadMenuTexts+0x348>)
 800055c:	f7ff ff67 	bl	800042e <copyText>
 8000560:	4603      	mov	r3, r0
 8000562:	4a93      	ldr	r2, [pc, #588]	; (80007b0 <loadMenuTexts+0x34c>)
 8000564:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8000566:	4893      	ldr	r0, [pc, #588]	; (80007b4 <loadMenuTexts+0x350>)
 8000568:	f7ff ff61 	bl	800042e <copyText>
 800056c:	4603      	mov	r3, r0
 800056e:	4a92      	ldr	r2, [pc, #584]	; (80007b8 <loadMenuTexts+0x354>)
 8000570:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8000572:	4892      	ldr	r0, [pc, #584]	; (80007bc <loadMenuTexts+0x358>)
 8000574:	f7ff ff5b 	bl	800042e <copyText>
 8000578:	4603      	mov	r3, r0
 800057a:	4a91      	ldr	r2, [pc, #580]	; (80007c0 <loadMenuTexts+0x35c>)
 800057c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 800057e:	4891      	ldr	r0, [pc, #580]	; (80007c4 <loadMenuTexts+0x360>)
 8000580:	f7ff ff55 	bl	800042e <copyText>
 8000584:	4603      	mov	r3, r0
 8000586:	4a90      	ldr	r2, [pc, #576]	; (80007c8 <loadMenuTexts+0x364>)
 8000588:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800058a:	4890      	ldr	r0, [pc, #576]	; (80007cc <loadMenuTexts+0x368>)
 800058c:	f7ff ff4f 	bl	800042e <copyText>
 8000590:	4603      	mov	r3, r0
 8000592:	4a8f      	ldr	r2, [pc, #572]	; (80007d0 <loadMenuTexts+0x36c>)
 8000594:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8000596:	488f      	ldr	r0, [pc, #572]	; (80007d4 <loadMenuTexts+0x370>)
 8000598:	f7ff ff49 	bl	800042e <copyText>
 800059c:	4603      	mov	r3, r0
 800059e:	4a8e      	ldr	r2, [pc, #568]	; (80007d8 <loadMenuTexts+0x374>)
 80005a0:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 80005a2:	488e      	ldr	r0, [pc, #568]	; (80007dc <loadMenuTexts+0x378>)
 80005a4:	f7ff ff43 	bl	800042e <copyText>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a8d      	ldr	r2, [pc, #564]	; (80007e0 <loadMenuTexts+0x37c>)
 80005ac:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 80005ae:	488d      	ldr	r0, [pc, #564]	; (80007e4 <loadMenuTexts+0x380>)
 80005b0:	f7ff ff3d 	bl	800042e <copyText>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a8c      	ldr	r2, [pc, #560]	; (80007e8 <loadMenuTexts+0x384>)
 80005b8:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 80005ba:	488c      	ldr	r0, [pc, #560]	; (80007ec <loadMenuTexts+0x388>)
 80005bc:	f7ff ff37 	bl	800042e <copyText>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a8b      	ldr	r2, [pc, #556]	; (80007f0 <loadMenuTexts+0x38c>)
 80005c4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 80005c6:	488b      	ldr	r0, [pc, #556]	; (80007f4 <loadMenuTexts+0x390>)
 80005c8:	f7ff ff31 	bl	800042e <copyText>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a8a      	ldr	r2, [pc, #552]	; (80007f8 <loadMenuTexts+0x394>)
 80005d0:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 80005d2:	488a      	ldr	r0, [pc, #552]	; (80007fc <loadMenuTexts+0x398>)
 80005d4:	f7ff ff2b 	bl	800042e <copyText>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a89      	ldr	r2, [pc, #548]	; (8000800 <loadMenuTexts+0x39c>)
 80005dc:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 80005de:	4889      	ldr	r0, [pc, #548]	; (8000804 <loadMenuTexts+0x3a0>)
 80005e0:	f7ff ff25 	bl	800042e <copyText>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a88      	ldr	r2, [pc, #544]	; (8000808 <loadMenuTexts+0x3a4>)
 80005e8:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 80005ea:	4888      	ldr	r0, [pc, #544]	; (800080c <loadMenuTexts+0x3a8>)
 80005ec:	f7ff ff1f 	bl	800042e <copyText>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a87      	ldr	r2, [pc, #540]	; (8000810 <loadMenuTexts+0x3ac>)
 80005f4:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 80005f6:	4887      	ldr	r0, [pc, #540]	; (8000814 <loadMenuTexts+0x3b0>)
 80005f8:	f7ff ff19 	bl	800042e <copyText>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a86      	ldr	r2, [pc, #536]	; (8000818 <loadMenuTexts+0x3b4>)
 8000600:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8000602:	4886      	ldr	r0, [pc, #536]	; (800081c <loadMenuTexts+0x3b8>)
 8000604:	f7ff ff13 	bl	800042e <copyText>
 8000608:	4603      	mov	r3, r0
 800060a:	4a85      	ldr	r2, [pc, #532]	; (8000820 <loadMenuTexts+0x3bc>)
 800060c:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 800060e:	4885      	ldr	r0, [pc, #532]	; (8000824 <loadMenuTexts+0x3c0>)
 8000610:	f7ff ff0d 	bl	800042e <copyText>
 8000614:	4603      	mov	r3, r0
 8000616:	4a84      	ldr	r2, [pc, #528]	; (8000828 <loadMenuTexts+0x3c4>)
 8000618:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 800061a:	4884      	ldr	r0, [pc, #528]	; (800082c <loadMenuTexts+0x3c8>)
 800061c:	f7ff ff07 	bl	800042e <copyText>
 8000620:	4603      	mov	r3, r0
 8000622:	4a83      	ldr	r2, [pc, #524]	; (8000830 <loadMenuTexts+0x3cc>)
 8000624:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8000626:	4883      	ldr	r0, [pc, #524]	; (8000834 <loadMenuTexts+0x3d0>)
 8000628:	f7ff ff01 	bl	800042e <copyText>
 800062c:	4603      	mov	r3, r0
 800062e:	4a82      	ldr	r2, [pc, #520]	; (8000838 <loadMenuTexts+0x3d4>)
 8000630:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8000632:	4882      	ldr	r0, [pc, #520]	; (800083c <loadMenuTexts+0x3d8>)
 8000634:	f7ff fefb 	bl	800042e <copyText>
 8000638:	4603      	mov	r3, r0
 800063a:	4a81      	ldr	r2, [pc, #516]	; (8000840 <loadMenuTexts+0x3dc>)
 800063c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 800063e:	4881      	ldr	r0, [pc, #516]	; (8000844 <loadMenuTexts+0x3e0>)
 8000640:	f7ff fef5 	bl	800042e <copyText>
 8000644:	4603      	mov	r3, r0
 8000646:	4a80      	ldr	r2, [pc, #512]	; (8000848 <loadMenuTexts+0x3e4>)
 8000648:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 800064a:	4880      	ldr	r0, [pc, #512]	; (800084c <loadMenuTexts+0x3e8>)
 800064c:	f7ff feef 	bl	800042e <copyText>
 8000650:	4603      	mov	r3, r0
 8000652:	4a7f      	ldr	r2, [pc, #508]	; (8000850 <loadMenuTexts+0x3ec>)
 8000654:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8000656:	487f      	ldr	r0, [pc, #508]	; (8000854 <loadMenuTexts+0x3f0>)
 8000658:	f7ff fee9 	bl	800042e <copyText>
 800065c:	4603      	mov	r3, r0
 800065e:	4a7e      	ldr	r2, [pc, #504]	; (8000858 <loadMenuTexts+0x3f4>)
 8000660:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8000662:	487e      	ldr	r0, [pc, #504]	; (800085c <loadMenuTexts+0x3f8>)
 8000664:	f7ff fee3 	bl	800042e <copyText>
 8000668:	4603      	mov	r3, r0
 800066a:	4a7d      	ldr	r2, [pc, #500]	; (8000860 <loadMenuTexts+0x3fc>)
 800066c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 800066e:	487d      	ldr	r0, [pc, #500]	; (8000864 <loadMenuTexts+0x400>)
 8000670:	f7ff fedd 	bl	800042e <copyText>
 8000674:	4603      	mov	r3, r0
 8000676:	4a7c      	ldr	r2, [pc, #496]	; (8000868 <loadMenuTexts+0x404>)
 8000678:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 800067a:	487c      	ldr	r0, [pc, #496]	; (800086c <loadMenuTexts+0x408>)
 800067c:	f7ff fed7 	bl	800042e <copyText>
 8000680:	4603      	mov	r3, r0
 8000682:	4a7b      	ldr	r2, [pc, #492]	; (8000870 <loadMenuTexts+0x40c>)
 8000684:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8000686:	487b      	ldr	r0, [pc, #492]	; (8000874 <loadMenuTexts+0x410>)
 8000688:	f7ff fed1 	bl	800042e <copyText>
 800068c:	4603      	mov	r3, r0
 800068e:	4a7a      	ldr	r2, [pc, #488]	; (8000878 <loadMenuTexts+0x414>)
 8000690:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8000692:	487a      	ldr	r0, [pc, #488]	; (800087c <loadMenuTexts+0x418>)
 8000694:	f7ff fecb 	bl	800042e <copyText>
 8000698:	4603      	mov	r3, r0
 800069a:	4a79      	ldr	r2, [pc, #484]	; (8000880 <loadMenuTexts+0x41c>)
 800069c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 800069e:	4879      	ldr	r0, [pc, #484]	; (8000884 <loadMenuTexts+0x420>)
 80006a0:	f7ff fec5 	bl	800042e <copyText>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a78      	ldr	r2, [pc, #480]	; (8000888 <loadMenuTexts+0x424>)
 80006a8:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 80006aa:	4878      	ldr	r0, [pc, #480]	; (800088c <loadMenuTexts+0x428>)
 80006ac:	f7ff febf 	bl	800042e <copyText>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a77      	ldr	r2, [pc, #476]	; (8000890 <loadMenuTexts+0x42c>)
 80006b4:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 80006b6:	4877      	ldr	r0, [pc, #476]	; (8000894 <loadMenuTexts+0x430>)
 80006b8:	f7ff feb9 	bl	800042e <copyText>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a76      	ldr	r2, [pc, #472]	; (8000898 <loadMenuTexts+0x434>)
 80006c0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 80006c2:	4876      	ldr	r0, [pc, #472]	; (800089c <loadMenuTexts+0x438>)
 80006c4:	f7ff feb3 	bl	800042e <copyText>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a75      	ldr	r2, [pc, #468]	; (80008a0 <loadMenuTexts+0x43c>)
 80006cc:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 80006ce:	4875      	ldr	r0, [pc, #468]	; (80008a4 <loadMenuTexts+0x440>)
 80006d0:	f7ff fead 	bl	800042e <copyText>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a74      	ldr	r2, [pc, #464]	; (80008a8 <loadMenuTexts+0x444>)
 80006d8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 80006da:	4874      	ldr	r0, [pc, #464]	; (80008ac <loadMenuTexts+0x448>)
 80006dc:	f7ff fea7 	bl	800042e <copyText>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a73      	ldr	r2, [pc, #460]	; (80008b0 <loadMenuTexts+0x44c>)
 80006e4:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 80006e6:	4873      	ldr	r0, [pc, #460]	; (80008b4 <loadMenuTexts+0x450>)
 80006e8:	f7ff fea1 	bl	800042e <copyText>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a72      	ldr	r2, [pc, #456]	; (80008b8 <loadMenuTexts+0x454>)
 80006f0:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 80006f2:	4872      	ldr	r0, [pc, #456]	; (80008bc <loadMenuTexts+0x458>)
 80006f4:	f7ff fe9b 	bl	800042e <copyText>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a71      	ldr	r2, [pc, #452]	; (80008c0 <loadMenuTexts+0x45c>)
 80006fc:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 80006fe:	4871      	ldr	r0, [pc, #452]	; (80008c4 <loadMenuTexts+0x460>)
 8000700:	f7ff fe95 	bl	800042e <copyText>
 8000704:	4603      	mov	r3, r0
 8000706:	4a70      	ldr	r2, [pc, #448]	; (80008c8 <loadMenuTexts+0x464>)
 8000708:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 800070a:	4870      	ldr	r0, [pc, #448]	; (80008cc <loadMenuTexts+0x468>)
 800070c:	f7ff fe8f 	bl	800042e <copyText>
 8000710:	4603      	mov	r3, r0
 8000712:	e0dd      	b.n	80008d0 <loadMenuTexts+0x46c>
 8000714:	20000000 	.word	0x20000000
 8000718:	20000c60 	.word	0x20000c60
 800071c:	20000010 	.word	0x20000010
 8000720:	20000c64 	.word	0x20000c64
 8000724:	20000020 	.word	0x20000020
 8000728:	20000cbc 	.word	0x20000cbc
 800072c:	20000030 	.word	0x20000030
 8000730:	20000cec 	.word	0x20000cec
 8000734:	20000040 	.word	0x20000040
 8000738:	20000cf4 	.word	0x20000cf4
 800073c:	20000050 	.word	0x20000050
 8000740:	20000d6c 	.word	0x20000d6c
 8000744:	20000060 	.word	0x20000060
 8000748:	20000d70 	.word	0x20000d70
 800074c:	20000070 	.word	0x20000070
 8000750:	20000c68 	.word	0x20000c68
 8000754:	20000080 	.word	0x20000080
 8000758:	20000c6c 	.word	0x20000c6c
 800075c:	20000090 	.word	0x20000090
 8000760:	20000c70 	.word	0x20000c70
 8000764:	200000a0 	.word	0x200000a0
 8000768:	20000c74 	.word	0x20000c74
 800076c:	200000b0 	.word	0x200000b0
 8000770:	20000c78 	.word	0x20000c78
 8000774:	200000c0 	.word	0x200000c0
 8000778:	20000c7c 	.word	0x20000c7c
 800077c:	200000d0 	.word	0x200000d0
 8000780:	20000c80 	.word	0x20000c80
 8000784:	200000e0 	.word	0x200000e0
 8000788:	20000c84 	.word	0x20000c84
 800078c:	200000f0 	.word	0x200000f0
 8000790:	20000c88 	.word	0x20000c88
 8000794:	20000100 	.word	0x20000100
 8000798:	20000c8c 	.word	0x20000c8c
 800079c:	20000110 	.word	0x20000110
 80007a0:	20000c90 	.word	0x20000c90
 80007a4:	20000120 	.word	0x20000120
 80007a8:	20000c94 	.word	0x20000c94
 80007ac:	20000130 	.word	0x20000130
 80007b0:	20000c98 	.word	0x20000c98
 80007b4:	20000140 	.word	0x20000140
 80007b8:	20000c9c 	.word	0x20000c9c
 80007bc:	20000150 	.word	0x20000150
 80007c0:	20000ca0 	.word	0x20000ca0
 80007c4:	20000160 	.word	0x20000160
 80007c8:	20000ca4 	.word	0x20000ca4
 80007cc:	20000170 	.word	0x20000170
 80007d0:	20000ca8 	.word	0x20000ca8
 80007d4:	20000180 	.word	0x20000180
 80007d8:	20000cac 	.word	0x20000cac
 80007dc:	20000190 	.word	0x20000190
 80007e0:	20000cb0 	.word	0x20000cb0
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	20000cb4 	.word	0x20000cb4
 80007ec:	200001b0 	.word	0x200001b0
 80007f0:	20000cb8 	.word	0x20000cb8
 80007f4:	200001c0 	.word	0x200001c0
 80007f8:	20000cc0 	.word	0x20000cc0
 80007fc:	200001d0 	.word	0x200001d0
 8000800:	20000cc4 	.word	0x20000cc4
 8000804:	200001e0 	.word	0x200001e0
 8000808:	20000cc8 	.word	0x20000cc8
 800080c:	200001f0 	.word	0x200001f0
 8000810:	20000ccc 	.word	0x20000ccc
 8000814:	20000200 	.word	0x20000200
 8000818:	20000cd0 	.word	0x20000cd0
 800081c:	20000210 	.word	0x20000210
 8000820:	20000cd4 	.word	0x20000cd4
 8000824:	20000220 	.word	0x20000220
 8000828:	20000cd8 	.word	0x20000cd8
 800082c:	20000230 	.word	0x20000230
 8000830:	20000cdc 	.word	0x20000cdc
 8000834:	20000240 	.word	0x20000240
 8000838:	20000ce0 	.word	0x20000ce0
 800083c:	20000250 	.word	0x20000250
 8000840:	20000ce4 	.word	0x20000ce4
 8000844:	20000260 	.word	0x20000260
 8000848:	20000ce8 	.word	0x20000ce8
 800084c:	20000270 	.word	0x20000270
 8000850:	20000cf0 	.word	0x20000cf0
 8000854:	20000280 	.word	0x20000280
 8000858:	20000cf8 	.word	0x20000cf8
 800085c:	20000290 	.word	0x20000290
 8000860:	20000cfc 	.word	0x20000cfc
 8000864:	200002a0 	.word	0x200002a0
 8000868:	20000d00 	.word	0x20000d00
 800086c:	200002b0 	.word	0x200002b0
 8000870:	20000d04 	.word	0x20000d04
 8000874:	200002c0 	.word	0x200002c0
 8000878:	20000d08 	.word	0x20000d08
 800087c:	200002d0 	.word	0x200002d0
 8000880:	20000d0c 	.word	0x20000d0c
 8000884:	200002e0 	.word	0x200002e0
 8000888:	20000d10 	.word	0x20000d10
 800088c:	200002f0 	.word	0x200002f0
 8000890:	20000d14 	.word	0x20000d14
 8000894:	20000300 	.word	0x20000300
 8000898:	20000d18 	.word	0x20000d18
 800089c:	20000310 	.word	0x20000310
 80008a0:	20000d1c 	.word	0x20000d1c
 80008a4:	20000320 	.word	0x20000320
 80008a8:	20000d20 	.word	0x20000d20
 80008ac:	20000330 	.word	0x20000330
 80008b0:	20000d24 	.word	0x20000d24
 80008b4:	20000340 	.word	0x20000340
 80008b8:	20000d28 	.word	0x20000d28
 80008bc:	20000350 	.word	0x20000350
 80008c0:	20000d2c 	.word	0x20000d2c
 80008c4:	20000360 	.word	0x20000360
 80008c8:	20000d30 	.word	0x20000d30
 80008cc:	20000370 	.word	0x20000370
 80008d0:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <loadMenuTexts+0x564>)
 80008d2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80008d4:	483d      	ldr	r0, [pc, #244]	; (80009cc <loadMenuTexts+0x568>)
 80008d6:	f7ff fdaa 	bl	800042e <copyText>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a3c      	ldr	r2, [pc, #240]	; (80009d0 <loadMenuTexts+0x56c>)
 80008de:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <loadMenuTexts+0x570>)
 80008e2:	f7ff fda4 	bl	800042e <copyText>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a3b      	ldr	r2, [pc, #236]	; (80009d8 <loadMenuTexts+0x574>)
 80008ea:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80008ec:	483b      	ldr	r0, [pc, #236]	; (80009dc <loadMenuTexts+0x578>)
 80008ee:	f7ff fd9e 	bl	800042e <copyText>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <loadMenuTexts+0x57c>)
 80008f6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80008f8:	483a      	ldr	r0, [pc, #232]	; (80009e4 <loadMenuTexts+0x580>)
 80008fa:	f7ff fd98 	bl	800042e <copyText>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <loadMenuTexts+0x584>)
 8000902:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8000904:	4839      	ldr	r0, [pc, #228]	; (80009ec <loadMenuTexts+0x588>)
 8000906:	f7ff fd92 	bl	800042e <copyText>
 800090a:	4603      	mov	r3, r0
 800090c:	4a38      	ldr	r2, [pc, #224]	; (80009f0 <loadMenuTexts+0x58c>)
 800090e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8000910:	4838      	ldr	r0, [pc, #224]	; (80009f4 <loadMenuTexts+0x590>)
 8000912:	f7ff fd8c 	bl	800042e <copyText>
 8000916:	4603      	mov	r3, r0
 8000918:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <loadMenuTexts+0x594>)
 800091a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 800091c:	4837      	ldr	r0, [pc, #220]	; (80009fc <loadMenuTexts+0x598>)
 800091e:	f7ff fd86 	bl	800042e <copyText>
 8000922:	4603      	mov	r3, r0
 8000924:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <loadMenuTexts+0x59c>)
 8000926:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8000928:	4836      	ldr	r0, [pc, #216]	; (8000a04 <loadMenuTexts+0x5a0>)
 800092a:	f7ff fd80 	bl	800042e <copyText>
 800092e:	4603      	mov	r3, r0
 8000930:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <loadMenuTexts+0x5a4>)
 8000932:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <loadMenuTexts+0x5a8>)
 8000936:	f7ff fd7a 	bl	800042e <copyText>
 800093a:	4603      	mov	r3, r0
 800093c:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <loadMenuTexts+0x5ac>)
 800093e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8000940:	4834      	ldr	r0, [pc, #208]	; (8000a14 <loadMenuTexts+0x5b0>)
 8000942:	f7ff fd74 	bl	800042e <copyText>
 8000946:	4603      	mov	r3, r0
 8000948:	4a33      	ldr	r2, [pc, #204]	; (8000a18 <loadMenuTexts+0x5b4>)
 800094a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800094c:	4833      	ldr	r0, [pc, #204]	; (8000a1c <loadMenuTexts+0x5b8>)
 800094e:	f7ff fd6e 	bl	800042e <copyText>
 8000952:	4603      	mov	r3, r0
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <loadMenuTexts+0x5bc>)
 8000956:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <loadMenuTexts+0x5c0>)
 800095a:	f7ff fd68 	bl	800042e <copyText>
 800095e:	4603      	mov	r3, r0
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <loadMenuTexts+0x5c4>)
 8000962:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8000964:	4831      	ldr	r0, [pc, #196]	; (8000a2c <loadMenuTexts+0x5c8>)
 8000966:	f7ff fd62 	bl	800042e <copyText>
 800096a:	4603      	mov	r3, r0
 800096c:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <loadMenuTexts+0x5cc>)
 800096e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8000970:	4830      	ldr	r0, [pc, #192]	; (8000a34 <loadMenuTexts+0x5d0>)
 8000972:	f7ff fd5c 	bl	800042e <copyText>
 8000976:	4603      	mov	r3, r0
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <loadMenuTexts+0x5d4>)
 800097a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800097c:	482f      	ldr	r0, [pc, #188]	; (8000a3c <loadMenuTexts+0x5d8>)
 800097e:	f7ff fd56 	bl	800042e <copyText>
 8000982:	4603      	mov	r3, r0
 8000984:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <loadMenuTexts+0x5dc>)
 8000986:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <loadMenuTexts+0x5e0>)
 800098a:	f7ff fd50 	bl	800042e <copyText>
 800098e:	4603      	mov	r3, r0
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <loadMenuTexts+0x5e4>)
 8000992:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8000994:	482d      	ldr	r0, [pc, #180]	; (8000a4c <loadMenuTexts+0x5e8>)
 8000996:	f7ff fd4a 	bl	800042e <copyText>
 800099a:	4603      	mov	r3, r0
 800099c:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <loadMenuTexts+0x5ec>)
 800099e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80009a0:	482c      	ldr	r0, [pc, #176]	; (8000a54 <loadMenuTexts+0x5f0>)
 80009a2:	f7ff fd44 	bl	800042e <copyText>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <loadMenuTexts+0x5f4>)
 80009aa:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80009ac:	482b      	ldr	r0, [pc, #172]	; (8000a5c <loadMenuTexts+0x5f8>)
 80009ae:	f7ff fd3e 	bl	800042e <copyText>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <loadMenuTexts+0x5fc>)
 80009b6:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80009b8:	482a      	ldr	r0, [pc, #168]	; (8000a64 <loadMenuTexts+0x600>)
 80009ba:	f7ff fd38 	bl	800042e <copyText>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <loadMenuTexts+0x604>)
 80009c2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80009c4:	e2d3      	b.n	8000f6e <loadMenuTexts+0xb0a>
 80009c6:	bf00      	nop
 80009c8:	20000d34 	.word	0x20000d34
 80009cc:	20000380 	.word	0x20000380
 80009d0:	20000d38 	.word	0x20000d38
 80009d4:	20000390 	.word	0x20000390
 80009d8:	20000d3c 	.word	0x20000d3c
 80009dc:	200003a0 	.word	0x200003a0
 80009e0:	20000d40 	.word	0x20000d40
 80009e4:	200003b0 	.word	0x200003b0
 80009e8:	20000d44 	.word	0x20000d44
 80009ec:	200003c0 	.word	0x200003c0
 80009f0:	20000d48 	.word	0x20000d48
 80009f4:	200003d0 	.word	0x200003d0
 80009f8:	20000d4c 	.word	0x20000d4c
 80009fc:	200003e0 	.word	0x200003e0
 8000a00:	20000d50 	.word	0x20000d50
 8000a04:	200003f0 	.word	0x200003f0
 8000a08:	20000d54 	.word	0x20000d54
 8000a0c:	20000400 	.word	0x20000400
 8000a10:	20000d58 	.word	0x20000d58
 8000a14:	20000410 	.word	0x20000410
 8000a18:	20000d5c 	.word	0x20000d5c
 8000a1c:	20000420 	.word	0x20000420
 8000a20:	20000d60 	.word	0x20000d60
 8000a24:	20000430 	.word	0x20000430
 8000a28:	20000d64 	.word	0x20000d64
 8000a2c:	20000440 	.word	0x20000440
 8000a30:	20000d68 	.word	0x20000d68
 8000a34:	20000450 	.word	0x20000450
 8000a38:	20000d74 	.word	0x20000d74
 8000a3c:	20000460 	.word	0x20000460
 8000a40:	20000d78 	.word	0x20000d78
 8000a44:	20000470 	.word	0x20000470
 8000a48:	20000d7c 	.word	0x20000d7c
 8000a4c:	20000480 	.word	0x20000480
 8000a50:	20000d80 	.word	0x20000d80
 8000a54:	20000490 	.word	0x20000490
 8000a58:	20000d84 	.word	0x20000d84
 8000a5c:	200004a0 	.word	0x200004a0
 8000a60:	20000d88 	.word	0x20000d88
 8000a64:	200004b0 	.word	0x200004b0
 8000a68:	20000d8c 	.word	0x20000d8c
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8000a6c:	48a9      	ldr	r0, [pc, #676]	; (8000d14 <loadMenuTexts+0x8b0>)
 8000a6e:	f7ff fcde 	bl	800042e <copyText>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4aa8      	ldr	r2, [pc, #672]	; (8000d18 <loadMenuTexts+0x8b4>)
 8000a76:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8000a78:	48a8      	ldr	r0, [pc, #672]	; (8000d1c <loadMenuTexts+0x8b8>)
 8000a7a:	f7ff fcd8 	bl	800042e <copyText>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4aa7      	ldr	r2, [pc, #668]	; (8000d20 <loadMenuTexts+0x8bc>)
 8000a82:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8000a84:	48a7      	ldr	r0, [pc, #668]	; (8000d24 <loadMenuTexts+0x8c0>)
 8000a86:	f7ff fcd2 	bl	800042e <copyText>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4aa6      	ldr	r2, [pc, #664]	; (8000d28 <loadMenuTexts+0x8c4>)
 8000a8e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8000a90:	48a6      	ldr	r0, [pc, #664]	; (8000d2c <loadMenuTexts+0x8c8>)
 8000a92:	f7ff fccc 	bl	800042e <copyText>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4aa5      	ldr	r2, [pc, #660]	; (8000d30 <loadMenuTexts+0x8cc>)
 8000a9a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8000a9c:	48a5      	ldr	r0, [pc, #660]	; (8000d34 <loadMenuTexts+0x8d0>)
 8000a9e:	f7ff fcc6 	bl	800042e <copyText>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4aa4      	ldr	r2, [pc, #656]	; (8000d38 <loadMenuTexts+0x8d4>)
 8000aa6:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8000aa8:	48a4      	ldr	r0, [pc, #656]	; (8000d3c <loadMenuTexts+0x8d8>)
 8000aaa:	f7ff fcc0 	bl	800042e <copyText>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4aa3      	ldr	r2, [pc, #652]	; (8000d40 <loadMenuTexts+0x8dc>)
 8000ab2:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8000ab4:	48a3      	ldr	r0, [pc, #652]	; (8000d44 <loadMenuTexts+0x8e0>)
 8000ab6:	f7ff fcba 	bl	800042e <copyText>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4aa2      	ldr	r2, [pc, #648]	; (8000d48 <loadMenuTexts+0x8e4>)
 8000abe:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8000ac0:	48a2      	ldr	r0, [pc, #648]	; (8000d4c <loadMenuTexts+0x8e8>)
 8000ac2:	f7ff fcb4 	bl	800042e <copyText>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4aa1      	ldr	r2, [pc, #644]	; (8000d50 <loadMenuTexts+0x8ec>)
 8000aca:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8000acc:	48a1      	ldr	r0, [pc, #644]	; (8000d54 <loadMenuTexts+0x8f0>)
 8000ace:	f7ff fcae 	bl	800042e <copyText>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4aa0      	ldr	r2, [pc, #640]	; (8000d58 <loadMenuTexts+0x8f4>)
 8000ad6:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8000ad8:	48a0      	ldr	r0, [pc, #640]	; (8000d5c <loadMenuTexts+0x8f8>)
 8000ada:	f7ff fca8 	bl	800042e <copyText>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a9f      	ldr	r2, [pc, #636]	; (8000d60 <loadMenuTexts+0x8fc>)
 8000ae2:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8000ae4:	489f      	ldr	r0, [pc, #636]	; (8000d64 <loadMenuTexts+0x900>)
 8000ae6:	f7ff fca2 	bl	800042e <copyText>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a9e      	ldr	r2, [pc, #632]	; (8000d68 <loadMenuTexts+0x904>)
 8000aee:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8000af0:	489e      	ldr	r0, [pc, #632]	; (8000d6c <loadMenuTexts+0x908>)
 8000af2:	f7ff fc9c 	bl	800042e <copyText>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a9d      	ldr	r2, [pc, #628]	; (8000d70 <loadMenuTexts+0x90c>)
 8000afa:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8000afc:	489d      	ldr	r0, [pc, #628]	; (8000d74 <loadMenuTexts+0x910>)
 8000afe:	f7ff fc96 	bl	800042e <copyText>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a9c      	ldr	r2, [pc, #624]	; (8000d78 <loadMenuTexts+0x914>)
 8000b06:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8000b08:	489c      	ldr	r0, [pc, #624]	; (8000d7c <loadMenuTexts+0x918>)
 8000b0a:	f7ff fc90 	bl	800042e <copyText>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a9b      	ldr	r2, [pc, #620]	; (8000d80 <loadMenuTexts+0x91c>)
 8000b12:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8000b14:	489b      	ldr	r0, [pc, #620]	; (8000d84 <loadMenuTexts+0x920>)
 8000b16:	f7ff fc8a 	bl	800042e <copyText>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a9a      	ldr	r2, [pc, #616]	; (8000d88 <loadMenuTexts+0x924>)
 8000b1e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8000b20:	489a      	ldr	r0, [pc, #616]	; (8000d8c <loadMenuTexts+0x928>)
 8000b22:	f7ff fc84 	bl	800042e <copyText>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a99      	ldr	r2, [pc, #612]	; (8000d90 <loadMenuTexts+0x92c>)
 8000b2a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8000b2c:	4899      	ldr	r0, [pc, #612]	; (8000d94 <loadMenuTexts+0x930>)
 8000b2e:	f7ff fc7e 	bl	800042e <copyText>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a98      	ldr	r2, [pc, #608]	; (8000d98 <loadMenuTexts+0x934>)
 8000b36:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8000b38:	4898      	ldr	r0, [pc, #608]	; (8000d9c <loadMenuTexts+0x938>)
 8000b3a:	f7ff fc78 	bl	800042e <copyText>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a97      	ldr	r2, [pc, #604]	; (8000da0 <loadMenuTexts+0x93c>)
 8000b42:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8000b44:	4897      	ldr	r0, [pc, #604]	; (8000da4 <loadMenuTexts+0x940>)
 8000b46:	f7ff fc72 	bl	800042e <copyText>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <loadMenuTexts+0x944>)
 8000b4e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8000b50:	4896      	ldr	r0, [pc, #600]	; (8000dac <loadMenuTexts+0x948>)
 8000b52:	f7ff fc6c 	bl	800042e <copyText>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a95      	ldr	r2, [pc, #596]	; (8000db0 <loadMenuTexts+0x94c>)
 8000b5a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8000b5c:	4895      	ldr	r0, [pc, #596]	; (8000db4 <loadMenuTexts+0x950>)
 8000b5e:	f7ff fc66 	bl	800042e <copyText>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <loadMenuTexts+0x954>)
 8000b66:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8000b68:	4894      	ldr	r0, [pc, #592]	; (8000dbc <loadMenuTexts+0x958>)
 8000b6a:	f7ff fc60 	bl	800042e <copyText>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a93      	ldr	r2, [pc, #588]	; (8000dc0 <loadMenuTexts+0x95c>)
 8000b72:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8000b74:	4893      	ldr	r0, [pc, #588]	; (8000dc4 <loadMenuTexts+0x960>)
 8000b76:	f7ff fc5a 	bl	800042e <copyText>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a92      	ldr	r2, [pc, #584]	; (8000dc8 <loadMenuTexts+0x964>)
 8000b7e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8000b80:	4892      	ldr	r0, [pc, #584]	; (8000dcc <loadMenuTexts+0x968>)
 8000b82:	f7ff fc54 	bl	800042e <copyText>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a91      	ldr	r2, [pc, #580]	; (8000dd0 <loadMenuTexts+0x96c>)
 8000b8a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8000b8c:	4891      	ldr	r0, [pc, #580]	; (8000dd4 <loadMenuTexts+0x970>)
 8000b8e:	f7ff fc4e 	bl	800042e <copyText>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a90      	ldr	r2, [pc, #576]	; (8000dd8 <loadMenuTexts+0x974>)
 8000b96:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8000b98:	4890      	ldr	r0, [pc, #576]	; (8000ddc <loadMenuTexts+0x978>)
 8000b9a:	f7ff fc48 	bl	800042e <copyText>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a8f      	ldr	r2, [pc, #572]	; (8000de0 <loadMenuTexts+0x97c>)
 8000ba2:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8000ba4:	488f      	ldr	r0, [pc, #572]	; (8000de4 <loadMenuTexts+0x980>)
 8000ba6:	f7ff fc42 	bl	800042e <copyText>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a8e      	ldr	r2, [pc, #568]	; (8000de8 <loadMenuTexts+0x984>)
 8000bae:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8000bb0:	488e      	ldr	r0, [pc, #568]	; (8000dec <loadMenuTexts+0x988>)
 8000bb2:	f7ff fc3c 	bl	800042e <copyText>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a8d      	ldr	r2, [pc, #564]	; (8000df0 <loadMenuTexts+0x98c>)
 8000bba:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8000bbc:	488d      	ldr	r0, [pc, #564]	; (8000df4 <loadMenuTexts+0x990>)
 8000bbe:	f7ff fc36 	bl	800042e <copyText>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a8c      	ldr	r2, [pc, #560]	; (8000df8 <loadMenuTexts+0x994>)
 8000bc6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8000bc8:	488c      	ldr	r0, [pc, #560]	; (8000dfc <loadMenuTexts+0x998>)
 8000bca:	f7ff fc30 	bl	800042e <copyText>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a8b      	ldr	r2, [pc, #556]	; (8000e00 <loadMenuTexts+0x99c>)
 8000bd2:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8000bd4:	488b      	ldr	r0, [pc, #556]	; (8000e04 <loadMenuTexts+0x9a0>)
 8000bd6:	f7ff fc2a 	bl	800042e <copyText>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a8a      	ldr	r2, [pc, #552]	; (8000e08 <loadMenuTexts+0x9a4>)
 8000bde:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8000be0:	488a      	ldr	r0, [pc, #552]	; (8000e0c <loadMenuTexts+0x9a8>)
 8000be2:	f7ff fc24 	bl	800042e <copyText>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a89      	ldr	r2, [pc, #548]	; (8000e10 <loadMenuTexts+0x9ac>)
 8000bea:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8000bec:	4889      	ldr	r0, [pc, #548]	; (8000e14 <loadMenuTexts+0x9b0>)
 8000bee:	f7ff fc1e 	bl	800042e <copyText>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a88      	ldr	r2, [pc, #544]	; (8000e18 <loadMenuTexts+0x9b4>)
 8000bf6:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8000bf8:	4888      	ldr	r0, [pc, #544]	; (8000e1c <loadMenuTexts+0x9b8>)
 8000bfa:	f7ff fc18 	bl	800042e <copyText>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a87      	ldr	r2, [pc, #540]	; (8000e20 <loadMenuTexts+0x9bc>)
 8000c02:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8000c04:	4887      	ldr	r0, [pc, #540]	; (8000e24 <loadMenuTexts+0x9c0>)
 8000c06:	f7ff fc12 	bl	800042e <copyText>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a86      	ldr	r2, [pc, #536]	; (8000e28 <loadMenuTexts+0x9c4>)
 8000c0e:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8000c10:	4886      	ldr	r0, [pc, #536]	; (8000e2c <loadMenuTexts+0x9c8>)
 8000c12:	f7ff fc0c 	bl	800042e <copyText>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <loadMenuTexts+0x9cc>)
 8000c1a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8000c1c:	4885      	ldr	r0, [pc, #532]	; (8000e34 <loadMenuTexts+0x9d0>)
 8000c1e:	f7ff fc06 	bl	800042e <copyText>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a84      	ldr	r2, [pc, #528]	; (8000e38 <loadMenuTexts+0x9d4>)
 8000c26:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8000c28:	4884      	ldr	r0, [pc, #528]	; (8000e3c <loadMenuTexts+0x9d8>)
 8000c2a:	f7ff fc00 	bl	800042e <copyText>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a83      	ldr	r2, [pc, #524]	; (8000e40 <loadMenuTexts+0x9dc>)
 8000c32:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8000c34:	4883      	ldr	r0, [pc, #524]	; (8000e44 <loadMenuTexts+0x9e0>)
 8000c36:	f7ff fbfa 	bl	800042e <copyText>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <loadMenuTexts+0x9e4>)
 8000c3e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8000c40:	4882      	ldr	r0, [pc, #520]	; (8000e4c <loadMenuTexts+0x9e8>)
 8000c42:	f7ff fbf4 	bl	800042e <copyText>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a81      	ldr	r2, [pc, #516]	; (8000e50 <loadMenuTexts+0x9ec>)
 8000c4a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8000c4c:	4881      	ldr	r0, [pc, #516]	; (8000e54 <loadMenuTexts+0x9f0>)
 8000c4e:	f7ff fbee 	bl	800042e <copyText>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a80      	ldr	r2, [pc, #512]	; (8000e58 <loadMenuTexts+0x9f4>)
 8000c56:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8000c58:	4880      	ldr	r0, [pc, #512]	; (8000e5c <loadMenuTexts+0x9f8>)
 8000c5a:	f7ff fbe8 	bl	800042e <copyText>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a7f      	ldr	r2, [pc, #508]	; (8000e60 <loadMenuTexts+0x9fc>)
 8000c62:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8000c64:	487f      	ldr	r0, [pc, #508]	; (8000e64 <loadMenuTexts+0xa00>)
 8000c66:	f7ff fbe2 	bl	800042e <copyText>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a7e      	ldr	r2, [pc, #504]	; (8000e68 <loadMenuTexts+0xa04>)
 8000c6e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8000c70:	487e      	ldr	r0, [pc, #504]	; (8000e6c <loadMenuTexts+0xa08>)
 8000c72:	f7ff fbdc 	bl	800042e <copyText>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a7d      	ldr	r2, [pc, #500]	; (8000e70 <loadMenuTexts+0xa0c>)
 8000c7a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8000c7c:	487d      	ldr	r0, [pc, #500]	; (8000e74 <loadMenuTexts+0xa10>)
 8000c7e:	f7ff fbd6 	bl	800042e <copyText>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a7c      	ldr	r2, [pc, #496]	; (8000e78 <loadMenuTexts+0xa14>)
 8000c86:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8000c88:	487c      	ldr	r0, [pc, #496]	; (8000e7c <loadMenuTexts+0xa18>)
 8000c8a:	f7ff fbd0 	bl	800042e <copyText>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a7b      	ldr	r2, [pc, #492]	; (8000e80 <loadMenuTexts+0xa1c>)
 8000c92:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8000c94:	487b      	ldr	r0, [pc, #492]	; (8000e84 <loadMenuTexts+0xa20>)
 8000c96:	f7ff fbca 	bl	800042e <copyText>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a7a      	ldr	r2, [pc, #488]	; (8000e88 <loadMenuTexts+0xa24>)
 8000c9e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8000ca0:	487a      	ldr	r0, [pc, #488]	; (8000e8c <loadMenuTexts+0xa28>)
 8000ca2:	f7ff fbc4 	bl	800042e <copyText>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a79      	ldr	r2, [pc, #484]	; (8000e90 <loadMenuTexts+0xa2c>)
 8000caa:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8000cac:	4879      	ldr	r0, [pc, #484]	; (8000e94 <loadMenuTexts+0xa30>)
 8000cae:	f7ff fbbe 	bl	800042e <copyText>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <loadMenuTexts+0xa34>)
 8000cb6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8000cb8:	4878      	ldr	r0, [pc, #480]	; (8000e9c <loadMenuTexts+0xa38>)
 8000cba:	f7ff fbb8 	bl	800042e <copyText>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a77      	ldr	r2, [pc, #476]	; (8000ea0 <loadMenuTexts+0xa3c>)
 8000cc2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8000cc4:	4877      	ldr	r0, [pc, #476]	; (8000ea4 <loadMenuTexts+0xa40>)
 8000cc6:	f7ff fbb2 	bl	800042e <copyText>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a76      	ldr	r2, [pc, #472]	; (8000ea8 <loadMenuTexts+0xa44>)
 8000cce:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8000cd0:	4876      	ldr	r0, [pc, #472]	; (8000eac <loadMenuTexts+0xa48>)
 8000cd2:	f7ff fbac 	bl	800042e <copyText>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a75      	ldr	r2, [pc, #468]	; (8000eb0 <loadMenuTexts+0xa4c>)
 8000cda:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8000cdc:	4875      	ldr	r0, [pc, #468]	; (8000eb4 <loadMenuTexts+0xa50>)
 8000cde:	f7ff fba6 	bl	800042e <copyText>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a74      	ldr	r2, [pc, #464]	; (8000eb8 <loadMenuTexts+0xa54>)
 8000ce6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8000ce8:	4874      	ldr	r0, [pc, #464]	; (8000ebc <loadMenuTexts+0xa58>)
 8000cea:	f7ff fba0 	bl	800042e <copyText>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a73      	ldr	r2, [pc, #460]	; (8000ec0 <loadMenuTexts+0xa5c>)
 8000cf2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <loadMenuTexts+0xa60>)
 8000cf6:	f7ff fb9a 	bl	800042e <copyText>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a72      	ldr	r2, [pc, #456]	; (8000ec8 <loadMenuTexts+0xa64>)
 8000cfe:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8000d00:	4872      	ldr	r0, [pc, #456]	; (8000ecc <loadMenuTexts+0xa68>)
 8000d02:	f7ff fb94 	bl	800042e <copyText>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a71      	ldr	r2, [pc, #452]	; (8000ed0 <loadMenuTexts+0xa6c>)
 8000d0a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8000d0c:	4871      	ldr	r0, [pc, #452]	; (8000ed4 <loadMenuTexts+0xa70>)
 8000d0e:	f7ff fb8e 	bl	800042e <copyText>
 8000d12:	e0e1      	b.n	8000ed8 <loadMenuTexts+0xa74>
 8000d14:	200004c0 	.word	0x200004c0
 8000d18:	20000c68 	.word	0x20000c68
 8000d1c:	200004d0 	.word	0x200004d0
 8000d20:	20000c6c 	.word	0x20000c6c
 8000d24:	200004e0 	.word	0x200004e0
 8000d28:	20000c70 	.word	0x20000c70
 8000d2c:	200004f0 	.word	0x200004f0
 8000d30:	20000c74 	.word	0x20000c74
 8000d34:	20000500 	.word	0x20000500
 8000d38:	20000c78 	.word	0x20000c78
 8000d3c:	20000510 	.word	0x20000510
 8000d40:	20000c7c 	.word	0x20000c7c
 8000d44:	20000520 	.word	0x20000520
 8000d48:	20000c80 	.word	0x20000c80
 8000d4c:	20000530 	.word	0x20000530
 8000d50:	20000c84 	.word	0x20000c84
 8000d54:	20000540 	.word	0x20000540
 8000d58:	20000c88 	.word	0x20000c88
 8000d5c:	20000550 	.word	0x20000550
 8000d60:	20000c8c 	.word	0x20000c8c
 8000d64:	20000560 	.word	0x20000560
 8000d68:	20000c90 	.word	0x20000c90
 8000d6c:	20000570 	.word	0x20000570
 8000d70:	20000c94 	.word	0x20000c94
 8000d74:	20000580 	.word	0x20000580
 8000d78:	20000c98 	.word	0x20000c98
 8000d7c:	20000590 	.word	0x20000590
 8000d80:	20000c9c 	.word	0x20000c9c
 8000d84:	200005a0 	.word	0x200005a0
 8000d88:	20000ca0 	.word	0x20000ca0
 8000d8c:	200005b0 	.word	0x200005b0
 8000d90:	20000ca4 	.word	0x20000ca4
 8000d94:	200005c0 	.word	0x200005c0
 8000d98:	20000ca8 	.word	0x20000ca8
 8000d9c:	200005d0 	.word	0x200005d0
 8000da0:	20000cac 	.word	0x20000cac
 8000da4:	200005e0 	.word	0x200005e0
 8000da8:	20000cb0 	.word	0x20000cb0
 8000dac:	200005f0 	.word	0x200005f0
 8000db0:	20000cb4 	.word	0x20000cb4
 8000db4:	20000600 	.word	0x20000600
 8000db8:	20000cb8 	.word	0x20000cb8
 8000dbc:	20000610 	.word	0x20000610
 8000dc0:	20000cc0 	.word	0x20000cc0
 8000dc4:	20000620 	.word	0x20000620
 8000dc8:	20000cc4 	.word	0x20000cc4
 8000dcc:	20000630 	.word	0x20000630
 8000dd0:	20000cc8 	.word	0x20000cc8
 8000dd4:	20000640 	.word	0x20000640
 8000dd8:	20000ccc 	.word	0x20000ccc
 8000ddc:	20000650 	.word	0x20000650
 8000de0:	20000cd0 	.word	0x20000cd0
 8000de4:	20000660 	.word	0x20000660
 8000de8:	20000cd4 	.word	0x20000cd4
 8000dec:	20000670 	.word	0x20000670
 8000df0:	20000cd8 	.word	0x20000cd8
 8000df4:	20000680 	.word	0x20000680
 8000df8:	20000cdc 	.word	0x20000cdc
 8000dfc:	20000690 	.word	0x20000690
 8000e00:	20000ce0 	.word	0x20000ce0
 8000e04:	200006a0 	.word	0x200006a0
 8000e08:	20000ce4 	.word	0x20000ce4
 8000e0c:	200006b0 	.word	0x200006b0
 8000e10:	20000ce8 	.word	0x20000ce8
 8000e14:	200006c0 	.word	0x200006c0
 8000e18:	20000cf0 	.word	0x20000cf0
 8000e1c:	200006d0 	.word	0x200006d0
 8000e20:	20000cf8 	.word	0x20000cf8
 8000e24:	200006e0 	.word	0x200006e0
 8000e28:	20000cfc 	.word	0x20000cfc
 8000e2c:	200006f0 	.word	0x200006f0
 8000e30:	20000d00 	.word	0x20000d00
 8000e34:	20000700 	.word	0x20000700
 8000e38:	20000d04 	.word	0x20000d04
 8000e3c:	20000710 	.word	0x20000710
 8000e40:	20000d08 	.word	0x20000d08
 8000e44:	20000720 	.word	0x20000720
 8000e48:	20000d0c 	.word	0x20000d0c
 8000e4c:	20000730 	.word	0x20000730
 8000e50:	20000d10 	.word	0x20000d10
 8000e54:	20000740 	.word	0x20000740
 8000e58:	20000d14 	.word	0x20000d14
 8000e5c:	20000750 	.word	0x20000750
 8000e60:	20000d18 	.word	0x20000d18
 8000e64:	20000760 	.word	0x20000760
 8000e68:	20000d1c 	.word	0x20000d1c
 8000e6c:	20000770 	.word	0x20000770
 8000e70:	20000d20 	.word	0x20000d20
 8000e74:	20000780 	.word	0x20000780
 8000e78:	20000d24 	.word	0x20000d24
 8000e7c:	20000790 	.word	0x20000790
 8000e80:	20000d28 	.word	0x20000d28
 8000e84:	200007a0 	.word	0x200007a0
 8000e88:	20000d2c 	.word	0x20000d2c
 8000e8c:	200007b0 	.word	0x200007b0
 8000e90:	20000d30 	.word	0x20000d30
 8000e94:	200007c0 	.word	0x200007c0
 8000e98:	20000d34 	.word	0x20000d34
 8000e9c:	200007d0 	.word	0x200007d0
 8000ea0:	20000d38 	.word	0x20000d38
 8000ea4:	200007e0 	.word	0x200007e0
 8000ea8:	20000d3c 	.word	0x20000d3c
 8000eac:	200007f0 	.word	0x200007f0
 8000eb0:	20000d40 	.word	0x20000d40
 8000eb4:	20000800 	.word	0x20000800
 8000eb8:	20000d44 	.word	0x20000d44
 8000ebc:	20000810 	.word	0x20000810
 8000ec0:	20000d48 	.word	0x20000d48
 8000ec4:	20000820 	.word	0x20000820
 8000ec8:	20000d4c 	.word	0x20000d4c
 8000ecc:	20000830 	.word	0x20000830
 8000ed0:	20000d50 	.word	0x20000d50
 8000ed4:	20000840 	.word	0x20000840
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <loadMenuTexts+0xb14>)
 8000edc:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8000ede:	4827      	ldr	r0, [pc, #156]	; (8000f7c <loadMenuTexts+0xb18>)
 8000ee0:	f7ff faa5 	bl	800042e <copyText>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <loadMenuTexts+0xb1c>)
 8000ee8:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <loadMenuTexts+0xb20>)
 8000eec:	f7ff fa9f 	bl	800042e <copyText>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <loadMenuTexts+0xb24>)
 8000ef4:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8000ef6:	4825      	ldr	r0, [pc, #148]	; (8000f8c <loadMenuTexts+0xb28>)
 8000ef8:	f7ff fa99 	bl	800042e <copyText>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <loadMenuTexts+0xb2c>)
 8000f00:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <loadMenuTexts+0xb30>)
 8000f04:	f7ff fa93 	bl	800042e <copyText>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <loadMenuTexts+0xb34>)
 8000f0c:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8000f0e:	4823      	ldr	r0, [pc, #140]	; (8000f9c <loadMenuTexts+0xb38>)
 8000f10:	f7ff fa8d 	bl	800042e <copyText>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <loadMenuTexts+0xb3c>)
 8000f18:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8000f1a:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <loadMenuTexts+0xb40>)
 8000f1c:	f7ff fa87 	bl	800042e <copyText>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <loadMenuTexts+0xb44>)
 8000f24:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8000f26:	4821      	ldr	r0, [pc, #132]	; (8000fac <loadMenuTexts+0xb48>)
 8000f28:	f7ff fa81 	bl	800042e <copyText>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <loadMenuTexts+0xb4c>)
 8000f30:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <loadMenuTexts+0xb50>)
 8000f34:	f7ff fa7b 	bl	800042e <copyText>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <loadMenuTexts+0xb54>)
 8000f3c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8000f3e:	481f      	ldr	r0, [pc, #124]	; (8000fbc <loadMenuTexts+0xb58>)
 8000f40:	f7ff fa75 	bl	800042e <copyText>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <loadMenuTexts+0xb5c>)
 8000f48:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8000f4a:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <loadMenuTexts+0xb60>)
 8000f4c:	f7ff fa6f 	bl	800042e <copyText>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <loadMenuTexts+0xb64>)
 8000f54:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8000f56:	481d      	ldr	r0, [pc, #116]	; (8000fcc <loadMenuTexts+0xb68>)
 8000f58:	f7ff fa69 	bl	800042e <copyText>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <loadMenuTexts+0xb6c>)
 8000f60:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <loadMenuTexts+0xb70>)
 8000f64:	f7ff fa63 	bl	800042e <copyText>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <loadMenuTexts+0xb74>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000d54 	.word	0x20000d54
 8000f7c:	20000850 	.word	0x20000850
 8000f80:	20000d58 	.word	0x20000d58
 8000f84:	20000860 	.word	0x20000860
 8000f88:	20000d5c 	.word	0x20000d5c
 8000f8c:	20000870 	.word	0x20000870
 8000f90:	20000d60 	.word	0x20000d60
 8000f94:	20000880 	.word	0x20000880
 8000f98:	20000d64 	.word	0x20000d64
 8000f9c:	20000890 	.word	0x20000890
 8000fa0:	20000d68 	.word	0x20000d68
 8000fa4:	200008a0 	.word	0x200008a0
 8000fa8:	20000d74 	.word	0x20000d74
 8000fac:	200008b0 	.word	0x200008b0
 8000fb0:	20000d78 	.word	0x20000d78
 8000fb4:	200008c0 	.word	0x200008c0
 8000fb8:	20000d7c 	.word	0x20000d7c
 8000fbc:	200008d0 	.word	0x200008d0
 8000fc0:	20000d80 	.word	0x20000d80
 8000fc4:	200008e0 	.word	0x200008e0
 8000fc8:	20000d84 	.word	0x20000d84
 8000fcc:	200008f0 	.word	0x200008f0
 8000fd0:	20000d88 	.word	0x20000d88
 8000fd4:	20000900 	.word	0x20000900
 8000fd8:	20000d8c 	.word	0x20000d8c

08000fdc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000c30 	.word	0x20000c30

08000ffc <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f001 f86d 	bl	80020e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8001006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100a:	f001 f8cb 	bl	80021a4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 fc3d 	bl	800188c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 fd5f 	bl	8001ad4 <MX_GPIO_Init>
  MX_CAN_Init();
 8001016:	f000 fc7f 	bl	8001918 <MX_CAN_Init>
  MX_I2C1_Init();
 800101a:	f000 fcb1 	bl	8001980 <MX_I2C1_Init>
  MX_TIM1_Init();
 800101e:	f000 fcdd 	bl	80019dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001022:	f000 fd2d 	bl	8001a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	484b      	ldr	r0, [pc, #300]	; (8001158 <main+0x15c>)
 800102c:	f001 fd5f 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	4848      	ldr	r0, [pc, #288]	; (8001158 <main+0x15c>)
 8001036:	f001 fd5a 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f001 f8b2 	bl	80021a4 <HAL_Delay>
  lcd_init();
 8001040:	f7ff f9a7 	bl	8000392 <lcd_init>
  HAL_Delay(10);
 8001044:	200a      	movs	r0, #10
 8001046:	f001 f8ad 	bl	80021a4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800104a:	4844      	ldr	r0, [pc, #272]	; (800115c <main+0x160>)
 800104c:	f003 fa0a 	bl	8004464 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8001050:	bf00      	nop
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <main+0x164>)
 8001054:	f002 fa4b 	bl	80034ee <HAL_I2C_GetError>
 8001058:	4603      	mov	r3, r0
 800105a:	2b04      	cmp	r3, #4
 800105c:	d0f9      	beq.n	8001052 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800105e:	bf00      	nop
 8001060:	483f      	ldr	r0, [pc, #252]	; (8001160 <main+0x164>)
 8001062:	f002 fa37 	bl	80034d4 <HAL_I2C_GetState>
 8001066:	4603      	mov	r3, r0
 8001068:	2b20      	cmp	r3, #32
 800106a:	d1f9      	bne.n	8001060 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001072:	4839      	ldr	r0, [pc, #228]	; (8001158 <main+0x15c>)
 8001074:	f001 fd3b 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4836      	ldr	r0, [pc, #216]	; (8001158 <main+0x15c>)
 8001080:	f001 fd35 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2104      	movs	r1, #4
 8001088:	4833      	ldr	r0, [pc, #204]	; (8001158 <main+0x15c>)
 800108a:	f001 fd30 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	4831      	ldr	r0, [pc, #196]	; (8001158 <main+0x15c>)
 8001094:	f001 fd2b 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	482e      	ldr	r0, [pc, #184]	; (8001158 <main+0x15c>)
 800109e:	f001 fd26 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	482f      	ldr	r0, [pc, #188]	; (8001164 <main+0x168>)
 80010a8:	f001 fd21 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	482c      	ldr	r0, [pc, #176]	; (8001164 <main+0x168>)
 80010b2:	f001 fd1c 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	482b      	ldr	r0, [pc, #172]	; (8001168 <main+0x16c>)
 80010bc:	f001 fd17 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4828      	ldr	r0, [pc, #160]	; (8001168 <main+0x16c>)
 80010c6:	f001 fd12 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <main+0x16c>)
 80010d0:	f001 fd0d 	bl	8002aee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2110      	movs	r1, #16
 80010d8:	4823      	ldr	r0, [pc, #140]	; (8001168 <main+0x16c>)
 80010da:	f001 fd08 	bl	8002aee <HAL_GPIO_WritePin>

  i2cTest();
 80010de:	f000 f855 	bl	800118c <i2cTest>
  HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f001 f85e 	bl	80021a4 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <main+0x170>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff f97f 	bl	80003f0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80010f2:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <main+0x174>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	2002      	movs	r0, #2
 80010f8:	f7ff f97a 	bl	80003f0 <lcd_print>
  HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001100:	f001 f850 	bl	80021a4 <HAL_Delay>
  lcd_clear();
 8001104:	f7ff f989 	bl	800041a <lcd_clear>

  eepromKontrol();
 8001108:	f000 f902 	bl	8001310 <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <main+0x178>)
 800110e:	1d3c      	adds	r4, r7, #4
 8001110:	461d      	mov	r5, r3
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 ff22 	bl	8004f6c <osThreadCreate>
 8001128:	4603      	mov	r3, r0
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <main+0x17c>)
 800112c:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 800112e:	2001      	movs	r0, #1
 8001130:	f004 f90b 	bl	800534a <xQueueCreateMutex>
 8001134:	4603      	mov	r3, r0
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <main+0x180>)
 8001138:	6013      	str	r3, [r2, #0]
  xTaskCreate(WiFi_Task, "WiFi_Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &wifiTaskHandle);
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <main+0x184>)
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2301      	movs	r3, #1
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	490f      	ldr	r1, [pc, #60]	; (8001184 <main+0x188>)
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <main+0x18c>)
 800114a:	f004 fc7e 	bl	8005a4a <xTaskCreate>
  //xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  //xTaskCreate(wifiTask, "wifiTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  //xTaskCreate(wifiTaskTest, "wifiTaskTest", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  vTaskStartScheduler();
 800114e:	f004 fddf 	bl	8005d10 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001152:	f003 ff04 	bl	8004f5e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001156:	e7fe      	b.n	8001156 <main+0x15a>
 8001158:	40010c00 	.word	0x40010c00
 800115c:	20000f5c 	.word	0x20000f5c
 8001160:	20000ebc 	.word	0x20000ebc
 8001164:	40011000 	.word	0x40011000
 8001168:	40010800 	.word	0x40010800
 800116c:	08008bfc 	.word	0x08008bfc
 8001170:	08008c10 	.word	0x08008c10
 8001174:	08008c3c 	.word	0x08008c3c
 8001178:	20000fa4 	.word	0x20000fa4
 800117c:	20000f54 	.word	0x20000f54
 8001180:	20000f58 	.word	0x20000f58
 8001184:	08008c24 	.word	0x08008c24
 8001188:	080012e9 	.word	0x080012e9

0800118c <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <i2cTest+0x154>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <i2cTest+0x154>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80011ae:	484c      	ldr	r0, [pc, #304]	; (80012e0 <i2cTest+0x154>)
 80011b0:	f001 fdfa 	bl	8002da8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80011b8:	2311      	movs	r3, #17
 80011ba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4846      	ldr	r0, [pc, #280]	; (80012e4 <i2cTest+0x158>)
 80011ca:	f001 fa19 	bl	8002600 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	4844      	ldr	r0, [pc, #272]	; (80012e4 <i2cTest+0x158>)
 80011d4:	f001 fc8b 	bl	8002aee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4841      	ldr	r0, [pc, #260]	; (80012e4 <i2cTest+0x158>)
 80011de:	f001 fc86 	bl	8002aee <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 ffde 	bl	80021a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80011e8:	bf00      	nop
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	483d      	ldr	r0, [pc, #244]	; (80012e4 <i2cTest+0x158>)
 80011ee:	f001 fc67 	bl	8002ac0 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d006      	beq.n	8001206 <i2cTest+0x7a>
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	483a      	ldr	r0, [pc, #232]	; (80012e4 <i2cTest+0x158>)
 80011fc:	f001 fc60 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f1      	bne.n	80011ea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	4836      	ldr	r0, [pc, #216]	; (80012e4 <i2cTest+0x158>)
 800120c:	f001 fc6f 	bl	8002aee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001210:	200a      	movs	r0, #10
 8001212:	f000 ffc7 	bl	80021a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001216:	bf00      	nop
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	4832      	ldr	r0, [pc, #200]	; (80012e4 <i2cTest+0x158>)
 800121c:	f001 fc50 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d0f8      	beq.n	8001218 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	482e      	ldr	r0, [pc, #184]	; (80012e4 <i2cTest+0x158>)
 800122c:	f001 fc5f 	bl	8002aee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 ffb7 	bl	80021a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001236:	bf00      	nop
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	482a      	ldr	r0, [pc, #168]	; (80012e4 <i2cTest+0x158>)
 800123c:	f001 fc40 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	d0f8      	beq.n	8001238 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4826      	ldr	r0, [pc, #152]	; (80012e4 <i2cTest+0x158>)
 800124c:	f001 fc4f 	bl	8002aee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f000 ffa7 	bl	80021a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8001256:	bf00      	nop
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4822      	ldr	r0, [pc, #136]	; (80012e4 <i2cTest+0x158>)
 800125c:	f001 fc30 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d1f8      	bne.n	8001258 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	481e      	ldr	r0, [pc, #120]	; (80012e4 <i2cTest+0x158>)
 800126c:	f001 fc3f 	bl	8002aee <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f000 ff97 	bl	80021a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001276:	bf00      	nop
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <i2cTest+0x158>)
 800127c:	f001 fc20 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d1f8      	bne.n	8001278 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001286:	23c0      	movs	r3, #192	; 0xc0
 8001288:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800128e:	2301      	movs	r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001296:	463b      	mov	r3, r7
 8001298:	4619      	mov	r1, r3
 800129a:	4812      	ldr	r0, [pc, #72]	; (80012e4 <i2cTest+0x158>)
 800129c:	f001 f9b0 	bl	8002600 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <i2cTest+0x154>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <i2cTest+0x154>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <i2cTest+0x154>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <i2cTest+0x154>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012be:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <i2cTest+0x154>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <i2cTest+0x154>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <i2cTest+0x154>)
 80012d2:	f001 fc25 	bl	8002b20 <HAL_I2C_Init>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000ebc 	.word	0x20000ebc
 80012e4:	40010c00 	.word	0x40010c00

080012e8 <WiFi_Task>:
					  //HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
				  }
	}
}

void WiFi_Task(void *pvParameters) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  // WiFi task

  HAL_UART_Receive_IT(&huart1, &RxByte, 1); // Start UART reception
 80012f0:	2201      	movs	r2, #1
 80012f2:	4905      	ldr	r1, [pc, #20]	; (8001308 <WiFi_Task+0x20>)
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <WiFi_Task+0x24>)
 80012f6:	f003 fd24 	bl	8004d42 <HAL_UART_Receive_IT>

  for (;;) {
    WiFi_Connect(); // Connect to WiFi network
 80012fa:	f000 fa91 	bl	8001820 <WiFi_Connect>

    // Your WiFi operations here

    vTaskDelay(1000 / portTICK_PERIOD_MS);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f004 fcd1 	bl	8005ca8 <vTaskDelay>
    WiFi_Connect(); // Connect to WiFi network
 8001306:	e7f8      	b.n	80012fa <WiFi_Task+0x12>
 8001308:	20000e90 	.word	0x20000e90
 800130c:	20000f10 	.word	0x20000f10

08001310 <eepromKontrol>:
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}

void eepromKontrol(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8001316:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	233f      	movs	r3, #63	; 0x3f
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	4b9b      	ldr	r3, [pc, #620]	; (8001590 <eepromKontrol+0x280>)
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	233f      	movs	r3, #63	; 0x3f
 8001326:	2200      	movs	r2, #0
 8001328:	21a0      	movs	r1, #160	; 0xa0
 800132a:	489a      	ldr	r0, [pc, #616]	; (8001594 <eepromKontrol+0x284>)
 800132c:	f001 fe6a 	bl	8003004 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8001330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001334:	f000 ff36 	bl	80021a4 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8001338:	4b95      	ldr	r3, [pc, #596]	; (8001590 <eepromKontrol+0x280>)
 800133a:	78da      	ldrb	r2, [r3, #3]
 800133c:	4b96      	ldr	r3, [pc, #600]	; (8001598 <eepromKontrol+0x288>)
 800133e:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8001340:	4b93      	ldr	r3, [pc, #588]	; (8001590 <eepromKontrol+0x280>)
 8001342:	785a      	ldrb	r2, [r3, #1]
 8001344:	4b95      	ldr	r3, [pc, #596]	; (800159c <eepromKontrol+0x28c>)
 8001346:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8001348:	4b91      	ldr	r3, [pc, #580]	; (8001590 <eepromKontrol+0x280>)
 800134a:	789a      	ldrb	r2, [r3, #2]
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <eepromKontrol+0x290>)
 800134e:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8001350:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <eepromKontrol+0x280>)
 8001352:	791a      	ldrb	r2, [r3, #4]
 8001354:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <eepromKontrol+0x294>)
 8001356:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8001358:	4b8d      	ldr	r3, [pc, #564]	; (8001590 <eepromKontrol+0x280>)
 800135a:	795a      	ldrb	r2, [r3, #5]
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <eepromKontrol+0x298>)
 800135e:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8001360:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <eepromKontrol+0x280>)
 8001362:	799a      	ldrb	r2, [r3, #6]
 8001364:	4b91      	ldr	r3, [pc, #580]	; (80015ac <eepromKontrol+0x29c>)
 8001366:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8001368:	4b89      	ldr	r3, [pc, #548]	; (8001590 <eepromKontrol+0x280>)
 800136a:	79da      	ldrb	r2, [r3, #7]
 800136c:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <eepromKontrol+0x2a0>)
 800136e:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8001370:	4b87      	ldr	r3, [pc, #540]	; (8001590 <eepromKontrol+0x280>)
 8001372:	7a1a      	ldrb	r2, [r3, #8]
 8001374:	4b8f      	ldr	r3, [pc, #572]	; (80015b4 <eepromKontrol+0x2a4>)
 8001376:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8001378:	4b85      	ldr	r3, [pc, #532]	; (8001590 <eepromKontrol+0x280>)
 800137a:	7a5a      	ldrb	r2, [r3, #9]
 800137c:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <eepromKontrol+0x2a8>)
 800137e:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8001380:	4b83      	ldr	r3, [pc, #524]	; (8001590 <eepromKontrol+0x280>)
 8001382:	7a9a      	ldrb	r2, [r3, #10]
 8001384:	4b8d      	ldr	r3, [pc, #564]	; (80015bc <eepromKontrol+0x2ac>)
 8001386:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8001388:	4b81      	ldr	r3, [pc, #516]	; (8001590 <eepromKontrol+0x280>)
 800138a:	7ada      	ldrb	r2, [r3, #11]
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <eepromKontrol+0x2b0>)
 800138e:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <eepromKontrol+0x280>)
 8001392:	7b1a      	ldrb	r2, [r3, #12]
 8001394:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <eepromKontrol+0x2b4>)
 8001396:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <eepromKontrol+0x280>)
 800139a:	7b5a      	ldrb	r2, [r3, #13]
 800139c:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <eepromKontrol+0x2b8>)
 800139e:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <eepromKontrol+0x280>)
 80013a2:	7b9a      	ldrb	r2, [r3, #14]
 80013a4:	4b89      	ldr	r3, [pc, #548]	; (80015cc <eepromKontrol+0x2bc>)
 80013a6:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80013a8:	4b79      	ldr	r3, [pc, #484]	; (8001590 <eepromKontrol+0x280>)
 80013aa:	7bda      	ldrb	r2, [r3, #15]
 80013ac:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <eepromKontrol+0x2c0>)
 80013ae:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80013b0:	4b77      	ldr	r3, [pc, #476]	; (8001590 <eepromKontrol+0x280>)
 80013b2:	7c1a      	ldrb	r2, [r3, #16]
 80013b4:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <eepromKontrol+0x2c4>)
 80013b6:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80013b8:	4b75      	ldr	r3, [pc, #468]	; (8001590 <eepromKontrol+0x280>)
 80013ba:	7c5a      	ldrb	r2, [r3, #17]
 80013bc:	4b86      	ldr	r3, [pc, #536]	; (80015d8 <eepromKontrol+0x2c8>)
 80013be:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <eepromKontrol+0x280>)
 80013c2:	7c9a      	ldrb	r2, [r3, #18]
 80013c4:	4b85      	ldr	r3, [pc, #532]	; (80015dc <eepromKontrol+0x2cc>)
 80013c6:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80013c8:	4b71      	ldr	r3, [pc, #452]	; (8001590 <eepromKontrol+0x280>)
 80013ca:	7cda      	ldrb	r2, [r3, #19]
 80013cc:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <eepromKontrol+0x2d0>)
 80013ce:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <eepromKontrol+0x280>)
 80013d2:	7d1a      	ldrb	r2, [r3, #20]
 80013d4:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <eepromKontrol+0x2d4>)
 80013d6:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <eepromKontrol+0x280>)
 80013da:	7d5a      	ldrb	r2, [r3, #21]
 80013dc:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <eepromKontrol+0x2d8>)
 80013de:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <eepromKontrol+0x280>)
 80013e2:	7d9a      	ldrb	r2, [r3, #22]
 80013e4:	4b81      	ldr	r3, [pc, #516]	; (80015ec <eepromKontrol+0x2dc>)
 80013e6:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <eepromKontrol+0x280>)
 80013ea:	7dda      	ldrb	r2, [r3, #23]
 80013ec:	4b80      	ldr	r3, [pc, #512]	; (80015f0 <eepromKontrol+0x2e0>)
 80013ee:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80013f0:	4b67      	ldr	r3, [pc, #412]	; (8001590 <eepromKontrol+0x280>)
 80013f2:	7e1a      	ldrb	r2, [r3, #24]
 80013f4:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <eepromKontrol+0x2e4>)
 80013f6:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80013f8:	4b65      	ldr	r3, [pc, #404]	; (8001590 <eepromKontrol+0x280>)
 80013fa:	7e5a      	ldrb	r2, [r3, #25]
 80013fc:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <eepromKontrol+0x2e8>)
 80013fe:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8001400:	4b63      	ldr	r3, [pc, #396]	; (8001590 <eepromKontrol+0x280>)
 8001402:	7e9a      	ldrb	r2, [r3, #26]
 8001404:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <eepromKontrol+0x2ec>)
 8001406:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <eepromKontrol+0x280>)
 800140a:	7eda      	ldrb	r2, [r3, #27]
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <eepromKontrol+0x2f0>)
 800140e:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <eepromKontrol+0x280>)
 8001412:	7f1a      	ldrb	r2, [r3, #28]
 8001414:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <eepromKontrol+0x2f4>)
 8001416:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <eepromKontrol+0x280>)
 800141a:	7f5a      	ldrb	r2, [r3, #29]
 800141c:	4b7a      	ldr	r3, [pc, #488]	; (8001608 <eepromKontrol+0x2f8>)
 800141e:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <eepromKontrol+0x280>)
 8001422:	7f9a      	ldrb	r2, [r3, #30]
 8001424:	4b79      	ldr	r3, [pc, #484]	; (800160c <eepromKontrol+0x2fc>)
 8001426:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <eepromKontrol+0x280>)
 800142a:	7fda      	ldrb	r2, [r3, #31]
 800142c:	4b78      	ldr	r3, [pc, #480]	; (8001610 <eepromKontrol+0x300>)
 800142e:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <eepromKontrol+0x280>)
 8001432:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001436:	4b77      	ldr	r3, [pc, #476]	; (8001614 <eepromKontrol+0x304>)
 8001438:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800143a:	4b55      	ldr	r3, [pc, #340]	; (8001590 <eepromKontrol+0x280>)
 800143c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001440:	4b75      	ldr	r3, [pc, #468]	; (8001618 <eepromKontrol+0x308>)
 8001442:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <eepromKontrol+0x280>)
 8001446:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <eepromKontrol+0x30c>)
 800144c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800144e:	4b50      	ldr	r3, [pc, #320]	; (8001590 <eepromKontrol+0x280>)
 8001450:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001454:	4b72      	ldr	r3, [pc, #456]	; (8001620 <eepromKontrol+0x310>)
 8001456:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <eepromKontrol+0x280>)
 800145a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800145e:	4b71      	ldr	r3, [pc, #452]	; (8001624 <eepromKontrol+0x314>)
 8001460:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8001462:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <eepromKontrol+0x280>)
 8001464:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001468:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <eepromKontrol+0x318>)
 800146a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 800146c:	4b48      	ldr	r3, [pc, #288]	; (8001590 <eepromKontrol+0x280>)
 800146e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001472:	4b6e      	ldr	r3, [pc, #440]	; (800162c <eepromKontrol+0x31c>)
 8001474:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <eepromKontrol+0x280>)
 8001478:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800147c:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <eepromKontrol+0x320>)
 800147e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8001480:	4b43      	ldr	r3, [pc, #268]	; (8001590 <eepromKontrol+0x280>)
 8001482:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001486:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <eepromKontrol+0x324>)
 8001488:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <eepromKontrol+0x280>)
 800148c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001490:	4b69      	ldr	r3, [pc, #420]	; (8001638 <eepromKontrol+0x328>)
 8001492:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <eepromKontrol+0x280>)
 8001496:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800149a:	4b68      	ldr	r3, [pc, #416]	; (800163c <eepromKontrol+0x32c>)
 800149c:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <eepromKontrol+0x280>)
 80014a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <eepromKontrol+0x330>)
 80014a6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <eepromKontrol+0x280>)
 80014aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <eepromKontrol+0x334>)
 80014b0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <eepromKontrol+0x280>)
 80014b4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80014b8:	4b63      	ldr	r3, [pc, #396]	; (8001648 <eepromKontrol+0x338>)
 80014ba:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <eepromKontrol+0x280>)
 80014be:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <eepromKontrol+0x33c>)
 80014c4:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <eepromKontrol+0x308>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ffca 	bl	8000464 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <eepromKontrol+0x304>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d902      	bls.n	80014de <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 80014d8:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <eepromKontrol+0x304>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <eepromKontrol+0x300>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d902      	bls.n	80014ec <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <eepromKontrol+0x300>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <eepromKontrol+0x2fc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d902      	bls.n	80014fa <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <eepromKontrol+0x2fc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <eepromKontrol+0x2f8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b09      	cmp	r3, #9
 8001500:	d902      	bls.n	8001508 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <eepromKontrol+0x2f8>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <eepromKontrol+0x2f4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d902      	bls.n	8001516 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <eepromKontrol+0x2f4>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <eepromKontrol+0x28c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d902      	bls.n	8001524 <eepromKontrol+0x214>
	    calismaSekli=0;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <eepromKontrol+0x28c>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <eepromKontrol+0x290>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d902      	bls.n	8001532 <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <eepromKontrol+0x290>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <eepromKontrol+0x294>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d902      	bls.n	8001540 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <eepromKontrol+0x294>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <eepromKontrol+0x298>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d902      	bls.n	800154e <eepromKontrol+0x23e>
	    altLimit=1;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <eepromKontrol+0x298>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <eepromKontrol+0x29c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d902      	bls.n	800155c <eepromKontrol+0x24c>
	    basincSalteri=1;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <eepromKontrol+0x29c>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <eepromKontrol+0x2a0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d902      	bls.n	800156a <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <eepromKontrol+0x2a0>)
 8001566:	2203      	movs	r2, #3
 8001568:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <eepromKontrol+0x314>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d902      	bls.n	8001578 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <eepromKontrol+0x314>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <eepromKontrol+0x2a4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d902      	bls.n	8001586 <eepromKontrol+0x276>
	    kapi1Tip=1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <eepromKontrol+0x2a4>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <eepromKontrol+0x2a8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b05      	cmp	r3, #5
 800158c:	d963      	bls.n	8001656 <eepromKontrol+0x346>
 800158e:	e05f      	b.n	8001650 <eepromKontrol+0x340>
 8001590:	20000bf0 	.word	0x20000bf0
 8001594:	20000ebc 	.word	0x20000ebc
 8001598:	20000c2f 	.word	0x20000c2f
 800159c:	20000c38 	.word	0x20000c38
 80015a0:	20000c39 	.word	0x20000c39
 80015a4:	20000c3a 	.word	0x20000c3a
 80015a8:	20000c3b 	.word	0x20000c3b
 80015ac:	20000c3c 	.word	0x20000c3c
 80015b0:	20000c3d 	.word	0x20000c3d
 80015b4:	20000c3e 	.word	0x20000c3e
 80015b8:	20000c4e 	.word	0x20000c4e
 80015bc:	20000c3f 	.word	0x20000c3f
 80015c0:	20000c4f 	.word	0x20000c4f
 80015c4:	20000c40 	.word	0x20000c40
 80015c8:	20000c50 	.word	0x20000c50
 80015cc:	20000c43 	.word	0x20000c43
 80015d0:	20000c44 	.word	0x20000c44
 80015d4:	20000c45 	.word	0x20000c45
 80015d8:	20000c46 	.word	0x20000c46
 80015dc:	20000c47 	.word	0x20000c47
 80015e0:	20000c48 	.word	0x20000c48
 80015e4:	20000c49 	.word	0x20000c49
 80015e8:	20000c4a 	.word	0x20000c4a
 80015ec:	20000c4b 	.word	0x20000c4b
 80015f0:	20000c4c 	.word	0x20000c4c
 80015f4:	20000c4d 	.word	0x20000c4d
 80015f8:	20000c51 	.word	0x20000c51
 80015fc:	20000c52 	.word	0x20000c52
 8001600:	20000c34 	.word	0x20000c34
 8001604:	20000c35 	.word	0x20000c35
 8001608:	20000c36 	.word	0x20000c36
 800160c:	20000910 	.word	0x20000910
 8001610:	20000911 	.word	0x20000911
 8001614:	20000c37 	.word	0x20000c37
 8001618:	20000c54 	.word	0x20000c54
 800161c:	20000c42 	.word	0x20000c42
 8001620:	20000c53 	.word	0x20000c53
 8001624:	20000c41 	.word	0x20000c41
 8001628:	20000c55 	.word	0x20000c55
 800162c:	20000c56 	.word	0x20000c56
 8001630:	20000c57 	.word	0x20000c57
 8001634:	20000c58 	.word	0x20000c58
 8001638:	20000c59 	.word	0x20000c59
 800163c:	20000c5a 	.word	0x20000c5a
 8001640:	20000c5b 	.word	0x20000c5b
 8001644:	20000c5c 	.word	0x20000c5c
 8001648:	20000c5d 	.word	0x20000c5d
 800164c:	20000c5e 	.word	0x20000c5e
	    kapi1AcSure=5;
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <eepromKontrol+0x46c>)
 8001652:	2205      	movs	r2, #5
 8001654:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <eepromKontrol+0x470>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d902      	bls.n	8001664 <eepromKontrol+0x354>
	    kapi2Tip=1;
 800165e:	4b48      	ldr	r3, [pc, #288]	; (8001780 <eepromKontrol+0x470>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <eepromKontrol+0x474>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d902      	bls.n	8001672 <eepromKontrol+0x362>
	    kapi2AcSure=5;
 800166c:	4b45      	ldr	r3, [pc, #276]	; (8001784 <eepromKontrol+0x474>)
 800166e:	2205      	movs	r2, #5
 8001670:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <eepromKontrol+0x478>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d902      	bls.n	8001680 <eepromKontrol+0x370>
	    kapitablaTip=1;
 800167a:	4b43      	ldr	r3, [pc, #268]	; (8001788 <eepromKontrol+0x478>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <eepromKontrol+0x47c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d902      	bls.n	800168e <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <eepromKontrol+0x47c>)
 800168a:	2202      	movs	r2, #2
 800168c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <eepromKontrol+0x480>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d902      	bls.n	800169c <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <eepromKontrol+0x480>)
 8001698:	2205      	movs	r2, #5
 800169a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <eepromKontrol+0x484>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d902      	bls.n	80016aa <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <eepromKontrol+0x484>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <eepromKontrol+0x488>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d902      	bls.n	80016b8 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <eepromKontrol+0x488>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <eepromKontrol+0x48c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d902      	bls.n	80016c6 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <eepromKontrol+0x48c>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <eepromKontrol+0x490>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d902      	bls.n	80016d4 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <eepromKontrol+0x490>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <eepromKontrol+0x494>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d902      	bls.n	80016e2 <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <eepromKontrol+0x494>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <eepromKontrol+0x498>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d902      	bls.n	80016f0 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <eepromKontrol+0x498>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <eepromKontrol+0x49c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d902      	bls.n	80016fe <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <eepromKontrol+0x49c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <eepromKontrol+0x4a0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d902      	bls.n	800170c <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <eepromKontrol+0x4a0>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <eepromKontrol+0x4a4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d902      	bls.n	800171a <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <eepromKontrol+0x4a4>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <eepromKontrol+0x4a8>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d902      	bls.n	8001728 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <eepromKontrol+0x4a8>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <eepromKontrol+0x4ac>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2bb4      	cmp	r3, #180	; 0xb4
 800172e:	d902      	bls.n	8001736 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <eepromKontrol+0x4ac>)
 8001732:	223c      	movs	r2, #60	; 0x3c
 8001734:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <eepromKontrol+0x4b0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d902      	bls.n	8001744 <eepromKontrol+0x434>
	    buzzer=0;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <eepromKontrol+0x4b0>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <eepromKontrol+0x4b4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d902      	bls.n	8001752 <eepromKontrol+0x442>
	    demoMode=0;
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <eepromKontrol+0x4b4>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <eepromKontrol+0x4b8>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d902      	bls.n	8001760 <eepromKontrol+0x450>
	    calismaSayModu=0;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <eepromKontrol+0x4b8>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <eepromKontrol+0x4bc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d902      	bls.n	800176e <eepromKontrol+0x45e>
	    dilSecim=0;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <eepromKontrol+0x4bc>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 800176e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001772:	f000 fd17 	bl	80021a4 <HAL_Delay>
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000c4e 	.word	0x20000c4e
 8001780:	20000c3f 	.word	0x20000c3f
 8001784:	20000c4f 	.word	0x20000c4f
 8001788:	20000c40 	.word	0x20000c40
 800178c:	20000c42 	.word	0x20000c42
 8001790:	20000c50 	.word	0x20000c50
 8001794:	20000c43 	.word	0x20000c43
 8001798:	20000c44 	.word	0x20000c44
 800179c:	20000c45 	.word	0x20000c45
 80017a0:	20000c46 	.word	0x20000c46
 80017a4:	20000c47 	.word	0x20000c47
 80017a8:	20000c48 	.word	0x20000c48
 80017ac:	20000c49 	.word	0x20000c49
 80017b0:	20000c4a 	.word	0x20000c4a
 80017b4:	20000c4b 	.word	0x20000c4b
 80017b8:	20000c4c 	.word	0x20000c4c
 80017bc:	20000c4d 	.word	0x20000c4d
 80017c0:	20000c51 	.word	0x20000c51
 80017c4:	20000c52 	.word	0x20000c52
 80017c8:	20000c53 	.word	0x20000c53
 80017cc:	20000c54 	.word	0x20000c54

080017d0 <WiFi_SendCommand>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
  // Handle UART errors
}

void WiFi_SendCommand(const char *command) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  xSemaphoreTake(uartMutex, portMAX_DELAY);
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <WiFi_SendCommand+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fec9 	bl	8005578 <xQueueSemaphoreTake>

  snprintf((char *)TxBuffer, TX_BUFFER_SIZE, "%s\r\n", command);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <WiFi_SendCommand+0x44>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <WiFi_SendCommand+0x48>)
 80017ee:	f005 fe27 	bl	8007440 <sniprintf>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen((char *)TxBuffer));
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <WiFi_SendCommand+0x48>)
 80017f4:	f7fe fd1c 	bl	8000230 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4906      	ldr	r1, [pc, #24]	; (8001818 <WiFi_SendCommand+0x48>)
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <WiFi_SendCommand+0x4c>)
 8001802:	f003 fa5a 	bl	8004cba <HAL_UART_Transmit_IT>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000f54 	.word	0x20000f54
 8001814:	08008d78 	.word	0x08008d78
 8001818:	20000e10 	.word	0x20000e10
 800181c:	20000f10 	.word	0x20000f10

08001820 <WiFi_Connect>:

void WiFi_Connect(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  WiFi_SendCommand("AT+CWMODE=1");
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <WiFi_Connect+0x50>)
 8001826:	f7ff ffd3 	bl	80017d0 <WiFi_SendCommand>
  HAL_Delay(200);
 800182a:	20c8      	movs	r0, #200	; 0xc8
 800182c:	f000 fcba 	bl	80021a4 <HAL_Delay>
  WiFi_SendCommand("AT+CWJAP=\"" SSID "\",\"" PASSWORD "\"");
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <WiFi_Connect+0x54>)
 8001832:	f7ff ffcd 	bl	80017d0 <WiFi_SendCommand>

  while (!RxComplete) {
 8001836:	e002      	b.n	800183e <WiFi_Connect+0x1e>
    vTaskDelay(100 / portTICK_PERIOD_MS);
 8001838:	2064      	movs	r0, #100	; 0x64
 800183a:	f004 fa35 	bl	8005ca8 <vTaskDelay>
  while (!RxComplete) {
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <WiFi_Connect+0x58>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f7      	beq.n	8001838 <WiFi_Connect+0x18>
  }

  if (strstr((const char *)RxBuffer, "OK") != NULL) {
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <WiFi_Connect+0x5c>)
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <WiFi_Connect+0x60>)
 800184c:	f005 ff0c 	bl	8007668 <strstr>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <WiFi_Connect+0x3e>
    printf("WiFi connected successfully!\n");
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <WiFi_Connect+0x64>)
 8001858:	f005 fdea 	bl	8007430 <puts>
 800185c:	e002      	b.n	8001864 <WiFi_Connect+0x44>
  } else {
    printf("WiFi connection failed!\n");
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <WiFi_Connect+0x68>)
 8001860:	f005 fde6 	bl	8007430 <puts>
  }

  RxComplete = 0;
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <WiFi_Connect+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	08008d80 	.word	0x08008d80
 8001874:	08008d8c 	.word	0x08008d8c
 8001878:	20000e91 	.word	0x20000e91
 800187c:	08008dc4 	.word	0x08008dc4
 8001880:	20000d90 	.word	0x20000d90
 8001884:	08008dc8 	.word	0x08008dc8
 8001888:	08008de8 	.word	0x08008de8

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b090      	sub	sp, #64	; 0x40
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	2228      	movs	r2, #40	; 0x28
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f005 fedc 	bl	8007658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	2302      	movs	r3, #2
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0318 	add.w	r3, r7, #24
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 f95b 	bl	8003b90 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018e0:	f000 f9aa 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fbc8 	bl	8004094 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800190a:	f000 f995 	bl	8001c38 <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	3740      	adds	r7, #64	; 0x40
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_CAN_Init+0x60>)
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <MX_CAN_Init+0x64>)
 8001920:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_CAN_Init+0x60>)
 8001924:	2210      	movs	r2, #16
 8001926:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_CAN_Init+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_CAN_Init+0x60>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <MX_CAN_Init+0x60>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_CAN_Init+0x60>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <MX_CAN_Init+0x60>)
 8001942:	2200      	movs	r2, #0
 8001944:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_CAN_Init+0x60>)
 8001948:	2200      	movs	r2, #0
 800194a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_CAN_Init+0x60>)
 800194e:	2200      	movs	r2, #0
 8001950:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_CAN_Init+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_CAN_Init+0x60>)
 800195a:	2200      	movs	r2, #0
 800195c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_CAN_Init+0x60>)
 8001960:	2200      	movs	r2, #0
 8001962:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_CAN_Init+0x60>)
 8001966:	f000 fc41 	bl	80021ec <HAL_CAN_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001970:	f000 f962 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000e94 	.word	0x20000e94
 800197c:	40006400 	.word	0x40006400

08001980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_I2C1_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_I2C1_Init+0x50>)
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_I2C1_Init+0x58>)
 800198e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_I2C1_Init+0x50>)
 800199e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019be:	f001 f8af 	bl	8002b20 <HAL_I2C_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c8:	f000 f936 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000ebc 	.word	0x20000ebc
 80019d4:	40005400 	.word	0x40005400
 80019d8:	00061a80 	.word	0x00061a80

080019dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_TIM1_Init+0x9c>)
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <MX_TIM1_Init+0xa0>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a00:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a0e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a28:	f002 fccc 	bl	80043c4 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f000 f901 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4619      	mov	r1, r3
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a44:	f002 fe76 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a4e:	f000 f8f3 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_TIM1_Init+0x9c>)
 8001a60:	f003 f860 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a6a:	f000 f8e5 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000f5c 	.word	0x20000f5c
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART1_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001ab8:	f003 f8b2 	bl	8004c20 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f8b9 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000f10 	.word	0x20000f10
 8001ad0:	40013800 	.word	0x40013800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <MX_GPIO_Init+0x144>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	21f0      	movs	r1, #240	; 0xf0
 8001b4c:	4833      	ldr	r0, [pc, #204]	; (8001c1c <MX_GPIO_Init+0x148>)
 8001b4e:	f000 ffce 	bl	8002aee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f241 0130 	movw	r1, #4144	; 0x1030
 8001b58:	4831      	ldr	r0, [pc, #196]	; (8001c20 <MX_GPIO_Init+0x14c>)
 8001b5a:	f000 ffc8 	bl	8002aee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f640 4107 	movw	r1, #3079	; 0xc07
 8001b64:	482f      	ldr	r0, [pc, #188]	; (8001c24 <MX_GPIO_Init+0x150>)
 8001b66:	f000 ffc2 	bl	8002aee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8001b6a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8001b6e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4828      	ldr	r0, [pc, #160]	; (8001c20 <MX_GPIO_Init+0x14c>)
 8001b80:	f000 fd3e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8001b84:	f248 130f 	movw	r3, #33039	; 0x810f
 8001b88:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4619      	mov	r1, r3
 8001b98:	4820      	ldr	r0, [pc, #128]	; (8001c1c <MX_GPIO_Init+0x148>)
 8001b9a:	f000 fd31 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8001b9e:	23f0      	movs	r3, #240	; 0xf0
 8001ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <MX_GPIO_Init+0x148>)
 8001bb6:	f000 fd23 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8001bba:	f241 0330 	movw	r3, #4144	; 0x1030
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4813      	ldr	r0, [pc, #76]	; (8001c20 <MX_GPIO_Init+0x14c>)
 8001bd4:	f000 fd14 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8001bd8:	f640 4307 	movw	r3, #3079	; 0xc07
 8001bdc:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <MX_GPIO_Init+0x150>)
 8001bf2:	f000 fd05 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8001bf6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <MX_GPIO_Init+0x150>)
 8001c0c:	f000 fcf8 	bl	8002600 <HAL_GPIO_Init>

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40010c00 	.word	0x40010c00

08001c28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f003 f9e7 	bl	8005004 <osDelay>
 8001c36:	e7fb      	b.n	8001c30 <StartDefaultTask+0x8>

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_MspInit+0x68>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_MspInit+0x68>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6193      	str	r3, [r2, #24]
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_MspInit+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_MspInit+0x68>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_MspInit+0x68>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_MspInit+0x68>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	f06f 0001 	mvn.w	r0, #1
 8001c82:	f000 fc86 	bl	8002592 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_MspInit+0x6c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_MspInit+0x6c>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_CAN_MspInit+0x8c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d131      	bne.n	8001d38 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_CAN_MspInit+0x90>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <HAL_CAN_MspInit+0x94>)
 8001d1a:	f000 fc71 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_CAN_MspInit+0x94>)
 8001d34:	f000 fc64 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40006400 	.word	0x40006400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_I2C_MspInit+0x70>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d123      	bne.n	8001db4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d84:	23c0      	movs	r3, #192	; 0xc0
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001d98:	f000 fc32 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da6:	61d3      	str	r3, [r2, #28]
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_I2C_MspDeInit+0x38>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10d      	bne.n	8001df6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_I2C_MspDeInit+0x3c>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_I2C_MspDeInit+0x3c>)
 8001de0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001de4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001de6:	2140      	movs	r1, #64	; 0x40
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <HAL_I2C_MspDeInit+0x40>)
 8001dea:	f000 fd9d 	bl	8002928 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_I2C_MspDeInit+0x40>)
 8001df2:	f000 fd99 	bl	8002928 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010c00 	.word	0x40010c00

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_TIM_Base_MspInit+0x44>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d113      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	2019      	movs	r0, #25
 8001e3c:	f000 fba9 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e40:	2019      	movs	r0, #25
 8001e42:	f000 fbc2 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_UART_MspInit+0x8c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d131      	bne.n	8001edc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_UART_MspInit+0x90>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_UART_MspInit+0x94>)
 8001ebe:	f000 fb9f 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_MspInit+0x94>)
 8001ed8:	f000 fb92 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010800 	.word	0x40010800

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler+0x4>

08001f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1e:	f000 f925 	bl	800216c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f22:	f004 fafb 	bl	800651c <xTaskGetSchedulerState>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f2c:	f004 feac 	bl	8006c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM1_UP_IRQHandler+0x10>)
 8001f3a:	f002 faf3 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000f5c 	.word	0x20000f5c

08001f48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
  }

  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e009      	b.n	8001fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf1      	blt.n	8001f94 <_write+0x12>
  }
  return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_close>:

int _close(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_isatty>:

int _isatty(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f005 fb78 	bl	8007740 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000c000 	.word	0x2000c000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000fa8 	.word	0x20000fa8
 8002084:	20001e48 	.word	0x20001e48

08002088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ac:	4c0a      	ldr	r4, [pc, #40]	; (80020d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ba:	f7ff ffe5 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f005 fb45 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c2:	f7fe ff9b 	bl	8000ffc <main>
  bx lr
 80020c6:	4770      	bx	lr
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000980 	.word	0x20000980
  ldr r2, =_sidata
 80020d0:	08008f60 	.word	0x08008f60
  ldr r2, =_sbss
 80020d4:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 80020d8:	20001e48 	.word	0x20001e48

080020dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_2_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x28>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x28>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fa43 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fda2 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa5b 	bl	80025e6 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 fa23 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000914 	.word	0x20000914
 8002164:	2000091c 	.word	0x2000091c
 8002168:	20000918 	.word	0x20000918

0800216c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x1c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x20>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_IncTick+0x20>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	2000091c 	.word	0x2000091c
 800218c:	20000fac 	.word	0x20000fac

08002190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <HAL_GetTick+0x10>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	20000fac 	.word	0x20000fac

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fff0 	bl	8002190 <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffe0 	bl	8002190 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000091c 	.word	0x2000091c

080021ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0ed      	b.n	80023da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fd52 	bl	8001cb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002220:	f7ff ffb6 	bl	8002190 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002226:	e012      	b.n	800224e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002228:	f7ff ffb2 	bl	8002190 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d90b      	bls.n	800224e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0c5      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0e5      	beq.n	8002228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0202 	bic.w	r2, r2, #2
 800226a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226c:	f7ff ff90 	bl	8002190 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002272:	e012      	b.n	800229a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002274:	f7ff ff8c 	bl	8002190 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b0a      	cmp	r3, #10
 8002280:	d90b      	bls.n	800229a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2205      	movs	r2, #5
 8002292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09f      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e5      	bne.n	8002274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e5b      	ldrb	r3, [r3, #25]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e007      	b.n	80022fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e9b      	ldrb	r3, [r3, #26]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e007      	b.n	8002326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0220 	bic.w	r2, r2, #32
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0210 	bic.w	r2, r2, #16
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0210 	orr.w	r2, r2, #16
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7f1b      	ldrb	r3, [r3, #28]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e007      	b.n	800237a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f5b      	ldrb	r3, [r3, #29]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0204 	orr.w	r2, r2, #4
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	ea42 0103 	orr.w	r1, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800240c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4906      	ldr	r1, [pc, #24]	; (800247c <__NVIC_EnableIRQ+0x34>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff90 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff2d 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff42 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff90 	bl	80024d4 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5f 	bl	8002480 <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff35 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e179      	b.n	8002908 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002614:	2201      	movs	r2, #1
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8168 	bne.w	8002902 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a96      	ldr	r2, [pc, #600]	; (8002890 <HAL_GPIO_Init+0x290>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d05e      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800263c:	4a94      	ldr	r2, [pc, #592]	; (8002890 <HAL_GPIO_Init+0x290>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d875      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002642:	4a94      	ldr	r2, [pc, #592]	; (8002894 <HAL_GPIO_Init+0x294>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d058      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002648:	4a92      	ldr	r2, [pc, #584]	; (8002894 <HAL_GPIO_Init+0x294>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d86f      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800264e:	4a92      	ldr	r2, [pc, #584]	; (8002898 <HAL_GPIO_Init+0x298>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d052      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002654:	4a90      	ldr	r2, [pc, #576]	; (8002898 <HAL_GPIO_Init+0x298>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d869      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800265a:	4a90      	ldr	r2, [pc, #576]	; (800289c <HAL_GPIO_Init+0x29c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04c      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002660:	4a8e      	ldr	r2, [pc, #568]	; (800289c <HAL_GPIO_Init+0x29c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d863      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002666:	4a8e      	ldr	r2, [pc, #568]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d046      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800266c:	4a8c      	ldr	r2, [pc, #560]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d85d      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002672:	2b12      	cmp	r3, #18
 8002674:	d82a      	bhi.n	80026cc <HAL_GPIO_Init+0xcc>
 8002676:	2b12      	cmp	r3, #18
 8002678:	d859      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_GPIO_Init+0x80>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026e7 	.word	0x080026e7
 800268c:	08002729 	.word	0x08002729
 8002690:	0800272f 	.word	0x0800272f
 8002694:	0800272f 	.word	0x0800272f
 8002698:	0800272f 	.word	0x0800272f
 800269c:	0800272f 	.word	0x0800272f
 80026a0:	0800272f 	.word	0x0800272f
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	0800272f 	.word	0x0800272f
 80026ac:	0800272f 	.word	0x0800272f
 80026b0:	0800272f 	.word	0x0800272f
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	0800272f 	.word	0x0800272f
 80026bc:	0800272f 	.word	0x0800272f
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	4a75      	ldr	r2, [pc, #468]	; (80028a4 <HAL_GPIO_Init+0x2a4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026d2:	e02c      	b.n	800272e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e029      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	623b      	str	r3, [r7, #32]
          break;
 80026e4:	e024      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	3308      	adds	r3, #8
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e01f      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	330c      	adds	r3, #12
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e01a      	b.n	8002730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002702:	2304      	movs	r3, #4
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e013      	b.n	8002730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002710:	2308      	movs	r3, #8
 8002712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	611a      	str	r2, [r3, #16]
          break;
 800271a:	e009      	b.n	8002730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800271c:	2308      	movs	r3, #8
 800271e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	615a      	str	r2, [r3, #20]
          break;
 8002726:	e003      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x130>
          break;
 800272e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d801      	bhi.n	800273a <HAL_GPIO_Init+0x13a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <HAL_GPIO_Init+0x13e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d802      	bhi.n	800274c <HAL_GPIO_Init+0x14c>
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x152>
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3b08      	subs	r3, #8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80c1 	beq.w	8002902 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002780:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002798:	4a44      	ldr	r2, [pc, #272]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3c      	ldr	r2, [pc, #240]	; (80028b0 <HAL_GPIO_Init+0x2b0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d01f      	beq.n	8002804 <HAL_GPIO_Init+0x204>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <HAL_GPIO_Init+0x2b4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d019      	beq.n	8002800 <HAL_GPIO_Init+0x200>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_GPIO_Init+0x1fc>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a39      	ldr	r2, [pc, #228]	; (80028bc <HAL_GPIO_Init+0x2bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1f8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a38      	ldr	r2, [pc, #224]	; (80028c0 <HAL_GPIO_Init+0x2c0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1f4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <HAL_GPIO_Init+0x2c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1f0>
 80027ec:	2305      	movs	r3, #5
 80027ee:	e00a      	b.n	8002806 <HAL_GPIO_Init+0x206>
 80027f0:	2306      	movs	r3, #6
 80027f2:	e008      	b.n	8002806 <HAL_GPIO_Init+0x206>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x206>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e004      	b.n	8002806 <HAL_GPIO_Init+0x206>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x206>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_GPIO_Init+0x206>
 8002804:	2300      	movs	r3, #0
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	f002 0203 	and.w	r2, r2, #3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4093      	lsls	r3, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002816:	4925      	ldr	r1, [pc, #148]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4924      	ldr	r1, [pc, #144]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	43db      	mvns	r3, r3
 8002846:	4920      	ldr	r1, [pc, #128]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002848:	4013      	ands	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	491a      	ldr	r1, [pc, #104]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	43db      	mvns	r3, r3
 800286e:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002870:	4013      	ands	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d025      	beq.n	80028cc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4910      	ldr	r1, [pc, #64]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e025      	b.n	80028da <HAL_GPIO_Init+0x2da>
 800288e:	bf00      	nop
 8002890:	10320000 	.word	0x10320000
 8002894:	10310000 	.word	0x10310000
 8002898:	10220000 	.word	0x10220000
 800289c:	10210000 	.word	0x10210000
 80028a0:	10120000 	.word	0x10120000
 80028a4:	10110000 	.word	0x10110000
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40010800 	.word	0x40010800
 80028b4:	40010c00 	.word	0x40010c00
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	40011800 	.word	0x40011800
 80028c4:	40011c00 	.word	0x40011c00
 80028c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4913      	ldr	r1, [pc, #76]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
 80028f2:	e006      	b.n	8002902 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	3301      	adds	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f47f ae7e 	bne.w	8002614 <HAL_GPIO_Init+0x14>
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	372c      	adds	r7, #44	; 0x2c
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002936:	e0a6      	b.n	8002a86 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8099 	beq.w	8002a80 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800294e:	4a54      	ldr	r2, [pc, #336]	; (8002aa0 <HAL_GPIO_DeInit+0x178>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_GPIO_DeInit+0x17c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d01f      	beq.n	80029b8 <HAL_GPIO_DeInit+0x90>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_GPIO_DeInit+0x180>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d019      	beq.n	80029b4 <HAL_GPIO_DeInit+0x8c>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_GPIO_DeInit+0x184>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <HAL_GPIO_DeInit+0x88>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_GPIO_DeInit+0x188>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00d      	beq.n	80029ac <HAL_GPIO_DeInit+0x84>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_GPIO_DeInit+0x18c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d007      	beq.n	80029a8 <HAL_GPIO_DeInit+0x80>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a47      	ldr	r2, [pc, #284]	; (8002ab8 <HAL_GPIO_DeInit+0x190>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_GPIO_DeInit+0x7c>
 80029a0:	2305      	movs	r3, #5
 80029a2:	e00a      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029a4:	2306      	movs	r3, #6
 80029a6:	e008      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e006      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e004      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_GPIO_DeInit+0x92>
 80029b8:	2300      	movs	r3, #0
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	f002 0203 	and.w	r2, r2, #3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4093      	lsls	r3, r2
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d132      	bne.n	8002a30 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_GPIO_DeInit+0x178>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	482d      	ldr	r0, [pc, #180]	; (8002aa0 <HAL_GPIO_DeInit+0x178>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	400a      	ands	r2, r1
 80029f2:	3302      	adds	r3, #2
 80029f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	492e      	ldr	r1, [pc, #184]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	492b      	ldr	r1, [pc, #172]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	4927      	ldr	r1, [pc, #156]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4924      	ldr	r1, [pc, #144]	; (8002abc <HAL_GPIO_DeInit+0x194>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d801      	bhi.n	8002a3a <HAL_GPIO_DeInit+0x112>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_DeInit+0x116>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d802      	bhi.n	8002a4c <HAL_GPIO_DeInit+0x124>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	e002      	b.n	8002a52 <HAL_GPIO_DeInit+0x12a>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3b08      	subs	r3, #8
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	210f      	movs	r1, #15
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	2104      	movs	r1, #4
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3301      	adds	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f af52 	bne.w	8002938 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010800 	.word	0x40010800
 8002aa8:	40010c00 	.word	0x40010c00
 8002aac:	40011000 	.word	0x40011000
 8002ab0:	40011400 	.word	0x40011400
 8002ab4:	40011800 	.word	0x40011800
 8002ab8:	40011c00 	.word	0x40011c00
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e001      	b.n	8002ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
 8002afa:	4613      	mov	r3, r2
 8002afc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002afe:	787b      	ldrb	r3, [r7, #1]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b0a:	e003      	b.n	8002b14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e12b      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff f900 	bl	8001d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b84:	f001 fbd8 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a81      	ldr	r2, [pc, #516]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d807      	bhi.n	8002ba4 <HAL_I2C_Init+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_I2C_Init+0x278>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e006      	b.n	8002bb2 <HAL_I2C_Init+0x92>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a7d      	ldr	r2, [pc, #500]	; (8002d9c <HAL_I2C_Init+0x27c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e7      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	; (8002da0 <HAL_I2C_Init+0x280>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a6a      	ldr	r2, [pc, #424]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d802      	bhi.n	8002bf4 <HAL_I2C_Init+0xd4>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	e009      	b.n	8002c08 <HAL_I2C_Init+0xe8>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a69      	ldr	r2, [pc, #420]	; (8002da4 <HAL_I2C_Init+0x284>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	3301      	adds	r3, #1
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	495c      	ldr	r1, [pc, #368]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d819      	bhi.n	8002c5c <HAL_I2C_Init+0x13c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e59      	subs	r1, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_I2C_Init+0x138>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e59      	subs	r1, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	e051      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e04f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <HAL_I2C_Init+0x168>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_I2C_Init+0x18e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x196>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e022      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <HAL_I2C_Init+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e58      	subs	r0, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6809      	ldr	r1, [r1, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6911      	ldr	r1, [r2, #16]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	000186a0 	.word	0x000186a0
 8002d98:	001e847f 	.word	0x001e847f
 8002d9c:	003d08ff 	.word	0x003d08ff
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e021      	b.n	8002dfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2224      	movs	r2, #36	; 0x24
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fff8 	bl	8001dc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff f9b8 	bl	8002190 <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	f040 80e0 	bne.w	8002ff0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2319      	movs	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	4970      	ldr	r1, [pc, #448]	; (8002ffc <HAL_I2C_Master_Transmit+0x1f4>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fccc 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0d3      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_Master_Transmit+0x50>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0cc      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d007      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a50      	ldr	r2, [pc, #320]	; (8003000 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fb1c 	bl	8003504 <I2C_MasterRequestWrite>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e08d      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eec:	e066      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fd46 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_I2C_Master_Transmit+0x188>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fd36 	bl	8003a06 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01a      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d194      	bne.n	8002eee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000

08003004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	460b      	mov	r3, r1
 8003018:	813b      	strh	r3, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7ff f8b5 	bl	8002190 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 8244 	bne.w	80034be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	4982      	ldr	r1, [pc, #520]	; (8003248 <HAL_I2C_Mem_Read+0x244>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fbc9 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	e237      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x5a>
 800305a:	2302      	movs	r3, #2
 800305c:	e230      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d007      	beq.n	8003084 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2222      	movs	r2, #34	; 0x22
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	; 0x40
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <HAL_I2C_Mem_Read+0x248>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c6:	88f8      	ldrh	r0, [r7, #6]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4603      	mov	r3, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa96 	bl	8003608 <I2C_RequestMemoryRead>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1ec      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e1c0      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11e      	bne.n	800315c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800312e:	b672      	cpsid	i
}
 8003130:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003158:	b662      	cpsie	i
}
 800315a:	e035      	b.n	80031c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	d11e      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003172:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003174:	b672      	cpsid	i
}
 8003176:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800319e:	b662      	cpsie	i
}
 80031a0:	e012      	b.n	80031c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031c8:	e166      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	f200 811f 	bhi.w	8003412 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d123      	bne.n	8003224 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fc51 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e167      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003222:	e139      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b02      	cmp	r3, #2
 800322a:	d152      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2200      	movs	r2, #0
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <HAL_I2C_Mem_Read+0x24c>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 face 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e13c      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
 8003246:	bf00      	nop
 8003248:	00100002 	.word	0x00100002
 800324c:	ffff0000 	.word	0xffff0000
 8003250:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800329a:	b662      	cpsie	i
}
 800329c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e0e2      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	2200      	movs	r2, #0
 80032da:	497b      	ldr	r1, [pc, #492]	; (80034c8 <HAL_I2C_Mem_Read+0x4c4>)
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fa7b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0e9      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003332:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_I2C_Mem_Read+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_I2C_Mem_Read+0x4cc>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a1a      	lsrs	r2, r3, #8
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00da      	lsls	r2, r3, #3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	3b01      	subs	r3, #1
 8003350:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800337a:	b662      	cpsie	i
}
 800337c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e09a      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d1d9      	bne.n	800334c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033da:	b662      	cpsie	i
}
 80033dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003410:	e042      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fb36 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e04c      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d118      	bne.n	8003498 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	f47f ae94 	bne.w	80031ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	00010004 	.word	0x00010004
 80034cc:	20000914 	.word	0x20000914
 80034d0:	14f8b589 	.word	0x14f8b589

080034d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d006      	beq.n	800352e <I2C_MasterRequestWrite+0x2a>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d003      	beq.n	800352e <I2C_MasterRequestWrite+0x2a>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800352c:	d108      	bne.n	8003540 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	2b12      	cmp	r3, #18
 8003546:	d107      	bne.n	8003558 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f937 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d103      	bne.n	8003588 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e035      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003594:	d108      	bne.n	80035a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e01b      	b.n	80035e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	11db      	asrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f063 030f 	orn	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	490e      	ldr	r1, [pc, #56]	; (8003600 <I2C_MasterRequestWrite+0xfc>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f95d 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e010      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <I2C_MasterRequestWrite+0x100>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f94d 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	00010008 	.word	0x00010008
 8003604:	00010002 	.word	0x00010002

08003608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8c2 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d103      	bne.n	8003672 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0aa      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	4952      	ldr	r1, [pc, #328]	; (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f8fa 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e097      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	6a39      	ldr	r1, [r7, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f964 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d107      	bne.n	80036da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e076      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	e021      	b.n	8003734 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	6a39      	ldr	r1, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f93e 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b04      	cmp	r3, #4
 8003714:	d107      	bne.n	8003726 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6a39      	ldr	r1, [r7, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f923 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e035      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2200      	movs	r2, #0
 8003778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f82b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003796:	d103      	bne.n	80037a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e013      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	4906      	ldr	r1, [pc, #24]	; (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f863 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00010002 	.word	0x00010002

080037d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	e025      	b.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d021      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe fccd 	bl	8002190 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d116      	bne.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e023      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10d      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	e00c      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d0b6      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003894:	e051      	b.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d123      	bne.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e046      	b.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d021      	beq.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fe fc4b 	bl	8002190 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e020      	b.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10c      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e00b      	b.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d18d      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003990:	e02d      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f8ce 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02d      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d021      	beq.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe fbf1 	bl	8002190 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d1ca      	bne.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a12:	e02d      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f88d 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02d      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d021      	beq.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2c:	f7fe fbb0 	bl	8002190 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e007      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d1ca      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a94:	e042      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d119      	bne.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e029      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7fe fb5a 	bl	8002190 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d1b5      	bne.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d11b      	bne.n	8003b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e272      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8087 	beq.w	8003cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb0:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d00c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bbc:	4b8f      	ldr	r3, [pc, #572]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d112      	bne.n	8003bee <HAL_RCC_OscConfig+0x5e>
 8003bc8:	4b8c      	ldr	r3, [pc, #560]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d06c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x12c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d168      	bne.n	8003cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e24c      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x76>
 8003bf8:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7f      	ldr	r2, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e02e      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0xbc>
 8003c32:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c4c:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6a      	ldr	r2, [pc, #424]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a67      	ldr	r2, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fa90 	bl	8002190 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fa8c 	bl	8002190 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e200      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe4>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fa7c 	bl	8002190 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fa78 	bl	8002190 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1ec      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x10c>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cd6:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x18c>
 8003ce2:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c0      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4939      	ldr	r1, [pc, #228]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fa31 	bl	8002190 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe fa2d 	bl	8002190 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1a1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4927      	ldr	r1, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fa10 	bl	8002190 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fe fa0c 	bl	8002190 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e180      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03a      	beq.n	8003e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe f9f0 	bl	8002190 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe f9ec 	bl	8002190 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e160      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f000 fad8 	bl	8004388 <RCC_Delay>
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f9d6 	bl	8002190 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de6:	e00f      	b.n	8003e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fe f9d2 	bl	8002190 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d908      	bls.n	8003e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e146      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	42420000 	.word	0x42420000
 8003e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e9      	bne.n	8003de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a6 	beq.w	8003f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e26:	4b8b      	ldr	r3, [pc, #556]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a87      	ldr	r2, [pc, #540]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b82      	ldr	r3, [pc, #520]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7e      	ldr	r2, [pc, #504]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fe f993 	bl	8002190 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe f98f 	bl	8002190 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e103      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x312>
 8003e94:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4a6e      	ldr	r2, [pc, #440]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	e02d      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4a69      	ldr	r2, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6213      	str	r3, [r2, #32]
 8003eb6:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a66      	ldr	r2, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	e01c      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x356>
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a60      	ldr	r2, [pc, #384]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6213      	str	r3, [r2, #32]
 8003ed8:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6213      	str	r3, [r2, #32]
 8003ef2:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fe f943 	bl	8002190 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe f93f 	bl	8002190 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0b1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCC_OscConfig+0x37e>
 8003f30:	e014      	b.n	8003f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fe f92d 	bl	8002190 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fe f929 	bl	8002190 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e09b      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8087 	beq.w	8004086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f78:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d061      	beq.n	8004048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d146      	bne.n	800401a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe f8fd 	bl	8002190 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe f8f9 	bl	8002190 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e06d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a19      	ldr	r1, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe f8cd 	bl	8002190 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe f8c9 	bl	8002190 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x46a>
 8004018:	e035      	b.n	8004086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe f8b6 	bl	8002190 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe f8b2 	bl	8002190 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e026      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x498>
 8004046:	e01e      	b.n	8004086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e019      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x500>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	429a      	cmp	r2, r3
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0d0      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b67      	ldr	r3, [pc, #412]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	4965      	ldr	r1, [pc, #404]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b8      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a58      	ldr	r2, [pc, #352]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494d      	ldr	r1, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d040      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d115      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07f      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e073      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06b      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4936      	ldr	r1, [pc, #216]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004184:	f7fe f804 	bl	8002190 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe f800 	bl	8002190 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e053      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d210      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0207 	bic.w	r2, r3, #7
 80041ca:	4922      	ldr	r1, [pc, #136]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4916      	ldr	r1, [pc, #88]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f821 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	490a      	ldr	r1, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1cc>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1d0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd ff62 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40022000 	.word	0x40022000
 8004258:	40021000 	.word	0x40021000
 800425c:	08008f0c 	.word	0x08008f0c
 8004260:	20000914 	.word	0x20000914
 8004264:	20000918 	.word	0x20000918

08004268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b490      	push	{r4, r7}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <HAL_RCC_GetSysClockFreq+0xac>)
 8004270:	1d3c      	adds	r4, r7, #4
 8004272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004278:	f240 2301 	movw	r3, #513	; 0x201
 800427c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x40>
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x46>
 80042a6:	e02b      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042aa:	623b      	str	r3, [r7, #32]
      break;
 80042ac:	e02b      	b.n	8004306 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	0c9b      	lsrs	r3, r3, #18
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3328      	adds	r3, #40	; 0x28
 80042b8:	443b      	add	r3, r7
 80042ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	0c5b      	lsrs	r3, r3, #17
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	3328      	adds	r3, #40	; 0x28
 80042d6:	443b      	add	r3, r7
 80042d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042e2:	fb03 f202 	mul.w	r2, r3, r2
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	e004      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	623b      	str	r3, [r7, #32]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004302:	623b      	str	r3, [r7, #32]
      break;
 8004304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004306:	6a3b      	ldr	r3, [r7, #32]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3728      	adds	r7, #40	; 0x28
 800430c:	46bd      	mov	sp, r7
 800430e:	bc90      	pop	{r4, r7}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	08008ef4 	.word	0x08008ef4
 8004318:	40021000 	.word	0x40021000
 800431c:	007a1200 	.word	0x007a1200
 8004320:	003d0900 	.word	0x003d0900

08004324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <HAL_RCC_GetHCLKFreq+0x10>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000914 	.word	0x20000914

08004338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800433c:	f7ff fff2 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCC_GetPCLK1Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08008f1c 	.word	0x08008f1c

08004360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004364:	f7ff ffde 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0adb      	lsrs	r3, r3, #11
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	08008f1c 	.word	0x08008f1c

08004388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <RCC_Delay+0x34>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <RCC_Delay+0x38>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a5b      	lsrs	r3, r3, #9
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a4:	bf00      	nop
  }
  while (Delay --);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f9      	bne.n	80043a4 <RCC_Delay+0x1c>
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	20000914 	.word	0x20000914
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e041      	b.n	800445a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fd0e 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 fa7e 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d001      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e044      	b.n	8004506 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_TIM_Base_Start_IT+0xac>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x6c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_TIM_Base_Start_IT+0xb0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x6c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x6c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_Base_Start_IT+0xb4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x6c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_TIM_Base_Start_IT+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x6c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <HAL_TIM_Base_Start_IT+0xbc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d010      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e007      	b.n	8004504 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9b1 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9a4 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9b3 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f987 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f97a 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f989 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f95d 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f950 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f95f 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2208      	movs	r2, #8
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f933 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f926 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f935 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0201 	mvn.w	r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fc9a 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa9d 	bl	8004c0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8f9 	bl	80048f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa68 	bl	8004bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIM_ConfigClockSource+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e0b3      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x180>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d03e      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0xd0>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	f200 8087 	bhi.w	800489c <HAL_TIM_ConfigClockSource+0x168>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	f000 8085 	beq.w	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d87f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d01a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xa2>
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d87b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047a4:	2b60      	cmp	r3, #96	; 0x60
 80047a6:	d050      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x116>
 80047a8:	2b60      	cmp	r3, #96	; 0x60
 80047aa:	d877      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d03c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xf6>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d873      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d058      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x136>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d86f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d064      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x156>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d86b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d060      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x156>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d867      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x168>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x156>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d05a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047d4:	e062      	b.n	800489c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f000 f97e 	bl	8004ae6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e04e      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6899      	ldr	r1, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f000 f967 	bl	8004ae6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004826:	609a      	str	r2, [r3, #8]
      break;
 8004828:	e03b      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	f000 f8de 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2150      	movs	r1, #80	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f935 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004848:	e02b      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	f000 f8fc 	bl	8004a54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2160      	movs	r1, #96	; 0x60
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f925 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004868:	e01b      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f8be 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f915 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 f90c 	bl	8004ab2 <TIM_ITRx_SetConfig>
        break;
 800489a:	e002      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a33      	ldr	r2, [pc, #204]	; (80049e4 <TIM_Base_SetConfig+0xe0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a32      	ldr	r2, [pc, #200]	; (80049e8 <TIM_Base_SetConfig+0xe4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00f      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <TIM_Base_SetConfig+0xe8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <TIM_Base_SetConfig+0xec>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <TIM_Base_SetConfig+0xf0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <TIM_Base_SetConfig+0xe0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <TIM_Base_SetConfig+0x82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_Base_SetConfig+0xe4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_Base_SetConfig+0x82>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0x82>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <TIM_Base_SetConfig+0xe8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0x82>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <TIM_Base_SetConfig+0xec>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0x82>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <TIM_Base_SetConfig+0xf0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <TIM_Base_SetConfig+0xe0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xc8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <TIM_Base_SetConfig+0xe4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00

080049f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 030a 	bic.w	r3, r3, #10
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 0210 	bic.w	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	031b      	lsls	r3, r3, #12
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 0307 	orr.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	609a      	str	r2, [r3, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e050      	b.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10c      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00

08004bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd f906 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8d5 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d130      	bne.n	8004d36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_UART_Transmit_IT+0x26>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e029      	b.n	8004d38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Transmit_IT+0x38>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e022      	b.n	8004d38 <HAL_UART_Transmit_IT+0x7e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	; 0x21
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d11d      	bne.n	8004d98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Receive_IT+0x26>
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e016      	b.n	8004d9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Receive_IT+0x38>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e00f      	b.n	8004d9a <HAL_UART_Receive_IT+0x58>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f807 	bl	8004da2 <UART_Start_Receive_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	e000      	b.n	8004d9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	4613      	mov	r3, r2
 8004dae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2222      	movs	r2, #34	; 0x22
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0220 	orr.w	r2, r2, #32
 8004e06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7ff fa70 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7ff fa58 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	; 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	; 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	; 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f42:	2b84      	cmp	r3, #132	; 0x84
 8004f44:	d005      	beq.n	8004f52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3303      	adds	r3, #3
 8004f50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f62:	f000 fed5 	bl	8005d10 <vTaskStartScheduler>
  
  return osOK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af04      	add	r7, sp, #16
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d020      	beq.n	8004fc0 <osThreadCreate+0x54>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01c      	beq.n	8004fc0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685c      	ldr	r4, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691e      	ldr	r6, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffc9 	bl	8004f30 <makeFreeRtosPriority>
 8004f9e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	9100      	str	r1, [sp, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 fcec 	bl	8005992 <xTaskCreateStatic>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e01c      	b.n	8004ffa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685c      	ldr	r4, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fcc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffab 	bl	8004f30 <makeFreeRtosPriority>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	9200      	str	r2, [sp, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 fd2d 	bl	8005a4a <xTaskCreate>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005004 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <osDelay+0x16>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	e000      	b.n	800501c <osDelay+0x18>
 800501a:	2301      	movs	r3, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fe43 	bl	8005ca8 <vTaskDelay>
  
  return osOK;
 8005022:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d103      	bne.n	80050e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e00c      	b.n	8005102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3308      	adds	r3, #8
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e002      	b.n	80050f6 <vListInsert+0x2e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d2f6      	bcs.n	80050f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6852      	ldr	r2, [r2, #4]
 8005158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d103      	bne.n	800516c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
	...

0800518c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051b6:	f001 fce9 	bl	8006b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	3b01      	subs	r3, #1
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d114      	bne.n	8005236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3310      	adds	r3, #16
 8005218:	4618      	mov	r0, r3
 800521a:	f000 ffbf 	bl	800619c <xTaskRemoveFromEventList>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <xQueueGenericReset+0xcc>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	e009      	b.n	800524a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3310      	adds	r3, #16
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fef6 	bl	800502c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fef1 	bl	800502c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800524a:	f001 fccf 	bl	8006bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800524e:	2301      	movs	r3, #1
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e004      	b.n	800529c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	3348      	adds	r3, #72	; 0x48
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fd35 	bl	8006d10 <pvPortMalloc>
 80052a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	3348      	adds	r3, #72	; 0x48
 80052b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052bc:	79fa      	ldrb	r2, [r7, #7]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f805 	bl	80052d8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052ce:	69bb      	ldr	r3, [r7, #24]
	}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e002      	b.n	80052fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005306:	2101      	movs	r1, #1
 8005308:	69b8      	ldr	r0, [r7, #24]
 800530a:	f7ff ff3f 	bl	800518c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	2100      	movs	r1, #0
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f81d 	bl	800537c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	461a      	mov	r2, r3
 8005360:	6939      	ldr	r1, [r7, #16]
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f7ff ff7a 	bl	800525c <xQueueGenericCreate>
 8005368:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ffd3 	bl	8005316 <prvInitialiseMutex>

		return pxNewQueue;
 8005370:	68fb      	ldr	r3, [r7, #12]
	}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	; 0x38
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericSend+0x32>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <xQueueGenericSend+0x40>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <xQueueGenericSend+0x44>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <xQueueGenericSend+0x46>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xQueueGenericSend+0x60>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d103      	bne.n	80053ea <xQueueGenericSend+0x6e>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <xQueueGenericSend+0x72>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericSend+0x74>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericSend+0x8e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	623b      	str	r3, [r7, #32]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800540a:	f001 f887 	bl	800651c <xTaskGetSchedulerState>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <xQueueGenericSend+0x9e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueGenericSend+0xa2>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueGenericSend+0xa4>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueGenericSend+0xbe>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61fb      	str	r3, [r7, #28]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800543a:	f001 fba7 	bl	8006b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <xQueueGenericSend+0xd4>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d129      	bne.n	80054a4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005456:	f000 f9b2 	bl	80057be <prvCopyDataToQueue>
 800545a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	3324      	adds	r3, #36	; 0x24
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fe97 	bl	800619c <xTaskRemoveFromEventList>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <xQueueGenericSend+0x1f8>)
 8005476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	e00a      	b.n	800549c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800548c:	4b39      	ldr	r3, [pc, #228]	; (8005574 <xQueueGenericSend+0x1f8>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800549c:	f001 fba6 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e063      	b.n	800556c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054aa:	f001 fb9f 	bl	8006bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e05c      	b.n	800556c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fecf 	bl	8006260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c6:	f001 fb91 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ca:	f000 fc81 	bl	8005dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ce:	f001 fb5d 	bl	8006b8c <vPortEnterCritical>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d103      	bne.n	80054e8 <xQueueGenericSend+0x16c>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d103      	bne.n	80054fe <xQueueGenericSend+0x182>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fe:	f001 fb75 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005502:	1d3a      	adds	r2, r7, #4
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 febe 	bl	800628c <xTaskCheckForTimeOut>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d124      	bne.n	8005560 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005518:	f000 fa23 	bl	8005962 <prvIsQueueFull>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d018      	beq.n	8005554 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	3310      	adds	r3, #16
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fe12 	bl	8006154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005532:	f000 f9ae 	bl	8005892 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005536:	f000 fc59 	bl	8005dec <xTaskResumeAll>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	f47f af7c 	bne.w	800543a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <xQueueGenericSend+0x1f8>)
 8005544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	e772      	b.n	800543a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005556:	f000 f99c 	bl	8005892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800555a:	f000 fc47 	bl	8005dec <xTaskResumeAll>
 800555e:	e76c      	b.n	800543a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005562:	f000 f996 	bl	8005892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005566:	f000 fc41 	bl	8005dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800556a:	2300      	movs	r3, #0
		}
	}
}
 800556c:	4618      	mov	r0, r3
 800556e:	3738      	adds	r7, #56	; 0x38
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08e      	sub	sp, #56	; 0x38
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	623b      	str	r3, [r7, #32]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	61fb      	str	r3, [r7, #28]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c8:	f000 ffa8 	bl	800651c <xTaskGetSchedulerState>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <xQueueSemaphoreTake+0x60>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <xQueueSemaphoreTake+0x64>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <xQueueSemaphoreTake+0x66>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61bb      	str	r3, [r7, #24]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055f8:	f001 fac8 	bl	8006b8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d024      	beq.n	8005652 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	1e5a      	subs	r2, r3, #1
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005618:	f001 f94a 	bl	80068b0 <pvTaskIncrementMutexHeldCount>
 800561c:	4602      	mov	r2, r0
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	3310      	adds	r3, #16
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fdb4 	bl	800619c <xTaskRemoveFromEventList>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800563a:	4b54      	ldr	r3, [pc, #336]	; (800578c <xQueueSemaphoreTake+0x214>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800564a:	f001 facf 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 800564e:	2301      	movs	r3, #1
 8005650:	e097      	b.n	8005782 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d111      	bne.n	800567c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005674:	f001 faba 	bl	8006bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005678:	2300      	movs	r3, #0
 800567a:	e082      	b.n	8005782 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005682:	f107 030c 	add.w	r3, r7, #12
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fdea 	bl	8006260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800568c:	2301      	movs	r3, #1
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005690:	f001 faac 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005694:	f000 fb9c 	bl	8005dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005698:	f001 fa78 	bl	8006b8c <vPortEnterCritical>
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d103      	bne.n	80056b2 <xQueueSemaphoreTake+0x13a>
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b8:	b25b      	sxtb	r3, r3
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d103      	bne.n	80056c8 <xQueueSemaphoreTake+0x150>
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	f001 fa90 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056cc:	463a      	mov	r2, r7
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fdd9 	bl	800628c <xTaskCheckForTimeOut>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d132      	bne.n	8005746 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e2:	f000 f928 	bl	8005936 <prvIsQueueEmpty>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d026      	beq.n	800573a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80056f4:	f001 fa4a 	bl	8006b8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 ff2b 	bl	8006558 <xTaskPriorityInherit>
 8005702:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005704:	f001 fa72 	bl	8006bec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	3324      	adds	r3, #36	; 0x24
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fd1f 	bl	8006154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005718:	f000 f8bb 	bl	8005892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800571c:	f000 fb66 	bl	8005dec <xTaskResumeAll>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	f47f af68 	bne.w	80055f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005728:	4b18      	ldr	r3, [pc, #96]	; (800578c <xQueueSemaphoreTake+0x214>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	e75e      	b.n	80055f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800573a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800573c:	f000 f8a9 	bl	8005892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005740:	f000 fb54 	bl	8005dec <xTaskResumeAll>
 8005744:	e758      	b.n	80055f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005748:	f000 f8a3 	bl	8005892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800574c:	f000 fb4e 	bl	8005dec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005752:	f000 f8f0 	bl	8005936 <prvIsQueueEmpty>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f43f af4d 	beq.w	80055f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005764:	f001 fa12 	bl	8006b8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800576a:	f000 f811 	bl	8005790 <prvGetDisinheritPriorityAfterTimeout>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fffa 	bl	8006770 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800577c:	f001 fa36 	bl	8006bec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005782:	4618      	mov	r0, r3
 8005784:	3738      	adds	r7, #56	; 0x38
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d006      	beq.n	80057ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1c3 0307 	rsb	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e001      	b.n	80057b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057b2:	68fb      	ldr	r3, [r7, #12]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10d      	bne.n	80057f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d14d      	bne.n	8005880 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 ff3b 	bl	8006664 <xTaskPriorityDisinherit>
 80057ee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e043      	b.n	8005880 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d119      	bne.n	8005832 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6898      	ldr	r0, [r3, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	461a      	mov	r2, r3
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	f001 ffcd 	bl	80077a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d32b      	bcc.n	8005880 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	e026      	b.n	8005880 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68d8      	ldr	r0, [r3, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	461a      	mov	r2, r3
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	f001 ffb3 	bl	80077a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	425b      	negs	r3, r3
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d207      	bcs.n	800586e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	425b      	negs	r3, r3
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d105      	bne.n	8005880 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3b01      	subs	r3, #1
 800587e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800589a:	f001 f977 	bl	8006b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a6:	e011      	b.n	80058cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fc71 	bl	800619c <xTaskRemoveFromEventList>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058c0:	f000 fd46 	bl	8006350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dce9      	bgt.n	80058a8 <prvUnlockQueue+0x16>
 80058d4:	e000      	b.n	80058d8 <prvUnlockQueue+0x46>
					break;
 80058d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058e0:	f001 f984 	bl	8006bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058e4:	f001 f952 	bl	8006b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f0:	e011      	b.n	8005916 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3310      	adds	r3, #16
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fc4c 	bl	800619c <xTaskRemoveFromEventList>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800590a:	f000 fd21 	bl	8006350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	3b01      	subs	r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dce9      	bgt.n	80058f2 <prvUnlockQueue+0x60>
 800591e:	e000      	b.n	8005922 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005920:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800592a:	f001 f95f 	bl	8006bec <vPortExitCritical>
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800593e:	f001 f925 	bl	8006b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e001      	b.n	8005954 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005954:	f001 f94a 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005958:	68fb      	ldr	r3, [r7, #12]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800596a:	f001 f90f 	bl	8006b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	429a      	cmp	r2, r3
 8005978:	d102      	bne.n	8005980 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800597a:	2301      	movs	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e001      	b.n	8005984 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005984:	f001 f932 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005988:	68fb      	ldr	r3, [r7, #12]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005992:	b580      	push	{r7, lr}
 8005994:	b08e      	sub	sp, #56	; 0x38
 8005996:	af04      	add	r7, sp, #16
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <xTaskCreateStatic+0x2a>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	623b      	str	r3, [r7, #32]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d8:	2354      	movs	r3, #84	; 0x54
 80059da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b54      	cmp	r3, #84	; 0x54
 80059e0:	d00a      	beq.n	80059f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	61bb      	str	r3, [r7, #24]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01e      	beq.n	8005a3c <xTaskCreateStatic+0xaa>
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a16:	2300      	movs	r3, #0
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f850 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a36:	f000 f8cd 	bl	8005bd4 <prvAddNewTaskToReadyList>
 8005a3a:	e001      	b.n	8005a40 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a40:	697b      	ldr	r3, [r7, #20]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08c      	sub	sp, #48	; 0x30
 8005a4e:	af04      	add	r7, sp, #16
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f956 	bl	8006d10 <pvPortMalloc>
 8005a64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a6c:	2054      	movs	r0, #84	; 0x54
 8005a6e:	f001 f94f 	bl	8006d10 <pvPortMalloc>
 8005a72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a80:	e005      	b.n	8005a8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a82:	6978      	ldr	r0, [r7, #20]
 8005a84:	f001 fa08 	bl	8006e98 <vPortFree>
 8005a88:	e001      	b.n	8005a8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d017      	beq.n	8005ac4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a9c:	88fa      	ldrh	r2, [r7, #6]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f80e 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab8:	69f8      	ldr	r0, [r7, #28]
 8005aba:	f000 f88b 	bl	8005bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e002      	b.n	8005aca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aca:	69bb      	ldr	r3, [r7, #24]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005aec:	3b01      	subs	r3, #1
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	617b      	str	r3, [r7, #20]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e012      	b.n	8005b48 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	7819      	ldrb	r1, [r3, #0]
 8005b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3334      	adds	r3, #52	; 0x34
 8005b32:	460a      	mov	r2, r1
 8005b34:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b0f      	cmp	r3, #15
 8005b4c:	d9e9      	bls.n	8005b22 <prvInitialiseNewTask+0x4e>
 8005b4e:	e000      	b.n	8005b52 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005b50:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d901      	bls.n	8005b64 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b60:	2306      	movs	r3, #6
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fa75 	bl	800506a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3318      	adds	r3, #24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fa70 	bl	800506a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f1c3 0207 	rsb	r2, r3, #7
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f000 fef6 	bl	80069a4 <pxPortInitialiseStack>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bdc:	f000 ffd6 	bl	8006b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be0:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bea:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bf2:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bf8:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d110      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c00:	f000 fbca 	bl	8006398 <prvInitialiseTaskLists>
 8005c04:	e00d      	b.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c06:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <prvAddNewTaskToReadyList+0xc0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c0e:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d802      	bhi.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005c2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	2201      	movs	r2, #1
 8005c32:	409a      	lsls	r2, r3
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <prvAddNewTaskToReadyList+0xcc>)
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7ff fa14 	bl	8005082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c5a:	f000 ffc7 	bl	8006bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <prvAddNewTaskToReadyList+0xc0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d207      	bcs.n	8005c84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <prvAddNewTaskToReadyList+0xd0>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	200010b0 	.word	0x200010b0
 8005c90:	20000fb0 	.word	0x20000fb0
 8005c94:	200010bc 	.word	0x200010bc
 8005c98:	200010cc 	.word	0x200010cc
 8005c9c:	200010b8 	.word	0x200010b8
 8005ca0:	20000fb4 	.word	0x20000fb4
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d017      	beq.n	8005cea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cba:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <vTaskDelay+0x60>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <vTaskDelay+0x30>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60bb      	str	r3, [r7, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005cd8:	f000 f87a 	bl	8005dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cdc:	2100      	movs	r1, #0
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fdfa 	bl	80068d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ce4:	f000 f882 	bl	8005dec <xTaskResumeAll>
 8005ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <vTaskDelay+0x64>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200010d8 	.word	0x200010d8
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d1e:	463a      	mov	r2, r7
 8005d20:	1d39      	adds	r1, r7, #4
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fa fa8a 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	2300      	movs	r3, #0
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	460a      	mov	r2, r1
 8005d3e:	491e      	ldr	r1, [pc, #120]	; (8005db8 <vTaskStartScheduler+0xa8>)
 8005d40:	481e      	ldr	r0, [pc, #120]	; (8005dbc <vTaskStartScheduler+0xac>)
 8005d42:	f7ff fe26 	bl	8005992 <xTaskCreateStatic>
 8005d46:	4603      	mov	r3, r0
 8005d48:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <vTaskStartScheduler+0xb0>)
 8005d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <vTaskStartScheduler+0xb0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e001      	b.n	8005d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d116      	bne.n	8005d92 <vTaskStartScheduler+0x82>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	613b      	str	r3, [r7, #16]
}
 8005d76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d78:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <vTaskStartScheduler+0xb4>)
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <vTaskStartScheduler+0xb8>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d86:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <vTaskStartScheduler+0xbc>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d8c:	f000 fe8c 	bl	8006aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d90:	e00e      	b.n	8005db0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d10a      	bne.n	8005db0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <vTaskStartScheduler+0x9e>
}
 8005db0:	bf00      	nop
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	08008f04 	.word	0x08008f04
 8005dbc:	08006369 	.word	0x08006369
 8005dc0:	200010d4 	.word	0x200010d4
 8005dc4:	200010d0 	.word	0x200010d0
 8005dc8:	200010bc 	.word	0x200010bc
 8005dcc:	200010b4 	.word	0x200010b4

08005dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <vTaskSuspendAll+0x18>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <vTaskSuspendAll+0x18>)
 8005ddc:	6013      	str	r3, [r2, #0]
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	200010d8 	.word	0x200010d8

08005dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dfa:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <xTaskResumeAll+0x114>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e18:	f000 feb8 	bl	8006b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e1c:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d161      	bne.n	8005ef2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e2e:	4b35      	ldr	r3, [pc, #212]	; (8005f04 <xTaskResumeAll+0x118>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d05d      	beq.n	8005ef2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e36:	e02e      	b.n	8005e96 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e38:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <xTaskResumeAll+0x11c>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3318      	adds	r3, #24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff f977 	bl	8005138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff f972 	bl	8005138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	2201      	movs	r2, #1
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <xTaskResumeAll+0x120>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <xTaskResumeAll+0x120>)
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4a27      	ldr	r2, [pc, #156]	; (8005f10 <xTaskResumeAll+0x124>)
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f7ff f900 	bl	8005082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <xTaskResumeAll+0x128>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <xTaskResumeAll+0x11c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1cc      	bne.n	8005e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ea4:	f000 fb16 	bl	80064d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <xTaskResumeAll+0x130>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005eb4:	f000 f836 	bl	8005f24 <xTaskIncrementTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f1      	bne.n	8005eb4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xTaskResumeAll+0x130>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <xTaskResumeAll+0x134>)
 8005ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ef2:	f000 fe7b 	bl	8006bec <vPortExitCritical>

	return xAlreadyYielded;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200010d8 	.word	0x200010d8
 8005f04:	200010b0 	.word	0x200010b0
 8005f08:	20001070 	.word	0x20001070
 8005f0c:	200010b8 	.word	0x200010b8
 8005f10:	20000fb4 	.word	0x20000fb4
 8005f14:	20000fb0 	.word	0x20000fb0
 8005f18:	200010c4 	.word	0x200010c4
 8005f1c:	200010c0 	.word	0x200010c0
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2e:	4b51      	ldr	r3, [pc, #324]	; (8006074 <xTaskIncrementTick+0x150>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 808d 	bne.w	8006052 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f38:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <xTaskIncrementTick+0x154>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f40:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <xTaskIncrementTick+0x154>)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d120      	bne.n	8005f8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f4c:	4b4b      	ldr	r3, [pc, #300]	; (800607c <xTaskIncrementTick+0x158>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <xTaskIncrementTick+0x48>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	603b      	str	r3, [r7, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xTaskIncrementTick+0x46>
 8005f6c:	4b43      	ldr	r3, [pc, #268]	; (800607c <xTaskIncrementTick+0x158>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	4b43      	ldr	r3, [pc, #268]	; (8006080 <xTaskIncrementTick+0x15c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a41      	ldr	r2, [pc, #260]	; (800607c <xTaskIncrementTick+0x158>)
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4a41      	ldr	r2, [pc, #260]	; (8006080 <xTaskIncrementTick+0x15c>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b40      	ldr	r3, [pc, #256]	; (8006084 <xTaskIncrementTick+0x160>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	4a3f      	ldr	r2, [pc, #252]	; (8006084 <xTaskIncrementTick+0x160>)
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	f000 faa3 	bl	80064d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <xTaskIncrementTick+0x164>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d34d      	bcc.n	8006034 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f98:	4b38      	ldr	r3, [pc, #224]	; (800607c <xTaskIncrementTick+0x158>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <xTaskIncrementTick+0x82>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <xTaskIncrementTick+0x84>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fac:	4b36      	ldr	r3, [pc, #216]	; (8006088 <xTaskIncrementTick+0x164>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	601a      	str	r2, [r3, #0]
					break;
 8005fb4:	e03e      	b.n	8006034 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fb6:	4b31      	ldr	r3, [pc, #196]	; (800607c <xTaskIncrementTick+0x158>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d203      	bcs.n	8005fd6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fce:	4a2e      	ldr	r2, [pc, #184]	; (8006088 <xTaskIncrementTick+0x164>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6013      	str	r3, [r2, #0]
						break;
 8005fd4:	e02e      	b.n	8006034 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff f8ac 	bl	8005138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3318      	adds	r3, #24
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff f8a3 	bl	8005138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <xTaskIncrementTick+0x168>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <xTaskIncrementTick+0x168>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <xTaskIncrementTick+0x16c>)
 8006012:	441a      	add	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7ff f831 	bl	8005082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <xTaskIncrementTick+0x170>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d3b4      	bcc.n	8005f98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006032:	e7b1      	b.n	8005f98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006034:	4b17      	ldr	r3, [pc, #92]	; (8006094 <xTaskIncrementTick+0x170>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	4915      	ldr	r1, [pc, #84]	; (8006090 <xTaskIncrementTick+0x16c>)
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d907      	bls.n	800605c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e004      	b.n	800605c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <xTaskIncrementTick+0x174>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	4a0f      	ldr	r2, [pc, #60]	; (8006098 <xTaskIncrementTick+0x174>)
 800605a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <xTaskIncrementTick+0x178>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006068:	697b      	ldr	r3, [r7, #20]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200010d8 	.word	0x200010d8
 8006078:	200010b4 	.word	0x200010b4
 800607c:	20001068 	.word	0x20001068
 8006080:	2000106c 	.word	0x2000106c
 8006084:	200010c8 	.word	0x200010c8
 8006088:	200010d0 	.word	0x200010d0
 800608c:	200010b8 	.word	0x200010b8
 8006090:	20000fb4 	.word	0x20000fb4
 8006094:	20000fb0 	.word	0x20000fb0
 8006098:	200010c0 	.word	0x200010c0
 800609c:	200010c4 	.word	0x200010c4

080060a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <vTaskSwitchContext+0xa0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ae:	4b25      	ldr	r3, [pc, #148]	; (8006144 <vTaskSwitchContext+0xa4>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060b4:	e03f      	b.n	8006136 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <vTaskSwitchContext+0xa4>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <vTaskSwitchContext+0xa8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	f1c3 031f 	rsb	r3, r3, #31
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	491e      	ldr	r1, [pc, #120]	; (800614c <vTaskSwitchContext+0xac>)
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	607b      	str	r3, [r7, #4]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <vTaskSwitchContext+0x5a>
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4a11      	ldr	r2, [pc, #68]	; (800614c <vTaskSwitchContext+0xac>)
 8006108:	4413      	add	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3308      	adds	r3, #8
 800611e:	429a      	cmp	r2, r3
 8006120:	d104      	bne.n	800612c <vTaskSwitchContext+0x8c>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <vTaskSwitchContext+0xb0>)
 8006134:	6013      	str	r3, [r2, #0]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	200010d8 	.word	0x200010d8
 8006144:	200010c4 	.word	0x200010c4
 8006148:	200010b8 	.word	0x200010b8
 800614c:	20000fb4 	.word	0x20000fb4
 8006150:	20000fb0 	.word	0x20000fb0

08006154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800617a:	4b07      	ldr	r3, [pc, #28]	; (8006198 <vTaskPlaceOnEventList+0x44>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3318      	adds	r3, #24
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fe ffa0 	bl	80050c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006188:	2101      	movs	r1, #1
 800618a:	6838      	ldr	r0, [r7, #0]
 800618c:	f000 fba4 	bl	80068d8 <prvAddCurrentTaskToDelayedList>
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000fb0 	.word	0x20000fb0

0800619c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3318      	adds	r3, #24
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe ffb3 	bl	8005138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <xTaskRemoveFromEventList+0xac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d11c      	bne.n	8006214 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3304      	adds	r3, #4
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe ffaa 	bl	8005138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <xTaskRemoveFromEventList+0xb0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <xTaskRemoveFromEventList+0xb0>)
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <xTaskRemoveFromEventList+0xb4>)
 8006204:	441a      	add	r2, r3
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7fe ff38 	bl	8005082 <vListInsertEnd>
 8006212:	e005      	b.n	8006220 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3318      	adds	r3, #24
 8006218:	4619      	mov	r1, r3
 800621a:	480e      	ldr	r0, [pc, #56]	; (8006254 <xTaskRemoveFromEventList+0xb8>)
 800621c:	f7fe ff31 	bl	8005082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <xTaskRemoveFromEventList+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	429a      	cmp	r2, r3
 800622c:	d905      	bls.n	800623a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <xTaskRemoveFromEventList+0xc0>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e001      	b.n	800623e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800623e:	697b      	ldr	r3, [r7, #20]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	200010d8 	.word	0x200010d8
 800624c:	200010b8 	.word	0x200010b8
 8006250:	20000fb4 	.word	0x20000fb4
 8006254:	20001070 	.word	0x20001070
 8006258:	20000fb0 	.word	0x20000fb0
 800625c:	200010c4 	.word	0x200010c4

08006260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <vTaskInternalSetTimeOutState+0x24>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <vTaskInternalSetTimeOutState+0x28>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	605a      	str	r2, [r3, #4]
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	200010c8 	.word	0x200010c8
 8006288:	200010b4 	.word	0x200010b4

0800628c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	613b      	str	r3, [r7, #16]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062ce:	f000 fc5d 	bl	8006b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062d2:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <xTaskCheckForTimeOut+0xbc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d102      	bne.n	80062f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e023      	b.n	800633a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b15      	ldr	r3, [pc, #84]	; (800634c <xTaskCheckForTimeOut+0xc0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d007      	beq.n	800630e <xTaskCheckForTimeOut+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e015      	b.n	800633a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	429a      	cmp	r2, r3
 8006316:	d20b      	bcs.n	8006330 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ff9b 	bl	8006260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	e004      	b.n	800633a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800633a:	f000 fc57 	bl	8006bec <vPortExitCritical>

	return xReturn;
 800633e:	69fb      	ldr	r3, [r7, #28]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	200010b4 	.word	0x200010b4
 800634c:	200010c8 	.word	0x200010c8

08006350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <vTaskMissedYield+0x14>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
}
 800635a:	bf00      	nop
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	200010c4 	.word	0x200010c4

08006368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006370:	f000 f852 	bl	8006418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <prvIdleTask+0x28>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d9f9      	bls.n	8006370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <prvIdleTask+0x2c>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800638c:	e7f0      	b.n	8006370 <prvIdleTask+0x8>
 800638e:	bf00      	nop
 8006390:	20000fb4 	.word	0x20000fb4
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	e00c      	b.n	80063be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4a12      	ldr	r2, [pc, #72]	; (80063f8 <prvInitialiseTaskLists+0x60>)
 80063b0:	4413      	add	r3, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fe3a 	bl	800502c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3301      	adds	r3, #1
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d9ef      	bls.n	80063a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063c4:	480d      	ldr	r0, [pc, #52]	; (80063fc <prvInitialiseTaskLists+0x64>)
 80063c6:	f7fe fe31 	bl	800502c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063ca:	480d      	ldr	r0, [pc, #52]	; (8006400 <prvInitialiseTaskLists+0x68>)
 80063cc:	f7fe fe2e 	bl	800502c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063d0:	480c      	ldr	r0, [pc, #48]	; (8006404 <prvInitialiseTaskLists+0x6c>)
 80063d2:	f7fe fe2b 	bl	800502c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063d6:	480c      	ldr	r0, [pc, #48]	; (8006408 <prvInitialiseTaskLists+0x70>)
 80063d8:	f7fe fe28 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063dc:	480b      	ldr	r0, [pc, #44]	; (800640c <prvInitialiseTaskLists+0x74>)
 80063de:	f7fe fe25 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <prvInitialiseTaskLists+0x78>)
 80063e4:	4a05      	ldr	r2, [pc, #20]	; (80063fc <prvInitialiseTaskLists+0x64>)
 80063e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvInitialiseTaskLists+0x7c>)
 80063ea:	4a05      	ldr	r2, [pc, #20]	; (8006400 <prvInitialiseTaskLists+0x68>)
 80063ec:	601a      	str	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000fb4 	.word	0x20000fb4
 80063fc:	20001040 	.word	0x20001040
 8006400:	20001054 	.word	0x20001054
 8006404:	20001070 	.word	0x20001070
 8006408:	20001084 	.word	0x20001084
 800640c:	2000109c 	.word	0x2000109c
 8006410:	20001068 	.word	0x20001068
 8006414:	2000106c 	.word	0x2000106c

08006418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800641e:	e019      	b.n	8006454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006420:	f000 fbb4 	bl	8006b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006424:	4b10      	ldr	r3, [pc, #64]	; (8006468 <prvCheckTasksWaitingTermination+0x50>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3304      	adds	r3, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fe81 	bl	8005138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <prvCheckTasksWaitingTermination+0x54>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3b01      	subs	r3, #1
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <prvCheckTasksWaitingTermination+0x54>)
 800643e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <prvCheckTasksWaitingTermination+0x58>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3b01      	subs	r3, #1
 8006446:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <prvCheckTasksWaitingTermination+0x58>)
 8006448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800644a:	f000 fbcf 	bl	8006bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f810 	bl	8006474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <prvCheckTasksWaitingTermination+0x58>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e1      	bne.n	8006420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20001084 	.word	0x20001084
 800646c:	200010b0 	.word	0x200010b0
 8006470:	20001098 	.word	0x20001098

08006474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fd04 	bl	8006e98 <vPortFree>
				vPortFree( pxTCB );
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fd01 	bl	8006e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006496:	e018      	b.n	80064ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d103      	bne.n	80064aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcf8 	bl	8006e98 <vPortFree>
	}
 80064a8:	e00f      	b.n	80064ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d00a      	beq.n	80064ca <prvDeleteTCB+0x56>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <prvDeleteTCB+0x54>
	}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <prvResetNextTaskUnblockTime+0x40>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <prvResetNextTaskUnblockTime+0x14>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <prvResetNextTaskUnblockTime+0x16>
 80064e8:	2300      	movs	r3, #0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <prvResetNextTaskUnblockTime+0x44>)
 80064f0:	f04f 32ff 	mov.w	r2, #4294967295
 80064f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064f6:	e008      	b.n	800650a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <prvResetNextTaskUnblockTime+0x40>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4a04      	ldr	r2, [pc, #16]	; (8006518 <prvResetNextTaskUnblockTime+0x44>)
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	20001068 	.word	0x20001068
 8006518:	200010d0 	.word	0x200010d0

0800651c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <xTaskGetSchedulerState+0x34>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800652a:	2301      	movs	r3, #1
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	e008      	b.n	8006542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <xTaskGetSchedulerState+0x38>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006538:	2302      	movs	r3, #2
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	e001      	b.n	8006542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006542:	687b      	ldr	r3, [r7, #4]
	}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	200010bc 	.word	0x200010bc
 8006554:	200010d8 	.word	0x200010d8

08006558 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d06e      	beq.n	800664c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4b39      	ldr	r3, [pc, #228]	; (8006658 <xTaskPriorityInherit+0x100>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d25e      	bcs.n	800663a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db06      	blt.n	8006592 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006584:	4b34      	ldr	r3, [pc, #208]	; (8006658 <xTaskPriorityInherit+0x100>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	f1c3 0207 	rsb	r2, r3, #7
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6959      	ldr	r1, [r3, #20]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4a2e      	ldr	r2, [pc, #184]	; (800665c <xTaskPriorityInherit+0x104>)
 80065a4:	4413      	add	r3, r2
 80065a6:	4299      	cmp	r1, r3
 80065a8:	d101      	bne.n	80065ae <xTaskPriorityInherit+0x56>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xTaskPriorityInherit+0x58>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d03a      	beq.n	800662a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fdbd 	bl	8005138 <uxListRemove>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d115      	bne.n	80065f0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4924      	ldr	r1, [pc, #144]	; (800665c <xTaskPriorityInherit+0x104>)
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <xTaskPriorityInherit+0x98>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	2201      	movs	r2, #1
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43da      	mvns	r2, r3
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <xTaskPriorityInherit+0x108>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4013      	ands	r3, r2
 80065ec:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <xTaskPriorityInherit+0x108>)
 80065ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <xTaskPriorityInherit+0x100>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	2201      	movs	r2, #1
 8006600:	409a      	lsls	r2, r3
 8006602:	4b17      	ldr	r3, [pc, #92]	; (8006660 <xTaskPriorityInherit+0x108>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	4a15      	ldr	r2, [pc, #84]	; (8006660 <xTaskPriorityInherit+0x108>)
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a10      	ldr	r2, [pc, #64]	; (800665c <xTaskPriorityInherit+0x104>)
 800661a:	441a      	add	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f7fe fd2d 	bl	8005082 <vListInsertEnd>
 8006628:	e004      	b.n	8006634 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <xTaskPriorityInherit+0x100>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e008      	b.n	800664c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <xTaskPriorityInherit+0x100>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	429a      	cmp	r2, r3
 8006646:	d201      	bcs.n	800664c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800664c:	68fb      	ldr	r3, [r7, #12]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000fb0 	.word	0x20000fb0
 800665c:	20000fb4 	.word	0x20000fb4
 8006660:	200010b8 	.word	0x200010b8

08006664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d06e      	beq.n	8006758 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800667a:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <xTaskPriorityDisinherit+0x100>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	d00a      	beq.n	800669a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066bc:	1e5a      	subs	r2, r3, #1
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d044      	beq.n	8006758 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d140      	bne.n	8006758 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fd2c 	bl	8005138 <uxListRemove>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	491f      	ldr	r1, [pc, #124]	; (8006768 <xTaskPriorityDisinherit+0x104>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xTaskPriorityDisinherit+0xae>
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2201      	movs	r2, #1
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43da      	mvns	r2, r3
 8006708:	4b18      	ldr	r3, [pc, #96]	; (800676c <xTaskPriorityDisinherit+0x108>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4013      	ands	r3, r2
 800670e:	4a17      	ldr	r2, [pc, #92]	; (800676c <xTaskPriorityDisinherit+0x108>)
 8006710:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f1c3 0207 	rsb	r2, r3, #7
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	2201      	movs	r2, #1
 800672c:	409a      	lsls	r2, r3
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <xTaskPriorityDisinherit+0x108>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	4a0d      	ldr	r2, [pc, #52]	; (800676c <xTaskPriorityDisinherit+0x108>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a08      	ldr	r2, [pc, #32]	; (8006768 <xTaskPriorityDisinherit+0x104>)
 8006746:	441a      	add	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe fc97 	bl	8005082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006758:	697b      	ldr	r3, [r7, #20]
	}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000fb0 	.word	0x20000fb0
 8006768:	20000fb4 	.word	0x20000fb4
 800676c:	200010b8 	.word	0x200010b8

08006770 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8088 	beq.w	800689a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d902      	bls.n	80067b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e002      	b.n	80067be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d068      	beq.n	800689a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d163      	bne.n	800689a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80067d2:	4b34      	ldr	r3, [pc, #208]	; (80068a4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d10a      	bne.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60bb      	str	r3, [r7, #8]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	db04      	blt.n	8006810 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f1c3 0207 	rsb	r2, r3, #7
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	6959      	ldr	r1, [r3, #20]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006820:	4413      	add	r3, r2
 8006822:	4299      	cmp	r1, r3
 8006824:	d101      	bne.n	800682a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800682a:	2300      	movs	r3, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d034      	beq.n	800689a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	3304      	adds	r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fc7f 	bl	8005138 <uxListRemove>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d115      	bne.n	800686c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	4918      	ldr	r1, [pc, #96]	; (80068a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	2201      	movs	r2, #1
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	43da      	mvns	r2, r3
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4013      	ands	r3, r2
 8006868:	4a10      	ldr	r2, [pc, #64]	; (80068ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800686a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	2201      	movs	r2, #1
 8006872:	409a      	lsls	r2, r3
 8006874:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4313      	orrs	r3, r2
 800687a:	4a0c      	ldr	r2, [pc, #48]	; (80068ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800688c:	441a      	add	r2, r3
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe fbf4 	bl	8005082 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800689a:	bf00      	nop
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000fb0 	.word	0x20000fb0
 80068a8:	20000fb4 	.word	0x20000fb4
 80068ac:	200010b8 	.word	0x200010b8

080068b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068c2:	3201      	adds	r2, #1
 80068c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80068c8:	681b      	ldr	r3, [r3, #0]
	}
 80068ca:	4618      	mov	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000fb0 	.word	0x20000fb0

080068d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <prvAddCurrentTaskToDelayedList+0xb0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fc22 	bl	8005138 <uxListRemove>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80068fa:	4b24      	ldr	r3, [pc, #144]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	2201      	movs	r2, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43da      	mvns	r2, r3
 8006908:	4b21      	ldr	r3, [pc, #132]	; (8006990 <prvAddCurrentTaskToDelayedList+0xb8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4013      	ands	r3, r2
 800690e:	4a20      	ldr	r2, [pc, #128]	; (8006990 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006910:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d10a      	bne.n	8006930 <prvAddCurrentTaskToDelayedList+0x58>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006920:	4b1a      	ldr	r3, [pc, #104]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	481a      	ldr	r0, [pc, #104]	; (8006994 <prvAddCurrentTaskToDelayedList+0xbc>)
 800692a:	f7fe fbaa 	bl	8005082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800692e:	e026      	b.n	800697e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	429a      	cmp	r2, r3
 8006946:	d209      	bcs.n	800695c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <prvAddCurrentTaskToDelayedList+0xc0>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b0f      	ldr	r3, [pc, #60]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe fbb7 	bl	80050c8 <vListInsert>
}
 800695a:	e010      	b.n	800697e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <prvAddCurrentTaskToDelayedList+0xc4>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7fe fbad 	bl	80050c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	429a      	cmp	r2, r3
 8006976:	d202      	bcs.n	800697e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6013      	str	r3, [r2, #0]
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200010b4 	.word	0x200010b4
 800698c:	20000fb0 	.word	0x20000fb0
 8006990:	200010b8 	.word	0x200010b8
 8006994:	2000109c 	.word	0x2000109c
 8006998:	2000106c 	.word	0x2000106c
 800699c:	20001068 	.word	0x20001068
 80069a0:	200010d0 	.word	0x200010d0

080069a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3b04      	subs	r3, #4
 80069b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b04      	subs	r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f023 0201 	bic.w	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3b04      	subs	r3, #4
 80069d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <pxPortInitialiseStack+0x54>)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3b14      	subs	r3, #20
 80069de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3b20      	subs	r3, #32
 80069ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr
 80069f8:	080069fd 	.word	0x080069fd

080069fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a06:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <prvTaskExitError+0x54>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d00a      	beq.n	8006a26 <prvTaskExitError+0x2a>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <prvTaskExitError+0x28>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60bb      	str	r3, [r7, #8]
}
 8006a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a3a:	bf00      	nop
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0fc      	beq.n	8006a3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000920 	.word	0x20000920
	...

08006a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <pxCurrentTCBConst2>)
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	6808      	ldr	r0, [r1, #0]
 8006a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a6a:	f380 8809 	msr	PSP, r0
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a7e:	4770      	bx	lr

08006a80 <pxCurrentTCBConst2>:
 8006a80:	20000fb0 	.word	0x20000fb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a88:	4806      	ldr	r0, [pc, #24]	; (8006aa4 <prvPortStartFirstTask+0x1c>)
 8006a8a:	6800      	ldr	r0, [r0, #0]
 8006a8c:	6800      	ldr	r0, [r0, #0]
 8006a8e:	f380 8808 	msr	MSP, r0
 8006a92:	b662      	cpsie	i
 8006a94:	b661      	cpsie	f
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	df00      	svc	0
 8006aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed08 	.word	0xe000ed08

08006aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006aae:	4b32      	ldr	r3, [pc, #200]	; (8006b78 <xPortStartScheduler+0xd0>)
 8006ab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <xPortStartScheduler+0xd4>)
 8006ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006ad8:	2207      	movs	r2, #7
 8006ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006adc:	e009      	b.n	8006af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d0ef      	beq.n	8006ade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1c3 0307 	rsb	r3, r3, #7
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d00a      	beq.n	8006b20 <xPortStartScheduler+0x78>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	60bb      	str	r3, [r7, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006b28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b32:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <xPortStartScheduler+0xd8>)
 8006b34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b3e:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <xPortStartScheduler+0xdc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a10      	ldr	r2, [pc, #64]	; (8006b84 <xPortStartScheduler+0xdc>)
 8006b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <xPortStartScheduler+0xdc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <xPortStartScheduler+0xdc>)
 8006b50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b56:	f000 f8b9 	bl	8006ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <xPortStartScheduler+0xe0>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b60:	f7ff ff92 	bl	8006a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b64:	f7ff fa9c 	bl	80060a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b68:	f7ff ff48 	bl	80069fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000e400 	.word	0xe000e400
 8006b7c:	200010dc 	.word	0x200010dc
 8006b80:	200010e0 	.word	0x200010e0
 8006b84:	e000ed20 	.word	0xe000ed20
 8006b88:	20000920 	.word	0x20000920

08006b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	607b      	str	r3, [r7, #4]
}
 8006ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <vPortEnterCritical+0x58>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3301      	adds	r3, #1
 8006bac:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <vPortEnterCritical+0x58>)
 8006bae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <vPortEnterCritical+0x58>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10f      	bne.n	8006bd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <vPortEnterCritical+0x5c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	603b      	str	r3, [r7, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortEnterCritical+0x4a>
	}
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000920 	.word	0x20000920
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <vPortExitCritical+0x4c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <vPortExitCritical+0x24>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <vPortExitCritical+0x4c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <vPortExitCritical+0x4c>)
 8006c18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <vPortExitCritical+0x4c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <vPortExitCritical+0x42>
 8006c22:	2300      	movs	r3, #0
 8006c24:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	20000920 	.word	0x20000920
 8006c3c:	00000000 	.word	0x00000000

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c50:	6010      	str	r0, [r2, #0]
 8006c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c5a:	f380 8811 	msr	BASEPRI, r0
 8006c5e:	f7ff fa1f 	bl	80060a0 <vTaskSwitchContext>
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f380 8811 	msr	BASEPRI, r0
 8006c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c76:	f380 8809 	msr	PSP, r0
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	4770      	bx	lr

08006c80 <pxCurrentTCBConst>:
 8006c80:	20000fb0 	.word	0x20000fb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ca2:	f7ff f93f 	bl	8005f24 <xTaskIncrementTick>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <xPortSysTickHandler+0x40>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f383 8811 	msr	BASEPRI, r3
}
 8006cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <vPortSetupTimerInterrupt+0x30>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <vPortSetupTimerInterrupt+0x38>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <vPortSetupTimerInterrupt+0x3c>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <vPortSetupTimerInterrupt+0x40>)
 8006cea:	3b01      	subs	r3, #1
 8006cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <vPortSetupTimerInterrupt+0x30>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr
 8006cfc:	e000e010 	.word	0xe000e010
 8006d00:	e000e018 	.word	0xe000e018
 8006d04:	20000914 	.word	0x20000914
 8006d08:	10624dd3 	.word	0x10624dd3
 8006d0c:	e000e014 	.word	0xe000e014

08006d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d1c:	f7ff f858 	bl	8005dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d20:	4b58      	ldr	r3, [pc, #352]	; (8006e84 <pvPortMalloc+0x174>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d28:	f000 f910 	bl	8006f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d2c:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <pvPortMalloc+0x178>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 808e 	bne.w	8006e56 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01d      	beq.n	8006d7c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d40:	2208      	movs	r2, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	3308      	adds	r3, #8
 8006d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <pvPortMalloc+0x6c>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	617b      	str	r3, [r7, #20]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d069      	beq.n	8006e56 <pvPortMalloc+0x146>
 8006d82:	4b42      	ldr	r3, [pc, #264]	; (8006e8c <pvPortMalloc+0x17c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d864      	bhi.n	8006e56 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d8c:	4b40      	ldr	r3, [pc, #256]	; (8006e90 <pvPortMalloc+0x180>)
 8006d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d90:	4b3f      	ldr	r3, [pc, #252]	; (8006e90 <pvPortMalloc+0x180>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d96:	e004      	b.n	8006da2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <pvPortMalloc+0xa4>
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f1      	bne.n	8006d98 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <pvPortMalloc+0x174>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d04b      	beq.n	8006e56 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	4413      	add	r3, r2
 8006dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	2308      	movs	r3, #8
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d91f      	bls.n	8006e20 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <pvPortMalloc+0xf8>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	613b      	str	r3, [r7, #16]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e1a:	69b8      	ldr	r0, [r7, #24]
 8006e1c:	f000 f8f8 	bl	8007010 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <pvPortMalloc+0x17c>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <pvPortMalloc+0x17c>)
 8006e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e2e:	4b17      	ldr	r3, [pc, #92]	; (8006e8c <pvPortMalloc+0x17c>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <pvPortMalloc+0x184>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d203      	bcs.n	8006e42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <pvPortMalloc+0x17c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <pvPortMalloc+0x184>)
 8006e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <pvPortMalloc+0x178>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e56:	f7fe ffc9 	bl	8005dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <pvPortMalloc+0x16a>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	60fb      	str	r3, [r7, #12]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <pvPortMalloc+0x168>
	return pvReturn;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3728      	adds	r7, #40	; 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20001cec 	.word	0x20001cec
 8006e88:	20001cf8 	.word	0x20001cf8
 8006e8c:	20001cf0 	.word	0x20001cf0
 8006e90:	20001ce4 	.word	0x20001ce4
 8006e94:	20001cf4 	.word	0x20001cf4

08006e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d048      	beq.n	8006f3c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eaa:	2308      	movs	r3, #8
 8006eac:	425b      	negs	r3, r3
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <vPortFree+0xac>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <vPortFree+0x44>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <vPortFree+0x62>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60bb      	str	r3, [r7, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <vPortFree+0xac>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d019      	beq.n	8006f3c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d115      	bne.n	8006f3c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <vPortFree+0xac>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	401a      	ands	r2, r3
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f20:	f7fe ff56 	bl	8005dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <vPortFree+0xb0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	4a06      	ldr	r2, [pc, #24]	; (8006f48 <vPortFree+0xb0>)
 8006f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f32:	6938      	ldr	r0, [r7, #16]
 8006f34:	f000 f86c 	bl	8007010 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f38:	f7fe ff58 	bl	8005dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f3c:	bf00      	nop
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20001cf8 	.word	0x20001cf8
 8006f48:	20001cf0 	.word	0x20001cf0

08006f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f58:	4b27      	ldr	r3, [pc, #156]	; (8006ff8 <prvHeapInit+0xac>)
 8006f5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3307      	adds	r3, #7
 8006f6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0307 	bic.w	r3, r3, #7
 8006f72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	4a1f      	ldr	r2, [pc, #124]	; (8006ff8 <prvHeapInit+0xac>)
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f84:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <prvHeapInit+0xb0>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <prvHeapInit+0xb0>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4413      	add	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f98:	2208      	movs	r2, #8
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <prvHeapInit+0xb4>)
 8006fac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <prvHeapInit+0xb4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <prvHeapInit+0xb4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <prvHeapInit+0xb4>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <prvHeapInit+0xb8>)
 8006fda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	4a09      	ldr	r2, [pc, #36]	; (8007008 <prvHeapInit+0xbc>)
 8006fe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <prvHeapInit+0xc0>)
 8006fe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fea:	601a      	str	r2, [r3, #0]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	200010e4 	.word	0x200010e4
 8006ffc:	20001ce4 	.word	0x20001ce4
 8007000:	20001cec 	.word	0x20001cec
 8007004:	20001cf4 	.word	0x20001cf4
 8007008:	20001cf0 	.word	0x20001cf0
 800700c:	20001cf8 	.word	0x20001cf8

08007010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007018:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <prvInsertBlockIntoFreeList+0xa8>)
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e002      	b.n	8007024 <prvInsertBlockIntoFreeList+0x14>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d8f7      	bhi.n	800701e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4413      	add	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d108      	bne.n	8007052 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	441a      	add	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d118      	bne.n	8007098 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b14      	ldr	r3, [pc, #80]	; (80070bc <prvInsertBlockIntoFreeList+0xac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d00d      	beq.n	800708e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	441a      	add	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e008      	b.n	80070a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <prvInsertBlockIntoFreeList+0xac>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e003      	b.n	80070a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d002      	beq.n	80070ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	20001ce4 	.word	0x20001ce4
 80070bc:	20001cec 	.word	0x20001cec

080070c0 <malloc>:
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <malloc+0xc>)
 80070c2:	4601      	mov	r1, r0
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	f000 b823 	b.w	8007110 <_malloc_r>
 80070ca:	bf00      	nop
 80070cc:	2000097c 	.word	0x2000097c

080070d0 <sbrk_aligned>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4e0e      	ldr	r6, [pc, #56]	; (800710c <sbrk_aligned+0x3c>)
 80070d4:	460c      	mov	r4, r1
 80070d6:	6831      	ldr	r1, [r6, #0]
 80070d8:	4605      	mov	r5, r0
 80070da:	b911      	cbnz	r1, 80070e2 <sbrk_aligned+0x12>
 80070dc:	f000 fb0e 	bl	80076fc <_sbrk_r>
 80070e0:	6030      	str	r0, [r6, #0]
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 fb09 	bl	80076fc <_sbrk_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	d00a      	beq.n	8007104 <sbrk_aligned+0x34>
 80070ee:	1cc4      	adds	r4, r0, #3
 80070f0:	f024 0403 	bic.w	r4, r4, #3
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d007      	beq.n	8007108 <sbrk_aligned+0x38>
 80070f8:	1a21      	subs	r1, r4, r0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 fafe 	bl	80076fc <_sbrk_r>
 8007100:	3001      	adds	r0, #1
 8007102:	d101      	bne.n	8007108 <sbrk_aligned+0x38>
 8007104:	f04f 34ff 	mov.w	r4, #4294967295
 8007108:	4620      	mov	r0, r4
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	20001d00 	.word	0x20001d00

08007110 <_malloc_r>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	1ccd      	adds	r5, r1, #3
 8007116:	f025 0503 	bic.w	r5, r5, #3
 800711a:	3508      	adds	r5, #8
 800711c:	2d0c      	cmp	r5, #12
 800711e:	bf38      	it	cc
 8007120:	250c      	movcc	r5, #12
 8007122:	2d00      	cmp	r5, #0
 8007124:	4607      	mov	r7, r0
 8007126:	db01      	blt.n	800712c <_malloc_r+0x1c>
 8007128:	42a9      	cmp	r1, r5
 800712a:	d905      	bls.n	8007138 <_malloc_r+0x28>
 800712c:	230c      	movs	r3, #12
 800712e:	2600      	movs	r6, #0
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800720c <_malloc_r+0xfc>
 800713c:	f000 f868 	bl	8007210 <__malloc_lock>
 8007140:	f8d8 3000 	ldr.w	r3, [r8]
 8007144:	461c      	mov	r4, r3
 8007146:	bb5c      	cbnz	r4, 80071a0 <_malloc_r+0x90>
 8007148:	4629      	mov	r1, r5
 800714a:	4638      	mov	r0, r7
 800714c:	f7ff ffc0 	bl	80070d0 <sbrk_aligned>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	4604      	mov	r4, r0
 8007154:	d155      	bne.n	8007202 <_malloc_r+0xf2>
 8007156:	f8d8 4000 	ldr.w	r4, [r8]
 800715a:	4626      	mov	r6, r4
 800715c:	2e00      	cmp	r6, #0
 800715e:	d145      	bne.n	80071ec <_malloc_r+0xdc>
 8007160:	2c00      	cmp	r4, #0
 8007162:	d048      	beq.n	80071f6 <_malloc_r+0xe6>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	4631      	mov	r1, r6
 8007168:	4638      	mov	r0, r7
 800716a:	eb04 0903 	add.w	r9, r4, r3
 800716e:	f000 fac5 	bl	80076fc <_sbrk_r>
 8007172:	4581      	cmp	r9, r0
 8007174:	d13f      	bne.n	80071f6 <_malloc_r+0xe6>
 8007176:	6821      	ldr	r1, [r4, #0]
 8007178:	4638      	mov	r0, r7
 800717a:	1a6d      	subs	r5, r5, r1
 800717c:	4629      	mov	r1, r5
 800717e:	f7ff ffa7 	bl	80070d0 <sbrk_aligned>
 8007182:	3001      	adds	r0, #1
 8007184:	d037      	beq.n	80071f6 <_malloc_r+0xe6>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	442b      	add	r3, r5
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	f8d8 3000 	ldr.w	r3, [r8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d038      	beq.n	8007206 <_malloc_r+0xf6>
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	42a2      	cmp	r2, r4
 8007198:	d12b      	bne.n	80071f2 <_malloc_r+0xe2>
 800719a:	2200      	movs	r2, #0
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	e00f      	b.n	80071c0 <_malloc_r+0xb0>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	1b52      	subs	r2, r2, r5
 80071a4:	d41f      	bmi.n	80071e6 <_malloc_r+0xd6>
 80071a6:	2a0b      	cmp	r2, #11
 80071a8:	d917      	bls.n	80071da <_malloc_r+0xca>
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	bf18      	it	ne
 80071b2:	6059      	strne	r1, [r3, #4]
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	bf08      	it	eq
 80071b8:	f8c8 1000 	streq.w	r1, [r8]
 80071bc:	5162      	str	r2, [r4, r5]
 80071be:	604b      	str	r3, [r1, #4]
 80071c0:	4638      	mov	r0, r7
 80071c2:	f104 060b 	add.w	r6, r4, #11
 80071c6:	f000 f829 	bl	800721c <__malloc_unlock>
 80071ca:	f026 0607 	bic.w	r6, r6, #7
 80071ce:	1d23      	adds	r3, r4, #4
 80071d0:	1af2      	subs	r2, r6, r3
 80071d2:	d0ae      	beq.n	8007132 <_malloc_r+0x22>
 80071d4:	1b9b      	subs	r3, r3, r6
 80071d6:	50a3      	str	r3, [r4, r2]
 80071d8:	e7ab      	b.n	8007132 <_malloc_r+0x22>
 80071da:	42a3      	cmp	r3, r4
 80071dc:	6862      	ldr	r2, [r4, #4]
 80071de:	d1dd      	bne.n	800719c <_malloc_r+0x8c>
 80071e0:	f8c8 2000 	str.w	r2, [r8]
 80071e4:	e7ec      	b.n	80071c0 <_malloc_r+0xb0>
 80071e6:	4623      	mov	r3, r4
 80071e8:	6864      	ldr	r4, [r4, #4]
 80071ea:	e7ac      	b.n	8007146 <_malloc_r+0x36>
 80071ec:	4634      	mov	r4, r6
 80071ee:	6876      	ldr	r6, [r6, #4]
 80071f0:	e7b4      	b.n	800715c <_malloc_r+0x4c>
 80071f2:	4613      	mov	r3, r2
 80071f4:	e7cc      	b.n	8007190 <_malloc_r+0x80>
 80071f6:	230c      	movs	r3, #12
 80071f8:	4638      	mov	r0, r7
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	f000 f80e 	bl	800721c <__malloc_unlock>
 8007200:	e797      	b.n	8007132 <_malloc_r+0x22>
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	e7dc      	b.n	80071c0 <_malloc_r+0xb0>
 8007206:	605b      	str	r3, [r3, #4]
 8007208:	deff      	udf	#255	; 0xff
 800720a:	bf00      	nop
 800720c:	20001cfc 	.word	0x20001cfc

08007210 <__malloc_lock>:
 8007210:	4801      	ldr	r0, [pc, #4]	; (8007218 <__malloc_lock+0x8>)
 8007212:	f000 babf 	b.w	8007794 <__retarget_lock_acquire_recursive>
 8007216:	bf00      	nop
 8007218:	20001e44 	.word	0x20001e44

0800721c <__malloc_unlock>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__malloc_unlock+0x8>)
 800721e:	f000 baba 	b.w	8007796 <__retarget_lock_release_recursive>
 8007222:	bf00      	nop
 8007224:	20001e44 	.word	0x20001e44

08007228 <std>:
 8007228:	2300      	movs	r3, #0
 800722a:	b510      	push	{r4, lr}
 800722c:	4604      	mov	r4, r0
 800722e:	e9c0 3300 	strd	r3, r3, [r0]
 8007232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007236:	6083      	str	r3, [r0, #8]
 8007238:	8181      	strh	r1, [r0, #12]
 800723a:	6643      	str	r3, [r0, #100]	; 0x64
 800723c:	81c2      	strh	r2, [r0, #14]
 800723e:	6183      	str	r3, [r0, #24]
 8007240:	4619      	mov	r1, r3
 8007242:	2208      	movs	r2, #8
 8007244:	305c      	adds	r0, #92	; 0x5c
 8007246:	f000 fa07 	bl	8007658 <memset>
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <std+0x38>)
 800724c:	6224      	str	r4, [r4, #32]
 800724e:	6263      	str	r3, [r4, #36]	; 0x24
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <std+0x3c>)
 8007252:	62a3      	str	r3, [r4, #40]	; 0x28
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <std+0x40>)
 8007256:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <std+0x44>)
 800725a:	6323      	str	r3, [r4, #48]	; 0x30
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop
 8007260:	080074a9 	.word	0x080074a9
 8007264:	080074cb 	.word	0x080074cb
 8007268:	08007503 	.word	0x08007503
 800726c:	08007527 	.word	0x08007527

08007270 <stdio_exit_handler>:
 8007270:	4a02      	ldr	r2, [pc, #8]	; (800727c <stdio_exit_handler+0xc>)
 8007272:	4903      	ldr	r1, [pc, #12]	; (8007280 <stdio_exit_handler+0x10>)
 8007274:	4803      	ldr	r0, [pc, #12]	; (8007284 <stdio_exit_handler+0x14>)
 8007276:	f000 b869 	b.w	800734c <_fwalk_sglue>
 800727a:	bf00      	nop
 800727c:	20000924 	.word	0x20000924
 8007280:	08007f31 	.word	0x08007f31
 8007284:	20000930 	.word	0x20000930

08007288 <cleanup_stdio>:
 8007288:	6841      	ldr	r1, [r0, #4]
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <cleanup_stdio+0x34>)
 800728c:	b510      	push	{r4, lr}
 800728e:	4299      	cmp	r1, r3
 8007290:	4604      	mov	r4, r0
 8007292:	d001      	beq.n	8007298 <cleanup_stdio+0x10>
 8007294:	f000 fe4c 	bl	8007f30 <_fflush_r>
 8007298:	68a1      	ldr	r1, [r4, #8]
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <cleanup_stdio+0x38>)
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <cleanup_stdio+0x1e>
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fe45 	bl	8007f30 <_fflush_r>
 80072a6:	68e1      	ldr	r1, [r4, #12]
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <cleanup_stdio+0x3c>)
 80072aa:	4299      	cmp	r1, r3
 80072ac:	d004      	beq.n	80072b8 <cleanup_stdio+0x30>
 80072ae:	4620      	mov	r0, r4
 80072b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b4:	f000 be3c 	b.w	8007f30 <_fflush_r>
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	20001d04 	.word	0x20001d04
 80072c0:	20001d6c 	.word	0x20001d6c
 80072c4:	20001dd4 	.word	0x20001dd4

080072c8 <global_stdio_init.part.0>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <global_stdio_init.part.0+0x30>)
 80072cc:	4c0b      	ldr	r4, [pc, #44]	; (80072fc <global_stdio_init.part.0+0x34>)
 80072ce:	4a0c      	ldr	r2, [pc, #48]	; (8007300 <global_stdio_init.part.0+0x38>)
 80072d0:	4620      	mov	r0, r4
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2104      	movs	r1, #4
 80072d6:	2200      	movs	r2, #0
 80072d8:	f7ff ffa6 	bl	8007228 <std>
 80072dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072e0:	2201      	movs	r2, #1
 80072e2:	2109      	movs	r1, #9
 80072e4:	f7ff ffa0 	bl	8007228 <std>
 80072e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072ec:	2202      	movs	r2, #2
 80072ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f2:	2112      	movs	r1, #18
 80072f4:	f7ff bf98 	b.w	8007228 <std>
 80072f8:	20001e3c 	.word	0x20001e3c
 80072fc:	20001d04 	.word	0x20001d04
 8007300:	08007271 	.word	0x08007271

08007304 <__sfp_lock_acquire>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sfp_lock_acquire+0x8>)
 8007306:	f000 ba45 	b.w	8007794 <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	20001e45 	.word	0x20001e45

08007310 <__sfp_lock_release>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__sfp_lock_release+0x8>)
 8007312:	f000 ba40 	b.w	8007796 <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	20001e45 	.word	0x20001e45

0800731c <__sinit>:
 800731c:	b510      	push	{r4, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	f7ff fff0 	bl	8007304 <__sfp_lock_acquire>
 8007324:	6a23      	ldr	r3, [r4, #32]
 8007326:	b11b      	cbz	r3, 8007330 <__sinit+0x14>
 8007328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732c:	f7ff bff0 	b.w	8007310 <__sfp_lock_release>
 8007330:	4b04      	ldr	r3, [pc, #16]	; (8007344 <__sinit+0x28>)
 8007332:	6223      	str	r3, [r4, #32]
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <__sinit+0x2c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f5      	bne.n	8007328 <__sinit+0xc>
 800733c:	f7ff ffc4 	bl	80072c8 <global_stdio_init.part.0>
 8007340:	e7f2      	b.n	8007328 <__sinit+0xc>
 8007342:	bf00      	nop
 8007344:	08007289 	.word	0x08007289
 8007348:	20001e3c 	.word	0x20001e3c

0800734c <_fwalk_sglue>:
 800734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	4607      	mov	r7, r0
 8007352:	4688      	mov	r8, r1
 8007354:	4614      	mov	r4, r2
 8007356:	2600      	movs	r6, #0
 8007358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735c:	f1b9 0901 	subs.w	r9, r9, #1
 8007360:	d505      	bpl.n	800736e <_fwalk_sglue+0x22>
 8007362:	6824      	ldr	r4, [r4, #0]
 8007364:	2c00      	cmp	r4, #0
 8007366:	d1f7      	bne.n	8007358 <_fwalk_sglue+0xc>
 8007368:	4630      	mov	r0, r6
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d907      	bls.n	8007384 <_fwalk_sglue+0x38>
 8007374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007378:	3301      	adds	r3, #1
 800737a:	d003      	beq.n	8007384 <_fwalk_sglue+0x38>
 800737c:	4629      	mov	r1, r5
 800737e:	4638      	mov	r0, r7
 8007380:	47c0      	blx	r8
 8007382:	4306      	orrs	r6, r0
 8007384:	3568      	adds	r5, #104	; 0x68
 8007386:	e7e9      	b.n	800735c <_fwalk_sglue+0x10>

08007388 <_puts_r>:
 8007388:	6a03      	ldr	r3, [r0, #32]
 800738a:	b570      	push	{r4, r5, r6, lr}
 800738c:	4605      	mov	r5, r0
 800738e:	460e      	mov	r6, r1
 8007390:	6884      	ldr	r4, [r0, #8]
 8007392:	b90b      	cbnz	r3, 8007398 <_puts_r+0x10>
 8007394:	f7ff ffc2 	bl	800731c <__sinit>
 8007398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800739a:	07db      	lsls	r3, r3, #31
 800739c:	d405      	bmi.n	80073aa <_puts_r+0x22>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	0598      	lsls	r0, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_puts_r+0x22>
 80073a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a6:	f000 f9f5 	bl	8007794 <__retarget_lock_acquire_recursive>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	0719      	lsls	r1, r3, #28
 80073ae:	d513      	bpl.n	80073d8 <_puts_r+0x50>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	b18b      	cbz	r3, 80073d8 <_puts_r+0x50>
 80073b4:	3e01      	subs	r6, #1
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073bc:	3b01      	subs	r3, #1
 80073be:	60a3      	str	r3, [r4, #8]
 80073c0:	b9e9      	cbnz	r1, 80073fe <_puts_r+0x76>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da2e      	bge.n	8007424 <_puts_r+0x9c>
 80073c6:	4622      	mov	r2, r4
 80073c8:	210a      	movs	r1, #10
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f8af 	bl	800752e <__swbuf_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d007      	beq.n	80073e4 <_puts_r+0x5c>
 80073d4:	250a      	movs	r5, #10
 80073d6:	e007      	b.n	80073e8 <_puts_r+0x60>
 80073d8:	4621      	mov	r1, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 f8e4 	bl	80075a8 <__swsetup_r>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d0e7      	beq.n	80073b4 <_puts_r+0x2c>
 80073e4:	f04f 35ff 	mov.w	r5, #4294967295
 80073e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ea:	07da      	lsls	r2, r3, #31
 80073ec:	d405      	bmi.n	80073fa <_puts_r+0x72>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	059b      	lsls	r3, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_puts_r+0x72>
 80073f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f6:	f000 f9ce 	bl	8007796 <__retarget_lock_release_recursive>
 80073fa:	4628      	mov	r0, r5
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da04      	bge.n	800740c <_puts_r+0x84>
 8007402:	69a2      	ldr	r2, [r4, #24]
 8007404:	429a      	cmp	r2, r3
 8007406:	dc06      	bgt.n	8007416 <_puts_r+0x8e>
 8007408:	290a      	cmp	r1, #10
 800740a:	d004      	beq.n	8007416 <_puts_r+0x8e>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	6022      	str	r2, [r4, #0]
 8007412:	7019      	strb	r1, [r3, #0]
 8007414:	e7cf      	b.n	80073b6 <_puts_r+0x2e>
 8007416:	4622      	mov	r2, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f888 	bl	800752e <__swbuf_r>
 800741e:	3001      	adds	r0, #1
 8007420:	d1c9      	bne.n	80073b6 <_puts_r+0x2e>
 8007422:	e7df      	b.n	80073e4 <_puts_r+0x5c>
 8007424:	250a      	movs	r5, #10
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	6022      	str	r2, [r4, #0]
 800742c:	701d      	strb	r5, [r3, #0]
 800742e:	e7db      	b.n	80073e8 <_puts_r+0x60>

08007430 <puts>:
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <puts+0xc>)
 8007432:	4601      	mov	r1, r0
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f7ff bfa7 	b.w	8007388 <_puts_r>
 800743a:	bf00      	nop
 800743c:	2000097c 	.word	0x2000097c

08007440 <sniprintf>:
 8007440:	b40c      	push	{r2, r3}
 8007442:	b530      	push	{r4, r5, lr}
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <sniprintf+0x64>)
 8007446:	1e0c      	subs	r4, r1, #0
 8007448:	681d      	ldr	r5, [r3, #0]
 800744a:	b09d      	sub	sp, #116	; 0x74
 800744c:	da08      	bge.n	8007460 <sniprintf+0x20>
 800744e:	238b      	movs	r3, #139	; 0x8b
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	b01d      	add	sp, #116	; 0x74
 8007458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800745c:	b002      	add	sp, #8
 800745e:	4770      	bx	lr
 8007460:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007464:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007468:	bf0c      	ite	eq
 800746a:	4623      	moveq	r3, r4
 800746c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007478:	9002      	str	r0, [sp, #8]
 800747a:	9006      	str	r0, [sp, #24]
 800747c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007480:	4628      	mov	r0, r5
 8007482:	ab21      	add	r3, sp, #132	; 0x84
 8007484:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007486:	a902      	add	r1, sp, #8
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f000 fa3d 	bl	8007908 <_svfiprintf_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	bfbc      	itt	lt
 8007492:	238b      	movlt	r3, #139	; 0x8b
 8007494:	602b      	strlt	r3, [r5, #0]
 8007496:	2c00      	cmp	r4, #0
 8007498:	d0dd      	beq.n	8007456 <sniprintf+0x16>
 800749a:	2200      	movs	r2, #0
 800749c:	9b02      	ldr	r3, [sp, #8]
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e7d9      	b.n	8007456 <sniprintf+0x16>
 80074a2:	bf00      	nop
 80074a4:	2000097c 	.word	0x2000097c

080074a8 <__sread>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	f000 f912 	bl	80076d8 <_read_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	bfab      	itete	ge
 80074b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074ba:	89a3      	ldrhlt	r3, [r4, #12]
 80074bc:	181b      	addge	r3, r3, r0
 80074be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074c2:	bfac      	ite	ge
 80074c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074c6:	81a3      	strhlt	r3, [r4, #12]
 80074c8:	bd10      	pop	{r4, pc}

080074ca <__swrite>:
 80074ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	461f      	mov	r7, r3
 80074d0:	898b      	ldrh	r3, [r1, #12]
 80074d2:	4605      	mov	r5, r0
 80074d4:	05db      	lsls	r3, r3, #23
 80074d6:	460c      	mov	r4, r1
 80074d8:	4616      	mov	r6, r2
 80074da:	d505      	bpl.n	80074e8 <__swrite+0x1e>
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e4:	f000 f8e6 	bl	80076b4 <_lseek_r>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	4632      	mov	r2, r6
 80074ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	4628      	mov	r0, r5
 80074f4:	463b      	mov	r3, r7
 80074f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fe:	f000 b90d 	b.w	800771c <_write_r>

08007502 <__sseek>:
 8007502:	b510      	push	{r4, lr}
 8007504:	460c      	mov	r4, r1
 8007506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750a:	f000 f8d3 	bl	80076b4 <_lseek_r>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	bf15      	itete	ne
 8007514:	6560      	strne	r0, [r4, #84]	; 0x54
 8007516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800751a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800751e:	81a3      	strheq	r3, [r4, #12]
 8007520:	bf18      	it	ne
 8007522:	81a3      	strhne	r3, [r4, #12]
 8007524:	bd10      	pop	{r4, pc}

08007526 <__sclose>:
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 b8b3 	b.w	8007694 <_close_r>

0800752e <__swbuf_r>:
 800752e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007530:	460e      	mov	r6, r1
 8007532:	4614      	mov	r4, r2
 8007534:	4605      	mov	r5, r0
 8007536:	b118      	cbz	r0, 8007540 <__swbuf_r+0x12>
 8007538:	6a03      	ldr	r3, [r0, #32]
 800753a:	b90b      	cbnz	r3, 8007540 <__swbuf_r+0x12>
 800753c:	f7ff feee 	bl	800731c <__sinit>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	60a3      	str	r3, [r4, #8]
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	071a      	lsls	r2, r3, #28
 8007548:	d525      	bpl.n	8007596 <__swbuf_r+0x68>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	b31b      	cbz	r3, 8007596 <__swbuf_r+0x68>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	b2f6      	uxtb	r6, r6
 8007554:	1a98      	subs	r0, r3, r2
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	4637      	mov	r7, r6
 800755a:	4283      	cmp	r3, r0
 800755c:	dc04      	bgt.n	8007568 <__swbuf_r+0x3a>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f000 fce5 	bl	8007f30 <_fflush_r>
 8007566:	b9e0      	cbnz	r0, 80075a2 <__swbuf_r+0x74>
 8007568:	68a3      	ldr	r3, [r4, #8]
 800756a:	3b01      	subs	r3, #1
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	701e      	strb	r6, [r3, #0]
 8007576:	6962      	ldr	r2, [r4, #20]
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	429a      	cmp	r2, r3
 800757c:	d004      	beq.n	8007588 <__swbuf_r+0x5a>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	07db      	lsls	r3, r3, #31
 8007582:	d506      	bpl.n	8007592 <__swbuf_r+0x64>
 8007584:	2e0a      	cmp	r6, #10
 8007586:	d104      	bne.n	8007592 <__swbuf_r+0x64>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 fcd0 	bl	8007f30 <_fflush_r>
 8007590:	b938      	cbnz	r0, 80075a2 <__swbuf_r+0x74>
 8007592:	4638      	mov	r0, r7
 8007594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 f805 	bl	80075a8 <__swsetup_r>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0d5      	beq.n	800754e <__swbuf_r+0x20>
 80075a2:	f04f 37ff 	mov.w	r7, #4294967295
 80075a6:	e7f4      	b.n	8007592 <__swbuf_r+0x64>

080075a8 <__swsetup_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4b2a      	ldr	r3, [pc, #168]	; (8007654 <__swsetup_r+0xac>)
 80075ac:	4605      	mov	r5, r0
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	460c      	mov	r4, r1
 80075b2:	b118      	cbz	r0, 80075bc <__swsetup_r+0x14>
 80075b4:	6a03      	ldr	r3, [r0, #32]
 80075b6:	b90b      	cbnz	r3, 80075bc <__swsetup_r+0x14>
 80075b8:	f7ff feb0 	bl	800731c <__sinit>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c2:	0718      	lsls	r0, r3, #28
 80075c4:	d422      	bmi.n	800760c <__swsetup_r+0x64>
 80075c6:	06d9      	lsls	r1, r3, #27
 80075c8:	d407      	bmi.n	80075da <__swsetup_r+0x32>
 80075ca:	2309      	movs	r3, #9
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	e034      	b.n	8007644 <__swsetup_r+0x9c>
 80075da:	0758      	lsls	r0, r3, #29
 80075dc:	d512      	bpl.n	8007604 <__swsetup_r+0x5c>
 80075de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075e0:	b141      	cbz	r1, 80075f4 <__swsetup_r+0x4c>
 80075e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e6:	4299      	cmp	r1, r3
 80075e8:	d002      	beq.n	80075f0 <__swsetup_r+0x48>
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f8ea 	bl	80077c4 <_free_r>
 80075f0:	2300      	movs	r3, #0
 80075f2:	6363      	str	r3, [r4, #52]	; 0x34
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	f043 0308 	orr.w	r3, r3, #8
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b94b      	cbnz	r3, 8007624 <__swsetup_r+0x7c>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d003      	beq.n	8007624 <__swsetup_r+0x7c>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fcd3 	bl	8007fca <__smakebuf_r>
 8007624:	89a0      	ldrh	r0, [r4, #12]
 8007626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800762a:	f010 0301 	ands.w	r3, r0, #1
 800762e:	d00a      	beq.n	8007646 <__swsetup_r+0x9e>
 8007630:	2300      	movs	r3, #0
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	6963      	ldr	r3, [r4, #20]
 8007636:	425b      	negs	r3, r3
 8007638:	61a3      	str	r3, [r4, #24]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b943      	cbnz	r3, 8007650 <__swsetup_r+0xa8>
 800763e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007642:	d1c4      	bne.n	80075ce <__swsetup_r+0x26>
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	0781      	lsls	r1, r0, #30
 8007648:	bf58      	it	pl
 800764a:	6963      	ldrpl	r3, [r4, #20]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	e7f4      	b.n	800763a <__swsetup_r+0x92>
 8007650:	2000      	movs	r0, #0
 8007652:	e7f7      	b.n	8007644 <__swsetup_r+0x9c>
 8007654:	2000097c 	.word	0x2000097c

08007658 <memset>:
 8007658:	4603      	mov	r3, r0
 800765a:	4402      	add	r2, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <strstr>:
 8007668:	780a      	ldrb	r2, [r1, #0]
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	b96a      	cbnz	r2, 800768a <strstr+0x22>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	429a      	cmp	r2, r3
 8007672:	d109      	bne.n	8007688 <strstr+0x20>
 8007674:	460c      	mov	r4, r1
 8007676:	4605      	mov	r5, r0
 8007678:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f6      	beq.n	800766e <strstr+0x6>
 8007680:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007684:	429e      	cmp	r6, r3
 8007686:	d0f7      	beq.n	8007678 <strstr+0x10>
 8007688:	3001      	adds	r0, #1
 800768a:	7803      	ldrb	r3, [r0, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ef      	bne.n	8007670 <strstr+0x8>
 8007690:	4618      	mov	r0, r3
 8007692:	e7ec      	b.n	800766e <strstr+0x6>

08007694 <_close_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	2300      	movs	r3, #0
 8007698:	4d05      	ldr	r5, [pc, #20]	; (80076b0 <_close_r+0x1c>)
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa fc8b 	bl	8001fba <_close>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_close_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_close_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20001e40 	.word	0x20001e40

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	2200      	movs	r2, #0
 80076be:	4d05      	ldr	r5, [pc, #20]	; (80076d4 <_lseek_r+0x20>)
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7fa fc9d 	bl	8002002 <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001e40 	.word	0x20001e40

080076d8 <_read_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	2200      	movs	r2, #0
 80076e2:	4d05      	ldr	r5, [pc, #20]	; (80076f8 <_read_r+0x20>)
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7fa fc2e 	bl	8001f48 <_read>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_read_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_read_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20001e40 	.word	0x20001e40

080076fc <_sbrk_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	2300      	movs	r3, #0
 8007700:	4d05      	ldr	r5, [pc, #20]	; (8007718 <_sbrk_r+0x1c>)
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7fa fc88 	bl	800201c <_sbrk>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_sbrk_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_sbrk_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20001e40 	.word	0x20001e40

0800771c <_write_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	2200      	movs	r2, #0
 8007726:	4d05      	ldr	r5, [pc, #20]	; (800773c <_write_r+0x20>)
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7fa fc29 	bl	8001f82 <_write>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_write_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_write_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20001e40 	.word	0x20001e40

08007740 <__errno>:
 8007740:	4b01      	ldr	r3, [pc, #4]	; (8007748 <__errno+0x8>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	2000097c 	.word	0x2000097c

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	2600      	movs	r6, #0
 8007750:	4d0c      	ldr	r5, [pc, #48]	; (8007784 <__libc_init_array+0x38>)
 8007752:	4c0d      	ldr	r4, [pc, #52]	; (8007788 <__libc_init_array+0x3c>)
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	f000 fcf4 	bl	8008148 <_init>
 8007760:	2600      	movs	r6, #0
 8007762:	4d0a      	ldr	r5, [pc, #40]	; (800778c <__libc_init_array+0x40>)
 8007764:	4c0a      	ldr	r4, [pc, #40]	; (8007790 <__libc_init_array+0x44>)
 8007766:	1b64      	subs	r4, r4, r5
 8007768:	10a4      	asrs	r4, r4, #2
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f855 3b04 	ldr.w	r3, [r5], #4
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f855 3b04 	ldr.w	r3, [r5], #4
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	08008f58 	.word	0x08008f58
 8007788:	08008f58 	.word	0x08008f58
 800778c:	08008f58 	.word	0x08008f58
 8007790:	08008f5c 	.word	0x08008f5c

08007794 <__retarget_lock_acquire_recursive>:
 8007794:	4770      	bx	lr

08007796 <__retarget_lock_release_recursive>:
 8007796:	4770      	bx	lr

08007798 <strcpy>:
 8007798:	4603      	mov	r3, r0
 800779a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800779e:	f803 2b01 	strb.w	r2, [r3], #1
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d1f9      	bne.n	800779a <strcpy+0x2>
 80077a6:	4770      	bx	lr

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <_free_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4605      	mov	r5, r0
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d040      	beq.n	800784e <_free_r+0x8a>
 80077cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d0:	1f0c      	subs	r4, r1, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfb8      	it	lt
 80077d6:	18e4      	addlt	r4, r4, r3
 80077d8:	f7ff fd1a 	bl	8007210 <__malloc_lock>
 80077dc:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <_free_r+0x8c>)
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	b933      	cbnz	r3, 80077f0 <_free_r+0x2c>
 80077e2:	6063      	str	r3, [r4, #4]
 80077e4:	6014      	str	r4, [r2, #0]
 80077e6:	4628      	mov	r0, r5
 80077e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ec:	f7ff bd16 	b.w	800721c <__malloc_unlock>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d908      	bls.n	8007806 <_free_r+0x42>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	1821      	adds	r1, r4, r0
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf01      	itttt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	1809      	addeq	r1, r1, r0
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	e7ed      	b.n	80077e2 <_free_r+0x1e>
 8007806:	461a      	mov	r2, r3
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b10b      	cbz	r3, 8007810 <_free_r+0x4c>
 800780c:	42a3      	cmp	r3, r4
 800780e:	d9fa      	bls.n	8007806 <_free_r+0x42>
 8007810:	6811      	ldr	r1, [r2, #0]
 8007812:	1850      	adds	r0, r2, r1
 8007814:	42a0      	cmp	r0, r4
 8007816:	d10b      	bne.n	8007830 <_free_r+0x6c>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	4401      	add	r1, r0
 800781c:	1850      	adds	r0, r2, r1
 800781e:	4283      	cmp	r3, r0
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	d1e0      	bne.n	80077e6 <_free_r+0x22>
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4408      	add	r0, r1
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	e7da      	b.n	80077e6 <_free_r+0x22>
 8007830:	d902      	bls.n	8007838 <_free_r+0x74>
 8007832:	230c      	movs	r3, #12
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	e7d6      	b.n	80077e6 <_free_r+0x22>
 8007838:	6820      	ldr	r0, [r4, #0]
 800783a:	1821      	adds	r1, r4, r0
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1809      	addeq	r1, r1, r0
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	6054      	str	r4, [r2, #4]
 800784c:	e7cb      	b.n	80077e6 <_free_r+0x22>
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20001cfc 	.word	0x20001cfc

08007854 <__ssputs_r>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	461f      	mov	r7, r3
 800785a:	688e      	ldr	r6, [r1, #8]
 800785c:	4682      	mov	sl, r0
 800785e:	42be      	cmp	r6, r7
 8007860:	460c      	mov	r4, r1
 8007862:	4690      	mov	r8, r2
 8007864:	680b      	ldr	r3, [r1, #0]
 8007866:	d82c      	bhi.n	80078c2 <__ssputs_r+0x6e>
 8007868:	898a      	ldrh	r2, [r1, #12]
 800786a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800786e:	d026      	beq.n	80078be <__ssputs_r+0x6a>
 8007870:	6965      	ldr	r5, [r4, #20]
 8007872:	6909      	ldr	r1, [r1, #16]
 8007874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007878:	eba3 0901 	sub.w	r9, r3, r1
 800787c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007880:	1c7b      	adds	r3, r7, #1
 8007882:	444b      	add	r3, r9
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	429d      	cmp	r5, r3
 8007888:	bf38      	it	cc
 800788a:	461d      	movcc	r5, r3
 800788c:	0553      	lsls	r3, r2, #21
 800788e:	d527      	bpl.n	80078e0 <__ssputs_r+0x8c>
 8007890:	4629      	mov	r1, r5
 8007892:	f7ff fc3d 	bl	8007110 <_malloc_r>
 8007896:	4606      	mov	r6, r0
 8007898:	b360      	cbz	r0, 80078f4 <__ssputs_r+0xa0>
 800789a:	464a      	mov	r2, r9
 800789c:	6921      	ldr	r1, [r4, #16]
 800789e:	f7ff ff83 	bl	80077a8 <memcpy>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	6126      	str	r6, [r4, #16]
 80078b0:	444e      	add	r6, r9
 80078b2:	6026      	str	r6, [r4, #0]
 80078b4:	463e      	mov	r6, r7
 80078b6:	6165      	str	r5, [r4, #20]
 80078b8:	eba5 0509 	sub.w	r5, r5, r9
 80078bc:	60a5      	str	r5, [r4, #8]
 80078be:	42be      	cmp	r6, r7
 80078c0:	d900      	bls.n	80078c4 <__ssputs_r+0x70>
 80078c2:	463e      	mov	r6, r7
 80078c4:	4632      	mov	r2, r6
 80078c6:	4641      	mov	r1, r8
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	f000 fbba 	bl	8008042 <memmove>
 80078ce:	2000      	movs	r0, #0
 80078d0:	68a3      	ldr	r3, [r4, #8]
 80078d2:	1b9b      	subs	r3, r3, r6
 80078d4:	60a3      	str	r3, [r4, #8]
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	4433      	add	r3, r6
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e0:	462a      	mov	r2, r5
 80078e2:	f000 fbf9 	bl	80080d8 <_realloc_r>
 80078e6:	4606      	mov	r6, r0
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1e0      	bne.n	80078ae <__ssputs_r+0x5a>
 80078ec:	4650      	mov	r0, sl
 80078ee:	6921      	ldr	r1, [r4, #16]
 80078f0:	f7ff ff68 	bl	80077c4 <_free_r>
 80078f4:	230c      	movs	r3, #12
 80078f6:	f8ca 3000 	str.w	r3, [sl]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e7e9      	b.n	80078dc <__ssputs_r+0x88>

08007908 <_svfiprintf_r>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	4698      	mov	r8, r3
 800790e:	898b      	ldrh	r3, [r1, #12]
 8007910:	4607      	mov	r7, r0
 8007912:	061b      	lsls	r3, r3, #24
 8007914:	460d      	mov	r5, r1
 8007916:	4614      	mov	r4, r2
 8007918:	b09d      	sub	sp, #116	; 0x74
 800791a:	d50e      	bpl.n	800793a <_svfiprintf_r+0x32>
 800791c:	690b      	ldr	r3, [r1, #16]
 800791e:	b963      	cbnz	r3, 800793a <_svfiprintf_r+0x32>
 8007920:	2140      	movs	r1, #64	; 0x40
 8007922:	f7ff fbf5 	bl	8007110 <_malloc_r>
 8007926:	6028      	str	r0, [r5, #0]
 8007928:	6128      	str	r0, [r5, #16]
 800792a:	b920      	cbnz	r0, 8007936 <_svfiprintf_r+0x2e>
 800792c:	230c      	movs	r3, #12
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	e0d0      	b.n	8007ad8 <_svfiprintf_r+0x1d0>
 8007936:	2340      	movs	r3, #64	; 0x40
 8007938:	616b      	str	r3, [r5, #20]
 800793a:	2300      	movs	r3, #0
 800793c:	9309      	str	r3, [sp, #36]	; 0x24
 800793e:	2320      	movs	r3, #32
 8007940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007944:	2330      	movs	r3, #48	; 0x30
 8007946:	f04f 0901 	mov.w	r9, #1
 800794a:	f8cd 800c 	str.w	r8, [sp, #12]
 800794e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007af0 <_svfiprintf_r+0x1e8>
 8007952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007956:	4623      	mov	r3, r4
 8007958:	469a      	mov	sl, r3
 800795a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800795e:	b10a      	cbz	r2, 8007964 <_svfiprintf_r+0x5c>
 8007960:	2a25      	cmp	r2, #37	; 0x25
 8007962:	d1f9      	bne.n	8007958 <_svfiprintf_r+0x50>
 8007964:	ebba 0b04 	subs.w	fp, sl, r4
 8007968:	d00b      	beq.n	8007982 <_svfiprintf_r+0x7a>
 800796a:	465b      	mov	r3, fp
 800796c:	4622      	mov	r2, r4
 800796e:	4629      	mov	r1, r5
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff ff6f 	bl	8007854 <__ssputs_r>
 8007976:	3001      	adds	r0, #1
 8007978:	f000 80a9 	beq.w	8007ace <_svfiprintf_r+0x1c6>
 800797c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800797e:	445a      	add	r2, fp
 8007980:	9209      	str	r2, [sp, #36]	; 0x24
 8007982:	f89a 3000 	ldrb.w	r3, [sl]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80a1 	beq.w	8007ace <_svfiprintf_r+0x1c6>
 800798c:	2300      	movs	r3, #0
 800798e:	f04f 32ff 	mov.w	r2, #4294967295
 8007992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007996:	f10a 0a01 	add.w	sl, sl, #1
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	9307      	str	r3, [sp, #28]
 800799e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079a2:	931a      	str	r3, [sp, #104]	; 0x68
 80079a4:	4654      	mov	r4, sl
 80079a6:	2205      	movs	r2, #5
 80079a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ac:	4850      	ldr	r0, [pc, #320]	; (8007af0 <_svfiprintf_r+0x1e8>)
 80079ae:	f000 fb85 	bl	80080bc <memchr>
 80079b2:	9a04      	ldr	r2, [sp, #16]
 80079b4:	b9d8      	cbnz	r0, 80079ee <_svfiprintf_r+0xe6>
 80079b6:	06d0      	lsls	r0, r2, #27
 80079b8:	bf44      	itt	mi
 80079ba:	2320      	movmi	r3, #32
 80079bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079c0:	0711      	lsls	r1, r2, #28
 80079c2:	bf44      	itt	mi
 80079c4:	232b      	movmi	r3, #43	; 0x2b
 80079c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ca:	f89a 3000 	ldrb.w	r3, [sl]
 80079ce:	2b2a      	cmp	r3, #42	; 0x2a
 80079d0:	d015      	beq.n	80079fe <_svfiprintf_r+0xf6>
 80079d2:	4654      	mov	r4, sl
 80079d4:	2000      	movs	r0, #0
 80079d6:	f04f 0c0a 	mov.w	ip, #10
 80079da:	9a07      	ldr	r2, [sp, #28]
 80079dc:	4621      	mov	r1, r4
 80079de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079e2:	3b30      	subs	r3, #48	; 0x30
 80079e4:	2b09      	cmp	r3, #9
 80079e6:	d94d      	bls.n	8007a84 <_svfiprintf_r+0x17c>
 80079e8:	b1b0      	cbz	r0, 8007a18 <_svfiprintf_r+0x110>
 80079ea:	9207      	str	r2, [sp, #28]
 80079ec:	e014      	b.n	8007a18 <_svfiprintf_r+0x110>
 80079ee:	eba0 0308 	sub.w	r3, r0, r8
 80079f2:	fa09 f303 	lsl.w	r3, r9, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	46a2      	mov	sl, r4
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	e7d2      	b.n	80079a4 <_svfiprintf_r+0x9c>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	1d19      	adds	r1, r3, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	9103      	str	r1, [sp, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfbb      	ittet	lt
 8007a0a:	425b      	neglt	r3, r3
 8007a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a10:	9307      	strge	r3, [sp, #28]
 8007a12:	9307      	strlt	r3, [sp, #28]
 8007a14:	bfb8      	it	lt
 8007a16:	9204      	strlt	r2, [sp, #16]
 8007a18:	7823      	ldrb	r3, [r4, #0]
 8007a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a1c:	d10c      	bne.n	8007a38 <_svfiprintf_r+0x130>
 8007a1e:	7863      	ldrb	r3, [r4, #1]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d134      	bne.n	8007a8e <_svfiprintf_r+0x186>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	3402      	adds	r4, #2
 8007a28:	1d1a      	adds	r2, r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	9203      	str	r2, [sp, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfb8      	it	lt
 8007a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007af4 <_svfiprintf_r+0x1ec>
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	4650      	mov	r0, sl
 8007a40:	7821      	ldrb	r1, [r4, #0]
 8007a42:	f000 fb3b 	bl	80080bc <memchr>
 8007a46:	b138      	cbz	r0, 8007a58 <_svfiprintf_r+0x150>
 8007a48:	2240      	movs	r2, #64	; 0x40
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	eba0 000a 	sub.w	r0, r0, sl
 8007a50:	4082      	lsls	r2, r0
 8007a52:	4313      	orrs	r3, r2
 8007a54:	3401      	adds	r4, #1
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5c:	2206      	movs	r2, #6
 8007a5e:	4826      	ldr	r0, [pc, #152]	; (8007af8 <_svfiprintf_r+0x1f0>)
 8007a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a64:	f000 fb2a 	bl	80080bc <memchr>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d038      	beq.n	8007ade <_svfiprintf_r+0x1d6>
 8007a6c:	4b23      	ldr	r3, [pc, #140]	; (8007afc <_svfiprintf_r+0x1f4>)
 8007a6e:	bb1b      	cbnz	r3, 8007ab8 <_svfiprintf_r+0x1b0>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	3307      	adds	r3, #7
 8007a74:	f023 0307 	bic.w	r3, r3, #7
 8007a78:	3308      	adds	r3, #8
 8007a7a:	9303      	str	r3, [sp, #12]
 8007a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7e:	4433      	add	r3, r6
 8007a80:	9309      	str	r3, [sp, #36]	; 0x24
 8007a82:	e768      	b.n	8007956 <_svfiprintf_r+0x4e>
 8007a84:	460c      	mov	r4, r1
 8007a86:	2001      	movs	r0, #1
 8007a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a8c:	e7a6      	b.n	80079dc <_svfiprintf_r+0xd4>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f04f 0c0a 	mov.w	ip, #10
 8007a94:	4619      	mov	r1, r3
 8007a96:	3401      	adds	r4, #1
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa0:	3a30      	subs	r2, #48	; 0x30
 8007aa2:	2a09      	cmp	r2, #9
 8007aa4:	d903      	bls.n	8007aae <_svfiprintf_r+0x1a6>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0c6      	beq.n	8007a38 <_svfiprintf_r+0x130>
 8007aaa:	9105      	str	r1, [sp, #20]
 8007aac:	e7c4      	b.n	8007a38 <_svfiprintf_r+0x130>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ab6:	e7f0      	b.n	8007a9a <_svfiprintf_r+0x192>
 8007ab8:	ab03      	add	r3, sp, #12
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	462a      	mov	r2, r5
 8007abe:	4638      	mov	r0, r7
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <_svfiprintf_r+0x1f8>)
 8007ac2:	a904      	add	r1, sp, #16
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	1c42      	adds	r2, r0, #1
 8007aca:	4606      	mov	r6, r0
 8007acc:	d1d6      	bne.n	8007a7c <_svfiprintf_r+0x174>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	065b      	lsls	r3, r3, #25
 8007ad2:	f53f af2d 	bmi.w	8007930 <_svfiprintf_r+0x28>
 8007ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad8:	b01d      	add	sp, #116	; 0x74
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	ab03      	add	r3, sp, #12
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <_svfiprintf_r+0x1f8>)
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	f000 f87d 	bl	8007be8 <_printf_i>
 8007aee:	e7eb      	b.n	8007ac8 <_svfiprintf_r+0x1c0>
 8007af0:	08008f24 	.word	0x08008f24
 8007af4:	08008f2a 	.word	0x08008f2a
 8007af8:	08008f2e 	.word	0x08008f2e
 8007afc:	00000000 	.word	0x00000000
 8007b00:	08007855 	.word	0x08007855

08007b04 <_printf_common>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	4616      	mov	r6, r2
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	688a      	ldr	r2, [r1, #8]
 8007b0e:	690b      	ldr	r3, [r1, #16]
 8007b10:	4607      	mov	r7, r0
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bfb8      	it	lt
 8007b16:	4613      	movlt	r3, r2
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b24:	b10a      	cbz	r2, 8007b2a <_printf_common+0x26>
 8007b26:	3301      	adds	r3, #1
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	0699      	lsls	r1, r3, #26
 8007b2e:	bf42      	ittt	mi
 8007b30:	6833      	ldrmi	r3, [r6, #0]
 8007b32:	3302      	addmi	r3, #2
 8007b34:	6033      	strmi	r3, [r6, #0]
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	f015 0506 	ands.w	r5, r5, #6
 8007b3c:	d106      	bne.n	8007b4c <_printf_common+0x48>
 8007b3e:	f104 0a19 	add.w	sl, r4, #25
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	6832      	ldr	r2, [r6, #0]
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc2b      	bgt.n	8007ba4 <_printf_common+0xa0>
 8007b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b50:	1e13      	subs	r3, r2, #0
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	bf18      	it	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	0692      	lsls	r2, r2, #26
 8007b5a:	d430      	bmi.n	8007bbe <_printf_common+0xba>
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d023      	beq.n	8007bb2 <_printf_common+0xae>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	f003 0306 	and.w	r3, r3, #6
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	bf14      	ite	ne
 8007b76:	2500      	movne	r5, #0
 8007b78:	6833      	ldreq	r3, [r6, #0]
 8007b7a:	f04f 0600 	mov.w	r6, #0
 8007b7e:	bf08      	it	eq
 8007b80:	68e5      	ldreq	r5, [r4, #12]
 8007b82:	f104 041a 	add.w	r4, r4, #26
 8007b86:	bf08      	it	eq
 8007b88:	1aed      	subeq	r5, r5, r3
 8007b8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b8e:	bf08      	it	eq
 8007b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfc4      	itt	gt
 8007b98:	1a9b      	subgt	r3, r3, r2
 8007b9a:	18ed      	addgt	r5, r5, r3
 8007b9c:	42b5      	cmp	r5, r6
 8007b9e:	d11a      	bne.n	8007bd6 <_printf_common+0xd2>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e008      	b.n	8007bb6 <_printf_common+0xb2>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c0      	blx	r8
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d103      	bne.n	8007bba <_printf_common+0xb6>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	3501      	adds	r5, #1
 8007bbc:	e7c1      	b.n	8007b42 <_printf_common+0x3e>
 8007bbe:	2030      	movs	r0, #48	; 0x30
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bcc:	4422      	add	r2, r4
 8007bce:	3302      	adds	r3, #2
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd4:	e7c2      	b.n	8007b5c <_printf_common+0x58>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4638      	mov	r0, r7
 8007bde:	47c0      	blx	r8
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0e6      	beq.n	8007bb2 <_printf_common+0xae>
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7d9      	b.n	8007b9c <_printf_common+0x98>

08007be8 <_printf_i>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	7e0f      	ldrb	r7, [r1, #24]
 8007bee:	4691      	mov	r9, r2
 8007bf0:	2f78      	cmp	r7, #120	; 0x78
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	469a      	mov	sl, r3
 8007bf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bfe:	d807      	bhi.n	8007c10 <_printf_i+0x28>
 8007c00:	2f62      	cmp	r7, #98	; 0x62
 8007c02:	d80a      	bhi.n	8007c1a <_printf_i+0x32>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	f000 80d5 	beq.w	8007db4 <_printf_i+0x1cc>
 8007c0a:	2f58      	cmp	r7, #88	; 0x58
 8007c0c:	f000 80c1 	beq.w	8007d92 <_printf_i+0x1aa>
 8007c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c18:	e03a      	b.n	8007c90 <_printf_i+0xa8>
 8007c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c1e:	2b15      	cmp	r3, #21
 8007c20:	d8f6      	bhi.n	8007c10 <_printf_i+0x28>
 8007c22:	a101      	add	r1, pc, #4	; (adr r1, 8007c28 <_printf_i+0x40>)
 8007c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c11 	.word	0x08007c11
 8007c34:	08007c11 	.word	0x08007c11
 8007c38:	08007c11 	.word	0x08007c11
 8007c3c:	08007c11 	.word	0x08007c11
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c11 	.word	0x08007c11
 8007c48:	08007c11 	.word	0x08007c11
 8007c4c:	08007c11 	.word	0x08007c11
 8007c50:	08007c11 	.word	0x08007c11
 8007c54:	08007d9b 	.word	0x08007d9b
 8007c58:	08007cc1 	.word	0x08007cc1
 8007c5c:	08007d55 	.word	0x08007d55
 8007c60:	08007c11 	.word	0x08007c11
 8007c64:	08007c11 	.word	0x08007c11
 8007c68:	08007dbd 	.word	0x08007dbd
 8007c6c:	08007c11 	.word	0x08007c11
 8007c70:	08007cc1 	.word	0x08007cc1
 8007c74:	08007c11 	.word	0x08007c11
 8007c78:	08007c11 	.word	0x08007c11
 8007c7c:	08007d5d 	.word	0x08007d5d
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	602a      	str	r2, [r5, #0]
 8007c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0a0      	b.n	8007dd6 <_printf_i+0x1ee>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	0607      	lsls	r7, r0, #24
 8007c9a:	f103 0104 	add.w	r1, r3, #4
 8007c9e:	6029      	str	r1, [r5, #0]
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_i+0xbe>
 8007ca2:	681e      	ldr	r6, [r3, #0]
 8007ca4:	e003      	b.n	8007cae <_printf_i+0xc6>
 8007ca6:	0646      	lsls	r6, r0, #25
 8007ca8:	d5fb      	bpl.n	8007ca2 <_printf_i+0xba>
 8007caa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	da03      	bge.n	8007cba <_printf_i+0xd2>
 8007cb2:	232d      	movs	r3, #45	; 0x2d
 8007cb4:	4276      	negs	r6, r6
 8007cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cba:	230a      	movs	r3, #10
 8007cbc:	4859      	ldr	r0, [pc, #356]	; (8007e24 <_printf_i+0x23c>)
 8007cbe:	e012      	b.n	8007ce6 <_printf_i+0xfe>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	6820      	ldr	r0, [r4, #0]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	6029      	str	r1, [r5, #0]
 8007cc8:	0605      	lsls	r5, r0, #24
 8007cca:	d501      	bpl.n	8007cd0 <_printf_i+0xe8>
 8007ccc:	681e      	ldr	r6, [r3, #0]
 8007cce:	e002      	b.n	8007cd6 <_printf_i+0xee>
 8007cd0:	0641      	lsls	r1, r0, #25
 8007cd2:	d5fb      	bpl.n	8007ccc <_printf_i+0xe4>
 8007cd4:	881e      	ldrh	r6, [r3, #0]
 8007cd6:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd8:	bf0c      	ite	eq
 8007cda:	2308      	moveq	r3, #8
 8007cdc:	230a      	movne	r3, #10
 8007cde:	4851      	ldr	r0, [pc, #324]	; (8007e24 <_printf_i+0x23c>)
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ce6:	6865      	ldr	r5, [r4, #4]
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	bfa8      	it	ge
 8007cec:	6821      	ldrge	r1, [r4, #0]
 8007cee:	60a5      	str	r5, [r4, #8]
 8007cf0:	bfa4      	itt	ge
 8007cf2:	f021 0104 	bicge.w	r1, r1, #4
 8007cf6:	6021      	strge	r1, [r4, #0]
 8007cf8:	b90e      	cbnz	r6, 8007cfe <_printf_i+0x116>
 8007cfa:	2d00      	cmp	r5, #0
 8007cfc:	d04b      	beq.n	8007d96 <_printf_i+0x1ae>
 8007cfe:	4615      	mov	r5, r2
 8007d00:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d04:	fb03 6711 	mls	r7, r3, r1, r6
 8007d08:	5dc7      	ldrb	r7, [r0, r7]
 8007d0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d0e:	4637      	mov	r7, r6
 8007d10:	42bb      	cmp	r3, r7
 8007d12:	460e      	mov	r6, r1
 8007d14:	d9f4      	bls.n	8007d00 <_printf_i+0x118>
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d10b      	bne.n	8007d32 <_printf_i+0x14a>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	07de      	lsls	r6, r3, #31
 8007d1e:	d508      	bpl.n	8007d32 <_printf_i+0x14a>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	4299      	cmp	r1, r3
 8007d26:	bfde      	ittt	le
 8007d28:	2330      	movle	r3, #48	; 0x30
 8007d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d32:	1b52      	subs	r2, r2, r5
 8007d34:	6122      	str	r2, [r4, #16]
 8007d36:	464b      	mov	r3, r9
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	aa03      	add	r2, sp, #12
 8007d42:	f7ff fedf 	bl	8007b04 <_printf_common>
 8007d46:	3001      	adds	r0, #1
 8007d48:	d14a      	bne.n	8007de0 <_printf_i+0x1f8>
 8007d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4e:	b004      	add	sp, #16
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	f043 0320 	orr.w	r3, r3, #32
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	2778      	movs	r7, #120	; 0x78
 8007d5e:	4832      	ldr	r0, [pc, #200]	; (8007e28 <_printf_i+0x240>)
 8007d60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	6829      	ldr	r1, [r5, #0]
 8007d68:	061f      	lsls	r7, r3, #24
 8007d6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d6e:	d402      	bmi.n	8007d76 <_printf_i+0x18e>
 8007d70:	065f      	lsls	r7, r3, #25
 8007d72:	bf48      	it	mi
 8007d74:	b2b6      	uxthmi	r6, r6
 8007d76:	07df      	lsls	r7, r3, #31
 8007d78:	bf48      	it	mi
 8007d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d7e:	6029      	str	r1, [r5, #0]
 8007d80:	bf48      	it	mi
 8007d82:	6023      	strmi	r3, [r4, #0]
 8007d84:	b91e      	cbnz	r6, 8007d8e <_printf_i+0x1a6>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	f023 0320 	bic.w	r3, r3, #32
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	2310      	movs	r3, #16
 8007d90:	e7a6      	b.n	8007ce0 <_printf_i+0xf8>
 8007d92:	4824      	ldr	r0, [pc, #144]	; (8007e24 <_printf_i+0x23c>)
 8007d94:	e7e4      	b.n	8007d60 <_printf_i+0x178>
 8007d96:	4615      	mov	r5, r2
 8007d98:	e7bd      	b.n	8007d16 <_printf_i+0x12e>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	6826      	ldr	r6, [r4, #0]
 8007d9e:	1d18      	adds	r0, r3, #4
 8007da0:	6961      	ldr	r1, [r4, #20]
 8007da2:	6028      	str	r0, [r5, #0]
 8007da4:	0635      	lsls	r5, r6, #24
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	d501      	bpl.n	8007dae <_printf_i+0x1c6>
 8007daa:	6019      	str	r1, [r3, #0]
 8007dac:	e002      	b.n	8007db4 <_printf_i+0x1cc>
 8007dae:	0670      	lsls	r0, r6, #25
 8007db0:	d5fb      	bpl.n	8007daa <_printf_i+0x1c2>
 8007db2:	8019      	strh	r1, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	4615      	mov	r5, r2
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	e7bc      	b.n	8007d36 <_printf_i+0x14e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	602a      	str	r2, [r5, #0]
 8007dc4:	681d      	ldr	r5, [r3, #0]
 8007dc6:	6862      	ldr	r2, [r4, #4]
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 f977 	bl	80080bc <memchr>
 8007dce:	b108      	cbz	r0, 8007dd4 <_printf_i+0x1ec>
 8007dd0:	1b40      	subs	r0, r0, r5
 8007dd2:	6060      	str	r0, [r4, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dde:	e7aa      	b.n	8007d36 <_printf_i+0x14e>
 8007de0:	462a      	mov	r2, r5
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	47d0      	blx	sl
 8007dea:	3001      	adds	r0, #1
 8007dec:	d0ad      	beq.n	8007d4a <_printf_i+0x162>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	079b      	lsls	r3, r3, #30
 8007df2:	d413      	bmi.n	8007e1c <_printf_i+0x234>
 8007df4:	68e0      	ldr	r0, [r4, #12]
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	bfb8      	it	lt
 8007dfc:	4618      	movlt	r0, r3
 8007dfe:	e7a6      	b.n	8007d4e <_printf_i+0x166>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4632      	mov	r2, r6
 8007e04:	4649      	mov	r1, r9
 8007e06:	4640      	mov	r0, r8
 8007e08:	47d0      	blx	sl
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d09d      	beq.n	8007d4a <_printf_i+0x162>
 8007e0e:	3501      	adds	r5, #1
 8007e10:	68e3      	ldr	r3, [r4, #12]
 8007e12:	9903      	ldr	r1, [sp, #12]
 8007e14:	1a5b      	subs	r3, r3, r1
 8007e16:	42ab      	cmp	r3, r5
 8007e18:	dcf2      	bgt.n	8007e00 <_printf_i+0x218>
 8007e1a:	e7eb      	b.n	8007df4 <_printf_i+0x20c>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	f104 0619 	add.w	r6, r4, #25
 8007e22:	e7f5      	b.n	8007e10 <_printf_i+0x228>
 8007e24:	08008f35 	.word	0x08008f35
 8007e28:	08008f46 	.word	0x08008f46

08007e2c <__sflush_r>:
 8007e2c:	898a      	ldrh	r2, [r1, #12]
 8007e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e30:	4605      	mov	r5, r0
 8007e32:	0710      	lsls	r0, r2, #28
 8007e34:	460c      	mov	r4, r1
 8007e36:	d457      	bmi.n	8007ee8 <__sflush_r+0xbc>
 8007e38:	684b      	ldr	r3, [r1, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dc04      	bgt.n	8007e48 <__sflush_r+0x1c>
 8007e3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc01      	bgt.n	8007e48 <__sflush_r+0x1c>
 8007e44:	2000      	movs	r0, #0
 8007e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d0fa      	beq.n	8007e44 <__sflush_r+0x18>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e54:	682f      	ldr	r7, [r5, #0]
 8007e56:	6a21      	ldr	r1, [r4, #32]
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	d032      	beq.n	8007ec2 <__sflush_r+0x96>
 8007e5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	075a      	lsls	r2, r3, #29
 8007e62:	d505      	bpl.n	8007e70 <__sflush_r+0x44>
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	1ac0      	subs	r0, r0, r3
 8007e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6a:	b10b      	cbz	r3, 8007e70 <__sflush_r+0x44>
 8007e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e6e:	1ac0      	subs	r0, r0, r3
 8007e70:	2300      	movs	r3, #0
 8007e72:	4602      	mov	r2, r0
 8007e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e76:	4628      	mov	r0, r5
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	d106      	bne.n	8007e90 <__sflush_r+0x64>
 8007e82:	6829      	ldr	r1, [r5, #0]
 8007e84:	291d      	cmp	r1, #29
 8007e86:	d82b      	bhi.n	8007ee0 <__sflush_r+0xb4>
 8007e88:	4a28      	ldr	r2, [pc, #160]	; (8007f2c <__sflush_r+0x100>)
 8007e8a:	410a      	asrs	r2, r1
 8007e8c:	07d6      	lsls	r6, r2, #31
 8007e8e:	d427      	bmi.n	8007ee0 <__sflush_r+0xb4>
 8007e90:	2200      	movs	r2, #0
 8007e92:	6062      	str	r2, [r4, #4]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	04d9      	lsls	r1, r3, #19
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	d504      	bpl.n	8007ea6 <__sflush_r+0x7a>
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <__sflush_r+0x78>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b903      	cbnz	r3, 8007ea6 <__sflush_r+0x7a>
 8007ea4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0ca      	beq.n	8007e44 <__sflush_r+0x18>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d002      	beq.n	8007ebc <__sflush_r+0x90>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fc84 	bl	80077c4 <_free_r>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec0:	e7c1      	b.n	8007e46 <__sflush_r+0x1a>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b0      	blx	r6
 8007ec8:	1c41      	adds	r1, r0, #1
 8007eca:	d1c8      	bne.n	8007e5e <__sflush_r+0x32>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0c5      	beq.n	8007e5e <__sflush_r+0x32>
 8007ed2:	2b1d      	cmp	r3, #29
 8007ed4:	d001      	beq.n	8007eda <__sflush_r+0xae>
 8007ed6:	2b16      	cmp	r3, #22
 8007ed8:	d101      	bne.n	8007ede <__sflush_r+0xb2>
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	e7b2      	b.n	8007e44 <__sflush_r+0x18>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e7ae      	b.n	8007e46 <__sflush_r+0x1a>
 8007ee8:	690f      	ldr	r7, [r1, #16]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d0aa      	beq.n	8007e44 <__sflush_r+0x18>
 8007eee:	0793      	lsls	r3, r2, #30
 8007ef0:	bf18      	it	ne
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	bf08      	it	eq
 8007ef8:	694b      	ldreq	r3, [r1, #20]
 8007efa:	1bf6      	subs	r6, r6, r7
 8007efc:	600f      	str	r7, [r1, #0]
 8007efe:	608b      	str	r3, [r1, #8]
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	dd9f      	ble.n	8007e44 <__sflush_r+0x18>
 8007f04:	4633      	mov	r3, r6
 8007f06:	463a      	mov	r2, r7
 8007f08:	4628      	mov	r0, r5
 8007f0a:	6a21      	ldr	r1, [r4, #32]
 8007f0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f10:	47e0      	blx	ip
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc06      	bgt.n	8007f24 <__sflush_r+0xf8>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	e790      	b.n	8007e46 <__sflush_r+0x1a>
 8007f24:	4407      	add	r7, r0
 8007f26:	1a36      	subs	r6, r6, r0
 8007f28:	e7ea      	b.n	8007f00 <__sflush_r+0xd4>
 8007f2a:	bf00      	nop
 8007f2c:	dfbffffe 	.word	0xdfbffffe

08007f30 <_fflush_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	690b      	ldr	r3, [r1, #16]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b913      	cbnz	r3, 8007f40 <_fflush_r+0x10>
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	b118      	cbz	r0, 8007f4a <_fflush_r+0x1a>
 8007f42:	6a03      	ldr	r3, [r0, #32]
 8007f44:	b90b      	cbnz	r3, 8007f4a <_fflush_r+0x1a>
 8007f46:	f7ff f9e9 	bl	800731c <__sinit>
 8007f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f3      	beq.n	8007f3a <_fflush_r+0xa>
 8007f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f54:	07d0      	lsls	r0, r2, #31
 8007f56:	d404      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f58:	0599      	lsls	r1, r3, #22
 8007f5a:	d402      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f5e:	f7ff fc19 	bl	8007794 <__retarget_lock_acquire_recursive>
 8007f62:	4628      	mov	r0, r5
 8007f64:	4621      	mov	r1, r4
 8007f66:	f7ff ff61 	bl	8007e2c <__sflush_r>
 8007f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	07da      	lsls	r2, r3, #31
 8007f70:	d4e4      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	059b      	lsls	r3, r3, #22
 8007f76:	d4e1      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7a:	f7ff fc0c 	bl	8007796 <__retarget_lock_release_recursive>
 8007f7e:	e7dd      	b.n	8007f3c <_fflush_r+0xc>

08007f80 <__swhatbuf_r>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	460c      	mov	r4, r1
 8007f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f88:	4615      	mov	r5, r2
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	461e      	mov	r6, r3
 8007f8e:	b096      	sub	sp, #88	; 0x58
 8007f90:	da0c      	bge.n	8007fac <__swhatbuf_r+0x2c>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	2100      	movs	r1, #0
 8007f96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f9a:	bf0c      	ite	eq
 8007f9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fa0:	2340      	movne	r3, #64	; 0x40
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	6031      	str	r1, [r6, #0]
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	b016      	add	sp, #88	; 0x58
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	466a      	mov	r2, sp
 8007fae:	f000 f863 	bl	8008078 <_fstat_r>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	dbed      	blt.n	8007f92 <__swhatbuf_r+0x12>
 8007fb6:	9901      	ldr	r1, [sp, #4]
 8007fb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fc0:	4259      	negs	r1, r3
 8007fc2:	4159      	adcs	r1, r3
 8007fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc8:	e7eb      	b.n	8007fa2 <__swhatbuf_r+0x22>

08007fca <__smakebuf_r>:
 8007fca:	898b      	ldrh	r3, [r1, #12]
 8007fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fce:	079d      	lsls	r5, r3, #30
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	d507      	bpl.n	8007fe6 <__smakebuf_r+0x1c>
 8007fd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6163      	str	r3, [r4, #20]
 8007fe2:	b002      	add	sp, #8
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	466a      	mov	r2, sp
 8007fe8:	ab01      	add	r3, sp, #4
 8007fea:	f7ff ffc9 	bl	8007f80 <__swhatbuf_r>
 8007fee:	9900      	ldr	r1, [sp, #0]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff f88c 	bl	8007110 <_malloc_r>
 8007ff8:	b948      	cbnz	r0, 800800e <__smakebuf_r+0x44>
 8007ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffe:	059a      	lsls	r2, r3, #22
 8008000:	d4ef      	bmi.n	8007fe2 <__smakebuf_r+0x18>
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	f043 0302 	orr.w	r3, r3, #2
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	e7e3      	b.n	8007fd6 <__smakebuf_r+0xc>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	6020      	str	r0, [r4, #0]
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	6120      	str	r0, [r4, #16]
 800801c:	6163      	str	r3, [r4, #20]
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	b15b      	cbz	r3, 800803a <__smakebuf_r+0x70>
 8008022:	4630      	mov	r0, r6
 8008024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008028:	f000 f838 	bl	800809c <_isatty_r>
 800802c:	b128      	cbz	r0, 800803a <__smakebuf_r+0x70>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	f043 0301 	orr.w	r3, r3, #1
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	431d      	orrs	r5, r3
 800803e:	81a5      	strh	r5, [r4, #12]
 8008040:	e7cf      	b.n	8007fe2 <__smakebuf_r+0x18>

08008042 <memmove>:
 8008042:	4288      	cmp	r0, r1
 8008044:	b510      	push	{r4, lr}
 8008046:	eb01 0402 	add.w	r4, r1, r2
 800804a:	d902      	bls.n	8008052 <memmove+0x10>
 800804c:	4284      	cmp	r4, r0
 800804e:	4623      	mov	r3, r4
 8008050:	d807      	bhi.n	8008062 <memmove+0x20>
 8008052:	1e43      	subs	r3, r0, #1
 8008054:	42a1      	cmp	r1, r4
 8008056:	d008      	beq.n	800806a <memmove+0x28>
 8008058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008060:	e7f8      	b.n	8008054 <memmove+0x12>
 8008062:	4601      	mov	r1, r0
 8008064:	4402      	add	r2, r0
 8008066:	428a      	cmp	r2, r1
 8008068:	d100      	bne.n	800806c <memmove+0x2a>
 800806a:	bd10      	pop	{r4, pc}
 800806c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008070:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008074:	e7f7      	b.n	8008066 <memmove+0x24>
	...

08008078 <_fstat_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_fstat_r+0x20>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f7f9 ffa3 	bl	8001fd0 <_fstat>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d102      	bne.n	8008094 <_fstat_r+0x1c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	b103      	cbz	r3, 8008094 <_fstat_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	20001e40 	.word	0x20001e40

0800809c <_isatty_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2300      	movs	r3, #0
 80080a0:	4d05      	ldr	r5, [pc, #20]	; (80080b8 <_isatty_r+0x1c>)
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f9 ffa1 	bl	8001fee <_isatty>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_isatty_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_isatty_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20001e40 	.word	0x20001e40

080080bc <memchr>:
 80080bc:	4603      	mov	r3, r0
 80080be:	b510      	push	{r4, lr}
 80080c0:	b2c9      	uxtb	r1, r1
 80080c2:	4402      	add	r2, r0
 80080c4:	4293      	cmp	r3, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	d101      	bne.n	80080ce <memchr+0x12>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e003      	b.n	80080d6 <memchr+0x1a>
 80080ce:	7804      	ldrb	r4, [r0, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	428c      	cmp	r4, r1
 80080d4:	d1f6      	bne.n	80080c4 <memchr+0x8>
 80080d6:	bd10      	pop	{r4, pc}

080080d8 <_realloc_r>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4680      	mov	r8, r0
 80080de:	4614      	mov	r4, r2
 80080e0:	460e      	mov	r6, r1
 80080e2:	b921      	cbnz	r1, 80080ee <_realloc_r+0x16>
 80080e4:	4611      	mov	r1, r2
 80080e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ea:	f7ff b811 	b.w	8007110 <_malloc_r>
 80080ee:	b92a      	cbnz	r2, 80080fc <_realloc_r+0x24>
 80080f0:	f7ff fb68 	bl	80077c4 <_free_r>
 80080f4:	4625      	mov	r5, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	f000 f81b 	bl	8008136 <_malloc_usable_size_r>
 8008100:	4284      	cmp	r4, r0
 8008102:	4607      	mov	r7, r0
 8008104:	d802      	bhi.n	800810c <_realloc_r+0x34>
 8008106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800810a:	d812      	bhi.n	8008132 <_realloc_r+0x5a>
 800810c:	4621      	mov	r1, r4
 800810e:	4640      	mov	r0, r8
 8008110:	f7fe fffe 	bl	8007110 <_malloc_r>
 8008114:	4605      	mov	r5, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	d0ed      	beq.n	80080f6 <_realloc_r+0x1e>
 800811a:	42bc      	cmp	r4, r7
 800811c:	4622      	mov	r2, r4
 800811e:	4631      	mov	r1, r6
 8008120:	bf28      	it	cs
 8008122:	463a      	movcs	r2, r7
 8008124:	f7ff fb40 	bl	80077a8 <memcpy>
 8008128:	4631      	mov	r1, r6
 800812a:	4640      	mov	r0, r8
 800812c:	f7ff fb4a 	bl	80077c4 <_free_r>
 8008130:	e7e1      	b.n	80080f6 <_realloc_r+0x1e>
 8008132:	4635      	mov	r5, r6
 8008134:	e7df      	b.n	80080f6 <_realloc_r+0x1e>

08008136 <_malloc_usable_size_r>:
 8008136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813a:	1f18      	subs	r0, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfbc      	itt	lt
 8008140:	580b      	ldrlt	r3, [r1, r0]
 8008142:	18c0      	addlt	r0, r0, r3
 8008144:	4770      	bx	lr
	...

08008148 <_init>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr

08008154 <_fini>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr
