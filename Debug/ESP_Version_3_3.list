
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b64  08007b64  00020974  2**0
                  CONTENTS
  4 .ARM          00000000  08007b64  08007b64  00020974  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b64  08007b64  00020974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000974  20000000  08007b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  20000974  080084e0  00020974  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  080084e0  00021dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177c2  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003377  00000000  00000000  000381a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001119  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4e2  00000000  00000000  0003dbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3d5  00000000  00000000  0005a0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7a8f  00000000  00000000  00075498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060ac  00000000  00000000  0011cf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00122fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000974 	.word	0x20000974
 800020c:	00000000 	.word	0x00000000
 8000210:	08006ca4 	.word	0x08006ca4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000978 	.word	0x20000978
 800022c:	08006ca4 	.word	0x08006ca4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <ESP_Init>:
	for (int i=0; i<len; i++) buf[i] = '\0';
}


void ESP_Init (char *SSID, char *PASSWD)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800024a:	f000 f855 	bl	80002f8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800024e:	4823      	ldr	r0, [pc, #140]	; (80002dc <ESP_Init+0x9c>)
 8000250:	f000 f8f4 	bl	800043c <Uart_sendstring>
	HAL_Delay(1000);
 8000254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000258:	f002 f850 	bl	80022fc <HAL_Delay>

	Uart_flush();
 800025c:	f000 f872 	bl	8000344 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000260:	481f      	ldr	r0, [pc, #124]	; (80002e0 <ESP_Init+0xa0>)
 8000262:	f000 f8eb 	bl	800043c <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000266:	bf00      	nop
 8000268:	481e      	ldr	r0, [pc, #120]	; (80002e4 <ESP_Init+0xa4>)
 800026a:	f000 f917 	bl	800049c <Wait_for>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0f9      	beq.n	8000268 <ESP_Init+0x28>

	Uart_flush();
 8000274:	f000 f866 	bl	8000344 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000278:	481b      	ldr	r0, [pc, #108]	; (80002e8 <ESP_Init+0xa8>)
 800027a:	f000 f8df 	bl	800043c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800027e:	bf00      	nop
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <ESP_Init+0xa4>)
 8000282:	f000 f90b 	bl	800049c <Wait_for>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f9      	beq.n	8000280 <ESP_Init+0x40>

	Uart_flush();
 800028c:	f000 f85a 	bl	8000344 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000290:	f107 0008 	add.w	r0, r7, #8
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4914      	ldr	r1, [pc, #80]	; (80002ec <ESP_Init+0xac>)
 800029a:	f006 f8f5 	bl	8006488 <siprintf>
	Uart_sendstring(data);
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f8ca 	bl	800043c <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 80002a8:	bf00      	nop
 80002aa:	4811      	ldr	r0, [pc, #68]	; (80002f0 <ESP_Init+0xb0>)
 80002ac:	f000 f8f6 	bl	800049c <Wait_for>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ESP_Init+0x6a>

	Uart_flush();
 80002b6:	f000 f845 	bl	8000344 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80002ba:	480e      	ldr	r0, [pc, #56]	; (80002f4 <ESP_Init+0xb4>)
 80002bc:	f000 f8be 	bl	800043c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80002c0:	bf00      	nop
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <ESP_Init+0xa4>)
 80002c4:	f000 f8ea 	bl	800049c <Wait_for>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <ESP_Init+0x82>

	Uart_flush();
 80002ce:	f000 f839 	bl	8000344 <Uart_flush>

}
 80002d2:	bf00      	nop
 80002d4:	3758      	adds	r7, #88	; 0x58
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	08006cbc 	.word	0x08006cbc
 80002e0:	08006cc8 	.word	0x08006cc8
 80002e4:	08006cd0 	.word	0x08006cd0
 80002e8:	08006cd8 	.word	0x08006cd8
 80002ec:	08006ce8 	.word	0x08006ce8
 80002f0:	08006d00 	.word	0x08006d00
 80002f4:	08006d0c 	.word	0x08006d0c

080002f8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <Ringbuf_init+0x38>)
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <Ringbuf_init+0x3c>)
 8000300:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <Ringbuf_init+0x40>)
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <Ringbuf_init+0x44>)
 8000306:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <Ringbuf_init+0x48>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	695a      	ldr	r2, [r3, #20]
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <Ringbuf_init+0x48>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f042 0201 	orr.w	r2, r2, #1
 8000316:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <Ringbuf_init+0x48>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	68da      	ldr	r2, [r3, #12]
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <Ringbuf_init+0x48>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0220 	orr.w	r2, r2, #32
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000a20 	.word	0x20000a20
 8000334:	20000990 	.word	0x20000990
 8000338:	20000a24 	.word	0x20000a24
 800033c:	200009d8 	.word	0x200009d8
 8000340:	20000e98 	.word	0x20000e98

08000344 <Uart_flush>:
    buffer->head = i;
  }
}

void Uart_flush (void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <Uart_flush+0x18>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <Uart_flush+0x18>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000352:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000a20 	.word	0x20000a20

08000360 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <Uart_read+0x48>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <Uart_read+0x48>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000372:	429a      	cmp	r2, r3
 8000374:	d102      	bne.n	800037c <Uart_read+0x1c>
  {
    return -1;
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
 800037a:	e010      	b.n	800039e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <Uart_read+0x48>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <Uart_read+0x48>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000386:	5cd3      	ldrb	r3, [r2, r3]
 8000388:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <Uart_read+0x48>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000390:	1c5a      	adds	r2, r3, #1
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <Uart_read+0x48>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800039a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800039c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000a20 	.word	0x20000a20

080003ac <Uart_write>:

void Uart_write(int c)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	db21      	blt.n	80003fe <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <Uart_write+0x5c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c0:	3301      	adds	r3, #1
 80003c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003c6:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80003c8:	bf00      	nop
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <Uart_write+0x5c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d0f9      	beq.n	80003ca <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <Uart_write+0x5c>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <Uart_write+0x5c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e0:	6879      	ldr	r1, [r7, #4]
 80003e2:	b2c9      	uxtb	r1, r1
 80003e4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <Uart_write+0x5c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <Uart_write+0x60>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	68da      	ldr	r2, [r3, #12]
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <Uart_write+0x60>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003fc:	60da      	str	r2, [r3, #12]
	}
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	20000a24 	.word	0x20000a24
 800040c:	20000e98 	.word	0x20000e98

08000410 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <IsDataAvailable+0x28>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800041a:	b29a      	uxth	r2, r3
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <IsDataAvailable+0x28>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000422:	b29b      	uxth	r3, r3
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	b29b      	uxth	r3, r3
 8000428:	3340      	adds	r3, #64	; 0x40
 800042a:	b29b      	uxth	r3, r3
 800042c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000a20 	.word	0x20000a20

0800043c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000444:	e006      	b.n	8000454 <Uart_sendstring+0x18>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffac 	bl	80003ac <Uart_write>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f4      	bne.n	8000446 <Uart_sendstring+0xa>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <Uart_peek+0x30>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <Uart_peek+0x30>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000478:	429a      	cmp	r2, r3
 800047a:	d102      	bne.n	8000482 <Uart_peek+0x1a>
  {
    return -1;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	e005      	b.n	800048e <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <Uart_peek+0x30>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <Uart_peek+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800048c:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000a20 	.word	0x20000a20

0800049c <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff fec1 	bl	8000230 <strlen>
 80004ae:	4603      	mov	r3, r0
 80004b0:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80004b2:	bf00      	nop
 80004b4:	f7ff ffac 	bl	8000410 <IsDataAvailable>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0fa      	beq.n	80004b4 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80004be:	f7ff ffd3 	bl	8000468 <Uart_peek>
 80004c2:	4601      	mov	r1, r0
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4299      	cmp	r1, r3
 80004ce:	d01a      	beq.n	8000506 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <Wait_for+0xa4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <Wait_for+0xa4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80004e0:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80004e2:	e7e6      	b.n	80004b2 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80004ea:	f7ff ff39 	bl	8000360 <Uart_read>
		if (so_far == len) return 1;
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d101      	bne.n	80004fa <Wait_for+0x5e>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e01d      	b.n	8000536 <Wait_for+0x9a>
		while (!IsDataAvailable());
 80004fa:	bf00      	nop
 80004fc:	f7ff ff88 	bl	8000410 <IsDataAvailable>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0fa      	beq.n	80004fc <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000506:	f7ff ffaf 	bl	8000468 <Uart_peek>
 800050a:	4601      	mov	r1, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4299      	cmp	r1, r3
 8000516:	d0e5      	beq.n	80004e4 <Wait_for+0x48>
	}

	if (so_far != len)
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	429a      	cmp	r2, r3
 800051e:	d002      	beq.n	8000526 <Wait_for+0x8a>
	{
		so_far = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
		goto again;
 8000524:	e7c5      	b.n	80004b2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	429a      	cmp	r2, r3
 800052c:	d101      	bne.n	8000532 <Wait_for+0x96>
 800052e:	2301      	movs	r3, #1
 8000530:	e001      	b.n	8000536 <Wait_for+0x9a>
	else return -1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000a20 	.word	0x20000a20

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x28>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000a28 	.word	0x20000a28
 8000570:	20000a7c 	.word	0x20000a7c

08000574 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	f023 030f 	bic.w	r3, r3, #15
 8000584:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a0:	7bbb      	ldrb	r3, [r7, #14]
 80005a2:	f043 030c 	orr.w	r3, r3, #12
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005b4:	bf00      	nop
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <lcd_send_cmd+0x78>)
 80005b8:	f003 f845 	bl	8003646 <HAL_I2C_GetError>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b04      	cmp	r3, #4
 80005c0:	d0f9      	beq.n	80005b6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80005c2:	bf00      	nop
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <lcd_send_cmd+0x78>)
 80005c6:	f003 f831 	bl	800362c <HAL_I2C_GetState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b20      	cmp	r3, #32
 80005ce:	d1f9      	bne.n	80005c4 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005d0:	f107 0208 	add.w	r2, r7, #8
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2304      	movs	r3, #4
 80005da:	214e      	movs	r1, #78	; 0x4e
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <lcd_send_cmd+0x78>)
 80005de:	f002 fcbf 	bl	8002f60 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000e44 	.word	0x20000e44

080005f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f043 030d 	orr.w	r3, r3, #13
 800060e:	b2db      	uxtb	r3, r3
 8000610:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f043 0309 	orr.w	r3, r3, #9
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	f043 030d 	orr.w	r3, r3, #13
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	f043 0309 	orr.w	r3, r3, #9
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000630:	bf00      	nop
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <lcd_send_data+0x78>)
 8000634:	f003 f807 	bl	8003646 <HAL_I2C_GetError>
 8000638:	4603      	mov	r3, r0
 800063a:	2b04      	cmp	r3, #4
 800063c:	d0f9      	beq.n	8000632 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800063e:	bf00      	nop
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <lcd_send_data+0x78>)
 8000642:	f002 fff3 	bl	800362c <HAL_I2C_GetState>
 8000646:	4603      	mov	r3, r0
 8000648:	2b20      	cmp	r3, #32
 800064a:	d1f9      	bne.n	8000640 <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2304      	movs	r3, #4
 8000656:	214e      	movs	r1, #78	; 0x4e
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <lcd_send_data+0x78>)
 800065a:	f002 fc81 	bl	8002f60 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000e44 	.word	0x20000e44

0800066c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	while (*str)
 8000674:	e006      	b.n	8000684 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffb6 	bl	80005f0 <lcd_send_data>
	while (*str)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f4      	bne.n	8000676 <lcd_send_string+0xa>
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <lcd_init>:

void lcd_init (void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ff6a 	bl	8000574 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f7ff ff67 	bl	8000574 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80006a6:	200c      	movs	r0, #12
 80006a8:	f7ff ff64 	bl	8000574 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80006ac:	2080      	movs	r0, #128	; 0x80
 80006ae:	f7ff ff61 	bl	8000574 <lcd_send_cmd>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	460a      	mov	r2, r1
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d106      	bne.n	80006da <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	337f      	adds	r3, #127	; 0x7f
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff4e 	bl	8000574 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80006d8:	e008      	b.n	80006ec <lcd_gotoxy+0x36>
 else if(row == 2)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d105      	bne.n	80006ec <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	3b41      	subs	r3, #65	; 0x41
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff44 	bl	8000574 <lcd_send_cmd>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	603a      	str	r2, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffd3 	bl	80006b6 <lcd_gotoxy>
 lcd_send_string(str);
 8000710:	6838      	ldr	r0, [r7, #0]
 8000712:	f7ff ffab 	bl	800066c <lcd_send_string>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lcd_clear>:

void lcd_clear(void) {
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff26 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(2);
 8000728:	2002      	movs	r0, #2
 800072a:	f001 fde7 	bl	80022fc <HAL_Delay>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fd78 	bl	8000230 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	3301      	adds	r3, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fdeb 	bl	8006320 <malloc>
 800074a:	4603      	mov	r3, r0
 800074c:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <copyText+0x2a>
        strcpy(result, text);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f005 fefa 	bl	8006550 <strcpy>
    }
    return result;
 800075c:	68fb      	ldr	r3, [r7, #12]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <loadMenuTexts>:
			NVIC_SystemReset();
		}
	}
}

void loadMenuTexts(uint8_t dilSecim) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8000772:	48a9      	ldr	r0, [pc, #676]	; (8000a18 <loadMenuTexts+0x2b0>)
 8000774:	f7ff ffdd 	bl	8000732 <copyText>
 8000778:	4603      	mov	r3, r0
 800077a:	4aa8      	ldr	r2, [pc, #672]	; (8000a1c <loadMenuTexts+0x2b4>)
 800077c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 800077e:	48a8      	ldr	r0, [pc, #672]	; (8000a20 <loadMenuTexts+0x2b8>)
 8000780:	f7ff ffd7 	bl	8000732 <copyText>
 8000784:	4603      	mov	r3, r0
 8000786:	4aa7      	ldr	r2, [pc, #668]	; (8000a24 <loadMenuTexts+0x2bc>)
 8000788:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 800078a:	48a7      	ldr	r0, [pc, #668]	; (8000a28 <loadMenuTexts+0x2c0>)
 800078c:	f7ff ffd1 	bl	8000732 <copyText>
 8000790:	4603      	mov	r3, r0
 8000792:	4aa6      	ldr	r2, [pc, #664]	; (8000a2c <loadMenuTexts+0x2c4>)
 8000794:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8000796:	48a6      	ldr	r0, [pc, #664]	; (8000a30 <loadMenuTexts+0x2c8>)
 8000798:	f7ff ffcb 	bl	8000732 <copyText>
 800079c:	4603      	mov	r3, r0
 800079e:	4aa5      	ldr	r2, [pc, #660]	; (8000a34 <loadMenuTexts+0x2cc>)
 80007a0:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 80007a2:	48a5      	ldr	r0, [pc, #660]	; (8000a38 <loadMenuTexts+0x2d0>)
 80007a4:	f7ff ffc5 	bl	8000732 <copyText>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4aa4      	ldr	r2, [pc, #656]	; (8000a3c <loadMenuTexts+0x2d4>)
 80007ac:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 80007ae:	48a4      	ldr	r0, [pc, #656]	; (8000a40 <loadMenuTexts+0x2d8>)
 80007b0:	f7ff ffbf 	bl	8000732 <copyText>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4aa3      	ldr	r2, [pc, #652]	; (8000a44 <loadMenuTexts+0x2dc>)
 80007b8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 80007ba:	48a3      	ldr	r0, [pc, #652]	; (8000a48 <loadMenuTexts+0x2e0>)
 80007bc:	f7ff ffb9 	bl	8000732 <copyText>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4aa2      	ldr	r2, [pc, #648]	; (8000a4c <loadMenuTexts+0x2e4>)
 80007c4:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f040 82d1 	bne.w	8000d70 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 80007ce:	48a0      	ldr	r0, [pc, #640]	; (8000a50 <loadMenuTexts+0x2e8>)
 80007d0:	f7ff ffaf 	bl	8000732 <copyText>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a9f      	ldr	r2, [pc, #636]	; (8000a54 <loadMenuTexts+0x2ec>)
 80007d8:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 80007da:	489f      	ldr	r0, [pc, #636]	; (8000a58 <loadMenuTexts+0x2f0>)
 80007dc:	f7ff ffa9 	bl	8000732 <copyText>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a9e      	ldr	r2, [pc, #632]	; (8000a5c <loadMenuTexts+0x2f4>)
 80007e4:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 80007e6:	489e      	ldr	r0, [pc, #632]	; (8000a60 <loadMenuTexts+0x2f8>)
 80007e8:	f7ff ffa3 	bl	8000732 <copyText>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a9d      	ldr	r2, [pc, #628]	; (8000a64 <loadMenuTexts+0x2fc>)
 80007f0:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 80007f2:	489d      	ldr	r0, [pc, #628]	; (8000a68 <loadMenuTexts+0x300>)
 80007f4:	f7ff ff9d 	bl	8000732 <copyText>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a9c      	ldr	r2, [pc, #624]	; (8000a6c <loadMenuTexts+0x304>)
 80007fc:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 80007fe:	489c      	ldr	r0, [pc, #624]	; (8000a70 <loadMenuTexts+0x308>)
 8000800:	f7ff ff97 	bl	8000732 <copyText>
 8000804:	4603      	mov	r3, r0
 8000806:	4a9b      	ldr	r2, [pc, #620]	; (8000a74 <loadMenuTexts+0x30c>)
 8000808:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 800080a:	489b      	ldr	r0, [pc, #620]	; (8000a78 <loadMenuTexts+0x310>)
 800080c:	f7ff ff91 	bl	8000732 <copyText>
 8000810:	4603      	mov	r3, r0
 8000812:	4a9a      	ldr	r2, [pc, #616]	; (8000a7c <loadMenuTexts+0x314>)
 8000814:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8000816:	489a      	ldr	r0, [pc, #616]	; (8000a80 <loadMenuTexts+0x318>)
 8000818:	f7ff ff8b 	bl	8000732 <copyText>
 800081c:	4603      	mov	r3, r0
 800081e:	4a99      	ldr	r2, [pc, #612]	; (8000a84 <loadMenuTexts+0x31c>)
 8000820:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8000822:	4899      	ldr	r0, [pc, #612]	; (8000a88 <loadMenuTexts+0x320>)
 8000824:	f7ff ff85 	bl	8000732 <copyText>
 8000828:	4603      	mov	r3, r0
 800082a:	4a98      	ldr	r2, [pc, #608]	; (8000a8c <loadMenuTexts+0x324>)
 800082c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 800082e:	4898      	ldr	r0, [pc, #608]	; (8000a90 <loadMenuTexts+0x328>)
 8000830:	f7ff ff7f 	bl	8000732 <copyText>
 8000834:	4603      	mov	r3, r0
 8000836:	4a97      	ldr	r2, [pc, #604]	; (8000a94 <loadMenuTexts+0x32c>)
 8000838:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 800083a:	4897      	ldr	r0, [pc, #604]	; (8000a98 <loadMenuTexts+0x330>)
 800083c:	f7ff ff79 	bl	8000732 <copyText>
 8000840:	4603      	mov	r3, r0
 8000842:	4a96      	ldr	r2, [pc, #600]	; (8000a9c <loadMenuTexts+0x334>)
 8000844:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8000846:	4896      	ldr	r0, [pc, #600]	; (8000aa0 <loadMenuTexts+0x338>)
 8000848:	f7ff ff73 	bl	8000732 <copyText>
 800084c:	4603      	mov	r3, r0
 800084e:	4a95      	ldr	r2, [pc, #596]	; (8000aa4 <loadMenuTexts+0x33c>)
 8000850:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8000852:	4895      	ldr	r0, [pc, #596]	; (8000aa8 <loadMenuTexts+0x340>)
 8000854:	f7ff ff6d 	bl	8000732 <copyText>
 8000858:	4603      	mov	r3, r0
 800085a:	4a94      	ldr	r2, [pc, #592]	; (8000aac <loadMenuTexts+0x344>)
 800085c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800085e:	4894      	ldr	r0, [pc, #592]	; (8000ab0 <loadMenuTexts+0x348>)
 8000860:	f7ff ff67 	bl	8000732 <copyText>
 8000864:	4603      	mov	r3, r0
 8000866:	4a93      	ldr	r2, [pc, #588]	; (8000ab4 <loadMenuTexts+0x34c>)
 8000868:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 800086a:	4893      	ldr	r0, [pc, #588]	; (8000ab8 <loadMenuTexts+0x350>)
 800086c:	f7ff ff61 	bl	8000732 <copyText>
 8000870:	4603      	mov	r3, r0
 8000872:	4a92      	ldr	r2, [pc, #584]	; (8000abc <loadMenuTexts+0x354>)
 8000874:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8000876:	4892      	ldr	r0, [pc, #584]	; (8000ac0 <loadMenuTexts+0x358>)
 8000878:	f7ff ff5b 	bl	8000732 <copyText>
 800087c:	4603      	mov	r3, r0
 800087e:	4a91      	ldr	r2, [pc, #580]	; (8000ac4 <loadMenuTexts+0x35c>)
 8000880:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8000882:	4891      	ldr	r0, [pc, #580]	; (8000ac8 <loadMenuTexts+0x360>)
 8000884:	f7ff ff55 	bl	8000732 <copyText>
 8000888:	4603      	mov	r3, r0
 800088a:	4a90      	ldr	r2, [pc, #576]	; (8000acc <loadMenuTexts+0x364>)
 800088c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800088e:	4890      	ldr	r0, [pc, #576]	; (8000ad0 <loadMenuTexts+0x368>)
 8000890:	f7ff ff4f 	bl	8000732 <copyText>
 8000894:	4603      	mov	r3, r0
 8000896:	4a8f      	ldr	r2, [pc, #572]	; (8000ad4 <loadMenuTexts+0x36c>)
 8000898:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 800089a:	488f      	ldr	r0, [pc, #572]	; (8000ad8 <loadMenuTexts+0x370>)
 800089c:	f7ff ff49 	bl	8000732 <copyText>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a8e      	ldr	r2, [pc, #568]	; (8000adc <loadMenuTexts+0x374>)
 80008a4:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 80008a6:	488e      	ldr	r0, [pc, #568]	; (8000ae0 <loadMenuTexts+0x378>)
 80008a8:	f7ff ff43 	bl	8000732 <copyText>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a8d      	ldr	r2, [pc, #564]	; (8000ae4 <loadMenuTexts+0x37c>)
 80008b0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 80008b2:	488d      	ldr	r0, [pc, #564]	; (8000ae8 <loadMenuTexts+0x380>)
 80008b4:	f7ff ff3d 	bl	8000732 <copyText>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a8c      	ldr	r2, [pc, #560]	; (8000aec <loadMenuTexts+0x384>)
 80008bc:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 80008be:	488c      	ldr	r0, [pc, #560]	; (8000af0 <loadMenuTexts+0x388>)
 80008c0:	f7ff ff37 	bl	8000732 <copyText>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a8b      	ldr	r2, [pc, #556]	; (8000af4 <loadMenuTexts+0x38c>)
 80008c8:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 80008ca:	488b      	ldr	r0, [pc, #556]	; (8000af8 <loadMenuTexts+0x390>)
 80008cc:	f7ff ff31 	bl	8000732 <copyText>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a8a      	ldr	r2, [pc, #552]	; (8000afc <loadMenuTexts+0x394>)
 80008d4:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 80008d6:	488a      	ldr	r0, [pc, #552]	; (8000b00 <loadMenuTexts+0x398>)
 80008d8:	f7ff ff2b 	bl	8000732 <copyText>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a89      	ldr	r2, [pc, #548]	; (8000b04 <loadMenuTexts+0x39c>)
 80008e0:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 80008e2:	4889      	ldr	r0, [pc, #548]	; (8000b08 <loadMenuTexts+0x3a0>)
 80008e4:	f7ff ff25 	bl	8000732 <copyText>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a88      	ldr	r2, [pc, #544]	; (8000b0c <loadMenuTexts+0x3a4>)
 80008ec:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 80008ee:	4888      	ldr	r0, [pc, #544]	; (8000b10 <loadMenuTexts+0x3a8>)
 80008f0:	f7ff ff1f 	bl	8000732 <copyText>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a87      	ldr	r2, [pc, #540]	; (8000b14 <loadMenuTexts+0x3ac>)
 80008f8:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 80008fa:	4887      	ldr	r0, [pc, #540]	; (8000b18 <loadMenuTexts+0x3b0>)
 80008fc:	f7ff ff19 	bl	8000732 <copyText>
 8000900:	4603      	mov	r3, r0
 8000902:	4a86      	ldr	r2, [pc, #536]	; (8000b1c <loadMenuTexts+0x3b4>)
 8000904:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8000906:	4886      	ldr	r0, [pc, #536]	; (8000b20 <loadMenuTexts+0x3b8>)
 8000908:	f7ff ff13 	bl	8000732 <copyText>
 800090c:	4603      	mov	r3, r0
 800090e:	4a85      	ldr	r2, [pc, #532]	; (8000b24 <loadMenuTexts+0x3bc>)
 8000910:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8000912:	4885      	ldr	r0, [pc, #532]	; (8000b28 <loadMenuTexts+0x3c0>)
 8000914:	f7ff ff0d 	bl	8000732 <copyText>
 8000918:	4603      	mov	r3, r0
 800091a:	4a84      	ldr	r2, [pc, #528]	; (8000b2c <loadMenuTexts+0x3c4>)
 800091c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 800091e:	4884      	ldr	r0, [pc, #528]	; (8000b30 <loadMenuTexts+0x3c8>)
 8000920:	f7ff ff07 	bl	8000732 <copyText>
 8000924:	4603      	mov	r3, r0
 8000926:	4a83      	ldr	r2, [pc, #524]	; (8000b34 <loadMenuTexts+0x3cc>)
 8000928:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 800092a:	4883      	ldr	r0, [pc, #524]	; (8000b38 <loadMenuTexts+0x3d0>)
 800092c:	f7ff ff01 	bl	8000732 <copyText>
 8000930:	4603      	mov	r3, r0
 8000932:	4a82      	ldr	r2, [pc, #520]	; (8000b3c <loadMenuTexts+0x3d4>)
 8000934:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8000936:	4882      	ldr	r0, [pc, #520]	; (8000b40 <loadMenuTexts+0x3d8>)
 8000938:	f7ff fefb 	bl	8000732 <copyText>
 800093c:	4603      	mov	r3, r0
 800093e:	4a81      	ldr	r2, [pc, #516]	; (8000b44 <loadMenuTexts+0x3dc>)
 8000940:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8000942:	4881      	ldr	r0, [pc, #516]	; (8000b48 <loadMenuTexts+0x3e0>)
 8000944:	f7ff fef5 	bl	8000732 <copyText>
 8000948:	4603      	mov	r3, r0
 800094a:	4a80      	ldr	r2, [pc, #512]	; (8000b4c <loadMenuTexts+0x3e4>)
 800094c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 800094e:	4880      	ldr	r0, [pc, #512]	; (8000b50 <loadMenuTexts+0x3e8>)
 8000950:	f7ff feef 	bl	8000732 <copyText>
 8000954:	4603      	mov	r3, r0
 8000956:	4a7f      	ldr	r2, [pc, #508]	; (8000b54 <loadMenuTexts+0x3ec>)
 8000958:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 800095a:	487f      	ldr	r0, [pc, #508]	; (8000b58 <loadMenuTexts+0x3f0>)
 800095c:	f7ff fee9 	bl	8000732 <copyText>
 8000960:	4603      	mov	r3, r0
 8000962:	4a7e      	ldr	r2, [pc, #504]	; (8000b5c <loadMenuTexts+0x3f4>)
 8000964:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8000966:	487e      	ldr	r0, [pc, #504]	; (8000b60 <loadMenuTexts+0x3f8>)
 8000968:	f7ff fee3 	bl	8000732 <copyText>
 800096c:	4603      	mov	r3, r0
 800096e:	4a7d      	ldr	r2, [pc, #500]	; (8000b64 <loadMenuTexts+0x3fc>)
 8000970:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8000972:	487d      	ldr	r0, [pc, #500]	; (8000b68 <loadMenuTexts+0x400>)
 8000974:	f7ff fedd 	bl	8000732 <copyText>
 8000978:	4603      	mov	r3, r0
 800097a:	4a7c      	ldr	r2, [pc, #496]	; (8000b6c <loadMenuTexts+0x404>)
 800097c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 800097e:	487c      	ldr	r0, [pc, #496]	; (8000b70 <loadMenuTexts+0x408>)
 8000980:	f7ff fed7 	bl	8000732 <copyText>
 8000984:	4603      	mov	r3, r0
 8000986:	4a7b      	ldr	r2, [pc, #492]	; (8000b74 <loadMenuTexts+0x40c>)
 8000988:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 800098a:	487b      	ldr	r0, [pc, #492]	; (8000b78 <loadMenuTexts+0x410>)
 800098c:	f7ff fed1 	bl	8000732 <copyText>
 8000990:	4603      	mov	r3, r0
 8000992:	4a7a      	ldr	r2, [pc, #488]	; (8000b7c <loadMenuTexts+0x414>)
 8000994:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8000996:	487a      	ldr	r0, [pc, #488]	; (8000b80 <loadMenuTexts+0x418>)
 8000998:	f7ff fecb 	bl	8000732 <copyText>
 800099c:	4603      	mov	r3, r0
 800099e:	4a79      	ldr	r2, [pc, #484]	; (8000b84 <loadMenuTexts+0x41c>)
 80009a0:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 80009a2:	4879      	ldr	r0, [pc, #484]	; (8000b88 <loadMenuTexts+0x420>)
 80009a4:	f7ff fec5 	bl	8000732 <copyText>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a78      	ldr	r2, [pc, #480]	; (8000b8c <loadMenuTexts+0x424>)
 80009ac:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 80009ae:	4878      	ldr	r0, [pc, #480]	; (8000b90 <loadMenuTexts+0x428>)
 80009b0:	f7ff febf 	bl	8000732 <copyText>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a77      	ldr	r2, [pc, #476]	; (8000b94 <loadMenuTexts+0x42c>)
 80009b8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 80009ba:	4877      	ldr	r0, [pc, #476]	; (8000b98 <loadMenuTexts+0x430>)
 80009bc:	f7ff feb9 	bl	8000732 <copyText>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a76      	ldr	r2, [pc, #472]	; (8000b9c <loadMenuTexts+0x434>)
 80009c4:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 80009c6:	4876      	ldr	r0, [pc, #472]	; (8000ba0 <loadMenuTexts+0x438>)
 80009c8:	f7ff feb3 	bl	8000732 <copyText>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a75      	ldr	r2, [pc, #468]	; (8000ba4 <loadMenuTexts+0x43c>)
 80009d0:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 80009d2:	4875      	ldr	r0, [pc, #468]	; (8000ba8 <loadMenuTexts+0x440>)
 80009d4:	f7ff fead 	bl	8000732 <copyText>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a74      	ldr	r2, [pc, #464]	; (8000bac <loadMenuTexts+0x444>)
 80009dc:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 80009de:	4874      	ldr	r0, [pc, #464]	; (8000bb0 <loadMenuTexts+0x448>)
 80009e0:	f7ff fea7 	bl	8000732 <copyText>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a73      	ldr	r2, [pc, #460]	; (8000bb4 <loadMenuTexts+0x44c>)
 80009e8:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 80009ea:	4873      	ldr	r0, [pc, #460]	; (8000bb8 <loadMenuTexts+0x450>)
 80009ec:	f7ff fea1 	bl	8000732 <copyText>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a72      	ldr	r2, [pc, #456]	; (8000bbc <loadMenuTexts+0x454>)
 80009f4:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 80009f6:	4872      	ldr	r0, [pc, #456]	; (8000bc0 <loadMenuTexts+0x458>)
 80009f8:	f7ff fe9b 	bl	8000732 <copyText>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a71      	ldr	r2, [pc, #452]	; (8000bc4 <loadMenuTexts+0x45c>)
 8000a00:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8000a02:	4871      	ldr	r0, [pc, #452]	; (8000bc8 <loadMenuTexts+0x460>)
 8000a04:	f7ff fe95 	bl	8000732 <copyText>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a70      	ldr	r2, [pc, #448]	; (8000bcc <loadMenuTexts+0x464>)
 8000a0c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8000a0e:	4870      	ldr	r0, [pc, #448]	; (8000bd0 <loadMenuTexts+0x468>)
 8000a10:	f7ff fe8f 	bl	8000732 <copyText>
 8000a14:	4603      	mov	r3, r0
 8000a16:	e0dd      	b.n	8000bd4 <loadMenuTexts+0x46c>
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000cec 	.word	0x20000cec
 8000a20:	20000010 	.word	0x20000010
 8000a24:	20000cf0 	.word	0x20000cf0
 8000a28:	20000020 	.word	0x20000020
 8000a2c:	20000d48 	.word	0x20000d48
 8000a30:	20000030 	.word	0x20000030
 8000a34:	20000d78 	.word	0x20000d78
 8000a38:	20000040 	.word	0x20000040
 8000a3c:	20000d80 	.word	0x20000d80
 8000a40:	20000050 	.word	0x20000050
 8000a44:	20000df8 	.word	0x20000df8
 8000a48:	20000060 	.word	0x20000060
 8000a4c:	20000dfc 	.word	0x20000dfc
 8000a50:	20000070 	.word	0x20000070
 8000a54:	20000cf4 	.word	0x20000cf4
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	20000cf8 	.word	0x20000cf8
 8000a60:	20000090 	.word	0x20000090
 8000a64:	20000cfc 	.word	0x20000cfc
 8000a68:	200000a0 	.word	0x200000a0
 8000a6c:	20000d00 	.word	0x20000d00
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	20000d04 	.word	0x20000d04
 8000a78:	200000c0 	.word	0x200000c0
 8000a7c:	20000d08 	.word	0x20000d08
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	20000d0c 	.word	0x20000d0c
 8000a88:	200000e0 	.word	0x200000e0
 8000a8c:	20000d10 	.word	0x20000d10
 8000a90:	200000f0 	.word	0x200000f0
 8000a94:	20000d14 	.word	0x20000d14
 8000a98:	20000100 	.word	0x20000100
 8000a9c:	20000d18 	.word	0x20000d18
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	20000d1c 	.word	0x20000d1c
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	20000d20 	.word	0x20000d20
 8000ab0:	20000130 	.word	0x20000130
 8000ab4:	20000d24 	.word	0x20000d24
 8000ab8:	20000140 	.word	0x20000140
 8000abc:	20000d28 	.word	0x20000d28
 8000ac0:	20000150 	.word	0x20000150
 8000ac4:	20000d2c 	.word	0x20000d2c
 8000ac8:	20000160 	.word	0x20000160
 8000acc:	20000d30 	.word	0x20000d30
 8000ad0:	20000170 	.word	0x20000170
 8000ad4:	20000d34 	.word	0x20000d34
 8000ad8:	20000180 	.word	0x20000180
 8000adc:	20000d38 	.word	0x20000d38
 8000ae0:	20000190 	.word	0x20000190
 8000ae4:	20000d3c 	.word	0x20000d3c
 8000ae8:	200001a0 	.word	0x200001a0
 8000aec:	20000d40 	.word	0x20000d40
 8000af0:	200001b0 	.word	0x200001b0
 8000af4:	20000d44 	.word	0x20000d44
 8000af8:	200001c0 	.word	0x200001c0
 8000afc:	20000d4c 	.word	0x20000d4c
 8000b00:	200001d0 	.word	0x200001d0
 8000b04:	20000d50 	.word	0x20000d50
 8000b08:	200001e0 	.word	0x200001e0
 8000b0c:	20000d54 	.word	0x20000d54
 8000b10:	200001f0 	.word	0x200001f0
 8000b14:	20000d58 	.word	0x20000d58
 8000b18:	20000200 	.word	0x20000200
 8000b1c:	20000d5c 	.word	0x20000d5c
 8000b20:	20000210 	.word	0x20000210
 8000b24:	20000d60 	.word	0x20000d60
 8000b28:	20000220 	.word	0x20000220
 8000b2c:	20000d64 	.word	0x20000d64
 8000b30:	20000230 	.word	0x20000230
 8000b34:	20000d68 	.word	0x20000d68
 8000b38:	20000240 	.word	0x20000240
 8000b3c:	20000d6c 	.word	0x20000d6c
 8000b40:	20000250 	.word	0x20000250
 8000b44:	20000d70 	.word	0x20000d70
 8000b48:	20000260 	.word	0x20000260
 8000b4c:	20000d74 	.word	0x20000d74
 8000b50:	20000270 	.word	0x20000270
 8000b54:	20000d7c 	.word	0x20000d7c
 8000b58:	20000280 	.word	0x20000280
 8000b5c:	20000d84 	.word	0x20000d84
 8000b60:	20000290 	.word	0x20000290
 8000b64:	20000d88 	.word	0x20000d88
 8000b68:	200002a0 	.word	0x200002a0
 8000b6c:	20000d8c 	.word	0x20000d8c
 8000b70:	200002b0 	.word	0x200002b0
 8000b74:	20000d90 	.word	0x20000d90
 8000b78:	200002c0 	.word	0x200002c0
 8000b7c:	20000d94 	.word	0x20000d94
 8000b80:	200002d0 	.word	0x200002d0
 8000b84:	20000d98 	.word	0x20000d98
 8000b88:	200002e0 	.word	0x200002e0
 8000b8c:	20000d9c 	.word	0x20000d9c
 8000b90:	200002f0 	.word	0x200002f0
 8000b94:	20000da0 	.word	0x20000da0
 8000b98:	20000300 	.word	0x20000300
 8000b9c:	20000da4 	.word	0x20000da4
 8000ba0:	20000310 	.word	0x20000310
 8000ba4:	20000da8 	.word	0x20000da8
 8000ba8:	20000320 	.word	0x20000320
 8000bac:	20000dac 	.word	0x20000dac
 8000bb0:	20000330 	.word	0x20000330
 8000bb4:	20000db0 	.word	0x20000db0
 8000bb8:	20000340 	.word	0x20000340
 8000bbc:	20000db4 	.word	0x20000db4
 8000bc0:	20000350 	.word	0x20000350
 8000bc4:	20000db8 	.word	0x20000db8
 8000bc8:	20000360 	.word	0x20000360
 8000bcc:	20000dbc 	.word	0x20000dbc
 8000bd0:	20000370 	.word	0x20000370
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ccc <loadMenuTexts+0x564>)
 8000bd6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8000bd8:	483d      	ldr	r0, [pc, #244]	; (8000cd0 <loadMenuTexts+0x568>)
 8000bda:	f7ff fdaa 	bl	8000732 <copyText>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <loadMenuTexts+0x56c>)
 8000be2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8000be4:	483c      	ldr	r0, [pc, #240]	; (8000cd8 <loadMenuTexts+0x570>)
 8000be6:	f7ff fda4 	bl	8000732 <copyText>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <loadMenuTexts+0x574>)
 8000bee:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8000bf0:	483b      	ldr	r0, [pc, #236]	; (8000ce0 <loadMenuTexts+0x578>)
 8000bf2:	f7ff fd9e 	bl	8000732 <copyText>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a3a      	ldr	r2, [pc, #232]	; (8000ce4 <loadMenuTexts+0x57c>)
 8000bfa:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8000bfc:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <loadMenuTexts+0x580>)
 8000bfe:	f7ff fd98 	bl	8000732 <copyText>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a39      	ldr	r2, [pc, #228]	; (8000cec <loadMenuTexts+0x584>)
 8000c06:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8000c08:	4839      	ldr	r0, [pc, #228]	; (8000cf0 <loadMenuTexts+0x588>)
 8000c0a:	f7ff fd92 	bl	8000732 <copyText>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a38      	ldr	r2, [pc, #224]	; (8000cf4 <loadMenuTexts+0x58c>)
 8000c12:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8000c14:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <loadMenuTexts+0x590>)
 8000c16:	f7ff fd8c 	bl	8000732 <copyText>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <loadMenuTexts+0x594>)
 8000c1e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8000c20:	4837      	ldr	r0, [pc, #220]	; (8000d00 <loadMenuTexts+0x598>)
 8000c22:	f7ff fd86 	bl	8000732 <copyText>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <loadMenuTexts+0x59c>)
 8000c2a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8000c2c:	4836      	ldr	r0, [pc, #216]	; (8000d08 <loadMenuTexts+0x5a0>)
 8000c2e:	f7ff fd80 	bl	8000732 <copyText>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <loadMenuTexts+0x5a4>)
 8000c36:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8000c38:	4835      	ldr	r0, [pc, #212]	; (8000d10 <loadMenuTexts+0x5a8>)
 8000c3a:	f7ff fd7a 	bl	8000732 <copyText>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a34      	ldr	r2, [pc, #208]	; (8000d14 <loadMenuTexts+0x5ac>)
 8000c42:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8000c44:	4834      	ldr	r0, [pc, #208]	; (8000d18 <loadMenuTexts+0x5b0>)
 8000c46:	f7ff fd74 	bl	8000732 <copyText>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <loadMenuTexts+0x5b4>)
 8000c4e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8000c50:	4833      	ldr	r0, [pc, #204]	; (8000d20 <loadMenuTexts+0x5b8>)
 8000c52:	f7ff fd6e 	bl	8000732 <copyText>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <loadMenuTexts+0x5bc>)
 8000c5a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8000c5c:	4832      	ldr	r0, [pc, #200]	; (8000d28 <loadMenuTexts+0x5c0>)
 8000c5e:	f7ff fd68 	bl	8000732 <copyText>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <loadMenuTexts+0x5c4>)
 8000c66:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <loadMenuTexts+0x5c8>)
 8000c6a:	f7ff fd62 	bl	8000732 <copyText>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <loadMenuTexts+0x5cc>)
 8000c72:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8000c74:	4830      	ldr	r0, [pc, #192]	; (8000d38 <loadMenuTexts+0x5d0>)
 8000c76:	f7ff fd5c 	bl	8000732 <copyText>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <loadMenuTexts+0x5d4>)
 8000c7e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8000c80:	482f      	ldr	r0, [pc, #188]	; (8000d40 <loadMenuTexts+0x5d8>)
 8000c82:	f7ff fd56 	bl	8000732 <copyText>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <loadMenuTexts+0x5dc>)
 8000c8a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8000c8c:	482e      	ldr	r0, [pc, #184]	; (8000d48 <loadMenuTexts+0x5e0>)
 8000c8e:	f7ff fd50 	bl	8000732 <copyText>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <loadMenuTexts+0x5e4>)
 8000c96:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8000c98:	482d      	ldr	r0, [pc, #180]	; (8000d50 <loadMenuTexts+0x5e8>)
 8000c9a:	f7ff fd4a 	bl	8000732 <copyText>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <loadMenuTexts+0x5ec>)
 8000ca2:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8000ca4:	482c      	ldr	r0, [pc, #176]	; (8000d58 <loadMenuTexts+0x5f0>)
 8000ca6:	f7ff fd44 	bl	8000732 <copyText>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <loadMenuTexts+0x5f4>)
 8000cae:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8000cb0:	482b      	ldr	r0, [pc, #172]	; (8000d60 <loadMenuTexts+0x5f8>)
 8000cb2:	f7ff fd3e 	bl	8000732 <copyText>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <loadMenuTexts+0x5fc>)
 8000cba:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8000cbc:	482a      	ldr	r0, [pc, #168]	; (8000d68 <loadMenuTexts+0x600>)
 8000cbe:	f7ff fd38 	bl	8000732 <copyText>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <loadMenuTexts+0x604>)
 8000cc6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8000cc8:	e2d3      	b.n	8001272 <loadMenuTexts+0xb0a>
 8000cca:	bf00      	nop
 8000ccc:	20000dc0 	.word	0x20000dc0
 8000cd0:	20000380 	.word	0x20000380
 8000cd4:	20000dc4 	.word	0x20000dc4
 8000cd8:	20000390 	.word	0x20000390
 8000cdc:	20000dc8 	.word	0x20000dc8
 8000ce0:	200003a0 	.word	0x200003a0
 8000ce4:	20000dcc 	.word	0x20000dcc
 8000ce8:	200003b0 	.word	0x200003b0
 8000cec:	20000dd0 	.word	0x20000dd0
 8000cf0:	200003c0 	.word	0x200003c0
 8000cf4:	20000dd4 	.word	0x20000dd4
 8000cf8:	200003d0 	.word	0x200003d0
 8000cfc:	20000dd8 	.word	0x20000dd8
 8000d00:	200003e0 	.word	0x200003e0
 8000d04:	20000ddc 	.word	0x20000ddc
 8000d08:	200003f0 	.word	0x200003f0
 8000d0c:	20000de0 	.word	0x20000de0
 8000d10:	20000400 	.word	0x20000400
 8000d14:	20000de4 	.word	0x20000de4
 8000d18:	20000410 	.word	0x20000410
 8000d1c:	20000de8 	.word	0x20000de8
 8000d20:	20000420 	.word	0x20000420
 8000d24:	20000dec 	.word	0x20000dec
 8000d28:	20000430 	.word	0x20000430
 8000d2c:	20000df0 	.word	0x20000df0
 8000d30:	20000440 	.word	0x20000440
 8000d34:	20000df4 	.word	0x20000df4
 8000d38:	20000450 	.word	0x20000450
 8000d3c:	20000e00 	.word	0x20000e00
 8000d40:	20000460 	.word	0x20000460
 8000d44:	20000e04 	.word	0x20000e04
 8000d48:	20000470 	.word	0x20000470
 8000d4c:	20000e08 	.word	0x20000e08
 8000d50:	20000480 	.word	0x20000480
 8000d54:	20000e0c 	.word	0x20000e0c
 8000d58:	20000490 	.word	0x20000490
 8000d5c:	20000e10 	.word	0x20000e10
 8000d60:	200004a0 	.word	0x200004a0
 8000d64:	20000e14 	.word	0x20000e14
 8000d68:	200004b0 	.word	0x200004b0
 8000d6c:	20000e18 	.word	0x20000e18
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8000d70:	48a9      	ldr	r0, [pc, #676]	; (8001018 <loadMenuTexts+0x8b0>)
 8000d72:	f7ff fcde 	bl	8000732 <copyText>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4aa8      	ldr	r2, [pc, #672]	; (800101c <loadMenuTexts+0x8b4>)
 8000d7a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8000d7c:	48a8      	ldr	r0, [pc, #672]	; (8001020 <loadMenuTexts+0x8b8>)
 8000d7e:	f7ff fcd8 	bl	8000732 <copyText>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4aa7      	ldr	r2, [pc, #668]	; (8001024 <loadMenuTexts+0x8bc>)
 8000d86:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8000d88:	48a7      	ldr	r0, [pc, #668]	; (8001028 <loadMenuTexts+0x8c0>)
 8000d8a:	f7ff fcd2 	bl	8000732 <copyText>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4aa6      	ldr	r2, [pc, #664]	; (800102c <loadMenuTexts+0x8c4>)
 8000d92:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8000d94:	48a6      	ldr	r0, [pc, #664]	; (8001030 <loadMenuTexts+0x8c8>)
 8000d96:	f7ff fccc 	bl	8000732 <copyText>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4aa5      	ldr	r2, [pc, #660]	; (8001034 <loadMenuTexts+0x8cc>)
 8000d9e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8000da0:	48a5      	ldr	r0, [pc, #660]	; (8001038 <loadMenuTexts+0x8d0>)
 8000da2:	f7ff fcc6 	bl	8000732 <copyText>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4aa4      	ldr	r2, [pc, #656]	; (800103c <loadMenuTexts+0x8d4>)
 8000daa:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8000dac:	48a4      	ldr	r0, [pc, #656]	; (8001040 <loadMenuTexts+0x8d8>)
 8000dae:	f7ff fcc0 	bl	8000732 <copyText>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4aa3      	ldr	r2, [pc, #652]	; (8001044 <loadMenuTexts+0x8dc>)
 8000db6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8000db8:	48a3      	ldr	r0, [pc, #652]	; (8001048 <loadMenuTexts+0x8e0>)
 8000dba:	f7ff fcba 	bl	8000732 <copyText>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4aa2      	ldr	r2, [pc, #648]	; (800104c <loadMenuTexts+0x8e4>)
 8000dc2:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8000dc4:	48a2      	ldr	r0, [pc, #648]	; (8001050 <loadMenuTexts+0x8e8>)
 8000dc6:	f7ff fcb4 	bl	8000732 <copyText>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4aa1      	ldr	r2, [pc, #644]	; (8001054 <loadMenuTexts+0x8ec>)
 8000dce:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8000dd0:	48a1      	ldr	r0, [pc, #644]	; (8001058 <loadMenuTexts+0x8f0>)
 8000dd2:	f7ff fcae 	bl	8000732 <copyText>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4aa0      	ldr	r2, [pc, #640]	; (800105c <loadMenuTexts+0x8f4>)
 8000dda:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8000ddc:	48a0      	ldr	r0, [pc, #640]	; (8001060 <loadMenuTexts+0x8f8>)
 8000dde:	f7ff fca8 	bl	8000732 <copyText>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a9f      	ldr	r2, [pc, #636]	; (8001064 <loadMenuTexts+0x8fc>)
 8000de6:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8000de8:	489f      	ldr	r0, [pc, #636]	; (8001068 <loadMenuTexts+0x900>)
 8000dea:	f7ff fca2 	bl	8000732 <copyText>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a9e      	ldr	r2, [pc, #632]	; (800106c <loadMenuTexts+0x904>)
 8000df2:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8000df4:	489e      	ldr	r0, [pc, #632]	; (8001070 <loadMenuTexts+0x908>)
 8000df6:	f7ff fc9c 	bl	8000732 <copyText>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a9d      	ldr	r2, [pc, #628]	; (8001074 <loadMenuTexts+0x90c>)
 8000dfe:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8000e00:	489d      	ldr	r0, [pc, #628]	; (8001078 <loadMenuTexts+0x910>)
 8000e02:	f7ff fc96 	bl	8000732 <copyText>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a9c      	ldr	r2, [pc, #624]	; (800107c <loadMenuTexts+0x914>)
 8000e0a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8000e0c:	489c      	ldr	r0, [pc, #624]	; (8001080 <loadMenuTexts+0x918>)
 8000e0e:	f7ff fc90 	bl	8000732 <copyText>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a9b      	ldr	r2, [pc, #620]	; (8001084 <loadMenuTexts+0x91c>)
 8000e16:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8000e18:	489b      	ldr	r0, [pc, #620]	; (8001088 <loadMenuTexts+0x920>)
 8000e1a:	f7ff fc8a 	bl	8000732 <copyText>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a9a      	ldr	r2, [pc, #616]	; (800108c <loadMenuTexts+0x924>)
 8000e22:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8000e24:	489a      	ldr	r0, [pc, #616]	; (8001090 <loadMenuTexts+0x928>)
 8000e26:	f7ff fc84 	bl	8000732 <copyText>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a99      	ldr	r2, [pc, #612]	; (8001094 <loadMenuTexts+0x92c>)
 8000e2e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8000e30:	4899      	ldr	r0, [pc, #612]	; (8001098 <loadMenuTexts+0x930>)
 8000e32:	f7ff fc7e 	bl	8000732 <copyText>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a98      	ldr	r2, [pc, #608]	; (800109c <loadMenuTexts+0x934>)
 8000e3a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8000e3c:	4898      	ldr	r0, [pc, #608]	; (80010a0 <loadMenuTexts+0x938>)
 8000e3e:	f7ff fc78 	bl	8000732 <copyText>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a97      	ldr	r2, [pc, #604]	; (80010a4 <loadMenuTexts+0x93c>)
 8000e46:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8000e48:	4897      	ldr	r0, [pc, #604]	; (80010a8 <loadMenuTexts+0x940>)
 8000e4a:	f7ff fc72 	bl	8000732 <copyText>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a96      	ldr	r2, [pc, #600]	; (80010ac <loadMenuTexts+0x944>)
 8000e52:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8000e54:	4896      	ldr	r0, [pc, #600]	; (80010b0 <loadMenuTexts+0x948>)
 8000e56:	f7ff fc6c 	bl	8000732 <copyText>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a95      	ldr	r2, [pc, #596]	; (80010b4 <loadMenuTexts+0x94c>)
 8000e5e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8000e60:	4895      	ldr	r0, [pc, #596]	; (80010b8 <loadMenuTexts+0x950>)
 8000e62:	f7ff fc66 	bl	8000732 <copyText>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a94      	ldr	r2, [pc, #592]	; (80010bc <loadMenuTexts+0x954>)
 8000e6a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8000e6c:	4894      	ldr	r0, [pc, #592]	; (80010c0 <loadMenuTexts+0x958>)
 8000e6e:	f7ff fc60 	bl	8000732 <copyText>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a93      	ldr	r2, [pc, #588]	; (80010c4 <loadMenuTexts+0x95c>)
 8000e76:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8000e78:	4893      	ldr	r0, [pc, #588]	; (80010c8 <loadMenuTexts+0x960>)
 8000e7a:	f7ff fc5a 	bl	8000732 <copyText>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a92      	ldr	r2, [pc, #584]	; (80010cc <loadMenuTexts+0x964>)
 8000e82:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8000e84:	4892      	ldr	r0, [pc, #584]	; (80010d0 <loadMenuTexts+0x968>)
 8000e86:	f7ff fc54 	bl	8000732 <copyText>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a91      	ldr	r2, [pc, #580]	; (80010d4 <loadMenuTexts+0x96c>)
 8000e8e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8000e90:	4891      	ldr	r0, [pc, #580]	; (80010d8 <loadMenuTexts+0x970>)
 8000e92:	f7ff fc4e 	bl	8000732 <copyText>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a90      	ldr	r2, [pc, #576]	; (80010dc <loadMenuTexts+0x974>)
 8000e9a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8000e9c:	4890      	ldr	r0, [pc, #576]	; (80010e0 <loadMenuTexts+0x978>)
 8000e9e:	f7ff fc48 	bl	8000732 <copyText>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a8f      	ldr	r2, [pc, #572]	; (80010e4 <loadMenuTexts+0x97c>)
 8000ea6:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8000ea8:	488f      	ldr	r0, [pc, #572]	; (80010e8 <loadMenuTexts+0x980>)
 8000eaa:	f7ff fc42 	bl	8000732 <copyText>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a8e      	ldr	r2, [pc, #568]	; (80010ec <loadMenuTexts+0x984>)
 8000eb2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8000eb4:	488e      	ldr	r0, [pc, #568]	; (80010f0 <loadMenuTexts+0x988>)
 8000eb6:	f7ff fc3c 	bl	8000732 <copyText>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a8d      	ldr	r2, [pc, #564]	; (80010f4 <loadMenuTexts+0x98c>)
 8000ebe:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8000ec0:	488d      	ldr	r0, [pc, #564]	; (80010f8 <loadMenuTexts+0x990>)
 8000ec2:	f7ff fc36 	bl	8000732 <copyText>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a8c      	ldr	r2, [pc, #560]	; (80010fc <loadMenuTexts+0x994>)
 8000eca:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8000ecc:	488c      	ldr	r0, [pc, #560]	; (8001100 <loadMenuTexts+0x998>)
 8000ece:	f7ff fc30 	bl	8000732 <copyText>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a8b      	ldr	r2, [pc, #556]	; (8001104 <loadMenuTexts+0x99c>)
 8000ed6:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8000ed8:	488b      	ldr	r0, [pc, #556]	; (8001108 <loadMenuTexts+0x9a0>)
 8000eda:	f7ff fc2a 	bl	8000732 <copyText>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a8a      	ldr	r2, [pc, #552]	; (800110c <loadMenuTexts+0x9a4>)
 8000ee2:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8000ee4:	488a      	ldr	r0, [pc, #552]	; (8001110 <loadMenuTexts+0x9a8>)
 8000ee6:	f7ff fc24 	bl	8000732 <copyText>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a89      	ldr	r2, [pc, #548]	; (8001114 <loadMenuTexts+0x9ac>)
 8000eee:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8000ef0:	4889      	ldr	r0, [pc, #548]	; (8001118 <loadMenuTexts+0x9b0>)
 8000ef2:	f7ff fc1e 	bl	8000732 <copyText>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a88      	ldr	r2, [pc, #544]	; (800111c <loadMenuTexts+0x9b4>)
 8000efa:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8000efc:	4888      	ldr	r0, [pc, #544]	; (8001120 <loadMenuTexts+0x9b8>)
 8000efe:	f7ff fc18 	bl	8000732 <copyText>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a87      	ldr	r2, [pc, #540]	; (8001124 <loadMenuTexts+0x9bc>)
 8000f06:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8000f08:	4887      	ldr	r0, [pc, #540]	; (8001128 <loadMenuTexts+0x9c0>)
 8000f0a:	f7ff fc12 	bl	8000732 <copyText>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a86      	ldr	r2, [pc, #536]	; (800112c <loadMenuTexts+0x9c4>)
 8000f12:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8000f14:	4886      	ldr	r0, [pc, #536]	; (8001130 <loadMenuTexts+0x9c8>)
 8000f16:	f7ff fc0c 	bl	8000732 <copyText>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a85      	ldr	r2, [pc, #532]	; (8001134 <loadMenuTexts+0x9cc>)
 8000f1e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8000f20:	4885      	ldr	r0, [pc, #532]	; (8001138 <loadMenuTexts+0x9d0>)
 8000f22:	f7ff fc06 	bl	8000732 <copyText>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a84      	ldr	r2, [pc, #528]	; (800113c <loadMenuTexts+0x9d4>)
 8000f2a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8000f2c:	4884      	ldr	r0, [pc, #528]	; (8001140 <loadMenuTexts+0x9d8>)
 8000f2e:	f7ff fc00 	bl	8000732 <copyText>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a83      	ldr	r2, [pc, #524]	; (8001144 <loadMenuTexts+0x9dc>)
 8000f36:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8000f38:	4883      	ldr	r0, [pc, #524]	; (8001148 <loadMenuTexts+0x9e0>)
 8000f3a:	f7ff fbfa 	bl	8000732 <copyText>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a82      	ldr	r2, [pc, #520]	; (800114c <loadMenuTexts+0x9e4>)
 8000f42:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8000f44:	4882      	ldr	r0, [pc, #520]	; (8001150 <loadMenuTexts+0x9e8>)
 8000f46:	f7ff fbf4 	bl	8000732 <copyText>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a81      	ldr	r2, [pc, #516]	; (8001154 <loadMenuTexts+0x9ec>)
 8000f4e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8000f50:	4881      	ldr	r0, [pc, #516]	; (8001158 <loadMenuTexts+0x9f0>)
 8000f52:	f7ff fbee 	bl	8000732 <copyText>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a80      	ldr	r2, [pc, #512]	; (800115c <loadMenuTexts+0x9f4>)
 8000f5a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8000f5c:	4880      	ldr	r0, [pc, #512]	; (8001160 <loadMenuTexts+0x9f8>)
 8000f5e:	f7ff fbe8 	bl	8000732 <copyText>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <loadMenuTexts+0x9fc>)
 8000f66:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8000f68:	487f      	ldr	r0, [pc, #508]	; (8001168 <loadMenuTexts+0xa00>)
 8000f6a:	f7ff fbe2 	bl	8000732 <copyText>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a7e      	ldr	r2, [pc, #504]	; (800116c <loadMenuTexts+0xa04>)
 8000f72:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8000f74:	487e      	ldr	r0, [pc, #504]	; (8001170 <loadMenuTexts+0xa08>)
 8000f76:	f7ff fbdc 	bl	8000732 <copyText>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a7d      	ldr	r2, [pc, #500]	; (8001174 <loadMenuTexts+0xa0c>)
 8000f7e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8000f80:	487d      	ldr	r0, [pc, #500]	; (8001178 <loadMenuTexts+0xa10>)
 8000f82:	f7ff fbd6 	bl	8000732 <copyText>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a7c      	ldr	r2, [pc, #496]	; (800117c <loadMenuTexts+0xa14>)
 8000f8a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8000f8c:	487c      	ldr	r0, [pc, #496]	; (8001180 <loadMenuTexts+0xa18>)
 8000f8e:	f7ff fbd0 	bl	8000732 <copyText>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a7b      	ldr	r2, [pc, #492]	; (8001184 <loadMenuTexts+0xa1c>)
 8000f96:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8000f98:	487b      	ldr	r0, [pc, #492]	; (8001188 <loadMenuTexts+0xa20>)
 8000f9a:	f7ff fbca 	bl	8000732 <copyText>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a7a      	ldr	r2, [pc, #488]	; (800118c <loadMenuTexts+0xa24>)
 8000fa2:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8000fa4:	487a      	ldr	r0, [pc, #488]	; (8001190 <loadMenuTexts+0xa28>)
 8000fa6:	f7ff fbc4 	bl	8000732 <copyText>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a79      	ldr	r2, [pc, #484]	; (8001194 <loadMenuTexts+0xa2c>)
 8000fae:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8000fb0:	4879      	ldr	r0, [pc, #484]	; (8001198 <loadMenuTexts+0xa30>)
 8000fb2:	f7ff fbbe 	bl	8000732 <copyText>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <loadMenuTexts+0xa34>)
 8000fba:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8000fbc:	4878      	ldr	r0, [pc, #480]	; (80011a0 <loadMenuTexts+0xa38>)
 8000fbe:	f7ff fbb8 	bl	8000732 <copyText>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a77      	ldr	r2, [pc, #476]	; (80011a4 <loadMenuTexts+0xa3c>)
 8000fc6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8000fc8:	4877      	ldr	r0, [pc, #476]	; (80011a8 <loadMenuTexts+0xa40>)
 8000fca:	f7ff fbb2 	bl	8000732 <copyText>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a76      	ldr	r2, [pc, #472]	; (80011ac <loadMenuTexts+0xa44>)
 8000fd2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8000fd4:	4876      	ldr	r0, [pc, #472]	; (80011b0 <loadMenuTexts+0xa48>)
 8000fd6:	f7ff fbac 	bl	8000732 <copyText>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a75      	ldr	r2, [pc, #468]	; (80011b4 <loadMenuTexts+0xa4c>)
 8000fde:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8000fe0:	4875      	ldr	r0, [pc, #468]	; (80011b8 <loadMenuTexts+0xa50>)
 8000fe2:	f7ff fba6 	bl	8000732 <copyText>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a74      	ldr	r2, [pc, #464]	; (80011bc <loadMenuTexts+0xa54>)
 8000fea:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8000fec:	4874      	ldr	r0, [pc, #464]	; (80011c0 <loadMenuTexts+0xa58>)
 8000fee:	f7ff fba0 	bl	8000732 <copyText>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <loadMenuTexts+0xa5c>)
 8000ff6:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8000ff8:	4873      	ldr	r0, [pc, #460]	; (80011c8 <loadMenuTexts+0xa60>)
 8000ffa:	f7ff fb9a 	bl	8000732 <copyText>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a72      	ldr	r2, [pc, #456]	; (80011cc <loadMenuTexts+0xa64>)
 8001002:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8001004:	4872      	ldr	r0, [pc, #456]	; (80011d0 <loadMenuTexts+0xa68>)
 8001006:	f7ff fb94 	bl	8000732 <copyText>
 800100a:	4603      	mov	r3, r0
 800100c:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <loadMenuTexts+0xa6c>)
 800100e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8001010:	4871      	ldr	r0, [pc, #452]	; (80011d8 <loadMenuTexts+0xa70>)
 8001012:	f7ff fb8e 	bl	8000732 <copyText>
 8001016:	e0e1      	b.n	80011dc <loadMenuTexts+0xa74>
 8001018:	200004c0 	.word	0x200004c0
 800101c:	20000cf4 	.word	0x20000cf4
 8001020:	200004d0 	.word	0x200004d0
 8001024:	20000cf8 	.word	0x20000cf8
 8001028:	200004e0 	.word	0x200004e0
 800102c:	20000cfc 	.word	0x20000cfc
 8001030:	200004f0 	.word	0x200004f0
 8001034:	20000d00 	.word	0x20000d00
 8001038:	20000500 	.word	0x20000500
 800103c:	20000d04 	.word	0x20000d04
 8001040:	20000510 	.word	0x20000510
 8001044:	20000d08 	.word	0x20000d08
 8001048:	20000520 	.word	0x20000520
 800104c:	20000d0c 	.word	0x20000d0c
 8001050:	20000530 	.word	0x20000530
 8001054:	20000d10 	.word	0x20000d10
 8001058:	20000540 	.word	0x20000540
 800105c:	20000d14 	.word	0x20000d14
 8001060:	20000550 	.word	0x20000550
 8001064:	20000d18 	.word	0x20000d18
 8001068:	20000560 	.word	0x20000560
 800106c:	20000d1c 	.word	0x20000d1c
 8001070:	20000570 	.word	0x20000570
 8001074:	20000d20 	.word	0x20000d20
 8001078:	20000580 	.word	0x20000580
 800107c:	20000d24 	.word	0x20000d24
 8001080:	20000590 	.word	0x20000590
 8001084:	20000d28 	.word	0x20000d28
 8001088:	200005a0 	.word	0x200005a0
 800108c:	20000d2c 	.word	0x20000d2c
 8001090:	200005b0 	.word	0x200005b0
 8001094:	20000d30 	.word	0x20000d30
 8001098:	200005c0 	.word	0x200005c0
 800109c:	20000d34 	.word	0x20000d34
 80010a0:	200005d0 	.word	0x200005d0
 80010a4:	20000d38 	.word	0x20000d38
 80010a8:	200005e0 	.word	0x200005e0
 80010ac:	20000d3c 	.word	0x20000d3c
 80010b0:	200005f0 	.word	0x200005f0
 80010b4:	20000d40 	.word	0x20000d40
 80010b8:	20000600 	.word	0x20000600
 80010bc:	20000d44 	.word	0x20000d44
 80010c0:	20000610 	.word	0x20000610
 80010c4:	20000d4c 	.word	0x20000d4c
 80010c8:	20000620 	.word	0x20000620
 80010cc:	20000d50 	.word	0x20000d50
 80010d0:	20000630 	.word	0x20000630
 80010d4:	20000d54 	.word	0x20000d54
 80010d8:	20000640 	.word	0x20000640
 80010dc:	20000d58 	.word	0x20000d58
 80010e0:	20000650 	.word	0x20000650
 80010e4:	20000d5c 	.word	0x20000d5c
 80010e8:	20000660 	.word	0x20000660
 80010ec:	20000d60 	.word	0x20000d60
 80010f0:	20000670 	.word	0x20000670
 80010f4:	20000d64 	.word	0x20000d64
 80010f8:	20000680 	.word	0x20000680
 80010fc:	20000d68 	.word	0x20000d68
 8001100:	20000690 	.word	0x20000690
 8001104:	20000d6c 	.word	0x20000d6c
 8001108:	200006a0 	.word	0x200006a0
 800110c:	20000d70 	.word	0x20000d70
 8001110:	200006b0 	.word	0x200006b0
 8001114:	20000d74 	.word	0x20000d74
 8001118:	200006c0 	.word	0x200006c0
 800111c:	20000d7c 	.word	0x20000d7c
 8001120:	200006d0 	.word	0x200006d0
 8001124:	20000d84 	.word	0x20000d84
 8001128:	200006e0 	.word	0x200006e0
 800112c:	20000d88 	.word	0x20000d88
 8001130:	200006f0 	.word	0x200006f0
 8001134:	20000d8c 	.word	0x20000d8c
 8001138:	20000700 	.word	0x20000700
 800113c:	20000d90 	.word	0x20000d90
 8001140:	20000710 	.word	0x20000710
 8001144:	20000d94 	.word	0x20000d94
 8001148:	20000720 	.word	0x20000720
 800114c:	20000d98 	.word	0x20000d98
 8001150:	20000730 	.word	0x20000730
 8001154:	20000d9c 	.word	0x20000d9c
 8001158:	20000740 	.word	0x20000740
 800115c:	20000da0 	.word	0x20000da0
 8001160:	20000750 	.word	0x20000750
 8001164:	20000da4 	.word	0x20000da4
 8001168:	20000760 	.word	0x20000760
 800116c:	20000da8 	.word	0x20000da8
 8001170:	20000770 	.word	0x20000770
 8001174:	20000dac 	.word	0x20000dac
 8001178:	20000780 	.word	0x20000780
 800117c:	20000db0 	.word	0x20000db0
 8001180:	20000790 	.word	0x20000790
 8001184:	20000db4 	.word	0x20000db4
 8001188:	200007a0 	.word	0x200007a0
 800118c:	20000db8 	.word	0x20000db8
 8001190:	200007b0 	.word	0x200007b0
 8001194:	20000dbc 	.word	0x20000dbc
 8001198:	200007c0 	.word	0x200007c0
 800119c:	20000dc0 	.word	0x20000dc0
 80011a0:	200007d0 	.word	0x200007d0
 80011a4:	20000dc4 	.word	0x20000dc4
 80011a8:	200007e0 	.word	0x200007e0
 80011ac:	20000dc8 	.word	0x20000dc8
 80011b0:	200007f0 	.word	0x200007f0
 80011b4:	20000dcc 	.word	0x20000dcc
 80011b8:	20000800 	.word	0x20000800
 80011bc:	20000dd0 	.word	0x20000dd0
 80011c0:	20000810 	.word	0x20000810
 80011c4:	20000dd4 	.word	0x20000dd4
 80011c8:	20000820 	.word	0x20000820
 80011cc:	20000dd8 	.word	0x20000dd8
 80011d0:	20000830 	.word	0x20000830
 80011d4:	20000ddc 	.word	0x20000ddc
 80011d8:	20000840 	.word	0x20000840
 80011dc:	4603      	mov	r3, r0
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <loadMenuTexts+0xb14>)
 80011e0:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80011e2:	4827      	ldr	r0, [pc, #156]	; (8001280 <loadMenuTexts+0xb18>)
 80011e4:	f7ff faa5 	bl	8000732 <copyText>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a26      	ldr	r2, [pc, #152]	; (8001284 <loadMenuTexts+0xb1c>)
 80011ec:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80011ee:	4826      	ldr	r0, [pc, #152]	; (8001288 <loadMenuTexts+0xb20>)
 80011f0:	f7ff fa9f 	bl	8000732 <copyText>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <loadMenuTexts+0xb24>)
 80011f8:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80011fa:	4825      	ldr	r0, [pc, #148]	; (8001290 <loadMenuTexts+0xb28>)
 80011fc:	f7ff fa99 	bl	8000732 <copyText>
 8001200:	4603      	mov	r3, r0
 8001202:	4a24      	ldr	r2, [pc, #144]	; (8001294 <loadMenuTexts+0xb2c>)
 8001204:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <loadMenuTexts+0xb30>)
 8001208:	f7ff fa93 	bl	8000732 <copyText>
 800120c:	4603      	mov	r3, r0
 800120e:	4a23      	ldr	r2, [pc, #140]	; (800129c <loadMenuTexts+0xb34>)
 8001210:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8001212:	4823      	ldr	r0, [pc, #140]	; (80012a0 <loadMenuTexts+0xb38>)
 8001214:	f7ff fa8d 	bl	8000732 <copyText>
 8001218:	4603      	mov	r3, r0
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <loadMenuTexts+0xb3c>)
 800121c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <loadMenuTexts+0xb40>)
 8001220:	f7ff fa87 	bl	8000732 <copyText>
 8001224:	4603      	mov	r3, r0
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <loadMenuTexts+0xb44>)
 8001228:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800122a:	4821      	ldr	r0, [pc, #132]	; (80012b0 <loadMenuTexts+0xb48>)
 800122c:	f7ff fa81 	bl	8000732 <copyText>
 8001230:	4603      	mov	r3, r0
 8001232:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <loadMenuTexts+0xb4c>)
 8001234:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <loadMenuTexts+0xb50>)
 8001238:	f7ff fa7b 	bl	8000732 <copyText>
 800123c:	4603      	mov	r3, r0
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <loadMenuTexts+0xb54>)
 8001240:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <loadMenuTexts+0xb58>)
 8001244:	f7ff fa75 	bl	8000732 <copyText>
 8001248:	4603      	mov	r3, r0
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <loadMenuTexts+0xb5c>)
 800124c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <loadMenuTexts+0xb60>)
 8001250:	f7ff fa6f 	bl	8000732 <copyText>
 8001254:	4603      	mov	r3, r0
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <loadMenuTexts+0xb64>)
 8001258:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <loadMenuTexts+0xb68>)
 800125c:	f7ff fa69 	bl	8000732 <copyText>
 8001260:	4603      	mov	r3, r0
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <loadMenuTexts+0xb6c>)
 8001264:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8001266:	481c      	ldr	r0, [pc, #112]	; (80012d8 <loadMenuTexts+0xb70>)
 8001268:	f7ff fa63 	bl	8000732 <copyText>
 800126c:	4603      	mov	r3, r0
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <loadMenuTexts+0xb74>)
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000de0 	.word	0x20000de0
 8001280:	20000850 	.word	0x20000850
 8001284:	20000de4 	.word	0x20000de4
 8001288:	20000860 	.word	0x20000860
 800128c:	20000de8 	.word	0x20000de8
 8001290:	20000870 	.word	0x20000870
 8001294:	20000dec 	.word	0x20000dec
 8001298:	20000880 	.word	0x20000880
 800129c:	20000df0 	.word	0x20000df0
 80012a0:	20000890 	.word	0x20000890
 80012a4:	20000df4 	.word	0x20000df4
 80012a8:	200008a0 	.word	0x200008a0
 80012ac:	20000e00 	.word	0x20000e00
 80012b0:	200008b0 	.word	0x200008b0
 80012b4:	20000e04 	.word	0x20000e04
 80012b8:	200008c0 	.word	0x200008c0
 80012bc:	20000e08 	.word	0x20000e08
 80012c0:	200008d0 	.word	0x200008d0
 80012c4:	20000e0c 	.word	0x20000e0c
 80012c8:	200008e0 	.word	0x200008e0
 80012cc:	20000e10 	.word	0x20000e10
 80012d0:	200008f0 	.word	0x200008f0
 80012d4:	20000e14 	.word	0x20000e14
 80012d8:	20000900 	.word	0x20000900
 80012dc:	20000e18 	.word	0x20000e18

080012e0 <HAL_TIM_PeriodElapsedCallback>:
		lcd_print(2, 7, "          ");
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000cbc 	.word	0x20000cbc

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f000 ff97 	bl	8002238 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f000 fff5 	bl	80022fc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 fbd1 	bl	8001ab8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f000 fcf3 	bl	8001d00 <MX_GPIO_Init>
  MX_CAN_Init();
 800131a:	f000 fc13 	bl	8001b44 <MX_CAN_Init>
  MX_I2C1_Init();
 800131e:	f000 fc45 	bl	8001bac <MX_I2C1_Init>
  MX_TIM1_Init();
 8001322:	f000 fc71 	bl	8001c08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001326:	f000 fcc1 	bl	8001cac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	4848      	ldr	r0, [pc, #288]	; (8001450 <main+0x150>)
 8001330:	f001 fc89 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	4845      	ldr	r0, [pc, #276]	; (8001450 <main+0x150>)
 800133a:	f001 fc84 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f000 ffdc 	bl	80022fc <HAL_Delay>
  lcd_init();
 8001344:	f7ff f9a7 	bl	8000696 <lcd_init>
  HAL_Delay(10);
 8001348:	200a      	movs	r0, #10
 800134a:	f000 ffd7 	bl	80022fc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800134e:	4841      	ldr	r0, [pc, #260]	; (8001454 <main+0x154>)
 8001350:	f003 f934 	bl	80045bc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8001354:	bf00      	nop
 8001356:	4840      	ldr	r0, [pc, #256]	; (8001458 <main+0x158>)
 8001358:	f002 f975 	bl	8003646 <HAL_I2C_GetError>
 800135c:	4603      	mov	r3, r0
 800135e:	2b04      	cmp	r3, #4
 8001360:	d0f9      	beq.n	8001356 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001362:	bf00      	nop
 8001364:	483c      	ldr	r0, [pc, #240]	; (8001458 <main+0x158>)
 8001366:	f002 f961 	bl	800362c <HAL_I2C_GetState>
 800136a:	4603      	mov	r3, r0
 800136c:	2b20      	cmp	r3, #32
 800136e:	d1f9      	bne.n	8001364 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001376:	4836      	ldr	r0, [pc, #216]	; (8001450 <main+0x150>)
 8001378:	f001 fc65 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001382:	4833      	ldr	r0, [pc, #204]	; (8001450 <main+0x150>)
 8001384:	f001 fc5f 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2104      	movs	r1, #4
 800138c:	4830      	ldr	r0, [pc, #192]	; (8001450 <main+0x150>)
 800138e:	f001 fc5a 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	482e      	ldr	r0, [pc, #184]	; (8001450 <main+0x150>)
 8001398:	f001 fc55 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <main+0x150>)
 80013a2:	f001 fc50 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	482c      	ldr	r0, [pc, #176]	; (800145c <main+0x15c>)
 80013ac:	f001 fc4b 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2110      	movs	r1, #16
 80013b4:	4829      	ldr	r0, [pc, #164]	; (800145c <main+0x15c>)
 80013b6:	f001 fc46 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	4828      	ldr	r0, [pc, #160]	; (8001460 <main+0x160>)
 80013c0:	f001 fc41 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	4825      	ldr	r0, [pc, #148]	; (8001460 <main+0x160>)
 80013ca:	f001 fc3c 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <main+0x160>)
 80013d4:	f001 fc37 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2110      	movs	r1, #16
 80013dc:	4820      	ldr	r0, [pc, #128]	; (8001460 <main+0x160>)
 80013de:	f001 fc32 	bl	8002c46 <HAL_GPIO_WritePin>

  i2cTest();
 80013e2:	f000 f84b 	bl	800147c <i2cTest>
  HAL_Delay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f000 ff88 	bl	80022fc <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <main+0x164>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff f97f 	bl	80006f4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <main+0x168>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff f97a 	bl	80006f4 <lcd_print>
  HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f000 ff7a 	bl	80022fc <HAL_Delay>
  lcd_clear();
 8001408:	f7ff f989 	bl	800071e <lcd_clear>

  eepromKontrol();
 800140c:	f000 f8e4 	bl	80015d8 <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <main+0x16c>)
 8001412:	1d3c      	adds	r4, r7, #4
 8001414:	461d      	mov	r5, r3
 8001416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800141e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fda0 	bl	8004f6c <osThreadCreate>
 800142c:	4603      	mov	r3, r0
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <main+0x170>)
 8001430:	6013      	str	r3, [r2, #0]

  //xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  //xTaskCreate(wifiTask, "wifiTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(wifiTaskTest, "wifiTaskTest", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8001432:	2300      	movs	r3, #0
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2301      	movs	r3, #1
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <main+0x174>)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <main+0x178>)
 8001442:	f003 fefe 	bl	8005242 <xTaskCreate>
  vTaskStartScheduler();
 8001446:	f004 f85f 	bl	8005508 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800144a:	f003 fd88 	bl	8004f5e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800144e:	e7fe      	b.n	800144e <main+0x14e>
 8001450:	40010c00 	.word	0x40010c00
 8001454:	20000edc 	.word	0x20000edc
 8001458:	20000e44 	.word	0x20000e44
 800145c:	40011000 	.word	0x40011000
 8001460:	40010800 	.word	0x40010800
 8001464:	08007878 	.word	0x08007878
 8001468:	0800788c 	.word	0x0800788c
 800146c:	080078bc 	.word	0x080078bc
 8001470:	20000f24 	.word	0x20000f24
 8001474:	080078a0 	.word	0x080078a0
 8001478:	08001a99 	.word	0x08001a99

0800147c <i2cTest>:
	for(int i=0; i<indeksSayisi; i++) {
		eepromData[eepromVal[i]] = 0;
	}
}

void i2cTest(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8001482:	463b      	mov	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <i2cTest+0x154>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <i2cTest+0x154>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800149e:	484c      	ldr	r0, [pc, #304]	; (80015d0 <i2cTest+0x154>)
 80014a0:	f001 fd2e 	bl	8002f00 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a4:	23c0      	movs	r3, #192	; 0xc0
 80014a6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80014a8:	2311      	movs	r3, #17
 80014aa:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4846      	ldr	r0, [pc, #280]	; (80015d4 <i2cTest+0x158>)
 80014ba:	f001 f94d 	bl	8002758 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	4844      	ldr	r0, [pc, #272]	; (80015d4 <i2cTest+0x158>)
 80014c4:	f001 fbbf 	bl	8002c46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	4841      	ldr	r0, [pc, #260]	; (80015d4 <i2cTest+0x158>)
 80014ce:	f001 fbba 	bl	8002c46 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 ff12 	bl	80022fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80014d8:	bf00      	nop
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	483d      	ldr	r0, [pc, #244]	; (80015d4 <i2cTest+0x158>)
 80014de:	f001 fb9b 	bl	8002c18 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d006      	beq.n	80014f6 <i2cTest+0x7a>
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	483a      	ldr	r0, [pc, #232]	; (80015d4 <i2cTest+0x158>)
 80014ec:	f001 fb94 	bl	8002c18 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d1f1      	bne.n	80014da <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	4836      	ldr	r0, [pc, #216]	; (80015d4 <i2cTest+0x158>)
 80014fc:	f001 fba3 	bl	8002c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001500:	200a      	movs	r0, #10
 8001502:	f000 fefb 	bl	80022fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001506:	bf00      	nop
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	4832      	ldr	r0, [pc, #200]	; (80015d4 <i2cTest+0x158>)
 800150c:	f001 fb84 	bl	8002c18 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d0f8      	beq.n	8001508 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	482e      	ldr	r0, [pc, #184]	; (80015d4 <i2cTest+0x158>)
 800151c:	f001 fb93 	bl	8002c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f000 feeb 	bl	80022fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001526:	bf00      	nop
 8001528:	2140      	movs	r1, #64	; 0x40
 800152a:	482a      	ldr	r0, [pc, #168]	; (80015d4 <i2cTest+0x158>)
 800152c:	f001 fb74 	bl	8002c18 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d0f8      	beq.n	8001528 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4826      	ldr	r0, [pc, #152]	; (80015d4 <i2cTest+0x158>)
 800153c:	f001 fb83 	bl	8002c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001540:	200a      	movs	r0, #10
 8001542:	f000 fedb 	bl	80022fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8001546:	bf00      	nop
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	4822      	ldr	r0, [pc, #136]	; (80015d4 <i2cTest+0x158>)
 800154c:	f001 fb64 	bl	8002c18 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1f8      	bne.n	8001548 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	481e      	ldr	r0, [pc, #120]	; (80015d4 <i2cTest+0x158>)
 800155c:	f001 fb73 	bl	8002c46 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f000 fecb 	bl	80022fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001566:	bf00      	nop
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	481a      	ldr	r0, [pc, #104]	; (80015d4 <i2cTest+0x158>)
 800156c:	f001 fb54 	bl	8002c18 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d1f8      	bne.n	8001568 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800157a:	2312      	movs	r3, #18
 800157c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <i2cTest+0x158>)
 800158c:	f001 f8e4 	bl	8002758 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <i2cTest+0x154>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <i2cTest+0x154>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <i2cTest+0x154>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <i2cTest+0x154>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <i2cTest+0x154>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <i2cTest+0x154>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <i2cTest+0x154>)
 80015c2:	f001 fb59 	bl	8002c78 <HAL_I2C_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000e44 	.word	0x20000e44
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <eepromKontrol>:
		lcd_print(1, 1, mainText);
		lcd_print(2, 1, mainText2);
	}
}

void eepromKontrol() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80015de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	233f      	movs	r3, #63	; 0x3f
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	4b9b      	ldr	r3, [pc, #620]	; (8001858 <eepromKontrol+0x280>)
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	233f      	movs	r3, #63	; 0x3f
 80015ee:	2200      	movs	r2, #0
 80015f0:	21a0      	movs	r1, #160	; 0xa0
 80015f2:	489a      	ldr	r0, [pc, #616]	; (800185c <eepromKontrol+0x284>)
 80015f4:	f001 fdb2 	bl	800315c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fc:	f000 fe7e 	bl	80022fc <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8001600:	4b95      	ldr	r3, [pc, #596]	; (8001858 <eepromKontrol+0x280>)
 8001602:	78da      	ldrb	r2, [r3, #3]
 8001604:	4b96      	ldr	r3, [pc, #600]	; (8001860 <eepromKontrol+0x288>)
 8001606:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8001608:	4b93      	ldr	r3, [pc, #588]	; (8001858 <eepromKontrol+0x280>)
 800160a:	785a      	ldrb	r2, [r3, #1]
 800160c:	4b95      	ldr	r3, [pc, #596]	; (8001864 <eepromKontrol+0x28c>)
 800160e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8001610:	4b91      	ldr	r3, [pc, #580]	; (8001858 <eepromKontrol+0x280>)
 8001612:	789a      	ldrb	r2, [r3, #2]
 8001614:	4b94      	ldr	r3, [pc, #592]	; (8001868 <eepromKontrol+0x290>)
 8001616:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8001618:	4b8f      	ldr	r3, [pc, #572]	; (8001858 <eepromKontrol+0x280>)
 800161a:	791a      	ldrb	r2, [r3, #4]
 800161c:	4b93      	ldr	r3, [pc, #588]	; (800186c <eepromKontrol+0x294>)
 800161e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8001620:	4b8d      	ldr	r3, [pc, #564]	; (8001858 <eepromKontrol+0x280>)
 8001622:	795a      	ldrb	r2, [r3, #5]
 8001624:	4b92      	ldr	r3, [pc, #584]	; (8001870 <eepromKontrol+0x298>)
 8001626:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8001628:	4b8b      	ldr	r3, [pc, #556]	; (8001858 <eepromKontrol+0x280>)
 800162a:	799a      	ldrb	r2, [r3, #6]
 800162c:	4b91      	ldr	r3, [pc, #580]	; (8001874 <eepromKontrol+0x29c>)
 800162e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8001630:	4b89      	ldr	r3, [pc, #548]	; (8001858 <eepromKontrol+0x280>)
 8001632:	79da      	ldrb	r2, [r3, #7]
 8001634:	4b90      	ldr	r3, [pc, #576]	; (8001878 <eepromKontrol+0x2a0>)
 8001636:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8001638:	4b87      	ldr	r3, [pc, #540]	; (8001858 <eepromKontrol+0x280>)
 800163a:	7a1a      	ldrb	r2, [r3, #8]
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <eepromKontrol+0x2a4>)
 800163e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8001640:	4b85      	ldr	r3, [pc, #532]	; (8001858 <eepromKontrol+0x280>)
 8001642:	7a5a      	ldrb	r2, [r3, #9]
 8001644:	4b8e      	ldr	r3, [pc, #568]	; (8001880 <eepromKontrol+0x2a8>)
 8001646:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8001648:	4b83      	ldr	r3, [pc, #524]	; (8001858 <eepromKontrol+0x280>)
 800164a:	7a9a      	ldrb	r2, [r3, #10]
 800164c:	4b8d      	ldr	r3, [pc, #564]	; (8001884 <eepromKontrol+0x2ac>)
 800164e:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8001650:	4b81      	ldr	r3, [pc, #516]	; (8001858 <eepromKontrol+0x280>)
 8001652:	7ada      	ldrb	r2, [r3, #11]
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <eepromKontrol+0x2b0>)
 8001656:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8001658:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <eepromKontrol+0x280>)
 800165a:	7b1a      	ldrb	r2, [r3, #12]
 800165c:	4b8b      	ldr	r3, [pc, #556]	; (800188c <eepromKontrol+0x2b4>)
 800165e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8001660:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <eepromKontrol+0x280>)
 8001662:	7b5a      	ldrb	r2, [r3, #13]
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <eepromKontrol+0x2b8>)
 8001666:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <eepromKontrol+0x280>)
 800166a:	7b9a      	ldrb	r2, [r3, #14]
 800166c:	4b89      	ldr	r3, [pc, #548]	; (8001894 <eepromKontrol+0x2bc>)
 800166e:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8001670:	4b79      	ldr	r3, [pc, #484]	; (8001858 <eepromKontrol+0x280>)
 8001672:	7bda      	ldrb	r2, [r3, #15]
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <eepromKontrol+0x2c0>)
 8001676:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8001678:	4b77      	ldr	r3, [pc, #476]	; (8001858 <eepromKontrol+0x280>)
 800167a:	7c1a      	ldrb	r2, [r3, #16]
 800167c:	4b87      	ldr	r3, [pc, #540]	; (800189c <eepromKontrol+0x2c4>)
 800167e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <eepromKontrol+0x280>)
 8001682:	7c5a      	ldrb	r2, [r3, #17]
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <eepromKontrol+0x2c8>)
 8001686:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8001688:	4b73      	ldr	r3, [pc, #460]	; (8001858 <eepromKontrol+0x280>)
 800168a:	7c9a      	ldrb	r2, [r3, #18]
 800168c:	4b85      	ldr	r3, [pc, #532]	; (80018a4 <eepromKontrol+0x2cc>)
 800168e:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8001690:	4b71      	ldr	r3, [pc, #452]	; (8001858 <eepromKontrol+0x280>)
 8001692:	7cda      	ldrb	r2, [r3, #19]
 8001694:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <eepromKontrol+0x2d0>)
 8001696:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8001698:	4b6f      	ldr	r3, [pc, #444]	; (8001858 <eepromKontrol+0x280>)
 800169a:	7d1a      	ldrb	r2, [r3, #20]
 800169c:	4b83      	ldr	r3, [pc, #524]	; (80018ac <eepromKontrol+0x2d4>)
 800169e:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <eepromKontrol+0x280>)
 80016a2:	7d5a      	ldrb	r2, [r3, #21]
 80016a4:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <eepromKontrol+0x2d8>)
 80016a6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <eepromKontrol+0x280>)
 80016aa:	7d9a      	ldrb	r2, [r3, #22]
 80016ac:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <eepromKontrol+0x2dc>)
 80016ae:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80016b0:	4b69      	ldr	r3, [pc, #420]	; (8001858 <eepromKontrol+0x280>)
 80016b2:	7dda      	ldrb	r2, [r3, #23]
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <eepromKontrol+0x2e0>)
 80016b6:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <eepromKontrol+0x280>)
 80016ba:	7e1a      	ldrb	r2, [r3, #24]
 80016bc:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <eepromKontrol+0x2e4>)
 80016be:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80016c0:	4b65      	ldr	r3, [pc, #404]	; (8001858 <eepromKontrol+0x280>)
 80016c2:	7e5a      	ldrb	r2, [r3, #25]
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <eepromKontrol+0x2e8>)
 80016c6:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <eepromKontrol+0x280>)
 80016ca:	7e9a      	ldrb	r2, [r3, #26]
 80016cc:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <eepromKontrol+0x2ec>)
 80016ce:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80016d0:	4b61      	ldr	r3, [pc, #388]	; (8001858 <eepromKontrol+0x280>)
 80016d2:	7eda      	ldrb	r2, [r3, #27]
 80016d4:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <eepromKontrol+0x2f0>)
 80016d6:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80016d8:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <eepromKontrol+0x280>)
 80016da:	7f1a      	ldrb	r2, [r3, #28]
 80016dc:	4b7b      	ldr	r3, [pc, #492]	; (80018cc <eepromKontrol+0x2f4>)
 80016de:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <eepromKontrol+0x280>)
 80016e2:	7f5a      	ldrb	r2, [r3, #29]
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <eepromKontrol+0x2f8>)
 80016e6:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80016e8:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <eepromKontrol+0x280>)
 80016ea:	7f9a      	ldrb	r2, [r3, #30]
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <eepromKontrol+0x2fc>)
 80016ee:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <eepromKontrol+0x280>)
 80016f2:	7fda      	ldrb	r2, [r3, #31]
 80016f4:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <eepromKontrol+0x300>)
 80016f6:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <eepromKontrol+0x280>)
 80016fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80016fe:	4b77      	ldr	r3, [pc, #476]	; (80018dc <eepromKontrol+0x304>)
 8001700:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <eepromKontrol+0x280>)
 8001704:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001708:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <eepromKontrol+0x308>)
 800170a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800170c:	4b52      	ldr	r3, [pc, #328]	; (8001858 <eepromKontrol+0x280>)
 800170e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <eepromKontrol+0x30c>)
 8001714:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8001716:	4b50      	ldr	r3, [pc, #320]	; (8001858 <eepromKontrol+0x280>)
 8001718:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800171c:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <eepromKontrol+0x310>)
 800171e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8001720:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <eepromKontrol+0x280>)
 8001722:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001726:	4b71      	ldr	r3, [pc, #452]	; (80018ec <eepromKontrol+0x314>)
 8001728:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 800172a:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <eepromKontrol+0x280>)
 800172c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <eepromKontrol+0x318>)
 8001732:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8001734:	4b48      	ldr	r3, [pc, #288]	; (8001858 <eepromKontrol+0x280>)
 8001736:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800173a:	4b6e      	ldr	r3, [pc, #440]	; (80018f4 <eepromKontrol+0x31c>)
 800173c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 800173e:	4b46      	ldr	r3, [pc, #280]	; (8001858 <eepromKontrol+0x280>)
 8001740:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001744:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <eepromKontrol+0x320>)
 8001746:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <eepromKontrol+0x280>)
 800174a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800174e:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <eepromKontrol+0x324>)
 8001750:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <eepromKontrol+0x280>)
 8001754:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <eepromKontrol+0x328>)
 800175a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <eepromKontrol+0x280>)
 800175e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8001762:	4b68      	ldr	r3, [pc, #416]	; (8001904 <eepromKontrol+0x32c>)
 8001764:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <eepromKontrol+0x280>)
 8001768:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <eepromKontrol+0x330>)
 800176e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <eepromKontrol+0x280>)
 8001772:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <eepromKontrol+0x334>)
 8001778:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <eepromKontrol+0x280>)
 800177c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001780:	4b63      	ldr	r3, [pc, #396]	; (8001910 <eepromKontrol+0x338>)
 8001782:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <eepromKontrol+0x280>)
 8001786:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800178a:	4b62      	ldr	r3, [pc, #392]	; (8001914 <eepromKontrol+0x33c>)
 800178c:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 800178e:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <eepromKontrol+0x308>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ffe8 	bl	8000768 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <eepromKontrol+0x304>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b09      	cmp	r3, #9
 800179e:	d902      	bls.n	80017a6 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 80017a0:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <eepromKontrol+0x304>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <eepromKontrol+0x300>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d902      	bls.n	80017b4 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <eepromKontrol+0x300>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <eepromKontrol+0x2fc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d902      	bls.n	80017c2 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <eepromKontrol+0x2fc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80017c2:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <eepromKontrol+0x2f8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b09      	cmp	r3, #9
 80017c8:	d902      	bls.n	80017d0 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <eepromKontrol+0x2f8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80017d0:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <eepromKontrol+0x2f4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d902      	bls.n	80017de <eepromKontrol+0x206>
	    calismaSayisi1=0;
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <eepromKontrol+0x2f4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <eepromKontrol+0x28c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d902      	bls.n	80017ec <eepromKontrol+0x214>
	    calismaSekli=0;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <eepromKontrol+0x28c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <eepromKontrol+0x290>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d902      	bls.n	80017fa <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <eepromKontrol+0x290>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <eepromKontrol+0x294>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d902      	bls.n	8001808 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <eepromKontrol+0x294>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <eepromKontrol+0x298>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d902      	bls.n	8001816 <eepromKontrol+0x23e>
	    altLimit=1;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <eepromKontrol+0x298>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <eepromKontrol+0x29c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d902      	bls.n	8001824 <eepromKontrol+0x24c>
	    basincSalteri=1;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <eepromKontrol+0x29c>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <eepromKontrol+0x2a0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d902      	bls.n	8001832 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <eepromKontrol+0x2a0>)
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <eepromKontrol+0x314>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d902      	bls.n	8001840 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <eepromKontrol+0x314>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <eepromKontrol+0x2a4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d902      	bls.n	800184e <eepromKontrol+0x276>
	    kapi1Tip=1;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <eepromKontrol+0x2a4>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <eepromKontrol+0x2a8>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d963      	bls.n	800191e <eepromKontrol+0x346>
 8001856:	e05f      	b.n	8001918 <eepromKontrol+0x340>
 8001858:	20000c7c 	.word	0x20000c7c
 800185c:	20000e44 	.word	0x20000e44
 8001860:	20000cbb 	.word	0x20000cbb
 8001864:	20000cc4 	.word	0x20000cc4
 8001868:	20000cc5 	.word	0x20000cc5
 800186c:	20000cc6 	.word	0x20000cc6
 8001870:	20000cc7 	.word	0x20000cc7
 8001874:	20000cc8 	.word	0x20000cc8
 8001878:	20000cc9 	.word	0x20000cc9
 800187c:	20000cca 	.word	0x20000cca
 8001880:	20000cda 	.word	0x20000cda
 8001884:	20000ccb 	.word	0x20000ccb
 8001888:	20000cdb 	.word	0x20000cdb
 800188c:	20000ccc 	.word	0x20000ccc
 8001890:	20000cdc 	.word	0x20000cdc
 8001894:	20000ccf 	.word	0x20000ccf
 8001898:	20000cd0 	.word	0x20000cd0
 800189c:	20000cd1 	.word	0x20000cd1
 80018a0:	20000cd2 	.word	0x20000cd2
 80018a4:	20000cd3 	.word	0x20000cd3
 80018a8:	20000cd4 	.word	0x20000cd4
 80018ac:	20000cd5 	.word	0x20000cd5
 80018b0:	20000cd6 	.word	0x20000cd6
 80018b4:	20000cd7 	.word	0x20000cd7
 80018b8:	20000cd8 	.word	0x20000cd8
 80018bc:	20000cd9 	.word	0x20000cd9
 80018c0:	20000cdd 	.word	0x20000cdd
 80018c4:	20000cde 	.word	0x20000cde
 80018c8:	20000cc0 	.word	0x20000cc0
 80018cc:	20000cc1 	.word	0x20000cc1
 80018d0:	20000cc2 	.word	0x20000cc2
 80018d4:	20000910 	.word	0x20000910
 80018d8:	20000911 	.word	0x20000911
 80018dc:	20000cc3 	.word	0x20000cc3
 80018e0:	20000ce0 	.word	0x20000ce0
 80018e4:	20000cce 	.word	0x20000cce
 80018e8:	20000cdf 	.word	0x20000cdf
 80018ec:	20000ccd 	.word	0x20000ccd
 80018f0:	20000ce1 	.word	0x20000ce1
 80018f4:	20000ce2 	.word	0x20000ce2
 80018f8:	20000ce3 	.word	0x20000ce3
 80018fc:	20000ce4 	.word	0x20000ce4
 8001900:	20000ce5 	.word	0x20000ce5
 8001904:	20000ce6 	.word	0x20000ce6
 8001908:	20000ce7 	.word	0x20000ce7
 800190c:	20000ce8 	.word	0x20000ce8
 8001910:	20000ce9 	.word	0x20000ce9
 8001914:	20000cea 	.word	0x20000cea
	    kapi1AcSure=5;
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <eepromKontrol+0x46c>)
 800191a:	2205      	movs	r2, #5
 800191c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <eepromKontrol+0x470>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d902      	bls.n	800192c <eepromKontrol+0x354>
	    kapi2Tip=1;
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <eepromKontrol+0x470>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <eepromKontrol+0x474>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d902      	bls.n	800193a <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <eepromKontrol+0x474>)
 8001936:	2205      	movs	r2, #5
 8001938:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800193a:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <eepromKontrol+0x478>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d902      	bls.n	8001948 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8001942:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <eepromKontrol+0x478>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8001948:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <eepromKontrol+0x47c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d902      	bls.n	8001956 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8001950:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <eepromKontrol+0x47c>)
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <eepromKontrol+0x480>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d902      	bls.n	8001964 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 800195e:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <eepromKontrol+0x480>)
 8001960:	2205      	movs	r2, #5
 8001962:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8001964:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <eepromKontrol+0x484>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d902      	bls.n	8001972 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <eepromKontrol+0x484>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <eepromKontrol+0x488>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d902      	bls.n	8001980 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <eepromKontrol+0x488>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <eepromKontrol+0x48c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d902      	bls.n	800198e <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <eepromKontrol+0x48c>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <eepromKontrol+0x490>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d902      	bls.n	800199c <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <eepromKontrol+0x490>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <eepromKontrol+0x494>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d902      	bls.n	80019aa <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <eepromKontrol+0x494>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <eepromKontrol+0x498>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d902      	bls.n	80019b8 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <eepromKontrol+0x498>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <eepromKontrol+0x49c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d902      	bls.n	80019c6 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <eepromKontrol+0x49c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <eepromKontrol+0x4a0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d902      	bls.n	80019d4 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <eepromKontrol+0x4a0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <eepromKontrol+0x4a4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d902      	bls.n	80019e2 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <eepromKontrol+0x4a4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <eepromKontrol+0x4a8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d902      	bls.n	80019f0 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <eepromKontrol+0x4a8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <eepromKontrol+0x4ac>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2bb4      	cmp	r3, #180	; 0xb4
 80019f6:	d902      	bls.n	80019fe <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <eepromKontrol+0x4ac>)
 80019fa:	223c      	movs	r2, #60	; 0x3c
 80019fc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <eepromKontrol+0x4b0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d902      	bls.n	8001a0c <eepromKontrol+0x434>
	    buzzer=0;
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <eepromKontrol+0x4b0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <eepromKontrol+0x4b4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d902      	bls.n	8001a1a <eepromKontrol+0x442>
	    demoMode=0;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <eepromKontrol+0x4b4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <eepromKontrol+0x4b8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d902      	bls.n	8001a28 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <eepromKontrol+0x4b8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <eepromKontrol+0x4bc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d902      	bls.n	8001a36 <eepromKontrol+0x45e>
	    dilSecim=0;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <eepromKontrol+0x4bc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8001a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3a:	f000 fc5f 	bl	80022fc <HAL_Delay>
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000cda 	.word	0x20000cda
 8001a48:	20000ccb 	.word	0x20000ccb
 8001a4c:	20000cdb 	.word	0x20000cdb
 8001a50:	20000ccc 	.word	0x20000ccc
 8001a54:	20000cce 	.word	0x20000cce
 8001a58:	20000cdc 	.word	0x20000cdc
 8001a5c:	20000ccf 	.word	0x20000ccf
 8001a60:	20000cd0 	.word	0x20000cd0
 8001a64:	20000cd1 	.word	0x20000cd1
 8001a68:	20000cd2 	.word	0x20000cd2
 8001a6c:	20000cd3 	.word	0x20000cd3
 8001a70:	20000cd4 	.word	0x20000cd4
 8001a74:	20000cd5 	.word	0x20000cd5
 8001a78:	20000cd6 	.word	0x20000cd6
 8001a7c:	20000cd7 	.word	0x20000cd7
 8001a80:	20000cd8 	.word	0x20000cd8
 8001a84:	20000cd9 	.word	0x20000cd9
 8001a88:	20000cdd 	.word	0x20000cdd
 8001a8c:	20000cde 	.word	0x20000cde
 8001a90:	20000cdf 	.word	0x20000cdf
 8001a94:	20000ce0 	.word	0x20000ce0

08001a98 <wifiTaskTest>:
		HAL_UART_Transmit(&huart1, (uint8_t *)cipCloseCommand, strlen(cipCloseCommand), HAL_MAX_DELAY);
		HAL_Delay(1000);
	}
}

void wifiTaskTest(void *pvParameters) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	//connectWifi();
	ESP_Init("iPhone SE (2nd generation)", "asdasd009912");
 8001aa0:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <wifiTaskTest+0x18>)
 8001aa2:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <wifiTaskTest+0x1c>)
 8001aa4:	f7fe fbcc 	bl	8000240 <ESP_Init>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08007ad4 	.word	0x08007ad4
 8001ab4:	08007ae4 	.word	0x08007ae4

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b090      	sub	sp, #64	; 0x40
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	2228      	movs	r2, #40	; 0x28
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fcfe 	bl	80064c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001af6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 f8f1 	bl	8003ce8 <HAL_RCC_OscConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b0c:	f000 f9aa 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b10:	230f      	movs	r3, #15
 8001b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fb5e 	bl	80041ec <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b36:	f000 f995 	bl	8001e64 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3740      	adds	r7, #64	; 0x40
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <MX_CAN_Init+0x64>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b50:	2210      	movs	r2, #16
 8001b52:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_CAN_Init+0x60>)
 8001b92:	f000 fbd7 	bl	8002344 <HAL_CAN_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f000 f962 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000e1c 	.word	0x20000e1c
 8001ba8:	40006400 	.word	0x40006400

08001bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <MX_I2C1_Init+0x54>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_I2C1_Init+0x58>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bea:	f001 f845 	bl	8002c78 <HAL_I2C_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf4:	f000 f936 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000e44 	.word	0x20000e44
 8001c00:	40005400 	.word	0x40005400
 8001c04:	00061a80 	.word	0x00061a80

08001c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MX_TIM1_Init+0xa0>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c2c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001c30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c3a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c54:	f002 fc62 	bl	800451c <HAL_TIM_Base_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 f901 	bl	8001e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c70:	f002 fe0c 	bl	800488c <HAL_TIM_ConfigClockSource>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c7a:	f000 f8f3 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_TIM1_Init+0x9c>)
 8001c8c:	f002 fff6 	bl	8004c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c96:	f000 f8e5 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000edc 	.word	0x20000edc
 8001ca8:	40012c00 	.word	0x40012c00

08001cac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART1_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f003 f848 	bl	8004d78 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f000 f8b9 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000e98 	.word	0x20000e98
 8001cfc:	40013800 	.word	0x40013800

08001d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2c:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	21f0      	movs	r1, #240	; 0xf0
 8001d78:	4833      	ldr	r0, [pc, #204]	; (8001e48 <MX_GPIO_Init+0x148>)
 8001d7a:	f000 ff64 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f241 0130 	movw	r1, #4144	; 0x1030
 8001d84:	4831      	ldr	r0, [pc, #196]	; (8001e4c <MX_GPIO_Init+0x14c>)
 8001d86:	f000 ff5e 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f640 4107 	movw	r1, #3079	; 0xc07
 8001d90:	482f      	ldr	r0, [pc, #188]	; (8001e50 <MX_GPIO_Init+0x150>)
 8001d92:	f000 ff58 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8001d96:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8001d9a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	4828      	ldr	r0, [pc, #160]	; (8001e4c <MX_GPIO_Init+0x14c>)
 8001dac:	f000 fcd4 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8001db0:	f248 130f 	movw	r3, #33039	; 0x810f
 8001db4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4820      	ldr	r0, [pc, #128]	; (8001e48 <MX_GPIO_Init+0x148>)
 8001dc6:	f000 fcc7 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8001dca:	23f0      	movs	r3, #240	; 0xf0
 8001dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	4819      	ldr	r0, [pc, #100]	; (8001e48 <MX_GPIO_Init+0x148>)
 8001de2:	f000 fcb9 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8001de6:	f241 0330 	movw	r3, #4144	; 0x1030
 8001dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_GPIO_Init+0x14c>)
 8001e00:	f000 fcaa 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8001e04:	f640 4307 	movw	r3, #3079	; 0xc07
 8001e08:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_GPIO_Init+0x150>)
 8001e1e:	f000 fc9b 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8001e22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_GPIO_Init+0x150>)
 8001e38:	f000 fc8e 	bl	8002758 <HAL_GPIO_Init>

}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40010c00 	.word	0x40010c00

08001e54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f003 f8d1 	bl	8005004 <osDelay>
 8001e62:	e7fb      	b.n	8001e5c <StartDefaultTask+0x8>

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6193      	str	r3, [r2, #24]
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_MspInit+0x68>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	f06f 0001 	mvn.w	r0, #1
 8001eae:	f000 fc1c 	bl	80026ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_MspInit+0x6c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_MspInit+0x6c>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000

08001ee0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_CAN_MspInit+0x8c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d131      	bne.n	8001f64 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	61d3      	str	r3, [r2, #28]
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_CAN_MspInit+0x94>)
 8001f46:	f000 fc07 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_CAN_MspInit+0x94>)
 8001f60:	f000 fbfa 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40006400 	.word	0x40006400
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010800 	.word	0x40010800

08001f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_I2C_MspInit+0x70>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d123      	bne.n	8001fe0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <HAL_I2C_MspInit+0x78>)
 8001fc4:	f000 fbc8 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd2:	61d3      	str	r3, [r2, #28]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_I2C_MspInit+0x74>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010c00 	.word	0x40010c00

08001ff4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_I2C_MspDeInit+0x38>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10d      	bne.n	8002022 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_I2C_MspDeInit+0x3c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_I2C_MspDeInit+0x3c>)
 800200c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002010:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <HAL_I2C_MspDeInit+0x40>)
 8002016:	f000 fd33 	bl	8002a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_I2C_MspDeInit+0x40>)
 800201e:	f000 fd2f 	bl	8002a80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40005400 	.word	0x40005400
 8002030:	40021000 	.word	0x40021000
 8002034:	40010c00 	.word	0x40010c00

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_TIM_Base_MspInit+0x44>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d113      	bne.n	8002072 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_TIM_Base_MspInit+0x48>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_TIM_Base_MspInit+0x48>)
 8002050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_TIM_Base_MspInit+0x48>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2105      	movs	r1, #5
 8002066:	2019      	movs	r0, #25
 8002068:	f000 fb3f 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800206c:	2019      	movs	r0, #25
 800206e:	f000 fb58 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_UART_MspInit+0x8c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d131      	bne.n	8002108 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_UART_MspInit+0x94>)
 80020ea:	f000 fb35 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <HAL_UART_MspInit+0x94>)
 8002104:	f000 fb28 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013800 	.word	0x40013800
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214a:	f000 f8bb 	bl	80022c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800214e:	f003 fcd7 	bl	8005b00 <xTaskGetSchedulerState>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	d001      	beq.n	800215c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002158:	f003 fec6 	bl	8005ee8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM1_UP_IRQHandler+0x10>)
 8002166:	f002 fa89 	bl	800467c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000edc 	.word	0x20000edc

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f004 f9a8 	bl	80064f8 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000c000 	.word	0x2000c000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	20000f28 	.word	0x20000f28
 80021dc:	20001dc8 	.word	0x20001dc8

080021e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	; (8002224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	; (8002230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002212:	f7ff ffe5 	bl	80021e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f004 f975 	bl	8006504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800221a:	f7ff f871 	bl	8001300 <main>
  bx lr
 800221e:	4770      	bx	lr
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000974 	.word	0x20000974
  ldr r2, =_sidata
 8002228:	08007b6c 	.word	0x08007b6c
  ldr r2, =_sbss
 800222c:	20000974 	.word	0x20000974
  ldr r4, =_ebss
 8002230:	20001dc4 	.word	0x20001dc4

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x28>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x28>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 fa43 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f000 f808 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fe0c 	bl	8001e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fa5b 	bl	800273e <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 fa23 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000914 	.word	0x20000914
 80022bc:	2000091c 	.word	0x2000091c
 80022c0:	20000918 	.word	0x20000918

080022c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x1c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x20>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_IncTick+0x20>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	2000091c 	.word	0x2000091c
 80022e4:	20000f2c 	.word	0x20000f2c

080022e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_GetTick+0x10>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000f2c 	.word	0x20000f2c

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fff0 	bl	80022e8 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffe0 	bl	80022e8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000091c 	.word	0x2000091c

08002344 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0ed      	b.n	8002532 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fdbc 	bl	8001ee0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff ffb6 	bl	80022e8 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237e:	e012      	b.n	80023a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002380:	f7ff ffb2 	bl	80022e8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d90b      	bls.n	80023a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2205      	movs	r2, #5
 800239e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0c5      	b.n	8002532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0e5      	beq.n	8002380 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0202 	bic.w	r2, r2, #2
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7ff ff90 	bl	80022e8 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ca:	e012      	b.n	80023f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023cc:	f7ff ff8c 	bl	80022e8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b0a      	cmp	r3, #10
 80023d8:	d90b      	bls.n	80023f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e09f      	b.n	8002532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e5      	bne.n	80023cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7e5b      	ldrb	r3, [r3, #25]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7e9b      	ldrb	r3, [r3, #26]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e007      	b.n	800247e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0220 	bic.w	r2, r2, #32
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7edb      	ldrb	r3, [r3, #27]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0210 	bic.w	r2, r2, #16
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e007      	b.n	80024a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0210 	orr.w	r2, r2, #16
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f1b      	ldrb	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d108      	bne.n	80024c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e007      	b.n	80024d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0208 	bic.w	r2, r2, #8
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7f5b      	ldrb	r3, [r3, #29]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d108      	bne.n	80024ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0204 	orr.w	r2, r2, #4
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e007      	b.n	80024fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4906      	ldr	r1, [pc, #24]	; (80025d4 <__NVIC_EnableIRQ+0x34>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff90 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff2d 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff42 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff35 	bl	80025a0 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b08b      	sub	sp, #44	; 0x2c
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e179      	b.n	8002a60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800276c:	2201      	movs	r2, #1
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8168 	bne.w	8002a5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a96      	ldr	r2, [pc, #600]	; (80029e8 <HAL_GPIO_Init+0x290>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 8002794:	4a94      	ldr	r2, [pc, #592]	; (80029e8 <HAL_GPIO_Init+0x290>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d875      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 800279a:	4a94      	ldr	r2, [pc, #592]	; (80029ec <HAL_GPIO_Init+0x294>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d058      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027a0:	4a92      	ldr	r2, [pc, #584]	; (80029ec <HAL_GPIO_Init+0x294>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d86f      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027a6:	4a92      	ldr	r2, [pc, #584]	; (80029f0 <HAL_GPIO_Init+0x298>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d052      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027ac:	4a90      	ldr	r2, [pc, #576]	; (80029f0 <HAL_GPIO_Init+0x298>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d869      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027b2:	4a90      	ldr	r2, [pc, #576]	; (80029f4 <HAL_GPIO_Init+0x29c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04c      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027b8:	4a8e      	ldr	r2, [pc, #568]	; (80029f4 <HAL_GPIO_Init+0x29c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d863      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027be:	4a8e      	ldr	r2, [pc, #568]	; (80029f8 <HAL_GPIO_Init+0x2a0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d046      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027c4:	4a8c      	ldr	r2, [pc, #560]	; (80029f8 <HAL_GPIO_Init+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d85d      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d82a      	bhi.n	8002824 <HAL_GPIO_Init+0xcc>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d859      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <HAL_GPIO_Init+0x80>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	08002853 	.word	0x08002853
 80027dc:	0800282d 	.word	0x0800282d
 80027e0:	0800283f 	.word	0x0800283f
 80027e4:	08002881 	.word	0x08002881
 80027e8:	08002887 	.word	0x08002887
 80027ec:	08002887 	.word	0x08002887
 80027f0:	08002887 	.word	0x08002887
 80027f4:	08002887 	.word	0x08002887
 80027f8:	08002887 	.word	0x08002887
 80027fc:	08002887 	.word	0x08002887
 8002800:	08002887 	.word	0x08002887
 8002804:	08002887 	.word	0x08002887
 8002808:	08002887 	.word	0x08002887
 800280c:	08002887 	.word	0x08002887
 8002810:	08002887 	.word	0x08002887
 8002814:	08002887 	.word	0x08002887
 8002818:	08002887 	.word	0x08002887
 800281c:	08002835 	.word	0x08002835
 8002820:	08002849 	.word	0x08002849
 8002824:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_GPIO_Init+0x2a4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282a:	e02c      	b.n	8002886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e029      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	3304      	adds	r3, #4
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e024      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	3308      	adds	r3, #8
 8002844:	623b      	str	r3, [r7, #32]
          break;
 8002846:	e01f      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	330c      	adds	r3, #12
 800284e:	623b      	str	r3, [r7, #32]
          break;
 8002850:	e01a      	b.n	8002888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285a:	2304      	movs	r3, #4
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e013      	b.n	8002888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002868:	2308      	movs	r3, #8
 800286a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	611a      	str	r2, [r3, #16]
          break;
 8002872:	e009      	b.n	8002888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002874:	2308      	movs	r3, #8
 8002876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	615a      	str	r2, [r3, #20]
          break;
 800287e:	e003      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
          break;
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x130>
          break;
 8002886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d801      	bhi.n	8002892 <HAL_GPIO_Init+0x13a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_Init+0x13e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d802      	bhi.n	80028a4 <HAL_GPIO_Init+0x14c>
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	e002      	b.n	80028aa <HAL_GPIO_Init+0x152>
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	3b08      	subs	r3, #8
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	210f      	movs	r1, #15
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80c1 	beq.w	8002a5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_GPIO_Init+0x2a8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <HAL_GPIO_Init+0x2a8>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <HAL_GPIO_Init+0x2a8>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f0:	4a44      	ldr	r2, [pc, #272]	; (8002a04 <HAL_GPIO_Init+0x2ac>)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_GPIO_Init+0x2b0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01f      	beq.n	800295c <HAL_GPIO_Init+0x204>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_GPIO_Init+0x2b4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_GPIO_Init+0x200>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_GPIO_Init+0x2b8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1fc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <HAL_GPIO_Init+0x2bc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1f8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <HAL_GPIO_Init+0x2c0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1f4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a37      	ldr	r2, [pc, #220]	; (8002a1c <HAL_GPIO_Init+0x2c4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1f0>
 8002944:	2305      	movs	r3, #5
 8002946:	e00a      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002948:	2306      	movs	r3, #6
 800294a:	e008      	b.n	800295e <HAL_GPIO_Init+0x206>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x206>
 800295c:	2300      	movs	r3, #0
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800296e:	4925      	ldr	r1, [pc, #148]	; (8002a04 <HAL_GPIO_Init+0x2ac>)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4924      	ldr	r1, [pc, #144]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	43db      	mvns	r3, r3
 800299e:	4920      	ldr	r1, [pc, #128]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	491a      	ldr	r1, [pc, #104]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d025      	beq.n	8002a24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	4910      	ldr	r1, [pc, #64]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
 80029e4:	e025      	b.n	8002a32 <HAL_GPIO_Init+0x2da>
 80029e6:	bf00      	nop
 80029e8:	10320000 	.word	0x10320000
 80029ec:	10310000 	.word	0x10310000
 80029f0:	10220000 	.word	0x10220000
 80029f4:	10210000 	.word	0x10210000
 80029f8:	10120000 	.word	0x10120000
 80029fc:	10110000 	.word	0x10110000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	40011800 	.word	0x40011800
 8002a1c:	40011c00 	.word	0x40011c00
 8002a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	4913      	ldr	r1, [pc, #76]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
 8002a4a:	e006      	b.n	8002a5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	4909      	ldr	r1, [pc, #36]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f47f ae7e 	bne.w	800276c <HAL_GPIO_Init+0x14>
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	372c      	adds	r7, #44	; 0x2c
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002a8e:	e0a6      	b.n	8002bde <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8099 	beq.w	8002bd8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002aa6:	4a54      	ldr	r2, [pc, #336]	; (8002bf8 <HAL_GPIO_DeInit+0x178>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_GPIO_DeInit+0x17c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01f      	beq.n	8002b10 <HAL_GPIO_DeInit+0x90>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_GPIO_DeInit+0x180>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_DeInit+0x8c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_GPIO_DeInit+0x184>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_DeInit+0x88>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a49      	ldr	r2, [pc, #292]	; (8002c08 <HAL_GPIO_DeInit+0x188>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_DeInit+0x84>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a48      	ldr	r2, [pc, #288]	; (8002c0c <HAL_GPIO_DeInit+0x18c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_DeInit+0x80>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a47      	ldr	r2, [pc, #284]	; (8002c10 <HAL_GPIO_DeInit+0x190>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_DeInit+0x7c>
 8002af8:	2305      	movs	r3, #5
 8002afa:	e00a      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e008      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_DeInit+0x92>
 8002b10:	2300      	movs	r3, #0
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d132      	bne.n	8002b88 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002b32:	4a31      	ldr	r2, [pc, #196]	; (8002bf8 <HAL_GPIO_DeInit+0x178>)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	482d      	ldr	r0, [pc, #180]	; (8002bf8 <HAL_GPIO_DeInit+0x178>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	400a      	ands	r2, r1
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002b50:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	492e      	ldr	r1, [pc, #184]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	492b      	ldr	r1, [pc, #172]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4924      	ldr	r1, [pc, #144]	; (8002c14 <HAL_GPIO_DeInit+0x194>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d801      	bhi.n	8002b92 <HAL_GPIO_DeInit+0x112>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	e001      	b.n	8002b96 <HAL_GPIO_DeInit+0x116>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d802      	bhi.n	8002ba4 <HAL_GPIO_DeInit+0x124>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	e002      	b.n	8002baa <HAL_GPIO_DeInit+0x12a>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3b08      	subs	r3, #8
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	210f      	movs	r1, #15
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f47f af52 	bne.w	8002a90 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	40010c00 	.word	0x40010c00
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	40011800 	.word	0x40011800
 8002c10:	40011c00 	.word	0x40011c00
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e001      	b.n	8002c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	807b      	strh	r3, [r7, #2]
 8002c52:	4613      	mov	r3, r2
 8002c54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c56:	787b      	ldrb	r3, [r7, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c62:	e003      	b.n	8002c6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	041a      	lsls	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	611a      	str	r2, [r3, #16]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e12b      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f96a 	bl	8001f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f001 fbd8 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_I2C_Init+0x274>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d807      	bhi.n	8002cfc <HAL_I2C_Init+0x84>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a80      	ldr	r2, [pc, #512]	; (8002ef0 <HAL_I2C_Init+0x278>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e006      	b.n	8002d0a <HAL_I2C_Init+0x92>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_I2C_Init+0x27c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0e7      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a78      	ldr	r2, [pc, #480]	; (8002ef8 <HAL_I2C_Init+0x280>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d802      	bhi.n	8002d4c <HAL_I2C_Init+0xd4>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e009      	b.n	8002d60 <HAL_I2C_Init+0xe8>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_I2C_Init+0x284>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	495c      	ldr	r1, [pc, #368]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d819      	bhi.n	8002db4 <HAL_I2C_Init+0x13c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e59      	subs	r1, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d94:	400b      	ands	r3, r1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_I2C_Init+0x138>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e59      	subs	r1, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	e051      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e04f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <HAL_I2C_Init+0x168>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_I2C_Init+0x18e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x196>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_Init+0x1bc>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e58      	subs	r0, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	440b      	add	r3, r1
 8002e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6911      	ldr	r1, [r2, #16]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e021      	b.n	8002f56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	; 0x24
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff f862 	bl	8001ff4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
 8002f70:	4613      	mov	r3, r2
 8002f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff f9b8 	bl	80022e8 <HAL_GetTick>
 8002f78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 80e0 	bne.w	8003148 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2319      	movs	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4970      	ldr	r1, [pc, #448]	; (8003154 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fccc 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0d3      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x50>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0cc      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d007      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2221      	movs	r2, #33	; 0x21
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	893a      	ldrh	r2, [r7, #8]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_I2C_Master_Transmit+0x1f8>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fb1c 	bl	800365c <I2C_MasterRequestWrite>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e08d      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003044:	e066      	b.n	8003114 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fd46 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11b      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x188>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fd36 	bl	8003b5e <I2C_WaitOnBTFFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e01a      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d194      	bne.n	8003046 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000

0800315c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317a:	f7ff f8b5 	bl	80022e8 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 8244 	bne.w	8003616 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2319      	movs	r3, #25
 8003194:	2201      	movs	r2, #1
 8003196:	4982      	ldr	r1, [pc, #520]	; (80033a0 <HAL_I2C_Mem_Read+0x244>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fbc9 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	e237      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x5a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e230      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d007      	beq.n	80031dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2222      	movs	r2, #34	; 0x22
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a62      	ldr	r2, [pc, #392]	; (80033a4 <HAL_I2C_Mem_Read+0x248>)
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa96 	bl	8003760 <I2C_RequestMemoryRead>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1ec      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e1c0      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b01      	cmp	r3, #1
 8003274:	d11e      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003286:	b672      	cpsid	i
}
 8003288:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032b0:	b662      	cpsie	i
}
 80032b2:	e035      	b.n	8003320 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11e      	bne.n	80032fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032cc:	b672      	cpsid	i
}
 80032ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032f6:	b662      	cpsie	i
}
 80032f8:	e012      	b.n	8003320 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003308:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003320:	e166      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b03      	cmp	r3, #3
 8003328:	f200 811f 	bhi.w	800356a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d123      	bne.n	800337c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fc51 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e167      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800337a:	e139      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	2b02      	cmp	r3, #2
 8003382:	d152      	bne.n	800342a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2200      	movs	r2, #0
 800338c:	4906      	ldr	r1, [pc, #24]	; (80033a8 <HAL_I2C_Mem_Read+0x24c>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 face 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e13c      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
 800339e:	bf00      	nop
 80033a0:	00100002 	.word	0x00100002
 80033a4:	ffff0000 	.word	0xffff0000
 80033a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033ac:	b672      	cpsid	i
}
 80033ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033f2:	b662      	cpsie	i
}
 80033f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003428:	e0e2      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	497b      	ldr	r1, [pc, #492]	; (8003620 <HAL_I2C_Mem_Read+0x4c4>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa7b 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0e9      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
}
 8003456:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800348a:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_I2C_Mem_Read+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_I2C_Mem_Read+0x4cc>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00da      	lsls	r2, r3, #3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034d2:	b662      	cpsie	i
}
 80034d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e09a      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d1d9      	bne.n	80034a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003532:	b662      	cpsie	i
}
 8003534:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003568:	e042      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb36 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04c      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d118      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f ae94 	bne.w	8003322 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010004 	.word	0x00010004
 8003624:	20000914 	.word	0x20000914
 8003628:	14f8b589 	.word	0x14f8b589

0800362c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363a:	b2db      	uxtb	r3, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d006      	beq.n	8003686 <I2C_MasterRequestWrite+0x2a>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d003      	beq.n	8003686 <I2C_MasterRequestWrite+0x2a>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003684:	d108      	bne.n	8003698 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e00b      	b.n	80036b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b12      	cmp	r3, #18
 800369e:	d107      	bne.n	80036b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f937 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d103      	bne.n	80036e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e035      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d108      	bne.n	8003700 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e01b      	b.n	8003738 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	11db      	asrs	r3, r3, #7
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f063 030f 	orn	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <I2C_MasterRequestWrite+0xfc>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f95d 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e010      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <I2C_MasterRequestWrite+0x100>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f94d 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	00010008 	.word	0x00010008
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8c2 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c0:	d103      	bne.n	80037ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0aa      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	4952      	ldr	r1, [pc, #328]	; (800392c <I2C_RequestMemoryRead+0x1cc>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f8fa 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e097      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f964 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e076      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e021      	b.n	800388c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f93e 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b04      	cmp	r3, #4
 800386c:	d107      	bne.n	800387e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e050      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003882:	893b      	ldrh	r3, [r7, #8]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f923 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e035      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f82b 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d103      	bne.n	80038f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e013      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <I2C_RequestMemoryRead+0x1cc>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f863 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	00010002 	.word	0x00010002

08003930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	e025      	b.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fccd 	bl	80022e8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e023      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	e00c      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d0b6      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ec:	e051      	b.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d123      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e046      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d021      	beq.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe fc4b 	bl	80022e8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e020      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e00b      	b.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d18d      	bne.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8ce 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d021      	beq.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fbf1 	bl	80022e8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d1ca      	bne.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f88d 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e02d      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d021      	beq.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fe fbb0 	bl	80022e8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e007      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d1ca      	bne.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bec:	e042      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d119      	bne.n	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e029      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c30:	f7fe fb5a 	bl	80022e8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e007      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d1b5      	bne.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d11b      	bne.n	8003cdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e272      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d14:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e24c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x76>
 8003d50:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7f      	ldr	r2, [pc, #508]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7b      	ldr	r3, [pc, #492]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a77      	ldr	r2, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xbc>
 8003d8a:	4b72      	ldr	r3, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003da4:	4b6b      	ldr	r3, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fa90 	bl	80022e8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fa8c 	bl	80022e8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e200      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe4>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fa7c 	bl	80022e8 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fa78 	bl	80022e8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1ec      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4939      	ldr	r1, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe fa31 	bl	80022e8 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe fa2d 	bl	80022e8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4927      	ldr	r1, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fa10 	bl	80022e8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fa0c 	bl	80022e8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e180      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03a      	beq.n	8003f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe f9f0 	bl	80022e8 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe f9ec 	bl	80022e8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e160      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 fad8 	bl	80044e0 <RCC_Delay>
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fe f9d6 	bl	80022e8 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fe f9d2 	bl	80022e8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e146      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	42420000 	.word	0x42420000
 8003f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e9      	bne.n	8003f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe f993 	bl	80022e8 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fe f98f 	bl	80022e8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e103      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b75      	ldr	r3, [pc, #468]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x334>
 8004002:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a69      	ldr	r2, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x356>
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a60      	ldr	r2, [pc, #384]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6213      	str	r3, [r2, #32]
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a5a      	ldr	r2, [pc, #360]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a57      	ldr	r2, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fe f943 	bl	80022e8 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe f93f 	bl	80022e8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0b1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x37e>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe f92d 	bl	80022e8 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe f929 	bl	80022e8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d061      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d146      	bne.n	8004172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe f8fd 	bl	80022e8 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe f8f9 	bl	80022e8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e06d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4921      	ldr	r1, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a19      	ldr	r1, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe f8cd 	bl	80022e8 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe f8c9 	bl	80022e8 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x46a>
 8004170:	e035      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe f8b6 	bl	80022e8 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe f8b2 	bl	80022e8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e026      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x498>
 800419e:	e01e      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e019      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d0      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4965      	ldr	r1, [pc, #404]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800426a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4936      	ldr	r1, [pc, #216]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe f804 	bl	80022e8 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fe f800 	bl	80022e8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d210      	bcs.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4922      	ldr	r1, [pc, #136]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd ff62 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	08007b18 	.word	0x08007b18
 80043b8:	20000914 	.word	0x20000914
 80043bc:	20000918 	.word	0x20000918

080043c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b490      	push	{r4, r7}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCC_GetSysClockFreq+0xac>)
 80043c8:	1d3c      	adds	r4, r7, #4
 80043ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043d0:	f240 2301 	movw	r3, #513	; 0x201
 80043d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d002      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x40>
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x46>
 80043fe:	e02b      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004400:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004402:	623b      	str	r3, [r7, #32]
      break;
 8004404:	e02b      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	0c9b      	lsrs	r3, r3, #18
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3328      	adds	r3, #40	; 0x28
 8004410:	443b      	add	r3, r7
 8004412:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004416:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d012      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	0c5b      	lsrs	r3, r3, #17
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	3328      	adds	r3, #40	; 0x28
 800442e:	443b      	add	r3, r7
 8004430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_RCC_GetSysClockFreq+0xb4>)
 800443a:	fb03 f202 	mul.w	r2, r3, r2
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	e004      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	623b      	str	r3, [r7, #32]
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetSysClockFreq+0xb4>)
 800445a:	623b      	str	r3, [r7, #32]
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	6a3b      	ldr	r3, [r7, #32]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	; 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc90      	pop	{r4, r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	08007b00 	.word	0x08007b00
 8004470:	40021000 	.word	0x40021000
 8004474:	007a1200 	.word	0x007a1200
 8004478:	003d0900 	.word	0x003d0900

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b02      	ldr	r3, [pc, #8]	; (800448c <HAL_RCC_GetHCLKFreq+0x10>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	20000914 	.word	0x20000914

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff2 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	08007b28 	.word	0x08007b28

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffde 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	0adb      	lsrs	r3, r3, #11
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08007b28 	.word	0x08007b28

080044e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <RCC_Delay+0x34>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <RCC_Delay+0x38>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0a5b      	lsrs	r3, r3, #9
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044fc:	bf00      	nop
  }
  while (Delay --);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	60fa      	str	r2, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f9      	bne.n	80044fc <RCC_Delay+0x1c>
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	20000914 	.word	0x20000914
 8004518:	10624dd3 	.word	0x10624dd3

0800451c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e041      	b.n	80045b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fd78 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fa7e 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e044      	b.n	800465e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_TIM_Base_Start_IT+0xac>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x6c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_TIM_Base_Start_IT+0xb0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x6c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x6c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_Base_Start_IT+0xb4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x6c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a16      	ldr	r2, [pc, #88]	; (8004674 <HAL_TIM_Base_Start_IT+0xb8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x6c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_TIM_Base_Start_IT+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d111      	bne.n	800464c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d010      	beq.n	800465c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	e007      	b.n	800465c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40013400 	.word	0x40013400
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00

0800467c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0202 	mvn.w	r2, #2
 80046a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9b1 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9a4 	bl	8004a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9b3 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0204 	mvn.w	r2, #4
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f987 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f97a 	bl	8004a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f989 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f95d 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f950 	bl	8004a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f95f 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2208      	movs	r2, #8
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f933 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f926 	bl	8004a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f935 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0201 	mvn.w	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fd70 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa9d 	bl	8004d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10e      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d107      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8f9 	bl	8004a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b20      	cmp	r3, #32
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b20      	cmp	r3, #32
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0220 	mvn.w	r2, #32
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa68 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0b3      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x180>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048dc:	d03e      	beq.n	800495c <HAL_TIM_ConfigClockSource+0xd0>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e2:	f200 8087 	bhi.w	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ea:	f000 8085 	beq.w	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d87f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 80048f4:	2b70      	cmp	r3, #112	; 0x70
 80048f6:	d01a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xa2>
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d87b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 80048fc:	2b60      	cmp	r3, #96	; 0x60
 80048fe:	d050      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x116>
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d877      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 8004904:	2b50      	cmp	r3, #80	; 0x50
 8004906:	d03c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xf6>
 8004908:	2b50      	cmp	r3, #80	; 0x50
 800490a:	d873      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d058      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x136>
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d86f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d064      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x156>
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d86b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d060      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x156>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d867      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05c      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x156>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d05a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800492c:	e062      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f000 f97e 	bl	8004c3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	609a      	str	r2, [r3, #8]
      break;
 800495a:	e04e      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6899      	ldr	r1, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f000 f967 	bl	8004c3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800497e:	609a      	str	r2, [r3, #8]
      break;
 8004980:	e03b      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	461a      	mov	r2, r3
 8004990:	f000 f8de 	bl	8004b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2150      	movs	r1, #80	; 0x50
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f935 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049a0:	e02b      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 f8fc 	bl	8004bac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2160      	movs	r1, #96	; 0x60
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f925 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049c0:	e01b      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 f8be 	bl	8004b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2140      	movs	r1, #64	; 0x40
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f915 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049e0:	e00b      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 f90c 	bl	8004c0a <TIM_ITRx_SetConfig>
        break;
 80049f2:	e002      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <TIM_Base_SetConfig+0xe0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <TIM_Base_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0xe8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a2e      	ldr	r2, [pc, #184]	; (8004b48 <TIM_Base_SetConfig+0xec>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <TIM_Base_SetConfig+0xf0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <TIM_Base_SetConfig+0xe0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0x82>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <TIM_Base_SetConfig+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0x82>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <TIM_Base_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0x82>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <TIM_Base_SetConfig+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0x82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <TIM_Base_SetConfig+0xf0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <TIM_Base_SetConfig+0xe0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0xc8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <TIM_Base_SetConfig+0xe4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00

08004b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 030a 	bic.w	r3, r3, #10
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 0210 	bic.w	r2, r3, #16
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	031b      	lsls	r3, r3, #12
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f043 0307 	orr.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b087      	sub	sp, #28
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	021a      	lsls	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e050      	b.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d00e      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10c      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e03f      	b.n	8004e0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd f970 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f829 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7ff fb1c 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7ff fb04 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	; 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	; 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	; 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f42:	2b84      	cmp	r3, #132	; 0x84
 8004f44:	d005      	beq.n	8004f52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3303      	adds	r3, #3
 8004f50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f62:	f000 fad1 	bl	8005508 <vTaskStartScheduler>
  
  return osOK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af04      	add	r7, sp, #16
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d020      	beq.n	8004fc0 <osThreadCreate+0x54>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01c      	beq.n	8004fc0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685c      	ldr	r4, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691e      	ldr	r6, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffc9 	bl	8004f30 <makeFreeRtosPriority>
 8004f9e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	9100      	str	r1, [sp, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 f8e8 	bl	800518a <xTaskCreateStatic>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e01c      	b.n	8004ffa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685c      	ldr	r4, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fcc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffab 	bl	8004f30 <makeFreeRtosPriority>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	9200      	str	r2, [sp, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 f929 	bl	8005242 <xTaskCreate>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005004 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <osDelay+0x16>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	e000      	b.n	800501c <osDelay+0x18>
 800501a:	2301      	movs	r3, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fa3f 	bl	80054a0 <vTaskDelay>
  
  return osOK;
 8005022:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d103      	bne.n	80050e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e00c      	b.n	8005102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3308      	adds	r3, #8
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e002      	b.n	80050f6 <vListInsert+0x2e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d2f6      	bcs.n	80050f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6852      	ldr	r2, [r2, #4]
 8005158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d103      	bne.n	800516c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800518a:	b580      	push	{r7, lr}
 800518c:	b08e      	sub	sp, #56	; 0x38
 800518e:	af04      	add	r7, sp, #16
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	61fb      	str	r3, [r7, #28]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d0:	2354      	movs	r3, #84	; 0x54
 80051d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b54      	cmp	r3, #84	; 0x54
 80051d8:	d00a      	beq.n	80051f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	61bb      	str	r3, [r7, #24]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01e      	beq.n	8005234 <xTaskCreateStatic+0xaa>
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	2202      	movs	r2, #2
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800520e:	2300      	movs	r3, #0
 8005210:	9303      	str	r3, [sp, #12]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	f107 0314 	add.w	r3, r7, #20
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f850 	bl	80052cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800522c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800522e:	f000 f8cd 	bl	80053cc <prvAddNewTaskToReadyList>
 8005232:	e001      	b.n	8005238 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005238:	697b      	ldr	r3, [r7, #20]
	}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005242:	b580      	push	{r7, lr}
 8005244:	b08c      	sub	sp, #48	; 0x30
 8005246:	af04      	add	r7, sp, #16
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fe8a 	bl	8005f70 <pvPortMalloc>
 800525c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005264:	2054      	movs	r0, #84	; 0x54
 8005266:	f000 fe83 	bl	8005f70 <pvPortMalloc>
 800526a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
 8005278:	e005      	b.n	8005286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f000 ff3c 	bl	80060f8 <vPortFree>
 8005280:	e001      	b.n	8005286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	2300      	movs	r3, #0
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f80e 	bl	80052cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b0:	69f8      	ldr	r0, [r7, #28]
 80052b2:	f000 f88b 	bl	80053cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e002      	b.n	80052c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295
 80052c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052c2:	69bb      	ldr	r3, [r7, #24]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052e4:	3b01      	subs	r3, #1
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <prvInitialiseNewTask+0x48>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	617b      	str	r3, [r7, #20]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e012      	b.n	8005340 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	7819      	ldrb	r1, [r3, #0]
 8005322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	3334      	adds	r3, #52	; 0x34
 800532a:	460a      	mov	r2, r1
 800532c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d006      	beq.n	8005348 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3301      	adds	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d9e9      	bls.n	800531a <prvInitialiseNewTask+0x4e>
 8005346:	e000      	b.n	800534a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005348:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2b06      	cmp	r3, #6
 8005356:	d901      	bls.n	800535c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005358:	2306      	movs	r3, #6
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005366:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fe79 	bl	800506a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	3318      	adds	r3, #24
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fe74 	bl	800506a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	f1c3 0207 	rsb	r2, r3, #7
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2200      	movs	r2, #0
 800539c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	69b8      	ldr	r0, [r7, #24]
 80053ac:	f000 fc2c 	bl	8005c08 <pxPortInitialiseStack>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053c2:	bf00      	nop
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053d4:	f000 fd0a 	bl	8005dec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053d8:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <prvAddNewTaskToReadyList+0xb8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a29      	ldr	r2, [pc, #164]	; (8005484 <prvAddNewTaskToReadyList+0xb8>)
 80053e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <prvAddNewTaskToReadyList+0xbc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ea:	4a27      	ldr	r2, [pc, #156]	; (8005488 <prvAddNewTaskToReadyList+0xbc>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053f0:	4b24      	ldr	r3, [pc, #144]	; (8005484 <prvAddNewTaskToReadyList+0xb8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d110      	bne.n	800541a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053f8:	f000 fac0 	bl	800597c <prvInitialiseTaskLists>
 80053fc:	e00d      	b.n	800541a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <prvAddNewTaskToReadyList+0xc0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005406:	4b20      	ldr	r3, [pc, #128]	; (8005488 <prvAddNewTaskToReadyList+0xbc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	d802      	bhi.n	800541a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <prvAddNewTaskToReadyList+0xbc>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <prvAddNewTaskToReadyList+0xc4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <prvAddNewTaskToReadyList+0xc4>)
 8005422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	2201      	movs	r2, #1
 800542a:	409a      	lsls	r2, r3
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <prvAddNewTaskToReadyList+0xc8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <prvAddNewTaskToReadyList+0xc8>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvAddNewTaskToReadyList+0xcc>)
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7ff fe18 	bl	8005082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005452:	f000 fcfb 	bl	8005e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <prvAddNewTaskToReadyList+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <prvAddNewTaskToReadyList+0xbc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <prvAddNewTaskToReadyList+0xd0>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20001030 	.word	0x20001030
 8005488:	20000f30 	.word	0x20000f30
 800548c:	2000103c 	.word	0x2000103c
 8005490:	2000104c 	.word	0x2000104c
 8005494:	20001038 	.word	0x20001038
 8005498:	20000f34 	.word	0x20000f34
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054b2:	4b13      	ldr	r3, [pc, #76]	; (8005500 <vTaskDelay+0x60>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <vTaskDelay+0x30>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	60bb      	str	r3, [r7, #8]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054d0:	f000 f87a 	bl	80055c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054d4:	2100      	movs	r1, #0
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fb30 	bl	8005b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054dc:	f000 f882 	bl	80055e4 <xTaskResumeAll>
 80054e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d107      	bne.n	80054f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <vTaskDelay+0x64>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20001058 	.word	0x20001058
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005516:	463a      	mov	r2, r7
 8005518:	1d39      	adds	r1, r7, #4
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb f810 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	9202      	str	r2, [sp, #8]
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	2300      	movs	r3, #0
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	460a      	mov	r2, r1
 8005536:	491e      	ldr	r1, [pc, #120]	; (80055b0 <vTaskStartScheduler+0xa8>)
 8005538:	481e      	ldr	r0, [pc, #120]	; (80055b4 <vTaskStartScheduler+0xac>)
 800553a:	f7ff fe26 	bl	800518a <xTaskCreateStatic>
 800553e:	4603      	mov	r3, r0
 8005540:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <vTaskStartScheduler+0xb0>)
 8005542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <vTaskStartScheduler+0xb0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e001      	b.n	8005556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d116      	bne.n	800558a <vTaskStartScheduler+0x82>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	613b      	str	r3, [r7, #16]
}
 800556e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <vTaskStartScheduler+0xb4>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <vTaskStartScheduler+0xb8>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <vTaskStartScheduler+0xbc>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005584:	f000 fbc0 	bl	8005d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005588:	e00e      	b.n	80055a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d10a      	bne.n	80055a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	60fb      	str	r3, [r7, #12]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <vTaskStartScheduler+0x9e>
}
 80055a8:	bf00      	nop
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	08007b10 	.word	0x08007b10
 80055b4:	0800594d 	.word	0x0800594d
 80055b8:	20001054 	.word	0x20001054
 80055bc:	20001050 	.word	0x20001050
 80055c0:	2000103c 	.word	0x2000103c
 80055c4:	20001034 	.word	0x20001034

080055c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <vTaskSuspendAll+0x18>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a03      	ldr	r2, [pc, #12]	; (80055e0 <vTaskSuspendAll+0x18>)
 80055d4:	6013      	str	r3, [r2, #0]
}
 80055d6:	bf00      	nop
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20001058 	.word	0x20001058

080055e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <xTaskResumeAll+0x114>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <xTaskResumeAll+0x2c>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	603b      	str	r3, [r7, #0]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005610:	f000 fbec 	bl	8005dec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005614:	4b38      	ldr	r3, [pc, #224]	; (80056f8 <xTaskResumeAll+0x114>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <xTaskResumeAll+0x114>)
 800561c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <xTaskResumeAll+0x114>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d161      	bne.n	80056ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <xTaskResumeAll+0x118>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05d      	beq.n	80056ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562e:	e02e      	b.n	800568e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005630:	4b33      	ldr	r3, [pc, #204]	; (8005700 <xTaskResumeAll+0x11c>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3318      	adds	r3, #24
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fd7b 	bl	8005138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fd76 	bl	8005138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <xTaskResumeAll+0x120>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <xTaskResumeAll+0x120>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <xTaskResumeAll+0x124>)
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff fd04 	bl	8005082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <xTaskResumeAll+0x128>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <xTaskResumeAll+0x12c>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568e:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <xTaskResumeAll+0x11c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cc      	bne.n	8005630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800569c:	f000 fa0c 	bl	8005ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xTaskResumeAll+0x130>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ac:	f000 f836 	bl	800571c <xTaskIncrementTick>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <xTaskResumeAll+0x12c>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f1      	bne.n	80056ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <xTaskResumeAll+0x130>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xTaskResumeAll+0x12c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskResumeAll+0x134>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ea:	f000 fbaf 	bl	8005e4c <vPortExitCritical>

	return xAlreadyYielded;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20001058 	.word	0x20001058
 80056fc:	20001030 	.word	0x20001030
 8005700:	20000ff0 	.word	0x20000ff0
 8005704:	20001038 	.word	0x20001038
 8005708:	20000f34 	.word	0x20000f34
 800570c:	20000f30 	.word	0x20000f30
 8005710:	20001044 	.word	0x20001044
 8005714:	20001040 	.word	0x20001040
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005726:	4b51      	ldr	r3, [pc, #324]	; (800586c <xTaskIncrementTick+0x150>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 808d 	bne.w	800584a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005730:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <xTaskIncrementTick+0x154>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005738:	4a4d      	ldr	r2, [pc, #308]	; (8005870 <xTaskIncrementTick+0x154>)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d120      	bne.n	8005786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005744:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <xTaskIncrementTick+0x158>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <xTaskIncrementTick+0x48>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	603b      	str	r3, [r7, #0]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <xTaskIncrementTick+0x46>
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <xTaskIncrementTick+0x158>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	4b43      	ldr	r3, [pc, #268]	; (8005878 <xTaskIncrementTick+0x15c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a41      	ldr	r2, [pc, #260]	; (8005874 <xTaskIncrementTick+0x158>)
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <xTaskIncrementTick+0x15c>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <xTaskIncrementTick+0x160>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a3f      	ldr	r2, [pc, #252]	; (800587c <xTaskIncrementTick+0x160>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	f000 f999 	bl	8005ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005786:	4b3e      	ldr	r3, [pc, #248]	; (8005880 <xTaskIncrementTick+0x164>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d34d      	bcc.n	800582c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <xTaskIncrementTick+0x158>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xTaskIncrementTick+0x82>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xTaskIncrementTick+0x84>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <xTaskIncrementTick+0x164>)
 80057a6:	f04f 32ff 	mov.w	r2, #4294967295
 80057aa:	601a      	str	r2, [r3, #0]
					break;
 80057ac:	e03e      	b.n	800582c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <xTaskIncrementTick+0x158>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d203      	bcs.n	80057ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c6:	4a2e      	ldr	r2, [pc, #184]	; (8005880 <xTaskIncrementTick+0x164>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]
						break;
 80057cc:	e02e      	b.n	800582c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fcb0 	bl	8005138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3318      	adds	r3, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fca7 	bl	8005138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	2201      	movs	r2, #1
 80057f0:	409a      	lsls	r2, r3
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <xTaskIncrementTick+0x168>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	4a22      	ldr	r2, [pc, #136]	; (8005884 <xTaskIncrementTick+0x168>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <xTaskIncrementTick+0x16c>)
 800580a:	441a      	add	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f7ff fc35 	bl	8005082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <xTaskIncrementTick+0x170>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	429a      	cmp	r2, r3
 8005824:	d3b4      	bcc.n	8005790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582a:	e7b1      	b.n	8005790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <xTaskIncrementTick+0x170>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4915      	ldr	r1, [pc, #84]	; (8005888 <xTaskIncrementTick+0x16c>)
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d907      	bls.n	8005854 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e004      	b.n	8005854 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <xTaskIncrementTick+0x174>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <xTaskIncrementTick+0x174>)
 8005852:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xTaskIncrementTick+0x178>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005860:	697b      	ldr	r3, [r7, #20]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20001058 	.word	0x20001058
 8005870:	20001034 	.word	0x20001034
 8005874:	20000fe8 	.word	0x20000fe8
 8005878:	20000fec 	.word	0x20000fec
 800587c:	20001048 	.word	0x20001048
 8005880:	20001050 	.word	0x20001050
 8005884:	20001038 	.word	0x20001038
 8005888:	20000f34 	.word	0x20000f34
 800588c:	20000f30 	.word	0x20000f30
 8005890:	20001040 	.word	0x20001040
 8005894:	20001044 	.word	0x20001044

08005898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <vTaskSwitchContext+0xa0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <vTaskSwitchContext+0xa4>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058ac:	e03f      	b.n	800592e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <vTaskSwitchContext+0xa4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <vTaskSwitchContext+0xa8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	f1c3 031f 	rsb	r3, r3, #31
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	491e      	ldr	r1, [pc, #120]	; (8005944 <vTaskSwitchContext+0xac>)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vTaskSwitchContext+0x5a>
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4a11      	ldr	r2, [pc, #68]	; (8005944 <vTaskSwitchContext+0xac>)
 8005900:	4413      	add	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3308      	adds	r3, #8
 8005916:	429a      	cmp	r2, r3
 8005918:	d104      	bne.n	8005924 <vTaskSwitchContext+0x8c>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a07      	ldr	r2, [pc, #28]	; (8005948 <vTaskSwitchContext+0xb0>)
 800592c:	6013      	str	r3, [r2, #0]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	20001058 	.word	0x20001058
 800593c:	20001044 	.word	0x20001044
 8005940:	20001038 	.word	0x20001038
 8005944:	20000f34 	.word	0x20000f34
 8005948:	20000f30 	.word	0x20000f30

0800594c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005954:	f000 f852 	bl	80059fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <prvIdleTask+0x28>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d9f9      	bls.n	8005954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <prvIdleTask+0x2c>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005970:	e7f0      	b.n	8005954 <prvIdleTask+0x8>
 8005972:	bf00      	nop
 8005974:	20000f34 	.word	0x20000f34
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	e00c      	b.n	80059a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <prvInitialiseTaskLists+0x60>)
 8005994:	4413      	add	r3, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fb48 	bl	800502c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3301      	adds	r3, #1
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b06      	cmp	r3, #6
 80059a6:	d9ef      	bls.n	8005988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059a8:	480d      	ldr	r0, [pc, #52]	; (80059e0 <prvInitialiseTaskLists+0x64>)
 80059aa:	f7ff fb3f 	bl	800502c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ae:	480d      	ldr	r0, [pc, #52]	; (80059e4 <prvInitialiseTaskLists+0x68>)
 80059b0:	f7ff fb3c 	bl	800502c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059b4:	480c      	ldr	r0, [pc, #48]	; (80059e8 <prvInitialiseTaskLists+0x6c>)
 80059b6:	f7ff fb39 	bl	800502c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ba:	480c      	ldr	r0, [pc, #48]	; (80059ec <prvInitialiseTaskLists+0x70>)
 80059bc:	f7ff fb36 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059c0:	480b      	ldr	r0, [pc, #44]	; (80059f0 <prvInitialiseTaskLists+0x74>)
 80059c2:	f7ff fb33 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <prvInitialiseTaskLists+0x78>)
 80059c8:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <prvInitialiseTaskLists+0x64>)
 80059ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvInitialiseTaskLists+0x7c>)
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <prvInitialiseTaskLists+0x68>)
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000f34 	.word	0x20000f34
 80059e0:	20000fc0 	.word	0x20000fc0
 80059e4:	20000fd4 	.word	0x20000fd4
 80059e8:	20000ff0 	.word	0x20000ff0
 80059ec:	20001004 	.word	0x20001004
 80059f0:	2000101c 	.word	0x2000101c
 80059f4:	20000fe8 	.word	0x20000fe8
 80059f8:	20000fec 	.word	0x20000fec

080059fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a02:	e019      	b.n	8005a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a04:	f000 f9f2 	bl	8005dec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <prvCheckTasksWaitingTermination+0x50>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fb8f 	bl	8005138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <prvCheckTasksWaitingTermination+0x54>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <prvCheckTasksWaitingTermination+0x54>)
 8005a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a2e:	f000 fa0d 	bl	8005e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f810 	bl	8005a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e1      	bne.n	8005a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20001004 	.word	0x20001004
 8005a50:	20001030 	.word	0x20001030
 8005a54:	20001018 	.word	0x20001018

08005a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fb42 	bl	80060f8 <vPortFree>
				vPortFree( pxTCB );
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fb3f 	bl	80060f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a7a:	e018      	b.n	8005aae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d103      	bne.n	8005a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb36 	bl	80060f8 <vPortFree>
	}
 8005a8c:	e00f      	b.n	8005aae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d00a      	beq.n	8005aae <prvDeleteTCB+0x56>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60fb      	str	r3, [r7, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <prvDeleteTCB+0x54>
	}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <prvResetNextTaskUnblockTime+0x40>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <prvResetNextTaskUnblockTime+0x14>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <prvResetNextTaskUnblockTime+0x16>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <prvResetNextTaskUnblockTime+0x44>)
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ada:	e008      	b.n	8005aee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <prvResetNextTaskUnblockTime+0x40>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <prvResetNextTaskUnblockTime+0x44>)
 8005aec:	6013      	str	r3, [r2, #0]
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	20000fe8 	.word	0x20000fe8
 8005afc:	20001050 	.word	0x20001050

08005b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <xTaskGetSchedulerState+0x34>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	e008      	b.n	8005b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b14:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <xTaskGetSchedulerState+0x38>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	e001      	b.n	8005b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b26:	687b      	ldr	r3, [r7, #4]
	}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2000103c 	.word	0x2000103c
 8005b38:	20001058 	.word	0x20001058

08005b3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b46:	4b29      	ldr	r3, [pc, #164]	; (8005bec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b4c:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff faf0 	bl	8005138 <uxListRemove>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	2201      	movs	r2, #1
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4013      	ands	r3, r2
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d10a      	bne.n	8005b94 <prvAddCurrentTaskToDelayedList+0x58>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	481a      	ldr	r0, [pc, #104]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b8e:	f7ff fa78 	bl	8005082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b92:	e026      	b.n	8005be2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d209      	bcs.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7ff fa85 	bl	80050c8 <vListInsert>
}
 8005bbe:	e010      	b.n	8005be2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7ff fa7b 	bl	80050c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d202      	bcs.n	8005be2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6013      	str	r3, [r2, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001034 	.word	0x20001034
 8005bf0:	20000f30 	.word	0x20000f30
 8005bf4:	20001038 	.word	0x20001038
 8005bf8:	2000101c 	.word	0x2000101c
 8005bfc:	20000fec 	.word	0x20000fec
 8005c00:	20000fe8 	.word	0x20000fe8
 8005c04:	20001050 	.word	0x20001050

08005c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3b04      	subs	r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <pxPortInitialiseStack+0x54>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b14      	subs	r3, #20
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3b20      	subs	r3, #32
 8005c4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c50:	68fb      	ldr	r3, [r7, #12]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	08005c61 	.word	0x08005c61

08005c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <prvTaskExitError+0x54>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d00a      	beq.n	8005c8a <prvTaskExitError+0x2a>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <prvTaskExitError+0x28>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60bb      	str	r3, [r7, #8]
}
 8005c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c9e:	bf00      	nop
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0fc      	beq.n	8005ca0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000920 	.word	0x20000920
	...

08005cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <pxCurrentTCBConst2>)
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	6808      	ldr	r0, [r1, #0]
 8005cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cca:	f380 8809 	msr	PSP, r0
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8811 	msr	BASEPRI, r0
 8005cda:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cde:	4770      	bx	lr

08005ce0 <pxCurrentTCBConst2>:
 8005ce0:	20000f30 	.word	0x20000f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ce8:	4806      	ldr	r0, [pc, #24]	; (8005d04 <prvPortStartFirstTask+0x1c>)
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	6800      	ldr	r0, [r0, #0]
 8005cee:	f380 8808 	msr	MSP, r0
 8005cf2:	b662      	cpsie	i
 8005cf4:	b661      	cpsie	f
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	df00      	svc	0
 8005d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d02:	bf00      	nop
 8005d04:	e000ed08 	.word	0xe000ed08

08005d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d0e:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <xPortStartScheduler+0xd0>)
 8005d10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <xPortStartScheduler+0xd4>)
 8005d34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d36:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d38:	2207      	movs	r2, #7
 8005d3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3c:	e009      	b.n	8005d52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4a26      	ldr	r2, [pc, #152]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d0ef      	beq.n	8005d3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d5e:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1c3 0307 	rsb	r3, r3, #7
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d00a      	beq.n	8005d80 <xPortStartScheduler+0x78>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	60bb      	str	r3, [r7, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d80:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <xPortStartScheduler+0xd8>)
 8005d94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <xPortStartScheduler+0xdc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <xPortStartScheduler+0xdc>)
 8005da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <xPortStartScheduler+0xdc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a0d      	ldr	r2, [pc, #52]	; (8005de4 <xPortStartScheduler+0xdc>)
 8005db0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005db4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005db6:	f000 f8b9 	bl	8005f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <xPortStartScheduler+0xe0>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dc0:	f7ff ff92 	bl	8005ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dc4:	f7ff fd68 	bl	8005898 <vTaskSwitchContext>
	prvTaskExitError();
 8005dc8:	f7ff ff4a 	bl	8005c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000e400 	.word	0xe000e400
 8005ddc:	2000105c 	.word	0x2000105c
 8005de0:	20001060 	.word	0x20001060
 8005de4:	e000ed20 	.word	0xe000ed20
 8005de8:	20000920 	.word	0x20000920

08005dec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <vPortEnterCritical+0x58>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <vPortEnterCritical+0x58>)
 8005e0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <vPortEnterCritical+0x58>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10f      	bne.n	8005e38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <vPortEnterCritical+0x5c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	603b      	str	r3, [r7, #0]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <vPortEnterCritical+0x4a>
	}
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000920 	.word	0x20000920
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <vPortExitCritical+0x4c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <vPortExitCritical+0x24>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <vPortExitCritical+0x4c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <vPortExitCritical+0x4c>)
 8005e78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <vPortExitCritical+0x4c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <vPortExitCritical+0x42>
 8005e82:	2300      	movs	r3, #0
 8005e84:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000920 	.word	0x20000920
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ea0:	f3ef 8009 	mrs	r0, PSP
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <pxCurrentTCBConst>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eb0:	6010      	str	r0, [r2, #0]
 8005eb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005eb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eba:	f380 8811 	msr	BASEPRI, r0
 8005ebe:	f7ff fceb 	bl	8005898 <vTaskSwitchContext>
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
 8005eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ed6:	f380 8809 	msr	PSP, r0
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	4770      	bx	lr

08005ee0 <pxCurrentTCBConst>:
 8005ee0:	20000f30 	.word	0x20000f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f02:	f7ff fc0b 	bl	800571c <xTaskIncrementTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <xPortSysTickHandler+0x40>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <vPortSetupTimerInterrupt+0x30>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <vPortSetupTimerInterrupt+0x34>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <vPortSetupTimerInterrupt+0x38>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <vPortSetupTimerInterrupt+0x3c>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <vPortSetupTimerInterrupt+0x40>)
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <vPortSetupTimerInterrupt+0x30>)
 8005f50:	2207      	movs	r2, #7
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	e000e010 	.word	0xe000e010
 8005f60:	e000e018 	.word	0xe000e018
 8005f64:	20000914 	.word	0x20000914
 8005f68:	10624dd3 	.word	0x10624dd3
 8005f6c:	e000e014 	.word	0xe000e014

08005f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f7c:	f7ff fb24 	bl	80055c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f80:	4b58      	ldr	r3, [pc, #352]	; (80060e4 <pvPortMalloc+0x174>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f88:	f000 f910 	bl	80061ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f8c:	4b56      	ldr	r3, [pc, #344]	; (80060e8 <pvPortMalloc+0x178>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 808e 	bne.w	80060b6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01d      	beq.n	8005fdc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d014      	beq.n	8005fdc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	3308      	adds	r3, #8
 8005fba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <pvPortMalloc+0x6c>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	617b      	str	r3, [r7, #20]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d069      	beq.n	80060b6 <pvPortMalloc+0x146>
 8005fe2:	4b42      	ldr	r3, [pc, #264]	; (80060ec <pvPortMalloc+0x17c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d864      	bhi.n	80060b6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fec:	4b40      	ldr	r3, [pc, #256]	; (80060f0 <pvPortMalloc+0x180>)
 8005fee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ff0:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <pvPortMalloc+0x180>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ff6:	e004      	b.n	8006002 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d903      	bls.n	8006014 <pvPortMalloc+0xa4>
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f1      	bne.n	8005ff8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006014:	4b33      	ldr	r3, [pc, #204]	; (80060e4 <pvPortMalloc+0x174>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601a:	429a      	cmp	r2, r3
 800601c:	d04b      	beq.n	80060b6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2208      	movs	r2, #8
 8006024:	4413      	add	r3, r2
 8006026:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	2308      	movs	r3, #8
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	429a      	cmp	r2, r3
 800603e:	d91f      	bls.n	8006080 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <pvPortMalloc+0xf8>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	613b      	str	r3, [r7, #16]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800607a:	69b8      	ldr	r0, [r7, #24]
 800607c:	f000 f8f8 	bl	8006270 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006080:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <pvPortMalloc+0x17c>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <pvPortMalloc+0x17c>)
 800608c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800608e:	4b17      	ldr	r3, [pc, #92]	; (80060ec <pvPortMalloc+0x17c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <pvPortMalloc+0x184>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d203      	bcs.n	80060a2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <pvPortMalloc+0x17c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <pvPortMalloc+0x184>)
 80060a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <pvPortMalloc+0x178>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b6:	f7ff fa95 	bl	80055e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <pvPortMalloc+0x16a>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <pvPortMalloc+0x168>
	return pvReturn;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3728      	adds	r7, #40	; 0x28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20001c6c 	.word	0x20001c6c
 80060e8:	20001c78 	.word	0x20001c78
 80060ec:	20001c70 	.word	0x20001c70
 80060f0:	20001c64 	.word	0x20001c64
 80060f4:	20001c74 	.word	0x20001c74

080060f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d048      	beq.n	800619c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800610a:	2308      	movs	r3, #8
 800610c:	425b      	negs	r3, r3
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <vPortFree+0xac>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <vPortFree+0x44>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <vPortFree+0x62>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	60bb      	str	r3, [r7, #8]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <vPortFree+0xac>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d019      	beq.n	800619c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d115      	bne.n	800619c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <vPortFree+0xac>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006180:	f7ff fa22 	bl	80055c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <vPortFree+0xb0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4413      	add	r3, r2
 800618e:	4a06      	ldr	r2, [pc, #24]	; (80061a8 <vPortFree+0xb0>)
 8006190:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006192:	6938      	ldr	r0, [r7, #16]
 8006194:	f000 f86c 	bl	8006270 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006198:	f7ff fa24 	bl	80055e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20001c78 	.word	0x20001c78
 80061a8:	20001c70 	.word	0x20001c70

080061ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061b8:	4b27      	ldr	r3, [pc, #156]	; (8006258 <prvHeapInit+0xac>)
 80061ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3307      	adds	r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <prvHeapInit+0xac>)
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061e4:	4a1d      	ldr	r2, [pc, #116]	; (800625c <prvHeapInit+0xb0>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061ea:	4b1c      	ldr	r3, [pc, #112]	; (800625c <prvHeapInit+0xb0>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	4413      	add	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061f8:	2208      	movs	r2, #8
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a15      	ldr	r2, [pc, #84]	; (8006260 <prvHeapInit+0xb4>)
 800620c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <prvHeapInit+0xb4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <prvHeapInit+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <prvHeapInit+0xb4>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <prvHeapInit+0xb8>)
 800623a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a09      	ldr	r2, [pc, #36]	; (8006268 <prvHeapInit+0xbc>)
 8006242:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006244:	4b09      	ldr	r3, [pc, #36]	; (800626c <prvHeapInit+0xc0>)
 8006246:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20001064 	.word	0x20001064
 800625c:	20001c64 	.word	0x20001c64
 8006260:	20001c6c 	.word	0x20001c6c
 8006264:	20001c74 	.word	0x20001c74
 8006268:	20001c70 	.word	0x20001c70
 800626c:	20001c78 	.word	0x20001c78

08006270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006278:	4b27      	ldr	r3, [pc, #156]	; (8006318 <prvInsertBlockIntoFreeList+0xa8>)
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e002      	b.n	8006284 <prvInsertBlockIntoFreeList+0x14>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d8f7      	bhi.n	800627e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d108      	bne.n	80062b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	441a      	add	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d118      	bne.n	80062f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <prvInsertBlockIntoFreeList+0xac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d00d      	beq.n	80062ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e008      	b.n	8006300 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <prvInsertBlockIntoFreeList+0xac>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e003      	b.n	8006300 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d002      	beq.n	800630e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	20001c64 	.word	0x20001c64
 800631c:	20001c6c 	.word	0x20001c6c

08006320 <malloc>:
 8006320:	4b02      	ldr	r3, [pc, #8]	; (800632c <malloc+0xc>)
 8006322:	4601      	mov	r1, r0
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	f000 b823 	b.w	8006370 <_malloc_r>
 800632a:	bf00      	nop
 800632c:	20000970 	.word	0x20000970

08006330 <sbrk_aligned>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0e      	ldr	r6, [pc, #56]	; (800636c <sbrk_aligned+0x3c>)
 8006334:	460c      	mov	r4, r1
 8006336:	6831      	ldr	r1, [r6, #0]
 8006338:	4605      	mov	r5, r0
 800633a:	b911      	cbnz	r1, 8006342 <sbrk_aligned+0x12>
 800633c:	f000 f8cc 	bl	80064d8 <_sbrk_r>
 8006340:	6030      	str	r0, [r6, #0]
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f8c7 	bl	80064d8 <_sbrk_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d00a      	beq.n	8006364 <sbrk_aligned+0x34>
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d007      	beq.n	8006368 <sbrk_aligned+0x38>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 f8bc 	bl	80064d8 <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d101      	bne.n	8006368 <sbrk_aligned+0x38>
 8006364:	f04f 34ff 	mov.w	r4, #4294967295
 8006368:	4620      	mov	r0, r4
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	20001c80 	.word	0x20001c80

08006370 <_malloc_r>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	1ccd      	adds	r5, r1, #3
 8006376:	f025 0503 	bic.w	r5, r5, #3
 800637a:	3508      	adds	r5, #8
 800637c:	2d0c      	cmp	r5, #12
 800637e:	bf38      	it	cc
 8006380:	250c      	movcc	r5, #12
 8006382:	2d00      	cmp	r5, #0
 8006384:	4607      	mov	r7, r0
 8006386:	db01      	blt.n	800638c <_malloc_r+0x1c>
 8006388:	42a9      	cmp	r1, r5
 800638a:	d905      	bls.n	8006398 <_malloc_r+0x28>
 800638c:	230c      	movs	r3, #12
 800638e:	2600      	movs	r6, #0
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	4630      	mov	r0, r6
 8006394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006398:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800646c <_malloc_r+0xfc>
 800639c:	f000 f868 	bl	8006470 <__malloc_lock>
 80063a0:	f8d8 3000 	ldr.w	r3, [r8]
 80063a4:	461c      	mov	r4, r3
 80063a6:	bb5c      	cbnz	r4, 8006400 <_malloc_r+0x90>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4638      	mov	r0, r7
 80063ac:	f7ff ffc0 	bl	8006330 <sbrk_aligned>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	4604      	mov	r4, r0
 80063b4:	d155      	bne.n	8006462 <_malloc_r+0xf2>
 80063b6:	f8d8 4000 	ldr.w	r4, [r8]
 80063ba:	4626      	mov	r6, r4
 80063bc:	2e00      	cmp	r6, #0
 80063be:	d145      	bne.n	800644c <_malloc_r+0xdc>
 80063c0:	2c00      	cmp	r4, #0
 80063c2:	d048      	beq.n	8006456 <_malloc_r+0xe6>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	4631      	mov	r1, r6
 80063c8:	4638      	mov	r0, r7
 80063ca:	eb04 0903 	add.w	r9, r4, r3
 80063ce:	f000 f883 	bl	80064d8 <_sbrk_r>
 80063d2:	4581      	cmp	r9, r0
 80063d4:	d13f      	bne.n	8006456 <_malloc_r+0xe6>
 80063d6:	6821      	ldr	r1, [r4, #0]
 80063d8:	4638      	mov	r0, r7
 80063da:	1a6d      	subs	r5, r5, r1
 80063dc:	4629      	mov	r1, r5
 80063de:	f7ff ffa7 	bl	8006330 <sbrk_aligned>
 80063e2:	3001      	adds	r0, #1
 80063e4:	d037      	beq.n	8006456 <_malloc_r+0xe6>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	442b      	add	r3, r5
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	f8d8 3000 	ldr.w	r3, [r8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d038      	beq.n	8006466 <_malloc_r+0xf6>
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	42a2      	cmp	r2, r4
 80063f8:	d12b      	bne.n	8006452 <_malloc_r+0xe2>
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	e00f      	b.n	8006420 <_malloc_r+0xb0>
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	1b52      	subs	r2, r2, r5
 8006404:	d41f      	bmi.n	8006446 <_malloc_r+0xd6>
 8006406:	2a0b      	cmp	r2, #11
 8006408:	d917      	bls.n	800643a <_malloc_r+0xca>
 800640a:	1961      	adds	r1, r4, r5
 800640c:	42a3      	cmp	r3, r4
 800640e:	6025      	str	r5, [r4, #0]
 8006410:	bf18      	it	ne
 8006412:	6059      	strne	r1, [r3, #4]
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	bf08      	it	eq
 8006418:	f8c8 1000 	streq.w	r1, [r8]
 800641c:	5162      	str	r2, [r4, r5]
 800641e:	604b      	str	r3, [r1, #4]
 8006420:	4638      	mov	r0, r7
 8006422:	f104 060b 	add.w	r6, r4, #11
 8006426:	f000 f829 	bl	800647c <__malloc_unlock>
 800642a:	f026 0607 	bic.w	r6, r6, #7
 800642e:	1d23      	adds	r3, r4, #4
 8006430:	1af2      	subs	r2, r6, r3
 8006432:	d0ae      	beq.n	8006392 <_malloc_r+0x22>
 8006434:	1b9b      	subs	r3, r3, r6
 8006436:	50a3      	str	r3, [r4, r2]
 8006438:	e7ab      	b.n	8006392 <_malloc_r+0x22>
 800643a:	42a3      	cmp	r3, r4
 800643c:	6862      	ldr	r2, [r4, #4]
 800643e:	d1dd      	bne.n	80063fc <_malloc_r+0x8c>
 8006440:	f8c8 2000 	str.w	r2, [r8]
 8006444:	e7ec      	b.n	8006420 <_malloc_r+0xb0>
 8006446:	4623      	mov	r3, r4
 8006448:	6864      	ldr	r4, [r4, #4]
 800644a:	e7ac      	b.n	80063a6 <_malloc_r+0x36>
 800644c:	4634      	mov	r4, r6
 800644e:	6876      	ldr	r6, [r6, #4]
 8006450:	e7b4      	b.n	80063bc <_malloc_r+0x4c>
 8006452:	4613      	mov	r3, r2
 8006454:	e7cc      	b.n	80063f0 <_malloc_r+0x80>
 8006456:	230c      	movs	r3, #12
 8006458:	4638      	mov	r0, r7
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	f000 f80e 	bl	800647c <__malloc_unlock>
 8006460:	e797      	b.n	8006392 <_malloc_r+0x22>
 8006462:	6025      	str	r5, [r4, #0]
 8006464:	e7dc      	b.n	8006420 <_malloc_r+0xb0>
 8006466:	605b      	str	r3, [r3, #4]
 8006468:	deff      	udf	#255	; 0xff
 800646a:	bf00      	nop
 800646c:	20001c7c 	.word	0x20001c7c

08006470 <__malloc_lock>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__malloc_lock+0x8>)
 8006472:	f000 b86b 	b.w	800654c <__retarget_lock_acquire_recursive>
 8006476:	bf00      	nop
 8006478:	20001dc0 	.word	0x20001dc0

0800647c <__malloc_unlock>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__malloc_unlock+0x8>)
 800647e:	f000 b866 	b.w	800654e <__retarget_lock_release_recursive>
 8006482:	bf00      	nop
 8006484:	20001dc0 	.word	0x20001dc0

08006488 <siprintf>:
 8006488:	b40e      	push	{r1, r2, r3}
 800648a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800648e:	b500      	push	{lr}
 8006490:	b09c      	sub	sp, #112	; 0x70
 8006492:	ab1d      	add	r3, sp, #116	; 0x74
 8006494:	9002      	str	r0, [sp, #8]
 8006496:	9006      	str	r0, [sp, #24]
 8006498:	9107      	str	r1, [sp, #28]
 800649a:	9104      	str	r1, [sp, #16]
 800649c:	4808      	ldr	r0, [pc, #32]	; (80064c0 <siprintf+0x38>)
 800649e:	4909      	ldr	r1, [pc, #36]	; (80064c4 <siprintf+0x3c>)
 80064a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	a902      	add	r1, sp, #8
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f000 f908 	bl	80066c0 <_svfiprintf_r>
 80064b0:	2200      	movs	r2, #0
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	b01c      	add	sp, #112	; 0x70
 80064b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064bc:	b003      	add	sp, #12
 80064be:	4770      	bx	lr
 80064c0:	20000970 	.word	0x20000970
 80064c4:	ffff0208 	.word	0xffff0208

080064c8 <memset>:
 80064c8:	4603      	mov	r3, r0
 80064ca:	4402      	add	r2, r0
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d100      	bne.n	80064d2 <memset+0xa>
 80064d0:	4770      	bx	lr
 80064d2:	f803 1b01 	strb.w	r1, [r3], #1
 80064d6:	e7f9      	b.n	80064cc <memset+0x4>

080064d8 <_sbrk_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	2300      	movs	r3, #0
 80064dc:	4d05      	ldr	r5, [pc, #20]	; (80064f4 <_sbrk_r+0x1c>)
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fb fe46 	bl	8002174 <_sbrk>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_sbrk_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_sbrk_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	20001dbc 	.word	0x20001dbc

080064f8 <__errno>:
 80064f8:	4b01      	ldr	r3, [pc, #4]	; (8006500 <__errno+0x8>)
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000970 	.word	0x20000970

08006504 <__libc_init_array>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	2600      	movs	r6, #0
 8006508:	4d0c      	ldr	r5, [pc, #48]	; (800653c <__libc_init_array+0x38>)
 800650a:	4c0d      	ldr	r4, [pc, #52]	; (8006540 <__libc_init_array+0x3c>)
 800650c:	1b64      	subs	r4, r4, r5
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	42a6      	cmp	r6, r4
 8006512:	d109      	bne.n	8006528 <__libc_init_array+0x24>
 8006514:	f000 fbc6 	bl	8006ca4 <_init>
 8006518:	2600      	movs	r6, #0
 800651a:	4d0a      	ldr	r5, [pc, #40]	; (8006544 <__libc_init_array+0x40>)
 800651c:	4c0a      	ldr	r4, [pc, #40]	; (8006548 <__libc_init_array+0x44>)
 800651e:	1b64      	subs	r4, r4, r5
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	42a6      	cmp	r6, r4
 8006524:	d105      	bne.n	8006532 <__libc_init_array+0x2e>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f855 3b04 	ldr.w	r3, [r5], #4
 800652c:	4798      	blx	r3
 800652e:	3601      	adds	r6, #1
 8006530:	e7ee      	b.n	8006510 <__libc_init_array+0xc>
 8006532:	f855 3b04 	ldr.w	r3, [r5], #4
 8006536:	4798      	blx	r3
 8006538:	3601      	adds	r6, #1
 800653a:	e7f2      	b.n	8006522 <__libc_init_array+0x1e>
 800653c:	08007b64 	.word	0x08007b64
 8006540:	08007b64 	.word	0x08007b64
 8006544:	08007b64 	.word	0x08007b64
 8006548:	08007b68 	.word	0x08007b68

0800654c <__retarget_lock_acquire_recursive>:
 800654c:	4770      	bx	lr

0800654e <__retarget_lock_release_recursive>:
 800654e:	4770      	bx	lr

08006550 <strcpy>:
 8006550:	4603      	mov	r3, r0
 8006552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006556:	f803 2b01 	strb.w	r2, [r3], #1
 800655a:	2a00      	cmp	r2, #0
 800655c:	d1f9      	bne.n	8006552 <strcpy+0x2>
 800655e:	4770      	bx	lr

08006560 <memcpy>:
 8006560:	440a      	add	r2, r1
 8006562:	4291      	cmp	r1, r2
 8006564:	f100 33ff 	add.w	r3, r0, #4294967295
 8006568:	d100      	bne.n	800656c <memcpy+0xc>
 800656a:	4770      	bx	lr
 800656c:	b510      	push	{r4, lr}
 800656e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006572:	4291      	cmp	r1, r2
 8006574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006578:	d1f9      	bne.n	800656e <memcpy+0xe>
 800657a:	bd10      	pop	{r4, pc}

0800657c <_free_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4605      	mov	r5, r0
 8006580:	2900      	cmp	r1, #0
 8006582:	d040      	beq.n	8006606 <_free_r+0x8a>
 8006584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006588:	1f0c      	subs	r4, r1, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfb8      	it	lt
 800658e:	18e4      	addlt	r4, r4, r3
 8006590:	f7ff ff6e 	bl	8006470 <__malloc_lock>
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <_free_r+0x8c>)
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	b933      	cbnz	r3, 80065a8 <_free_r+0x2c>
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	6014      	str	r4, [r2, #0]
 800659e:	4628      	mov	r0, r5
 80065a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a4:	f7ff bf6a 	b.w	800647c <__malloc_unlock>
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d908      	bls.n	80065be <_free_r+0x42>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf01      	itttt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	1809      	addeq	r1, r1, r0
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	e7ed      	b.n	800659a <_free_r+0x1e>
 80065be:	461a      	mov	r2, r3
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b10b      	cbz	r3, 80065c8 <_free_r+0x4c>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d9fa      	bls.n	80065be <_free_r+0x42>
 80065c8:	6811      	ldr	r1, [r2, #0]
 80065ca:	1850      	adds	r0, r2, r1
 80065cc:	42a0      	cmp	r0, r4
 80065ce:	d10b      	bne.n	80065e8 <_free_r+0x6c>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	4401      	add	r1, r0
 80065d4:	1850      	adds	r0, r2, r1
 80065d6:	4283      	cmp	r3, r0
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	d1e0      	bne.n	800659e <_free_r+0x22>
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4408      	add	r0, r1
 80065e2:	6010      	str	r0, [r2, #0]
 80065e4:	6053      	str	r3, [r2, #4]
 80065e6:	e7da      	b.n	800659e <_free_r+0x22>
 80065e8:	d902      	bls.n	80065f0 <_free_r+0x74>
 80065ea:	230c      	movs	r3, #12
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	e7d6      	b.n	800659e <_free_r+0x22>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	1821      	adds	r1, r4, r0
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf01      	itttt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	1809      	addeq	r1, r1, r0
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	6054      	str	r4, [r2, #4]
 8006604:	e7cb      	b.n	800659e <_free_r+0x22>
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20001c7c 	.word	0x20001c7c

0800660c <__ssputs_r>:
 800660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	461f      	mov	r7, r3
 8006612:	688e      	ldr	r6, [r1, #8]
 8006614:	4682      	mov	sl, r0
 8006616:	42be      	cmp	r6, r7
 8006618:	460c      	mov	r4, r1
 800661a:	4690      	mov	r8, r2
 800661c:	680b      	ldr	r3, [r1, #0]
 800661e:	d82c      	bhi.n	800667a <__ssputs_r+0x6e>
 8006620:	898a      	ldrh	r2, [r1, #12]
 8006622:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006626:	d026      	beq.n	8006676 <__ssputs_r+0x6a>
 8006628:	6965      	ldr	r5, [r4, #20]
 800662a:	6909      	ldr	r1, [r1, #16]
 800662c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006630:	eba3 0901 	sub.w	r9, r3, r1
 8006634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006638:	1c7b      	adds	r3, r7, #1
 800663a:	444b      	add	r3, r9
 800663c:	106d      	asrs	r5, r5, #1
 800663e:	429d      	cmp	r5, r3
 8006640:	bf38      	it	cc
 8006642:	461d      	movcc	r5, r3
 8006644:	0553      	lsls	r3, r2, #21
 8006646:	d527      	bpl.n	8006698 <__ssputs_r+0x8c>
 8006648:	4629      	mov	r1, r5
 800664a:	f7ff fe91 	bl	8006370 <_malloc_r>
 800664e:	4606      	mov	r6, r0
 8006650:	b360      	cbz	r0, 80066ac <__ssputs_r+0xa0>
 8006652:	464a      	mov	r2, r9
 8006654:	6921      	ldr	r1, [r4, #16]
 8006656:	f7ff ff83 	bl	8006560 <memcpy>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	6126      	str	r6, [r4, #16]
 8006668:	444e      	add	r6, r9
 800666a:	6026      	str	r6, [r4, #0]
 800666c:	463e      	mov	r6, r7
 800666e:	6165      	str	r5, [r4, #20]
 8006670:	eba5 0509 	sub.w	r5, r5, r9
 8006674:	60a5      	str	r5, [r4, #8]
 8006676:	42be      	cmp	r6, r7
 8006678:	d900      	bls.n	800667c <__ssputs_r+0x70>
 800667a:	463e      	mov	r6, r7
 800667c:	4632      	mov	r2, r6
 800667e:	4641      	mov	r1, r8
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	f000 faaf 	bl	8006be4 <memmove>
 8006686:	2000      	movs	r0, #0
 8006688:	68a3      	ldr	r3, [r4, #8]
 800668a:	1b9b      	subs	r3, r3, r6
 800668c:	60a3      	str	r3, [r4, #8]
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	4433      	add	r3, r6
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006698:	462a      	mov	r2, r5
 800669a:	f000 facb 	bl	8006c34 <_realloc_r>
 800669e:	4606      	mov	r6, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1e0      	bne.n	8006666 <__ssputs_r+0x5a>
 80066a4:	4650      	mov	r0, sl
 80066a6:	6921      	ldr	r1, [r4, #16]
 80066a8:	f7ff ff68 	bl	800657c <_free_r>
 80066ac:	230c      	movs	r3, #12
 80066ae:	f8ca 3000 	str.w	r3, [sl]
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e7e9      	b.n	8006694 <__ssputs_r+0x88>

080066c0 <_svfiprintf_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	4698      	mov	r8, r3
 80066c6:	898b      	ldrh	r3, [r1, #12]
 80066c8:	4607      	mov	r7, r0
 80066ca:	061b      	lsls	r3, r3, #24
 80066cc:	460d      	mov	r5, r1
 80066ce:	4614      	mov	r4, r2
 80066d0:	b09d      	sub	sp, #116	; 0x74
 80066d2:	d50e      	bpl.n	80066f2 <_svfiprintf_r+0x32>
 80066d4:	690b      	ldr	r3, [r1, #16]
 80066d6:	b963      	cbnz	r3, 80066f2 <_svfiprintf_r+0x32>
 80066d8:	2140      	movs	r1, #64	; 0x40
 80066da:	f7ff fe49 	bl	8006370 <_malloc_r>
 80066de:	6028      	str	r0, [r5, #0]
 80066e0:	6128      	str	r0, [r5, #16]
 80066e2:	b920      	cbnz	r0, 80066ee <_svfiprintf_r+0x2e>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e0d0      	b.n	8006890 <_svfiprintf_r+0x1d0>
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	616b      	str	r3, [r5, #20]
 80066f2:	2300      	movs	r3, #0
 80066f4:	9309      	str	r3, [sp, #36]	; 0x24
 80066f6:	2320      	movs	r3, #32
 80066f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066fc:	2330      	movs	r3, #48	; 0x30
 80066fe:	f04f 0901 	mov.w	r9, #1
 8006702:	f8cd 800c 	str.w	r8, [sp, #12]
 8006706:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80068a8 <_svfiprintf_r+0x1e8>
 800670a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800670e:	4623      	mov	r3, r4
 8006710:	469a      	mov	sl, r3
 8006712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006716:	b10a      	cbz	r2, 800671c <_svfiprintf_r+0x5c>
 8006718:	2a25      	cmp	r2, #37	; 0x25
 800671a:	d1f9      	bne.n	8006710 <_svfiprintf_r+0x50>
 800671c:	ebba 0b04 	subs.w	fp, sl, r4
 8006720:	d00b      	beq.n	800673a <_svfiprintf_r+0x7a>
 8006722:	465b      	mov	r3, fp
 8006724:	4622      	mov	r2, r4
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ff6f 	bl	800660c <__ssputs_r>
 800672e:	3001      	adds	r0, #1
 8006730:	f000 80a9 	beq.w	8006886 <_svfiprintf_r+0x1c6>
 8006734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006736:	445a      	add	r2, fp
 8006738:	9209      	str	r2, [sp, #36]	; 0x24
 800673a:	f89a 3000 	ldrb.w	r3, [sl]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80a1 	beq.w	8006886 <_svfiprintf_r+0x1c6>
 8006744:	2300      	movs	r3, #0
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674e:	f10a 0a01 	add.w	sl, sl, #1
 8006752:	9304      	str	r3, [sp, #16]
 8006754:	9307      	str	r3, [sp, #28]
 8006756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675a:	931a      	str	r3, [sp, #104]	; 0x68
 800675c:	4654      	mov	r4, sl
 800675e:	2205      	movs	r2, #5
 8006760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006764:	4850      	ldr	r0, [pc, #320]	; (80068a8 <_svfiprintf_r+0x1e8>)
 8006766:	f000 fa57 	bl	8006c18 <memchr>
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	b9d8      	cbnz	r0, 80067a6 <_svfiprintf_r+0xe6>
 800676e:	06d0      	lsls	r0, r2, #27
 8006770:	bf44      	itt	mi
 8006772:	2320      	movmi	r3, #32
 8006774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006778:	0711      	lsls	r1, r2, #28
 800677a:	bf44      	itt	mi
 800677c:	232b      	movmi	r3, #43	; 0x2b
 800677e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006782:	f89a 3000 	ldrb.w	r3, [sl]
 8006786:	2b2a      	cmp	r3, #42	; 0x2a
 8006788:	d015      	beq.n	80067b6 <_svfiprintf_r+0xf6>
 800678a:	4654      	mov	r4, sl
 800678c:	2000      	movs	r0, #0
 800678e:	f04f 0c0a 	mov.w	ip, #10
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	4621      	mov	r1, r4
 8006796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679a:	3b30      	subs	r3, #48	; 0x30
 800679c:	2b09      	cmp	r3, #9
 800679e:	d94d      	bls.n	800683c <_svfiprintf_r+0x17c>
 80067a0:	b1b0      	cbz	r0, 80067d0 <_svfiprintf_r+0x110>
 80067a2:	9207      	str	r2, [sp, #28]
 80067a4:	e014      	b.n	80067d0 <_svfiprintf_r+0x110>
 80067a6:	eba0 0308 	sub.w	r3, r0, r8
 80067aa:	fa09 f303 	lsl.w	r3, r9, r3
 80067ae:	4313      	orrs	r3, r2
 80067b0:	46a2      	mov	sl, r4
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	e7d2      	b.n	800675c <_svfiprintf_r+0x9c>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9103      	str	r1, [sp, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfbb      	ittet	lt
 80067c2:	425b      	neglt	r3, r3
 80067c4:	f042 0202 	orrlt.w	r2, r2, #2
 80067c8:	9307      	strge	r3, [sp, #28]
 80067ca:	9307      	strlt	r3, [sp, #28]
 80067cc:	bfb8      	it	lt
 80067ce:	9204      	strlt	r2, [sp, #16]
 80067d0:	7823      	ldrb	r3, [r4, #0]
 80067d2:	2b2e      	cmp	r3, #46	; 0x2e
 80067d4:	d10c      	bne.n	80067f0 <_svfiprintf_r+0x130>
 80067d6:	7863      	ldrb	r3, [r4, #1]
 80067d8:	2b2a      	cmp	r3, #42	; 0x2a
 80067da:	d134      	bne.n	8006846 <_svfiprintf_r+0x186>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3402      	adds	r4, #2
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9203      	str	r2, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80068ac <_svfiprintf_r+0x1ec>
 80067f4:	2203      	movs	r2, #3
 80067f6:	4650      	mov	r0, sl
 80067f8:	7821      	ldrb	r1, [r4, #0]
 80067fa:	f000 fa0d 	bl	8006c18 <memchr>
 80067fe:	b138      	cbz	r0, 8006810 <_svfiprintf_r+0x150>
 8006800:	2240      	movs	r2, #64	; 0x40
 8006802:	9b04      	ldr	r3, [sp, #16]
 8006804:	eba0 000a 	sub.w	r0, r0, sl
 8006808:	4082      	lsls	r2, r0
 800680a:	4313      	orrs	r3, r2
 800680c:	3401      	adds	r4, #1
 800680e:	9304      	str	r3, [sp, #16]
 8006810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006814:	2206      	movs	r2, #6
 8006816:	4826      	ldr	r0, [pc, #152]	; (80068b0 <_svfiprintf_r+0x1f0>)
 8006818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800681c:	f000 f9fc 	bl	8006c18 <memchr>
 8006820:	2800      	cmp	r0, #0
 8006822:	d038      	beq.n	8006896 <_svfiprintf_r+0x1d6>
 8006824:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <_svfiprintf_r+0x1f4>)
 8006826:	bb1b      	cbnz	r3, 8006870 <_svfiprintf_r+0x1b0>
 8006828:	9b03      	ldr	r3, [sp, #12]
 800682a:	3307      	adds	r3, #7
 800682c:	f023 0307 	bic.w	r3, r3, #7
 8006830:	3308      	adds	r3, #8
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006836:	4433      	add	r3, r6
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	e768      	b.n	800670e <_svfiprintf_r+0x4e>
 800683c:	460c      	mov	r4, r1
 800683e:	2001      	movs	r0, #1
 8006840:	fb0c 3202 	mla	r2, ip, r2, r3
 8006844:	e7a6      	b.n	8006794 <_svfiprintf_r+0xd4>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 0c0a 	mov.w	ip, #10
 800684c:	4619      	mov	r1, r3
 800684e:	3401      	adds	r4, #1
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4620      	mov	r0, r4
 8006854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006858:	3a30      	subs	r2, #48	; 0x30
 800685a:	2a09      	cmp	r2, #9
 800685c:	d903      	bls.n	8006866 <_svfiprintf_r+0x1a6>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0c6      	beq.n	80067f0 <_svfiprintf_r+0x130>
 8006862:	9105      	str	r1, [sp, #20]
 8006864:	e7c4      	b.n	80067f0 <_svfiprintf_r+0x130>
 8006866:	4604      	mov	r4, r0
 8006868:	2301      	movs	r3, #1
 800686a:	fb0c 2101 	mla	r1, ip, r1, r2
 800686e:	e7f0      	b.n	8006852 <_svfiprintf_r+0x192>
 8006870:	ab03      	add	r3, sp, #12
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	462a      	mov	r2, r5
 8006876:	4638      	mov	r0, r7
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <_svfiprintf_r+0x1f8>)
 800687a:	a904      	add	r1, sp, #16
 800687c:	f3af 8000 	nop.w
 8006880:	1c42      	adds	r2, r0, #1
 8006882:	4606      	mov	r6, r0
 8006884:	d1d6      	bne.n	8006834 <_svfiprintf_r+0x174>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	065b      	lsls	r3, r3, #25
 800688a:	f53f af2d 	bmi.w	80066e8 <_svfiprintf_r+0x28>
 800688e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006890:	b01d      	add	sp, #116	; 0x74
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	ab03      	add	r3, sp, #12
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	462a      	mov	r2, r5
 800689c:	4638      	mov	r0, r7
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <_svfiprintf_r+0x1f8>)
 80068a0:	a904      	add	r1, sp, #16
 80068a2:	f000 f87d 	bl	80069a0 <_printf_i>
 80068a6:	e7eb      	b.n	8006880 <_svfiprintf_r+0x1c0>
 80068a8:	08007b30 	.word	0x08007b30
 80068ac:	08007b36 	.word	0x08007b36
 80068b0:	08007b3a 	.word	0x08007b3a
 80068b4:	00000000 	.word	0x00000000
 80068b8:	0800660d 	.word	0x0800660d

080068bc <_printf_common>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	4616      	mov	r6, r2
 80068c2:	4699      	mov	r9, r3
 80068c4:	688a      	ldr	r2, [r1, #8]
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	4607      	mov	r7, r0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bfb8      	it	lt
 80068ce:	4613      	movlt	r3, r2
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d6:	460c      	mov	r4, r1
 80068d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068dc:	b10a      	cbz	r2, 80068e2 <_printf_common+0x26>
 80068de:	3301      	adds	r3, #1
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	0699      	lsls	r1, r3, #26
 80068e6:	bf42      	ittt	mi
 80068e8:	6833      	ldrmi	r3, [r6, #0]
 80068ea:	3302      	addmi	r3, #2
 80068ec:	6033      	strmi	r3, [r6, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	f015 0506 	ands.w	r5, r5, #6
 80068f4:	d106      	bne.n	8006904 <_printf_common+0x48>
 80068f6:	f104 0a19 	add.w	sl, r4, #25
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	6832      	ldr	r2, [r6, #0]
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc2b      	bgt.n	800695c <_printf_common+0xa0>
 8006904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006908:	1e13      	subs	r3, r2, #0
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	bf18      	it	ne
 800690e:	2301      	movne	r3, #1
 8006910:	0692      	lsls	r2, r2, #26
 8006912:	d430      	bmi.n	8006976 <_printf_common+0xba>
 8006914:	4649      	mov	r1, r9
 8006916:	4638      	mov	r0, r7
 8006918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d023      	beq.n	800696a <_printf_common+0xae>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	6922      	ldr	r2, [r4, #16]
 8006926:	f003 0306 	and.w	r3, r3, #6
 800692a:	2b04      	cmp	r3, #4
 800692c:	bf14      	ite	ne
 800692e:	2500      	movne	r5, #0
 8006930:	6833      	ldreq	r3, [r6, #0]
 8006932:	f04f 0600 	mov.w	r6, #0
 8006936:	bf08      	it	eq
 8006938:	68e5      	ldreq	r5, [r4, #12]
 800693a:	f104 041a 	add.w	r4, r4, #26
 800693e:	bf08      	it	eq
 8006940:	1aed      	subeq	r5, r5, r3
 8006942:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006946:	bf08      	it	eq
 8006948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800694c:	4293      	cmp	r3, r2
 800694e:	bfc4      	itt	gt
 8006950:	1a9b      	subgt	r3, r3, r2
 8006952:	18ed      	addgt	r5, r5, r3
 8006954:	42b5      	cmp	r5, r6
 8006956:	d11a      	bne.n	800698e <_printf_common+0xd2>
 8006958:	2000      	movs	r0, #0
 800695a:	e008      	b.n	800696e <_printf_common+0xb2>
 800695c:	2301      	movs	r3, #1
 800695e:	4652      	mov	r2, sl
 8006960:	4649      	mov	r1, r9
 8006962:	4638      	mov	r0, r7
 8006964:	47c0      	blx	r8
 8006966:	3001      	adds	r0, #1
 8006968:	d103      	bne.n	8006972 <_printf_common+0xb6>
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	3501      	adds	r5, #1
 8006974:	e7c1      	b.n	80068fa <_printf_common+0x3e>
 8006976:	2030      	movs	r0, #48	; 0x30
 8006978:	18e1      	adds	r1, r4, r3
 800697a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006984:	4422      	add	r2, r4
 8006986:	3302      	adds	r3, #2
 8006988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800698c:	e7c2      	b.n	8006914 <_printf_common+0x58>
 800698e:	2301      	movs	r3, #1
 8006990:	4622      	mov	r2, r4
 8006992:	4649      	mov	r1, r9
 8006994:	4638      	mov	r0, r7
 8006996:	47c0      	blx	r8
 8006998:	3001      	adds	r0, #1
 800699a:	d0e6      	beq.n	800696a <_printf_common+0xae>
 800699c:	3601      	adds	r6, #1
 800699e:	e7d9      	b.n	8006954 <_printf_common+0x98>

080069a0 <_printf_i>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	7e0f      	ldrb	r7, [r1, #24]
 80069a6:	4691      	mov	r9, r2
 80069a8:	2f78      	cmp	r7, #120	; 0x78
 80069aa:	4680      	mov	r8, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	469a      	mov	sl, r3
 80069b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069b6:	d807      	bhi.n	80069c8 <_printf_i+0x28>
 80069b8:	2f62      	cmp	r7, #98	; 0x62
 80069ba:	d80a      	bhi.n	80069d2 <_printf_i+0x32>
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f000 80d5 	beq.w	8006b6c <_printf_i+0x1cc>
 80069c2:	2f58      	cmp	r7, #88	; 0x58
 80069c4:	f000 80c1 	beq.w	8006b4a <_printf_i+0x1aa>
 80069c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d0:	e03a      	b.n	8006a48 <_printf_i+0xa8>
 80069d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069d6:	2b15      	cmp	r3, #21
 80069d8:	d8f6      	bhi.n	80069c8 <_printf_i+0x28>
 80069da:	a101      	add	r1, pc, #4	; (adr r1, 80069e0 <_printf_i+0x40>)
 80069dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	080069c9 	.word	0x080069c9
 80069ec:	080069c9 	.word	0x080069c9
 80069f0:	080069c9 	.word	0x080069c9
 80069f4:	080069c9 	.word	0x080069c9
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	080069c9 	.word	0x080069c9
 8006a00:	080069c9 	.word	0x080069c9
 8006a04:	080069c9 	.word	0x080069c9
 8006a08:	080069c9 	.word	0x080069c9
 8006a0c:	08006b53 	.word	0x08006b53
 8006a10:	08006a79 	.word	0x08006a79
 8006a14:	08006b0d 	.word	0x08006b0d
 8006a18:	080069c9 	.word	0x080069c9
 8006a1c:	080069c9 	.word	0x080069c9
 8006a20:	08006b75 	.word	0x08006b75
 8006a24:	080069c9 	.word	0x080069c9
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	080069c9 	.word	0x080069c9
 8006a30:	080069c9 	.word	0x080069c9
 8006a34:	08006b15 	.word	0x08006b15
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	602a      	str	r2, [r5, #0]
 8006a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0a0      	b.n	8006b8e <_printf_i+0x1ee>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	0607      	lsls	r7, r0, #24
 8006a52:	f103 0104 	add.w	r1, r3, #4
 8006a56:	6029      	str	r1, [r5, #0]
 8006a58:	d501      	bpl.n	8006a5e <_printf_i+0xbe>
 8006a5a:	681e      	ldr	r6, [r3, #0]
 8006a5c:	e003      	b.n	8006a66 <_printf_i+0xc6>
 8006a5e:	0646      	lsls	r6, r0, #25
 8006a60:	d5fb      	bpl.n	8006a5a <_printf_i+0xba>
 8006a62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	da03      	bge.n	8006a72 <_printf_i+0xd2>
 8006a6a:	232d      	movs	r3, #45	; 0x2d
 8006a6c:	4276      	negs	r6, r6
 8006a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a72:	230a      	movs	r3, #10
 8006a74:	4859      	ldr	r0, [pc, #356]	; (8006bdc <_printf_i+0x23c>)
 8006a76:	e012      	b.n	8006a9e <_printf_i+0xfe>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	6820      	ldr	r0, [r4, #0]
 8006a7c:	1d19      	adds	r1, r3, #4
 8006a7e:	6029      	str	r1, [r5, #0]
 8006a80:	0605      	lsls	r5, r0, #24
 8006a82:	d501      	bpl.n	8006a88 <_printf_i+0xe8>
 8006a84:	681e      	ldr	r6, [r3, #0]
 8006a86:	e002      	b.n	8006a8e <_printf_i+0xee>
 8006a88:	0641      	lsls	r1, r0, #25
 8006a8a:	d5fb      	bpl.n	8006a84 <_printf_i+0xe4>
 8006a8c:	881e      	ldrh	r6, [r3, #0]
 8006a8e:	2f6f      	cmp	r7, #111	; 0x6f
 8006a90:	bf0c      	ite	eq
 8006a92:	2308      	moveq	r3, #8
 8006a94:	230a      	movne	r3, #10
 8006a96:	4851      	ldr	r0, [pc, #324]	; (8006bdc <_printf_i+0x23c>)
 8006a98:	2100      	movs	r1, #0
 8006a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a9e:	6865      	ldr	r5, [r4, #4]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	bfa8      	it	ge
 8006aa4:	6821      	ldrge	r1, [r4, #0]
 8006aa6:	60a5      	str	r5, [r4, #8]
 8006aa8:	bfa4      	itt	ge
 8006aaa:	f021 0104 	bicge.w	r1, r1, #4
 8006aae:	6021      	strge	r1, [r4, #0]
 8006ab0:	b90e      	cbnz	r6, 8006ab6 <_printf_i+0x116>
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	d04b      	beq.n	8006b4e <_printf_i+0x1ae>
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	fbb6 f1f3 	udiv	r1, r6, r3
 8006abc:	fb03 6711 	mls	r7, r3, r1, r6
 8006ac0:	5dc7      	ldrb	r7, [r0, r7]
 8006ac2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac6:	4637      	mov	r7, r6
 8006ac8:	42bb      	cmp	r3, r7
 8006aca:	460e      	mov	r6, r1
 8006acc:	d9f4      	bls.n	8006ab8 <_printf_i+0x118>
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d10b      	bne.n	8006aea <_printf_i+0x14a>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	07de      	lsls	r6, r3, #31
 8006ad6:	d508      	bpl.n	8006aea <_printf_i+0x14a>
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	6861      	ldr	r1, [r4, #4]
 8006adc:	4299      	cmp	r1, r3
 8006ade:	bfde      	ittt	le
 8006ae0:	2330      	movle	r3, #48	; 0x30
 8006ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aea:	1b52      	subs	r2, r2, r5
 8006aec:	6122      	str	r2, [r4, #16]
 8006aee:	464b      	mov	r3, r9
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f8cd a000 	str.w	sl, [sp]
 8006af8:	aa03      	add	r2, sp, #12
 8006afa:	f7ff fedf 	bl	80068bc <_printf_common>
 8006afe:	3001      	adds	r0, #1
 8006b00:	d14a      	bne.n	8006b98 <_printf_i+0x1f8>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	b004      	add	sp, #16
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	f043 0320 	orr.w	r3, r3, #32
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	2778      	movs	r7, #120	; 0x78
 8006b16:	4832      	ldr	r0, [pc, #200]	; (8006be0 <_printf_i+0x240>)
 8006b18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	6829      	ldr	r1, [r5, #0]
 8006b20:	061f      	lsls	r7, r3, #24
 8006b22:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b26:	d402      	bmi.n	8006b2e <_printf_i+0x18e>
 8006b28:	065f      	lsls	r7, r3, #25
 8006b2a:	bf48      	it	mi
 8006b2c:	b2b6      	uxthmi	r6, r6
 8006b2e:	07df      	lsls	r7, r3, #31
 8006b30:	bf48      	it	mi
 8006b32:	f043 0320 	orrmi.w	r3, r3, #32
 8006b36:	6029      	str	r1, [r5, #0]
 8006b38:	bf48      	it	mi
 8006b3a:	6023      	strmi	r3, [r4, #0]
 8006b3c:	b91e      	cbnz	r6, 8006b46 <_printf_i+0x1a6>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f023 0320 	bic.w	r3, r3, #32
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	2310      	movs	r3, #16
 8006b48:	e7a6      	b.n	8006a98 <_printf_i+0xf8>
 8006b4a:	4824      	ldr	r0, [pc, #144]	; (8006bdc <_printf_i+0x23c>)
 8006b4c:	e7e4      	b.n	8006b18 <_printf_i+0x178>
 8006b4e:	4615      	mov	r5, r2
 8006b50:	e7bd      	b.n	8006ace <_printf_i+0x12e>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	6826      	ldr	r6, [r4, #0]
 8006b56:	1d18      	adds	r0, r3, #4
 8006b58:	6961      	ldr	r1, [r4, #20]
 8006b5a:	6028      	str	r0, [r5, #0]
 8006b5c:	0635      	lsls	r5, r6, #24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	d501      	bpl.n	8006b66 <_printf_i+0x1c6>
 8006b62:	6019      	str	r1, [r3, #0]
 8006b64:	e002      	b.n	8006b6c <_printf_i+0x1cc>
 8006b66:	0670      	lsls	r0, r6, #25
 8006b68:	d5fb      	bpl.n	8006b62 <_printf_i+0x1c2>
 8006b6a:	8019      	strh	r1, [r3, #0]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4615      	mov	r5, r2
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	e7bc      	b.n	8006aee <_printf_i+0x14e>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	2100      	movs	r1, #0
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	681d      	ldr	r5, [r3, #0]
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f849 	bl	8006c18 <memchr>
 8006b86:	b108      	cbz	r0, 8006b8c <_printf_i+0x1ec>
 8006b88:	1b40      	subs	r0, r0, r5
 8006b8a:	6060      	str	r0, [r4, #4]
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	2300      	movs	r3, #0
 8006b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b96:	e7aa      	b.n	8006aee <_printf_i+0x14e>
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	47d0      	blx	sl
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d0ad      	beq.n	8006b02 <_printf_i+0x162>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	079b      	lsls	r3, r3, #30
 8006baa:	d413      	bmi.n	8006bd4 <_printf_i+0x234>
 8006bac:	68e0      	ldr	r0, [r4, #12]
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	4298      	cmp	r0, r3
 8006bb2:	bfb8      	it	lt
 8006bb4:	4618      	movlt	r0, r3
 8006bb6:	e7a6      	b.n	8006b06 <_printf_i+0x166>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4632      	mov	r2, r6
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	47d0      	blx	sl
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d09d      	beq.n	8006b02 <_printf_i+0x162>
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	68e3      	ldr	r3, [r4, #12]
 8006bca:	9903      	ldr	r1, [sp, #12]
 8006bcc:	1a5b      	subs	r3, r3, r1
 8006bce:	42ab      	cmp	r3, r5
 8006bd0:	dcf2      	bgt.n	8006bb8 <_printf_i+0x218>
 8006bd2:	e7eb      	b.n	8006bac <_printf_i+0x20c>
 8006bd4:	2500      	movs	r5, #0
 8006bd6:	f104 0619 	add.w	r6, r4, #25
 8006bda:	e7f5      	b.n	8006bc8 <_printf_i+0x228>
 8006bdc:	08007b41 	.word	0x08007b41
 8006be0:	08007b52 	.word	0x08007b52

08006be4 <memmove>:
 8006be4:	4288      	cmp	r0, r1
 8006be6:	b510      	push	{r4, lr}
 8006be8:	eb01 0402 	add.w	r4, r1, r2
 8006bec:	d902      	bls.n	8006bf4 <memmove+0x10>
 8006bee:	4284      	cmp	r4, r0
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	d807      	bhi.n	8006c04 <memmove+0x20>
 8006bf4:	1e43      	subs	r3, r0, #1
 8006bf6:	42a1      	cmp	r1, r4
 8006bf8:	d008      	beq.n	8006c0c <memmove+0x28>
 8006bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c02:	e7f8      	b.n	8006bf6 <memmove+0x12>
 8006c04:	4601      	mov	r1, r0
 8006c06:	4402      	add	r2, r0
 8006c08:	428a      	cmp	r2, r1
 8006c0a:	d100      	bne.n	8006c0e <memmove+0x2a>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c16:	e7f7      	b.n	8006c08 <memmove+0x24>

08006c18 <memchr>:
 8006c18:	4603      	mov	r3, r0
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	b2c9      	uxtb	r1, r1
 8006c1e:	4402      	add	r2, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	d101      	bne.n	8006c2a <memchr+0x12>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e003      	b.n	8006c32 <memchr+0x1a>
 8006c2a:	7804      	ldrb	r4, [r0, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	428c      	cmp	r4, r1
 8006c30:	d1f6      	bne.n	8006c20 <memchr+0x8>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <_realloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	b921      	cbnz	r1, 8006c4a <_realloc_r+0x16>
 8006c40:	4611      	mov	r1, r2
 8006c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	f7ff bb93 	b.w	8006370 <_malloc_r>
 8006c4a:	b92a      	cbnz	r2, 8006c58 <_realloc_r+0x24>
 8006c4c:	f7ff fc96 	bl	800657c <_free_r>
 8006c50:	4625      	mov	r5, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	f000 f81b 	bl	8006c92 <_malloc_usable_size_r>
 8006c5c:	4284      	cmp	r4, r0
 8006c5e:	4607      	mov	r7, r0
 8006c60:	d802      	bhi.n	8006c68 <_realloc_r+0x34>
 8006c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c66:	d812      	bhi.n	8006c8e <_realloc_r+0x5a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7ff fb80 	bl	8006370 <_malloc_r>
 8006c70:	4605      	mov	r5, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0ed      	beq.n	8006c52 <_realloc_r+0x1e>
 8006c76:	42bc      	cmp	r4, r7
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	bf28      	it	cs
 8006c7e:	463a      	movcs	r2, r7
 8006c80:	f7ff fc6e 	bl	8006560 <memcpy>
 8006c84:	4631      	mov	r1, r6
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fc78 	bl	800657c <_free_r>
 8006c8c:	e7e1      	b.n	8006c52 <_realloc_r+0x1e>
 8006c8e:	4635      	mov	r5, r6
 8006c90:	e7df      	b.n	8006c52 <_realloc_r+0x1e>

08006c92 <_malloc_usable_size_r>:
 8006c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c96:	1f18      	subs	r0, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfbc      	itt	lt
 8006c9c:	580b      	ldrlt	r3, [r1, r0]
 8006c9e:	18c0      	addlt	r0, r0, r3
 8006ca0:	4770      	bx	lr
	...

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
