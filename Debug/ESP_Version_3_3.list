
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c53c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d52c  0800d52c  00020974  2**0
                  CONTENTS
  4 .ARM          00000000  0800d52c  0800d52c  00020974  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d52c  0800d52c  00020974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000974  20000000  0800d534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000141c  20000974  0800dea8  00020974  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d90  0800dea8  00021d90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001852d  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330d  00000000  00000000  00038f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001158  00000000  00000000  0003d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b855  00000000  00000000  0003e988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0d5  00000000  00000000  0005a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7832  00000000  00000000  000752b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006140  00000000  00000000  0011cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00122c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000974 	.word	0x20000974
 800020c:	00000000 	.word	0x00000000
 8000210:	0800c714 	.word	0x0800c714

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000978 	.word	0x20000978
 800022c:	0800c714 	.word	0x0800c714

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000990 	.word	0x20000990
 800026c:	200009e4 	.word	0x200009e4

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <lcd_send_cmd+0x78>)
 80002b4:	f008 fcff 	bl	8008cb6 <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80002be:	bf00      	nop
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <lcd_send_cmd+0x78>)
 80002c2:	f008 fceb 	bl	8008c9c <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2304      	movs	r3, #4
 80002d6:	214e      	movs	r1, #78	; 0x4e
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <lcd_send_cmd+0x78>)
 80002da:	f008 f87f 	bl	80083dc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000e0c 	.word	0x20000e0c

080002ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f043 030d 	orr.w	r3, r3, #13
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f043 0309 	orr.w	r3, r3, #9
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800032c:	bf00      	nop
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <lcd_send_data+0x78>)
 8000330:	f008 fcc1 	bl	8008cb6 <HAL_I2C_GetError>
 8000334:	4603      	mov	r3, r0
 8000336:	2b04      	cmp	r3, #4
 8000338:	d0f9      	beq.n	800032e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800033a:	bf00      	nop
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <lcd_send_data+0x78>)
 800033e:	f008 fcad 	bl	8008c9c <HAL_I2C_GetState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b20      	cmp	r3, #32
 8000346:	d1f9      	bne.n	800033c <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	214e      	movs	r1, #78	; 0x4e
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <lcd_send_data+0x78>)
 8000356:	f008 f841 	bl	80083dc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000e0c 	.word	0x20000e0c

08000368 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000370:	e006      	b.n	8000380 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb6 	bl	80002ec <lcd_send_data>
	while (*str)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <lcd_send_string+0xa>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcd_init>:

void lcd_init (void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff6a 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f7ff ff67 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ff64 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f7ff ff61 	bl	8000270 <lcd_send_cmd>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	337f      	adds	r3, #127	; 0x7f
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80003d4:	e008      	b.n	80003e8 <lcd_gotoxy+0x36>
 else if(row == 2)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d105      	bne.n	80003e8 <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	603a      	str	r2, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	460b      	mov	r3, r1
 80003fe:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffd3 	bl	80003b2 <lcd_gotoxy>
 lcd_send_string(str);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffab 	bl	8000368 <lcd_send_string>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_clear>:

void lcd_clear(void) {
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff26 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 f98f 	bl	8007748 <HAL_Delay>

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000434:	f3bf 8f4f 	dsb	sy
}
 8000438:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <__NVIC_SystemReset+0x24>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000442:	4904      	ldr	r1, [pc, #16]	; (8000454 <__NVIC_SystemReset+0x24>)
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <__NVIC_SystemReset+0x28>)
 8000446:	4313      	orrs	r3, r2
 8000448:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <__NVIC_SystemReset+0x20>
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	05fa0004 	.word	0x05fa0004

0800045c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff fee3 	bl	8000230 <strlen>
 800046a:	4603      	mov	r3, r0
 800046c:	3301      	adds	r3, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f00c f800 	bl	800c474 <malloc>
 8000474:	4603      	mov	r3, r0
 8000476:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <copyText+0x2a>
        strcpy(result, text);
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f00c f931 	bl	800c6e8 <strcpy>
    }
    return result;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000494:	2101      	movs	r1, #1
 8000496:	488f      	ldr	r0, [pc, #572]	; (80006d4 <menu+0x244>)
 8000498:	f007 fde4 	bl	8008064 <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 808e 	bne.w	80005c0 <menu+0x130>
 80004a4:	4b8c      	ldr	r3, [pc, #560]	; (80006d8 <menu+0x248>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	f083 0301 	eor.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f000 8086 	beq.w	80005c0 <menu+0x130>
		menuSayac = menuSayac+1;
 80004b4:	4b89      	ldr	r3, [pc, #548]	; (80006dc <menu+0x24c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b87      	ldr	r3, [pc, #540]	; (80006dc <menu+0x24c>)
 80004be:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80004c0:	4b86      	ldr	r3, [pc, #536]	; (80006dc <menu+0x24c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b20      	cmp	r3, #32
 80004c6:	d102      	bne.n	80004ce <menu+0x3e>
			menuSayac = 1;
 80004c8:	4b84      	ldr	r3, [pc, #528]	; (80006dc <menu+0x24c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80004ce:	4b83      	ldr	r3, [pc, #524]	; (80006dc <menu+0x24c>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b12      	cmp	r3, #18
 80004d4:	d106      	bne.n	80004e4 <menu+0x54>
 80004d6:	4b82      	ldr	r3, [pc, #520]	; (80006e0 <menu+0x250>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d102      	bne.n	80004e4 <menu+0x54>
			menuSayac = 21;
 80004de:	4b7f      	ldr	r3, [pc, #508]	; (80006dc <menu+0x24c>)
 80004e0:	2215      	movs	r2, #21
 80004e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80004e4:	4b7d      	ldr	r3, [pc, #500]	; (80006dc <menu+0x24c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	d106      	bne.n	80004fa <menu+0x6a>
 80004ec:	4b7d      	ldr	r3, [pc, #500]	; (80006e4 <menu+0x254>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <menu+0x6a>
			menuSayac = 16;
 80004f4:	4b79      	ldr	r3, [pc, #484]	; (80006dc <menu+0x24c>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80004fa:	4b78      	ldr	r3, [pc, #480]	; (80006dc <menu+0x24c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b0d      	cmp	r3, #13
 8000500:	d106      	bne.n	8000510 <menu+0x80>
 8000502:	4b78      	ldr	r3, [pc, #480]	; (80006e4 <menu+0x254>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d102      	bne.n	8000510 <menu+0x80>
			menuSayac = 16;
 800050a:	4b74      	ldr	r3, [pc, #464]	; (80006dc <menu+0x24c>)
 800050c:	2210      	movs	r2, #16
 800050e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000510:	4b72      	ldr	r3, [pc, #456]	; (80006dc <menu+0x24c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b09      	cmp	r3, #9
 8000516:	d106      	bne.n	8000526 <menu+0x96>
 8000518:	4b72      	ldr	r3, [pc, #456]	; (80006e4 <menu+0x254>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d102      	bne.n	8000526 <menu+0x96>
			menuSayac = 13;
 8000520:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <menu+0x24c>)
 8000522:	220d      	movs	r2, #13
 8000524:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000526:	4b6d      	ldr	r3, [pc, #436]	; (80006dc <menu+0x24c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b0a      	cmp	r3, #10
 800052c:	d10a      	bne.n	8000544 <menu+0xb4>
 800052e:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <menu+0x258>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d003      	beq.n	800053e <menu+0xae>
 8000536:	4b6c      	ldr	r3, [pc, #432]	; (80006e8 <menu+0x258>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d102      	bne.n	8000544 <menu+0xb4>
			menuSayac = 11;
 800053e:	4b67      	ldr	r3, [pc, #412]	; (80006dc <menu+0x24c>)
 8000540:	220b      	movs	r2, #11
 8000542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000544:	4b65      	ldr	r3, [pc, #404]	; (80006dc <menu+0x24c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b0c      	cmp	r3, #12
 800054a:	d10e      	bne.n	800056a <menu+0xda>
 800054c:	4b67      	ldr	r3, [pc, #412]	; (80006ec <menu+0x25c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d003      	beq.n	800055c <menu+0xcc>
 8000554:	4b65      	ldr	r3, [pc, #404]	; (80006ec <menu+0x25c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d106      	bne.n	800056a <menu+0xda>
 800055c:	4b61      	ldr	r3, [pc, #388]	; (80006e4 <menu+0x254>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <menu+0xda>
			menuSayac = 16;
 8000564:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <menu+0x24c>)
 8000566:	2210      	movs	r2, #16
 8000568:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800056a:	4b5c      	ldr	r3, [pc, #368]	; (80006dc <menu+0x24c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b0c      	cmp	r3, #12
 8000570:	d10e      	bne.n	8000590 <menu+0x100>
 8000572:	4b5e      	ldr	r3, [pc, #376]	; (80006ec <menu+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d003      	beq.n	8000582 <menu+0xf2>
 800057a:	4b5c      	ldr	r3, [pc, #368]	; (80006ec <menu+0x25c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d106      	bne.n	8000590 <menu+0x100>
 8000582:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <menu+0x254>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d102      	bne.n	8000590 <menu+0x100>
			menuSayac = 13;
 800058a:	4b54      	ldr	r3, [pc, #336]	; (80006dc <menu+0x24c>)
 800058c:	220d      	movs	r2, #13
 800058e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000590:	4b52      	ldr	r3, [pc, #328]	; (80006dc <menu+0x24c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d106      	bne.n	80005a6 <menu+0x116>
 8000598:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <menu+0x260>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d102      	bne.n	80005a6 <menu+0x116>
			menuSayac = 16;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <menu+0x24c>)
 80005a2:	2210      	movs	r2, #16
 80005a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80005a6:	4b4d      	ldr	r3, [pc, #308]	; (80006dc <menu+0x24c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b18      	cmp	r3, #24
 80005ac:	d106      	bne.n	80005bc <menu+0x12c>
 80005ae:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <menu+0x250>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <menu+0x12c>
			menuSayac = 26;
 80005b6:	4b49      	ldr	r3, [pc, #292]	; (80006dc <menu+0x24c>)
 80005b8:	221a      	movs	r2, #26
 80005ba:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80005bc:	f003 fecc 	bl	8004358 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80005c0:	2108      	movs	r1, #8
 80005c2:	484c      	ldr	r0, [pc, #304]	; (80006f4 <menu+0x264>)
 80005c4:	f007 fd4e 	bl	8008064 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d175      	bne.n	80006ba <menu+0x22a>
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <menu+0x248>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d06e      	beq.n	80006ba <menu+0x22a>
		if (menuSayac <= 1) {
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <menu+0x24c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d802      	bhi.n	80005ea <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <menu+0x24c>)
 80005e6:	2220      	movs	r2, #32
 80005e8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <menu+0x24c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <menu+0x24c>)
 80005f4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <menu+0x24c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b14      	cmp	r3, #20
 80005fc:	d106      	bne.n	800060c <menu+0x17c>
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <menu+0x250>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <menu+0x17c>
			menuSayac = 17;
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <menu+0x24c>)
 8000608:	2211      	movs	r2, #17
 800060a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <menu+0x24c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d106      	bne.n	8000622 <menu+0x192>
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <menu+0x254>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <menu+0x192>
			menuSayac = 7;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <menu+0x24c>)
 800061e:	2207      	movs	r2, #7
 8000620:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <menu+0x24c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d106      	bne.n	8000638 <menu+0x1a8>
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <menu+0x254>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <menu+0x1a8>
			menuSayac = 12;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <menu+0x24c>)
 8000634:	220c      	movs	r2, #12
 8000636:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <menu+0x24c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b0c      	cmp	r3, #12
 800063e:	d106      	bne.n	800064e <menu+0x1be>
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <menu+0x254>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d102      	bne.n	800064e <menu+0x1be>
			menuSayac = 8;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <menu+0x24c>)
 800064a:	2208      	movs	r2, #8
 800064c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <menu+0x24c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d10a      	bne.n	800066c <menu+0x1dc>
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <menu+0x258>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <menu+0x1d6>
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <menu+0x258>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d102      	bne.n	800066c <menu+0x1dc>
			menuSayac = 9;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <menu+0x24c>)
 8000668:	2209      	movs	r2, #9
 800066a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <menu+0x24c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b0c      	cmp	r3, #12
 8000672:	d10a      	bne.n	800068a <menu+0x1fa>
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <menu+0x25c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d003      	beq.n	8000684 <menu+0x1f4>
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <menu+0x25c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <menu+0x1fa>
			menuSayac = 11;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <menu+0x24c>)
 8000686:	220b      	movs	r2, #11
 8000688:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <menu+0x24c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d106      	bne.n	80006a0 <menu+0x210>
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <menu+0x260>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d102      	bne.n	80006a0 <menu+0x210>
			menuSayac = 14;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <menu+0x24c>)
 800069c:	220e      	movs	r2, #14
 800069e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <menu+0x24c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b19      	cmp	r3, #25
 80006a6:	d106      	bne.n	80006b6 <menu+0x226>
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <menu+0x250>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <menu+0x226>
			menuSayac = 23;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <menu+0x24c>)
 80006b2:	2217      	movs	r2, #23
 80006b4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006b6:	f003 fe4f 	bl	8004358 <bekle>
	}

	if (menuSayac == 0) {
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <menu+0x24c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d134      	bne.n	800072c <menu+0x29c>
		if(dilSecim == 0) {
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <menu+0x268>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d122      	bne.n	8000710 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <menu+0x26c>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	e016      	b.n	8000700 <menu+0x270>
 80006d2:	bf00      	nop
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000c7a 	.word	0x20000c7a
 80006dc:	20000c4c 	.word	0x20000c4c
 80006e0:	20000c5b 	.word	0x20000c5b
 80006e4:	20000c54 	.word	0x20000c54
 80006e8:	20000c55 	.word	0x20000c55
 80006ec:	20000c56 	.word	0x20000c56
 80006f0:	20000c57 	.word	0x20000c57
 80006f4:	40011000 	.word	0x40011000
 80006f8:	20000c6c 	.word	0x20000c6c
 80006fc:	0800c72c 	.word	0x0800c72c
 8000700:	f7ff fe76 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000704:	4a94      	ldr	r2, [pc, #592]	; (8000958 <menu+0x4c8>)
 8000706:	2101      	movs	r1, #1
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fe71 	bl	80003f0 <lcd_print>
 800070e:	e00d      	b.n	800072c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000710:	4b92      	ldr	r3, [pc, #584]	; (800095c <menu+0x4cc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d109      	bne.n	800072c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <menu+0x4d0>)
 800071a:	2101      	movs	r1, #1
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fe67 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000722:	4a90      	ldr	r2, [pc, #576]	; (8000964 <menu+0x4d4>)
 8000724:	2101      	movs	r1, #1
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fe62 	bl	80003f0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800072c:	4b8e      	ldr	r3, [pc, #568]	; (8000968 <menu+0x4d8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 82b5 	bne.w	8000ca0 <menu+0x810>
		if(dilSecim == 0) {
 8000736:	4b89      	ldr	r3, [pc, #548]	; (800095c <menu+0x4cc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800073e:	4a8b      	ldr	r2, [pc, #556]	; (800096c <menu+0x4dc>)
 8000740:	2101      	movs	r1, #1
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe54 	bl	80003f0 <lcd_print>
 8000748:	e008      	b.n	800075c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800074a:	4b84      	ldr	r3, [pc, #528]	; (800095c <menu+0x4cc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d104      	bne.n	800075c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000752:	4a87      	ldr	r2, [pc, #540]	; (8000970 <menu+0x4e0>)
 8000754:	2101      	movs	r1, #1
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fe4a 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800075c:	4b85      	ldr	r3, [pc, #532]	; (8000974 <menu+0x4e4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d123      	bne.n	80007ac <menu+0x31c>
			if(dilSecim == 0) {
 8000764:	4b7d      	ldr	r3, [pc, #500]	; (800095c <menu+0x4cc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800076c:	4a82      	ldr	r2, [pc, #520]	; (8000978 <menu+0x4e8>)
 800076e:	2101      	movs	r1, #1
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff fe3d 	bl	80003f0 <lcd_print>
 8000776:	e008      	b.n	800078a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <menu+0x4cc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d104      	bne.n	800078a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000780:	4a7e      	ldr	r2, [pc, #504]	; (800097c <menu+0x4ec>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f7ff fe33 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800078a:	4a7d      	ldr	r2, [pc, #500]	; (8000980 <menu+0x4f0>)
 800078c:	210f      	movs	r1, #15
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fe2e 	bl	80003f0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000794:	4b7b      	ldr	r3, [pc, #492]	; (8000984 <menu+0x4f4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	220a      	movs	r2, #10
 800079a:	497b      	ldr	r1, [pc, #492]	; (8000988 <menu+0x4f8>)
 800079c:	4618      	mov	r0, r3
 800079e:	f00b fe67 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 80007a2:	4a79      	ldr	r2, [pc, #484]	; (8000988 <menu+0x4f8>)
 80007a4:	210e      	movs	r1, #14
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fe22 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80007ac:	4b71      	ldr	r3, [pc, #452]	; (8000974 <menu+0x4e4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d123      	bne.n	80007fc <menu+0x36c>
			if(dilSecim == 0) {
 80007b4:	4b69      	ldr	r3, [pc, #420]	; (800095c <menu+0x4cc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d105      	bne.n	80007c8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80007bc:	4a73      	ldr	r2, [pc, #460]	; (800098c <menu+0x4fc>)
 80007be:	2101      	movs	r1, #1
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff fe15 	bl	80003f0 <lcd_print>
 80007c6:	e008      	b.n	80007da <menu+0x34a>
			} else if(dilSecim == 1) {
 80007c8:	4b64      	ldr	r3, [pc, #400]	; (800095c <menu+0x4cc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d104      	bne.n	80007da <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80007d0:	4a6f      	ldr	r2, [pc, #444]	; (8000990 <menu+0x500>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff fe0b 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80007da:	4a6e      	ldr	r2, [pc, #440]	; (8000994 <menu+0x504>)
 80007dc:	210f      	movs	r1, #15
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fe06 	bl	80003f0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80007e4:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <menu+0x508>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	220a      	movs	r2, #10
 80007ea:	4967      	ldr	r1, [pc, #412]	; (8000988 <menu+0x4f8>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00b fe3f 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 80007f2:	4a65      	ldr	r2, [pc, #404]	; (8000988 <menu+0x4f8>)
 80007f4:	210e      	movs	r1, #14
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff fdfa 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80007fc:	4b5d      	ldr	r3, [pc, #372]	; (8000974 <menu+0x4e4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d123      	bne.n	800084c <menu+0x3bc>
			if(dilSecim == 0) {
 8000804:	4b55      	ldr	r3, [pc, #340]	; (800095c <menu+0x4cc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d105      	bne.n	8000818 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800080c:	4a63      	ldr	r2, [pc, #396]	; (800099c <menu+0x50c>)
 800080e:	2101      	movs	r1, #1
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fded 	bl	80003f0 <lcd_print>
 8000816:	e008      	b.n	800082a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000818:	4b50      	ldr	r3, [pc, #320]	; (800095c <menu+0x4cc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d104      	bne.n	800082a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000820:	4a5f      	ldr	r2, [pc, #380]	; (80009a0 <menu+0x510>)
 8000822:	2101      	movs	r1, #1
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff fde3 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800082a:	4a5a      	ldr	r2, [pc, #360]	; (8000994 <menu+0x504>)
 800082c:	210f      	movs	r1, #15
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fdde 	bl	80003f0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000834:	4b5b      	ldr	r3, [pc, #364]	; (80009a4 <menu+0x514>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	220a      	movs	r2, #10
 800083a:	4953      	ldr	r1, [pc, #332]	; (8000988 <menu+0x4f8>)
 800083c:	4618      	mov	r0, r3
 800083e:	f00b fe17 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 8000842:	4a51      	ldr	r2, [pc, #324]	; (8000988 <menu+0x4f8>)
 8000844:	210e      	movs	r1, #14
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fdd2 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <menu+0x4e4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d123      	bne.n	800089c <menu+0x40c>
			if(dilSecim == 0) {
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <menu+0x4cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800085c:	4a52      	ldr	r2, [pc, #328]	; (80009a8 <menu+0x518>)
 800085e:	2101      	movs	r1, #1
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fdc5 	bl	80003f0 <lcd_print>
 8000866:	e008      	b.n	800087a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000870:	4a4e      	ldr	r2, [pc, #312]	; (80009ac <menu+0x51c>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fdbb 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800087a:	4a46      	ldr	r2, [pc, #280]	; (8000994 <menu+0x504>)
 800087c:	210f      	movs	r1, #15
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff fdb6 	bl	80003f0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000884:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <menu+0x520>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	220a      	movs	r2, #10
 800088a:	493f      	ldr	r1, [pc, #252]	; (8000988 <menu+0x4f8>)
 800088c:	4618      	mov	r0, r3
 800088e:	f00b fdef 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 8000892:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <menu+0x4f8>)
 8000894:	210e      	movs	r1, #14
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fdaa 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <menu+0x4e4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d123      	bne.n	80008ec <menu+0x45c>
			if(dilSecim == 0) {
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <menu+0x4cc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80008ac:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <menu+0x524>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fd9d 	bl	80003f0 <lcd_print>
 80008b6:	e008      	b.n	80008ca <menu+0x43a>
			} else if(dilSecim == 1) {
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80008c0:	4a3d      	ldr	r2, [pc, #244]	; (80009b8 <menu+0x528>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fd93 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <menu+0x504>)
 80008cc:	210f      	movs	r1, #15
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fd8e 	bl	80003f0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <menu+0x52c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	220a      	movs	r2, #10
 80008da:	492b      	ldr	r1, [pc, #172]	; (8000988 <menu+0x4f8>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b fdc7 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 80008e2:	4a29      	ldr	r2, [pc, #164]	; (8000988 <menu+0x4f8>)
 80008e4:	210e      	movs	r1, #14
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fd82 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <menu+0x4e4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	d123      	bne.n	800093c <menu+0x4ac>
			if(dilSecim == 0) {
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <menu+0x4cc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80008fc:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <menu+0x530>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fd75 	bl	80003f0 <lcd_print>
 8000906:	e008      	b.n	800091a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000910:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <menu+0x534>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fd6b 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <menu+0x504>)
 800091c:	210f      	movs	r1, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fd66 	bl	80003f0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <menu+0x538>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	220a      	movs	r2, #10
 800092a:	4917      	ldr	r1, [pc, #92]	; (8000988 <menu+0x4f8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fd9f 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <menu+0x4f8>)
 8000934:	210e      	movs	r1, #14
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fd5a 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <menu+0x4e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b06      	cmp	r3, #6
 8000942:	d15f      	bne.n	8000a04 <menu+0x574>
			if(dilSecim == 0) {
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <menu+0x4cc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d141      	bne.n	80009d0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <menu+0x53c>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fd4d 	bl	80003f0 <lcd_print>
 8000956:	e044      	b.n	80009e2 <menu+0x552>
 8000958:	0800c740 	.word	0x0800c740
 800095c:	20000c6c 	.word	0x20000c6c
 8000960:	0800c754 	.word	0x0800c754
 8000964:	0800c768 	.word	0x0800c768
 8000968:	20000c4c 	.word	0x20000c4c
 800096c:	0800c77c 	.word	0x0800c77c
 8000970:	0800c790 	.word	0x0800c790
 8000974:	20000c4e 	.word	0x20000c4e
 8000978:	0800c7a4 	.word	0x0800c7a4
 800097c:	0800c7b4 	.word	0x0800c7b4
 8000980:	0800c7c4 	.word	0x0800c7c4
 8000984:	20000c6d 	.word	0x20000c6d
 8000988:	20000c24 	.word	0x20000c24
 800098c:	0800c7c8 	.word	0x0800c7c8
 8000990:	0800c7d8 	.word	0x0800c7d8
 8000994:	0800c7e8 	.word	0x0800c7e8
 8000998:	20000c6e 	.word	0x20000c6e
 800099c:	0800c7ec 	.word	0x0800c7ec
 80009a0:	0800c7fc 	.word	0x0800c7fc
 80009a4:	20000c6f 	.word	0x20000c6f
 80009a8:	0800c80c 	.word	0x0800c80c
 80009ac:	0800c81c 	.word	0x0800c81c
 80009b0:	20000c70 	.word	0x20000c70
 80009b4:	0800c82c 	.word	0x0800c82c
 80009b8:	0800c83c 	.word	0x0800c83c
 80009bc:	20000c71 	.word	0x20000c71
 80009c0:	0800c84c 	.word	0x0800c84c
 80009c4:	0800c85c 	.word	0x0800c85c
 80009c8:	20000c72 	.word	0x20000c72
 80009cc:	0800c86c 	.word	0x0800c86c
			} else if(dilSecim == 1) {
 80009d0:	4b4f      	ldr	r3, [pc, #316]	; (8000b10 <menu+0x680>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d104      	bne.n	80009e2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <menu+0x684>)
 80009da:	2101      	movs	r1, #1
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff fd07 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80009e2:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <menu+0x688>)
 80009e4:	210f      	movs	r1, #15
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff fd02 	bl	80003f0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <menu+0x68c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	220a      	movs	r2, #10
 80009f2:	494b      	ldr	r1, [pc, #300]	; (8000b20 <menu+0x690>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00b fd3b 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <menu+0x690>)
 80009fc:	210e      	movs	r1, #14
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff fcf6 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000a04:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <menu+0x694>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	d123      	bne.n	8000a54 <menu+0x5c4>
			if(dilSecim == 0) {
 8000a0c:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <menu+0x680>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d105      	bne.n	8000a20 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000a14:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <menu+0x698>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fce9 	bl	80003f0 <lcd_print>
 8000a1e:	e008      	b.n	8000a32 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <menu+0x680>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d104      	bne.n	8000a32 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <menu+0x69c>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fcdf 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a32:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <menu+0x688>)
 8000a34:	210f      	movs	r1, #15
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fcda 	bl	80003f0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <menu+0x6a0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	220a      	movs	r2, #10
 8000a42:	4937      	ldr	r1, [pc, #220]	; (8000b20 <menu+0x690>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fd13 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 8000a4a:	4a35      	ldr	r2, [pc, #212]	; (8000b20 <menu+0x690>)
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fcce 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <menu+0x694>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d123      	bne.n	8000aa4 <menu+0x614>
			if(dilSecim == 0) {
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <menu+0x680>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000a64:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <menu+0x6a4>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff fcc1 	bl	80003f0 <lcd_print>
 8000a6e:	e008      	b.n	8000a82 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <menu+0x680>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d104      	bne.n	8000a82 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <menu+0x6a8>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fcb7 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <menu+0x688>)
 8000a84:	210f      	movs	r1, #15
 8000a86:	2002      	movs	r0, #2
 8000a88:	f7ff fcb2 	bl	80003f0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <menu+0x6ac>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	220a      	movs	r2, #10
 8000a92:	4923      	ldr	r1, [pc, #140]	; (8000b20 <menu+0x690>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00b fceb 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <menu+0x690>)
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fca6 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <menu+0x694>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	d123      	bne.n	8000af4 <menu+0x664>
			if(dilSecim == 0) {
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <menu+0x680>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <menu+0x6b0>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff fc99 	bl	80003f0 <lcd_print>
 8000abe:	e008      	b.n	8000ad2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <menu+0x680>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <menu+0x6b4>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fc8f 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <menu+0x6b8>)
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fc8a 	bl	80003f0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <menu+0x6bc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	490f      	ldr	r1, [pc, #60]	; (8000b20 <menu+0x690>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fcc3 	bl	800c470 <itoa>
			lcd_print(2, 15, snum);
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <menu+0x690>)
 8000aec:	210f      	movs	r1, #15
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fc7e 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <menu+0x694>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	d134      	bne.n	8000b66 <menu+0x6d6>
			if(dilSecim == 0) {
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <menu+0x680>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d127      	bne.n	8000b54 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <menu+0x6c0>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fc71 	bl	80003f0 <lcd_print>
 8000b0e:	e02a      	b.n	8000b66 <menu+0x6d6>
 8000b10:	20000c6c 	.word	0x20000c6c
 8000b14:	0800c87c 	.word	0x0800c87c
 8000b18:	0800c7e8 	.word	0x0800c7e8
 8000b1c:	20000c73 	.word	0x20000c73
 8000b20:	20000c24 	.word	0x20000c24
 8000b24:	20000c4e 	.word	0x20000c4e
 8000b28:	0800c88c 	.word	0x0800c88c
 8000b2c:	0800c89c 	.word	0x0800c89c
 8000b30:	20000c74 	.word	0x20000c74
 8000b34:	0800c8ac 	.word	0x0800c8ac
 8000b38:	0800c8bc 	.word	0x0800c8bc
 8000b3c:	20000c75 	.word	0x20000c75
 8000b40:	0800c8cc 	.word	0x0800c8cc
 8000b44:	0800c8dc 	.word	0x0800c8dc
 8000b48:	0800c8ec 	.word	0x0800c8ec
 8000b4c:	20000c76 	.word	0x20000c76
 8000b50:	0800c8f0 	.word	0x0800c8f0
			} else if(dilSecim == 1) {
 8000b54:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <menu+0x8d0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000b5c:	4a81      	ldr	r2, [pc, #516]	; (8000d64 <menu+0x8d4>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fc45 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000b66:	2102      	movs	r1, #2
 8000b68:	487f      	ldr	r0, [pc, #508]	; (8000d68 <menu+0x8d8>)
 8000b6a:	f007 fa7b 	bl	8008064 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d119      	bne.n	8000ba8 <menu+0x718>
 8000b74:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <menu+0x8dc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d012      	beq.n	8000ba8 <menu+0x718>
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <menu+0x8e0>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10e      	bne.n	8000ba8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000b8a:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <menu+0x8e4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b78      	ldr	r3, [pc, #480]	; (8000d74 <menu+0x8e4>)
 8000b94:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000b96:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <menu+0x8e4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d902      	bls.n	8000ba4 <menu+0x714>
				hataGostermeSirasi = 0;
 8000b9e:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <menu+0x8e4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ba4:	f003 fbd8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ba8:	2104      	movs	r1, #4
 8000baa:	486f      	ldr	r0, [pc, #444]	; (8000d68 <menu+0x8d8>)
 8000bac:	f007 fa5a 	bl	8008064 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d119      	bne.n	8000bea <menu+0x75a>
 8000bb6:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <menu+0x8dc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <menu+0x75a>
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <menu+0x8e0>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10e      	bne.n	8000bea <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000bcc:	4b69      	ldr	r3, [pc, #420]	; (8000d74 <menu+0x8e4>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b67      	ldr	r3, [pc, #412]	; (8000d74 <menu+0x8e4>)
 8000bd6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000bd8:	4b66      	ldr	r3, [pc, #408]	; (8000d74 <menu+0x8e4>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b0b      	cmp	r3, #11
 8000bde:	d902      	bls.n	8000be6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000be0:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <menu+0x8e4>)
 8000be2:	220a      	movs	r2, #10
 8000be4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000be6:	f003 fbb7 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000bea:	2108      	movs	r1, #8
 8000bec:	485e      	ldr	r0, [pc, #376]	; (8000d68 <menu+0x8d8>)
 8000bee:	f007 fa39 	bl	8008064 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d153      	bne.n	8000ca0 <menu+0x810>
 8000bf8:	4b5c      	ldr	r3, [pc, #368]	; (8000d6c <menu+0x8dc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d04c      	beq.n	8000ca0 <menu+0x810>
 8000c06:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <menu+0x8e4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b0a      	cmp	r3, #10
 8000c0c:	d148      	bne.n	8000ca0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000c0e:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <menu+0x8e8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <menu+0x8ec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <menu+0x8f0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <menu+0x8ec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000c2a:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <menu+0x8f4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <menu+0x8ec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <menu+0x8f8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <menu+0x8ec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <menu+0x8fc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <menu+0x8ec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000c54:	4b4e      	ldr	r3, [pc, #312]	; (8000d90 <menu+0x900>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <menu+0x8ec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000c62:	4b4c      	ldr	r3, [pc, #304]	; (8000d94 <menu+0x904>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <menu+0x8ec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <menu+0x908>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <menu+0x8ec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <menu+0x90c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <menu+0x8ec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <menu+0x910>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <menu+0x8ec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <menu+0x914>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000ca0:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <menu+0x918>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	f040 80fc 	bne.w	8000ea2 <menu+0xa12>
		if(dilSecim == 0) {
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <menu+0x8d0>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d105      	bne.n	8000cbe <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <menu+0x91c>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fb9a 	bl	80003f0 <lcd_print>
 8000cbc:	e008      	b.n	8000cd0 <menu+0x840>
		} else if(dilSecim == 1) {
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <menu+0x8d0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d104      	bne.n	8000cd0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000cc6:	4a3a      	ldr	r2, [pc, #232]	; (8000db0 <menu+0x920>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fb90 	bl	80003f0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <menu+0x8e0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d003      	beq.n	8000ce0 <menu+0x850>
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <menu+0x8e0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d112      	bne.n	8000d06 <menu+0x876>
			if(dilSecim == 0) {
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <menu+0x8d0>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000ce8:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <menu+0x924>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	2002      	movs	r0, #2
 8000cee:	f7ff fb7f 	bl	80003f0 <lcd_print>
 8000cf2:	e008      	b.n	8000d06 <menu+0x876>
			} else if(dilSecim == 1) {
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <menu+0x8d0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d104      	bne.n	8000d06 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <menu+0x928>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fb75 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <menu+0x92c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d116      	bne.n	8000d3c <menu+0x8ac>
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <menu+0x8e0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d112      	bne.n	8000d3c <menu+0x8ac>
			if(dilSecim == 0) {
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <menu+0x8d0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d105      	bne.n	8000d2a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <menu+0x930>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff fb64 	bl	80003f0 <lcd_print>
 8000d28:	e008      	b.n	8000d3c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <menu+0x8d0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d104      	bne.n	8000d3c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <menu+0x934>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fb5a 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <menu+0x92c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d14c      	bne.n	8000dde <menu+0x94e>
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <menu+0x8e0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d148      	bne.n	8000dde <menu+0x94e>
			if(dilSecim == 0) {
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <menu+0x8d0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d13b      	bne.n	8000dcc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <menu+0x938>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fb49 	bl	80003f0 <lcd_print>
 8000d5e:	e03e      	b.n	8000dde <menu+0x94e>
 8000d60:	20000c6c 	.word	0x20000c6c
 8000d64:	0800c904 	.word	0x0800c904
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	20000c7a 	.word	0x20000c7a
 8000d70:	20000c5b 	.word	0x20000c5b
 8000d74:	20000c4e 	.word	0x20000c4e
 8000d78:	20000c6d 	.word	0x20000c6d
 8000d7c:	20000be4 	.word	0x20000be4
 8000d80:	20000c6e 	.word	0x20000c6e
 8000d84:	20000c6f 	.word	0x20000c6f
 8000d88:	20000c70 	.word	0x20000c70
 8000d8c:	20000c71 	.word	0x20000c71
 8000d90:	20000c72 	.word	0x20000c72
 8000d94:	20000c73 	.word	0x20000c73
 8000d98:	20000c74 	.word	0x20000c74
 8000d9c:	20000c75 	.word	0x20000c75
 8000da0:	20000c76 	.word	0x20000c76
 8000da4:	20000c77 	.word	0x20000c77
 8000da8:	20000c4c 	.word	0x20000c4c
 8000dac:	0800c918 	.word	0x0800c918
 8000db0:	0800c92c 	.word	0x0800c92c
 8000db4:	0800c940 	.word	0x0800c940
 8000db8:	0800c954 	.word	0x0800c954
 8000dbc:	20000c4d 	.word	0x20000c4d
 8000dc0:	0800c968 	.word	0x0800c968
 8000dc4:	0800c978 	.word	0x0800c978
 8000dc8:	0800c988 	.word	0x0800c988
			} else if(dilSecim == 1) {
 8000dcc:	4b98      	ldr	r3, [pc, #608]	; (8001030 <menu+0xba0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8000dd4:	4a97      	ldr	r2, [pc, #604]	; (8001034 <menu+0xba4>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fb09 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000dde:	2102      	movs	r1, #2
 8000de0:	4895      	ldr	r0, [pc, #596]	; (8001038 <menu+0xba8>)
 8000de2:	f007 f93f 	bl	8008064 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d119      	bne.n	8000e20 <menu+0x990>
 8000dec:	4b93      	ldr	r3, [pc, #588]	; (800103c <menu+0xbac>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f083 0301 	eor.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d012      	beq.n	8000e20 <menu+0x990>
 8000dfa:	4b91      	ldr	r3, [pc, #580]	; (8001040 <menu+0xbb0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10e      	bne.n	8000e20 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8000e02:	4b90      	ldr	r3, [pc, #576]	; (8001044 <menu+0xbb4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <menu+0xbb4>)
 8000e0c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000e0e:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <menu+0xbb4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d902      	bls.n	8000e1c <menu+0x98c>
				calismaSekli = 0;
 8000e16:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <menu+0xbb4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000e1c:	f003 fa9c 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e20:	2104      	movs	r1, #4
 8000e22:	4885      	ldr	r0, [pc, #532]	; (8001038 <menu+0xba8>)
 8000e24:	f007 f91e 	bl	8008064 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d119      	bne.n	8000e62 <menu+0x9d2>
 8000e2e:	4b83      	ldr	r3, [pc, #524]	; (800103c <menu+0xbac>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f083 0301 	eor.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d012      	beq.n	8000e62 <menu+0x9d2>
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <menu+0xbb0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10e      	bne.n	8000e62 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8000e44:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <menu+0xbb4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b7d      	ldr	r3, [pc, #500]	; (8001044 <menu+0xbb4>)
 8000e4e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000e50:	4b7c      	ldr	r3, [pc, #496]	; (8001044 <menu+0xbb4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <menu+0x9ce>
	    		calismaSekli = 1;
 8000e58:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <menu+0xbb4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000e5e:	f003 fa7b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000e62:	2108      	movs	r1, #8
 8000e64:	4874      	ldr	r0, [pc, #464]	; (8001038 <menu+0xba8>)
 8000e66:	f007 f8fd 	bl	8008064 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d118      	bne.n	8000ea2 <menu+0xa12>
 8000e70:	4b72      	ldr	r3, [pc, #456]	; (800103c <menu+0xbac>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8000e7e:	4b71      	ldr	r3, [pc, #452]	; (8001044 <menu+0xbb4>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b71      	ldr	r3, [pc, #452]	; (8001048 <menu+0xbb8>)
 8000e84:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <menu+0xbb4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <menu+0xa0c>
				altLimit = 1;
 8000e8e:	4b6f      	ldr	r3, [pc, #444]	; (800104c <menu+0xbbc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <menu+0xbbc>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <menu+0xbb8>)
 8000e9a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz=1;
 8000e9c:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <menu+0xbc0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000ea2:	4b6c      	ldr	r3, [pc, #432]	; (8001054 <menu+0xbc4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	f040 8083 	bne.w	8000fb2 <menu+0xb22>
		if(dilSecim == 0) {
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <menu+0xba0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000eb4:	4a68      	ldr	r2, [pc, #416]	; (8001058 <menu+0xbc8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fa99 	bl	80003f0 <lcd_print>
 8000ebe:	e008      	b.n	8000ed2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <menu+0xba0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d104      	bne.n	8000ed2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000ec8:	4a64      	ldr	r2, [pc, #400]	; (800105c <menu+0xbcc>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fa8f 	bl	80003f0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000ed2:	4b63      	ldr	r3, [pc, #396]	; (8001060 <menu+0xbd0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d113      	bne.n	8000f02 <menu+0xa72>
			if(dilSecim == 0) {
 8000eda:	4b55      	ldr	r3, [pc, #340]	; (8001030 <menu+0xba0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8000ee2:	4a60      	ldr	r2, [pc, #384]	; (8001064 <menu+0xbd4>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fa82 	bl	80003f0 <lcd_print>
 8000eec:	e012      	b.n	8000f14 <menu+0xa84>
			} else if(dilSecim == 1) {
 8000eee:	4b50      	ldr	r3, [pc, #320]	; (8001030 <menu+0xba0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8000ef6:	4a5c      	ldr	r2, [pc, #368]	; (8001068 <menu+0xbd8>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fa78 	bl	80003f0 <lcd_print>
 8000f00:	e008      	b.n	8000f14 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <menu+0xbd0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d104      	bne.n	8000f14 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8000f0a:	4a58      	ldr	r2, [pc, #352]	; (800106c <menu+0xbdc>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fa6e 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f14:	2102      	movs	r1, #2
 8000f16:	4848      	ldr	r0, [pc, #288]	; (8001038 <menu+0xba8>)
 8000f18:	f007 f8a4 	bl	8008064 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d115      	bne.n	8000f4e <menu+0xabe>
 8000f22:	4b46      	ldr	r3, [pc, #280]	; (800103c <menu+0xbac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00e      	beq.n	8000f4e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <menu+0xbd0>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <menu+0xbd0>)
 8000f3a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <menu+0xbd0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d902      	bls.n	8000f4a <menu+0xaba>
				emniyetCercevesi = 0;
 8000f44:	4b46      	ldr	r3, [pc, #280]	; (8001060 <menu+0xbd0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000f4a:	f003 fa05 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4839      	ldr	r0, [pc, #228]	; (8001038 <menu+0xba8>)
 8000f52:	f007 f887 	bl	8008064 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d115      	bne.n	8000f88 <menu+0xaf8>
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <menu+0xbac>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00e      	beq.n	8000f88 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <menu+0xbd0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <menu+0xbd0>)
 8000f74:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <menu+0xbd0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <menu+0xbd0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8000f84:	f003 f9e8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8000f88:	2108      	movs	r1, #8
 8000f8a:	482b      	ldr	r0, [pc, #172]	; (8001038 <menu+0xba8>)
 8000f8c:	f007 f86a 	bl	8008064 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10d      	bne.n	8000fb2 <menu+0xb22>
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <menu+0xbac>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <menu+0xbd0>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <menu+0xbb8>)
 8000faa:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <menu+0xbc0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <menu+0xbc4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	f040 80ba 	bne.w	8001130 <menu+0xca0>
		if(dilSecim == 0) {
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <menu+0xba0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <menu+0xbe0>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fa11 	bl	80003f0 <lcd_print>
 8000fce:	e008      	b.n	8000fe2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <menu+0xba0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d104      	bne.n	8000fe2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <menu+0xbe4>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fa07 	bl	80003f0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <menu+0xbe8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d113      	bne.n	8001012 <menu+0xb82>
			if(dilSecim == 0) {
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <menu+0xba0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <menu+0xbd4>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f7ff f9fa 	bl	80003f0 <lcd_print>
 8000ffc:	e049      	b.n	8001092 <menu+0xc02>
			} else if(dilSecim == 1) {
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <menu+0xba0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d145      	bne.n	8001092 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <menu+0xbd8>)
 8001008:	2101      	movs	r1, #1
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff f9f0 	bl	80003f0 <lcd_print>
 8001010:	e03f      	b.n	8001092 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <menu+0xbe8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d13b      	bne.n	8001092 <menu+0xc02>
			if(dilSecim == 0) {
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <menu+0xba0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d12e      	bne.n	8001080 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <menu+0xbec>)
 8001024:	2101      	movs	r1, #1
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff f9e2 	bl	80003f0 <lcd_print>
 800102c:	e031      	b.n	8001092 <menu+0xc02>
 800102e:	bf00      	nop
 8001030:	20000c6c 	.word	0x20000c6c
 8001034:	0800c998 	.word	0x0800c998
 8001038:	40010800 	.word	0x40010800
 800103c:	20000c7a 	.word	0x20000c7a
 8001040:	20000c5b 	.word	0x20000c5b
 8001044:	20000c4d 	.word	0x20000c4d
 8001048:	20000be4 	.word	0x20000be4
 800104c:	20000c52 	.word	0x20000c52
 8001050:	20000c77 	.word	0x20000c77
 8001054:	20000c4c 	.word	0x20000c4c
 8001058:	0800c9a8 	.word	0x0800c9a8
 800105c:	0800c9bc 	.word	0x0800c9bc
 8001060:	20000c50 	.word	0x20000c50
 8001064:	0800c9d0 	.word	0x0800c9d0
 8001068:	0800c9e4 	.word	0x0800c9e4
 800106c:	0800c9f8 	.word	0x0800c9f8
 8001070:	0800ca08 	.word	0x0800ca08
 8001074:	0800ca1c 	.word	0x0800ca1c
 8001078:	20000c51 	.word	0x20000c51
 800107c:	0800ca30 	.word	0x0800ca30
			} else if(dilSecim == 1) {
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <menu+0xe3c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d104      	bne.n	8001092 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001088:	4a91      	ldr	r2, [pc, #580]	; (80012d0 <menu+0xe40>)
 800108a:	2101      	movs	r1, #1
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff f9af 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001092:	2102      	movs	r1, #2
 8001094:	488f      	ldr	r0, [pc, #572]	; (80012d4 <menu+0xe44>)
 8001096:	f006 ffe5 	bl	8008064 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d115      	bne.n	80010cc <menu+0xc3c>
 80010a0:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <menu+0xe48>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00e      	beq.n	80010cc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <menu+0xe4c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b89      	ldr	r3, [pc, #548]	; (80012dc <menu+0xe4c>)
 80010b8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <menu+0xe4c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d902      	bls.n	80010c8 <menu+0xc38>
				yavaslamaLimit = 0;
 80010c2:	4b86      	ldr	r3, [pc, #536]	; (80012dc <menu+0xe4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80010c8:	f003 f946 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80010cc:	2104      	movs	r1, #4
 80010ce:	4881      	ldr	r0, [pc, #516]	; (80012d4 <menu+0xe44>)
 80010d0:	f006 ffc8 	bl	8008064 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d115      	bne.n	8001106 <menu+0xc76>
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <menu+0xe48>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00e      	beq.n	8001106 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <menu+0xe4c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <menu+0xe4c>)
 80010f2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80010f4:	4b79      	ldr	r3, [pc, #484]	; (80012dc <menu+0xe4c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80010fc:	4b77      	ldr	r3, [pc, #476]	; (80012dc <menu+0xe4c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001102:	f003 f929 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001106:	2108      	movs	r1, #8
 8001108:	4872      	ldr	r0, [pc, #456]	; (80012d4 <menu+0xe44>)
 800110a:	f006 ffab 	bl	8008064 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10d      	bne.n	8001130 <menu+0xca0>
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <menu+0xe48>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001122:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <menu+0xe4c>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <menu+0xe50>)
 8001128:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <menu+0xe54>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001130:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <menu+0xe58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b05      	cmp	r3, #5
 8001136:	f040 80b9 	bne.w	80012ac <menu+0xe1c>
		if(dilSecim == 0) {
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <menu+0xe3c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001142:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <menu+0xe5c>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff f952 	bl	80003f0 <lcd_print>
 800114c:	e008      	b.n	8001160 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <menu+0xe3c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001156:	4a66      	ldr	r2, [pc, #408]	; (80012f0 <menu+0xe60>)
 8001158:	2101      	movs	r1, #1
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff f948 	bl	80003f0 <lcd_print>
		}

		if(altLimit == 0) {
 8001160:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <menu+0xe64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d113      	bne.n	8001190 <menu+0xd00>
			if(dilSecim == 0) {
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <menu+0xe3c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001170:	4a61      	ldr	r2, [pc, #388]	; (80012f8 <menu+0xe68>)
 8001172:	2101      	movs	r1, #1
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff f93b 	bl	80003f0 <lcd_print>
 800117a:	e020      	b.n	80011be <menu+0xd2e>
			} else if(dilSecim == 1) {
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <menu+0xe3c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d11c      	bne.n	80011be <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <menu+0xe6c>)
 8001186:	2101      	movs	r1, #1
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff f931 	bl	80003f0 <lcd_print>
 800118e:	e016      	b.n	80011be <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001190:	4b58      	ldr	r3, [pc, #352]	; (80012f4 <menu+0xe64>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d112      	bne.n	80011be <menu+0xd2e>
			if(dilSecim == 0){
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <menu+0xe3c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80011a0:	4a57      	ldr	r2, [pc, #348]	; (8001300 <menu+0xe70>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff f923 	bl	80003f0 <lcd_print>
 80011aa:	e008      	b.n	80011be <menu+0xd2e>
			} else if(dilSecim == 1){
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <menu+0xe3c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d104      	bne.n	80011be <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <menu+0xe40>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff f919 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80011be:	2102      	movs	r1, #2
 80011c0:	4844      	ldr	r0, [pc, #272]	; (80012d4 <menu+0xe44>)
 80011c2:	f006 ff4f 	bl	8008064 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d119      	bne.n	8001200 <menu+0xd70>
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <menu+0xe48>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <menu+0xd70>
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <menu+0xe74>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <menu+0xd70>
			altLimit = altLimit + 1;
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <menu+0xe64>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <menu+0xe64>)
 80011ec:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <menu+0xe64>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d902      	bls.n	80011fc <menu+0xd6c>
				altLimit = 0;
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <menu+0xe64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011fc:	f003 f8ac 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001200:	2104      	movs	r1, #4
 8001202:	4834      	ldr	r0, [pc, #208]	; (80012d4 <menu+0xe44>)
 8001204:	f006 ff2e 	bl	8008064 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d119      	bne.n	8001242 <menu+0xdb2>
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <menu+0xe48>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	f083 0301 	eor.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d012      	beq.n	8001242 <menu+0xdb2>
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <menu+0xe74>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10e      	bne.n	8001242 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <menu+0xe64>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <menu+0xe64>)
 800122e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <menu+0xe64>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <menu+0xdae>
		   		altLimit = 1;
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <menu+0xe64>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800123e:	f003 f88b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001242:	2108      	movs	r1, #8
 8001244:	4823      	ldr	r0, [pc, #140]	; (80012d4 <menu+0xe44>)
 8001246:	f006 ff0d 	bl	8008064 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12d      	bne.n	80012ac <menu+0xe1c>
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <menu+0xe48>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d026      	beq.n	80012ac <menu+0xe1c>
			eepromData[5] = altLimit;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <menu+0xe64>)
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <menu+0xe50>)
 8001264:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <menu+0xe64>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d110      	bne.n	8001290 <menu+0xe00>
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <menu+0xe78>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <menu+0xdee>
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <menu+0xe78>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d108      	bne.n	8001290 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <menu+0xe78>)
 8001280:	2203      	movs	r2, #3
 8001282:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <menu+0xe78>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <menu+0xe50>)
 800128a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800128e:	e00a      	b.n	80012a6 <menu+0xe16>
			} else if(altLimit == 0) {
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <menu+0xe64>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <menu+0xe16>
				platformSilindirTipi = 0;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <menu+0xe7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <menu+0xe7c>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <menu+0xe50>)
 80012a4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz=1;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <menu+0xe54>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <menu+0xe58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	f040 80b6 	bne.w	8001422 <menu+0xf92>
		if(dilSecim == 0) {
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <menu+0xe3c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d12a      	bne.n	8001314 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <menu+0xe80>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff f894 	bl	80003f0 <lcd_print>
 80012c8:	e02d      	b.n	8001326 <menu+0xe96>
 80012ca:	bf00      	nop
 80012cc:	20000c6c 	.word	0x20000c6c
 80012d0:	0800ca44 	.word	0x0800ca44
 80012d4:	40010800 	.word	0x40010800
 80012d8:	20000c7a 	.word	0x20000c7a
 80012dc:	20000c51 	.word	0x20000c51
 80012e0:	20000be4 	.word	0x20000be4
 80012e4:	20000c77 	.word	0x20000c77
 80012e8:	20000c4c 	.word	0x20000c4c
 80012ec:	0800ca58 	.word	0x0800ca58
 80012f0:	0800ca6c 	.word	0x0800ca6c
 80012f4:	20000c52 	.word	0x20000c52
 80012f8:	0800c9d0 	.word	0x0800c9d0
 80012fc:	0800c9e4 	.word	0x0800c9e4
 8001300:	0800ca30 	.word	0x0800ca30
 8001304:	20000c4d 	.word	0x20000c4d
 8001308:	20000c59 	.word	0x20000c59
 800130c:	20000c5f 	.word	0x20000c5f
 8001310:	0800ca80 	.word	0x0800ca80
		} else if(dilSecim == 1){
 8001314:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <menu+0x1070>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d104      	bne.n	8001326 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <menu+0x1074>)
 800131e:	2101      	movs	r1, #1
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff f865 	bl	80003f0 <lcd_print>
		}
		if(basincSalteri == 0){
 8001326:	4b78      	ldr	r3, [pc, #480]	; (8001508 <menu+0x1078>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d113      	bne.n	8001356 <menu+0xec6>
			if(dilSecim == 0) {
 800132e:	4b74      	ldr	r3, [pc, #464]	; (8001500 <menu+0x1070>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001336:	4a75      	ldr	r2, [pc, #468]	; (800150c <menu+0x107c>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff f858 	bl	80003f0 <lcd_print>
 8001340:	e020      	b.n	8001384 <menu+0xef4>
			} else if(dilSecim == 1){
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <menu+0x1070>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d11c      	bne.n	8001384 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800134a:	4a71      	ldr	r2, [pc, #452]	; (8001510 <menu+0x1080>)
 800134c:	2101      	movs	r1, #1
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff f84e 	bl	80003f0 <lcd_print>
 8001354:	e016      	b.n	8001384 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001356:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <menu+0x1078>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d112      	bne.n	8001384 <menu+0xef4>
			if(dilSecim == 0) {
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <menu+0x1070>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001366:	4a6b      	ldr	r2, [pc, #428]	; (8001514 <menu+0x1084>)
 8001368:	2101      	movs	r1, #1
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff f840 	bl	80003f0 <lcd_print>
 8001370:	e008      	b.n	8001384 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <menu+0x1070>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800137a:	4a67      	ldr	r2, [pc, #412]	; (8001518 <menu+0x1088>)
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff f836 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001384:	2102      	movs	r1, #2
 8001386:	4865      	ldr	r0, [pc, #404]	; (800151c <menu+0x108c>)
 8001388:	f006 fe6c 	bl	8008064 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d115      	bne.n	80013be <menu+0xf2e>
 8001392:	4b63      	ldr	r3, [pc, #396]	; (8001520 <menu+0x1090>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <menu+0x1078>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <menu+0x1078>)
 80013aa:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <menu+0x1078>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d902      	bls.n	80013ba <menu+0xf2a>
				basincSalteri = 0;
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <menu+0x1078>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013ba:	f002 ffcd 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013be:	2104      	movs	r1, #4
 80013c0:	4856      	ldr	r0, [pc, #344]	; (800151c <menu+0x108c>)
 80013c2:	f006 fe4f 	bl	8008064 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d115      	bne.n	80013f8 <menu+0xf68>
 80013cc:	4b54      	ldr	r3, [pc, #336]	; (8001520 <menu+0x1090>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00e      	beq.n	80013f8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80013da:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <menu+0x1078>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <menu+0x1078>)
 80013e4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <menu+0x1078>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <menu+0xf64>
		   		basincSalteri = 1;
 80013ee:	4b46      	ldr	r3, [pc, #280]	; (8001508 <menu+0x1078>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80013f4:	f002 ffb0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80013f8:	2108      	movs	r1, #8
 80013fa:	4848      	ldr	r0, [pc, #288]	; (800151c <menu+0x108c>)
 80013fc:	f006 fe32 	bl	8008064 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <menu+0xf92>
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <menu+0x1090>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <menu+0x1078>)
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <menu+0x1094>)
 800141a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <menu+0x1098>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <menu+0x109c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b07      	cmp	r3, #7
 8001428:	f040 80f5 	bne.w	8001616 <menu+0x1186>
		if(dilSecim == 0) {
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <menu+0x1070>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <menu+0x10a0>)
 8001436:	2101      	movs	r1, #1
 8001438:	2001      	movs	r0, #1
 800143a:	f7fe ffd9 	bl	80003f0 <lcd_print>
 800143e:	e008      	b.n	8001452 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <menu+0x1070>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d104      	bne.n	8001452 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001448:	4a3a      	ldr	r2, [pc, #232]	; (8001534 <menu+0x10a4>)
 800144a:	2101      	movs	r1, #1
 800144c:	2001      	movs	r0, #1
 800144e:	f7fe ffcf 	bl	80003f0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <menu+0x10a8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d113      	bne.n	8001482 <menu+0xff2>
			if(dilSecim == 0) {
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <menu+0x1070>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <menu+0x107c>)
 8001464:	2101      	movs	r1, #1
 8001466:	2002      	movs	r0, #2
 8001468:	f7fe ffc2 	bl	80003f0 <lcd_print>
 800146c:	e079      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1){
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <menu+0x1070>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d175      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <menu+0x1080>)
 8001478:	2101      	movs	r1, #1
 800147a:	2002      	movs	r0, #2
 800147c:	f7fe ffb8 	bl	80003f0 <lcd_print>
 8001480:	e06f      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <menu+0x10a8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d113      	bne.n	80014b2 <menu+0x1022>
			if(dilSecim == 0) {
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <menu+0x1070>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001492:	4a2a      	ldr	r2, [pc, #168]	; (800153c <menu+0x10ac>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f7fe ffaa 	bl	80003f0 <lcd_print>
 800149c:	e061      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <menu+0x1070>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d15d      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <menu+0x10b0>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7fe ffa0 	bl	80003f0 <lcd_print>
 80014b0:	e057      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <menu+0x10a8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d113      	bne.n	80014e2 <menu+0x1052>
			if(dilSecim == 0) {
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <menu+0x1070>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <menu+0x10b4>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7fe ff92 	bl	80003f0 <lcd_print>
 80014cc:	e049      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <menu+0x1070>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d145      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <menu+0x10b8>)
 80014d8:	2101      	movs	r1, #1
 80014da:	2002      	movs	r0, #2
 80014dc:	f7fe ff88 	bl	80003f0 <lcd_print>
 80014e0:	e03f      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <menu+0x10a8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d13b      	bne.n	8001562 <menu+0x10d2>
			if(dilSecim == 0) {
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <menu+0x1070>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d12e      	bne.n	8001550 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <menu+0x10bc>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	2002      	movs	r0, #2
 80014f8:	f7fe ff7a 	bl	80003f0 <lcd_print>
 80014fc:	e031      	b.n	8001562 <menu+0x10d2>
 80014fe:	bf00      	nop
 8001500:	20000c6c 	.word	0x20000c6c
 8001504:	0800ca90 	.word	0x0800ca90
 8001508:	20000c53 	.word	0x20000c53
 800150c:	0800c9d0 	.word	0x0800c9d0
 8001510:	0800c9e4 	.word	0x0800c9e4
 8001514:	0800ca30 	.word	0x0800ca30
 8001518:	0800ca44 	.word	0x0800ca44
 800151c:	40010800 	.word	0x40010800
 8001520:	20000c7a 	.word	0x20000c7a
 8001524:	20000be4 	.word	0x20000be4
 8001528:	20000c77 	.word	0x20000c77
 800152c:	20000c4c 	.word	0x20000c4c
 8001530:	0800caa0 	.word	0x0800caa0
 8001534:	0800cab4 	.word	0x0800cab4
 8001538:	20000c54 	.word	0x20000c54
 800153c:	0800cac8 	.word	0x0800cac8
 8001540:	0800cadc 	.word	0x0800cadc
 8001544:	0800caf0 	.word	0x0800caf0
 8001548:	0800cb04 	.word	0x0800cb04
 800154c:	0800cb18 	.word	0x0800cb18
			} else if(dilSecim == 1){
 8001550:	4b99      	ldr	r3, [pc, #612]	; (80017b8 <menu+0x1328>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d104      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001558:	4a98      	ldr	r2, [pc, #608]	; (80017bc <menu+0x132c>)
 800155a:	2101      	movs	r1, #1
 800155c:	2002      	movs	r0, #2
 800155e:	f7fe ff47 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001562:	2102      	movs	r1, #2
 8001564:	4896      	ldr	r0, [pc, #600]	; (80017c0 <menu+0x1330>)
 8001566:	f006 fd7d 	bl	8008064 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d115      	bne.n	800159c <menu+0x110c>
 8001570:	4b94      	ldr	r3, [pc, #592]	; (80017c4 <menu+0x1334>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800157e:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <menu+0x1338>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <menu+0x1338>)
 8001588:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800158a:	4b8f      	ldr	r3, [pc, #572]	; (80017c8 <menu+0x1338>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d902      	bls.n	8001598 <menu+0x1108>
				kapiSecimleri = 0;
 8001592:	4b8d      	ldr	r3, [pc, #564]	; (80017c8 <menu+0x1338>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001598:	f002 fede 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800159c:	2104      	movs	r1, #4
 800159e:	4888      	ldr	r0, [pc, #544]	; (80017c0 <menu+0x1330>)
 80015a0:	f006 fd60 	bl	8008064 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d115      	bne.n	80015d6 <menu+0x1146>
 80015aa:	4b86      	ldr	r3, [pc, #536]	; (80017c4 <menu+0x1334>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00e      	beq.n	80015d6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80015b8:	4b83      	ldr	r3, [pc, #524]	; (80017c8 <menu+0x1338>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <menu+0x1338>)
 80015c2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80015c4:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <menu+0x1338>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d902      	bls.n	80015d2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80015cc:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <menu+0x1338>)
 80015ce:	2203      	movs	r2, #3
 80015d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80015d2:	f002 fec1 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80015d6:	2108      	movs	r1, #8
 80015d8:	4879      	ldr	r0, [pc, #484]	; (80017c0 <menu+0x1330>)
 80015da:	f006 fd43 	bl	8008064 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d118      	bne.n	8001616 <menu+0x1186>
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <menu+0x1334>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d011      	beq.n	8001616 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <menu+0x1338>)
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	4b75      	ldr	r3, [pc, #468]	; (80017cc <menu+0x133c>)
 80015f8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <menu+0x1338>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <menu+0x1180>
				altLimit = 1;
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <menu+0x1340>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <menu+0x1340>)
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <menu+0x133c>)
 800160e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001610:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <menu+0x1344>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <menu+0x1348>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b08      	cmp	r3, #8
 800161c:	f040 8092 	bne.w	8001744 <menu+0x12b4>
		if(dilSecim == 0) {
 8001620:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <menu+0x1328>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001628:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <menu+0x134c>)
 800162a:	2101      	movs	r1, #1
 800162c:	2001      	movs	r0, #1
 800162e:	f7fe fedf 	bl	80003f0 <lcd_print>
 8001632:	e008      	b.n	8001646 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001634:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <menu+0x1328>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800163c:	4a68      	ldr	r2, [pc, #416]	; (80017e0 <menu+0x1350>)
 800163e:	2101      	movs	r1, #1
 8001640:	2001      	movs	r0, #1
 8001642:	f7fe fed5 	bl	80003f0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <menu+0x1354>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <menu+0x11e6>
			if(dilSecim == 0) {
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <menu+0x1328>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001656:	4a64      	ldr	r2, [pc, #400]	; (80017e8 <menu+0x1358>)
 8001658:	2101      	movs	r1, #1
 800165a:	2002      	movs	r0, #2
 800165c:	f7fe fec8 	bl	80003f0 <lcd_print>
 8001660:	e020      	b.n	80016a4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <menu+0x1328>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11c      	bne.n	80016a4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800166a:	4a60      	ldr	r2, [pc, #384]	; (80017ec <menu+0x135c>)
 800166c:	2101      	movs	r1, #1
 800166e:	2002      	movs	r0, #2
 8001670:	f7fe febe 	bl	80003f0 <lcd_print>
 8001674:	e016      	b.n	80016a4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <menu+0x1354>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d112      	bne.n	80016a4 <menu+0x1214>
			if(dilSecim == 0){
 800167e:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <menu+0x1328>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <menu+0x1360>)
 8001688:	2101      	movs	r1, #1
 800168a:	2002      	movs	r0, #2
 800168c:	f7fe feb0 	bl	80003f0 <lcd_print>
 8001690:	e008      	b.n	80016a4 <menu+0x1214>
			} else if(dilSecim == 1){
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <menu+0x1328>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800169a:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <menu+0x1364>)
 800169c:	2101      	movs	r1, #1
 800169e:	2002      	movs	r0, #2
 80016a0:	f7fe fea6 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80016a4:	2102      	movs	r1, #2
 80016a6:	4846      	ldr	r0, [pc, #280]	; (80017c0 <menu+0x1330>)
 80016a8:	f006 fcdc 	bl	8008064 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d115      	bne.n	80016de <menu+0x124e>
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <menu+0x1334>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f083 0301 	eor.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80016c0:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <menu+0x1354>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <menu+0x1354>)
 80016ca:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <menu+0x1354>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d902      	bls.n	80016da <menu+0x124a>
				kapiAcTipi = 0;
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <menu+0x1354>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016da:	f002 fe3d 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016de:	2104      	movs	r1, #4
 80016e0:	4837      	ldr	r0, [pc, #220]	; (80017c0 <menu+0x1330>)
 80016e2:	f006 fcbf 	bl	8008064 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d115      	bne.n	8001718 <menu+0x1288>
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <menu+0x1334>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00e      	beq.n	8001718 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <menu+0x1354>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <menu+0x1354>)
 8001704:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <menu+0x1354>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <menu+0x1284>
		   		kapiAcTipi = 1;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <menu+0x1354>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001714:	f002 fe20 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001718:	2108      	movs	r1, #8
 800171a:	4829      	ldr	r0, [pc, #164]	; (80017c0 <menu+0x1330>)
 800171c:	f006 fca2 	bl	8008064 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10e      	bne.n	8001744 <menu+0x12b4>
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <menu+0x1334>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <menu+0x1354>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <menu+0x133c>)
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <menu+0x1344>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <menu+0x1348>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b09      	cmp	r3, #9
 800174a:	f040 80b9 	bne.w	80018c0 <menu+0x1430>
		if(dilSecim == 0){
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <menu+0x1328>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <menu+0x1368>)
 8001758:	2101      	movs	r1, #1
 800175a:	2001      	movs	r0, #1
 800175c:	f7fe fe48 	bl	80003f0 <lcd_print>
 8001760:	e008      	b.n	8001774 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <menu+0x1328>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d104      	bne.n	8001774 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <menu+0x136c>)
 800176c:	2101      	movs	r1, #1
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe fe3e 	bl	80003f0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <menu+0x1370>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <menu+0x1374>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f7fe fe35 	bl	80003f0 <lcd_print>
 8001786:	e04c      	b.n	8001822 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <menu+0x1370>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d13f      	bne.n	8001810 <menu+0x1380>
			if(dilSecim == 0){
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <menu+0x1328>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <menu+0x1378>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f7fe fe27 	bl	80003f0 <lcd_print>
 80017a2:	e03e      	b.n	8001822 <menu+0x1392>
			} else if(dilSecim == 1) {
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <menu+0x1328>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d13a      	bne.n	8001822 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <menu+0x137c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7fe fe1d 	bl	80003f0 <lcd_print>
 80017b6:	e034      	b.n	8001822 <menu+0x1392>
 80017b8:	20000c6c 	.word	0x20000c6c
 80017bc:	0800cb2c 	.word	0x0800cb2c
 80017c0:	40010800 	.word	0x40010800
 80017c4:	20000c7a 	.word	0x20000c7a
 80017c8:	20000c54 	.word	0x20000c54
 80017cc:	20000be4 	.word	0x20000be4
 80017d0:	20000c52 	.word	0x20000c52
 80017d4:	20000c77 	.word	0x20000c77
 80017d8:	20000c4c 	.word	0x20000c4c
 80017dc:	0800cb40 	.word	0x0800cb40
 80017e0:	0800cb54 	.word	0x0800cb54
 80017e4:	20000c58 	.word	0x20000c58
 80017e8:	0800cb68 	.word	0x0800cb68
 80017ec:	0800cb78 	.word	0x0800cb78
 80017f0:	0800cb88 	.word	0x0800cb88
 80017f4:	0800cb9c 	.word	0x0800cb9c
 80017f8:	0800cbb0 	.word	0x0800cbb0
 80017fc:	0800cbc4 	.word	0x0800cbc4
 8001800:	20000c55 	.word	0x20000c55
 8001804:	0800cbd8 	.word	0x0800cbd8
 8001808:	0800cbec 	.word	0x0800cbec
 800180c:	0800cbfc 	.word	0x0800cbfc
			}
		} else if(kapi1Tip == 2) {
 8001810:	4b8a      	ldr	r3, [pc, #552]	; (8001a3c <menu+0x15ac>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d104      	bne.n	8001822 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001818:	4a89      	ldr	r2, [pc, #548]	; (8001a40 <menu+0x15b0>)
 800181a:	2101      	movs	r1, #1
 800181c:	2002      	movs	r0, #2
 800181e:	f7fe fde7 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001822:	2102      	movs	r1, #2
 8001824:	4887      	ldr	r0, [pc, #540]	; (8001a44 <menu+0x15b4>)
 8001826:	f006 fc1d 	bl	8008064 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d115      	bne.n	800185c <menu+0x13cc>
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <menu+0x15b8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00e      	beq.n	800185c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800183e:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <menu+0x15ac>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <menu+0x15ac>)
 8001848:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800184a:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <menu+0x15ac>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d902      	bls.n	8001858 <menu+0x13c8>
				kapi1Tip = 0;
 8001852:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <menu+0x15ac>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001858:	f002 fd7e 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800185c:	2104      	movs	r1, #4
 800185e:	4879      	ldr	r0, [pc, #484]	; (8001a44 <menu+0x15b4>)
 8001860:	f006 fc00 	bl	8008064 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	d115      	bne.n	8001896 <menu+0x1406>
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <menu+0x15b8>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f083 0301 	eor.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001878:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <menu+0x15ac>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <menu+0x15ac>)
 8001882:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001884:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <menu+0x15ac>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d902      	bls.n	8001892 <menu+0x1402>
		   		kapi1Tip = 2;
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <menu+0x15ac>)
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001892:	f002 fd61 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001896:	2108      	movs	r1, #8
 8001898:	486a      	ldr	r0, [pc, #424]	; (8001a44 <menu+0x15b4>)
 800189a:	f006 fbe3 	bl	8008064 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10d      	bne.n	80018c0 <menu+0x1430>
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <menu+0x15b8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f083 0301 	eor.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <menu+0x15ac>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <menu+0x15bc>)
 80018b8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <menu+0x15c0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <menu+0x15c4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d17f      	bne.n	80019c8 <menu+0x1538>
		if(dilSecim == 0) {
 80018c8:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <menu+0x15c8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80018d0:	4a62      	ldr	r2, [pc, #392]	; (8001a5c <menu+0x15cc>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7fe fd8b 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80018da:	4a61      	ldr	r2, [pc, #388]	; (8001a60 <menu+0x15d0>)
 80018dc:	2101      	movs	r1, #1
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fd86 	bl	80003f0 <lcd_print>
 80018e4:	e00d      	b.n	8001902 <menu+0x1472>
		} else if(dilSecim == 1) {
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <menu+0x15c8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d109      	bne.n	8001902 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <menu+0x15d4>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7fe fd7c 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80018f8:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <menu+0x15d8>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f7fe fd77 	bl	80003f0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <menu+0x15dc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	220a      	movs	r2, #10
 8001908:	4959      	ldr	r1, [pc, #356]	; (8001a70 <menu+0x15e0>)
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fdb0 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <menu+0x15e0>)
 8001912:	2110      	movs	r1, #16
 8001914:	2002      	movs	r0, #2
 8001916:	f7fe fd6b 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800191a:	2102      	movs	r1, #2
 800191c:	4849      	ldr	r0, [pc, #292]	; (8001a44 <menu+0x15b4>)
 800191e:	f006 fba1 	bl	8008064 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d119      	bne.n	800195c <menu+0x14cc>
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <menu+0x15b8>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <menu+0x14cc>
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <menu+0x15ac>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <menu+0x15dc>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <menu+0x15dc>)
 8001948:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <menu+0x15dc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d902      	bls.n	8001958 <menu+0x14c8>
				kapi1AcSure = 0;
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <menu+0x15dc>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001958:	f002 fcfe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800195c:	2104      	movs	r1, #4
 800195e:	4839      	ldr	r0, [pc, #228]	; (8001a44 <menu+0x15b4>)
 8001960:	f006 fb80 	bl	8008064 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d119      	bne.n	800199e <menu+0x150e>
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <menu+0x15b8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <menu+0x150e>
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <menu+0x15ac>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10e      	bne.n	800199e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <menu+0x15dc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <menu+0x15dc>)
 800198a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <menu+0x15dc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d902      	bls.n	800199a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <menu+0x15dc>)
 8001996:	2205      	movs	r2, #5
 8001998:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800199a:	f002 fcdd 	bl	8004358 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800199e:	2108      	movs	r1, #8
 80019a0:	4828      	ldr	r0, [pc, #160]	; (8001a44 <menu+0x15b4>)
 80019a2:	f006 fb5f 	bl	8008064 <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10d      	bne.n	80019c8 <menu+0x1538>
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <menu+0x15b8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <menu+0x15dc>)
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <menu+0x15bc>)
 80019c0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <menu+0x15c0>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <menu+0x15c4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b0b      	cmp	r3, #11
 80019ce:	f040 80b5 	bne.w	8001b3c <menu+0x16ac>
		if(dilSecim == 0) {
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <menu+0x15c8>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <menu+0x15e4>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f7fe fd06 	bl	80003f0 <lcd_print>
 80019e4:	e008      	b.n	80019f8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <menu+0x15c8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d104      	bne.n	80019f8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <menu+0x15e8>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7fe fcfc 	bl	80003f0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <menu+0x15ec>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <menu+0x15f0>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7fe fcf3 	bl	80003f0 <lcd_print>
 8001a0a:	e048      	b.n	8001a9e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <menu+0x15ec>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d13b      	bne.n	8001a8c <menu+0x15fc>
			if(dilSecim == 0) {
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <menu+0x15c8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <menu+0x15f4>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7fe fce5 	bl	80003f0 <lcd_print>
 8001a26:	e03a      	b.n	8001a9e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <menu+0x15c8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d136      	bne.n	8001a9e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <menu+0x15f8>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe fcdb 	bl	80003f0 <lcd_print>
 8001a3a:	e030      	b.n	8001a9e <menu+0x160e>
 8001a3c:	20000c55 	.word	0x20000c55
 8001a40:	0800cc10 	.word	0x0800cc10
 8001a44:	40010800 	.word	0x40010800
 8001a48:	20000c7a 	.word	0x20000c7a
 8001a4c:	20000be4 	.word	0x20000be4
 8001a50:	20000c77 	.word	0x20000c77
 8001a54:	20000c4c 	.word	0x20000c4c
 8001a58:	20000c6c 	.word	0x20000c6c
 8001a5c:	0800cc20 	.word	0x0800cc20
 8001a60:	0800cc34 	.word	0x0800cc34
 8001a64:	0800cc44 	.word	0x0800cc44
 8001a68:	0800cc58 	.word	0x0800cc58
 8001a6c:	20000c65 	.word	0x20000c65
 8001a70:	20000c24 	.word	0x20000c24
 8001a74:	0800cc68 	.word	0x0800cc68
 8001a78:	0800cc7c 	.word	0x0800cc7c
 8001a7c:	20000c56 	.word	0x20000c56
 8001a80:	0800cbd8 	.word	0x0800cbd8
 8001a84:	0800cbec 	.word	0x0800cbec
 8001a88:	0800cbfc 	.word	0x0800cbfc
			}
		} else if(kapi2Tip == 2) {
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <menu+0x1828>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d104      	bne.n	8001a9e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001a94:	4a89      	ldr	r2, [pc, #548]	; (8001cbc <menu+0x182c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7fe fca9 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4887      	ldr	r0, [pc, #540]	; (8001cc0 <menu+0x1830>)
 8001aa2:	f006 fadf 	bl	8008064 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d115      	bne.n	8001ad8 <menu+0x1648>
 8001aac:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <menu+0x1834>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <menu+0x1828>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <menu+0x1828>)
 8001ac4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <menu+0x1828>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <menu+0x1644>
				kapi2Tip = 0;
 8001ace:	4b7a      	ldr	r3, [pc, #488]	; (8001cb8 <menu+0x1828>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ad4:	f002 fc40 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4879      	ldr	r0, [pc, #484]	; (8001cc0 <menu+0x1830>)
 8001adc:	f006 fac2 	bl	8008064 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d115      	bne.n	8001b12 <menu+0x1682>
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <menu+0x1834>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001af4:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <menu+0x1828>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <menu+0x1828>)
 8001afe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <menu+0x1828>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d902      	bls.n	8001b0e <menu+0x167e>
		   		kapi2Tip = 2;
 8001b08:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <menu+0x1828>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b0e:	f002 fc23 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b12:	2108      	movs	r1, #8
 8001b14:	486a      	ldr	r0, [pc, #424]	; (8001cc0 <menu+0x1830>)
 8001b16:	f006 faa5 	bl	8008064 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10d      	bne.n	8001b3c <menu+0x16ac>
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <menu+0x1834>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001b2e:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <menu+0x1828>)
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <menu+0x1838>)
 8001b34:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <menu+0x183c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <menu+0x1840>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b0c      	cmp	r3, #12
 8001b42:	d17f      	bne.n	8001c44 <menu+0x17b4>
		if(dilSecim == 0) {
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <menu+0x1844>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001b4c:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <menu+0x1848>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7fe fc4d 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001b56:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <menu+0x184c>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fc48 	bl	80003f0 <lcd_print>
 8001b60:	e00d      	b.n	8001b7e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <menu+0x1844>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d109      	bne.n	8001b7e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <menu+0x1850>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7fe fc3e 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001b74:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <menu+0x1854>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7fe fc39 	bl	80003f0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001b7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <menu+0x1858>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	220a      	movs	r2, #10
 8001b84:	4959      	ldr	r1, [pc, #356]	; (8001cec <menu+0x185c>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00a fc72 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8001b8c:	4a57      	ldr	r2, [pc, #348]	; (8001cec <menu+0x185c>)
 8001b8e:	2110      	movs	r1, #16
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7fe fc2d 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001b96:	2102      	movs	r1, #2
 8001b98:	4849      	ldr	r0, [pc, #292]	; (8001cc0 <menu+0x1830>)
 8001b9a:	f006 fa63 	bl	8008064 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <menu+0x1748>
 8001ba4:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <menu+0x1834>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <menu+0x1748>
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <menu+0x1828>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <menu+0x1858>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <menu+0x1858>)
 8001bc4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <menu+0x1858>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d902      	bls.n	8001bd4 <menu+0x1744>
				kapi2AcSure = 0;
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <menu+0x1858>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd4:	f002 fbc0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <menu+0x1830>)
 8001bdc:	f006 fa42 	bl	8008064 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d119      	bne.n	8001c1a <menu+0x178a>
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <menu+0x1834>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <menu+0x178a>
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <menu+0x1828>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <menu+0x1858>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <menu+0x1858>)
 8001c06:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <menu+0x1858>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d902      	bls.n	8001c16 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <menu+0x1858>)
 8001c12:	2205      	movs	r2, #5
 8001c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c16:	f002 fb9f 	bl	8004358 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <menu+0x1830>)
 8001c1e:	f006 fa21 	bl	8008064 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <menu+0x17b4>
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <menu+0x1834>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <menu+0x1858>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <menu+0x1838>)
 8001c3c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <menu+0x183c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <menu+0x1840>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b0d      	cmp	r3, #13
 8001c4a:	f040 80b5 	bne.w	8001db8 <menu+0x1928>
		if(dilSecim == 0) {
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <menu+0x1844>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <menu+0x1860>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fbc8 	bl	80003f0 <lcd_print>
 8001c60:	e008      	b.n	8001c74 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <menu+0x1844>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d104      	bne.n	8001c74 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001c6a:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <menu+0x1864>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7fe fbbe 	bl	80003f0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <menu+0x1868>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <menu+0x186c>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fbb5 	bl	80003f0 <lcd_print>
 8001c86:	e048      	b.n	8001d1a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <menu+0x1868>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d13b      	bne.n	8001d08 <menu+0x1878>
			if(dilSecim == 0) {
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <menu+0x1844>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <menu+0x1870>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7fe fba7 	bl	80003f0 <lcd_print>
 8001ca2:	e03a      	b.n	8001d1a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <menu+0x1844>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d136      	bne.n	8001d1a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001cac:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <menu+0x1874>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7fe fb9d 	bl	80003f0 <lcd_print>
 8001cb6:	e030      	b.n	8001d1a <menu+0x188a>
 8001cb8:	20000c56 	.word	0x20000c56
 8001cbc:	0800cc10 	.word	0x0800cc10
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	20000c7a 	.word	0x20000c7a
 8001cc8:	20000be4 	.word	0x20000be4
 8001ccc:	20000c77 	.word	0x20000c77
 8001cd0:	20000c4c 	.word	0x20000c4c
 8001cd4:	20000c6c 	.word	0x20000c6c
 8001cd8:	0800cc90 	.word	0x0800cc90
 8001cdc:	0800cc34 	.word	0x0800cc34
 8001ce0:	0800cca4 	.word	0x0800cca4
 8001ce4:	0800cc58 	.word	0x0800cc58
 8001ce8:	20000c66 	.word	0x20000c66
 8001cec:	20000c24 	.word	0x20000c24
 8001cf0:	0800ccb8 	.word	0x0800ccb8
 8001cf4:	0800cccc 	.word	0x0800cccc
 8001cf8:	20000c57 	.word	0x20000c57
 8001cfc:	0800cbd8 	.word	0x0800cbd8
 8001d00:	0800cbec 	.word	0x0800cbec
 8001d04:	0800cbfc 	.word	0x0800cbfc
			}
		} else if(kapitablaTip == 2) {
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <menu+0x19e8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d104      	bne.n	8001d1a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8001d10:	4a5a      	ldr	r2, [pc, #360]	; (8001e7c <menu+0x19ec>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7fe fb6b 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4858      	ldr	r0, [pc, #352]	; (8001e80 <menu+0x19f0>)
 8001d1e:	f006 f9a1 	bl	8008064 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d115      	bne.n	8001d54 <menu+0x18c4>
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <menu+0x19f4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8001d36:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <menu+0x19e8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <menu+0x19e8>)
 8001d40:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <menu+0x19e8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d902      	bls.n	8001d50 <menu+0x18c0>
				kapitablaTip = 0;
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <menu+0x19e8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d50:	f002 fb02 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d54:	2104      	movs	r1, #4
 8001d56:	484a      	ldr	r0, [pc, #296]	; (8001e80 <menu+0x19f0>)
 8001d58:	f006 f984 	bl	8008064 <HAL_GPIO_ReadPin>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d115      	bne.n	8001d8e <menu+0x18fe>
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <menu+0x19f4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <menu+0x19e8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <menu+0x19e8>)
 8001d7a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <menu+0x19e8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d902      	bls.n	8001d8a <menu+0x18fa>
		   		kapitablaTip = 2;
 8001d84:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <menu+0x19e8>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d8a:	f002 fae5 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d8e:	2108      	movs	r1, #8
 8001d90:	483b      	ldr	r0, [pc, #236]	; (8001e80 <menu+0x19f0>)
 8001d92:	f006 f967 	bl	8008064 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10d      	bne.n	8001db8 <menu+0x1928>
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <menu+0x19f4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <menu+0x19e8>)
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <menu+0x19f8>)
 8001db0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <menu+0x19fc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <menu+0x1a00>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b0e      	cmp	r3, #14
 8001dbe:	f040 80f2 	bne.w	8001fa6 <menu+0x1b16>
		if(dilSecim == 0) {
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <menu+0x1a04>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <menu+0x1a08>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7fe fb0e 	bl	80003f0 <lcd_print>
 8001dd4:	e008      	b.n	8001de8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <menu+0x1a04>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <menu+0x1a0c>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7fe fb04 	bl	80003f0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <menu+0x1a10>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <menu+0x1988>
			if(dilSecim == 0){
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <menu+0x1a04>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <menu+0x1a14>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7fe faf7 	bl	80003f0 <lcd_print>
 8001e02:	e071      	b.n	8001ee8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <menu+0x1a04>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d16d      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <menu+0x1a18>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7fe faed 	bl	80003f0 <lcd_print>
 8001e16:	e067      	b.n	8001ee8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <menu+0x1a10>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d112      	bne.n	8001e46 <menu+0x19b6>
			if(dilSecim == 0){
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <menu+0x1a04>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <menu+0x1a1c>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7fe fadf 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <menu+0x1a04>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d156      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <menu+0x1a20>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f7fe fad6 	bl	80003f0 <lcd_print>
 8001e44:	e050      	b.n	8001ee8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <menu+0x1a10>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d136      	bne.n	8001ebc <menu+0x1a2c>
			if(dilSecim == 0){
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <menu+0x1a04>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <menu+0x1a24>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fac8 	bl	80003f0 <lcd_print>
 8001e60:	e042      	b.n	8001ee8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <menu+0x1a04>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d13e      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <menu+0x1a28>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7fe fabe 	bl	80003f0 <lcd_print>
 8001e74:	e038      	b.n	8001ee8 <menu+0x1a58>
 8001e76:	bf00      	nop
 8001e78:	20000c57 	.word	0x20000c57
 8001e7c:	0800cc10 	.word	0x0800cc10
 8001e80:	40010800 	.word	0x40010800
 8001e84:	20000c7a 	.word	0x20000c7a
 8001e88:	20000be4 	.word	0x20000be4
 8001e8c:	20000c77 	.word	0x20000c77
 8001e90:	20000c4c 	.word	0x20000c4c
 8001e94:	20000c6c 	.word	0x20000c6c
 8001e98:	0800cce0 	.word	0x0800cce0
 8001e9c:	0800ccf4 	.word	0x0800ccf4
 8001ea0:	20000c59 	.word	0x20000c59
 8001ea4:	0800cd08 	.word	0x0800cd08
 8001ea8:	0800cd18 	.word	0x0800cd18
 8001eac:	0800cd28 	.word	0x0800cd28
 8001eb0:	0800cd38 	.word	0x0800cd38
 8001eb4:	0800cd48 	.word	0x0800cd48
 8001eb8:	0800cd5c 	.word	0x0800cd5c
			}
		} else if(kapiTablaAcKonum == 3) {
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	; (800212c <menu+0x1c9c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d111      	bne.n	8001ee8 <menu+0x1a58>
			if(dilSecim == 0) {
 8001ec4:	4b9a      	ldr	r3, [pc, #616]	; (8002130 <menu+0x1ca0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8001ecc:	4a99      	ldr	r2, [pc, #612]	; (8002134 <menu+0x1ca4>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fa8d 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8001ed6:	4b96      	ldr	r3, [pc, #600]	; (8002130 <menu+0x1ca0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d104      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8001ede:	4a96      	ldr	r2, [pc, #600]	; (8002138 <menu+0x1ca8>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7fe fa84 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4894      	ldr	r0, [pc, #592]	; (800213c <menu+0x1cac>)
 8001eec:	f006 f8ba 	bl	8008064 <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d115      	bne.n	8001f22 <menu+0x1a92>
 8001ef6:	4b92      	ldr	r3, [pc, #584]	; (8002140 <menu+0x1cb0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001f04:	4b89      	ldr	r3, [pc, #548]	; (800212c <menu+0x1c9c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b87      	ldr	r3, [pc, #540]	; (800212c <menu+0x1c9c>)
 8001f0e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <menu+0x1c9c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d902      	bls.n	8001f1e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <menu+0x1c9c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f1e:	f002 fa1b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2104      	movs	r1, #4
 8001f24:	4885      	ldr	r0, [pc, #532]	; (800213c <menu+0x1cac>)
 8001f26:	f006 f89d 	bl	8008064 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0x1acc>
 8001f30:	4b83      	ldr	r3, [pc, #524]	; (8002140 <menu+0x1cb0>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	; (800212c <menu+0x1c9c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b79      	ldr	r3, [pc, #484]	; (800212c <menu+0x1c9c>)
 8001f48:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001f4a:	4b78      	ldr	r3, [pc, #480]	; (800212c <menu+0x1c9c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d902      	bls.n	8001f58 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <menu+0x1c9c>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f58:	f002 f9fe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	4877      	ldr	r0, [pc, #476]	; (800213c <menu+0x1cac>)
 8001f60:	f006 f880 	bl	8008064 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11d      	bne.n	8001fa6 <menu+0x1b16>
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <menu+0x1cb0>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <menu+0x1c9c>)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <menu+0x1cb4>)
 8001f7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <menu+0x1c9c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <menu+0x1b02>
 8001f8a:	4b68      	ldr	r3, [pc, #416]	; (800212c <menu+0x1c9c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d106      	bne.n	8001fa0 <menu+0x1b10>
				altLimit = 1;
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <menu+0x1cb8>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <menu+0x1cb8>)
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <menu+0x1cb4>)
 8001f9e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <menu+0x1cbc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <menu+0x1cc0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d17f      	bne.n	80020ae <menu+0x1c1e>
		if(dilSecim == 0) {
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <menu+0x1ca0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8001fb6:	4a67      	ldr	r2, [pc, #412]	; (8002154 <menu+0x1cc4>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7fe fa18 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001fc0:	4a65      	ldr	r2, [pc, #404]	; (8002158 <menu+0x1cc8>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fa13 	bl	80003f0 <lcd_print>
 8001fca:	e00d      	b.n	8001fe8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8001fcc:	4b58      	ldr	r3, [pc, #352]	; (8002130 <menu+0x1ca0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d109      	bne.n	8001fe8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8001fd4:	4a61      	ldr	r2, [pc, #388]	; (800215c <menu+0x1ccc>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe fa09 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001fde:	4a60      	ldr	r2, [pc, #384]	; (8002160 <menu+0x1cd0>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7fe fa04 	bl	80003f0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <menu+0x1cd4>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	220a      	movs	r2, #10
 8001fee:	495e      	ldr	r1, [pc, #376]	; (8002168 <menu+0x1cd8>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00a fa3d 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	; (8002168 <menu+0x1cd8>)
 8001ff8:	2110      	movs	r1, #16
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7fe f9f8 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002000:	2102      	movs	r1, #2
 8002002:	484e      	ldr	r0, [pc, #312]	; (800213c <menu+0x1cac>)
 8002004:	f006 f82e 	bl	8008064 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d119      	bne.n	8002042 <menu+0x1bb2>
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <menu+0x1cb0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <menu+0x1bb2>
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <menu+0x1cdc>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10e      	bne.n	8002042 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <menu+0x1cd4>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <menu+0x1cd4>)
 800202e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <menu+0x1cd4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d902      	bls.n	800203e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <menu+0x1cd4>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203e:	f002 f98b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002042:	2104      	movs	r1, #4
 8002044:	483d      	ldr	r0, [pc, #244]	; (800213c <menu+0x1cac>)
 8002046:	f006 f80d 	bl	8008064 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d119      	bne.n	8002084 <menu+0x1bf4>
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <menu+0x1cb0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <menu+0x1bf4>
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <menu+0x1cdc>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <menu+0x1cd4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3b01      	subs	r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <menu+0x1cd4>)
 8002070:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <menu+0x1cd4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <menu+0x1cd4>)
 800207c:	2205      	movs	r2, #5
 800207e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002080:	f002 f96a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002084:	2108      	movs	r1, #8
 8002086:	482d      	ldr	r0, [pc, #180]	; (800213c <menu+0x1cac>)
 8002088:	f005 ffec 	bl	8008064 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10d      	bne.n	80020ae <menu+0x1c1e>
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <menu+0x1cb0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <menu+0x1cd4>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <menu+0x1cb4>)
 80020a6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <menu+0x1cbc>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <menu+0x1cc0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	f040 80bc 	bne.w	8002230 <menu+0x1da0>
		if(dilSecim == 0) {
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <menu+0x1ca0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <menu+0x1ce0>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7fe f993 	bl	80003f0 <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <menu+0x1ca0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <menu+0x1ce4>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe f989 	bl	80003f0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <menu+0x1ce8>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <menu+0x1c7e>
			if(dilSecim == 0) {
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <menu+0x1ca0>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <menu+0x1ca4>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	2002      	movs	r0, #2
 80020f4:	f7fe f97c 	bl	80003f0 <lcd_print>
 80020f8:	e04b      	b.n	8002192 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <menu+0x1ca0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d147      	bne.n	8002192 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <menu+0x1ca8>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f7fe f972 	bl	80003f0 <lcd_print>
 800210c:	e041      	b.n	8002192 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <menu+0x1ce8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d13d      	bne.n	8002192 <menu+0x1d02>
			if(dilSecim == 0) {
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <menu+0x1ca0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d130      	bne.n	8002180 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <menu+0x1cec>)
 8002120:	2101      	movs	r1, #1
 8002122:	2002      	movs	r0, #2
 8002124:	f7fe f964 	bl	80003f0 <lcd_print>
 8002128:	e033      	b.n	8002192 <menu+0x1d02>
 800212a:	bf00      	nop
 800212c:	20000c59 	.word	0x20000c59
 8002130:	20000c6c 	.word	0x20000c6c
 8002134:	0800c9d0 	.word	0x0800c9d0
 8002138:	0800c9e4 	.word	0x0800c9e4
 800213c:	40010800 	.word	0x40010800
 8002140:	20000c7a 	.word	0x20000c7a
 8002144:	20000be4 	.word	0x20000be4
 8002148:	20000c52 	.word	0x20000c52
 800214c:	20000c77 	.word	0x20000c77
 8002150:	20000c4c 	.word	0x20000c4c
 8002154:	0800cd70 	.word	0x0800cd70
 8002158:	0800cc34 	.word	0x0800cc34
 800215c:	0800cd84 	.word	0x0800cd84
 8002160:	0800cc58 	.word	0x0800cc58
 8002164:	20000c67 	.word	0x20000c67
 8002168:	20000c24 	.word	0x20000c24
 800216c:	20000c57 	.word	0x20000c57
 8002170:	0800cd98 	.word	0x0800cd98
 8002174:	0800cdac 	.word	0x0800cdac
 8002178:	20000c5a 	.word	0x20000c5a
 800217c:	0800ca30 	.word	0x0800ca30
			} else if(dilSecim == 1) {
 8002180:	4b99      	ldr	r3, [pc, #612]	; (80023e8 <menu+0x1f58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002188:	4a98      	ldr	r2, [pc, #608]	; (80023ec <menu+0x1f5c>)
 800218a:	2101      	movs	r1, #1
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe f92f 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002192:	2102      	movs	r1, #2
 8002194:	4896      	ldr	r0, [pc, #600]	; (80023f0 <menu+0x1f60>)
 8002196:	f005 ff65 	bl	8008064 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d115      	bne.n	80021cc <menu+0x1d3c>
 80021a0:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <menu+0x1f64>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00e      	beq.n	80021cc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80021ae:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <menu+0x1f68>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b90      	ldr	r3, [pc, #576]	; (80023f8 <menu+0x1f68>)
 80021b8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80021ba:	4b8f      	ldr	r3, [pc, #572]	; (80023f8 <menu+0x1f68>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d902      	bls.n	80021c8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80021c2:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <menu+0x1f68>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c8:	f002 f8c6 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021cc:	2104      	movs	r1, #4
 80021ce:	4888      	ldr	r0, [pc, #544]	; (80023f0 <menu+0x1f60>)
 80021d0:	f005 ff48 	bl	8008064 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d115      	bne.n	8002206 <menu+0x1d76>
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <menu+0x1f64>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80021e8:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <menu+0x1f68>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <menu+0x1f68>)
 80021f2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80021f4:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <menu+0x1f68>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <menu+0x1f68>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002202:	f002 f8a9 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002206:	2108      	movs	r1, #8
 8002208:	4879      	ldr	r0, [pc, #484]	; (80023f0 <menu+0x1f60>)
 800220a:	f005 ff2b 	bl	8008064 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10d      	bne.n	8002230 <menu+0x1da0>
 8002214:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <menu+0x1f64>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002222:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <menu+0x1f68>)
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	4b75      	ldr	r3, [pc, #468]	; (80023fc <menu+0x1f6c>)
 8002228:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800222a:	4b75      	ldr	r3, [pc, #468]	; (8002400 <menu+0x1f70>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <menu+0x1f74>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b11      	cmp	r3, #17
 8002236:	f040 80c3 	bne.w	80023c0 <menu+0x1f30>
		if(dilSecim == 0) {
 800223a:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <menu+0x1f58>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <menu+0x1f78>)
 8002244:	2101      	movs	r1, #1
 8002246:	2001      	movs	r0, #1
 8002248:	f7fe f8d2 	bl	80003f0 <lcd_print>
 800224c:	e008      	b.n	8002260 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <menu+0x1f58>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d104      	bne.n	8002260 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002256:	4a6d      	ldr	r2, [pc, #436]	; (800240c <menu+0x1f7c>)
 8002258:	2101      	movs	r1, #1
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe f8c8 	bl	80003f0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <menu+0x1f80>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d113      	bne.n	8002290 <menu+0x1e00>
			if(dilSecim == 0){
 8002268:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <menu+0x1f58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002270:	4a68      	ldr	r2, [pc, #416]	; (8002414 <menu+0x1f84>)
 8002272:	2101      	movs	r1, #1
 8002274:	2002      	movs	r0, #2
 8002276:	f7fe f8bb 	bl	80003f0 <lcd_print>
 800227a:	e038      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1){
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <menu+0x1f58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d134      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <menu+0x1f88>)
 8002286:	2101      	movs	r1, #1
 8002288:	2002      	movs	r0, #2
 800228a:	f7fe f8b1 	bl	80003f0 <lcd_print>
 800228e:	e02e      	b.n	80022ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002290:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <menu+0x1f80>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d113      	bne.n	80022c0 <menu+0x1e30>
			if(dilSecim == 0){
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <menu+0x1f58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <menu+0x1f8c>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7fe f8a3 	bl	80003f0 <lcd_print>
 80022aa:	e020      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <menu+0x1f58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11c      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80022b4:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <menu+0x1f90>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	2002      	movs	r0, #2
 80022ba:	f7fe f899 	bl	80003f0 <lcd_print>
 80022be:	e016      	b.n	80022ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <menu+0x1f80>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d112      	bne.n	80022ee <menu+0x1e5e>
			if(dilSecim == 0) {
 80022c8:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <menu+0x1f58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80022d0:	4a54      	ldr	r2, [pc, #336]	; (8002424 <menu+0x1f94>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7fe f88b 	bl	80003f0 <lcd_print>
 80022da:	e008      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <menu+0x1f58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d104      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80022e4:	4a50      	ldr	r2, [pc, #320]	; (8002428 <menu+0x1f98>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	2002      	movs	r0, #2
 80022ea:	f7fe f881 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ee:	2102      	movs	r1, #2
 80022f0:	483f      	ldr	r0, [pc, #252]	; (80023f0 <menu+0x1f60>)
 80022f2:	f005 feb7 	bl	8008064 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d115      	bne.n	8002328 <menu+0x1e98>
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <menu+0x1f64>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <menu+0x1f80>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <menu+0x1f80>)
 8002314:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <menu+0x1f80>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <menu+0x1f80>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002324:	f002 f818 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002328:	2104      	movs	r1, #4
 800232a:	4831      	ldr	r0, [pc, #196]	; (80023f0 <menu+0x1f60>)
 800232c:	f005 fe9a 	bl	8008064 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d115      	bne.n	8002362 <menu+0x1ed2>
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <menu+0x1f64>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <menu+0x1ed2>
			devirmeYuruyusSecim=devirmeYuruyusSecim-1;
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <menu+0x1f80>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <menu+0x1f80>)
 800234e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <menu+0x1f80>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d902      	bls.n	800235e <menu+0x1ece>
		   		devirmeYuruyusSecim=2;
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <menu+0x1f80>)
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800235e:	f001 fffb 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2108      	movs	r1, #8
 8002364:	4822      	ldr	r0, [pc, #136]	; (80023f0 <menu+0x1f60>)
 8002366:	f005 fe7d 	bl	8008064 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d127      	bne.n	80023c0 <menu+0x1f30>
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <menu+0x1f64>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d020      	beq.n	80023c0 <menu+0x1f30>
			eepromData[15]=devirmeYuruyusSecim;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <menu+0x1f80>)
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <menu+0x1f6c>)
 8002384:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <menu+0x1f80>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <menu+0x1f06>
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <menu+0x1f80>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <menu+0x1f14>
				calismaSekli = 0;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <menu+0x1f9c>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <menu+0x1f9c>)
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <menu+0x1f6c>)
 80023a2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <menu+0x1f80>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <menu+0x1fa0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <menu+0x1fa0>)
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <menu+0x1f6c>)
 80023b8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <menu+0x1f70>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <menu+0x1f74>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	f040 80d5 	bne.w	8002574 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <menu+0x1f80>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d13c      	bne.n	800244c <menu+0x1fbc>
			if(dilSecim == 0) {
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <menu+0x1f58>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12e      	bne.n	8002438 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <menu+0x1fa4>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe f806 	bl	80003f0 <lcd_print>
 80023e4:	e048      	b.n	8002478 <menu+0x1fe8>
 80023e6:	bf00      	nop
 80023e8:	20000c6c 	.word	0x20000c6c
 80023ec:	0800ca44 	.word	0x0800ca44
 80023f0:	40010800 	.word	0x40010800
 80023f4:	20000c7a 	.word	0x20000c7a
 80023f8:	20000c5a 	.word	0x20000c5a
 80023fc:	20000be4 	.word	0x20000be4
 8002400:	20000c77 	.word	0x20000c77
 8002404:	20000c4c 	.word	0x20000c4c
 8002408:	0800cdc0 	.word	0x0800cdc0
 800240c:	0800cdd4 	.word	0x0800cdd4
 8002410:	20000c5b 	.word	0x20000c5b
 8002414:	0800cde8 	.word	0x0800cde8
 8002418:	0800cdf8 	.word	0x0800cdf8
 800241c:	0800ce08 	.word	0x0800ce08
 8002420:	0800ce18 	.word	0x0800ce18
 8002424:	0800c9d0 	.word	0x0800c9d0
 8002428:	0800c9e4 	.word	0x0800c9e4
 800242c:	20000c4d 	.word	0x20000c4d
 8002430:	20000c5e 	.word	0x20000c5e
 8002434:	0800ce28 	.word	0x0800ce28
			} else if(dilSecim == 1) {
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <menu+0x2198>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d11b      	bne.n	8002478 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <menu+0x219c>)
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f7fd ffd3 	bl	80003f0 <lcd_print>
 800244a:	e015      	b.n	8002478 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800244c:	4b78      	ldr	r3, [pc, #480]	; (8002630 <menu+0x21a0>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d111      	bne.n	8002478 <menu+0x1fe8>
			if(dilSecim == 0){
 8002454:	4b74      	ldr	r3, [pc, #464]	; (8002628 <menu+0x2198>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800245c:	4a75      	ldr	r2, [pc, #468]	; (8002634 <menu+0x21a4>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f7fd ffc5 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <menu+0x2198>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d104      	bne.n	8002478 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800246e:	4a72      	ldr	r2, [pc, #456]	; (8002638 <menu+0x21a8>)
 8002470:	2101      	movs	r1, #1
 8002472:	2001      	movs	r0, #1
 8002474:	f7fd ffbc 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <menu+0x21ac>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <menu+0x2018>
			if(dilSecim == 0) {
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <menu+0x2198>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8002488:	4a6d      	ldr	r2, [pc, #436]	; (8002640 <menu+0x21b0>)
 800248a:	2101      	movs	r1, #1
 800248c:	2002      	movs	r0, #2
 800248e:	f7fd ffaf 	bl	80003f0 <lcd_print>
 8002492:	e020      	b.n	80024d6 <menu+0x2046>
			} else if(dilSecim == 1){
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <menu+0x2198>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d11c      	bne.n	80024d6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800249c:	4a69      	ldr	r2, [pc, #420]	; (8002644 <menu+0x21b4>)
 800249e:	2101      	movs	r1, #1
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7fd ffa5 	bl	80003f0 <lcd_print>
 80024a6:	e016      	b.n	80024d6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <menu+0x21ac>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d112      	bne.n	80024d6 <menu+0x2046>
			if(dilSecim == 0){
 80024b0:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <menu+0x2198>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <menu+0x21b8>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2002      	movs	r0, #2
 80024be:	f7fd ff97 	bl	80003f0 <lcd_print>
 80024c2:	e008      	b.n	80024d6 <menu+0x2046>
			} else if(dilSecim == 1){
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <menu+0x2198>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d104      	bne.n	80024d6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <menu+0x21bc>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7fd ff8d 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d6:	2102      	movs	r1, #2
 80024d8:	485d      	ldr	r0, [pc, #372]	; (8002650 <menu+0x21c0>)
 80024da:	f005 fdc3 	bl	8008064 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d115      	bne.n	8002510 <menu+0x2080>
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <menu+0x21c4>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <menu+0x21ac>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b50      	ldr	r3, [pc, #320]	; (800263c <menu+0x21ac>)
 80024fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <menu+0x21ac>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d902      	bls.n	800250c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002506:	4b4d      	ldr	r3, [pc, #308]	; (800263c <menu+0x21ac>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800250c:	f001 ff24 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2104      	movs	r1, #4
 8002512:	484f      	ldr	r0, [pc, #316]	; (8002650 <menu+0x21c0>)
 8002514:	f005 fda6 	bl	8008064 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d115      	bne.n	800254a <menu+0x20ba>
 800251e:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <menu+0x21c4>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <menu+0x21ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3b01      	subs	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <menu+0x21ac>)
 8002536:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <menu+0x21ac>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <menu+0x21ac>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002546:	f001 ff07 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800254a:	2108      	movs	r1, #8
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <menu+0x21c0>)
 800254e:	f005 fd89 	bl	8008064 <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10d      	bne.n	8002574 <menu+0x20e4>
 8002558:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <menu+0x21c4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <menu+0x21ac>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <menu+0x21c8>)
 800256c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <menu+0x21cc>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <menu+0x21d0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b13      	cmp	r3, #19
 800257a:	f040 80d5 	bne.w	8002728 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <menu+0x21a0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d113      	bne.n	80025ae <menu+0x211e>
			if(dilSecim == 0) {
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <menu+0x2198>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <menu+0x21d4>)
 8002590:	2101      	movs	r1, #1
 8002592:	2001      	movs	r0, #1
 8002594:	f7fd ff2c 	bl	80003f0 <lcd_print>
 8002598:	e01f      	b.n	80025da <menu+0x214a>
			} else if(dilSecim == 1) {
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <menu+0x2198>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d11b      	bne.n	80025da <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80025a2:	4a31      	ldr	r2, [pc, #196]	; (8002668 <menu+0x21d8>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7fd ff22 	bl	80003f0 <lcd_print>
 80025ac:	e015      	b.n	80025da <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <menu+0x21a0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d111      	bne.n	80025da <menu+0x214a>
			if(dilSecim == 0) {
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <menu+0x2198>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <menu+0x21dc>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fd ff14 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <menu+0x2198>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d104      	bne.n	80025da <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <menu+0x21e0>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fd ff0b 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <menu+0x21e4>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <menu+0x217a>
			if(dilSecim == 0) {
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <menu+0x2198>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <menu+0x21b0>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	2002      	movs	r0, #2
 80025f0:	f7fd fefe 	bl	80003f0 <lcd_print>
 80025f4:	e049      	b.n	800268a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <menu+0x2198>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d145      	bne.n	800268a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80025fe:	4a11      	ldr	r2, [pc, #68]	; (8002644 <menu+0x21b4>)
 8002600:	2101      	movs	r1, #1
 8002602:	2002      	movs	r0, #2
 8002604:	f7fd fef4 	bl	80003f0 <lcd_print>
 8002608:	e03f      	b.n	800268a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <menu+0x21e4>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d13b      	bne.n	800268a <menu+0x21fa>
			if(dilSecim == 0) {
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <menu+0x2198>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12e      	bne.n	8002678 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <menu+0x21b8>)
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f7fd fee6 	bl	80003f0 <lcd_print>
 8002624:	e031      	b.n	800268a <menu+0x21fa>
 8002626:	bf00      	nop
 8002628:	20000c6c 	.word	0x20000c6c
 800262c:	0800ce3c 	.word	0x0800ce3c
 8002630:	20000c5b 	.word	0x20000c5b
 8002634:	0800ce4c 	.word	0x0800ce4c
 8002638:	0800ce60 	.word	0x0800ce60
 800263c:	20000c5c 	.word	0x20000c5c
 8002640:	0800c9d0 	.word	0x0800c9d0
 8002644:	0800c9e4 	.word	0x0800c9e4
 8002648:	0800ca30 	.word	0x0800ca30
 800264c:	0800ca44 	.word	0x0800ca44
 8002650:	40010800 	.word	0x40010800
 8002654:	20000c7a 	.word	0x20000c7a
 8002658:	20000be4 	.word	0x20000be4
 800265c:	20000c77 	.word	0x20000c77
 8002660:	20000c4c 	.word	0x20000c4c
 8002664:	0800ce74 	.word	0x0800ce74
 8002668:	0800ce88 	.word	0x0800ce88
 800266c:	0800ce9c 	.word	0x0800ce9c
 8002670:	0800ceb0 	.word	0x0800ceb0
 8002674:	20000c5d 	.word	0x20000c5d
			} else if(dilSecim == 1) {
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <menu+0x242c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d104      	bne.n	800268a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002680:	4a8f      	ldr	r2, [pc, #572]	; (80028c0 <menu+0x2430>)
 8002682:	2101      	movs	r1, #1
 8002684:	2002      	movs	r0, #2
 8002686:	f7fd feb3 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800268a:	2102      	movs	r1, #2
 800268c:	488d      	ldr	r0, [pc, #564]	; (80028c4 <menu+0x2434>)
 800268e:	f005 fce9 	bl	8008064 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d115      	bne.n	80026c4 <menu+0x2234>
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <menu+0x2438>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00e      	beq.n	80026c4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <menu+0x243c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b87      	ldr	r3, [pc, #540]	; (80028cc <menu+0x243c>)
 80026b0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80026b2:	4b86      	ldr	r3, [pc, #536]	; (80028cc <menu+0x243c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d902      	bls.n	80026c0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80026ba:	4b84      	ldr	r3, [pc, #528]	; (80028cc <menu+0x243c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c0:	f001 fe4a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c4:	2104      	movs	r1, #4
 80026c6:	487f      	ldr	r0, [pc, #508]	; (80028c4 <menu+0x2434>)
 80026c8:	f005 fccc 	bl	8008064 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d115      	bne.n	80026fe <menu+0x226e>
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <menu+0x2438>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80026e0:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x243c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <menu+0x243c>)
 80026ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80026ec:	4b77      	ldr	r3, [pc, #476]	; (80028cc <menu+0x243c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <menu+0x243c>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026fa:	f001 fe2d 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fe:	2108      	movs	r1, #8
 8002700:	4870      	ldr	r0, [pc, #448]	; (80028c4 <menu+0x2434>)
 8002702:	f005 fcaf 	bl	8008064 <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10d      	bne.n	8002728 <menu+0x2298>
 800270c:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <menu+0x2438>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <menu+0x243c>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <menu+0x2440>)
 8002720:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <menu+0x2444>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <menu+0x2448>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b14      	cmp	r3, #20
 800272e:	f040 80b5 	bne.w	800289c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <menu+0x244c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d113      	bne.n	8002762 <menu+0x22d2>
			if(dilSecim == 0) {
 800273a:	4b60      	ldr	r3, [pc, #384]	; (80028bc <menu+0x242c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <menu+0x2450>)
 8002744:	2101      	movs	r1, #1
 8002746:	2001      	movs	r0, #1
 8002748:	f7fd fe52 	bl	80003f0 <lcd_print>
 800274c:	e020      	b.n	8002790 <menu+0x2300>
			} else if(dilSecim == 1) {
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <menu+0x242c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d11c      	bne.n	8002790 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <menu+0x2454>)
 8002758:	2101      	movs	r1, #1
 800275a:	2001      	movs	r0, #1
 800275c:	f7fd fe48 	bl	80003f0 <lcd_print>
 8002760:	e016      	b.n	8002790 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <menu+0x244c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d112      	bne.n	8002790 <menu+0x2300>
			if(dilSecim == 0) {
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <menu+0x242c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002772:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <menu+0x2458>)
 8002774:	2101      	movs	r1, #1
 8002776:	2001      	movs	r0, #1
 8002778:	f7fd fe3a 	bl	80003f0 <lcd_print>
 800277c:	e008      	b.n	8002790 <menu+0x2300>
			} else if(dilSecim == 1) {
 800277e:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <menu+0x242c>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d104      	bne.n	8002790 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002786:	4a59      	ldr	r2, [pc, #356]	; (80028ec <menu+0x245c>)
 8002788:	2101      	movs	r1, #1
 800278a:	2001      	movs	r0, #1
 800278c:	f7fd fe30 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <menu+0x2460>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d113      	bne.n	80027c0 <menu+0x2330>
			if(dilSecim == 0) {
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <menu+0x242c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80027a0:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <menu+0x2464>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	2002      	movs	r0, #2
 80027a6:	f7fd fe23 	bl	80003f0 <lcd_print>
 80027aa:	e020      	b.n	80027ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <menu+0x242c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d11c      	bne.n	80027ee <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <menu+0x2468>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2002      	movs	r0, #2
 80027ba:	f7fd fe19 	bl	80003f0 <lcd_print>
 80027be:	e016      	b.n	80027ee <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <menu+0x2460>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d112      	bne.n	80027ee <menu+0x235e>
			if(dilSecim == 0) {
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <menu+0x242c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80027d0:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <menu+0x246c>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7fd fe0b 	bl	80003f0 <lcd_print>
 80027da:	e008      	b.n	80027ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <menu+0x242c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d104      	bne.n	80027ee <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80027e4:	4a46      	ldr	r2, [pc, #280]	; (8002900 <menu+0x2470>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	2002      	movs	r0, #2
 80027ea:	f7fd fe01 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80027ee:	2102      	movs	r1, #2
 80027f0:	4834      	ldr	r0, [pc, #208]	; (80028c4 <menu+0x2434>)
 80027f2:	f005 fc37 	bl	8008064 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d119      	bne.n	8002830 <menu+0x23a0>
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <menu+0x2438>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <menu+0x23a0>
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <menu+0x244c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d10e      	bne.n	8002830 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <menu+0x2460>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <menu+0x2460>)
 800281c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <menu+0x2460>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d902      	bls.n	800282c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <menu+0x2460>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800282c:	f001 fd94 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002830:	2104      	movs	r1, #4
 8002832:	4824      	ldr	r0, [pc, #144]	; (80028c4 <menu+0x2434>)
 8002834:	f005 fc16 	bl	8008064 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d119      	bne.n	8002872 <menu+0x23e2>
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <menu+0x2438>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <menu+0x23e2>
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x244c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d10e      	bne.n	8002872 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <menu+0x2460>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <menu+0x2460>)
 800285e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <menu+0x2460>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <menu+0x2460>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286e:	f001 fd73 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2108      	movs	r1, #8
 8002874:	4813      	ldr	r0, [pc, #76]	; (80028c4 <menu+0x2434>)
 8002876:	f005 fbf5 	bl	8008064 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10d      	bne.n	800289c <menu+0x240c>
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <menu+0x2438>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <menu+0x2460>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <menu+0x2440>)
 8002894:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <menu+0x2444>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <menu+0x2448>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b15      	cmp	r3, #21
 80028a2:	f040 80c2 	bne.w	8002a2a <menu+0x259a>
		if(dilSecim == 0) {
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <menu+0x242c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12c      	bne.n	8002908 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <menu+0x2474>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7fd fd9c 	bl	80003f0 <lcd_print>
 80028b8:	e02f      	b.n	800291a <menu+0x248a>
 80028ba:	bf00      	nop
 80028bc:	20000c6c 	.word	0x20000c6c
 80028c0:	0800ca44 	.word	0x0800ca44
 80028c4:	40010800 	.word	0x40010800
 80028c8:	20000c7a 	.word	0x20000c7a
 80028cc:	20000c5d 	.word	0x20000c5d
 80028d0:	20000be4 	.word	0x20000be4
 80028d4:	20000c77 	.word	0x20000c77
 80028d8:	20000c4c 	.word	0x20000c4c
 80028dc:	20000c5b 	.word	0x20000c5b
 80028e0:	0800cec4 	.word	0x0800cec4
 80028e4:	0800ced8 	.word	0x0800ced8
 80028e8:	0800ceec 	.word	0x0800ceec
 80028ec:	0800cf00 	.word	0x0800cf00
 80028f0:	20000c5e 	.word	0x20000c5e
 80028f4:	0800cf14 	.word	0x0800cf14
 80028f8:	0800cf28 	.word	0x0800cf28
 80028fc:	0800cf38 	.word	0x0800cf38
 8002900:	0800cf4c 	.word	0x0800cf4c
 8002904:	0800cf5c 	.word	0x0800cf5c
		} else if(dilSecim == 1) {
 8002908:	4b9c      	ldr	r3, [pc, #624]	; (8002b7c <menu+0x26ec>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d104      	bne.n	800291a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002910:	4a9b      	ldr	r2, [pc, #620]	; (8002b80 <menu+0x26f0>)
 8002912:	2101      	movs	r1, #1
 8002914:	2001      	movs	r0, #1
 8002916:	f7fd fd6b 	bl	80003f0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800291a:	4b9a      	ldr	r3, [pc, #616]	; (8002b84 <menu+0x26f4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d112      	bne.n	8002948 <menu+0x24b8>
			if(dilSecim == 0) {
 8002922:	4b96      	ldr	r3, [pc, #600]	; (8002b7c <menu+0x26ec>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800292a:	4a97      	ldr	r2, [pc, #604]	; (8002b88 <menu+0x26f8>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd fd5e 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002934:	4b91      	ldr	r3, [pc, #580]	; (8002b7c <menu+0x26ec>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d11c      	bne.n	8002976 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800293c:	4a93      	ldr	r2, [pc, #588]	; (8002b8c <menu+0x26fc>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f7fd fd55 	bl	80003f0 <lcd_print>
 8002946:	e016      	b.n	8002976 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002948:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <menu+0x26f4>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d112      	bne.n	8002976 <menu+0x24e6>
			if(dilSecim == 0) {
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <menu+0x26ec>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002958:	4a8d      	ldr	r2, [pc, #564]	; (8002b90 <menu+0x2700>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f7fd fd47 	bl	80003f0 <lcd_print>
 8002962:	e008      	b.n	8002976 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002964:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <menu+0x26ec>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d104      	bne.n	8002976 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800296c:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <menu+0x2704>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f7fd fd3d 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002976:	2102      	movs	r1, #2
 8002978:	4887      	ldr	r0, [pc, #540]	; (8002b98 <menu+0x2708>)
 800297a:	f005 fb73 	bl	8008064 <HAL_GPIO_ReadPin>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d115      	bne.n	80029b0 <menu+0x2520>
 8002984:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <menu+0x270c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f083 0301 	eor.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002992:	4b7c      	ldr	r3, [pc, #496]	; (8002b84 <menu+0x26f4>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <menu+0x26f4>)
 800299c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800299e:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <menu+0x26f4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d902      	bls.n	80029ac <menu+0x251c>
				platformSilindirTipi = 0;
 80029a6:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <menu+0x26f4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029ac:	f001 fcd4 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b0:	2104      	movs	r1, #4
 80029b2:	4879      	ldr	r0, [pc, #484]	; (8002b98 <menu+0x2708>)
 80029b4:	f005 fb56 	bl	8008064 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d115      	bne.n	80029ea <menu+0x255a>
 80029be:	4b77      	ldr	r3, [pc, #476]	; (8002b9c <menu+0x270c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <menu+0x26f4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <menu+0x26f4>)
 80029d6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <menu+0x26f4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <menu+0x26f4>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e6:	f001 fcb7 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ea:	2108      	movs	r1, #8
 80029ec:	486a      	ldr	r0, [pc, #424]	; (8002b98 <menu+0x2708>)
 80029ee:	f005 fb39 	bl	8008064 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d118      	bne.n	8002a2a <menu+0x259a>
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <menu+0x270c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <menu+0x26f4>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <menu+0x2710>)
 8002a0c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <menu+0x26f4>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d106      	bne.n	8002a24 <menu+0x2594>
				altLimit = 1;
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <menu+0x2714>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <menu+0x2714>)
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <menu+0x2710>)
 8002a22:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002a24:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <menu+0x2718>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002a2a:	4b60      	ldr	r3, [pc, #384]	; (8002bac <menu+0x271c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b16      	cmp	r3, #22
 8002a30:	f040 8081 	bne.w	8002b36 <menu+0x26a6>
		if(dilSecim == 0) {
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <menu+0x26ec>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002a3c:	4a5c      	ldr	r2, [pc, #368]	; (8002bb0 <menu+0x2720>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7fd fcd5 	bl	80003f0 <lcd_print>
 8002a46:	e008      	b.n	8002a5a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <menu+0x26ec>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d104      	bne.n	8002a5a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <menu+0x2724>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fd fccb 	bl	80003f0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <menu+0x26ec>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002a62:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <menu+0x2728>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fd fcc2 	bl	80003f0 <lcd_print>
 8002a6c:	e008      	b.n	8002a80 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <menu+0x26ec>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002a76:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <menu+0x272c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fd fcb8 	bl	80003f0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <menu+0x2730>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	220a      	movs	r2, #10
 8002a86:	494f      	ldr	r1, [pc, #316]	; (8002bc4 <menu+0x2734>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 fcf1 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <menu+0x2734>)
 8002a90:	2110      	movs	r1, #16
 8002a92:	2002      	movs	r0, #2
 8002a94:	f7fd fcac 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a98:	2102      	movs	r1, #2
 8002a9a:	483f      	ldr	r0, [pc, #252]	; (8002b98 <menu+0x2708>)
 8002a9c:	f005 fae2 	bl	8008064 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d115      	bne.n	8002ad2 <menu+0x2642>
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <menu+0x270c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <menu+0x2730>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <menu+0x2730>)
 8002abe:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <menu+0x2730>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d902      	bls.n	8002ace <menu+0x263e>
				yukariValfTmr = 0;
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <menu+0x2730>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ace:	f001 fc43 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4830      	ldr	r0, [pc, #192]	; (8002b98 <menu+0x2708>)
 8002ad6:	f005 fac5 	bl	8008064 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d115      	bne.n	8002b0c <menu+0x267c>
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <menu+0x270c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <menu+0x2730>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <menu+0x2730>)
 8002af8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <menu+0x2730>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <menu+0x2730>)
 8002b04:	2205      	movs	r2, #5
 8002b06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b08:	f001 fc26 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0c:	2108      	movs	r1, #8
 8002b0e:	4822      	ldr	r0, [pc, #136]	; (8002b98 <menu+0x2708>)
 8002b10:	f005 faa8 	bl	8008064 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <menu+0x26a6>
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <menu+0x270c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <menu+0x2730>)
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <menu+0x2710>)
 8002b2e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <menu+0x2718>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <menu+0x271c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b17      	cmp	r3, #23
 8002b3c:	f040 80ac 	bne.w	8002c98 <menu+0x2808>
		if(dilSecim == 0) {
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <menu+0x26ec>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <menu+0x2738>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7fd fc4f 	bl	80003f0 <lcd_print>
 8002b52:	e008      	b.n	8002b66 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <menu+0x26ec>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d104      	bne.n	8002b66 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <menu+0x273c>)
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fd fc45 	bl	80003f0 <lcd_print>
		}

		if(asagiValfTmr>=0) {
			if(dilSecim == 0) {
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <menu+0x26ec>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d130      	bne.n	8002bd0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <menu+0x2728>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	2002      	movs	r0, #2
 8002b74:	f7fd fc3c 	bl	80003f0 <lcd_print>
 8002b78:	e033      	b.n	8002be2 <menu+0x2752>
 8002b7a:	bf00      	nop
 8002b7c:	20000c6c 	.word	0x20000c6c
 8002b80:	0800cf70 	.word	0x0800cf70
 8002b84:	20000c5f 	.word	0x20000c5f
 8002b88:	0800cf14 	.word	0x0800cf14
 8002b8c:	0800cf28 	.word	0x0800cf28
 8002b90:	0800cf38 	.word	0x0800cf38
 8002b94:	0800cf4c 	.word	0x0800cf4c
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	20000c7a 	.word	0x20000c7a
 8002ba0:	20000be4 	.word	0x20000be4
 8002ba4:	20000c52 	.word	0x20000c52
 8002ba8:	20000c77 	.word	0x20000c77
 8002bac:	20000c4c 	.word	0x20000c4c
 8002bb0:	0800cf80 	.word	0x0800cf80
 8002bb4:	0800cf94 	.word	0x0800cf94
 8002bb8:	0800cc34 	.word	0x0800cc34
 8002bbc:	0800cfa8 	.word	0x0800cfa8
 8002bc0:	20000c60 	.word	0x20000c60
 8002bc4:	20000c24 	.word	0x20000c24
 8002bc8:	0800cfb8 	.word	0x0800cfb8
 8002bcc:	0800cfcc 	.word	0x0800cfcc
			} else if(dilSecim == 1) {
 8002bd0:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <menu+0x29a4>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d104      	bne.n	8002be2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002bd8:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <menu+0x29a8>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7fd fc07 	bl	80003f0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002be2:	4b96      	ldr	r3, [pc, #600]	; (8002e3c <menu+0x29ac>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	220a      	movs	r2, #10
 8002be8:	4995      	ldr	r1, [pc, #596]	; (8002e40 <menu+0x29b0>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f009 fc40 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8002bf0:	4a93      	ldr	r2, [pc, #588]	; (8002e40 <menu+0x29b0>)
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f7fd fbfb 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4891      	ldr	r0, [pc, #580]	; (8002e44 <menu+0x29b4>)
 8002bfe:	f005 fa31 	bl	8008064 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d115      	bne.n	8002c34 <menu+0x27a4>
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <menu+0x29b8>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <menu+0x29ac>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b87      	ldr	r3, [pc, #540]	; (8002e3c <menu+0x29ac>)
 8002c20:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <menu+0x29ac>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d902      	bls.n	8002c30 <menu+0x27a0>
				asagiValfTmr = 0;
 8002c2a:	4b84      	ldr	r3, [pc, #528]	; (8002e3c <menu+0x29ac>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c30:	f001 fb92 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c34:	2104      	movs	r1, #4
 8002c36:	4883      	ldr	r0, [pc, #524]	; (8002e44 <menu+0x29b4>)
 8002c38:	f005 fa14 	bl	8008064 <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d115      	bne.n	8002c6e <menu+0x27de>
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <menu+0x29b8>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002c50:	4b7a      	ldr	r3, [pc, #488]	; (8002e3c <menu+0x29ac>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <menu+0x29ac>)
 8002c5a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002c5c:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <menu+0x29ac>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d902      	bls.n	8002c6a <menu+0x27da>
		   		asagiValfTmr = 5;
 8002c64:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <menu+0x29ac>)
 8002c66:	2205      	movs	r2, #5
 8002c68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c6a:	f001 fb75 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6e:	2108      	movs	r1, #8
 8002c70:	4874      	ldr	r0, [pc, #464]	; (8002e44 <menu+0x29b4>)
 8002c72:	f005 f9f7 	bl	8008064 <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <menu+0x2808>
 8002c7c:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <menu+0x29b8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <menu+0x29ac>)
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <menu+0x29bc>)
 8002c90:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <menu+0x29c0>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002c98:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <menu+0x29c4>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b18      	cmp	r3, #24
 8002c9e:	f040 809d 	bne.w	8002ddc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <menu+0x29c8>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d113      	bne.n	8002cd2 <menu+0x2842>
			if(dilSecim == 0) {
 8002caa:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <menu+0x29a4>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002cb2:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <menu+0x29cc>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fd fb9a 	bl	80003f0 <lcd_print>
 8002cbc:	e020      	b.n	8002d00 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <menu+0x29a4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11c      	bne.n	8002d00 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002cc6:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <menu+0x29d0>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fd fb90 	bl	80003f0 <lcd_print>
 8002cd0:	e016      	b.n	8002d00 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <menu+0x29c8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d112      	bne.n	8002d00 <menu+0x2870>
			if(dilSecim == 0) {
 8002cda:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <menu+0x29a4>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002ce2:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <menu+0x29d4>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7fd fb82 	bl	80003f0 <lcd_print>
 8002cec:	e008      	b.n	8002d00 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002cee:	4b51      	ldr	r3, [pc, #324]	; (8002e34 <menu+0x29a4>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d104      	bne.n	8002d00 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	; (8002e68 <menu+0x29d8>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7fd fb78 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr>=0) {
			if(dilSecim == 0) {
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <menu+0x29a4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <menu+0x29dc>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f7fd fb6f 	bl	80003f0 <lcd_print>
 8002d12:	e008      	b.n	8002d26 <menu+0x2896>
			} else if(dilSecim == 1) {
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <menu+0x29a4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d104      	bne.n	8002d26 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8002d1c:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <menu+0x29a8>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2002      	movs	r0, #2
 8002d22:	f7fd fb65 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002d26:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <menu+0x29e0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	220a      	movs	r2, #10
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <menu+0x29b0>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f009 fb9e 	bl	800c470 <itoa>
		lcd_print(2, 16, snum);
 8002d34:	4a42      	ldr	r2, [pc, #264]	; (8002e40 <menu+0x29b0>)
 8002d36:	2110      	movs	r1, #16
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7fd fb59 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4840      	ldr	r0, [pc, #256]	; (8002e44 <menu+0x29b4>)
 8002d42:	f005 f98f 	bl	8008064 <HAL_GPIO_ReadPin>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d115      	bne.n	8002d78 <menu+0x28e8>
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <menu+0x29b8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <menu+0x29e0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <menu+0x29e0>)
 8002d64:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <menu+0x29e0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d902      	bls.n	8002d74 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <menu+0x29e0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d74:	f001 faf0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4832      	ldr	r0, [pc, #200]	; (8002e44 <menu+0x29b4>)
 8002d7c:	f005 f972 	bl	8008064 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d115      	bne.n	8002db2 <menu+0x2922>
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <menu+0x29b8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <menu+0x29e0>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <menu+0x29e0>)
 8002d9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <menu+0x29e0>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d902      	bls.n	8002dae <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <menu+0x29e0>)
 8002daa:	2205      	movs	r2, #5
 8002dac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dae:	f001 fad3 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db2:	2108      	movs	r1, #8
 8002db4:	4823      	ldr	r0, [pc, #140]	; (8002e44 <menu+0x29b4>)
 8002db6:	f005 f955 	bl	8008064 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <menu+0x294c>
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <menu+0x29b8>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <menu+0x29e0>)
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <menu+0x29bc>)
 8002dd4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <menu+0x29c0>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <menu+0x29c4>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b19      	cmp	r3, #25
 8002de2:	f040 80c4 	bne.w	8002f6e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <menu+0x29c8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d113      	bne.n	8002e16 <menu+0x2986>
			if(dilSecim == 0) {
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <menu+0x29a4>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <menu+0x29e4>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7fd faf8 	bl	80003f0 <lcd_print>
 8002e00:	e047      	b.n	8002e92 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <menu+0x29a4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d143      	bne.n	8002e92 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <menu+0x29e8>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fd faee 	bl	80003f0 <lcd_print>
 8002e14:	e03d      	b.n	8002e92 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <menu+0x29c8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d139      	bne.n	8002e92 <menu+0x2a02>
			if(dilSecim == 0) {
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <menu+0x29a4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d12c      	bne.n	8002e80 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <menu+0x29ec>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7fd fae0 	bl	80003f0 <lcd_print>
 8002e30:	e02f      	b.n	8002e92 <menu+0x2a02>
 8002e32:	bf00      	nop
 8002e34:	20000c6c 	.word	0x20000c6c
 8002e38:	0800cfa8 	.word	0x0800cfa8
 8002e3c:	20000c61 	.word	0x20000c61
 8002e40:	20000c24 	.word	0x20000c24
 8002e44:	40010800 	.word	0x40010800
 8002e48:	20000c7a 	.word	0x20000c7a
 8002e4c:	20000be4 	.word	0x20000be4
 8002e50:	20000c77 	.word	0x20000c77
 8002e54:	20000c4c 	.word	0x20000c4c
 8002e58:	20000c5b 	.word	0x20000c5b
 8002e5c:	0800cfe0 	.word	0x0800cfe0
 8002e60:	0800cff4 	.word	0x0800cff4
 8002e64:	0800d008 	.word	0x0800d008
 8002e68:	0800d01c 	.word	0x0800d01c
 8002e6c:	0800cc34 	.word	0x0800cc34
 8002e70:	20000c62 	.word	0x20000c62
 8002e74:	0800d030 	.word	0x0800d030
 8002e78:	0800d044 	.word	0x0800d044
 8002e7c:	0800d058 	.word	0x0800d058
			} else if(dilSecim == 1) {
 8002e80:	4b73      	ldr	r3, [pc, #460]	; (8003050 <menu+0x2bc0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d104      	bne.n	8002e92 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002e88:	4a72      	ldr	r2, [pc, #456]	; (8003054 <menu+0x2bc4>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd faaf 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr>=0) {
			if(dilSecim == 0) {
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <menu+0x2bc0>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e9a:	4a6f      	ldr	r2, [pc, #444]	; (8003058 <menu+0x2bc8>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fd faa6 	bl	80003f0 <lcd_print>
 8002ea4:	e008      	b.n	8002eb8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <menu+0x2bc0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8002eae:	4a6b      	ldr	r2, [pc, #428]	; (800305c <menu+0x2bcc>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7fd fa9c 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002eb8:	4b69      	ldr	r3, [pc, #420]	; (8003060 <menu+0x2bd0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	4969      	ldr	r1, [pc, #420]	; (8003064 <menu+0x2bd4>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f009 fad5 	bl	800c470 <itoa>
		lcd_print(2,16,snum);
 8002ec6:	4a67      	ldr	r2, [pc, #412]	; (8003064 <menu+0x2bd4>)
 8002ec8:	2110      	movs	r1, #16
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f7fd fa90 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4865      	ldr	r0, [pc, #404]	; (8003068 <menu+0x2bd8>)
 8002ed4:	f005 f8c6 	bl	8008064 <HAL_GPIO_ReadPin>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d115      	bne.n	8002f0a <menu+0x2a7a>
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <menu+0x2bdc>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <menu+0x2bd0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <menu+0x2bd0>)
 8002ef6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <menu+0x2bd0>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d902      	bls.n	8002f06 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <menu+0x2bd0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f06:	f001 fa27 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4856      	ldr	r0, [pc, #344]	; (8003068 <menu+0x2bd8>)
 8002f0e:	f005 f8a9 	bl	8008064 <HAL_GPIO_ReadPin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d115      	bne.n	8002f44 <menu+0x2ab4>
 8002f18:	4b54      	ldr	r3, [pc, #336]	; (800306c <menu+0x2bdc>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <menu+0x2bd0>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <menu+0x2bd0>)
 8002f30:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <menu+0x2bd0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <menu+0x2bd0>)
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f40:	f001 fa0a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f44:	2108      	movs	r1, #8
 8002f46:	4848      	ldr	r0, [pc, #288]	; (8003068 <menu+0x2bd8>)
 8002f48:	f005 f88c 	bl	8008064 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <menu+0x2ade>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <menu+0x2bdc>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002f60:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <menu+0x2bd0>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <menu+0x2be0>)
 8002f66:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <menu+0x2be4>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002f6e:	4b42      	ldr	r3, [pc, #264]	; (8003078 <menu+0x2be8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b1a      	cmp	r3, #26
 8002f74:	f040 80ec 	bne.w	8003150 <menu+0x2cc0>
		if(dilSecim == 0) {
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <menu+0x2bc0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8002f80:	4a3e      	ldr	r2, [pc, #248]	; (800307c <menu+0x2bec>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fd fa33 	bl	80003f0 <lcd_print>
 8002f8a:	e008      	b.n	8002f9e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <menu+0x2bc0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8002f94:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <menu+0x2bf0>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fd fa29 	bl	80003f0 <lcd_print>
		}

		if(makineCalismaTmr>99) {
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <menu+0x2bf4>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b63      	cmp	r3, #99	; 0x63
 8002fa4:	d91e      	bls.n	8002fe4 <menu+0x2b54>
			if(dilSecim == 0) {
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <menu+0x2bc0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <menu+0x2bc8>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7fd fa1c 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <menu+0x2bc0>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d104      	bne.n	8002fca <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <menu+0x2bcc>)
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f7fd fa13 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <menu+0x2bf4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	220a      	movs	r2, #10
 8002fd0:	4924      	ldr	r1, [pc, #144]	; (8003064 <menu+0x2bd4>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f009 fa4c 	bl	800c470 <itoa>
			lcd_print(2,14,snum);
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <menu+0x2bd4>)
 8002fda:	210e      	movs	r1, #14
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f7fd fa07 	bl	80003f0 <lcd_print>
 8002fe2:	e066      	b.n	80030b2 <menu+0x2c22>

		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <menu+0x2bf4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d923      	bls.n	8003034 <menu+0x2ba4>
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <menu+0x2bf4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b63      	cmp	r3, #99	; 0x63
 8002ff2:	d81f      	bhi.n	8003034 <menu+0x2ba4>
			if(dilSecim == 0) {
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <menu+0x2bc0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <menu+0x2bc8>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	2002      	movs	r0, #2
 8003002:	f7fd f9f5 	bl	80003f0 <lcd_print>
 8003006:	e008      	b.n	800301a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <menu+0x2bc0>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d104      	bne.n	800301a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <menu+0x2bcc>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f7fd f9eb 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <menu+0x2bf4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	220a      	movs	r2, #10
 8003020:	4910      	ldr	r1, [pc, #64]	; (8003064 <menu+0x2bd4>)
 8003022:	4618      	mov	r0, r3
 8003024:	f009 fa24 	bl	800c470 <itoa>
			lcd_print(2, 15, snum);
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <menu+0x2bd4>)
 800302a:	210f      	movs	r1, #15
 800302c:	2002      	movs	r0, #2
 800302e:	f7fd f9df 	bl	80003f0 <lcd_print>
		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 8003032:	e03e      	b.n	80030b2 <menu+0x2c22>
		} else if(makineCalismaTmr <= 9) {
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <menu+0x2bf4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d83a      	bhi.n	80030b2 <menu+0x2c22>
			if(dilSecim == 0) {
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <menu+0x2bc0>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d121      	bne.n	8003088 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <menu+0x2bc8>)
 8003046:	2101      	movs	r1, #1
 8003048:	2002      	movs	r0, #2
 800304a:	f7fd f9d1 	bl	80003f0 <lcd_print>
 800304e:	e024      	b.n	800309a <menu+0x2c0a>
 8003050:	20000c6c 	.word	0x20000c6c
 8003054:	0800d06c 	.word	0x0800d06c
 8003058:	0800cc34 	.word	0x0800cc34
 800305c:	0800cfa8 	.word	0x0800cfa8
 8003060:	20000c63 	.word	0x20000c63
 8003064:	20000c24 	.word	0x20000c24
 8003068:	40010800 	.word	0x40010800
 800306c:	20000c7a 	.word	0x20000c7a
 8003070:	20000be4 	.word	0x20000be4
 8003074:	20000c77 	.word	0x20000c77
 8003078:	20000c4c 	.word	0x20000c4c
 800307c:	0800d080 	.word	0x0800d080
 8003080:	0800d094 	.word	0x0800d094
 8003084:	20000c64 	.word	0x20000c64
			} else if(dilSecim == 1) {
 8003088:	4b8f      	ldr	r3, [pc, #572]	; (80032c8 <menu+0x2e38>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d104      	bne.n	800309a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003090:	4a8e      	ldr	r2, [pc, #568]	; (80032cc <menu+0x2e3c>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f7fd f9ab 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <menu+0x2e40>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	220a      	movs	r2, #10
 80030a0:	498c      	ldr	r1, [pc, #560]	; (80032d4 <menu+0x2e44>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f009 f9e4 	bl	800c470 <itoa>
			lcd_print(2, 16, snum);
 80030a8:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <menu+0x2e44>)
 80030aa:	2110      	movs	r1, #16
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7fd f99f 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2102      	movs	r1, #2
 80030b4:	4888      	ldr	r0, [pc, #544]	; (80032d8 <menu+0x2e48>)
 80030b6:	f004 ffd5 	bl	8008064 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <menu+0x2c5c>
 80030c0:	4b86      	ldr	r3, [pc, #536]	; (80032dc <menu+0x2e4c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80030ce:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <menu+0x2e40>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <menu+0x2e40>)
 80030d8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <menu+0x2e40>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2bb4      	cmp	r3, #180	; 0xb4
 80030e0:	d902      	bls.n	80030e8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80030e2:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <menu+0x2e40>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e8:	f001 f936 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ec:	2104      	movs	r1, #4
 80030ee:	487a      	ldr	r0, [pc, #488]	; (80032d8 <menu+0x2e48>)
 80030f0:	f004 ffb8 	bl	8008064 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <menu+0x2c96>
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <menu+0x2e4c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003108:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <menu+0x2e40>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <menu+0x2e40>)
 8003112:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003114:	4b6e      	ldr	r3, [pc, #440]	; (80032d0 <menu+0x2e40>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2bb5      	cmp	r3, #181	; 0xb5
 800311a:	d902      	bls.n	8003122 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <menu+0x2e40>)
 800311e:	22b4      	movs	r2, #180	; 0xb4
 8003120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003122:	f001 f919 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003126:	2108      	movs	r1, #8
 8003128:	486b      	ldr	r0, [pc, #428]	; (80032d8 <menu+0x2e48>)
 800312a:	f004 ff9b 	bl	8008064 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <menu+0x2cc0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <menu+0x2e4c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <menu+0x2e40>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <menu+0x2e50>)
 8003148:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800314a:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <menu+0x2e54>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003150:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <menu+0x2e58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b1b      	cmp	r3, #27
 8003156:	f040 8083 	bne.w	8003260 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800315a:	4a64      	ldr	r2, [pc, #400]	; (80032ec <menu+0x2e5c>)
 800315c:	2101      	movs	r1, #1
 800315e:	2001      	movs	r0, #1
 8003160:	f7fd f946 	bl	80003f0 <lcd_print>

		if(buzzer == 0) {
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <menu+0x2e60>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <menu+0x2d04>
			if(dilSecim == 0) {
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <menu+0x2e38>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <menu+0x2e64>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f7fd f939 	bl	80003f0 <lcd_print>
 800317e:	e020      	b.n	80031c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <menu+0x2e38>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d11c      	bne.n	80031c2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003188:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <menu+0x2e68>)
 800318a:	2101      	movs	r1, #1
 800318c:	2002      	movs	r0, #2
 800318e:	f7fd f92f 	bl	80003f0 <lcd_print>
 8003192:	e016      	b.n	80031c2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <menu+0x2e60>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d112      	bne.n	80031c2 <menu+0x2d32>
			if(dilSecim == 0) {
 800319c:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <menu+0x2e38>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <menu+0x2e6c>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f7fd f921 	bl	80003f0 <lcd_print>
 80031ae:	e008      	b.n	80031c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80031b0:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <menu+0x2e38>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d104      	bne.n	80031c2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <menu+0x2e70>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2002      	movs	r0, #2
 80031be:	f7fd f917 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c2:	2102      	movs	r1, #2
 80031c4:	4844      	ldr	r0, [pc, #272]	; (80032d8 <menu+0x2e48>)
 80031c6:	f004 ff4d 	bl	8008064 <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d115      	bne.n	80031fc <menu+0x2d6c>
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <menu+0x2e4c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <menu+0x2d6c>
			buzzer = buzzer + 1;
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <menu+0x2e60>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <menu+0x2e60>)
 80031e8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <menu+0x2e60>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d902      	bls.n	80031f8 <menu+0x2d68>
				buzzer = 0;
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <menu+0x2e60>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031f8:	f001 f8ae 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fc:	2104      	movs	r1, #4
 80031fe:	4836      	ldr	r0, [pc, #216]	; (80032d8 <menu+0x2e48>)
 8003200:	f004 ff30 	bl	8008064 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d115      	bne.n	8003236 <menu+0x2da6>
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <menu+0x2e4c>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <menu+0x2e60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <menu+0x2e60>)
 8003222:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <menu+0x2e60>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <menu+0x2da2>
		   		buzzer = 1;
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <menu+0x2e60>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003232:	f001 f891 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003236:	2108      	movs	r1, #8
 8003238:	4827      	ldr	r0, [pc, #156]	; (80032d8 <menu+0x2e48>)
 800323a:	f004 ff13 	bl	8008064 <HAL_GPIO_ReadPin>
 800323e:	4603      	mov	r3, r0
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <menu+0x2dd0>
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <menu+0x2e4c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f083 0301 	eor.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003252:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <menu+0x2e60>)
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <menu+0x2e50>)
 8003258:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <menu+0x2e54>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <menu+0x2e58>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	f040 80ab 	bne.w	80033c0 <menu+0x2f30>
		calismaSayModu = 0;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <menu+0x2e74>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <menu+0x2e78>)
 8003272:	2101      	movs	r1, #1
 8003274:	2001      	movs	r0, #1
 8003276:	f7fd f8bb 	bl	80003f0 <lcd_print>

		if(demoMode == 0) {
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <menu+0x2e7c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <menu+0x2e1a>
			if(dilSecim == 0) {
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <menu+0x2e38>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <menu+0x2e64>)
 800328c:	2101      	movs	r1, #1
 800328e:	2002      	movs	r0, #2
 8003290:	f7fd f8ae 	bl	80003f0 <lcd_print>
 8003294:	e045      	b.n	8003322 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <menu+0x2e38>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d141      	bne.n	8003322 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <menu+0x2e68>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	2002      	movs	r0, #2
 80032a4:	f7fd f8a4 	bl	80003f0 <lcd_print>
 80032a8:	e03b      	b.n	8003322 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <menu+0x2e7c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d137      	bne.n	8003322 <menu+0x2e92>
			if(dilSecim == 0){
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <menu+0x2e38>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12a      	bne.n	8003310 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <menu+0x2e6c>)
 80032bc:	2101      	movs	r1, #1
 80032be:	2002      	movs	r0, #2
 80032c0:	f7fd f896 	bl	80003f0 <lcd_print>
 80032c4:	e02d      	b.n	8003322 <menu+0x2e92>
 80032c6:	bf00      	nop
 80032c8:	20000c6c 	.word	0x20000c6c
 80032cc:	0800cfa8 	.word	0x0800cfa8
 80032d0:	20000c64 	.word	0x20000c64
 80032d4:	20000c24 	.word	0x20000c24
 80032d8:	40010800 	.word	0x40010800
 80032dc:	20000c7a 	.word	0x20000c7a
 80032e0:	20000be4 	.word	0x20000be4
 80032e4:	20000c77 	.word	0x20000c77
 80032e8:	20000c4c 	.word	0x20000c4c
 80032ec:	0800d0a8 	.word	0x0800d0a8
 80032f0:	20000c68 	.word	0x20000c68
 80032f4:	0800c9d0 	.word	0x0800c9d0
 80032f8:	0800c9e4 	.word	0x0800c9e4
 80032fc:	0800ca30 	.word	0x0800ca30
 8003300:	0800ca44 	.word	0x0800ca44
 8003304:	20000c6b 	.word	0x20000c6b
 8003308:	0800d0bc 	.word	0x0800d0bc
 800330c:	20000c6a 	.word	0x20000c6a
			} else if(dilSecim == 1) {
 8003310:	4b71      	ldr	r3, [pc, #452]	; (80034d8 <menu+0x3048>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d104      	bne.n	8003322 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003318:	4a70      	ldr	r2, [pc, #448]	; (80034dc <menu+0x304c>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f7fd f867 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003322:	2102      	movs	r1, #2
 8003324:	486e      	ldr	r0, [pc, #440]	; (80034e0 <menu+0x3050>)
 8003326:	f004 fe9d 	bl	8008064 <HAL_GPIO_ReadPin>
 800332a:	4603      	mov	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d115      	bne.n	800335c <menu+0x2ecc>
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <menu+0x3054>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00e      	beq.n	800335c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <menu+0x3058>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <menu+0x3058>)
 8003348:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <menu+0x3058>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d902      	bls.n	8003358 <menu+0x2ec8>
				demoMode = 0;
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <menu+0x3058>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003358:	f000 fffe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800335c:	2104      	movs	r1, #4
 800335e:	4860      	ldr	r0, [pc, #384]	; (80034e0 <menu+0x3050>)
 8003360:	f004 fe80 	bl	8008064 <HAL_GPIO_ReadPin>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d115      	bne.n	8003396 <menu+0x2f06>
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <menu+0x3054>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	f083 0301 	eor.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <menu+0x3058>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <menu+0x3058>)
 8003382:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <menu+0x3058>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <menu+0x2f02>
		   		demoMode = 1;
 800338c:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <menu+0x3058>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003392:	f000 ffe1 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003396:	2108      	movs	r1, #8
 8003398:	4851      	ldr	r0, [pc, #324]	; (80034e0 <menu+0x3050>)
 800339a:	f004 fe63 	bl	8008064 <HAL_GPIO_ReadPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10d      	bne.n	80033c0 <menu+0x2f30>
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <menu+0x3054>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <menu+0x3058>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <menu+0x305c>)
 80033b8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80033ba:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <menu+0x3060>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <menu+0x3064>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b1d      	cmp	r3, #29
 80033c6:	f040 8132 	bne.w	800362e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <menu+0x3068>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d113      	bne.n	80033fa <menu+0x2f6a>
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <menu+0x306c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <menu+0x2f6a>
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <menu+0x3070>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <menu+0x2f6a>
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <menu+0x3074>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <menu+0x2f6a>
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <menu+0x3078>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <menu+0x2f6a>
			calismaSayisiYar = 0;
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <menu+0x307c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e002      	b.n	8003400 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80033fa:	4b44      	ldr	r3, [pc, #272]	; (800350c <menu+0x307c>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <menu+0x3080>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d154      	bne.n	80034b2 <menu+0x3022>
			if(dilSecim == 0) {
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <menu+0x3048>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003410:	4a40      	ldr	r2, [pc, #256]	; (8003514 <menu+0x3084>)
 8003412:	2101      	movs	r1, #1
 8003414:	2001      	movs	r0, #1
 8003416:	f7fc ffeb 	bl	80003f0 <lcd_print>
 800341a:	e008      	b.n	800342e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <menu+0x3048>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d104      	bne.n	800342e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <menu+0x3088>)
 8003426:	2101      	movs	r1, #1
 8003428:	2001      	movs	r0, #1
 800342a:	f7fc ffe1 	bl	80003f0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <menu+0x3078>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	220a      	movs	r2, #10
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <menu+0x308c>)
 8003436:	4618      	mov	r0, r3
 8003438:	f009 f81a 	bl	800c470 <itoa>
			lcd_print(2, 12, snum);
 800343c:	4a37      	ldr	r2, [pc, #220]	; (800351c <menu+0x308c>)
 800343e:	210c      	movs	r1, #12
 8003440:	2002      	movs	r0, #2
 8003442:	f7fc ffd5 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <menu+0x3074>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	220a      	movs	r2, #10
 800344c:	4933      	ldr	r1, [pc, #204]	; (800351c <menu+0x308c>)
 800344e:	4618      	mov	r0, r3
 8003450:	f009 f80e 	bl	800c470 <itoa>
			lcd_print(2, 13, snum);
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <menu+0x308c>)
 8003456:	210d      	movs	r1, #13
 8003458:	2002      	movs	r0, #2
 800345a:	f7fc ffc9 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <menu+0x3070>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	220a      	movs	r2, #10
 8003464:	492d      	ldr	r1, [pc, #180]	; (800351c <menu+0x308c>)
 8003466:	4618      	mov	r0, r3
 8003468:	f009 f802 	bl	800c470 <itoa>
			lcd_print(2, 14, snum);
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <menu+0x308c>)
 800346e:	210e      	movs	r1, #14
 8003470:	2002      	movs	r0, #2
 8003472:	f7fc ffbd 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <menu+0x306c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	220a      	movs	r2, #10
 800347c:	4927      	ldr	r1, [pc, #156]	; (800351c <menu+0x308c>)
 800347e:	4618      	mov	r0, r3
 8003480:	f008 fff6 	bl	800c470 <itoa>
			lcd_print(2, 15, snum);
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <menu+0x308c>)
 8003486:	210f      	movs	r1, #15
 8003488:	2002      	movs	r0, #2
 800348a:	f7fc ffb1 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <menu+0x3068>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	220a      	movs	r2, #10
 8003494:	4921      	ldr	r1, [pc, #132]	; (800351c <menu+0x308c>)
 8003496:	4618      	mov	r0, r3
 8003498:	f008 ffea 	bl	800c470 <itoa>
			lcd_print(2, 16, snum);
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <menu+0x308c>)
 800349e:	2110      	movs	r1, #16
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7fc ffa5 	bl	80003f0 <lcd_print>

			lcd_print(2, 1, "           ");
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <menu+0x3090>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2002      	movs	r0, #2
 80034ac:	f7fc ffa0 	bl	80003f0 <lcd_print>
 80034b0:	e048      	b.n	8003544 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <menu+0x3080>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d144      	bne.n	8003544 <menu+0x30b4>
			if(dilSecim == 0) {
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <menu+0x3048>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d132      	bne.n	8003528 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <menu+0x3084>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f7fc ff92 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <menu+0x3094>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	2002      	movs	r0, #2
 80034d2:	f7fc ff8d 	bl	80003f0 <lcd_print>
 80034d6:	e035      	b.n	8003544 <menu+0x30b4>
 80034d8:	20000c6c 	.word	0x20000c6c
 80034dc:	0800ca44 	.word	0x0800ca44
 80034e0:	40010800 	.word	0x40010800
 80034e4:	20000c7a 	.word	0x20000c7a
 80034e8:	20000c6a 	.word	0x20000c6a
 80034ec:	20000be4 	.word	0x20000be4
 80034f0:	20000c77 	.word	0x20000c77
 80034f4:	20000c4c 	.word	0x20000c4c
 80034f8:	20000c49 	.word	0x20000c49
 80034fc:	20000c4a 	.word	0x20000c4a
 8003500:	20000910 	.word	0x20000910
 8003504:	20000911 	.word	0x20000911
 8003508:	20000c4b 	.word	0x20000c4b
 800350c:	20000c8c 	.word	0x20000c8c
 8003510:	20000c6b 	.word	0x20000c6b
 8003514:	0800d0cc 	.word	0x0800d0cc
 8003518:	0800d0e0 	.word	0x0800d0e0
 800351c:	20000c24 	.word	0x20000c24
 8003520:	0800d0f4 	.word	0x0800d0f4
 8003524:	0800d100 	.word	0x0800d100
			} else if(dilSecim == 1) {
 8003528:	4b95      	ldr	r3, [pc, #596]	; (8003780 <menu+0x32f0>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d109      	bne.n	8003544 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003530:	4a94      	ldr	r2, [pc, #592]	; (8003784 <menu+0x32f4>)
 8003532:	2101      	movs	r1, #1
 8003534:	2001      	movs	r0, #1
 8003536:	f7fc ff5b 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800353a:	4a93      	ldr	r2, [pc, #588]	; (8003788 <menu+0x32f8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f7fc ff56 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003544:	2102      	movs	r1, #2
 8003546:	4891      	ldr	r0, [pc, #580]	; (800378c <menu+0x32fc>)
 8003548:	f004 fd8c 	bl	8008064 <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d119      	bne.n	8003586 <menu+0x30f6>
 8003552:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <menu+0x3300>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <menu+0x30f6>
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <menu+0x3304>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003568:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <menu+0x3308>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b89      	ldr	r3, [pc, #548]	; (8003798 <menu+0x3308>)
 8003572:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <menu+0x3308>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d902      	bls.n	8003582 <menu+0x30f2>
				calismaSayModu = 0;
 800357c:	4b86      	ldr	r3, [pc, #536]	; (8003798 <menu+0x3308>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003582:	f000 fee9 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003586:	2104      	movs	r1, #4
 8003588:	4880      	ldr	r0, [pc, #512]	; (800378c <menu+0x32fc>)
 800358a:	f004 fd6b 	bl	8008064 <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d119      	bne.n	80035c8 <menu+0x3138>
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <menu+0x3300>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <menu+0x3138>
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <menu+0x3304>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <menu+0x3308>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <menu+0x3308>)
 80035b4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <menu+0x3308>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <menu+0x3134>
		   		calismaSayModu = 1;
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <menu+0x3308>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035c4:	f000 fec8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c8:	2108      	movs	r1, #8
 80035ca:	4870      	ldr	r0, [pc, #448]	; (800378c <menu+0x32fc>)
 80035cc:	f004 fd4a 	bl	8008064 <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d12b      	bne.n	800362e <menu+0x319e>
 80035d6:	4b6e      	ldr	r3, [pc, #440]	; (8003790 <menu+0x3300>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d024      	beq.n	800362e <menu+0x319e>
			eepromData[32] = 0;
 80035e4:	4b6d      	ldr	r3, [pc, #436]	; (800379c <menu+0x330c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <menu+0x330c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <menu+0x330c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <menu+0x330c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <menu+0x330c>)
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <menu+0x3310>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <menu+0x3314>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003610:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <menu+0x3318>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <menu+0x331c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800361c:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <menu+0x3320>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <menu+0x3308>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003628:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <menu+0x3324>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <menu+0x3328>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b1e      	cmp	r3, #30
 8003634:	d16f      	bne.n	8003716 <menu+0x3286>
		calismaSayModu = 0;
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <menu+0x3308>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <menu+0x32f0>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003644:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <menu+0x332c>)
 8003646:	2101      	movs	r1, #1
 8003648:	2001      	movs	r0, #1
 800364a:	f7fc fed1 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800364e:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <menu+0x3330>)
 8003650:	2101      	movs	r1, #1
 8003652:	2002      	movs	r0, #2
 8003654:	f7fc fecc 	bl	80003f0 <lcd_print>
 8003658:	e00d      	b.n	8003676 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <menu+0x32f0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d109      	bne.n	8003676 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <menu+0x3334>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f7fc fec2 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800366c:	4a56      	ldr	r2, [pc, #344]	; (80037c8 <menu+0x3338>)
 800366e:	2101      	movs	r1, #1
 8003670:	2002      	movs	r0, #2
 8003672:	f7fc febd 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003676:	2102      	movs	r1, #2
 8003678:	4844      	ldr	r0, [pc, #272]	; (800378c <menu+0x32fc>)
 800367a:	f004 fcf3 	bl	8008064 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <menu+0x3220>
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <menu+0x3300>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <menu+0x32f0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <menu+0x32f0>)
 800369c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <menu+0x32f0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d902      	bls.n	80036ac <menu+0x321c>
				dilSecim = 0;
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <menu+0x32f0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80036ac:	f000 fe54 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b0:	2104      	movs	r1, #4
 80036b2:	4836      	ldr	r0, [pc, #216]	; (800378c <menu+0x32fc>)
 80036b4:	f004 fcd6 	bl	8008064 <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d115      	bne.n	80036ea <menu+0x325a>
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <menu+0x3300>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <menu+0x325a>
			dilSecim = dilSecim - 1;
 80036cc:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <menu+0x32f0>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <menu+0x32f0>)
 80036d6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <menu+0x32f0>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <menu+0x3256>
		   		dilSecim = 1;
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <menu+0x32f0>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80036e6:	f000 fe37 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2108      	movs	r1, #8
 80036ec:	4827      	ldr	r0, [pc, #156]	; (800378c <menu+0x32fc>)
 80036ee:	f004 fcb9 	bl	8008064 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10e      	bne.n	8003716 <menu+0x3286>
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <menu+0x3300>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <menu+0x32f0>)
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <menu+0x330c>)
 800370c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <menu+0x3324>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <menu+0x3328>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b1f      	cmp	r3, #31
 800371c:	d12e      	bne.n	800377c <menu+0x32ec>
		if(dilSecim == 0) {
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <menu+0x32f0>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <menu+0x333c>)
 8003728:	2101      	movs	r1, #1
 800372a:	2001      	movs	r0, #1
 800372c:	f7fc fe60 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <menu+0x3340>)
 8003732:	2101      	movs	r1, #1
 8003734:	2002      	movs	r0, #2
 8003736:	f7fc fe5b 	bl	80003f0 <lcd_print>
 800373a:	e00d      	b.n	8003758 <menu+0x32c8>
		} else if(dilSecim == 1) {
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <menu+0x32f0>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d109      	bne.n	8003758 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <menu+0x3344>)
 8003746:	2101      	movs	r1, #1
 8003748:	2001      	movs	r0, #1
 800374a:	f7fc fe51 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <menu+0x3348>)
 8003750:	2101      	movs	r1, #1
 8003752:	2002      	movs	r0, #2
 8003754:	f7fc fe4c 	bl	80003f0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003758:	2108      	movs	r1, #8
 800375a:	480c      	ldr	r0, [pc, #48]	; (800378c <menu+0x32fc>)
 800375c:	f004 fc82 	bl	8008064 <HAL_GPIO_ReadPin>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10a      	bne.n	800377c <menu+0x32ec>
			menuGiris = 0;
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <menu+0x334c>)
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 800376c:	f7fc fe55 	bl	800041a <lcd_clear>
			HAL_Delay(500);
 8003770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003774:	f003 ffe8 	bl	8007748 <HAL_Delay>
			NVIC_SystemReset();
 8003778:	f7fc fe5a 	bl	8000430 <__NVIC_SystemReset>
		}
	}
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000c6c 	.word	0x20000c6c
 8003784:	0800d0e0 	.word	0x0800d0e0
 8003788:	0800d114 	.word	0x0800d114
 800378c:	40010800 	.word	0x40010800
 8003790:	20000c7a 	.word	0x20000c7a
 8003794:	20000c8c 	.word	0x20000c8c
 8003798:	20000c6b 	.word	0x20000c6b
 800379c:	20000be4 	.word	0x20000be4
 80037a0:	20000c4b 	.word	0x20000c4b
 80037a4:	20000911 	.word	0x20000911
 80037a8:	20000910 	.word	0x20000910
 80037ac:	20000c4a 	.word	0x20000c4a
 80037b0:	20000c49 	.word	0x20000c49
 80037b4:	20000c77 	.word	0x20000c77
 80037b8:	20000c4c 	.word	0x20000c4c
 80037bc:	0800d128 	.word	0x0800d128
 80037c0:	0800d13c 	.word	0x0800d13c
 80037c4:	0800d150 	.word	0x0800d150
 80037c8:	0800d164 	.word	0x0800d164
 80037cc:	0800d178 	.word	0x0800d178
 80037d0:	0800d18c 	.word	0x0800d18c
 80037d4:	0800d1a0 	.word	0x0800d1a0
 80037d8:	0800d1b4 	.word	0x0800d1b4
 80037dc:	20000c69 	.word	0x20000c69

080037e0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80037ea:	48a9      	ldr	r0, [pc, #676]	; (8003a90 <loadMenuTexts+0x2b0>)
 80037ec:	f7fc fe36 	bl	800045c <copyText>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4aa8      	ldr	r2, [pc, #672]	; (8003a94 <loadMenuTexts+0x2b4>)
 80037f4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80037f6:	48a8      	ldr	r0, [pc, #672]	; (8003a98 <loadMenuTexts+0x2b8>)
 80037f8:	f7fc fe30 	bl	800045c <copyText>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4aa7      	ldr	r2, [pc, #668]	; (8003a9c <loadMenuTexts+0x2bc>)
 8003800:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003802:	48a7      	ldr	r0, [pc, #668]	; (8003aa0 <loadMenuTexts+0x2c0>)
 8003804:	f7fc fe2a 	bl	800045c <copyText>
 8003808:	4603      	mov	r3, r0
 800380a:	4aa6      	ldr	r2, [pc, #664]	; (8003aa4 <loadMenuTexts+0x2c4>)
 800380c:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 800380e:	48a6      	ldr	r0, [pc, #664]	; (8003aa8 <loadMenuTexts+0x2c8>)
 8003810:	f7fc fe24 	bl	800045c <copyText>
 8003814:	4603      	mov	r3, r0
 8003816:	4aa5      	ldr	r2, [pc, #660]	; (8003aac <loadMenuTexts+0x2cc>)
 8003818:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800381a:	48a5      	ldr	r0, [pc, #660]	; (8003ab0 <loadMenuTexts+0x2d0>)
 800381c:	f7fc fe1e 	bl	800045c <copyText>
 8003820:	4603      	mov	r3, r0
 8003822:	4aa4      	ldr	r2, [pc, #656]	; (8003ab4 <loadMenuTexts+0x2d4>)
 8003824:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003826:	48a4      	ldr	r0, [pc, #656]	; (8003ab8 <loadMenuTexts+0x2d8>)
 8003828:	f7fc fe18 	bl	800045c <copyText>
 800382c:	4603      	mov	r3, r0
 800382e:	4aa3      	ldr	r2, [pc, #652]	; (8003abc <loadMenuTexts+0x2dc>)
 8003830:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003832:	48a3      	ldr	r0, [pc, #652]	; (8003ac0 <loadMenuTexts+0x2e0>)
 8003834:	f7fc fe12 	bl	800045c <copyText>
 8003838:	4603      	mov	r3, r0
 800383a:	4aa2      	ldr	r2, [pc, #648]	; (8003ac4 <loadMenuTexts+0x2e4>)
 800383c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 82d1 	bne.w	8003de8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003846:	48a0      	ldr	r0, [pc, #640]	; (8003ac8 <loadMenuTexts+0x2e8>)
 8003848:	f7fc fe08 	bl	800045c <copyText>
 800384c:	4603      	mov	r3, r0
 800384e:	4a9f      	ldr	r2, [pc, #636]	; (8003acc <loadMenuTexts+0x2ec>)
 8003850:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003852:	489f      	ldr	r0, [pc, #636]	; (8003ad0 <loadMenuTexts+0x2f0>)
 8003854:	f7fc fe02 	bl	800045c <copyText>
 8003858:	4603      	mov	r3, r0
 800385a:	4a9e      	ldr	r2, [pc, #632]	; (8003ad4 <loadMenuTexts+0x2f4>)
 800385c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800385e:	489e      	ldr	r0, [pc, #632]	; (8003ad8 <loadMenuTexts+0x2f8>)
 8003860:	f7fc fdfc 	bl	800045c <copyText>
 8003864:	4603      	mov	r3, r0
 8003866:	4a9d      	ldr	r2, [pc, #628]	; (8003adc <loadMenuTexts+0x2fc>)
 8003868:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800386a:	489d      	ldr	r0, [pc, #628]	; (8003ae0 <loadMenuTexts+0x300>)
 800386c:	f7fc fdf6 	bl	800045c <copyText>
 8003870:	4603      	mov	r3, r0
 8003872:	4a9c      	ldr	r2, [pc, #624]	; (8003ae4 <loadMenuTexts+0x304>)
 8003874:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003876:	489c      	ldr	r0, [pc, #624]	; (8003ae8 <loadMenuTexts+0x308>)
 8003878:	f7fc fdf0 	bl	800045c <copyText>
 800387c:	4603      	mov	r3, r0
 800387e:	4a9b      	ldr	r2, [pc, #620]	; (8003aec <loadMenuTexts+0x30c>)
 8003880:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003882:	489b      	ldr	r0, [pc, #620]	; (8003af0 <loadMenuTexts+0x310>)
 8003884:	f7fc fdea 	bl	800045c <copyText>
 8003888:	4603      	mov	r3, r0
 800388a:	4a9a      	ldr	r2, [pc, #616]	; (8003af4 <loadMenuTexts+0x314>)
 800388c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800388e:	489a      	ldr	r0, [pc, #616]	; (8003af8 <loadMenuTexts+0x318>)
 8003890:	f7fc fde4 	bl	800045c <copyText>
 8003894:	4603      	mov	r3, r0
 8003896:	4a99      	ldr	r2, [pc, #612]	; (8003afc <loadMenuTexts+0x31c>)
 8003898:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800389a:	4899      	ldr	r0, [pc, #612]	; (8003b00 <loadMenuTexts+0x320>)
 800389c:	f7fc fdde 	bl	800045c <copyText>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a98      	ldr	r2, [pc, #608]	; (8003b04 <loadMenuTexts+0x324>)
 80038a4:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 80038a6:	4898      	ldr	r0, [pc, #608]	; (8003b08 <loadMenuTexts+0x328>)
 80038a8:	f7fc fdd8 	bl	800045c <copyText>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a97      	ldr	r2, [pc, #604]	; (8003b0c <loadMenuTexts+0x32c>)
 80038b0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80038b2:	4897      	ldr	r0, [pc, #604]	; (8003b10 <loadMenuTexts+0x330>)
 80038b4:	f7fc fdd2 	bl	800045c <copyText>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4a96      	ldr	r2, [pc, #600]	; (8003b14 <loadMenuTexts+0x334>)
 80038bc:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80038be:	4896      	ldr	r0, [pc, #600]	; (8003b18 <loadMenuTexts+0x338>)
 80038c0:	f7fc fdcc 	bl	800045c <copyText>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a95      	ldr	r2, [pc, #596]	; (8003b1c <loadMenuTexts+0x33c>)
 80038c8:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80038ca:	4895      	ldr	r0, [pc, #596]	; (8003b20 <loadMenuTexts+0x340>)
 80038cc:	f7fc fdc6 	bl	800045c <copyText>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4a94      	ldr	r2, [pc, #592]	; (8003b24 <loadMenuTexts+0x344>)
 80038d4:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80038d6:	4894      	ldr	r0, [pc, #592]	; (8003b28 <loadMenuTexts+0x348>)
 80038d8:	f7fc fdc0 	bl	800045c <copyText>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a93      	ldr	r2, [pc, #588]	; (8003b2c <loadMenuTexts+0x34c>)
 80038e0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80038e2:	4893      	ldr	r0, [pc, #588]	; (8003b30 <loadMenuTexts+0x350>)
 80038e4:	f7fc fdba 	bl	800045c <copyText>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <loadMenuTexts+0x354>)
 80038ec:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80038ee:	4892      	ldr	r0, [pc, #584]	; (8003b38 <loadMenuTexts+0x358>)
 80038f0:	f7fc fdb4 	bl	800045c <copyText>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a91      	ldr	r2, [pc, #580]	; (8003b3c <loadMenuTexts+0x35c>)
 80038f8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80038fa:	4891      	ldr	r0, [pc, #580]	; (8003b40 <loadMenuTexts+0x360>)
 80038fc:	f7fc fdae 	bl	800045c <copyText>
 8003900:	4603      	mov	r3, r0
 8003902:	4a90      	ldr	r2, [pc, #576]	; (8003b44 <loadMenuTexts+0x364>)
 8003904:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003906:	4890      	ldr	r0, [pc, #576]	; (8003b48 <loadMenuTexts+0x368>)
 8003908:	f7fc fda8 	bl	800045c <copyText>
 800390c:	4603      	mov	r3, r0
 800390e:	4a8f      	ldr	r2, [pc, #572]	; (8003b4c <loadMenuTexts+0x36c>)
 8003910:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003912:	488f      	ldr	r0, [pc, #572]	; (8003b50 <loadMenuTexts+0x370>)
 8003914:	f7fc fda2 	bl	800045c <copyText>
 8003918:	4603      	mov	r3, r0
 800391a:	4a8e      	ldr	r2, [pc, #568]	; (8003b54 <loadMenuTexts+0x374>)
 800391c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 800391e:	488e      	ldr	r0, [pc, #568]	; (8003b58 <loadMenuTexts+0x378>)
 8003920:	f7fc fd9c 	bl	800045c <copyText>
 8003924:	4603      	mov	r3, r0
 8003926:	4a8d      	ldr	r2, [pc, #564]	; (8003b5c <loadMenuTexts+0x37c>)
 8003928:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 800392a:	488d      	ldr	r0, [pc, #564]	; (8003b60 <loadMenuTexts+0x380>)
 800392c:	f7fc fd96 	bl	800045c <copyText>
 8003930:	4603      	mov	r3, r0
 8003932:	4a8c      	ldr	r2, [pc, #560]	; (8003b64 <loadMenuTexts+0x384>)
 8003934:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003936:	488c      	ldr	r0, [pc, #560]	; (8003b68 <loadMenuTexts+0x388>)
 8003938:	f7fc fd90 	bl	800045c <copyText>
 800393c:	4603      	mov	r3, r0
 800393e:	4a8b      	ldr	r2, [pc, #556]	; (8003b6c <loadMenuTexts+0x38c>)
 8003940:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003942:	488b      	ldr	r0, [pc, #556]	; (8003b70 <loadMenuTexts+0x390>)
 8003944:	f7fc fd8a 	bl	800045c <copyText>
 8003948:	4603      	mov	r3, r0
 800394a:	4a8a      	ldr	r2, [pc, #552]	; (8003b74 <loadMenuTexts+0x394>)
 800394c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 800394e:	488a      	ldr	r0, [pc, #552]	; (8003b78 <loadMenuTexts+0x398>)
 8003950:	f7fc fd84 	bl	800045c <copyText>
 8003954:	4603      	mov	r3, r0
 8003956:	4a89      	ldr	r2, [pc, #548]	; (8003b7c <loadMenuTexts+0x39c>)
 8003958:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 800395a:	4889      	ldr	r0, [pc, #548]	; (8003b80 <loadMenuTexts+0x3a0>)
 800395c:	f7fc fd7e 	bl	800045c <copyText>
 8003960:	4603      	mov	r3, r0
 8003962:	4a88      	ldr	r2, [pc, #544]	; (8003b84 <loadMenuTexts+0x3a4>)
 8003964:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003966:	4888      	ldr	r0, [pc, #544]	; (8003b88 <loadMenuTexts+0x3a8>)
 8003968:	f7fc fd78 	bl	800045c <copyText>
 800396c:	4603      	mov	r3, r0
 800396e:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <loadMenuTexts+0x3ac>)
 8003970:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003972:	4887      	ldr	r0, [pc, #540]	; (8003b90 <loadMenuTexts+0x3b0>)
 8003974:	f7fc fd72 	bl	800045c <copyText>
 8003978:	4603      	mov	r3, r0
 800397a:	4a86      	ldr	r2, [pc, #536]	; (8003b94 <loadMenuTexts+0x3b4>)
 800397c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 800397e:	4886      	ldr	r0, [pc, #536]	; (8003b98 <loadMenuTexts+0x3b8>)
 8003980:	f7fc fd6c 	bl	800045c <copyText>
 8003984:	4603      	mov	r3, r0
 8003986:	4a85      	ldr	r2, [pc, #532]	; (8003b9c <loadMenuTexts+0x3bc>)
 8003988:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 800398a:	4885      	ldr	r0, [pc, #532]	; (8003ba0 <loadMenuTexts+0x3c0>)
 800398c:	f7fc fd66 	bl	800045c <copyText>
 8003990:	4603      	mov	r3, r0
 8003992:	4a84      	ldr	r2, [pc, #528]	; (8003ba4 <loadMenuTexts+0x3c4>)
 8003994:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003996:	4884      	ldr	r0, [pc, #528]	; (8003ba8 <loadMenuTexts+0x3c8>)
 8003998:	f7fc fd60 	bl	800045c <copyText>
 800399c:	4603      	mov	r3, r0
 800399e:	4a83      	ldr	r2, [pc, #524]	; (8003bac <loadMenuTexts+0x3cc>)
 80039a0:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 80039a2:	4883      	ldr	r0, [pc, #524]	; (8003bb0 <loadMenuTexts+0x3d0>)
 80039a4:	f7fc fd5a 	bl	800045c <copyText>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a82      	ldr	r2, [pc, #520]	; (8003bb4 <loadMenuTexts+0x3d4>)
 80039ac:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 80039ae:	4882      	ldr	r0, [pc, #520]	; (8003bb8 <loadMenuTexts+0x3d8>)
 80039b0:	f7fc fd54 	bl	800045c <copyText>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a81      	ldr	r2, [pc, #516]	; (8003bbc <loadMenuTexts+0x3dc>)
 80039b8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 80039ba:	4881      	ldr	r0, [pc, #516]	; (8003bc0 <loadMenuTexts+0x3e0>)
 80039bc:	f7fc fd4e 	bl	800045c <copyText>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <loadMenuTexts+0x3e4>)
 80039c4:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 80039c6:	4880      	ldr	r0, [pc, #512]	; (8003bc8 <loadMenuTexts+0x3e8>)
 80039c8:	f7fc fd48 	bl	800045c <copyText>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <loadMenuTexts+0x3ec>)
 80039d0:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 80039d2:	487f      	ldr	r0, [pc, #508]	; (8003bd0 <loadMenuTexts+0x3f0>)
 80039d4:	f7fc fd42 	bl	800045c <copyText>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a7e      	ldr	r2, [pc, #504]	; (8003bd4 <loadMenuTexts+0x3f4>)
 80039dc:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 80039de:	487e      	ldr	r0, [pc, #504]	; (8003bd8 <loadMenuTexts+0x3f8>)
 80039e0:	f7fc fd3c 	bl	800045c <copyText>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <loadMenuTexts+0x3fc>)
 80039e8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 80039ea:	487d      	ldr	r0, [pc, #500]	; (8003be0 <loadMenuTexts+0x400>)
 80039ec:	f7fc fd36 	bl	800045c <copyText>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <loadMenuTexts+0x404>)
 80039f4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 80039f6:	487c      	ldr	r0, [pc, #496]	; (8003be8 <loadMenuTexts+0x408>)
 80039f8:	f7fc fd30 	bl	800045c <copyText>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a7b      	ldr	r2, [pc, #492]	; (8003bec <loadMenuTexts+0x40c>)
 8003a00:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003a02:	487b      	ldr	r0, [pc, #492]	; (8003bf0 <loadMenuTexts+0x410>)
 8003a04:	f7fc fd2a 	bl	800045c <copyText>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <loadMenuTexts+0x414>)
 8003a0c:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003a0e:	487a      	ldr	r0, [pc, #488]	; (8003bf8 <loadMenuTexts+0x418>)
 8003a10:	f7fc fd24 	bl	800045c <copyText>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a79      	ldr	r2, [pc, #484]	; (8003bfc <loadMenuTexts+0x41c>)
 8003a18:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003a1a:	4879      	ldr	r0, [pc, #484]	; (8003c00 <loadMenuTexts+0x420>)
 8003a1c:	f7fc fd1e 	bl	800045c <copyText>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a78      	ldr	r2, [pc, #480]	; (8003c04 <loadMenuTexts+0x424>)
 8003a24:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003a26:	4878      	ldr	r0, [pc, #480]	; (8003c08 <loadMenuTexts+0x428>)
 8003a28:	f7fc fd18 	bl	800045c <copyText>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a77      	ldr	r2, [pc, #476]	; (8003c0c <loadMenuTexts+0x42c>)
 8003a30:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003a32:	4877      	ldr	r0, [pc, #476]	; (8003c10 <loadMenuTexts+0x430>)
 8003a34:	f7fc fd12 	bl	800045c <copyText>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a76      	ldr	r2, [pc, #472]	; (8003c14 <loadMenuTexts+0x434>)
 8003a3c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003a3e:	4876      	ldr	r0, [pc, #472]	; (8003c18 <loadMenuTexts+0x438>)
 8003a40:	f7fc fd0c 	bl	800045c <copyText>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <loadMenuTexts+0x43c>)
 8003a48:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003a4a:	4875      	ldr	r0, [pc, #468]	; (8003c20 <loadMenuTexts+0x440>)
 8003a4c:	f7fc fd06 	bl	800045c <copyText>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a74      	ldr	r2, [pc, #464]	; (8003c24 <loadMenuTexts+0x444>)
 8003a54:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003a56:	4874      	ldr	r0, [pc, #464]	; (8003c28 <loadMenuTexts+0x448>)
 8003a58:	f7fc fd00 	bl	800045c <copyText>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a73      	ldr	r2, [pc, #460]	; (8003c2c <loadMenuTexts+0x44c>)
 8003a60:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003a62:	4873      	ldr	r0, [pc, #460]	; (8003c30 <loadMenuTexts+0x450>)
 8003a64:	f7fc fcfa 	bl	800045c <copyText>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a72      	ldr	r2, [pc, #456]	; (8003c34 <loadMenuTexts+0x454>)
 8003a6c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003a6e:	4872      	ldr	r0, [pc, #456]	; (8003c38 <loadMenuTexts+0x458>)
 8003a70:	f7fc fcf4 	bl	800045c <copyText>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a71      	ldr	r2, [pc, #452]	; (8003c3c <loadMenuTexts+0x45c>)
 8003a78:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003a7a:	4871      	ldr	r0, [pc, #452]	; (8003c40 <loadMenuTexts+0x460>)
 8003a7c:	f7fc fcee 	bl	800045c <copyText>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <loadMenuTexts+0x464>)
 8003a84:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003a86:	4870      	ldr	r0, [pc, #448]	; (8003c48 <loadMenuTexts+0x468>)
 8003a88:	f7fc fce8 	bl	800045c <copyText>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	e0dd      	b.n	8003c4c <loadMenuTexts+0x46c>
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000cb0 	.word	0x20000cb0
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	20000cb4 	.word	0x20000cb4
 8003aa0:	20000020 	.word	0x20000020
 8003aa4:	20000d0c 	.word	0x20000d0c
 8003aa8:	20000030 	.word	0x20000030
 8003aac:	20000d3c 	.word	0x20000d3c
 8003ab0:	20000040 	.word	0x20000040
 8003ab4:	20000d44 	.word	0x20000d44
 8003ab8:	20000050 	.word	0x20000050
 8003abc:	20000dbc 	.word	0x20000dbc
 8003ac0:	20000060 	.word	0x20000060
 8003ac4:	20000dc0 	.word	0x20000dc0
 8003ac8:	20000070 	.word	0x20000070
 8003acc:	20000cb8 	.word	0x20000cb8
 8003ad0:	20000080 	.word	0x20000080
 8003ad4:	20000cbc 	.word	0x20000cbc
 8003ad8:	20000090 	.word	0x20000090
 8003adc:	20000cc0 	.word	0x20000cc0
 8003ae0:	200000a0 	.word	0x200000a0
 8003ae4:	20000cc4 	.word	0x20000cc4
 8003ae8:	200000b0 	.word	0x200000b0
 8003aec:	20000cc8 	.word	0x20000cc8
 8003af0:	200000c0 	.word	0x200000c0
 8003af4:	20000ccc 	.word	0x20000ccc
 8003af8:	200000d0 	.word	0x200000d0
 8003afc:	20000cd0 	.word	0x20000cd0
 8003b00:	200000e0 	.word	0x200000e0
 8003b04:	20000cd4 	.word	0x20000cd4
 8003b08:	200000f0 	.word	0x200000f0
 8003b0c:	20000cd8 	.word	0x20000cd8
 8003b10:	20000100 	.word	0x20000100
 8003b14:	20000cdc 	.word	0x20000cdc
 8003b18:	20000110 	.word	0x20000110
 8003b1c:	20000ce0 	.word	0x20000ce0
 8003b20:	20000120 	.word	0x20000120
 8003b24:	20000ce4 	.word	0x20000ce4
 8003b28:	20000130 	.word	0x20000130
 8003b2c:	20000ce8 	.word	0x20000ce8
 8003b30:	20000140 	.word	0x20000140
 8003b34:	20000cec 	.word	0x20000cec
 8003b38:	20000150 	.word	0x20000150
 8003b3c:	20000cf0 	.word	0x20000cf0
 8003b40:	20000160 	.word	0x20000160
 8003b44:	20000cf4 	.word	0x20000cf4
 8003b48:	20000170 	.word	0x20000170
 8003b4c:	20000cf8 	.word	0x20000cf8
 8003b50:	20000180 	.word	0x20000180
 8003b54:	20000cfc 	.word	0x20000cfc
 8003b58:	20000190 	.word	0x20000190
 8003b5c:	20000d00 	.word	0x20000d00
 8003b60:	200001a0 	.word	0x200001a0
 8003b64:	20000d04 	.word	0x20000d04
 8003b68:	200001b0 	.word	0x200001b0
 8003b6c:	20000d08 	.word	0x20000d08
 8003b70:	200001c0 	.word	0x200001c0
 8003b74:	20000d10 	.word	0x20000d10
 8003b78:	200001d0 	.word	0x200001d0
 8003b7c:	20000d14 	.word	0x20000d14
 8003b80:	200001e0 	.word	0x200001e0
 8003b84:	20000d18 	.word	0x20000d18
 8003b88:	200001f0 	.word	0x200001f0
 8003b8c:	20000d1c 	.word	0x20000d1c
 8003b90:	20000200 	.word	0x20000200
 8003b94:	20000d20 	.word	0x20000d20
 8003b98:	20000210 	.word	0x20000210
 8003b9c:	20000d24 	.word	0x20000d24
 8003ba0:	20000220 	.word	0x20000220
 8003ba4:	20000d28 	.word	0x20000d28
 8003ba8:	20000230 	.word	0x20000230
 8003bac:	20000d2c 	.word	0x20000d2c
 8003bb0:	20000240 	.word	0x20000240
 8003bb4:	20000d30 	.word	0x20000d30
 8003bb8:	20000250 	.word	0x20000250
 8003bbc:	20000d34 	.word	0x20000d34
 8003bc0:	20000260 	.word	0x20000260
 8003bc4:	20000d38 	.word	0x20000d38
 8003bc8:	20000270 	.word	0x20000270
 8003bcc:	20000d40 	.word	0x20000d40
 8003bd0:	20000280 	.word	0x20000280
 8003bd4:	20000d48 	.word	0x20000d48
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	20000d4c 	.word	0x20000d4c
 8003be0:	200002a0 	.word	0x200002a0
 8003be4:	20000d50 	.word	0x20000d50
 8003be8:	200002b0 	.word	0x200002b0
 8003bec:	20000d54 	.word	0x20000d54
 8003bf0:	200002c0 	.word	0x200002c0
 8003bf4:	20000d58 	.word	0x20000d58
 8003bf8:	200002d0 	.word	0x200002d0
 8003bfc:	20000d5c 	.word	0x20000d5c
 8003c00:	200002e0 	.word	0x200002e0
 8003c04:	20000d60 	.word	0x20000d60
 8003c08:	200002f0 	.word	0x200002f0
 8003c0c:	20000d64 	.word	0x20000d64
 8003c10:	20000300 	.word	0x20000300
 8003c14:	20000d68 	.word	0x20000d68
 8003c18:	20000310 	.word	0x20000310
 8003c1c:	20000d6c 	.word	0x20000d6c
 8003c20:	20000320 	.word	0x20000320
 8003c24:	20000d70 	.word	0x20000d70
 8003c28:	20000330 	.word	0x20000330
 8003c2c:	20000d74 	.word	0x20000d74
 8003c30:	20000340 	.word	0x20000340
 8003c34:	20000d78 	.word	0x20000d78
 8003c38:	20000350 	.word	0x20000350
 8003c3c:	20000d7c 	.word	0x20000d7c
 8003c40:	20000360 	.word	0x20000360
 8003c44:	20000d80 	.word	0x20000d80
 8003c48:	20000370 	.word	0x20000370
 8003c4c:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <loadMenuTexts+0x564>)
 8003c4e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003c50:	483d      	ldr	r0, [pc, #244]	; (8003d48 <loadMenuTexts+0x568>)
 8003c52:	f7fc fc03 	bl	800045c <copyText>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <loadMenuTexts+0x56c>)
 8003c5a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003c5c:	483c      	ldr	r0, [pc, #240]	; (8003d50 <loadMenuTexts+0x570>)
 8003c5e:	f7fc fbfd 	bl	800045c <copyText>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <loadMenuTexts+0x574>)
 8003c66:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003c68:	483b      	ldr	r0, [pc, #236]	; (8003d58 <loadMenuTexts+0x578>)
 8003c6a:	f7fc fbf7 	bl	800045c <copyText>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <loadMenuTexts+0x57c>)
 8003c72:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003c74:	483a      	ldr	r0, [pc, #232]	; (8003d60 <loadMenuTexts+0x580>)
 8003c76:	f7fc fbf1 	bl	800045c <copyText>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4a39      	ldr	r2, [pc, #228]	; (8003d64 <loadMenuTexts+0x584>)
 8003c7e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003c80:	4839      	ldr	r0, [pc, #228]	; (8003d68 <loadMenuTexts+0x588>)
 8003c82:	f7fc fbeb 	bl	800045c <copyText>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <loadMenuTexts+0x58c>)
 8003c8a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003c8c:	4838      	ldr	r0, [pc, #224]	; (8003d70 <loadMenuTexts+0x590>)
 8003c8e:	f7fc fbe5 	bl	800045c <copyText>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <loadMenuTexts+0x594>)
 8003c96:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003c98:	4837      	ldr	r0, [pc, #220]	; (8003d78 <loadMenuTexts+0x598>)
 8003c9a:	f7fc fbdf 	bl	800045c <copyText>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4a36      	ldr	r2, [pc, #216]	; (8003d7c <loadMenuTexts+0x59c>)
 8003ca2:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003ca4:	4836      	ldr	r0, [pc, #216]	; (8003d80 <loadMenuTexts+0x5a0>)
 8003ca6:	f7fc fbd9 	bl	800045c <copyText>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <loadMenuTexts+0x5a4>)
 8003cae:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003cb0:	4835      	ldr	r0, [pc, #212]	; (8003d88 <loadMenuTexts+0x5a8>)
 8003cb2:	f7fc fbd3 	bl	800045c <copyText>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a34      	ldr	r2, [pc, #208]	; (8003d8c <loadMenuTexts+0x5ac>)
 8003cba:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003cbc:	4834      	ldr	r0, [pc, #208]	; (8003d90 <loadMenuTexts+0x5b0>)
 8003cbe:	f7fc fbcd 	bl	800045c <copyText>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <loadMenuTexts+0x5b4>)
 8003cc6:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003cc8:	4833      	ldr	r0, [pc, #204]	; (8003d98 <loadMenuTexts+0x5b8>)
 8003cca:	f7fc fbc7 	bl	800045c <copyText>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <loadMenuTexts+0x5bc>)
 8003cd2:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <loadMenuTexts+0x5c0>)
 8003cd6:	f7fc fbc1 	bl	800045c <copyText>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <loadMenuTexts+0x5c4>)
 8003cde:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003ce0:	4831      	ldr	r0, [pc, #196]	; (8003da8 <loadMenuTexts+0x5c8>)
 8003ce2:	f7fc fbbb 	bl	800045c <copyText>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a30      	ldr	r2, [pc, #192]	; (8003dac <loadMenuTexts+0x5cc>)
 8003cea:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003cec:	4830      	ldr	r0, [pc, #192]	; (8003db0 <loadMenuTexts+0x5d0>)
 8003cee:	f7fc fbb5 	bl	800045c <copyText>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <loadMenuTexts+0x5d4>)
 8003cf6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003cf8:	482f      	ldr	r0, [pc, #188]	; (8003db8 <loadMenuTexts+0x5d8>)
 8003cfa:	f7fc fbaf 	bl	800045c <copyText>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a2e      	ldr	r2, [pc, #184]	; (8003dbc <loadMenuTexts+0x5dc>)
 8003d02:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003d04:	482e      	ldr	r0, [pc, #184]	; (8003dc0 <loadMenuTexts+0x5e0>)
 8003d06:	f7fc fba9 	bl	800045c <copyText>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <loadMenuTexts+0x5e4>)
 8003d0e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003d10:	482d      	ldr	r0, [pc, #180]	; (8003dc8 <loadMenuTexts+0x5e8>)
 8003d12:	f7fc fba3 	bl	800045c <copyText>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <loadMenuTexts+0x5ec>)
 8003d1a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003d1c:	482c      	ldr	r0, [pc, #176]	; (8003dd0 <loadMenuTexts+0x5f0>)
 8003d1e:	f7fc fb9d 	bl	800045c <copyText>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <loadMenuTexts+0x5f4>)
 8003d26:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003d28:	482b      	ldr	r0, [pc, #172]	; (8003dd8 <loadMenuTexts+0x5f8>)
 8003d2a:	f7fc fb97 	bl	800045c <copyText>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <loadMenuTexts+0x5fc>)
 8003d32:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003d34:	482a      	ldr	r0, [pc, #168]	; (8003de0 <loadMenuTexts+0x600>)
 8003d36:	f7fc fb91 	bl	800045c <copyText>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <loadMenuTexts+0x604>)
 8003d3e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003d40:	e2d3      	b.n	80042ea <loadMenuTexts+0xb0a>
 8003d42:	bf00      	nop
 8003d44:	20000d84 	.word	0x20000d84
 8003d48:	20000380 	.word	0x20000380
 8003d4c:	20000d88 	.word	0x20000d88
 8003d50:	20000390 	.word	0x20000390
 8003d54:	20000d8c 	.word	0x20000d8c
 8003d58:	200003a0 	.word	0x200003a0
 8003d5c:	20000d90 	.word	0x20000d90
 8003d60:	200003b0 	.word	0x200003b0
 8003d64:	20000d94 	.word	0x20000d94
 8003d68:	200003c0 	.word	0x200003c0
 8003d6c:	20000d98 	.word	0x20000d98
 8003d70:	200003d0 	.word	0x200003d0
 8003d74:	20000d9c 	.word	0x20000d9c
 8003d78:	200003e0 	.word	0x200003e0
 8003d7c:	20000da0 	.word	0x20000da0
 8003d80:	200003f0 	.word	0x200003f0
 8003d84:	20000da4 	.word	0x20000da4
 8003d88:	20000400 	.word	0x20000400
 8003d8c:	20000da8 	.word	0x20000da8
 8003d90:	20000410 	.word	0x20000410
 8003d94:	20000dac 	.word	0x20000dac
 8003d98:	20000420 	.word	0x20000420
 8003d9c:	20000db0 	.word	0x20000db0
 8003da0:	20000430 	.word	0x20000430
 8003da4:	20000db4 	.word	0x20000db4
 8003da8:	20000440 	.word	0x20000440
 8003dac:	20000db8 	.word	0x20000db8
 8003db0:	20000450 	.word	0x20000450
 8003db4:	20000dc4 	.word	0x20000dc4
 8003db8:	20000460 	.word	0x20000460
 8003dbc:	20000dc8 	.word	0x20000dc8
 8003dc0:	20000470 	.word	0x20000470
 8003dc4:	20000dcc 	.word	0x20000dcc
 8003dc8:	20000480 	.word	0x20000480
 8003dcc:	20000dd0 	.word	0x20000dd0
 8003dd0:	20000490 	.word	0x20000490
 8003dd4:	20000dd4 	.word	0x20000dd4
 8003dd8:	200004a0 	.word	0x200004a0
 8003ddc:	20000dd8 	.word	0x20000dd8
 8003de0:	200004b0 	.word	0x200004b0
 8003de4:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003de8:	48a9      	ldr	r0, [pc, #676]	; (8004090 <loadMenuTexts+0x8b0>)
 8003dea:	f7fc fb37 	bl	800045c <copyText>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4aa8      	ldr	r2, [pc, #672]	; (8004094 <loadMenuTexts+0x8b4>)
 8003df2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003df4:	48a8      	ldr	r0, [pc, #672]	; (8004098 <loadMenuTexts+0x8b8>)
 8003df6:	f7fc fb31 	bl	800045c <copyText>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4aa7      	ldr	r2, [pc, #668]	; (800409c <loadMenuTexts+0x8bc>)
 8003dfe:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003e00:	48a7      	ldr	r0, [pc, #668]	; (80040a0 <loadMenuTexts+0x8c0>)
 8003e02:	f7fc fb2b 	bl	800045c <copyText>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4aa6      	ldr	r2, [pc, #664]	; (80040a4 <loadMenuTexts+0x8c4>)
 8003e0a:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003e0c:	48a6      	ldr	r0, [pc, #664]	; (80040a8 <loadMenuTexts+0x8c8>)
 8003e0e:	f7fc fb25 	bl	800045c <copyText>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4aa5      	ldr	r2, [pc, #660]	; (80040ac <loadMenuTexts+0x8cc>)
 8003e16:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003e18:	48a5      	ldr	r0, [pc, #660]	; (80040b0 <loadMenuTexts+0x8d0>)
 8003e1a:	f7fc fb1f 	bl	800045c <copyText>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4aa4      	ldr	r2, [pc, #656]	; (80040b4 <loadMenuTexts+0x8d4>)
 8003e22:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003e24:	48a4      	ldr	r0, [pc, #656]	; (80040b8 <loadMenuTexts+0x8d8>)
 8003e26:	f7fc fb19 	bl	800045c <copyText>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4aa3      	ldr	r2, [pc, #652]	; (80040bc <loadMenuTexts+0x8dc>)
 8003e2e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003e30:	48a3      	ldr	r0, [pc, #652]	; (80040c0 <loadMenuTexts+0x8e0>)
 8003e32:	f7fc fb13 	bl	800045c <copyText>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4aa2      	ldr	r2, [pc, #648]	; (80040c4 <loadMenuTexts+0x8e4>)
 8003e3a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003e3c:	48a2      	ldr	r0, [pc, #648]	; (80040c8 <loadMenuTexts+0x8e8>)
 8003e3e:	f7fc fb0d 	bl	800045c <copyText>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4aa1      	ldr	r2, [pc, #644]	; (80040cc <loadMenuTexts+0x8ec>)
 8003e46:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003e48:	48a1      	ldr	r0, [pc, #644]	; (80040d0 <loadMenuTexts+0x8f0>)
 8003e4a:	f7fc fb07 	bl	800045c <copyText>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4aa0      	ldr	r2, [pc, #640]	; (80040d4 <loadMenuTexts+0x8f4>)
 8003e52:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003e54:	48a0      	ldr	r0, [pc, #640]	; (80040d8 <loadMenuTexts+0x8f8>)
 8003e56:	f7fc fb01 	bl	800045c <copyText>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a9f      	ldr	r2, [pc, #636]	; (80040dc <loadMenuTexts+0x8fc>)
 8003e5e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003e60:	489f      	ldr	r0, [pc, #636]	; (80040e0 <loadMenuTexts+0x900>)
 8003e62:	f7fc fafb 	bl	800045c <copyText>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4a9e      	ldr	r2, [pc, #632]	; (80040e4 <loadMenuTexts+0x904>)
 8003e6a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003e6c:	489e      	ldr	r0, [pc, #632]	; (80040e8 <loadMenuTexts+0x908>)
 8003e6e:	f7fc faf5 	bl	800045c <copyText>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4a9d      	ldr	r2, [pc, #628]	; (80040ec <loadMenuTexts+0x90c>)
 8003e76:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003e78:	489d      	ldr	r0, [pc, #628]	; (80040f0 <loadMenuTexts+0x910>)
 8003e7a:	f7fc faef 	bl	800045c <copyText>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4a9c      	ldr	r2, [pc, #624]	; (80040f4 <loadMenuTexts+0x914>)
 8003e82:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003e84:	489c      	ldr	r0, [pc, #624]	; (80040f8 <loadMenuTexts+0x918>)
 8003e86:	f7fc fae9 	bl	800045c <copyText>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4a9b      	ldr	r2, [pc, #620]	; (80040fc <loadMenuTexts+0x91c>)
 8003e8e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003e90:	489b      	ldr	r0, [pc, #620]	; (8004100 <loadMenuTexts+0x920>)
 8003e92:	f7fc fae3 	bl	800045c <copyText>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4a9a      	ldr	r2, [pc, #616]	; (8004104 <loadMenuTexts+0x924>)
 8003e9a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003e9c:	489a      	ldr	r0, [pc, #616]	; (8004108 <loadMenuTexts+0x928>)
 8003e9e:	f7fc fadd 	bl	800045c <copyText>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4a99      	ldr	r2, [pc, #612]	; (800410c <loadMenuTexts+0x92c>)
 8003ea6:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003ea8:	4899      	ldr	r0, [pc, #612]	; (8004110 <loadMenuTexts+0x930>)
 8003eaa:	f7fc fad7 	bl	800045c <copyText>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4a98      	ldr	r2, [pc, #608]	; (8004114 <loadMenuTexts+0x934>)
 8003eb2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003eb4:	4898      	ldr	r0, [pc, #608]	; (8004118 <loadMenuTexts+0x938>)
 8003eb6:	f7fc fad1 	bl	800045c <copyText>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4a97      	ldr	r2, [pc, #604]	; (800411c <loadMenuTexts+0x93c>)
 8003ebe:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003ec0:	4897      	ldr	r0, [pc, #604]	; (8004120 <loadMenuTexts+0x940>)
 8003ec2:	f7fc facb 	bl	800045c <copyText>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a96      	ldr	r2, [pc, #600]	; (8004124 <loadMenuTexts+0x944>)
 8003eca:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003ecc:	4896      	ldr	r0, [pc, #600]	; (8004128 <loadMenuTexts+0x948>)
 8003ece:	f7fc fac5 	bl	800045c <copyText>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4a95      	ldr	r2, [pc, #596]	; (800412c <loadMenuTexts+0x94c>)
 8003ed6:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003ed8:	4895      	ldr	r0, [pc, #596]	; (8004130 <loadMenuTexts+0x950>)
 8003eda:	f7fc fabf 	bl	800045c <copyText>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a94      	ldr	r2, [pc, #592]	; (8004134 <loadMenuTexts+0x954>)
 8003ee2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003ee4:	4894      	ldr	r0, [pc, #592]	; (8004138 <loadMenuTexts+0x958>)
 8003ee6:	f7fc fab9 	bl	800045c <copyText>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4a93      	ldr	r2, [pc, #588]	; (800413c <loadMenuTexts+0x95c>)
 8003eee:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003ef0:	4893      	ldr	r0, [pc, #588]	; (8004140 <loadMenuTexts+0x960>)
 8003ef2:	f7fc fab3 	bl	800045c <copyText>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4a92      	ldr	r2, [pc, #584]	; (8004144 <loadMenuTexts+0x964>)
 8003efa:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003efc:	4892      	ldr	r0, [pc, #584]	; (8004148 <loadMenuTexts+0x968>)
 8003efe:	f7fc faad 	bl	800045c <copyText>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4a91      	ldr	r2, [pc, #580]	; (800414c <loadMenuTexts+0x96c>)
 8003f06:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003f08:	4891      	ldr	r0, [pc, #580]	; (8004150 <loadMenuTexts+0x970>)
 8003f0a:	f7fc faa7 	bl	800045c <copyText>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a90      	ldr	r2, [pc, #576]	; (8004154 <loadMenuTexts+0x974>)
 8003f12:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8003f14:	4890      	ldr	r0, [pc, #576]	; (8004158 <loadMenuTexts+0x978>)
 8003f16:	f7fc faa1 	bl	800045c <copyText>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a8f      	ldr	r2, [pc, #572]	; (800415c <loadMenuTexts+0x97c>)
 8003f1e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8003f20:	488f      	ldr	r0, [pc, #572]	; (8004160 <loadMenuTexts+0x980>)
 8003f22:	f7fc fa9b 	bl	800045c <copyText>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <loadMenuTexts+0x984>)
 8003f2a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8003f2c:	488e      	ldr	r0, [pc, #568]	; (8004168 <loadMenuTexts+0x988>)
 8003f2e:	f7fc fa95 	bl	800045c <copyText>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a8d      	ldr	r2, [pc, #564]	; (800416c <loadMenuTexts+0x98c>)
 8003f36:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8003f38:	488d      	ldr	r0, [pc, #564]	; (8004170 <loadMenuTexts+0x990>)
 8003f3a:	f7fc fa8f 	bl	800045c <copyText>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a8c      	ldr	r2, [pc, #560]	; (8004174 <loadMenuTexts+0x994>)
 8003f42:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8003f44:	488c      	ldr	r0, [pc, #560]	; (8004178 <loadMenuTexts+0x998>)
 8003f46:	f7fc fa89 	bl	800045c <copyText>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a8b      	ldr	r2, [pc, #556]	; (800417c <loadMenuTexts+0x99c>)
 8003f4e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8003f50:	488b      	ldr	r0, [pc, #556]	; (8004180 <loadMenuTexts+0x9a0>)
 8003f52:	f7fc fa83 	bl	800045c <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a8a      	ldr	r2, [pc, #552]	; (8004184 <loadMenuTexts+0x9a4>)
 8003f5a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8003f5c:	488a      	ldr	r0, [pc, #552]	; (8004188 <loadMenuTexts+0x9a8>)
 8003f5e:	f7fc fa7d 	bl	800045c <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a89      	ldr	r2, [pc, #548]	; (800418c <loadMenuTexts+0x9ac>)
 8003f66:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8003f68:	4889      	ldr	r0, [pc, #548]	; (8004190 <loadMenuTexts+0x9b0>)
 8003f6a:	f7fc fa77 	bl	800045c <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a88      	ldr	r2, [pc, #544]	; (8004194 <loadMenuTexts+0x9b4>)
 8003f72:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8003f74:	4888      	ldr	r0, [pc, #544]	; (8004198 <loadMenuTexts+0x9b8>)
 8003f76:	f7fc fa71 	bl	800045c <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a87      	ldr	r2, [pc, #540]	; (800419c <loadMenuTexts+0x9bc>)
 8003f7e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8003f80:	4887      	ldr	r0, [pc, #540]	; (80041a0 <loadMenuTexts+0x9c0>)
 8003f82:	f7fc fa6b 	bl	800045c <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a86      	ldr	r2, [pc, #536]	; (80041a4 <loadMenuTexts+0x9c4>)
 8003f8a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8003f8c:	4886      	ldr	r0, [pc, #536]	; (80041a8 <loadMenuTexts+0x9c8>)
 8003f8e:	f7fc fa65 	bl	800045c <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a85      	ldr	r2, [pc, #532]	; (80041ac <loadMenuTexts+0x9cc>)
 8003f96:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8003f98:	4885      	ldr	r0, [pc, #532]	; (80041b0 <loadMenuTexts+0x9d0>)
 8003f9a:	f7fc fa5f 	bl	800045c <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a84      	ldr	r2, [pc, #528]	; (80041b4 <loadMenuTexts+0x9d4>)
 8003fa2:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8003fa4:	4884      	ldr	r0, [pc, #528]	; (80041b8 <loadMenuTexts+0x9d8>)
 8003fa6:	f7fc fa59 	bl	800045c <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a83      	ldr	r2, [pc, #524]	; (80041bc <loadMenuTexts+0x9dc>)
 8003fae:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8003fb0:	4883      	ldr	r0, [pc, #524]	; (80041c0 <loadMenuTexts+0x9e0>)
 8003fb2:	f7fc fa53 	bl	800045c <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a82      	ldr	r2, [pc, #520]	; (80041c4 <loadMenuTexts+0x9e4>)
 8003fba:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8003fbc:	4882      	ldr	r0, [pc, #520]	; (80041c8 <loadMenuTexts+0x9e8>)
 8003fbe:	f7fc fa4d 	bl	800045c <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a81      	ldr	r2, [pc, #516]	; (80041cc <loadMenuTexts+0x9ec>)
 8003fc6:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8003fc8:	4881      	ldr	r0, [pc, #516]	; (80041d0 <loadMenuTexts+0x9f0>)
 8003fca:	f7fc fa47 	bl	800045c <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a80      	ldr	r2, [pc, #512]	; (80041d4 <loadMenuTexts+0x9f4>)
 8003fd2:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8003fd4:	4880      	ldr	r0, [pc, #512]	; (80041d8 <loadMenuTexts+0x9f8>)
 8003fd6:	f7fc fa41 	bl	800045c <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	; (80041dc <loadMenuTexts+0x9fc>)
 8003fde:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8003fe0:	487f      	ldr	r0, [pc, #508]	; (80041e0 <loadMenuTexts+0xa00>)
 8003fe2:	f7fc fa3b 	bl	800045c <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a7e      	ldr	r2, [pc, #504]	; (80041e4 <loadMenuTexts+0xa04>)
 8003fea:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8003fec:	487e      	ldr	r0, [pc, #504]	; (80041e8 <loadMenuTexts+0xa08>)
 8003fee:	f7fc fa35 	bl	800045c <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a7d      	ldr	r2, [pc, #500]	; (80041ec <loadMenuTexts+0xa0c>)
 8003ff6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8003ff8:	487d      	ldr	r0, [pc, #500]	; (80041f0 <loadMenuTexts+0xa10>)
 8003ffa:	f7fc fa2f 	bl	800045c <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <loadMenuTexts+0xa14>)
 8004002:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8004004:	487c      	ldr	r0, [pc, #496]	; (80041f8 <loadMenuTexts+0xa18>)
 8004006:	f7fc fa29 	bl	800045c <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a7b      	ldr	r2, [pc, #492]	; (80041fc <loadMenuTexts+0xa1c>)
 800400e:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004010:	487b      	ldr	r0, [pc, #492]	; (8004200 <loadMenuTexts+0xa20>)
 8004012:	f7fc fa23 	bl	800045c <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <loadMenuTexts+0xa24>)
 800401a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800401c:	487a      	ldr	r0, [pc, #488]	; (8004208 <loadMenuTexts+0xa28>)
 800401e:	f7fc fa1d 	bl	800045c <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a79      	ldr	r2, [pc, #484]	; (800420c <loadMenuTexts+0xa2c>)
 8004026:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004028:	4879      	ldr	r0, [pc, #484]	; (8004210 <loadMenuTexts+0xa30>)
 800402a:	f7fc fa17 	bl	800045c <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a78      	ldr	r2, [pc, #480]	; (8004214 <loadMenuTexts+0xa34>)
 8004032:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004034:	4878      	ldr	r0, [pc, #480]	; (8004218 <loadMenuTexts+0xa38>)
 8004036:	f7fc fa11 	bl	800045c <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <loadMenuTexts+0xa3c>)
 800403e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004040:	4877      	ldr	r0, [pc, #476]	; (8004220 <loadMenuTexts+0xa40>)
 8004042:	f7fc fa0b 	bl	800045c <copyText>
 8004046:	4603      	mov	r3, r0
 8004048:	4a76      	ldr	r2, [pc, #472]	; (8004224 <loadMenuTexts+0xa44>)
 800404a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800404c:	4876      	ldr	r0, [pc, #472]	; (8004228 <loadMenuTexts+0xa48>)
 800404e:	f7fc fa05 	bl	800045c <copyText>
 8004052:	4603      	mov	r3, r0
 8004054:	4a75      	ldr	r2, [pc, #468]	; (800422c <loadMenuTexts+0xa4c>)
 8004056:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004058:	4875      	ldr	r0, [pc, #468]	; (8004230 <loadMenuTexts+0xa50>)
 800405a:	f7fc f9ff 	bl	800045c <copyText>
 800405e:	4603      	mov	r3, r0
 8004060:	4a74      	ldr	r2, [pc, #464]	; (8004234 <loadMenuTexts+0xa54>)
 8004062:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004064:	4874      	ldr	r0, [pc, #464]	; (8004238 <loadMenuTexts+0xa58>)
 8004066:	f7fc f9f9 	bl	800045c <copyText>
 800406a:	4603      	mov	r3, r0
 800406c:	4a73      	ldr	r2, [pc, #460]	; (800423c <loadMenuTexts+0xa5c>)
 800406e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004070:	4873      	ldr	r0, [pc, #460]	; (8004240 <loadMenuTexts+0xa60>)
 8004072:	f7fc f9f3 	bl	800045c <copyText>
 8004076:	4603      	mov	r3, r0
 8004078:	4a72      	ldr	r2, [pc, #456]	; (8004244 <loadMenuTexts+0xa64>)
 800407a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800407c:	4872      	ldr	r0, [pc, #456]	; (8004248 <loadMenuTexts+0xa68>)
 800407e:	f7fc f9ed 	bl	800045c <copyText>
 8004082:	4603      	mov	r3, r0
 8004084:	4a71      	ldr	r2, [pc, #452]	; (800424c <loadMenuTexts+0xa6c>)
 8004086:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004088:	4871      	ldr	r0, [pc, #452]	; (8004250 <loadMenuTexts+0xa70>)
 800408a:	f7fc f9e7 	bl	800045c <copyText>
 800408e:	e0e1      	b.n	8004254 <loadMenuTexts+0xa74>
 8004090:	200004c0 	.word	0x200004c0
 8004094:	20000cb8 	.word	0x20000cb8
 8004098:	200004d0 	.word	0x200004d0
 800409c:	20000cbc 	.word	0x20000cbc
 80040a0:	200004e0 	.word	0x200004e0
 80040a4:	20000cc0 	.word	0x20000cc0
 80040a8:	200004f0 	.word	0x200004f0
 80040ac:	20000cc4 	.word	0x20000cc4
 80040b0:	20000500 	.word	0x20000500
 80040b4:	20000cc8 	.word	0x20000cc8
 80040b8:	20000510 	.word	0x20000510
 80040bc:	20000ccc 	.word	0x20000ccc
 80040c0:	20000520 	.word	0x20000520
 80040c4:	20000cd0 	.word	0x20000cd0
 80040c8:	20000530 	.word	0x20000530
 80040cc:	20000cd4 	.word	0x20000cd4
 80040d0:	20000540 	.word	0x20000540
 80040d4:	20000cd8 	.word	0x20000cd8
 80040d8:	20000550 	.word	0x20000550
 80040dc:	20000cdc 	.word	0x20000cdc
 80040e0:	20000560 	.word	0x20000560
 80040e4:	20000ce0 	.word	0x20000ce0
 80040e8:	20000570 	.word	0x20000570
 80040ec:	20000ce4 	.word	0x20000ce4
 80040f0:	20000580 	.word	0x20000580
 80040f4:	20000ce8 	.word	0x20000ce8
 80040f8:	20000590 	.word	0x20000590
 80040fc:	20000cec 	.word	0x20000cec
 8004100:	200005a0 	.word	0x200005a0
 8004104:	20000cf0 	.word	0x20000cf0
 8004108:	200005b0 	.word	0x200005b0
 800410c:	20000cf4 	.word	0x20000cf4
 8004110:	200005c0 	.word	0x200005c0
 8004114:	20000cf8 	.word	0x20000cf8
 8004118:	200005d0 	.word	0x200005d0
 800411c:	20000cfc 	.word	0x20000cfc
 8004120:	200005e0 	.word	0x200005e0
 8004124:	20000d00 	.word	0x20000d00
 8004128:	200005f0 	.word	0x200005f0
 800412c:	20000d04 	.word	0x20000d04
 8004130:	20000600 	.word	0x20000600
 8004134:	20000d08 	.word	0x20000d08
 8004138:	20000610 	.word	0x20000610
 800413c:	20000d10 	.word	0x20000d10
 8004140:	20000620 	.word	0x20000620
 8004144:	20000d14 	.word	0x20000d14
 8004148:	20000630 	.word	0x20000630
 800414c:	20000d18 	.word	0x20000d18
 8004150:	20000640 	.word	0x20000640
 8004154:	20000d1c 	.word	0x20000d1c
 8004158:	20000650 	.word	0x20000650
 800415c:	20000d20 	.word	0x20000d20
 8004160:	20000660 	.word	0x20000660
 8004164:	20000d24 	.word	0x20000d24
 8004168:	20000670 	.word	0x20000670
 800416c:	20000d28 	.word	0x20000d28
 8004170:	20000680 	.word	0x20000680
 8004174:	20000d2c 	.word	0x20000d2c
 8004178:	20000690 	.word	0x20000690
 800417c:	20000d30 	.word	0x20000d30
 8004180:	200006a0 	.word	0x200006a0
 8004184:	20000d34 	.word	0x20000d34
 8004188:	200006b0 	.word	0x200006b0
 800418c:	20000d38 	.word	0x20000d38
 8004190:	200006c0 	.word	0x200006c0
 8004194:	20000d40 	.word	0x20000d40
 8004198:	200006d0 	.word	0x200006d0
 800419c:	20000d48 	.word	0x20000d48
 80041a0:	200006e0 	.word	0x200006e0
 80041a4:	20000d4c 	.word	0x20000d4c
 80041a8:	200006f0 	.word	0x200006f0
 80041ac:	20000d50 	.word	0x20000d50
 80041b0:	20000700 	.word	0x20000700
 80041b4:	20000d54 	.word	0x20000d54
 80041b8:	20000710 	.word	0x20000710
 80041bc:	20000d58 	.word	0x20000d58
 80041c0:	20000720 	.word	0x20000720
 80041c4:	20000d5c 	.word	0x20000d5c
 80041c8:	20000730 	.word	0x20000730
 80041cc:	20000d60 	.word	0x20000d60
 80041d0:	20000740 	.word	0x20000740
 80041d4:	20000d64 	.word	0x20000d64
 80041d8:	20000750 	.word	0x20000750
 80041dc:	20000d68 	.word	0x20000d68
 80041e0:	20000760 	.word	0x20000760
 80041e4:	20000d6c 	.word	0x20000d6c
 80041e8:	20000770 	.word	0x20000770
 80041ec:	20000d70 	.word	0x20000d70
 80041f0:	20000780 	.word	0x20000780
 80041f4:	20000d74 	.word	0x20000d74
 80041f8:	20000790 	.word	0x20000790
 80041fc:	20000d78 	.word	0x20000d78
 8004200:	200007a0 	.word	0x200007a0
 8004204:	20000d7c 	.word	0x20000d7c
 8004208:	200007b0 	.word	0x200007b0
 800420c:	20000d80 	.word	0x20000d80
 8004210:	200007c0 	.word	0x200007c0
 8004214:	20000d84 	.word	0x20000d84
 8004218:	200007d0 	.word	0x200007d0
 800421c:	20000d88 	.word	0x20000d88
 8004220:	200007e0 	.word	0x200007e0
 8004224:	20000d8c 	.word	0x20000d8c
 8004228:	200007f0 	.word	0x200007f0
 800422c:	20000d90 	.word	0x20000d90
 8004230:	20000800 	.word	0x20000800
 8004234:	20000d94 	.word	0x20000d94
 8004238:	20000810 	.word	0x20000810
 800423c:	20000d98 	.word	0x20000d98
 8004240:	20000820 	.word	0x20000820
 8004244:	20000d9c 	.word	0x20000d9c
 8004248:	20000830 	.word	0x20000830
 800424c:	20000da0 	.word	0x20000da0
 8004250:	20000840 	.word	0x20000840
 8004254:	4603      	mov	r3, r0
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <loadMenuTexts+0xb14>)
 8004258:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800425a:	4827      	ldr	r0, [pc, #156]	; (80042f8 <loadMenuTexts+0xb18>)
 800425c:	f7fc f8fe 	bl	800045c <copyText>
 8004260:	4603      	mov	r3, r0
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <loadMenuTexts+0xb1c>)
 8004264:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004266:	4826      	ldr	r0, [pc, #152]	; (8004300 <loadMenuTexts+0xb20>)
 8004268:	f7fc f8f8 	bl	800045c <copyText>
 800426c:	4603      	mov	r3, r0
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <loadMenuTexts+0xb24>)
 8004270:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004272:	4825      	ldr	r0, [pc, #148]	; (8004308 <loadMenuTexts+0xb28>)
 8004274:	f7fc f8f2 	bl	800045c <copyText>
 8004278:	4603      	mov	r3, r0
 800427a:	4a24      	ldr	r2, [pc, #144]	; (800430c <loadMenuTexts+0xb2c>)
 800427c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800427e:	4824      	ldr	r0, [pc, #144]	; (8004310 <loadMenuTexts+0xb30>)
 8004280:	f7fc f8ec 	bl	800045c <copyText>
 8004284:	4603      	mov	r3, r0
 8004286:	4a23      	ldr	r2, [pc, #140]	; (8004314 <loadMenuTexts+0xb34>)
 8004288:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800428a:	4823      	ldr	r0, [pc, #140]	; (8004318 <loadMenuTexts+0xb38>)
 800428c:	f7fc f8e6 	bl	800045c <copyText>
 8004290:	4603      	mov	r3, r0
 8004292:	4a22      	ldr	r2, [pc, #136]	; (800431c <loadMenuTexts+0xb3c>)
 8004294:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004296:	4822      	ldr	r0, [pc, #136]	; (8004320 <loadMenuTexts+0xb40>)
 8004298:	f7fc f8e0 	bl	800045c <copyText>
 800429c:	4603      	mov	r3, r0
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <loadMenuTexts+0xb44>)
 80042a0:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80042a2:	4821      	ldr	r0, [pc, #132]	; (8004328 <loadMenuTexts+0xb48>)
 80042a4:	f7fc f8da 	bl	800045c <copyText>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a20      	ldr	r2, [pc, #128]	; (800432c <loadMenuTexts+0xb4c>)
 80042ac:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80042ae:	4820      	ldr	r0, [pc, #128]	; (8004330 <loadMenuTexts+0xb50>)
 80042b0:	f7fc f8d4 	bl	800045c <copyText>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <loadMenuTexts+0xb54>)
 80042b8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80042ba:	481f      	ldr	r0, [pc, #124]	; (8004338 <loadMenuTexts+0xb58>)
 80042bc:	f7fc f8ce 	bl	800045c <copyText>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <loadMenuTexts+0xb5c>)
 80042c4:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80042c6:	481e      	ldr	r0, [pc, #120]	; (8004340 <loadMenuTexts+0xb60>)
 80042c8:	f7fc f8c8 	bl	800045c <copyText>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <loadMenuTexts+0xb64>)
 80042d0:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80042d2:	481d      	ldr	r0, [pc, #116]	; (8004348 <loadMenuTexts+0xb68>)
 80042d4:	f7fc f8c2 	bl	800045c <copyText>
 80042d8:	4603      	mov	r3, r0
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <loadMenuTexts+0xb6c>)
 80042dc:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80042de:	481c      	ldr	r0, [pc, #112]	; (8004350 <loadMenuTexts+0xb70>)
 80042e0:	f7fc f8bc 	bl	800045c <copyText>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <loadMenuTexts+0xb74>)
 80042e8:	6013      	str	r3, [r2, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000da4 	.word	0x20000da4
 80042f8:	20000850 	.word	0x20000850
 80042fc:	20000da8 	.word	0x20000da8
 8004300:	20000860 	.word	0x20000860
 8004304:	20000dac 	.word	0x20000dac
 8004308:	20000870 	.word	0x20000870
 800430c:	20000db0 	.word	0x20000db0
 8004310:	20000880 	.word	0x20000880
 8004314:	20000db4 	.word	0x20000db4
 8004318:	20000890 	.word	0x20000890
 800431c:	20000db8 	.word	0x20000db8
 8004320:	200008a0 	.word	0x200008a0
 8004324:	20000dc4 	.word	0x20000dc4
 8004328:	200008b0 	.word	0x200008b0
 800432c:	20000dc8 	.word	0x20000dc8
 8004330:	200008c0 	.word	0x200008c0
 8004334:	20000dcc 	.word	0x20000dcc
 8004338:	200008d0 	.word	0x200008d0
 800433c:	20000dd0 	.word	0x20000dd0
 8004340:	200008e0 	.word	0x200008e0
 8004344:	20000dd4 	.word	0x20000dd4
 8004348:	200008f0 	.word	0x200008f0
 800434c:	20000dd8 	.word	0x20000dd8
 8004350:	20000900 	.word	0x20000900
 8004354:	20000ddc 	.word	0x20000ddc

08004358 <bekle>:
void hataKoduLcdGoster(uint8_t);
void eepromKontrol(void);
void hata2EEPROM(uint8_t);
void hataSifirla(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	timer1=millis;
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <bekle+0x124>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a47      	ldr	r2, [pc, #284]	; (8004480 <bekle+0x128>)
 8004362:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004364:	e002      	b.n	800436c <bekle+0x14>
    	butonKontrol = 1;
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <bekle+0x12c>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800436c:	2101      	movs	r1, #1
 800436e:	4846      	ldr	r0, [pc, #280]	; (8004488 <bekle+0x130>)
 8004370:	f003 fe78 	bl	8008064 <HAL_GPIO_ReadPin>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d109      	bne.n	800438e <bekle+0x36>
 800437a:	4b40      	ldr	r3, [pc, #256]	; (800447c <bekle+0x124>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b40      	ldr	r3, [pc, #256]	; (8004480 <bekle+0x128>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d0ef      	beq.n	8004366 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004386:	e002      	b.n	800438e <bekle+0x36>
    	butonKontrol = 1;
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <bekle+0x12c>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800438e:	2108      	movs	r1, #8
 8004390:	483e      	ldr	r0, [pc, #248]	; (800448c <bekle+0x134>)
 8004392:	f003 fe67 	bl	8008064 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d109      	bne.n	80043b0 <bekle+0x58>
 800439c:	4b37      	ldr	r3, [pc, #220]	; (800447c <bekle+0x124>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b37      	ldr	r3, [pc, #220]	; (8004480 <bekle+0x128>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0ef      	beq.n	8004388 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043a8:	e002      	b.n	80043b0 <bekle+0x58>
    	butonKontrol = 1;
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <bekle+0x12c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043b0:	2102      	movs	r1, #2
 80043b2:	4835      	ldr	r0, [pc, #212]	; (8004488 <bekle+0x130>)
 80043b4:	f003 fe56 	bl	8008064 <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d109      	bne.n	80043d2 <bekle+0x7a>
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <bekle+0x124>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <bekle+0x128>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d0ef      	beq.n	80043aa <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043ca:	e002      	b.n	80043d2 <bekle+0x7a>
    	butonKontrol = 1;
 80043cc:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <bekle+0x12c>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043d2:	2104      	movs	r1, #4
 80043d4:	482c      	ldr	r0, [pc, #176]	; (8004488 <bekle+0x130>)
 80043d6:	f003 fe45 	bl	8008064 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d109      	bne.n	80043f4 <bekle+0x9c>
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <bekle+0x124>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b26      	ldr	r3, [pc, #152]	; (8004480 <bekle+0x128>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0ef      	beq.n	80043cc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043ec:	e002      	b.n	80043f4 <bekle+0x9c>
    	butonKontrol = 1;
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <bekle+0x12c>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043f4:	2108      	movs	r1, #8
 80043f6:	4824      	ldr	r0, [pc, #144]	; (8004488 <bekle+0x130>)
 80043f8:	f003 fe34 	bl	8008064 <HAL_GPIO_ReadPin>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d109      	bne.n	8004416 <bekle+0xbe>
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <bekle+0x124>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <bekle+0x128>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d0ef      	beq.n	80043ee <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800440e:	e002      	b.n	8004416 <bekle+0xbe>
    	butonKontrol = 1;
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <bekle+0x12c>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	481c      	ldr	r0, [pc, #112]	; (800448c <bekle+0x134>)
 800441a:	f003 fe23 	bl	8008064 <HAL_GPIO_ReadPin>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <bekle+0xe0>
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <bekle+0x124>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <bekle+0x128>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d0ef      	beq.n	8004410 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004430:	e002      	b.n	8004438 <bekle+0xe0>
    	butonKontrol = 1;
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <bekle+0x12c>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443c:	4813      	ldr	r0, [pc, #76]	; (800448c <bekle+0x134>)
 800443e:	f003 fe11 	bl	8008064 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <bekle+0x104>
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <bekle+0x124>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <bekle+0x128>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d0ee      	beq.n	8004432 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004454:	e002      	b.n	800445c <bekle+0x104>
    	butonKontrol = 1;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <bekle+0x12c>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800445c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <bekle+0x134>)
 8004462:	f003 fdff 	bl	8008064 <HAL_GPIO_ReadPin>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <bekle+0x120>
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <bekle+0x124>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <bekle+0x128>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0ee      	beq.n	8004456 <bekle+0xfe>
    }

}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000c2c 	.word	0x20000c2c
 8004480:	20000c34 	.word	0x20000c34
 8004484:	20000c7a 	.word	0x20000c7a
 8004488:	40010800 	.word	0x40010800
 800448c:	40011000 	.word	0x40011000

08004490 <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80044a0:	4a24      	ldr	r2, [pc, #144]	; (8004534 <lcdUpdate+0xa4>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	2002      	movs	r0, #2
 80044a6:	f7fb ffa3 	bl	80003f0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainText);
		lcd_print(2, 1, mainText2);
	}
}
 80044aa:	e03f      	b.n	800452c <lcdUpdate+0x9c>
	} else if(y==2) {
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d105      	bne.n	80044be <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80044b2:	4a20      	ldr	r2, [pc, #128]	; (8004534 <lcdUpdate+0xa4>)
 80044b4:	2102      	movs	r1, #2
 80044b6:	2002      	movs	r0, #2
 80044b8:	f7fb ff9a 	bl	80003f0 <lcd_print>
}
 80044bc:	e036      	b.n	800452c <lcdUpdate+0x9c>
	} else if(y==3) {
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d105      	bne.n	80044d0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <lcdUpdate+0xa4>)
 80044c6:	2103      	movs	r1, #3
 80044c8:	2002      	movs	r0, #2
 80044ca:	f7fb ff91 	bl	80003f0 <lcd_print>
}
 80044ce:	e02d      	b.n	800452c <lcdUpdate+0x9c>
	} else if(y==4) {
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d105      	bne.n	80044e2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80044d6:	4a17      	ldr	r2, [pc, #92]	; (8004534 <lcdUpdate+0xa4>)
 80044d8:	2104      	movs	r1, #4
 80044da:	2002      	movs	r0, #2
 80044dc:	f7fb ff88 	bl	80003f0 <lcd_print>
}
 80044e0:	e024      	b.n	800452c <lcdUpdate+0x9c>
	} else if(y==5) {
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d105      	bne.n	80044f4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80044e8:	4a12      	ldr	r2, [pc, #72]	; (8004534 <lcdUpdate+0xa4>)
 80044ea:	2105      	movs	r1, #5
 80044ec:	2002      	movs	r0, #2
 80044ee:	f7fb ff7f 	bl	80003f0 <lcd_print>
}
 80044f2:	e01b      	b.n	800452c <lcdUpdate+0x9c>
	} else if(y==6) {
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d105      	bne.n	8004506 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <lcdUpdate+0xa4>)
 80044fc:	2106      	movs	r1, #6
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fb ff76 	bl	80003f0 <lcd_print>
}
 8004504:	e012      	b.n	800452c <lcdUpdate+0x9c>
	} else if (y==7) {
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d10f      	bne.n	800452c <lcdUpdate+0x9c>
		lcd_clear();
 800450c:	f7fb ff85 	bl	800041a <lcd_clear>
		lcd_print(1, 1, mainText);
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <lcdUpdate+0xa8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	2101      	movs	r1, #1
 8004518:	2001      	movs	r0, #1
 800451a:	f7fb ff69 	bl	80003f0 <lcd_print>
		lcd_print(2, 1, mainText2);
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <lcdUpdate+0xac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	2101      	movs	r1, #1
 8004526:	2002      	movs	r0, #2
 8004528:	f7fb ff62 	bl	80003f0 <lcd_print>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	0800c8ec 	.word	0x0800c8ec
 8004538:	20000cb0 	.word	0x20000cb0
 800453c:	20000cb4 	.word	0x20000cb4

08004540 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d11c      	bne.n	800458a <hataKoduLcdGoster+0x4a>
		if(dilSecim==0){
 8004550:	4b5f      	ldr	r3, [pc, #380]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <hataKoduLcdGoster+0x22>
		lcd_print(1, 1, "   HATA KODU    ");
 8004558:	4a5e      	ldr	r2, [pc, #376]	; (80046d4 <hataKoduLcdGoster+0x194>)
 800455a:	2101      	movs	r1, #1
 800455c:	2001      	movs	r0, #1
 800455e:	f7fb ff47 	bl	80003f0 <lcd_print>
		}
		if(dilSecim==1){
 8004562:	4b5b      	ldr	r3, [pc, #364]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d104      	bne.n	8004574 <hataKoduLcdGoster+0x34>
		lcd_print(1, 1, "   ERROR CODE   ");
 800456a:	4a5b      	ldr	r2, [pc, #364]	; (80046d8 <hataKoduLcdGoster+0x198>)
 800456c:	2101      	movs	r1, #1
 800456e:	2001      	movs	r0, #1
 8004570:	f7fb ff3e 	bl	80003f0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004574:	4a59      	ldr	r2, [pc, #356]	; (80046dc <hataKoduLcdGoster+0x19c>)
 8004576:	2101      	movs	r1, #1
 8004578:	2002      	movs	r0, #2
 800457a:	f7fb ff39 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800457e:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 8004580:	2107      	movs	r1, #7
 8004582:	2002      	movs	r0, #2
 8004584:	f7fb ff34 	bl	80003f0 <lcd_print>
		lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004588:	e09e      	b.n	80046c8 <hataKoduLcdGoster+0x188>
	} else if(x==2){
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d11c      	bne.n	80045ca <hataKoduLcdGoster+0x8a>
		if(dilSecim==0){
 8004590:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <hataKoduLcdGoster+0x62>
		lcd_print(1, 1, "   HATA KODU    ");
 8004598:	4a4e      	ldr	r2, [pc, #312]	; (80046d4 <hataKoduLcdGoster+0x194>)
 800459a:	2101      	movs	r1, #1
 800459c:	2001      	movs	r0, #1
 800459e:	f7fb ff27 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 80045a2:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <hataKoduLcdGoster+0x190>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d104      	bne.n	80045b4 <hataKoduLcdGoster+0x74>
		lcd_print(1, 1, "   ERROR CODE   ");
 80045aa:	4a4b      	ldr	r2, [pc, #300]	; (80046d8 <hataKoduLcdGoster+0x198>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	2001      	movs	r0, #1
 80045b0:	f7fb ff1e 	bl	80003f0 <lcd_print>
		lcd_print(2, 2, "2");
 80045b4:	4a4b      	ldr	r2, [pc, #300]	; (80046e4 <hataKoduLcdGoster+0x1a4>)
 80045b6:	2102      	movs	r1, #2
 80045b8:	2002      	movs	r0, #2
 80045ba:	f7fb ff19 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80045be:	4a48      	ldr	r2, [pc, #288]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 80045c0:	2107      	movs	r1, #7
 80045c2:	2002      	movs	r0, #2
 80045c4:	f7fb ff14 	bl	80003f0 <lcd_print>
}
 80045c8:	e07e      	b.n	80046c8 <hataKoduLcdGoster+0x188>
	} else if(x==3){
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d11c      	bne.n	800460a <hataKoduLcdGoster+0xca>
		if(dilSecim==0){
 80045d0:	4b3f      	ldr	r3, [pc, #252]	; (80046d0 <hataKoduLcdGoster+0x190>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, "   HATA KODU    ");
 80045d8:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <hataKoduLcdGoster+0x194>)
 80045da:	2101      	movs	r1, #1
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fb ff07 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 80045e2:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <hataKoduLcdGoster+0x190>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d104      	bne.n	80045f4 <hataKoduLcdGoster+0xb4>
		lcd_print(1, 1, "   ERROR CODE   ");
 80045ea:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <hataKoduLcdGoster+0x198>)
 80045ec:	2101      	movs	r1, #1
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fb fefe 	bl	80003f0 <lcd_print>
		lcd_print(2, 3, "3");
 80045f4:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <hataKoduLcdGoster+0x1a8>)
 80045f6:	2103      	movs	r1, #3
 80045f8:	2002      	movs	r0, #2
 80045fa:	f7fb fef9 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80045fe:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 8004600:	2107      	movs	r1, #7
 8004602:	2002      	movs	r0, #2
 8004604:	f7fb fef4 	bl	80003f0 <lcd_print>
}
 8004608:	e05e      	b.n	80046c8 <hataKoduLcdGoster+0x188>
	} else if(x==4){
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d11c      	bne.n	800464a <hataKoduLcdGoster+0x10a>
		if(dilSecim==0){
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <hataKoduLcdGoster+0xe2>
		lcd_print(1, 1, "   HATA KODU    ");
 8004618:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <hataKoduLcdGoster+0x194>)
 800461a:	2101      	movs	r1, #1
 800461c:	2001      	movs	r0, #1
 800461e:	f7fb fee7 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d104      	bne.n	8004634 <hataKoduLcdGoster+0xf4>
		lcd_print(1, 1, "   ERROR CODE   ");
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <hataKoduLcdGoster+0x198>)
 800462c:	2101      	movs	r1, #1
 800462e:	2001      	movs	r0, #1
 8004630:	f7fb fede 	bl	80003f0 <lcd_print>
		lcd_print(2, 4, "4");
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <hataKoduLcdGoster+0x1ac>)
 8004636:	2104      	movs	r1, #4
 8004638:	2002      	movs	r0, #2
 800463a:	f7fb fed9 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800463e:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 8004640:	2107      	movs	r1, #7
 8004642:	2002      	movs	r0, #2
 8004644:	f7fb fed4 	bl	80003f0 <lcd_print>
}
 8004648:	e03e      	b.n	80046c8 <hataKoduLcdGoster+0x188>
	} else if(x==5){
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d11c      	bne.n	800468a <hataKoduLcdGoster+0x14a>
		if(dilSecim==0){
 8004650:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <hataKoduLcdGoster+0x122>
		lcd_print(1, 1, "   HATA KODU    ");
 8004658:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <hataKoduLcdGoster+0x194>)
 800465a:	2101      	movs	r1, #1
 800465c:	2001      	movs	r0, #1
 800465e:	f7fb fec7 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d104      	bne.n	8004674 <hataKoduLcdGoster+0x134>
		lcd_print(1, 1, "   ERROR CODE   ");
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <hataKoduLcdGoster+0x198>)
 800466c:	2101      	movs	r1, #1
 800466e:	2001      	movs	r0, #1
 8004670:	f7fb febe 	bl	80003f0 <lcd_print>
		lcd_print(2, 5, "5");
 8004674:	4a1e      	ldr	r2, [pc, #120]	; (80046f0 <hataKoduLcdGoster+0x1b0>)
 8004676:	2105      	movs	r1, #5
 8004678:	2002      	movs	r0, #2
 800467a:	f7fb feb9 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 8004680:	2107      	movs	r1, #7
 8004682:	2002      	movs	r0, #2
 8004684:	f7fb feb4 	bl	80003f0 <lcd_print>
}
 8004688:	e01e      	b.n	80046c8 <hataKoduLcdGoster+0x188>
	} else if(x==6){
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	2b06      	cmp	r3, #6
 800468e:	d11b      	bne.n	80046c8 <hataKoduLcdGoster+0x188>
		if(dilSecim==0){
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <hataKoduLcdGoster+0x190>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <hataKoduLcdGoster+0x162>
		lcd_print(1, 1, "   HATA KODU    ");
 8004698:	4a0e      	ldr	r2, [pc, #56]	; (80046d4 <hataKoduLcdGoster+0x194>)
 800469a:	2101      	movs	r1, #1
 800469c:	2001      	movs	r0, #1
 800469e:	f7fb fea7 	bl	80003f0 <lcd_print>
		if(dilSecim==1){
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <hataKoduLcdGoster+0x190>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d104      	bne.n	80046b4 <hataKoduLcdGoster+0x174>
		lcd_print(1, 1, "   ERROR CODE   ");
 80046aa:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <hataKoduLcdGoster+0x198>)
 80046ac:	2101      	movs	r1, #1
 80046ae:	2001      	movs	r0, #1
 80046b0:	f7fb fe9e 	bl	80003f0 <lcd_print>
		lcd_print(2, 6, "6");
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <hataKoduLcdGoster+0x1b4>)
 80046b6:	2106      	movs	r1, #6
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7fb fe99 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <hataKoduLcdGoster+0x1a0>)
 80046c0:	2107      	movs	r1, #7
 80046c2:	2002      	movs	r0, #2
 80046c4:	f7fb fe94 	bl	80003f0 <lcd_print>
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000c6c 	.word	0x20000c6c
 80046d4:	0800d1c8 	.word	0x0800d1c8
 80046d8:	0800d1dc 	.word	0x0800d1dc
 80046dc:	0800d1f0 	.word	0x0800d1f0
 80046e0:	0800d1f4 	.word	0x0800d1f4
 80046e4:	0800d200 	.word	0x0800d200
 80046e8:	0800d204 	.word	0x0800d204
 80046ec:	0800d208 	.word	0x0800d208
 80046f0:	0800d20c 	.word	0x0800d20c
 80046f4:	0800d210 	.word	0x0800d210

080046f8 <eepromKontrol>:

void eepromKontrol(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80046fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004702:	9302      	str	r3, [sp, #8]
 8004704:	233f      	movs	r3, #63	; 0x3f
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	4b9b      	ldr	r3, [pc, #620]	; (8004978 <eepromKontrol+0x280>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	233f      	movs	r3, #63	; 0x3f
 800470e:	2200      	movs	r2, #0
 8004710:	21a0      	movs	r1, #160	; 0xa0
 8004712:	489a      	ldr	r0, [pc, #616]	; (800497c <eepromKontrol+0x284>)
 8004714:	f004 f85a 	bl	80087cc <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800471c:	f003 f814 	bl	8007748 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004720:	4b95      	ldr	r3, [pc, #596]	; (8004978 <eepromKontrol+0x280>)
 8004722:	78da      	ldrb	r2, [r3, #3]
 8004724:	4b96      	ldr	r3, [pc, #600]	; (8004980 <eepromKontrol+0x288>)
 8004726:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004728:	4b93      	ldr	r3, [pc, #588]	; (8004978 <eepromKontrol+0x280>)
 800472a:	785a      	ldrb	r2, [r3, #1]
 800472c:	4b95      	ldr	r3, [pc, #596]	; (8004984 <eepromKontrol+0x28c>)
 800472e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004730:	4b91      	ldr	r3, [pc, #580]	; (8004978 <eepromKontrol+0x280>)
 8004732:	789a      	ldrb	r2, [r3, #2]
 8004734:	4b94      	ldr	r3, [pc, #592]	; (8004988 <eepromKontrol+0x290>)
 8004736:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004738:	4b8f      	ldr	r3, [pc, #572]	; (8004978 <eepromKontrol+0x280>)
 800473a:	791a      	ldrb	r2, [r3, #4]
 800473c:	4b93      	ldr	r3, [pc, #588]	; (800498c <eepromKontrol+0x294>)
 800473e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004740:	4b8d      	ldr	r3, [pc, #564]	; (8004978 <eepromKontrol+0x280>)
 8004742:	795a      	ldrb	r2, [r3, #5]
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <eepromKontrol+0x298>)
 8004746:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004748:	4b8b      	ldr	r3, [pc, #556]	; (8004978 <eepromKontrol+0x280>)
 800474a:	799a      	ldrb	r2, [r3, #6]
 800474c:	4b91      	ldr	r3, [pc, #580]	; (8004994 <eepromKontrol+0x29c>)
 800474e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004750:	4b89      	ldr	r3, [pc, #548]	; (8004978 <eepromKontrol+0x280>)
 8004752:	79da      	ldrb	r2, [r3, #7]
 8004754:	4b90      	ldr	r3, [pc, #576]	; (8004998 <eepromKontrol+0x2a0>)
 8004756:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004758:	4b87      	ldr	r3, [pc, #540]	; (8004978 <eepromKontrol+0x280>)
 800475a:	7a1a      	ldrb	r2, [r3, #8]
 800475c:	4b8f      	ldr	r3, [pc, #572]	; (800499c <eepromKontrol+0x2a4>)
 800475e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004760:	4b85      	ldr	r3, [pc, #532]	; (8004978 <eepromKontrol+0x280>)
 8004762:	7a5a      	ldrb	r2, [r3, #9]
 8004764:	4b8e      	ldr	r3, [pc, #568]	; (80049a0 <eepromKontrol+0x2a8>)
 8004766:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004768:	4b83      	ldr	r3, [pc, #524]	; (8004978 <eepromKontrol+0x280>)
 800476a:	7a9a      	ldrb	r2, [r3, #10]
 800476c:	4b8d      	ldr	r3, [pc, #564]	; (80049a4 <eepromKontrol+0x2ac>)
 800476e:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004770:	4b81      	ldr	r3, [pc, #516]	; (8004978 <eepromKontrol+0x280>)
 8004772:	7ada      	ldrb	r2, [r3, #11]
 8004774:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <eepromKontrol+0x2b0>)
 8004776:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004778:	4b7f      	ldr	r3, [pc, #508]	; (8004978 <eepromKontrol+0x280>)
 800477a:	7b1a      	ldrb	r2, [r3, #12]
 800477c:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <eepromKontrol+0x2b4>)
 800477e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004780:	4b7d      	ldr	r3, [pc, #500]	; (8004978 <eepromKontrol+0x280>)
 8004782:	7b5a      	ldrb	r2, [r3, #13]
 8004784:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <eepromKontrol+0x2b8>)
 8004786:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004788:	4b7b      	ldr	r3, [pc, #492]	; (8004978 <eepromKontrol+0x280>)
 800478a:	7b9a      	ldrb	r2, [r3, #14]
 800478c:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <eepromKontrol+0x2bc>)
 800478e:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004790:	4b79      	ldr	r3, [pc, #484]	; (8004978 <eepromKontrol+0x280>)
 8004792:	7bda      	ldrb	r2, [r3, #15]
 8004794:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <eepromKontrol+0x2c0>)
 8004796:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004798:	4b77      	ldr	r3, [pc, #476]	; (8004978 <eepromKontrol+0x280>)
 800479a:	7c1a      	ldrb	r2, [r3, #16]
 800479c:	4b87      	ldr	r3, [pc, #540]	; (80049bc <eepromKontrol+0x2c4>)
 800479e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80047a0:	4b75      	ldr	r3, [pc, #468]	; (8004978 <eepromKontrol+0x280>)
 80047a2:	7c5a      	ldrb	r2, [r3, #17]
 80047a4:	4b86      	ldr	r3, [pc, #536]	; (80049c0 <eepromKontrol+0x2c8>)
 80047a6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80047a8:	4b73      	ldr	r3, [pc, #460]	; (8004978 <eepromKontrol+0x280>)
 80047aa:	7c9a      	ldrb	r2, [r3, #18]
 80047ac:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <eepromKontrol+0x2cc>)
 80047ae:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80047b0:	4b71      	ldr	r3, [pc, #452]	; (8004978 <eepromKontrol+0x280>)
 80047b2:	7cda      	ldrb	r2, [r3, #19]
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <eepromKontrol+0x2d0>)
 80047b6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80047b8:	4b6f      	ldr	r3, [pc, #444]	; (8004978 <eepromKontrol+0x280>)
 80047ba:	7d1a      	ldrb	r2, [r3, #20]
 80047bc:	4b83      	ldr	r3, [pc, #524]	; (80049cc <eepromKontrol+0x2d4>)
 80047be:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80047c0:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <eepromKontrol+0x280>)
 80047c2:	7d5a      	ldrb	r2, [r3, #21]
 80047c4:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <eepromKontrol+0x2d8>)
 80047c6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80047c8:	4b6b      	ldr	r3, [pc, #428]	; (8004978 <eepromKontrol+0x280>)
 80047ca:	7d9a      	ldrb	r2, [r3, #22]
 80047cc:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <eepromKontrol+0x2dc>)
 80047ce:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80047d0:	4b69      	ldr	r3, [pc, #420]	; (8004978 <eepromKontrol+0x280>)
 80047d2:	7dda      	ldrb	r2, [r3, #23]
 80047d4:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <eepromKontrol+0x2e0>)
 80047d6:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80047d8:	4b67      	ldr	r3, [pc, #412]	; (8004978 <eepromKontrol+0x280>)
 80047da:	7e1a      	ldrb	r2, [r3, #24]
 80047dc:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <eepromKontrol+0x2e4>)
 80047de:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80047e0:	4b65      	ldr	r3, [pc, #404]	; (8004978 <eepromKontrol+0x280>)
 80047e2:	7e5a      	ldrb	r2, [r3, #25]
 80047e4:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <eepromKontrol+0x2e8>)
 80047e6:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80047e8:	4b63      	ldr	r3, [pc, #396]	; (8004978 <eepromKontrol+0x280>)
 80047ea:	7e9a      	ldrb	r2, [r3, #26]
 80047ec:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <eepromKontrol+0x2ec>)
 80047ee:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80047f0:	4b61      	ldr	r3, [pc, #388]	; (8004978 <eepromKontrol+0x280>)
 80047f2:	7eda      	ldrb	r2, [r3, #27]
 80047f4:	4b7c      	ldr	r3, [pc, #496]	; (80049e8 <eepromKontrol+0x2f0>)
 80047f6:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80047f8:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <eepromKontrol+0x280>)
 80047fa:	7f1a      	ldrb	r2, [r3, #28]
 80047fc:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <eepromKontrol+0x2f4>)
 80047fe:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <eepromKontrol+0x280>)
 8004802:	7f5a      	ldrb	r2, [r3, #29]
 8004804:	4b7a      	ldr	r3, [pc, #488]	; (80049f0 <eepromKontrol+0x2f8>)
 8004806:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004808:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <eepromKontrol+0x280>)
 800480a:	7f9a      	ldrb	r2, [r3, #30]
 800480c:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <eepromKontrol+0x2fc>)
 800480e:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004810:	4b59      	ldr	r3, [pc, #356]	; (8004978 <eepromKontrol+0x280>)
 8004812:	7fda      	ldrb	r2, [r3, #31]
 8004814:	4b78      	ldr	r3, [pc, #480]	; (80049f8 <eepromKontrol+0x300>)
 8004816:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004818:	4b57      	ldr	r3, [pc, #348]	; (8004978 <eepromKontrol+0x280>)
 800481a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800481e:	4b77      	ldr	r3, [pc, #476]	; (80049fc <eepromKontrol+0x304>)
 8004820:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004822:	4b55      	ldr	r3, [pc, #340]	; (8004978 <eepromKontrol+0x280>)
 8004824:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004828:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <eepromKontrol+0x308>)
 800482a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800482c:	4b52      	ldr	r3, [pc, #328]	; (8004978 <eepromKontrol+0x280>)
 800482e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004832:	4b74      	ldr	r3, [pc, #464]	; (8004a04 <eepromKontrol+0x30c>)
 8004834:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004836:	4b50      	ldr	r3, [pc, #320]	; (8004978 <eepromKontrol+0x280>)
 8004838:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800483c:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <eepromKontrol+0x310>)
 800483e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004840:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <eepromKontrol+0x280>)
 8004842:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004846:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <eepromKontrol+0x314>)
 8004848:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 800484a:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <eepromKontrol+0x280>)
 800484c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004850:	4b6f      	ldr	r3, [pc, #444]	; (8004a10 <eepromKontrol+0x318>)
 8004852:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004854:	4b48      	ldr	r3, [pc, #288]	; (8004978 <eepromKontrol+0x280>)
 8004856:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800485a:	4b6e      	ldr	r3, [pc, #440]	; (8004a14 <eepromKontrol+0x31c>)
 800485c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <eepromKontrol+0x280>)
 8004860:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004864:	4b6c      	ldr	r3, [pc, #432]	; (8004a18 <eepromKontrol+0x320>)
 8004866:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004868:	4b43      	ldr	r3, [pc, #268]	; (8004978 <eepromKontrol+0x280>)
 800486a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800486e:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <eepromKontrol+0x324>)
 8004870:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <eepromKontrol+0x280>)
 8004874:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004878:	4b69      	ldr	r3, [pc, #420]	; (8004a20 <eepromKontrol+0x328>)
 800487a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 800487c:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <eepromKontrol+0x280>)
 800487e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004882:	4b68      	ldr	r3, [pc, #416]	; (8004a24 <eepromKontrol+0x32c>)
 8004884:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <eepromKontrol+0x280>)
 8004888:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800488c:	4b66      	ldr	r3, [pc, #408]	; (8004a28 <eepromKontrol+0x330>)
 800488e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <eepromKontrol+0x280>)
 8004892:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <eepromKontrol+0x334>)
 8004898:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <eepromKontrol+0x280>)
 800489c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80048a0:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <eepromKontrol+0x338>)
 80048a2:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <eepromKontrol+0x280>)
 80048a6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <eepromKontrol+0x33c>)
 80048ac:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80048ae:	4b54      	ldr	r3, [pc, #336]	; (8004a00 <eepromKontrol+0x308>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe ff94 	bl	80037e0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80048b8:	4b50      	ldr	r3, [pc, #320]	; (80049fc <eepromKontrol+0x304>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d902      	bls.n	80048c6 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 80048c0:	4b4e      	ldr	r3, [pc, #312]	; (80049fc <eepromKontrol+0x304>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80048c6:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <eepromKontrol+0x300>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d902      	bls.n	80048d4 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <eepromKontrol+0x300>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <eepromKontrol+0x2fc>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d902      	bls.n	80048e2 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 80048dc:	4b45      	ldr	r3, [pc, #276]	; (80049f4 <eepromKontrol+0x2fc>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80048e2:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <eepromKontrol+0x2f8>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d902      	bls.n	80048f0 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <eepromKontrol+0x2f8>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80048f0:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <eepromKontrol+0x2f4>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	d902      	bls.n	80048fe <eepromKontrol+0x206>
	    calismaSayisi1=0;
 80048f8:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <eepromKontrol+0x2f4>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <eepromKontrol+0x28c>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d902      	bls.n	800490c <eepromKontrol+0x214>
	    calismaSekli=0;
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <eepromKontrol+0x28c>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <eepromKontrol+0x290>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d902      	bls.n	800491a <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <eepromKontrol+0x290>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800491a:	4b1c      	ldr	r3, [pc, #112]	; (800498c <eepromKontrol+0x294>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d902      	bls.n	8004928 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <eepromKontrol+0x294>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <eepromKontrol+0x298>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d902      	bls.n	8004936 <eepromKontrol+0x23e>
	    altLimit=1;
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <eepromKontrol+0x298>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004936:	4b17      	ldr	r3, [pc, #92]	; (8004994 <eepromKontrol+0x29c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d902      	bls.n	8004944 <eepromKontrol+0x24c>
	    basincSalteri=1;
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <eepromKontrol+0x29c>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <eepromKontrol+0x2a0>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d902      	bls.n	8004952 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <eepromKontrol+0x2a0>)
 800494e:	2203      	movs	r2, #3
 8004950:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <eepromKontrol+0x314>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d902      	bls.n	8004960 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 800495a:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <eepromKontrol+0x314>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004960:	4b0e      	ldr	r3, [pc, #56]	; (800499c <eepromKontrol+0x2a4>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d902      	bls.n	800496e <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <eepromKontrol+0x2a4>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <eepromKontrol+0x2a8>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d963      	bls.n	8004a3e <eepromKontrol+0x346>
 8004976:	e05f      	b.n	8004a38 <eepromKontrol+0x340>
 8004978:	20000be4 	.word	0x20000be4
 800497c:	20000e0c 	.word	0x20000e0c
 8004980:	20000c23 	.word	0x20000c23
 8004984:	20000c4d 	.word	0x20000c4d
 8004988:	20000c50 	.word	0x20000c50
 800498c:	20000c51 	.word	0x20000c51
 8004990:	20000c52 	.word	0x20000c52
 8004994:	20000c53 	.word	0x20000c53
 8004998:	20000c54 	.word	0x20000c54
 800499c:	20000c55 	.word	0x20000c55
 80049a0:	20000c65 	.word	0x20000c65
 80049a4:	20000c56 	.word	0x20000c56
 80049a8:	20000c66 	.word	0x20000c66
 80049ac:	20000c57 	.word	0x20000c57
 80049b0:	20000c67 	.word	0x20000c67
 80049b4:	20000c5a 	.word	0x20000c5a
 80049b8:	20000c5b 	.word	0x20000c5b
 80049bc:	20000c5c 	.word	0x20000c5c
 80049c0:	20000c5d 	.word	0x20000c5d
 80049c4:	20000c5e 	.word	0x20000c5e
 80049c8:	20000c5f 	.word	0x20000c5f
 80049cc:	20000c60 	.word	0x20000c60
 80049d0:	20000c61 	.word	0x20000c61
 80049d4:	20000c62 	.word	0x20000c62
 80049d8:	20000c63 	.word	0x20000c63
 80049dc:	20000c64 	.word	0x20000c64
 80049e0:	20000c68 	.word	0x20000c68
 80049e4:	20000c6a 	.word	0x20000c6a
 80049e8:	20000c48 	.word	0x20000c48
 80049ec:	20000c49 	.word	0x20000c49
 80049f0:	20000c4a 	.word	0x20000c4a
 80049f4:	20000910 	.word	0x20000910
 80049f8:	20000911 	.word	0x20000911
 80049fc:	20000c4b 	.word	0x20000c4b
 8004a00:	20000c6c 	.word	0x20000c6c
 8004a04:	20000c59 	.word	0x20000c59
 8004a08:	20000c6b 	.word	0x20000c6b
 8004a0c:	20000c58 	.word	0x20000c58
 8004a10:	20000c6d 	.word	0x20000c6d
 8004a14:	20000c6e 	.word	0x20000c6e
 8004a18:	20000c6f 	.word	0x20000c6f
 8004a1c:	20000c70 	.word	0x20000c70
 8004a20:	20000c71 	.word	0x20000c71
 8004a24:	20000c72 	.word	0x20000c72
 8004a28:	20000c73 	.word	0x20000c73
 8004a2c:	20000c74 	.word	0x20000c74
 8004a30:	20000c75 	.word	0x20000c75
 8004a34:	20000c76 	.word	0x20000c76
	    kapi1AcSure=5;
 8004a38:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <eepromKontrol+0x46c>)
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004a3e:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <eepromKontrol+0x470>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d902      	bls.n	8004a4c <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004a46:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <eepromKontrol+0x470>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004a4c:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <eepromKontrol+0x474>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d902      	bls.n	8004a5a <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <eepromKontrol+0x474>)
 8004a56:	2205      	movs	r2, #5
 8004a58:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004a5a:	4b45      	ldr	r3, [pc, #276]	; (8004b70 <eepromKontrol+0x478>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d902      	bls.n	8004a68 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004a62:	4b43      	ldr	r3, [pc, #268]	; (8004b70 <eepromKontrol+0x478>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004a68:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <eepromKontrol+0x47c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d902      	bls.n	8004a76 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004a70:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <eepromKontrol+0x47c>)
 8004a72:	2202      	movs	r2, #2
 8004a74:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004a76:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <eepromKontrol+0x480>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d902      	bls.n	8004a84 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <eepromKontrol+0x480>)
 8004a80:	2205      	movs	r2, #5
 8004a82:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004a84:	4b3d      	ldr	r3, [pc, #244]	; (8004b7c <eepromKontrol+0x484>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d902      	bls.n	8004a92 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <eepromKontrol+0x484>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <eepromKontrol+0x488>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004a9a:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <eepromKontrol+0x488>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004aa0:	4b38      	ldr	r3, [pc, #224]	; (8004b84 <eepromKontrol+0x48c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d902      	bls.n	8004aae <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <eepromKontrol+0x48c>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004aae:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <eepromKontrol+0x490>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d902      	bls.n	8004abc <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <eepromKontrol+0x490>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004abc:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <eepromKontrol+0x494>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d902      	bls.n	8004aca <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004ac4:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <eepromKontrol+0x494>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <eepromKontrol+0x498>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d902      	bls.n	8004ad8 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <eepromKontrol+0x498>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004ad8:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <eepromKontrol+0x49c>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d902      	bls.n	8004ae6 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004ae0:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <eepromKontrol+0x49c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <eepromKontrol+0x4a0>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d902      	bls.n	8004af4 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <eepromKontrol+0x4a0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <eepromKontrol+0x4a4>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d902      	bls.n	8004b02 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004afc:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <eepromKontrol+0x4a4>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <eepromKontrol+0x4a8>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d902      	bls.n	8004b10 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <eepromKontrol+0x4a8>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <eepromKontrol+0x4ac>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2bb4      	cmp	r3, #180	; 0xb4
 8004b16:	d902      	bls.n	8004b1e <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <eepromKontrol+0x4ac>)
 8004b1a:	223c      	movs	r2, #60	; 0x3c
 8004b1c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <eepromKontrol+0x4b0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d902      	bls.n	8004b2c <eepromKontrol+0x434>
	    buzzer=0;
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <eepromKontrol+0x4b0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <eepromKontrol+0x4b4>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d902      	bls.n	8004b3a <eepromKontrol+0x442>
	    demoMode=0;
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <eepromKontrol+0x4b4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <eepromKontrol+0x4b8>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d902      	bls.n	8004b48 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <eepromKontrol+0x4b8>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <eepromKontrol+0x4bc>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d902      	bls.n	8004b56 <eepromKontrol+0x45e>
	    dilSecim=0;
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <eepromKontrol+0x4bc>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b5a:	f002 fdf5 	bl	8007748 <HAL_Delay>
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000c65 	.word	0x20000c65
 8004b68:	20000c56 	.word	0x20000c56
 8004b6c:	20000c66 	.word	0x20000c66
 8004b70:	20000c57 	.word	0x20000c57
 8004b74:	20000c59 	.word	0x20000c59
 8004b78:	20000c67 	.word	0x20000c67
 8004b7c:	20000c5a 	.word	0x20000c5a
 8004b80:	20000c5b 	.word	0x20000c5b
 8004b84:	20000c5c 	.word	0x20000c5c
 8004b88:	20000c5d 	.word	0x20000c5d
 8004b8c:	20000c5e 	.word	0x20000c5e
 8004b90:	20000c5f 	.word	0x20000c5f
 8004b94:	20000c60 	.word	0x20000c60
 8004b98:	20000c61 	.word	0x20000c61
 8004b9c:	20000c62 	.word	0x20000c62
 8004ba0:	20000c63 	.word	0x20000c63
 8004ba4:	20000c64 	.word	0x20000c64
 8004ba8:	20000c68 	.word	0x20000c68
 8004bac:	20000c6a 	.word	0x20000c6a
 8004bb0:	20000c6b 	.word	0x20000c6b
 8004bb4:	20000c6c 	.word	0x20000c6c

08004bb8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004bc8:	6013      	str	r3, [r2, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	20000c2c 	.word	0x20000c2c

08004bd8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004bd8:	b5b0      	push	{r4, r5, r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bde:	f002 fd51 	bl	8007684 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8004be2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004be6:	f002 fdaf 	bl	8007748 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004bea:	f002 f98b 	bl	8006f04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bee:	f002 faad 	bl	800714c <MX_GPIO_Init>
  MX_CAN_Init();
 8004bf2:	f002 f9cd 	bl	8006f90 <MX_CAN_Init>
  MX_I2C1_Init();
 8004bf6:	f002 f9ff 	bl	8006ff8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004bfa:	f002 fa2b 	bl	8007054 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004bfe:	f002 fa7b 	bl	80070f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004c02:	2201      	movs	r2, #1
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	484e      	ldr	r0, [pc, #312]	; (8004d40 <main+0x168>)
 8004c08:	f003 fa43 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	484b      	ldr	r0, [pc, #300]	; (8004d40 <main+0x168>)
 8004c12:	f003 fa3e 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004c16:	200a      	movs	r0, #10
 8004c18:	f002 fd96 	bl	8007748 <HAL_Delay>
  lcd_init();
 8004c1c:	f7fb fbb9 	bl	8000392 <lcd_init>
  HAL_Delay(10);
 8004c20:	200a      	movs	r0, #10
 8004c22:	f002 fd91 	bl	8007748 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8004c26:	4847      	ldr	r0, [pc, #284]	; (8004d44 <main+0x16c>)
 8004c28:	f005 f896 	bl	8009d58 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004c2c:	bf00      	nop
 8004c2e:	4846      	ldr	r0, [pc, #280]	; (8004d48 <main+0x170>)
 8004c30:	f004 f841 	bl	8008cb6 <HAL_I2C_GetError>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d0f9      	beq.n	8004c2e <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004c3a:	bf00      	nop
 8004c3c:	4842      	ldr	r0, [pc, #264]	; (8004d48 <main+0x170>)
 8004c3e:	f004 f82d 	bl	8008c9c <HAL_I2C_GetState>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d1f9      	bne.n	8004c3c <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c4e:	483c      	ldr	r0, [pc, #240]	; (8004d40 <main+0x168>)
 8004c50:	f003 fa1f 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c5a:	4839      	ldr	r0, [pc, #228]	; (8004d40 <main+0x168>)
 8004c5c:	f003 fa19 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2104      	movs	r1, #4
 8004c64:	4836      	ldr	r0, [pc, #216]	; (8004d40 <main+0x168>)
 8004c66:	f003 fa14 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	4834      	ldr	r0, [pc, #208]	; (8004d40 <main+0x168>)
 8004c70:	f003 fa0f 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004c74:	2200      	movs	r2, #0
 8004c76:	2101      	movs	r1, #1
 8004c78:	4831      	ldr	r0, [pc, #196]	; (8004d40 <main+0x168>)
 8004c7a:	f003 fa0a 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2120      	movs	r1, #32
 8004c82:	4832      	ldr	r0, [pc, #200]	; (8004d4c <main+0x174>)
 8004c84:	f003 fa05 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	482f      	ldr	r0, [pc, #188]	; (8004d4c <main+0x174>)
 8004c8e:	f003 fa00 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	482e      	ldr	r0, [pc, #184]	; (8004d50 <main+0x178>)
 8004c98:	f003 f9fb 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	; 0x40
 8004ca0:	482b      	ldr	r0, [pc, #172]	; (8004d50 <main+0x178>)
 8004ca2:	f003 f9f6 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2120      	movs	r1, #32
 8004caa:	4829      	ldr	r0, [pc, #164]	; (8004d50 <main+0x178>)
 8004cac:	f003 f9f1 	bl	8008092 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2110      	movs	r1, #16
 8004cb4:	4826      	ldr	r0, [pc, #152]	; (8004d50 <main+0x178>)
 8004cb6:	f003 f9ec 	bl	8008092 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, &RxByte, 1);
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4925      	ldr	r1, [pc, #148]	; (8004d54 <main+0x17c>)
 8004cbe:	4826      	ldr	r0, [pc, #152]	; (8004d58 <main+0x180>)
 8004cc0:	f005 fc75 	bl	800a5ae <HAL_UART_Receive_IT>

  i2cTest();
 8004cc4:	f000 f858 	bl	8004d78 <i2cTest>
  HAL_Delay(100);
 8004cc8:	2064      	movs	r0, #100	; 0x64
 8004cca:	f002 fd3d 	bl	8007748 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8004cce:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <main+0x184>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f7fb fb8c 	bl	80003f0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8004cd8:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <main+0x188>)
 8004cda:	2101      	movs	r1, #1
 8004cdc:	2002      	movs	r0, #2
 8004cde:	f7fb fb87 	bl	80003f0 <lcd_print>
  HAL_Delay(1000);
 8004ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ce6:	f002 fd2f 	bl	8007748 <HAL_Delay>
  lcd_clear();
 8004cea:	f7fb fb96 	bl	800041a <lcd_clear>

  eepromKontrol();
 8004cee:	f7ff fd03 	bl	80046f8 <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <main+0x18c>)
 8004cf4:	1d3c      	adds	r4, r7, #4
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f005 fd65 	bl	800a7d8 <osThreadCreate>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <main+0x190>)
 8004d12:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 8004d14:	2001      	movs	r0, #1
 8004d16:	f005 ff4e 	bl	800abb6 <xQueueCreateMutex>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <main+0x194>)
 8004d1e:	6013      	str	r3, [r2, #0]
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004d20:	2300      	movs	r3, #0
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	2301      	movs	r3, #1
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2280      	movs	r2, #128	; 0x80
 8004d2c:	4910      	ldr	r1, [pc, #64]	; (8004d70 <main+0x198>)
 8004d2e:	4811      	ldr	r0, [pc, #68]	; (8004d74 <main+0x19c>)
 8004d30:	f006 f988 	bl	800b044 <xTaskCreate>

  vTaskStartScheduler();
 8004d34:	f006 fae8 	bl	800b308 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004d38:	f005 fd47 	bl	800a7ca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004d3c:	e7fe      	b.n	8004d3c <main+0x164>
 8004d3e:	bf00      	nop
 8004d40:	40010c00 	.word	0x40010c00
 8004d44:	20000ea8 	.word	0x20000ea8
 8004d48:	20000e0c 	.word	0x20000e0c
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40010800 	.word	0x40010800
 8004d54:	20000de0 	.word	0x20000de0
 8004d58:	20000e60 	.word	0x20000e60
 8004d5c:	0800d3a4 	.word	0x0800d3a4
 8004d60:	0800d3b8 	.word	0x0800d3b8
 8004d64:	0800d3e4 	.word	0x0800d3e4
 8004d68:	20000ef0 	.word	0x20000ef0
 8004d6c:	20000ea4 	.word	0x20000ea4
 8004d70:	0800d3cc 	.word	0x0800d3cc
 8004d74:	08004ed5 	.word	0x08004ed5

08004d78 <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004d7e:	463b      	mov	r3, r7
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004d8a:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <i2cTest+0x154>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b4e      	ldr	r3, [pc, #312]	; (8004ecc <i2cTest+0x154>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004d9a:	484c      	ldr	r0, [pc, #304]	; (8004ecc <i2cTest+0x154>)
 8004d9c:	f003 faee 	bl	800837c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004da0:	23c0      	movs	r3, #192	; 0xc0
 8004da2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004da4:	2311      	movs	r3, #17
 8004da6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004dac:	2303      	movs	r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004db0:	463b      	mov	r3, r7
 8004db2:	4619      	mov	r1, r3
 8004db4:	4846      	ldr	r0, [pc, #280]	; (8004ed0 <i2cTest+0x158>)
 8004db6:	f002 fef5 	bl	8007ba4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	4844      	ldr	r0, [pc, #272]	; (8004ed0 <i2cTest+0x158>)
 8004dc0:	f003 f967 	bl	8008092 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	4841      	ldr	r0, [pc, #260]	; (8004ed0 <i2cTest+0x158>)
 8004dca:	f003 f962 	bl	8008092 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8004dce:	200a      	movs	r0, #10
 8004dd0:	f002 fcba 	bl	8007748 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004dd4:	bf00      	nop
 8004dd6:	2140      	movs	r1, #64	; 0x40
 8004dd8:	483d      	ldr	r0, [pc, #244]	; (8004ed0 <i2cTest+0x158>)
 8004dda:	f003 f943 	bl	8008064 <HAL_GPIO_ReadPin>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d006      	beq.n	8004df2 <i2cTest+0x7a>
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	483a      	ldr	r0, [pc, #232]	; (8004ed0 <i2cTest+0x158>)
 8004de8:	f003 f93c 	bl	8008064 <HAL_GPIO_ReadPin>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d1f1      	bne.n	8004dd6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004df2:	2200      	movs	r2, #0
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	4836      	ldr	r0, [pc, #216]	; (8004ed0 <i2cTest+0x158>)
 8004df8:	f003 f94b 	bl	8008092 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004dfc:	200a      	movs	r0, #10
 8004dfe:	f002 fca3 	bl	8007748 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8004e02:	bf00      	nop
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	4832      	ldr	r0, [pc, #200]	; (8004ed0 <i2cTest+0x158>)
 8004e08:	f003 f92c 	bl	8008064 <HAL_GPIO_ReadPin>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d0f8      	beq.n	8004e04 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	482e      	ldr	r0, [pc, #184]	; (8004ed0 <i2cTest+0x158>)
 8004e18:	f003 f93b 	bl	8008092 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e1c:	200a      	movs	r0, #10
 8004e1e:	f002 fc93 	bl	8007748 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8004e22:	bf00      	nop
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	482a      	ldr	r0, [pc, #168]	; (8004ed0 <i2cTest+0x158>)
 8004e28:	f003 f91c 	bl	8008064 <HAL_GPIO_ReadPin>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d0f8      	beq.n	8004e24 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004e32:	2201      	movs	r2, #1
 8004e34:	2140      	movs	r1, #64	; 0x40
 8004e36:	4826      	ldr	r0, [pc, #152]	; (8004ed0 <i2cTest+0x158>)
 8004e38:	f003 f92b 	bl	8008092 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e3c:	200a      	movs	r0, #10
 8004e3e:	f002 fc83 	bl	8007748 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8004e42:	bf00      	nop
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	4822      	ldr	r0, [pc, #136]	; (8004ed0 <i2cTest+0x158>)
 8004e48:	f003 f90c 	bl	8008064 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d1f8      	bne.n	8004e44 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004e52:	2201      	movs	r2, #1
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	481e      	ldr	r0, [pc, #120]	; (8004ed0 <i2cTest+0x158>)
 8004e58:	f003 f91b 	bl	8008092 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f002 fc73 	bl	8007748 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004e62:	bf00      	nop
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	481a      	ldr	r0, [pc, #104]	; (8004ed0 <i2cTest+0x158>)
 8004e68:	f003 f8fc 	bl	8008064 <HAL_GPIO_ReadPin>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d1f8      	bne.n	8004e64 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e72:	23c0      	movs	r3, #192	; 0xc0
 8004e74:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004e76:	2312      	movs	r3, #18
 8004e78:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004e82:	463b      	mov	r3, r7
 8004e84:	4619      	mov	r1, r3
 8004e86:	4812      	ldr	r0, [pc, #72]	; (8004ed0 <i2cTest+0x158>)
 8004e88:	f002 fe8c 	bl	8007ba4 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <i2cTest+0x154>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <i2cTest+0x154>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <i2cTest+0x154>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <i2cTest+0x154>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <i2cTest+0x154>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <i2cTest+0x154>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <i2cTest+0x154>)
 8004ebe:	f003 f919 	bl	80080f4 <HAL_I2C_Init>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000e0c 	.word	0x20000e0c
 8004ed0:	40010c00 	.word	0x40010c00

08004ed4 <mainTask>:

void mainTask(void *pvParameters) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af04      	add	r7, sp, #16
 8004eda:	6078      	str	r0, [r7, #4]
	while(1) {
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8004edc:	2101      	movs	r1, #1
 8004ede:	48a1      	ldr	r0, [pc, #644]	; (8005164 <mainTask+0x290>)
 8004ee0:	f003 f8c0 	bl	8008064 <HAL_GPIO_ReadPin>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d135      	bne.n	8004f56 <mainTask+0x82>
 8004eea:	2108      	movs	r1, #8
 8004eec:	489e      	ldr	r0, [pc, #632]	; (8005168 <mainTask+0x294>)
 8004eee:	f003 f8b9 	bl	8008064 <HAL_GPIO_ReadPin>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d12e      	bne.n	8004f56 <mainTask+0x82>
 8004ef8:	2102      	movs	r1, #2
 8004efa:	489a      	ldr	r0, [pc, #616]	; (8005164 <mainTask+0x290>)
 8004efc:	f003 f8b2 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d127      	bne.n	8004f56 <mainTask+0x82>
 8004f06:	2104      	movs	r1, #4
 8004f08:	4896      	ldr	r0, [pc, #600]	; (8005164 <mainTask+0x290>)
 8004f0a:	f003 f8ab 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d120      	bne.n	8004f56 <mainTask+0x82>
 8004f14:	2108      	movs	r1, #8
 8004f16:	4893      	ldr	r0, [pc, #588]	; (8005164 <mainTask+0x290>)
 8004f18:	f003 f8a4 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <mainTask+0x82>
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	4890      	ldr	r0, [pc, #576]	; (8005168 <mainTask+0x294>)
 8004f26:	f003 f89d 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d112      	bne.n	8004f56 <mainTask+0x82>
 8004f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f34:	488c      	ldr	r0, [pc, #560]	; (8005168 <mainTask+0x294>)
 8004f36:	f003 f895 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10a      	bne.n	8004f56 <mainTask+0x82>
 8004f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f44:	4888      	ldr	r0, [pc, #544]	; (8005168 <mainTask+0x294>)
 8004f46:	f003 f88d 	bl	8008064 <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d102      	bne.n	8004f56 <mainTask+0x82>
				   {
					   butonKontrol=0;
 8004f50:	4b86      	ldr	r3, [pc, #536]	; (800516c <mainTask+0x298>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
				   }

				  if(hafizaYaz==1){
 8004f56:	4b86      	ldr	r3, [pc, #536]	; (8005170 <mainTask+0x29c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d038      	beq.n	8004fd0 <mainTask+0xfc>
					  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004f5e:	bf00      	nop
 8004f60:	4884      	ldr	r0, [pc, #528]	; (8005174 <mainTask+0x2a0>)
 8004f62:	f003 fea8 	bl	8008cb6 <HAL_I2C_GetError>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d0f9      	beq.n	8004f60 <mainTask+0x8c>
					  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8004f6c:	bf00      	nop
 8004f6e:	4881      	ldr	r0, [pc, #516]	; (8005174 <mainTask+0x2a0>)
 8004f70:	f003 fe94 	bl	8008c9c <HAL_I2C_GetState>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d1f9      	bne.n	8004f6e <mainTask+0x9a>

					  }
					  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004f7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004f7e:	9302      	str	r3, [sp, #8]
 8004f80:	233f      	movs	r3, #63	; 0x3f
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	4b7c      	ldr	r3, [pc, #496]	; (8005178 <mainTask+0x2a4>)
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	233f      	movs	r3, #63	; 0x3f
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	21a0      	movs	r1, #160	; 0xa0
 8004f8e:	4879      	ldr	r0, [pc, #484]	; (8005174 <mainTask+0x2a0>)
 8004f90:	f003 fb22 	bl	80085d8 <HAL_I2C_Mem_Write>
					  HAL_Delay(5);
 8004f94:	2005      	movs	r0, #5
 8004f96:	f002 fbd7 	bl	8007748 <HAL_Delay>
					  hafizaYaz=0;
 8004f9a:	4b75      	ldr	r3, [pc, #468]	; (8005170 <mainTask+0x29c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
					  if(dilSecim==0){
 8004fa0:	4b76      	ldr	r3, [pc, #472]	; (800517c <mainTask+0x2a8>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <mainTask+0xde>
						  lcd_print(2,1,"Data yazildi    ");
 8004fa8:	4a75      	ldr	r2, [pc, #468]	; (8005180 <mainTask+0x2ac>)
 8004faa:	2101      	movs	r1, #1
 8004fac:	2002      	movs	r0, #2
 8004fae:	f7fb fa1f 	bl	80003f0 <lcd_print>
					  }
					  if(dilSecim==1){
 8004fb2:	4b72      	ldr	r3, [pc, #456]	; (800517c <mainTask+0x2a8>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d104      	bne.n	8004fc4 <mainTask+0xf0>
						  lcd_print(2,1,"Data Wrote      ");
 8004fba:	4a72      	ldr	r2, [pc, #456]	; (8005184 <mainTask+0x2b0>)
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	2002      	movs	r0, #2
 8004fc0:	f7fb fa16 	bl	80003f0 <lcd_print>
					  }
					  HAL_Delay(1000);
 8004fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fc8:	f002 fbbe 	bl	8007748 <HAL_Delay>
					  lcd_clear();
 8004fcc:	f7fb fa25 	bl	800041a <lcd_clear>
				  }

				  if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)){
 8004fd0:	4b6d      	ldr	r3, [pc, #436]	; (8005188 <mainTask+0x2b4>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f083 0301 	eor.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d068      	beq.n	80050b0 <mainTask+0x1dc>
 8004fde:	4865      	ldr	r0, [pc, #404]	; (8005174 <mainTask+0x2a0>)
 8004fe0:	f003 fe5c 	bl	8008c9c <HAL_I2C_GetState>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d162      	bne.n	80050b0 <mainTask+0x1dc>
					  if(ilkOkuma==0){
 8004fea:	4b68      	ldr	r3, [pc, #416]	; (800518c <mainTask+0x2b8>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f083 0301 	eor.w	r3, r3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d042      	beq.n	800507e <mainTask+0x1aa>
						  lcd_print(1,1,"   **EEPROM**   ");
 8004ff8:	4a65      	ldr	r2, [pc, #404]	; (8005190 <mainTask+0x2bc>)
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f7fb f9f7 	bl	80003f0 <lcd_print>
						  if(dilSecim==0){
 8005002:	4b5e      	ldr	r3, [pc, #376]	; (800517c <mainTask+0x2a8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <mainTask+0x140>
							  lcd_print(2,1,"Data Okunuyor...");
 800500a:	4a62      	ldr	r2, [pc, #392]	; (8005194 <mainTask+0x2c0>)
 800500c:	2101      	movs	r1, #1
 800500e:	2002      	movs	r0, #2
 8005010:	f7fb f9ee 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <mainTask+0x2a8>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d104      	bne.n	8005026 <mainTask+0x152>
							  lcd_print(2,1,"Data Reading... ");
 800501c:	4a5e      	ldr	r2, [pc, #376]	; (8005198 <mainTask+0x2c4>)
 800501e:	2101      	movs	r1, #1
 8005020:	2002      	movs	r0, #2
 8005022:	f7fb f9e5 	bl	80003f0 <lcd_print>
						  }
						  HAL_Delay(1000);
 8005026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800502a:	f002 fb8d 	bl	8007748 <HAL_Delay>
						  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800502e:	bf00      	nop
 8005030:	4850      	ldr	r0, [pc, #320]	; (8005174 <mainTask+0x2a0>)
 8005032:	f003 fe40 	bl	8008cb6 <HAL_I2C_GetError>
 8005036:	4603      	mov	r3, r0
 8005038:	2b04      	cmp	r3, #4
 800503a:	d0f9      	beq.n	8005030 <mainTask+0x15c>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800503c:	e003      	b.n	8005046 <mainTask+0x172>
							  HAL_Delay(1000);
 800503e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005042:	f002 fb81 	bl	8007748 <HAL_Delay>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8005046:	484b      	ldr	r0, [pc, #300]	; (8005174 <mainTask+0x2a0>)
 8005048:	f003 fe28 	bl	8008c9c <HAL_I2C_GetState>
 800504c:	4603      	mov	r3, r0
 800504e:	2b20      	cmp	r3, #32
 8005050:	d1f5      	bne.n	800503e <mainTask+0x16a>
						  }
						  if(dilSecim==0){
 8005052:	4b4a      	ldr	r3, [pc, #296]	; (800517c <mainTask+0x2a8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <mainTask+0x190>
							  lcd_print(2,1,"Data Okundu.    ");
 800505a:	4a50      	ldr	r2, [pc, #320]	; (800519c <mainTask+0x2c8>)
 800505c:	2101      	movs	r1, #1
 800505e:	2002      	movs	r0, #2
 8005060:	f7fb f9c6 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 8005064:	4b45      	ldr	r3, [pc, #276]	; (800517c <mainTask+0x2a8>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d104      	bne.n	8005076 <mainTask+0x1a2>
							  lcd_print(2,1,"Data Read.      ");
 800506c:	4a4c      	ldr	r2, [pc, #304]	; (80051a0 <mainTask+0x2cc>)
 800506e:	2101      	movs	r1, #1
 8005070:	2002      	movs	r0, #2
 8005072:	f7fb f9bd 	bl	80003f0 <lcd_print>
						  }
						  ilkOkuma=1;
 8005076:	4b45      	ldr	r3, [pc, #276]	; (800518c <mainTask+0x2b8>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e013      	b.n	80050a6 <mainTask+0x1d2>
					  }
					  else{
						  if(dilSecim==0){
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <mainTask+0x2a8>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <mainTask+0x1bc>
							  lcd_print(2,1,"Deger Kaydedildi");
 8005086:	4a47      	ldr	r2, [pc, #284]	; (80051a4 <mainTask+0x2d0>)
 8005088:	2101      	movs	r1, #1
 800508a:	2002      	movs	r0, #2
 800508c:	f7fb f9b0 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 8005090:	4b3a      	ldr	r3, [pc, #232]	; (800517c <mainTask+0x2a8>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d104      	bne.n	80050a2 <mainTask+0x1ce>
							  lcd_print(2,1,"Value Saved     ");
 8005098:	4a43      	ldr	r2, [pc, #268]	; (80051a8 <mainTask+0x2d4>)
 800509a:	2101      	movs	r1, #1
 800509c:	2002      	movs	r0, #2
 800509e:	f7fb f9a7 	bl	80003f0 <lcd_print>
						  }
						  lcd_clear();
 80050a2:	f7fb f9ba 	bl	800041a <lcd_clear>
					  }

					  eepromKontrol();
 80050a6:	f7ff fb27 	bl	80046f8 <eepromKontrol>
					  hafizaOku=1;
 80050aa:	4b37      	ldr	r3, [pc, #220]	; (8005188 <mainTask+0x2b4>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
				  }

				  if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)){
 80050b0:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <mainTask+0x2d8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d120      	bne.n	80050fa <mainTask+0x226>
 80050b8:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <mainTask+0x2dc>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f083 0301 	eor.w	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <mainTask+0x226>
 80050c6:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <mainTask+0x2e0>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d115      	bne.n	80050fa <mainTask+0x226>
					  lcd_clear();
 80050ce:	f7fb f9a4 	bl	800041a <lcd_clear>
					  HAL_Delay(10);
 80050d2:	200a      	movs	r0, #10
 80050d4:	f002 fb38 	bl	8007748 <HAL_Delay>
					  lcd_print(1, 1, mainText);
 80050d8:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <mainTask+0x2e4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	2101      	movs	r1, #1
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fb f985 	bl	80003f0 <lcd_print>
					  lcd_print(2, 1, mainText2);
 80050e6:	4b35      	ldr	r3, [pc, #212]	; (80051bc <mainTask+0x2e8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	2101      	movs	r1, #1
 80050ee:	2002      	movs	r0, #2
 80050f0:	f7fb f97e 	bl	80003f0 <lcd_print>
					  mesajYazildi=1;
 80050f4:	4b2e      	ldr	r3, [pc, #184]	; (80051b0 <mainTask+0x2dc>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	701a      	strb	r2, [r3, #0]
				  }

				  if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1))
 80050fa:	4b2c      	ldr	r3, [pc, #176]	; (80051ac <mainTask+0x2d8>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d112      	bne.n	8005128 <mainTask+0x254>
 8005102:	2102      	movs	r1, #2
 8005104:	4817      	ldr	r0, [pc, #92]	; (8005164 <mainTask+0x290>)
 8005106:	f002 ffad 	bl	8008064 <HAL_GPIO_ReadPin>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10b      	bne.n	8005128 <mainTask+0x254>
 8005110:	2104      	movs	r1, #4
 8005112:	4814      	ldr	r0, [pc, #80]	; (8005164 <mainTask+0x290>)
 8005114:	f002 ffa6 	bl	8008064 <HAL_GPIO_ReadPin>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d104      	bne.n	8005128 <mainTask+0x254>
				  {
					  menuGiris=1;
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <mainTask+0x2d8>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8005124:	f7fb f979 	bl	800041a <lcd_clear>
				  }
				  if(menuGiris==1){
 8005128:	4b20      	ldr	r3, [pc, #128]	; (80051ac <mainTask+0x2d8>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <mainTask+0x260>
					  menu();
 8005130:	f7fb f9ae 	bl	8000490 <menu>
				  }
				  HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005138:	480b      	ldr	r0, [pc, #44]	; (8005168 <mainTask+0x294>)
 800513a:	f002 ffc2 	bl	80080c2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

				  if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0){
 800513e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005142:	481f      	ldr	r0, [pc, #124]	; (80051c0 <mainTask+0x2ec>)
 8005144:	f002 ff8e 	bl	8008064 <HAL_GPIO_ReadPin>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d13e      	bne.n	80051cc <mainTask+0x2f8>
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <mainTask+0x2f0>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	f083 0301 	eor.w	r3, r3, #1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d037      	beq.n	80051cc <mainTask+0x2f8>

					  stopVar=1;
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <mainTask+0x2f4>)
 800515e:	2201      	movs	r2, #1
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e036      	b.n	80051d2 <mainTask+0x2fe>
 8005164:	40010800 	.word	0x40010800
 8005168:	40011000 	.word	0x40011000
 800516c:	20000c7a 	.word	0x20000c7a
 8005170:	20000c77 	.word	0x20000c77
 8005174:	20000e0c 	.word	0x20000e0c
 8005178:	20000be4 	.word	0x20000be4
 800517c:	20000c6c 	.word	0x20000c6c
 8005180:	0800d400 	.word	0x0800d400
 8005184:	0800d414 	.word	0x0800d414
 8005188:	20000c78 	.word	0x20000c78
 800518c:	20000c79 	.word	0x20000c79
 8005190:	0800d428 	.word	0x0800d428
 8005194:	0800d43c 	.word	0x0800d43c
 8005198:	0800d450 	.word	0x0800d450
 800519c:	0800d464 	.word	0x0800d464
 80051a0:	0800d478 	.word	0x0800d478
 80051a4:	0800d48c 	.word	0x0800d48c
 80051a8:	0800d4a0 	.word	0x0800d4a0
 80051ac:	20000c69 	.word	0x20000c69
 80051b0:	20000c7f 	.word	0x20000c7f
 80051b4:	20000c6a 	.word	0x20000c6a
 80051b8:	20000cb0 	.word	0x20000cb0
 80051bc:	20000cb4 	.word	0x20000cb4
 80051c0:	40010c00 	.word	0x40010c00
 80051c4:	20000ca0 	.word	0x20000ca0
 80051c8:	20000c9d 	.word	0x20000c9d
				  }

				  else{
					  stopVar=0;
 80051cc:	4b70      	ldr	r3, [pc, #448]	; (8005390 <mainTask+0x4bc>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
				  }

		/****************************************  BASINC SALTERI ********************************************/
				  if(basincSalteri==0){
 80051d2:	4b70      	ldr	r3, [pc, #448]	; (8005394 <mainTask+0x4c0>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <mainTask+0x30c>
				 		basincVar=1;
 80051da:	4b6f      	ldr	r3, [pc, #444]	; (8005398 <mainTask+0x4c4>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
				 	}

					  if(basincSalteri==1)
 80051e0:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <mainTask+0x4c0>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d119      	bne.n	800521c <mainTask+0x348>
					  {
						  if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0)
 80051e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ec:	486b      	ldr	r0, [pc, #428]	; (800539c <mainTask+0x4c8>)
 80051ee:	f002 ff39 	bl	8008064 <HAL_GPIO_ReadPin>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <mainTask+0x33a>
						  {
							  if(millis-timer5>=3){
 80051f8:	4b69      	ldr	r3, [pc, #420]	; (80053a0 <mainTask+0x4cc>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <mainTask+0x4d0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d90a      	bls.n	800521c <mainTask+0x348>
								  basincVar=1;
 8005206:	4b64      	ldr	r3, [pc, #400]	; (8005398 <mainTask+0x4c4>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e006      	b.n	800521c <mainTask+0x348>
							  }
						  }
						  else
						 	{
							  timer5=millis;
 800520e:	4b64      	ldr	r3, [pc, #400]	; (80053a0 <mainTask+0x4cc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a64      	ldr	r2, [pc, #400]	; (80053a4 <mainTask+0x4d0>)
 8005214:	6013      	str	r3, [r2, #0]
						  	  basincVar=0;
 8005216:	4b60      	ldr	r3, [pc, #384]	; (8005398 <mainTask+0x4c4>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
						 	}
					  }

				  /******** Bas gönder ***********/

				  if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 800521c:	4b62      	ldr	r3, [pc, #392]	; (80053a8 <mainTask+0x4d4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10b      	bne.n	800523c <mainTask+0x368>
 8005224:	4b61      	ldr	r3, [pc, #388]	; (80053ac <mainTask+0x4d8>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <mainTask+0x368>
 800522c:	4b60      	ldr	r3, [pc, #384]	; (80053b0 <mainTask+0x4dc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <mainTask+0x368>

					  basgondercalisyukari=1;
 8005234:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <mainTask+0x4e0>)
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e009      	b.n	8005250 <mainTask+0x37c>
				  }
				  else if(yukarimotorcalisiyor==0)
 800523c:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <mainTask+0x4d8>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f083 0301 	eor.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <mainTask+0x37c>

					  basgondercalisyukari=0;
 800524a:	4b5a      	ldr	r3, [pc, #360]	; (80053b4 <mainTask+0x4e0>)
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]

				  if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 8005250:	4b55      	ldr	r3, [pc, #340]	; (80053a8 <mainTask+0x4d4>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10b      	bne.n	8005270 <mainTask+0x39c>
 8005258:	4b57      	ldr	r3, [pc, #348]	; (80053b8 <mainTask+0x4e4>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <mainTask+0x39c>
 8005260:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <mainTask+0x4dc>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <mainTask+0x39c>

					  basgondercalisasagi=1;
 8005268:	4b54      	ldr	r3, [pc, #336]	; (80053bc <mainTask+0x4e8>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e009      	b.n	8005284 <mainTask+0x3b0>
				  }
				  else if(asagivalfcalisiyor==0)
 8005270:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <mainTask+0x4e4>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f083 0301 	eor.w	r3, r3, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <mainTask+0x3b0>
					  basgondercalisasagi=0;
 800527e:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <mainTask+0x4e8>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

				  /******** Kapı Secimleri ***********/

				  if(kapiSecimleri==0){
 8005284:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <mainTask+0x4ec>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <mainTask+0x3be>

					  kapiSivicVar=1;
 800528c:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <mainTask+0x4f0>)
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==1){
 8005292:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <mainTask+0x4ec>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10e      	bne.n	80052b8 <mainTask+0x3e4>

					  if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 800529a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800529e:	484a      	ldr	r0, [pc, #296]	; (80053c8 <mainTask+0x4f4>)
 80052a0:	f002 fee0 	bl	8008064 <HAL_GPIO_ReadPin>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <mainTask+0x3de>
						  kapiSivicVar=1;
 80052aa:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <mainTask+0x4f0>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <mainTask+0x3e4>
					  else
						  kapiSivicVar=0;
 80052b2:	4b44      	ldr	r3, [pc, #272]	; (80053c4 <mainTask+0x4f0>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==2){
 80052b8:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <mainTask+0x4ec>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d10e      	bne.n	80052de <mainTask+0x40a>

					  if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)
 80052c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c4:	4840      	ldr	r0, [pc, #256]	; (80053c8 <mainTask+0x4f4>)
 80052c6:	f002 fecd 	bl	8008064 <HAL_GPIO_ReadPin>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <mainTask+0x404>
						  kapiSivicVar=1;
 80052d0:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <mainTask+0x4f0>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e002      	b.n	80052de <mainTask+0x40a>
					  else
						  kapiSivicVar=0;
 80052d8:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <mainTask+0x4f0>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==3){
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <mainTask+0x4ec>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d116      	bne.n	8005314 <mainTask+0x440>

					  if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0))
 80052e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ea:	4837      	ldr	r0, [pc, #220]	; (80053c8 <mainTask+0x4f4>)
 80052ec:	f002 feba 	bl	8008064 <HAL_GPIO_ReadPin>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <mainTask+0x43a>
 80052f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052fa:	4833      	ldr	r0, [pc, #204]	; (80053c8 <mainTask+0x4f4>)
 80052fc:	f002 feb2 	bl	8008064 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <mainTask+0x43a>
						  kapiSivicVar=1;
 8005306:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <mainTask+0x4f0>)
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e002      	b.n	8005314 <mainTask+0x440>
					  else
						  kapiSivicVar=0;
 800530e:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <mainTask+0x4f0>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
				  }

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
				/*MOTOR CALISIYOR*/
				  if(demoMode==0 && menuGiris==0){
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <mainTask+0x4f8>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f041 833c 	bne.w	8006996 <mainTask+0x1ac2>
 800531e:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <mainTask+0x4fc>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f041 8337 	bne.w	8006996 <mainTask+0x1ac2>
				  if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar))
 8005328:	4b20      	ldr	r3, [pc, #128]	; (80053ac <mainTask+0x4d8>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11a      	bne.n	8005366 <mainTask+0x492>
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <mainTask+0x500>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <mainTask+0x492>
 8005338:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <mainTask+0x4e4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <mainTask+0x482>
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <mainTask+0x504>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f083 0301 	eor.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <mainTask+0x482>
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <mainTask+0x508>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d007      	beq.n	8005366 <mainTask+0x492>
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <mainTask+0x50c>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d04a      	beq.n	80053f4 <mainTask+0x520>
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <mainTask+0x510>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d146      	bne.n	80053f4 <mainTask+0x520>
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <mainTask+0x4bc>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d042      	beq.n	80053f4 <mainTask+0x520>
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <mainTask+0x4f0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03e      	beq.n	80053f4 <mainTask+0x520>

				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005376:	2201      	movs	r2, #1
 8005378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537c:	481a      	ldr	r0, [pc, #104]	; (80053e8 <mainTask+0x514>)
 800537e:	f002 fe88 	bl	8008092 <HAL_GPIO_WritePin>
					  motorcalisiyor=1;
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <mainTask+0x518>)
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiYukari=1;
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <mainTask+0x51c>)
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e03a      	b.n	8005406 <mainTask+0x532>
 8005390:	20000c9d 	.word	0x20000c9d
 8005394:	20000c53 	.word	0x20000c53
 8005398:	20000c4f 	.word	0x20000c4f
 800539c:	40011000 	.word	0x40011000
 80053a0:	20000c2c 	.word	0x20000c2c
 80053a4:	20000c44 	.word	0x20000c44
 80053a8:	20000c4d 	.word	0x20000c4d
 80053ac:	20000c80 	.word	0x20000c80
 80053b0:	20000c5b 	.word	0x20000c5b
 80053b4:	20000c87 	.word	0x20000c87
 80053b8:	20000c83 	.word	0x20000c83
 80053bc:	20000c88 	.word	0x20000c88
 80053c0:	20000c54 	.word	0x20000c54
 80053c4:	20000c9e 	.word	0x20000c9e
 80053c8:	40010800 	.word	0x40010800
 80053cc:	20000c6a 	.word	0x20000c6a
 80053d0:	20000c69 	.word	0x20000c69
 80053d4:	20000c81 	.word	0x20000c81
 80053d8:	20000c7b 	.word	0x20000c7b
 80053dc:	20000c5f 	.word	0x20000c5f
 80053e0:	20000c82 	.word	0x20000c82
 80053e4:	20000c5e 	.word	0x20000c5e
 80053e8:	40010c00 	.word	0x40010c00
 80053ec:	20000c9f 	.word	0x20000c9f
 80053f0:	20000c8a 	.word	0x20000c8a
				  }
				  else
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053fa:	4891      	ldr	r0, [pc, #580]	; (8005640 <mainTask+0x76c>)
 80053fc:	f002 fe49 	bl	8008092 <HAL_GPIO_WritePin>
					  motorcalisiyor=0;
 8005400:	4b90      	ldr	r3, [pc, #576]	; (8005644 <mainTask+0x770>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
				  }

				  /*YUKARI ÇALISMA*/


				  if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005406:	4b90      	ldr	r3, [pc, #576]	; (8005648 <mainTask+0x774>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d160      	bne.n	80054d0 <mainTask+0x5fc>
 800540e:	4b8f      	ldr	r3, [pc, #572]	; (800564c <mainTask+0x778>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d05c      	beq.n	80054d0 <mainTask+0x5fc>
 8005416:	4b8e      	ldr	r3, [pc, #568]	; (8005650 <mainTask+0x77c>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d058      	beq.n	80054d0 <mainTask+0x5fc>
									&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800541e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005422:	4887      	ldr	r0, [pc, #540]	; (8005640 <mainTask+0x76c>)
 8005424:	f002 fe1e 	bl	8008064 <HAL_GPIO_ReadPin>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <mainTask+0x562>
 800542e:	4b89      	ldr	r3, [pc, #548]	; (8005654 <mainTask+0x780>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04c      	beq.n	80054d0 <mainTask+0x5fc>
									&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005436:	2102      	movs	r1, #2
 8005438:	4887      	ldr	r0, [pc, #540]	; (8005658 <mainTask+0x784>)
 800543a:	f002 fe13 	bl	8008064 <HAL_GPIO_ReadPin>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d145      	bne.n	80054d0 <mainTask+0x5fc>
									&& (basincVar)
 8005444:	4b85      	ldr	r3, [pc, #532]	; (800565c <mainTask+0x788>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d041      	beq.n	80054d0 <mainTask+0x5fc>
									&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800544c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005450:	487b      	ldr	r0, [pc, #492]	; (8005640 <mainTask+0x76c>)
 8005452:	f002 fe07 	bl	8008064 <HAL_GPIO_ReadPin>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10e      	bne.n	800547a <mainTask+0x5a6>
									&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800545c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005460:	4877      	ldr	r0, [pc, #476]	; (8005640 <mainTask+0x76c>)
 8005462:	f002 fdff 	bl	8008064 <HAL_GPIO_ReadPin>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d106      	bne.n	800547a <mainTask+0x5a6>
									&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	487a      	ldr	r0, [pc, #488]	; (8005658 <mainTask+0x784>)
 8005470:	f002 fdf8 	bl	8008064 <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d003      	beq.n	8005482 <mainTask+0x5ae>
 800547a:	4b79      	ldr	r3, [pc, #484]	; (8005660 <mainTask+0x78c>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d026      	beq.n	80054d0 <mainTask+0x5fc>
									&& (asagivalfcalisiyor==0)
 8005482:	4b78      	ldr	r3, [pc, #480]	; (8005664 <mainTask+0x790>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01f      	beq.n	80054d0 <mainTask+0x5fc>
									&& (devmotoryukaricalisiyor==0)
 8005490:	4b75      	ldr	r3, [pc, #468]	; (8005668 <mainTask+0x794>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f083 0301 	eor.w	r3, r3, #1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <mainTask+0x5fc>
									&& (devmotorasagicalisiyor==0)
 800549e:	4b73      	ldr	r3, [pc, #460]	; (800566c <mainTask+0x798>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f083 0301 	eor.w	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d011      	beq.n	80054d0 <mainTask+0x5fc>
									&&(devyukarivalfcalisiyor==0)
 80054ac:	4b70      	ldr	r3, [pc, #448]	; (8005670 <mainTask+0x79c>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f083 0301 	eor.w	r3, r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <mainTask+0x5fc>
									&&(devasagivalfcalisiyor==0))
 80054ba:	4b6e      	ldr	r3, [pc, #440]	; (8005674 <mainTask+0x7a0>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f083 0301 	eor.w	r3, r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <mainTask+0x5fc>
				  {
					  yukarimotorcalisiyor=1;
 80054c8:	4b65      	ldr	r3, [pc, #404]	; (8005660 <mainTask+0x78c>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <mainTask+0x602>
				  }
				  else
				  {
					  yukarimotorcalisiyor=0;
 80054d0:	4b63      	ldr	r3, [pc, #396]	; (8005660 <mainTask+0x78c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
				  }

				  if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))){	/* ikinci hız */
 80054d6:	4b62      	ldr	r3, [pc, #392]	; (8005660 <mainTask+0x78c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d012      	beq.n	8005504 <mainTask+0x630>
 80054de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054e2:	485d      	ldr	r0, [pc, #372]	; (8005658 <mainTask+0x784>)
 80054e4:	f002 fdbe 	bl	8008064 <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d10a      	bne.n	8005504 <mainTask+0x630>
 80054ee:	4b62      	ldr	r3, [pc, #392]	; (8005678 <mainTask+0x7a4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <mainTask+0x630>

					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80054f6:	2201      	movs	r2, #1
 80054f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054fc:	4850      	ldr	r0, [pc, #320]	; (8005640 <mainTask+0x76c>)
 80054fe:	f002 fdc8 	bl	8008092 <HAL_GPIO_WritePin>
 8005502:	e005      	b.n	8005510 <mainTask+0x63c>
				  }
				  else
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800550a:	484d      	ldr	r0, [pc, #308]	; (8005640 <mainTask+0x76c>)
 800550c:	f002 fdc1 	bl	8008092 <HAL_GPIO_WritePin>

				  if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1))
 8005510:	4b53      	ldr	r3, [pc, #332]	; (8005660 <mainTask+0x78c>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <mainTask+0x66c>
 8005518:	4b58      	ldr	r3, [pc, #352]	; (800567c <mainTask+0x7a8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d007      	beq.n	8005530 <mainTask+0x65c>
 8005520:	4b56      	ldr	r3, [pc, #344]	; (800567c <mainTask+0x7a8>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d003      	beq.n	8005530 <mainTask+0x65c>
 8005528:	4b55      	ldr	r3, [pc, #340]	; (8005680 <mainTask+0x7ac>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <mainTask+0x66c>

				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005530:	2201      	movs	r2, #1
 8005532:	2104      	movs	r1, #4
 8005534:	4842      	ldr	r0, [pc, #264]	; (8005640 <mainTask+0x76c>)
 8005536:	f002 fdac 	bl	8008092 <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=1;
 800553a:	4b52      	ldr	r3, [pc, #328]	; (8005684 <mainTask+0x7b0>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]

				  }

				  // yukari valf timer calisması

				  if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)){
 8005540:	4b50      	ldr	r3, [pc, #320]	; (8005684 <mainTask+0x7b0>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02f      	beq.n	80055a8 <mainTask+0x6d4>
 8005548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800554c:	483c      	ldr	r0, [pc, #240]	; (8005640 <mainTask+0x76c>)
 800554e:	f002 fd89 	bl	8008064 <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <mainTask+0x692>
 8005558:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <mainTask+0x780>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <mainTask+0x6a0>
 8005566:	2102      	movs	r1, #2
 8005568:	483b      	ldr	r0, [pc, #236]	; (8005658 <mainTask+0x784>)
 800556a:	f002 fd7b 	bl	8008064 <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d119      	bne.n	80055a8 <mainTask+0x6d4>
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <mainTask+0x778>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <mainTask+0x6d4>
 800557c:	4b34      	ldr	r3, [pc, #208]	; (8005650 <mainTask+0x77c>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d011      	beq.n	80055a8 <mainTask+0x6d4>
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <mainTask+0x788>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <mainTask+0x6d4>
 800558c:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <mainTask+0x7b4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f083 0301 	eor.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <mainTask+0x6d4>

					  timer2=millis;
 800559a:	4b3c      	ldr	r3, [pc, #240]	; (800568c <mainTask+0x7b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <mainTask+0x7bc>)
 80055a0:	6013      	str	r3, [r2, #0]
					  butonKontrol3=1;
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <mainTask+0x7b4>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0))))
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <mainTask+0x7b8>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b38      	ldr	r3, [pc, #224]	; (8005690 <mainTask+0x7bc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a38      	ldr	r2, [pc, #224]	; (8005694 <mainTask+0x7c0>)
 80055b4:	7812      	ldrb	r2, [r2, #0]
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d303      	bcc.n	80055c2 <mainTask+0x6ee>
 80055ba:	4b33      	ldr	r3, [pc, #204]	; (8005688 <mainTask+0x7b4>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d111      	bne.n	80055e6 <mainTask+0x712>
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <mainTask+0x778>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <mainTask+0x712>
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <mainTask+0x77c>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f083 0301 	eor.w	r3, r3, #1
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <mainTask+0x712>
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <mainTask+0x788>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <mainTask+0x728>
				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2104      	movs	r1, #4
 80055ea:	4815      	ldr	r0, [pc, #84]	; (8005640 <mainTask+0x76c>)
 80055ec:	f002 fd51 	bl	8008092 <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=0;
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <mainTask+0x7b0>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
					  butonKontrol3=0;
 80055f6:	4b24      	ldr	r3, [pc, #144]	; (8005688 <mainTask+0x7b4>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]

				  }

				  //Ond safety

				  if(emniyetCercevesi==0){
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <mainTask+0x7c4>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <mainTask+0x736>

					  cerceveVar=1;
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <mainTask+0x7c8>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
				  }

				  if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)){
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <mainTask+0x7c4>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d148      	bne.n	80056a4 <mainTask+0x7d0>
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <mainTask+0x7cc>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d144      	bne.n	80056a4 <mainTask+0x7d0>
 800561a:	2101      	movs	r1, #1
 800561c:	480e      	ldr	r0, [pc, #56]	; (8005658 <mainTask+0x784>)
 800561e:	f002 fd21 	bl	8008064 <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13d      	bne.n	80056a4 <mainTask+0x7d0>
 8005628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800562c:	4804      	ldr	r0, [pc, #16]	; (8005640 <mainTask+0x76c>)
 800562e:	f002 fd19 	bl	8008064 <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d135      	bne.n	80056a4 <mainTask+0x7d0>

					  cerceveVar=1;
 8005638:	4b18      	ldr	r3, [pc, #96]	; (800569c <mainTask+0x7c8>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e043      	b.n	80056c8 <mainTask+0x7f4>
 8005640:	40010c00 	.word	0x40010c00
 8005644:	20000c9f 	.word	0x20000c9f
 8005648:	20000c69 	.word	0x20000c69
 800564c:	20000c9d 	.word	0x20000c9d
 8005650:	20000c9e 	.word	0x20000c9e
 8005654:	20000c87 	.word	0x20000c87
 8005658:	40011000 	.word	0x40011000
 800565c:	20000c4f 	.word	0x20000c4f
 8005660:	20000c80 	.word	0x20000c80
 8005664:	20000c83 	.word	0x20000c83
 8005668:	20000c81 	.word	0x20000c81
 800566c:	20000c82 	.word	0x20000c82
 8005670:	20000c85 	.word	0x20000c85
 8005674:	20000c86 	.word	0x20000c86
 8005678:	20000c5a 	.word	0x20000c5a
 800567c:	20000c5b 	.word	0x20000c5b
 8005680:	20000c5f 	.word	0x20000c5f
 8005684:	20000c84 	.word	0x20000c84
 8005688:	20000c7c 	.word	0x20000c7c
 800568c:	20000c2c 	.word	0x20000c2c
 8005690:	20000c38 	.word	0x20000c38
 8005694:	20000c60 	.word	0x20000c60
 8005698:	20000c50 	.word	0x20000c50
 800569c:	20000ca2 	.word	0x20000ca2
 80056a0:	20000c4d 	.word	0x20000c4d
				  }
				  else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)){
 80056a4:	4b91      	ldr	r3, [pc, #580]	; (80058ec <mainTask+0xa18>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10d      	bne.n	80056c8 <mainTask+0x7f4>
 80056ac:	2101      	movs	r1, #1
 80056ae:	4890      	ldr	r0, [pc, #576]	; (80058f0 <mainTask+0xa1c>)
 80056b0:	f002 fcd8 	bl	8008064 <HAL_GPIO_ReadPin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d106      	bne.n	80056c8 <mainTask+0x7f4>
 80056ba:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <mainTask+0xa20>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <mainTask+0x7f4>

					  cerceveVar=0;
 80056c2:	4b8d      	ldr	r3, [pc, #564]	; (80058f8 <mainTask+0xa24>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
				  }

				  if (emniyetCercevesi==1 && calismaSekli==1){
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <mainTask+0xa18>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d111      	bne.n	80056f4 <mainTask+0x820>
 80056d0:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <mainTask+0xa20>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10d      	bne.n	80056f4 <mainTask+0x820>
					  if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0){
 80056d8:	2101      	movs	r1, #1
 80056da:	4885      	ldr	r0, [pc, #532]	; (80058f0 <mainTask+0xa1c>)
 80056dc:	f002 fcc2 	bl	8008064 <HAL_GPIO_ReadPin>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <mainTask+0x81a>
						  cerceveVar=1;
 80056e6:	4b84      	ldr	r3, [pc, #528]	; (80058f8 <mainTask+0xa24>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e002      	b.n	80056f4 <mainTask+0x820>
					  }
					  else{
						  cerceveVar=0;
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <mainTask+0xa24>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
					  }
				  }

				  //Asagi calisma

				  if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80056f4:	4b81      	ldr	r3, [pc, #516]	; (80058fc <mainTask+0xa28>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d17c      	bne.n	80057f6 <mainTask+0x922>
 80056fc:	4b80      	ldr	r3, [pc, #512]	; (8005900 <mainTask+0xa2c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d078      	beq.n	80057f6 <mainTask+0x922>
 8005704:	4b7f      	ldr	r3, [pc, #508]	; (8005904 <mainTask+0xa30>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d074      	beq.n	80057f6 <mainTask+0x922>
								   && ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800570c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005710:	487d      	ldr	r0, [pc, #500]	; (8005908 <mainTask+0xa34>)
 8005712:	f002 fca7 	bl	8008064 <HAL_GPIO_ReadPin>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <mainTask+0x850>
 800571c:	4b7b      	ldr	r3, [pc, #492]	; (800590c <mainTask+0xa38>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d068      	beq.n	80057f6 <mainTask+0x922>
								   && (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005724:	4b74      	ldr	r3, [pc, #464]	; (80058f8 <mainTask+0xa24>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d064      	beq.n	80057f6 <mainTask+0x922>
 800572c:	4b78      	ldr	r3, [pc, #480]	; (8005910 <mainTask+0xa3c>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f083 0301 	eor.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d05d      	beq.n	80057f6 <mainTask+0x922>
								   && ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800573a:	2104      	movs	r1, #4
 800573c:	486c      	ldr	r0, [pc, #432]	; (80058f0 <mainTask+0xa1c>)
 800573e:	f002 fc91 	bl	8008064 <HAL_GPIO_ReadPin>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <mainTask+0x87c>
 8005748:	4b72      	ldr	r3, [pc, #456]	; (8005914 <mainTask+0xa40>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d152      	bne.n	80057f6 <mainTask+0x922>
								   && (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005754:	486c      	ldr	r0, [pc, #432]	; (8005908 <mainTask+0xa34>)
 8005756:	f002 fc85 	bl	8008064 <HAL_GPIO_ReadPin>
 800575a:	4603      	mov	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10e      	bne.n	800577e <mainTask+0x8aa>
								   && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005764:	4868      	ldr	r0, [pc, #416]	; (8005908 <mainTask+0xa34>)
 8005766:	f002 fc7d 	bl	8008064 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d106      	bne.n	800577e <mainTask+0x8aa>
								   && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005770:	2140      	movs	r1, #64	; 0x40
 8005772:	485f      	ldr	r0, [pc, #380]	; (80058f0 <mainTask+0xa1c>)
 8005774:	f002 fc76 	bl	8008064 <HAL_GPIO_ReadPin>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d003      	beq.n	8005786 <mainTask+0x8b2>
 800577e:	4b66      	ldr	r3, [pc, #408]	; (8005918 <mainTask+0xa44>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d037      	beq.n	80057f6 <mainTask+0x922>
								   && (yukarimotorcalisiyor==0)
 8005786:	4b65      	ldr	r3, [pc, #404]	; (800591c <mainTask+0xa48>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f083 0301 	eor.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d030      	beq.n	80057f6 <mainTask+0x922>
								   && (yukarivalfcalisiyor==0)
 8005794:	4b62      	ldr	r3, [pc, #392]	; (8005920 <mainTask+0xa4c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d029      	beq.n	80057f6 <mainTask+0x922>
					  	  	  	   && (devmotoryukaricalisiyor==0)
 80057a2:	4b60      	ldr	r3, [pc, #384]	; (8005924 <mainTask+0xa50>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f083 0301 	eor.w	r3, r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d022      	beq.n	80057f6 <mainTask+0x922>
					  			   && (devmotorasagicalisiyor==0)
 80057b0:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <mainTask+0xa54>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f083 0301 	eor.w	r3, r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01b      	beq.n	80057f6 <mainTask+0x922>
								   && (devyukarivalfcalisiyor==0)
 80057be:	4b5b      	ldr	r3, [pc, #364]	; (800592c <mainTask+0xa58>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f083 0301 	eor.w	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d014      	beq.n	80057f6 <mainTask+0x922>
								   && (devasagivalfcalisiyor==0))
 80057cc:	4b58      	ldr	r3, [pc, #352]	; (8005930 <mainTask+0xa5c>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f083 0301 	eor.w	r3, r3, #1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <mainTask+0x922>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80057da:	2201      	movs	r2, #1
 80057dc:	2102      	movs	r1, #2
 80057de:	484a      	ldr	r0, [pc, #296]	; (8005908 <mainTask+0xa34>)
 80057e0:	f002 fc57 	bl	8008092 <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=1;
 80057e4:	4b4c      	ldr	r3, [pc, #304]	; (8005918 <mainTask+0xa44>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiAsagi=1;
 80057ea:	4b52      	ldr	r3, [pc, #328]	; (8005934 <mainTask+0xa60>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
					  cercevesasagicalisma=1;
 80057f0:	4b51      	ldr	r3, [pc, #324]	; (8005938 <mainTask+0xa64>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
				  }

				  // asagi valf timer calisması

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)){
 80057f6:	4b48      	ldr	r3, [pc, #288]	; (8005918 <mainTask+0xa44>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d033      	beq.n	8005866 <mainTask+0x992>
 80057fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005802:	4841      	ldr	r0, [pc, #260]	; (8005908 <mainTask+0xa34>)
 8005804:	f002 fc2e 	bl	8008064 <HAL_GPIO_ReadPin>
 8005808:	4603      	mov	r3, r0
 800580a:	2b01      	cmp	r3, #1
 800580c:	d106      	bne.n	800581c <mainTask+0x948>
 800580e:	4b3f      	ldr	r3, [pc, #252]	; (800590c <mainTask+0xa38>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f083 0301 	eor.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <mainTask+0x95e>
 800581c:	2104      	movs	r1, #4
 800581e:	4834      	ldr	r0, [pc, #208]	; (80058f0 <mainTask+0xa1c>)
 8005820:	f002 fc20 	bl	8008064 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d11d      	bne.n	8005866 <mainTask+0x992>
 800582a:	4b3a      	ldr	r3, [pc, #232]	; (8005914 <mainTask+0xa40>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <mainTask+0x992>
 8005832:	4b33      	ldr	r3, [pc, #204]	; (8005900 <mainTask+0xa2c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d015      	beq.n	8005866 <mainTask+0x992>
 800583a:	4b32      	ldr	r3, [pc, #200]	; (8005904 <mainTask+0xa30>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d011      	beq.n	8005866 <mainTask+0x992>
 8005842:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <mainTask+0xa24>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <mainTask+0x992>
 800584a:	4b3c      	ldr	r3, [pc, #240]	; (800593c <mainTask+0xa68>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f083 0301 	eor.w	r3, r3, #1
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d006      	beq.n	8005866 <mainTask+0x992>

					  timer2=millis;
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <mainTask+0xa6c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a39      	ldr	r2, [pc, #228]	; (8005944 <mainTask+0xa70>)
 800585e:	6013      	str	r3, [r2, #0]
					  butonKontrol2=1;
 8005860:	4b36      	ldr	r3, [pc, #216]	; (800593c <mainTask+0xa68>)
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0))))
 8005866:	4b36      	ldr	r3, [pc, #216]	; (8005940 <mainTask+0xa6c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <mainTask+0xa70>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	4a35      	ldr	r2, [pc, #212]	; (8005948 <mainTask+0xa74>)
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	4293      	cmp	r3, r2
 8005876:	d303      	bcc.n	8005880 <mainTask+0x9ac>
 8005878:	4b30      	ldr	r3, [pc, #192]	; (800593c <mainTask+0xa68>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d114      	bne.n	80058aa <mainTask+0x9d6>
 8005880:	4b1f      	ldr	r3, [pc, #124]	; (8005900 <mainTask+0xa2c>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <mainTask+0x9d6>
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <mainTask+0xa30>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f083 0301 	eor.w	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <mainTask+0x9d6>
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <mainTask+0xa24>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <mainTask+0x9ec>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80058aa:	2200      	movs	r2, #0
 80058ac:	2102      	movs	r1, #2
 80058ae:	4816      	ldr	r0, [pc, #88]	; (8005908 <mainTask+0xa34>)
 80058b0:	f002 fbef 	bl	8008092 <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=0;
 80058b4:	4b18      	ldr	r3, [pc, #96]	; (8005918 <mainTask+0xa44>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
					  butonKontrol2=0;
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <mainTask+0xa68>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]

				  }

				  //yavaslama valf

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))){	/* ikinci hız */
 80058c0:	4b15      	ldr	r3, [pc, #84]	; (8005918 <mainTask+0xa44>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d043      	beq.n	8005950 <mainTask+0xa7c>
 80058c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058cc:	4808      	ldr	r0, [pc, #32]	; (80058f0 <mainTask+0xa1c>)
 80058ce:	f002 fbc9 	bl	8008064 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d13b      	bne.n	8005950 <mainTask+0xa7c>
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <mainTask+0xa78>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d037      	beq.n	8005950 <mainTask+0xa7c>

					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80058e0:	2201      	movs	r2, #1
 80058e2:	2101      	movs	r1, #1
 80058e4:	4808      	ldr	r0, [pc, #32]	; (8005908 <mainTask+0xa34>)
 80058e6:	f002 fbd4 	bl	8008092 <HAL_GPIO_WritePin>
 80058ea:	e036      	b.n	800595a <mainTask+0xa86>
 80058ec:	20000c50 	.word	0x20000c50
 80058f0:	40011000 	.word	0x40011000
 80058f4:	20000c4d 	.word	0x20000c4d
 80058f8:	20000ca2 	.word	0x20000ca2
 80058fc:	20000c69 	.word	0x20000c69
 8005900:	20000c9d 	.word	0x20000c9d
 8005904:	20000c9e 	.word	0x20000c9e
 8005908:	40010c00 	.word	0x40010c00
 800590c:	20000c88 	.word	0x20000c88
 8005910:	20000c9c 	.word	0x20000c9c
 8005914:	20000c52 	.word	0x20000c52
 8005918:	20000c83 	.word	0x20000c83
 800591c:	20000c80 	.word	0x20000c80
 8005920:	20000c84 	.word	0x20000c84
 8005924:	20000c81 	.word	0x20000c81
 8005928:	20000c82 	.word	0x20000c82
 800592c:	20000c85 	.word	0x20000c85
 8005930:	20000c86 	.word	0x20000c86
 8005934:	20000c8b 	.word	0x20000c8b
 8005938:	20000cac 	.word	0x20000cac
 800593c:	20000c7b 	.word	0x20000c7b
 8005940:	20000c2c 	.word	0x20000c2c
 8005944:	20000c38 	.word	0x20000c38
 8005948:	20000c61 	.word	0x20000c61
 800594c:	20000c51 	.word	0x20000c51
				  }
				  else
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005950:	2200      	movs	r2, #0
 8005952:	2101      	movs	r1, #1
 8005954:	4836      	ldr	r0, [pc, #216]	; (8005a30 <mainTask+0xb5c>)
 8005956:	f002 fb9c 	bl	8008092 <HAL_GPIO_WritePin>

				  /*DEVIRME veya YURUYUS Baslangic*/

				  // Devirme Yukari veya yuruyus ileri calisma
				  if((menuGiris==0)
 800595a:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <mainTask+0xb60>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 8080 	bne.w	8005a64 <mainTask+0xb90>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005964:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <mainTask+0xb64>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d003      	beq.n	8005974 <mainTask+0xaa0>
 800596c:	4b32      	ldr	r3, [pc, #200]	; (8005a38 <mainTask+0xb64>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d177      	bne.n	8005a64 <mainTask+0xb90>
						  && (stopVar) && (kapiSivicVar)
 8005974:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <mainTask+0xb68>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d073      	beq.n	8005a64 <mainTask+0xb90>
 800597c:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <mainTask+0xb6c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d06f      	beq.n	8005a64 <mainTask+0xb90>
						  && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005988:	4829      	ldr	r0, [pc, #164]	; (8005a30 <mainTask+0xb5c>)
 800598a:	f002 fb6b 	bl	8008064 <HAL_GPIO_ReadPin>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d167      	bne.n	8005a64 <mainTask+0xb90>
						  && ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005998:	482a      	ldr	r0, [pc, #168]	; (8005a44 <mainTask+0xb70>)
 800599a:	f002 fb63 	bl	8008064 <HAL_GPIO_ReadPin>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <mainTask+0xad8>
 80059a4:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <mainTask+0xb74>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d15b      	bne.n	8005a64 <mainTask+0xb90>
						  && (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	4825      	ldr	r0, [pc, #148]	; (8005a44 <mainTask+0xb70>)
 80059b0:	f002 fb58 	bl	8008064 <HAL_GPIO_ReadPin>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10f      	bne.n	80059da <mainTask+0xb06>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80059ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059be:	481c      	ldr	r0, [pc, #112]	; (8005a30 <mainTask+0xb5c>)
 80059c0:	f002 fb50 	bl	8008064 <HAL_GPIO_ReadPin>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <mainTask+0xb06>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80059ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059ce:	4818      	ldr	r0, [pc, #96]	; (8005a30 <mainTask+0xb5c>)
 80059d0:	f002 fb48 	bl	8008064 <HAL_GPIO_ReadPin>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d003      	beq.n	80059e2 <mainTask+0xb0e>
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <mainTask+0xb78>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d040      	beq.n	8005a64 <mainTask+0xb90>
						  && (yukarimotorcalisiyor==0)
 80059e2:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <mainTask+0xb7c>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f083 0301 	eor.w	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d039      	beq.n	8005a64 <mainTask+0xb90>
						  && (yukarivalfcalisiyor==0)
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <mainTask+0xb80>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f083 0301 	eor.w	r3, r3, #1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d032      	beq.n	8005a64 <mainTask+0xb90>
						  && (asagivalfcalisiyor==0)
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <mainTask+0xb84>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f083 0301 	eor.w	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02b      	beq.n	8005a64 <mainTask+0xb90>
						  && (devmotorasagicalisiyor==0)
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <mainTask+0xb88>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f083 0301 	eor.w	r3, r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d024      	beq.n	8005a64 <mainTask+0xb90>
						  &&(devasagivalfcalisiyor==0))
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <mainTask+0xb8c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f083 0301 	eor.w	r3, r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01d      	beq.n	8005a64 <mainTask+0xb90>

				  {
					  devmotoryukaricalisiyor=1;
 8005a28:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <mainTask+0xb78>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e01c      	b.n	8005a6a <mainTask+0xb96>
 8005a30:	40010c00 	.word	0x40010c00
 8005a34:	20000c69 	.word	0x20000c69
 8005a38:	20000c5b 	.word	0x20000c5b
 8005a3c:	20000c9d 	.word	0x20000c9d
 8005a40:	20000c9e 	.word	0x20000c9e
 8005a44:	40011000 	.word	0x40011000
 8005a48:	20000c5c 	.word	0x20000c5c
 8005a4c:	20000c81 	.word	0x20000c81
 8005a50:	20000c80 	.word	0x20000c80
 8005a54:	20000c84 	.word	0x20000c84
 8005a58:	20000c83 	.word	0x20000c83
 8005a5c:	20000c82 	.word	0x20000c82
 8005a60:	20000c86 	.word	0x20000c86
				  }

				  else
					  devmotoryukaricalisiyor=0;
 8005a64:	4b64      	ldr	r3, [pc, #400]	; (8005bf8 <mainTask+0xd24>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]

				  if(devmotoryukaricalisiyor==1){
 8005a6a:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <mainTask+0xd24>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <mainTask+0xbae>

					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005a72:	2201      	movs	r2, #1
 8005a74:	2120      	movs	r1, #32
 8005a76:	4861      	ldr	r0, [pc, #388]	; (8005bfc <mainTask+0xd28>)
 8005a78:	f002 fb0b 	bl	8008092 <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=1;
 8005a7c:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <mainTask+0xd2c>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]

				  }
				  // devirme yukari + yuruyus ileri valf timer calismasi

				  if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)){
 8005a82:	4b5f      	ldr	r3, [pc, #380]	; (8005c00 <mainTask+0xd2c>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d025      	beq.n	8005ad6 <mainTask+0xc02>
 8005a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a8e:	485d      	ldr	r0, [pc, #372]	; (8005c04 <mainTask+0xd30>)
 8005a90:	f002 fae8 	bl	8008064 <HAL_GPIO_ReadPin>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d007      	beq.n	8005aaa <mainTask+0xbd6>
 8005a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a9e:	4857      	ldr	r0, [pc, #348]	; (8005bfc <mainTask+0xd28>)
 8005aa0:	f002 fae0 	bl	8008064 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d115      	bne.n	8005ad6 <mainTask+0xc02>
 8005aaa:	4b57      	ldr	r3, [pc, #348]	; (8005c08 <mainTask+0xd34>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <mainTask+0xc02>
 8005ab2:	4b56      	ldr	r3, [pc, #344]	; (8005c0c <mainTask+0xd38>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <mainTask+0xc02>
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <mainTask+0xd3c>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f083 0301 	eor.w	r3, r3, #1
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <mainTask+0xc02>

					  timer2=millis;
 8005ac8:	4b52      	ldr	r3, [pc, #328]	; (8005c14 <mainTask+0xd40>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a52      	ldr	r2, [pc, #328]	; (8005c18 <mainTask+0xd44>)
 8005ace:	6013      	str	r3, [r2, #0]
					  butonKontrol4=1;
 8005ad0:	4b4f      	ldr	r3, [pc, #316]	; (8005c10 <mainTask+0xd3c>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <mainTask+0xd40>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <mainTask+0xd44>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	4a4e      	ldr	r2, [pc, #312]	; (8005c1c <mainTask+0xd48>)
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d303      	bcc.n	8005af0 <mainTask+0xc1c>
 8005ae8:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <mainTask+0xd3c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <mainTask+0xc38>
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <mainTask+0xd34>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f083 0301 	eor.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <mainTask+0xc38>
 8005afe:	4b43      	ldr	r3, [pc, #268]	; (8005c0c <mainTask+0xd38>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f083 0301 	eor.w	r3, r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <mainTask+0xc4e>
				  {
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2120      	movs	r1, #32
 8005b10:	483a      	ldr	r0, [pc, #232]	; (8005bfc <mainTask+0xd28>)
 8005b12:	f002 fabe 	bl	8008092 <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=0;
 8005b16:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <mainTask+0xd2c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
					  butonKontrol4=0;
 8005b1c:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <mainTask+0xd3c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]

				  }

				  // Devirme Asagi veya yuruyus geri calisma

				  if((menuGiris==0)
 8005b22:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <mainTask+0xd4c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 8088 	bne.w	8005c3c <mainTask+0xd68>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <mainTask+0xd50>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d003      	beq.n	8005b3c <mainTask+0xc68>
 8005b34:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <mainTask+0xd50>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d17f      	bne.n	8005c3c <mainTask+0xd68>
						  && (stopVar) && (kapiSivicVar)
 8005b3c:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <mainTask+0xd34>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d07b      	beq.n	8005c3c <mainTask+0xd68>
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <mainTask+0xd38>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d077      	beq.n	8005c3c <mainTask+0xd68>
						  && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	482b      	ldr	r0, [pc, #172]	; (8005bfc <mainTask+0xd28>)
 8005b50:	f002 fa88 	bl	8008064 <HAL_GPIO_ReadPin>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d170      	bne.n	8005c3c <mainTask+0xd68>
						  && ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b5e:	4827      	ldr	r0, [pc, #156]	; (8005bfc <mainTask+0xd28>)
 8005b60:	f002 fa80 	bl	8008064 <HAL_GPIO_ReadPin>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <mainTask+0xc9e>
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <mainTask+0xd54>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d164      	bne.n	8005c3c <mainTask+0xd68>
						  && (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b76:	4823      	ldr	r0, [pc, #140]	; (8005c04 <mainTask+0xd30>)
 8005b78:	f002 fa74 	bl	8008064 <HAL_GPIO_ReadPin>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10f      	bne.n	8005ba2 <mainTask+0xcce>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b86:	481f      	ldr	r0, [pc, #124]	; (8005c04 <mainTask+0xd30>)
 8005b88:	f002 fa6c 	bl	8008064 <HAL_GPIO_ReadPin>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d107      	bne.n	8005ba2 <mainTask+0xcce>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005b92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b96:	481b      	ldr	r0, [pc, #108]	; (8005c04 <mainTask+0xd30>)
 8005b98:	f002 fa64 	bl	8008064 <HAL_GPIO_ReadPin>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d003      	beq.n	8005baa <mainTask+0xcd6>
 8005ba2:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <mainTask+0xd58>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d048      	beq.n	8005c3c <mainTask+0xd68>
						  && (yukarimotorcalisiyor==0)
 8005baa:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <mainTask+0xd5c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d041      	beq.n	8005c3c <mainTask+0xd68>
						  && (yukarivalfcalisiyor==0)
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <mainTask+0xd60>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d03a      	beq.n	8005c3c <mainTask+0xd68>
						  && (asagivalfcalisiyor==0)
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <mainTask+0xd64>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f083 0301 	eor.w	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d033      	beq.n	8005c3c <mainTask+0xd68>
						  && (devyukarivalfcalisiyor==0)
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <mainTask+0xd2c>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f083 0301 	eor.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02c      	beq.n	8005c3c <mainTask+0xd68>
						  && (devmotoryukaricalisiyor==0))
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <mainTask+0xd24>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f083 0301 	eor.w	r3, r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d025      	beq.n	8005c3c <mainTask+0xd68>

				  {
					   devmotorasagicalisiyor=1;
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <mainTask+0xd58>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e024      	b.n	8005c42 <mainTask+0xd6e>
 8005bf8:	20000c81 	.word	0x20000c81
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	20000c85 	.word	0x20000c85
 8005c04:	40010c00 	.word	0x40010c00
 8005c08:	20000c9d 	.word	0x20000c9d
 8005c0c:	20000c9e 	.word	0x20000c9e
 8005c10:	20000c7d 	.word	0x20000c7d
 8005c14:	20000c2c 	.word	0x20000c2c
 8005c18:	20000c38 	.word	0x20000c38
 8005c1c:	20000c62 	.word	0x20000c62
 8005c20:	20000c69 	.word	0x20000c69
 8005c24:	20000c5b 	.word	0x20000c5b
 8005c28:	20000c5d 	.word	0x20000c5d
 8005c2c:	20000c82 	.word	0x20000c82
 8005c30:	20000c80 	.word	0x20000c80
 8005c34:	20000c84 	.word	0x20000c84
 8005c38:	20000c83 	.word	0x20000c83
				  }

				  else
				  {
					 devmotorasagicalisiyor=0;
 8005c3c:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <mainTask+0xfc4>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
				  }

				  if(devmotorasagicalisiyor==1)
 8005c42:	4b95      	ldr	r3, [pc, #596]	; (8005e98 <mainTask+0xfc4>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <mainTask+0xd86>
				  {
					   HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2110      	movs	r1, #16
 8005c4e:	4893      	ldr	r0, [pc, #588]	; (8005e9c <mainTask+0xfc8>)
 8005c50:	f002 fa1f 	bl	8008092 <HAL_GPIO_WritePin>
					   devasagivalfcalisiyor=1;
 8005c54:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <mainTask+0xfcc>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
				  }

				  //devirme asagi + geri valf timer calismasi

				  if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)){
 8005c5a:	4b91      	ldr	r3, [pc, #580]	; (8005ea0 <mainTask+0xfcc>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d024      	beq.n	8005cac <mainTask+0xdd8>
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	488d      	ldr	r0, [pc, #564]	; (8005e9c <mainTask+0xfc8>)
 8005c66:	f002 f9fd 	bl	8008064 <HAL_GPIO_ReadPin>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d007      	beq.n	8005c80 <mainTask+0xdac>
 8005c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c74:	4889      	ldr	r0, [pc, #548]	; (8005e9c <mainTask+0xfc8>)
 8005c76:	f002 f9f5 	bl	8008064 <HAL_GPIO_ReadPin>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d115      	bne.n	8005cac <mainTask+0xdd8>
 8005c80:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <mainTask+0xfd0>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d011      	beq.n	8005cac <mainTask+0xdd8>
 8005c88:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <mainTask+0xfd4>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <mainTask+0xdd8>
 8005c90:	4b86      	ldr	r3, [pc, #536]	; (8005eac <mainTask+0xfd8>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f083 0301 	eor.w	r3, r3, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <mainTask+0xdd8>

					  timer2=millis;
 8005c9e:	4b84      	ldr	r3, [pc, #528]	; (8005eb0 <mainTask+0xfdc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a84      	ldr	r2, [pc, #528]	; (8005eb4 <mainTask+0xfe0>)
 8005ca4:	6013      	str	r3, [r2, #0]
					  butonKontrol5=1;
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <mainTask+0xfd8>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005cac:	4b80      	ldr	r3, [pc, #512]	; (8005eb0 <mainTask+0xfdc>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b80      	ldr	r3, [pc, #512]	; (8005eb4 <mainTask+0xfe0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <mainTask+0xfe4>)
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d303      	bcc.n	8005cc6 <mainTask+0xdf2>
 8005cbe:	4b7b      	ldr	r3, [pc, #492]	; (8005eac <mainTask+0xfd8>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10d      	bne.n	8005ce2 <mainTask+0xe0e>
 8005cc6:	4b77      	ldr	r3, [pc, #476]	; (8005ea4 <mainTask+0xfd0>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f083 0301 	eor.w	r3, r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <mainTask+0xe0e>
 8005cd4:	4b74      	ldr	r3, [pc, #464]	; (8005ea8 <mainTask+0xfd4>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f083 0301 	eor.w	r3, r3, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <mainTask+0xe24>
				  {
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	486d      	ldr	r0, [pc, #436]	; (8005e9c <mainTask+0xfc8>)
 8005ce8:	f002 f9d3 	bl	8008092 <HAL_GPIO_WritePin>
					  devasagivalfcalisiyor=0;
 8005cec:	4b6c      	ldr	r3, [pc, #432]	; (8005ea0 <mainTask+0xfcc>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
					  butonKontrol5=0;
 8005cf2:	4b6e      	ldr	r3, [pc, #440]	; (8005eac <mainTask+0xfd8>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]

				  }

				  // makine durum kontrolü

				  if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cfc:	486f      	ldr	r0, [pc, #444]	; (8005ebc <mainTask+0xfe8>)
 8005cfe:	f002 f9b1 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d120      	bne.n	8005d4a <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d0c:	486b      	ldr	r0, [pc, #428]	; (8005ebc <mainTask+0xfe8>)
 8005d0e:	f002 f9a9 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d118      	bne.n	8005d4a <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005d18:	2104      	movs	r1, #4
 8005d1a:	4868      	ldr	r0, [pc, #416]	; (8005ebc <mainTask+0xfe8>)
 8005d1c:	f002 f9a2 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d111      	bne.n	8005d4a <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005d26:	2102      	movs	r1, #2
 8005d28:	4864      	ldr	r0, [pc, #400]	; (8005ebc <mainTask+0xfe8>)
 8005d2a:	f002 f99b 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <mainTask+0xe76>
						  &&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0))
 8005d34:	2101      	movs	r1, #1
 8005d36:	4861      	ldr	r0, [pc, #388]	; (8005ebc <mainTask+0xfe8>)
 8005d38:	f002 f994 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <mainTask+0xe76>

					  makineStop=1;
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <mainTask+0xfec>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e002      	b.n	8005d50 <mainTask+0xe7c>
				  else
					  makineStop=0;
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <mainTask+0xfec>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]

				  //kapi 1 kontrol

				  // kapi 1 prudhome

				  if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d50:	4b5c      	ldr	r3, [pc, #368]	; (8005ec4 <mainTask+0xff0>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d144      	bne.n	8005de2 <mainTask+0xf0e>
 8005d58:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <mainTask+0xff4>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d003      	beq.n	8005d68 <mainTask+0xe94>
 8005d60:	4b59      	ldr	r3, [pc, #356]	; (8005ec8 <mainTask+0xff4>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d13c      	bne.n	8005de2 <mainTask+0xf0e>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	484c      	ldr	r0, [pc, #304]	; (8005e9c <mainTask+0xfc8>)
 8005d6c:	f002 f97a 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <mainTask+0xeaa>
 8005d76:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <mainTask+0xff8>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <mainTask+0xec2>
 8005d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d82:	484e      	ldr	r0, [pc, #312]	; (8005ebc <mainTask+0xfe8>)
 8005d84:	f002 f96e 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d129      	bne.n	8005de2 <mainTask+0xf0e>
 8005d8e:	4b4f      	ldr	r3, [pc, #316]	; (8005ecc <mainTask+0xff8>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d125      	bne.n	8005de2 <mainTask+0xf0e>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d96:	2104      	movs	r1, #4
 8005d98:	4840      	ldr	r0, [pc, #256]	; (8005e9c <mainTask+0xfc8>)
 8005d9a:	f002 f963 	bl	8008064 <HAL_GPIO_ReadPin>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d003      	beq.n	8005dac <mainTask+0xed8>
 8005da4:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <mainTask+0xffc>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11a      	bne.n	8005de2 <mainTask+0xf0e>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005dac:	2102      	movs	r1, #2
 8005dae:	483b      	ldr	r0, [pc, #236]	; (8005e9c <mainTask+0xfc8>)
 8005db0:	f002 f958 	bl	8008064 <HAL_GPIO_ReadPin>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <mainTask+0xf0e>
						  &&(butonKontrol==0)
 8005dba:	4b46      	ldr	r3, [pc, #280]	; (8005ed4 <mainTask+0x1000>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f083 0301 	eor.w	r3, r3, #1
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00c      	beq.n	8005de2 <mainTask+0xf0e>
						  &&(makineStop==1))
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <mainTask+0xfec>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <mainTask+0xf0e>
				  {

					  kapi1prudhome=1;
 8005dd0:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <mainTask+0x1004>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 8005dd6:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <mainTask+0xfdc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a40      	ldr	r2, [pc, #256]	; (8005edc <mainTask+0x1008>)
 8005ddc:	6013      	str	r3, [r2, #0]
					  bekle();
 8005dde:	f7fe fabb 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0))
 8005de2:	4b33      	ldr	r3, [pc, #204]	; (8005eb0 <mainTask+0xfdc>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b3d      	ldr	r3, [pc, #244]	; (8005edc <mainTask+0x1008>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <mainTask+0x100c>)
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d211      	bcs.n	8005e18 <mainTask+0xf44>
 8005df4:	2104      	movs	r1, #4
 8005df6:	4829      	ldr	r0, [pc, #164]	; (8005e9c <mainTask+0xfc8>)
 8005df8:	f002 f934 	bl	8008064 <HAL_GPIO_ReadPin>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <mainTask+0xf44>
 8005e02:	4b33      	ldr	r3, [pc, #204]	; (8005ed0 <mainTask+0xffc>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <mainTask+0xf44>
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <mainTask+0xfec>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f083 0301 	eor.w	r3, r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <mainTask+0xf4a>
				  {
					  kapi1prudhome=0;
 8005e18:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <mainTask+0x1004>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 buton kontrol

				  if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e1e:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <mainTask+0xff0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d160      	bne.n	8005ee8 <mainTask+0x1014>
 8005e26:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <mainTask+0xff4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d003      	beq.n	8005e36 <mainTask+0xf62>
 8005e2e:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <mainTask+0xff4>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d158      	bne.n	8005ee8 <mainTask+0x1014>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e36:	2104      	movs	r1, #4
 8005e38:	4818      	ldr	r0, [pc, #96]	; (8005e9c <mainTask+0xfc8>)
 8005e3a:	f002 f913 	bl	8008064 <HAL_GPIO_ReadPin>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d003      	beq.n	8005e4c <mainTask+0xf78>
 8005e44:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <mainTask+0xffc>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d14d      	bne.n	8005ee8 <mainTask+0x1014>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	4813      	ldr	r0, [pc, #76]	; (8005e9c <mainTask+0xfc8>)
 8005e50:	f002 f908 	bl	8008064 <HAL_GPIO_ReadPin>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d146      	bne.n	8005ee8 <mainTask+0x1014>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	480f      	ldr	r0, [pc, #60]	; (8005e9c <mainTask+0xfc8>)
 8005e5e:	f002 f901 	bl	8008064 <HAL_GPIO_ReadPin>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <mainTask+0xf9c>
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <mainTask+0xff8>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <mainTask+0xfb4>
 8005e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e74:	4811      	ldr	r0, [pc, #68]	; (8005ebc <mainTask+0xfe8>)
 8005e76:	f002 f8f5 	bl	8008064 <HAL_GPIO_ReadPin>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d133      	bne.n	8005ee8 <mainTask+0x1014>
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <mainTask+0xff8>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d12f      	bne.n	8005ee8 <mainTask+0x1014>
						  &&(makineStop==1))
 8005e88:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <mainTask+0xfec>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02b      	beq.n	8005ee8 <mainTask+0x1014>
				  {
					  kapi1butonkontrol=1;
 8005e90:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <mainTask+0x1010>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e02a      	b.n	8005eee <mainTask+0x101a>
 8005e98:	20000c82 	.word	0x20000c82
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	20000c86 	.word	0x20000c86
 8005ea4:	20000c9d 	.word	0x20000c9d
 8005ea8:	20000c9e 	.word	0x20000c9e
 8005eac:	20000c7e 	.word	0x20000c7e
 8005eb0:	20000c2c 	.word	0x20000c2c
 8005eb4:	20000c38 	.word	0x20000c38
 8005eb8:	20000c62 	.word	0x20000c62
 8005ebc:	40010c00 	.word	0x40010c00
 8005ec0:	20000c8d 	.word	0x20000c8d
 8005ec4:	20000c55 	.word	0x20000c55
 8005ec8:	20000c54 	.word	0x20000c54
 8005ecc:	20000c58 	.word	0x20000c58
 8005ed0:	20000c52 	.word	0x20000c52
 8005ed4:	20000c7a 	.word	0x20000c7a
 8005ed8:	20000c8e 	.word	0x20000c8e
 8005edc:	20000c30 	.word	0x20000c30
 8005ee0:	20000c65 	.word	0x20000c65
 8005ee4:	20000c8f 	.word	0x20000c8f
				  }

				  else
				  {
					  kapi1butonkontrol=0;
 8005ee8:	4b8b      	ldr	r3, [pc, #556]	; (8006118 <mainTask+0x1244>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 pizzato

				  if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005eee:	4b8b      	ldr	r3, [pc, #556]	; (800611c <mainTask+0x1248>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d121      	bne.n	8005f3a <mainTask+0x1066>
 8005ef6:	4b8a      	ldr	r3, [pc, #552]	; (8006120 <mainTask+0x124c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d003      	beq.n	8005f06 <mainTask+0x1032>
 8005efe:	4b88      	ldr	r3, [pc, #544]	; (8006120 <mainTask+0x124c>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d119      	bne.n	8005f3a <mainTask+0x1066>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f06:	2104      	movs	r1, #4
 8005f08:	4886      	ldr	r0, [pc, #536]	; (8006124 <mainTask+0x1250>)
 8005f0a:	f002 f8ab 	bl	8008064 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d003      	beq.n	8005f1c <mainTask+0x1048>
 8005f14:	4b84      	ldr	r3, [pc, #528]	; (8006128 <mainTask+0x1254>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10e      	bne.n	8005f3a <mainTask+0x1066>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4881      	ldr	r0, [pc, #516]	; (8006124 <mainTask+0x1250>)
 8005f20:	f002 f8a0 	bl	8008064 <HAL_GPIO_ReadPin>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <mainTask+0x1066>
						  &&(makineStop==1))
 8005f2a:	4b80      	ldr	r3, [pc, #512]	; (800612c <mainTask+0x1258>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <mainTask+0x1066>
				  {
					  kapi1pizzato=1;
 8005f32:	4b7f      	ldr	r3, [pc, #508]	; (8006130 <mainTask+0x125c>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <mainTask+0x106c>
				  }

				  else
				  {
					  kapi1pizzato=0;
 8005f3a:	4b7d      	ldr	r3, [pc, #500]	; (8006130 <mainTask+0x125c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 çıkış

				  if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1)
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <mainTask+0x1244>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <mainTask+0x1084>
 8005f48:	4b79      	ldr	r3, [pc, #484]	; (8006130 <mainTask+0x125c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d103      	bne.n	8005f58 <mainTask+0x1084>
 8005f50:	4b78      	ldr	r3, [pc, #480]	; (8006134 <mainTask+0x1260>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <mainTask+0x1090>
				  {
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	4876      	ldr	r0, [pc, #472]	; (8006138 <mainTask+0x1264>)
 8005f5e:	f002 f898 	bl	8008092 <HAL_GPIO_WritePin>
 8005f62:	e004      	b.n	8005f6e <mainTask+0x109a>
				  }

				  else
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f64:	2200      	movs	r2, #0
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	4873      	ldr	r0, [pc, #460]	; (8006138 <mainTask+0x1264>)
 8005f6a:	f002 f892 	bl	8008092 <HAL_GPIO_WritePin>

				  //kapi2 kontrol

				  // kapi 2 prudhome

				  if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f6e:	4b73      	ldr	r3, [pc, #460]	; (800613c <mainTask+0x1268>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d141      	bne.n	8005ffa <mainTask+0x1126>
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <mainTask+0x124c>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d003      	beq.n	8005f86 <mainTask+0x10b2>
 8005f7e:	4b68      	ldr	r3, [pc, #416]	; (8006120 <mainTask+0x124c>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d139      	bne.n	8005ffa <mainTask+0x1126>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f8a:	4866      	ldr	r0, [pc, #408]	; (8006124 <mainTask+0x1250>)
 8005f8c:	f002 f86a 	bl	8008064 <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <mainTask+0x10ca>
 8005f96:	4b6a      	ldr	r3, [pc, #424]	; (8006140 <mainTask+0x126c>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <mainTask+0x10e2>
 8005f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa2:	4868      	ldr	r0, [pc, #416]	; (8006144 <mainTask+0x1270>)
 8005fa4:	f002 f85e 	bl	8008064 <HAL_GPIO_ReadPin>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d125      	bne.n	8005ffa <mainTask+0x1126>
 8005fae:	4b64      	ldr	r3, [pc, #400]	; (8006140 <mainTask+0x126c>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d121      	bne.n	8005ffa <mainTask+0x1126>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	485a      	ldr	r0, [pc, #360]	; (8006124 <mainTask+0x1250>)
 8005fba:	f002 f853 	bl	8008064 <HAL_GPIO_ReadPin>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d11a      	bne.n	8005ffa <mainTask+0x1126>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	4857      	ldr	r0, [pc, #348]	; (8006124 <mainTask+0x1250>)
 8005fc8:	f002 f84c 	bl	8008064 <HAL_GPIO_ReadPin>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d113      	bne.n	8005ffa <mainTask+0x1126>
						  &&(makineStop==1)
 8005fd2:	4b56      	ldr	r3, [pc, #344]	; (800612c <mainTask+0x1258>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00f      	beq.n	8005ffa <mainTask+0x1126>
						  &&(butonKontrol==0))
 8005fda:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <mainTask+0x1274>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f083 0301 	eor.w	r3, r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <mainTask+0x1126>
				  {

					  kapi2prudhome=1;
 8005fe8:	4b58      	ldr	r3, [pc, #352]	; (800614c <mainTask+0x1278>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 8005fee:	4b58      	ldr	r3, [pc, #352]	; (8006150 <mainTask+0x127c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a58      	ldr	r2, [pc, #352]	; (8006154 <mainTask+0x1280>)
 8005ff4:	6013      	str	r3, [r2, #0]
					  bekle();
 8005ff6:	f7fe f9af 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0))
 8005ffa:	4b55      	ldr	r3, [pc, #340]	; (8006150 <mainTask+0x127c>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b55      	ldr	r3, [pc, #340]	; (8006154 <mainTask+0x1280>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	4a54      	ldr	r2, [pc, #336]	; (8006158 <mainTask+0x1284>)
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	4293      	cmp	r3, r2
 800600a:	d20d      	bcs.n	8006028 <mainTask+0x1154>
 800600c:	2102      	movs	r1, #2
 800600e:	4845      	ldr	r0, [pc, #276]	; (8006124 <mainTask+0x1250>)
 8006010:	f002 f828 	bl	8008064 <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <mainTask+0x1154>
 800601a:	4b44      	ldr	r3, [pc, #272]	; (800612c <mainTask+0x1258>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f083 0301 	eor.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <mainTask+0x115a>
				  {
					  kapi2prudhome=0;
 8006028:	4b48      	ldr	r3, [pc, #288]	; (800614c <mainTask+0x1278>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 buton kontrol

				  if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800602e:	4b43      	ldr	r3, [pc, #268]	; (800613c <mainTask+0x1268>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d135      	bne.n	80060a2 <mainTask+0x11ce>
 8006036:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <mainTask+0x124c>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d003      	beq.n	8006046 <mainTask+0x1172>
 800603e:	4b38      	ldr	r3, [pc, #224]	; (8006120 <mainTask+0x124c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d12d      	bne.n	80060a2 <mainTask+0x11ce>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800604a:	4836      	ldr	r0, [pc, #216]	; (8006124 <mainTask+0x1250>)
 800604c:	f002 f80a 	bl	8008064 <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <mainTask+0x118a>
 8006056:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <mainTask+0x126c>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <mainTask+0x11a2>
 800605e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006062:	4838      	ldr	r0, [pc, #224]	; (8006144 <mainTask+0x1270>)
 8006064:	f001 fffe 	bl	8008064 <HAL_GPIO_ReadPin>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d119      	bne.n	80060a2 <mainTask+0x11ce>
 800606e:	4b34      	ldr	r3, [pc, #208]	; (8006140 <mainTask+0x126c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d115      	bne.n	80060a2 <mainTask+0x11ce>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006076:	2102      	movs	r1, #2
 8006078:	482a      	ldr	r0, [pc, #168]	; (8006124 <mainTask+0x1250>)
 800607a:	f001 fff3 	bl	8008064 <HAL_GPIO_ReadPin>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10e      	bne.n	80060a2 <mainTask+0x11ce>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006084:	2104      	movs	r1, #4
 8006086:	4827      	ldr	r0, [pc, #156]	; (8006124 <mainTask+0x1250>)
 8006088:	f001 ffec 	bl	8008064 <HAL_GPIO_ReadPin>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <mainTask+0x11ce>
						  &&(makineStop==1)
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <mainTask+0x1258>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <mainTask+0x11ce>
				  	  	  	  )
				  {
					  kapi2butonkontrol=1;
 800609a:	4b30      	ldr	r3, [pc, #192]	; (800615c <mainTask+0x1288>)
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e002      	b.n	80060a8 <mainTask+0x11d4>
				  }
				  else
				  {
					  kapi2butonkontrol=0;
 80060a2:	4b2e      	ldr	r3, [pc, #184]	; (800615c <mainTask+0x1288>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 pizzato

				  if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060a8:	4b24      	ldr	r3, [pc, #144]	; (800613c <mainTask+0x1268>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d11d      	bne.n	80060ec <mainTask+0x1218>
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <mainTask+0x124c>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d003      	beq.n	80060c0 <mainTask+0x11ec>
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <mainTask+0x124c>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d115      	bne.n	80060ec <mainTask+0x1218>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80060c0:	2102      	movs	r1, #2
 80060c2:	4818      	ldr	r0, [pc, #96]	; (8006124 <mainTask+0x1250>)
 80060c4:	f001 ffce 	bl	8008064 <HAL_GPIO_ReadPin>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10e      	bne.n	80060ec <mainTask+0x1218>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80060ce:	2104      	movs	r1, #4
 80060d0:	4814      	ldr	r0, [pc, #80]	; (8006124 <mainTask+0x1250>)
 80060d2:	f001 ffc7 	bl	8008064 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <mainTask+0x1218>
						  &&(makineStop==1)
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <mainTask+0x1258>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <mainTask+0x1218>
				  	  	  	  )
				  {
					  kapi2pizzato=1;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <mainTask+0x128c>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <mainTask+0x121e>
				  }
				  else
				  {
					  kapi2pizzato=0;
 80060ec:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <mainTask+0x128c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 çıkış

				  if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1)
 80060f2:	4b1a      	ldr	r3, [pc, #104]	; (800615c <mainTask+0x1288>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <mainTask+0x1236>
 80060fa:	4b19      	ldr	r3, [pc, #100]	; (8006160 <mainTask+0x128c>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <mainTask+0x1236>
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <mainTask+0x1278>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d02c      	beq.n	8006164 <mainTask+0x1290>
				  {
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800610a:	2201      	movs	r2, #1
 800610c:	2140      	movs	r1, #64	; 0x40
 800610e:	480a      	ldr	r0, [pc, #40]	; (8006138 <mainTask+0x1264>)
 8006110:	f001 ffbf 	bl	8008092 <HAL_GPIO_WritePin>
 8006114:	e02b      	b.n	800616e <mainTask+0x129a>
 8006116:	bf00      	nop
 8006118:	20000c8f 	.word	0x20000c8f
 800611c:	20000c55 	.word	0x20000c55
 8006120:	20000c54 	.word	0x20000c54
 8006124:	40011000 	.word	0x40011000
 8006128:	20000c52 	.word	0x20000c52
 800612c:	20000c8d 	.word	0x20000c8d
 8006130:	20000c90 	.word	0x20000c90
 8006134:	20000c8e 	.word	0x20000c8e
 8006138:	40010800 	.word	0x40010800
 800613c:	20000c56 	.word	0x20000c56
 8006140:	20000c58 	.word	0x20000c58
 8006144:	40010c00 	.word	0x40010c00
 8006148:	20000c7a 	.word	0x20000c7a
 800614c:	20000c91 	.word	0x20000c91
 8006150:	20000c2c 	.word	0x20000c2c
 8006154:	20000c30 	.word	0x20000c30
 8006158:	20000c66 	.word	0x20000c66
 800615c:	20000c92 	.word	0x20000c92
 8006160:	20000c93 	.word	0x20000c93
				  }

				  else
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006164:	2200      	movs	r2, #0
 8006166:	2140      	movs	r1, #64	; 0x40
 8006168:	488d      	ldr	r0, [pc, #564]	; (80063a0 <mainTask+0x14cc>)
 800616a:	f001 ff92 	bl	8008092 <HAL_GPIO_WritePin>


				  //   kapi tabla kontrol ***


				  if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800616e:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <mainTask+0x14d0>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <mainTask+0x12aa>
 8006176:	4b8b      	ldr	r3, [pc, #556]	; (80063a4 <mainTask+0x14d0>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d115      	bne.n	80061aa <mainTask+0x12d6>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800617e:	2104      	movs	r1, #4
 8006180:	4889      	ldr	r0, [pc, #548]	; (80063a8 <mainTask+0x14d4>)
 8006182:	f001 ff6f 	bl	8008064 <HAL_GPIO_ReadPin>
 8006186:	4603      	mov	r3, r0
 8006188:	2b01      	cmp	r3, #1
 800618a:	d003      	beq.n	8006194 <mainTask+0x12c0>
 800618c:	4b87      	ldr	r3, [pc, #540]	; (80063ac <mainTask+0x14d8>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <mainTask+0x12d6>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0))
 8006194:	2102      	movs	r1, #2
 8006196:	4884      	ldr	r0, [pc, #528]	; (80063a8 <mainTask+0x14d4>)
 8006198:	f001 ff64 	bl	8008064 <HAL_GPIO_ReadPin>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <mainTask+0x12d6>

					  kapiTablaAcKonumKat1=1;
 80061a2:	4b83      	ldr	r3, [pc, #524]	; (80063b0 <mainTask+0x14dc>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e002      	b.n	80061b0 <mainTask+0x12dc>
				  else
					  kapiTablaAcKonumKat1=0;
 80061aa:	4b81      	ldr	r3, [pc, #516]	; (80063b0 <mainTask+0x14dc>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]

				  if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80061b0:	4b7c      	ldr	r3, [pc, #496]	; (80063a4 <mainTask+0x14d0>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d003      	beq.n	80061c0 <mainTask+0x12ec>
 80061b8:	4b7a      	ldr	r3, [pc, #488]	; (80063a4 <mainTask+0x14d0>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d111      	bne.n	80061e4 <mainTask+0x1310>
						  && (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80061c0:	2102      	movs	r1, #2
 80061c2:	4879      	ldr	r0, [pc, #484]	; (80063a8 <mainTask+0x14d4>)
 80061c4:	f001 ff4e 	bl	8008064 <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d10a      	bne.n	80061e4 <mainTask+0x1310>
					  	  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0))
 80061ce:	2104      	movs	r1, #4
 80061d0:	4875      	ldr	r0, [pc, #468]	; (80063a8 <mainTask+0x14d4>)
 80061d2:	f001 ff47 	bl	8008064 <HAL_GPIO_ReadPin>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <mainTask+0x1310>
					  kapiTablaAcKonumKat2=1;
 80061dc:	4b75      	ldr	r3, [pc, #468]	; (80063b4 <mainTask+0x14e0>)
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e002      	b.n	80061ea <mainTask+0x1316>
				  else
					  kapiTablaAcKonumKat2=0;
 80061e4:	4b73      	ldr	r3, [pc, #460]	; (80063b4 <mainTask+0x14e0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat1==1
 80061ea:	4b71      	ldr	r3, [pc, #452]	; (80063b0 <mainTask+0x14dc>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <mainTask+0x133e>
						  && kapiAcTipi==1
 80061f2:	4b71      	ldr	r3, [pc, #452]	; (80063b8 <mainTask+0x14e4>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d10b      	bne.n	8006212 <mainTask+0x133e>
					  	  && HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)
 80061fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061fe:	486f      	ldr	r0, [pc, #444]	; (80063bc <mainTask+0x14e8>)
 8006200:	f001 ff30 	bl	8008064 <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <mainTask+0x133e>
				  {
					  kapiactablaesp1=1;
 800620a:	4b6d      	ldr	r3, [pc, #436]	; (80063c0 <mainTask+0x14ec>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e002      	b.n	8006218 <mainTask+0x1344>
				  }
				  else
					  kapiactablaesp1=0;
 8006212:	4b6b      	ldr	r3, [pc, #428]	; (80063c0 <mainTask+0x14ec>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat2==1
 8006218:	4b66      	ldr	r3, [pc, #408]	; (80063b4 <mainTask+0x14e0>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <mainTask+0x136c>
						  && kapiAcTipi==1
 8006220:	4b65      	ldr	r3, [pc, #404]	; (80063b8 <mainTask+0x14e4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10b      	bne.n	8006240 <mainTask+0x136c>
					  	  && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)
 8006228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800622c:	4863      	ldr	r0, [pc, #396]	; (80063bc <mainTask+0x14e8>)
 800622e:	f001 ff19 	bl	8008064 <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <mainTask+0x136c>
				  {
					  kapiactablaesp2=1;
 8006238:	4b62      	ldr	r3, [pc, #392]	; (80063c4 <mainTask+0x14f0>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e002      	b.n	8006246 <mainTask+0x1372>
				  }
				  else
					  kapiactablaesp2=0;
 8006240:	4b60      	ldr	r3, [pc, #384]	; (80063c4 <mainTask+0x14f0>)
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]

				  // tabla kapısı prudhome

				  if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006246:	4b60      	ldr	r3, [pc, #384]	; (80063c8 <mainTask+0x14f4>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d137      	bne.n	80062be <mainTask+0x13ea>
 800624e:	4b5f      	ldr	r3, [pc, #380]	; (80063cc <mainTask+0x14f8>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <mainTask+0x138a>
 8006256:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <mainTask+0x14f8>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d12f      	bne.n	80062be <mainTask+0x13ea>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800625e:	4b54      	ldr	r3, [pc, #336]	; (80063b0 <mainTask+0x14dc>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <mainTask+0x139a>
 8006266:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <mainTask+0x14e0>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d027      	beq.n	80062be <mainTask+0x13ea>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800626e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006272:	484d      	ldr	r0, [pc, #308]	; (80063a8 <mainTask+0x14d4>)
 8006274:	f001 fef6 	bl	8008064 <HAL_GPIO_ReadPin>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <mainTask+0x13b2>
 800627e:	4b4e      	ldr	r3, [pc, #312]	; (80063b8 <mainTask+0x14e4>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <mainTask+0x13c2>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006286:	4b4e      	ldr	r3, [pc, #312]	; (80063c0 <mainTask+0x14ec>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <mainTask+0x13c2>
 800628e:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <mainTask+0x14f0>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <mainTask+0x13ea>
						  &&(makineStop==1)
 8006296:	4b4e      	ldr	r3, [pc, #312]	; (80063d0 <mainTask+0x14fc>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <mainTask+0x13ea>
						  &&(butonKontrol==0))
 800629e:	4b4d      	ldr	r3, [pc, #308]	; (80063d4 <mainTask+0x1500>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f083 0301 	eor.w	r3, r3, #1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <mainTask+0x13ea>
				  {

					  kapiTablaprudhome=1;
 80062ac:	4b4a      	ldr	r3, [pc, #296]	; (80063d8 <mainTask+0x1504>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 80062b2:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <mainTask+0x1508>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a4a      	ldr	r2, [pc, #296]	; (80063e0 <mainTask+0x150c>)
 80062b8:	6013      	str	r3, [r2, #0]
					  bekle();
 80062ba:	f7fe f84d 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0))
 80062be:	4b47      	ldr	r3, [pc, #284]	; (80063dc <mainTask+0x1508>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <mainTask+0x150c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <mainTask+0x1510>)
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d214      	bcs.n	80062fa <mainTask+0x1426>
 80062d0:	4b37      	ldr	r3, [pc, #220]	; (80063b0 <mainTask+0x14dc>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <mainTask+0x1418>
 80062de:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <mainTask+0x14e0>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f083 0301 	eor.w	r3, r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <mainTask+0x1426>
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <mainTask+0x14fc>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f083 0301 	eor.w	r3, r3, #1
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <mainTask+0x142c>
				  {
					  kapiTablaprudhome=0;
 80062fa:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <mainTask+0x1504>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı buton kontrol

				  if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006300:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <mainTask+0x14f4>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d12b      	bne.n	8006360 <mainTask+0x148c>
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <mainTask+0x14f8>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d003      	beq.n	8006318 <mainTask+0x1444>
 8006310:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <mainTask+0x14f8>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d123      	bne.n	8006360 <mainTask+0x148c>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <mainTask+0x14dc>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <mainTask+0x1454>
 8006320:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <mainTask+0x14e0>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <mainTask+0x148c>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800632c:	481e      	ldr	r0, [pc, #120]	; (80063a8 <mainTask+0x14d4>)
 800632e:	f001 fe99 	bl	8008064 <HAL_GPIO_ReadPin>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <mainTask+0x146c>
 8006338:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <mainTask+0x14e4>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <mainTask+0x147c>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006340:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <mainTask+0x14ec>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <mainTask+0x147c>
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <mainTask+0x14f0>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <mainTask+0x148c>
						  &&(makineStop==1))
 8006350:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <mainTask+0x14fc>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <mainTask+0x148c>
				  {
					  kapiTablabutonkontrol=1;
 8006358:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <mainTask+0x1514>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e002      	b.n	8006366 <mainTask+0x1492>
				  }

				  else
				  {
					  kapiTablabutonkontrol=0;
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <mainTask+0x1514>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı pizzato

				  if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <mainTask+0x14f4>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d140      	bne.n	80063f0 <mainTask+0x151c>
 800636e:	4b17      	ldr	r3, [pc, #92]	; (80063cc <mainTask+0x14f8>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d003      	beq.n	800637e <mainTask+0x14aa>
 8006376:	4b15      	ldr	r3, [pc, #84]	; (80063cc <mainTask+0x14f8>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d138      	bne.n	80063f0 <mainTask+0x151c>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <mainTask+0x14dc>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <mainTask+0x14ba>
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <mainTask+0x14e0>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d030      	beq.n	80063f0 <mainTask+0x151c>
						  &&(makineStop==1))
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <mainTask+0x14fc>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02c      	beq.n	80063f0 <mainTask+0x151c>
				  {
					  kapiTablapizzato=1;
 8006396:	4b15      	ldr	r3, [pc, #84]	; (80063ec <mainTask+0x1518>)
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e02b      	b.n	80063f6 <mainTask+0x1522>
 800639e:	bf00      	nop
 80063a0:	40010800 	.word	0x40010800
 80063a4:	20000c59 	.word	0x20000c59
 80063a8:	40011000 	.word	0x40011000
 80063ac:	20000c52 	.word	0x20000c52
 80063b0:	20000c97 	.word	0x20000c97
 80063b4:	20000c98 	.word	0x20000c98
 80063b8:	20000c58 	.word	0x20000c58
 80063bc:	40010c00 	.word	0x40010c00
 80063c0:	20000ca7 	.word	0x20000ca7
 80063c4:	20000ca8 	.word	0x20000ca8
 80063c8:	20000c57 	.word	0x20000c57
 80063cc:	20000c54 	.word	0x20000c54
 80063d0:	20000c8d 	.word	0x20000c8d
 80063d4:	20000c7a 	.word	0x20000c7a
 80063d8:	20000c94 	.word	0x20000c94
 80063dc:	20000c2c 	.word	0x20000c2c
 80063e0:	20000c30 	.word	0x20000c30
 80063e4:	20000c67 	.word	0x20000c67
 80063e8:	20000c95 	.word	0x20000c95
 80063ec:	20000c96 	.word	0x20000c96
				  }

				  else //if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3)))
				  {
					  kapiTablapizzato=0;
 80063f0:	4b86      	ldr	r3, [pc, #536]	; (800660c <mainTask+0x1738>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi Tabla çıkış

				  if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1)
 80063f6:	4b86      	ldr	r3, [pc, #536]	; (8006610 <mainTask+0x173c>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d107      	bne.n	800640e <mainTask+0x153a>
 80063fe:	4b85      	ldr	r3, [pc, #532]	; (8006614 <mainTask+0x1740>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <mainTask+0x153a>
 8006406:	4b81      	ldr	r3, [pc, #516]	; (800660c <mainTask+0x1738>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <mainTask+0x1546>
				  {
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800640e:	2201      	movs	r2, #1
 8006410:	2120      	movs	r1, #32
 8006412:	4881      	ldr	r0, [pc, #516]	; (8006618 <mainTask+0x1744>)
 8006414:	f001 fe3d 	bl	8008092 <HAL_GPIO_WritePin>
 8006418:	e004      	b.n	8006424 <mainTask+0x1550>
				  }

				  else
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800641a:	2200      	movs	r2, #0
 800641c:	2120      	movs	r1, #32
 800641e:	487e      	ldr	r0, [pc, #504]	; (8006618 <mainTask+0x1744>)
 8006420:	f001 fe37 	bl	8008092 <HAL_GPIO_WritePin>

				  /********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				  if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006424:	4b7d      	ldr	r3, [pc, #500]	; (800661c <mainTask+0x1748>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <mainTask+0x1576>
 800642c:	2102      	movs	r1, #2
 800642e:	487c      	ldr	r0, [pc, #496]	; (8006620 <mainTask+0x174c>)
 8006430:	f001 fe18 	bl	8008064 <HAL_GPIO_ReadPin>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <mainTask+0x1576>
 800643a:	4b7a      	ldr	r3, [pc, #488]	; (8006624 <mainTask+0x1750>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <mainTask+0x1576>
 8006442:	4b79      	ldr	r3, [pc, #484]	; (8006628 <mainTask+0x1754>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d112      	bne.n	8006470 <mainTask+0x159c>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))){
 800644a:	4b78      	ldr	r3, [pc, #480]	; (800662c <mainTask+0x1758>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d066      	beq.n	8006520 <mainTask+0x164c>
 8006452:	2104      	movs	r1, #4
 8006454:	4872      	ldr	r0, [pc, #456]	; (8006620 <mainTask+0x174c>)
 8006456:	f001 fe05 	bl	8008064 <HAL_GPIO_ReadPin>
 800645a:	4603      	mov	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d15f      	bne.n	8006520 <mainTask+0x164c>
 8006460:	4b70      	ldr	r3, [pc, #448]	; (8006624 <mainTask+0x1750>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d05b      	beq.n	8006520 <mainTask+0x164c>
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <mainTask+0x1754>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d057      	beq.n	8006520 <mainTask+0x164c>

				  		calismaSayisi1=calismaSayisi1+1;
 8006470:	4b6f      	ldr	r3, [pc, #444]	; (8006630 <mainTask+0x175c>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	4b6d      	ldr	r3, [pc, #436]	; (8006630 <mainTask+0x175c>)
 800647a:	701a      	strb	r2, [r3, #0]
				  		if(calismaSayisi1>9){
 800647c:	4b6c      	ldr	r3, [pc, #432]	; (8006630 <mainTask+0x175c>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b09      	cmp	r3, #9
 8006482:	d908      	bls.n	8006496 <mainTask+0x15c2>
				  		calismaSayisi1=0;
 8006484:	4b6a      	ldr	r3, [pc, #424]	; (8006630 <mainTask+0x175c>)
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10=calismaSayisi10+1;
 800648a:	4b6a      	ldr	r3, [pc, #424]	; (8006634 <mainTask+0x1760>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b68      	ldr	r3, [pc, #416]	; (8006634 <mainTask+0x1760>)
 8006494:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi10>9){
 8006496:	4b67      	ldr	r3, [pc, #412]	; (8006634 <mainTask+0x1760>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b09      	cmp	r3, #9
 800649c:	d908      	bls.n	80064b0 <mainTask+0x15dc>
				  		calismaSayisi10=0;
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <mainTask+0x1760>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi100=calismaSayisi100+1;
 80064a4:	4b64      	ldr	r3, [pc, #400]	; (8006638 <mainTask+0x1764>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b62      	ldr	r3, [pc, #392]	; (8006638 <mainTask+0x1764>)
 80064ae:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi100>9){
 80064b0:	4b61      	ldr	r3, [pc, #388]	; (8006638 <mainTask+0x1764>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	d908      	bls.n	80064ca <mainTask+0x15f6>
				  		calismaSayisi100=0;
 80064b8:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <mainTask+0x1764>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi1000=calismaSayisi1000+1;
 80064be:	4b5f      	ldr	r3, [pc, #380]	; (800663c <mainTask+0x1768>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	4b5d      	ldr	r3, [pc, #372]	; (800663c <mainTask+0x1768>)
 80064c8:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi1000>9){
 80064ca:	4b5c      	ldr	r3, [pc, #368]	; (800663c <mainTask+0x1768>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d908      	bls.n	80064e4 <mainTask+0x1610>
				  		calismaSayisi1000=0;
 80064d2:	4b5a      	ldr	r3, [pc, #360]	; (800663c <mainTask+0x1768>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10000=calismaSayisi10000+1;
 80064d8:	4b59      	ldr	r3, [pc, #356]	; (8006640 <mainTask+0x176c>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	4b57      	ldr	r3, [pc, #348]	; (8006640 <mainTask+0x176c>)
 80064e2:	701a      	strb	r2, [r3, #0]
				  		}
				  		eepromData[32]=calismaSayisi10000;
 80064e4:	4b56      	ldr	r3, [pc, #344]	; (8006640 <mainTask+0x176c>)
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	4b56      	ldr	r3, [pc, #344]	; (8006644 <mainTask+0x1770>)
 80064ea:	f883 2020 	strb.w	r2, [r3, #32]
				  		eepromData[31]=calismaSayisi1000;
 80064ee:	4b53      	ldr	r3, [pc, #332]	; (800663c <mainTask+0x1768>)
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	4b54      	ldr	r3, [pc, #336]	; (8006644 <mainTask+0x1770>)
 80064f4:	77da      	strb	r2, [r3, #31]
				  		eepromData[30]=calismaSayisi100;
 80064f6:	4b50      	ldr	r3, [pc, #320]	; (8006638 <mainTask+0x1764>)
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	4b52      	ldr	r3, [pc, #328]	; (8006644 <mainTask+0x1770>)
 80064fc:	779a      	strb	r2, [r3, #30]
				  		eepromData[29]=calismaSayisi10;
 80064fe:	4b4d      	ldr	r3, [pc, #308]	; (8006634 <mainTask+0x1760>)
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <mainTask+0x1770>)
 8006504:	775a      	strb	r2, [r3, #29]
				  		eepromData[28]=calismaSayisi1;
 8006506:	4b4a      	ldr	r3, [pc, #296]	; (8006630 <mainTask+0x175c>)
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <mainTask+0x1770>)
 800650c:	771a      	strb	r2, [r3, #28]

				  		hafizaYaz=1;
 800650e:	4b4e      	ldr	r3, [pc, #312]	; (8006648 <mainTask+0x1774>)
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]

				  		CalismaSayisiYukari=0;
 8006514:	4b41      	ldr	r3, [pc, #260]	; (800661c <mainTask+0x1748>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
				  		CalismaSayisiAsagi=0;
 800651a:	4b44      	ldr	r3, [pc, #272]	; (800662c <mainTask+0x1758>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
				  }

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				  if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006524:	4849      	ldr	r0, [pc, #292]	; (800664c <mainTask+0x1778>)
 8006526:	f001 fd9d 	bl	8008064 <HAL_GPIO_ReadPin>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <mainTask+0x168a>
				  		||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006534:	4845      	ldr	r0, [pc, #276]	; (800664c <mainTask+0x1778>)
 8006536:	f001 fd95 	bl	8008064 <HAL_GPIO_ReadPin>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <mainTask+0x168a>
				  		||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006544:	4841      	ldr	r0, [pc, #260]	; (800664c <mainTask+0x1778>)
 8006546:	f001 fd8d 	bl	8008064 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <mainTask+0x168a>
				  	    ||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)){
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	4833      	ldr	r0, [pc, #204]	; (8006620 <mainTask+0x174c>)
 8006554:	f001 fd86 	bl	8008064 <HAL_GPIO_ReadPin>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <mainTask+0x1692>

				  		 startBasili=1;
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <mainTask+0x177c>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e002      	b.n	800656c <mainTask+0x1698>
				  }
				  else
				  	     startBasili=0;
 8006566:	4b3a      	ldr	r3, [pc, #232]	; (8006650 <mainTask+0x177c>)
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]

				  if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1)
 800656c:	4b38      	ldr	r3, [pc, #224]	; (8006650 <mainTask+0x177c>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d011      	beq.n	8006598 <mainTask+0x16c4>
 8006574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006578:	4834      	ldr	r0, [pc, #208]	; (800664c <mainTask+0x1778>)
 800657a:	f001 fd73 	bl	8008064 <HAL_GPIO_ReadPin>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d109      	bne.n	8006598 <mainTask+0x16c4>
				  	{
				  		hataVar=1;
 8006584:	4b33      	ldr	r3, [pc, #204]	; (8006654 <mainTask+0x1780>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(1);
 800658a:	2001      	movs	r0, #1
 800658c:	f7fd ffd8 	bl	8004540 <hataKoduLcdGoster>
				  		acilstophatasi=1;
 8006590:	4b31      	ldr	r3, [pc, #196]	; (8006658 <mainTask+0x1784>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e018      	b.n	80065ca <mainTask+0x16f6>
				  	}

				  else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0)
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <mainTask+0x1784>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d014      	beq.n	80065ca <mainTask+0x16f6>
 80065a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065a4:	4829      	ldr	r0, [pc, #164]	; (800664c <mainTask+0x1778>)
 80065a6:	f001 fd5d 	bl	8008064 <HAL_GPIO_ReadPin>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <mainTask+0x16f6>
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <mainTask+0x177c>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f083 0301 	eor.w	r3, r3, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <mainTask+0x16f6>
				  	 {
				  		acilstophatasi=0;
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <mainTask+0x1784>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(1);
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7fd ff63 	bl	8004490 <lcdUpdate>
				  	}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				  if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1))
 80065ca:	4b24      	ldr	r3, [pc, #144]	; (800665c <mainTask+0x1788>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f083 0301 	eor.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d049      	beq.n	800666c <mainTask+0x1798>
 80065d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065dc:	481b      	ldr	r0, [pc, #108]	; (800664c <mainTask+0x1778>)
 80065de:	f001 fd41 	bl	8008064 <HAL_GPIO_ReadPin>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <mainTask+0x171c>
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <mainTask+0x178c>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d03d      	beq.n	800666c <mainTask+0x1798>
 80065f0:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <mainTask+0x1790>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d139      	bne.n	800666c <mainTask+0x1798>
				   {
				  		hataVar=1;
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <mainTask+0x1780>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(2);
 80065fe:	2002      	movs	r0, #2
 8006600:	f7fd ff9e 	bl	8004540 <hataKoduLcdGoster>
				  		emniyetCercevesihatasi=1;
 8006604:	4b18      	ldr	r3, [pc, #96]	; (8006668 <mainTask+0x1794>)
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e047      	b.n	800669c <mainTask+0x17c8>
 800660c:	20000c96 	.word	0x20000c96
 8006610:	20000c95 	.word	0x20000c95
 8006614:	20000c94 	.word	0x20000c94
 8006618:	40010800 	.word	0x40010800
 800661c:	20000c8a 	.word	0x20000c8a
 8006620:	40011000 	.word	0x40011000
 8006624:	20000c52 	.word	0x20000c52
 8006628:	20000c8d 	.word	0x20000c8d
 800662c:	20000c8b 	.word	0x20000c8b
 8006630:	20000c49 	.word	0x20000c49
 8006634:	20000c4a 	.word	0x20000c4a
 8006638:	20000910 	.word	0x20000910
 800663c:	20000911 	.word	0x20000911
 8006640:	20000c4b 	.word	0x20000c4b
 8006644:	20000be4 	.word	0x20000be4
 8006648:	20000c77 	.word	0x20000c77
 800664c:	40010c00 	.word	0x40010c00
 8006650:	20000c99 	.word	0x20000c99
 8006654:	20000ca0 	.word	0x20000ca0
 8006658:	20000c9b 	.word	0x20000c9b
 800665c:	20000ca2 	.word	0x20000ca2
 8006660:	20000cac 	.word	0x20000cac
 8006664:	20000c50 	.word	0x20000c50
 8006668:	20000c9c 	.word	0x20000c9c
				  	}
				  	else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0){
 800666c:	4b91      	ldr	r3, [pc, #580]	; (80068b4 <mainTask+0x19e0>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d013      	beq.n	800669c <mainTask+0x17c8>
 8006674:	4b90      	ldr	r3, [pc, #576]	; (80068b8 <mainTask+0x19e4>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00f      	beq.n	800669c <mainTask+0x17c8>
 800667c:	4b8f      	ldr	r3, [pc, #572]	; (80068bc <mainTask+0x19e8>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f083 0301 	eor.w	r3, r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <mainTask+0x17c8>
				  		emniyetCercevesihatasi=0;
 800668a:	4b8a      	ldr	r3, [pc, #552]	; (80068b4 <mainTask+0x19e0>)
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
				  		cercevesasagicalisma=0;
 8006690:	4b8b      	ldr	r3, [pc, #556]	; (80068c0 <mainTask+0x19ec>)
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(2);
 8006696:	2002      	movs	r0, #2
 8006698:	f7fd fefa 	bl	8004490 <lcdUpdate>
				  	}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

				  	if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1)
 800669c:	4b89      	ldr	r3, [pc, #548]	; (80068c4 <mainTask+0x19f0>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d119      	bne.n	80066d8 <mainTask+0x1804>
 80066a4:	4b88      	ldr	r3, [pc, #544]	; (80068c8 <mainTask+0x19f4>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d115      	bne.n	80066d8 <mainTask+0x1804>
 80066ac:	4b87      	ldr	r3, [pc, #540]	; (80068cc <mainTask+0x19f8>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <mainTask+0x1804>
 80066b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066b8:	4885      	ldr	r0, [pc, #532]	; (80068d0 <mainTask+0x19fc>)
 80066ba:	f001 fcd3 	bl	8008064 <HAL_GPIO_ReadPin>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d109      	bne.n	80066d8 <mainTask+0x1804>
				  	{
				  		hataVar=1;
 80066c4:	4b83      	ldr	r3, [pc, #524]	; (80068d4 <mainTask+0x1a00>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(3);
 80066ca:	2003      	movs	r0, #3
 80066cc:	f7fd ff38 	bl	8004540 <hataKoduLcdGoster>
				  		basinchatasi=1;
 80066d0:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <mainTask+0x1a04>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e015      	b.n	8006704 <mainTask+0x1830>
				  	}
				  	else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1){
 80066d8:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <mainTask+0x1a04>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <mainTask+0x1830>
 80066e0:	4b78      	ldr	r3, [pc, #480]	; (80068c4 <mainTask+0x19f0>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10d      	bne.n	8006704 <mainTask+0x1830>
 80066e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ec:	487b      	ldr	r0, [pc, #492]	; (80068dc <mainTask+0x1a08>)
 80066ee:	f001 fcb9 	bl	8008064 <HAL_GPIO_ReadPin>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <mainTask+0x1830>
				  		basinchatasi=0;
 80066f8:	4b77      	ldr	r3, [pc, #476]	; (80068d8 <mainTask+0x1a04>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(3);
 80066fe:	2003      	movs	r0, #3
 8006700:	f7fd fec6 	bl	8004490 <lcdUpdate>

				  	}
		/************************************ KAPI SİVİÇ HATASI **************************************************/
				  if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 8006704:	4b76      	ldr	r3, [pc, #472]	; (80068e0 <mainTask+0x1a0c>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <mainTask+0x1840>
 800670c:	4b75      	ldr	r3, [pc, #468]	; (80068e4 <mainTask+0x1a10>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d019      	beq.n	8006748 <mainTask+0x1874>
 8006714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006718:	4873      	ldr	r0, [pc, #460]	; (80068e8 <mainTask+0x1a14>)
 800671a:	f001 fca3 	bl	8008064 <HAL_GPIO_ReadPin>
 800671e:	4603      	mov	r3, r0
 8006720:	2b01      	cmp	r3, #1
 8006722:	d111      	bne.n	8006748 <mainTask+0x1874>
 8006724:	4b71      	ldr	r3, [pc, #452]	; (80068ec <mainTask+0x1a18>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d003      	beq.n	8006734 <mainTask+0x1860>
 800672c:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <mainTask+0x1a18>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d109      	bne.n	8006748 <mainTask+0x1874>
				  {
					  hataVar=1;
 8006734:	4b67      	ldr	r3, [pc, #412]	; (80068d4 <mainTask+0x1a00>)
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(4);
 800673a:	2004      	movs	r0, #4
 800673c:	f7fd ff00 	bl	8004540 <hataKoduLcdGoster>
					  katkapisivicihatasi=1;
 8006740:	4b6b      	ldr	r3, [pc, #428]	; (80068f0 <mainTask+0x1a1c>)
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e01f      	b.n	8006788 <mainTask+0x18b4>
				  }
				  else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 8006748:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <mainTask+0x1a1c>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01b      	beq.n	8006788 <mainTask+0x18b4>
 8006750:	4b68      	ldr	r3, [pc, #416]	; (80068f4 <mainTask+0x1a20>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d017      	beq.n	8006788 <mainTask+0x18b4>
 8006758:	4b61      	ldr	r3, [pc, #388]	; (80068e0 <mainTask+0x1a0c>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d010      	beq.n	8006788 <mainTask+0x18b4>
 8006766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800676a:	485f      	ldr	r0, [pc, #380]	; (80068e8 <mainTask+0x1a14>)
 800676c:	f001 fc7a 	bl	8008064 <HAL_GPIO_ReadPin>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <mainTask+0x18b4>
				  {
					  katkapisivicihatasi=0;
 8006776:	4b5e      	ldr	r3, [pc, #376]	; (80068f0 <mainTask+0x1a1c>)
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyorkapi=0;
 800677c:	4b59      	ldr	r3, [pc, #356]	; (80068e4 <mainTask+0x1a10>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
				  	  lcdUpdate(4);
 8006782:	2004      	movs	r0, #4
 8006784:	f7fd fe84 	bl	8004490 <lcdUpdate>
				  }

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				  if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 8006788:	4b55      	ldr	r3, [pc, #340]	; (80068e0 <mainTask+0x1a0c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <mainTask+0x18c4>
 8006790:	4b59      	ldr	r3, [pc, #356]	; (80068f8 <mainTask+0x1a24>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d019      	beq.n	80067cc <mainTask+0x18f8>
 8006798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800679c:	4852      	ldr	r0, [pc, #328]	; (80068e8 <mainTask+0x1a14>)
 800679e:	f001 fc61 	bl	8008064 <HAL_GPIO_ReadPin>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d111      	bne.n	80067cc <mainTask+0x18f8>
 80067a8:	4b50      	ldr	r3, [pc, #320]	; (80068ec <mainTask+0x1a18>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d003      	beq.n	80067b8 <mainTask+0x18e4>
 80067b0:	4b4e      	ldr	r3, [pc, #312]	; (80068ec <mainTask+0x1a18>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d109      	bne.n	80067cc <mainTask+0x18f8>
				  {
					  hataVar=1;
 80067b8:	4b46      	ldr	r3, [pc, #280]	; (80068d4 <mainTask+0x1a00>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(5);
 80067be:	2005      	movs	r0, #5
 80067c0:	f7fd febe 	bl	8004540 <hataKoduLcdGoster>
					  tablakapisivicihatasi=1;
 80067c4:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <mainTask+0x1a28>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e023      	b.n	8006814 <mainTask+0x1940>
				  }
				  else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1)
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <mainTask+0x1a28>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01f      	beq.n	8006814 <mainTask+0x1940>
 80067d4:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <mainTask+0x1a20>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01b      	beq.n	8006814 <mainTask+0x1940>
 80067dc:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <mainTask+0x1a0c>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f083 0301 	eor.w	r3, r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d014      	beq.n	8006814 <mainTask+0x1940>
 80067ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067ee:	483e      	ldr	r0, [pc, #248]	; (80068e8 <mainTask+0x1a14>)
 80067f0:	f001 fc38 	bl	8008064 <HAL_GPIO_ReadPin>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10c      	bne.n	8006814 <mainTask+0x1940>
 80067fa:	4b3e      	ldr	r3, [pc, #248]	; (80068f4 <mainTask+0x1a20>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <mainTask+0x1940>
				  {
					  tablakapisivicihatasi=0;
 8006802:	4b3e      	ldr	r3, [pc, #248]	; (80068fc <mainTask+0x1a28>)
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyortabla=0;
 8006808:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <mainTask+0x1a24>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
				  	  lcdUpdate(5);
 800680e:	2005      	movs	r0, #5
 8006810:	f7fd fe3e 	bl	8004490 <lcdUpdate>
				  }


		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				   if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor))
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <mainTask+0x19f8>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d107      	bne.n	800682c <mainTask+0x1958>
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <mainTask+0x19e8>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <mainTask+0x1958>
 8006824:	4b36      	ldr	r3, [pc, #216]	; (8006900 <mainTask+0x1a2c>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <mainTask+0x197c>
				  	 {

			    	if(millis-timer4>=makineCalismaTmr)
 800682c:	4b35      	ldr	r3, [pc, #212]	; (8006904 <mainTask+0x1a30>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b35      	ldr	r3, [pc, #212]	; (8006908 <mainTask+0x1a34>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	4a35      	ldr	r2, [pc, #212]	; (800690c <mainTask+0x1a38>)
 8006838:	7812      	ldrb	r2, [r2, #0]
 800683a:	4293      	cmp	r3, r2
 800683c:	d308      	bcc.n	8006850 <mainTask+0x197c>
				  	  {
				  		hataVar=1;
 800683e:	4b25      	ldr	r3, [pc, #148]	; (80068d4 <mainTask+0x1a00>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(6);
 8006844:	2006      	movs	r0, #6
 8006846:	f7fd fe7b 	bl	8004540 <hataKoduLcdGoster>
				  		maksimumcalismahatasi=1;
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <mainTask+0x1a3c>)
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
				  	  }
				    }

				   if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0){
 8006850:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <mainTask+0x1a3c>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <mainTask+0x19ac>
 8006858:	2108      	movs	r1, #8
 800685a:	4823      	ldr	r0, [pc, #140]	; (80068e8 <mainTask+0x1a14>)
 800685c:	f001 fc02 	bl	8008064 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00c      	beq.n	8006880 <mainTask+0x19ac>
 8006866:	4b1e      	ldr	r3, [pc, #120]	; (80068e0 <mainTask+0x1a0c>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f083 0301 	eor.w	r3, r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <mainTask+0x19ac>

				  		maksimumcalismahatasi=0;
 8006874:	4b26      	ldr	r3, [pc, #152]	; (8006910 <mainTask+0x1a3c>)
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(6);
 800687a:	2006      	movs	r0, #6
 800687c:	f7fd fe08 	bl	8004490 <lcdUpdate>
				  	}

				  	if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)){
 8006880:	4b24      	ldr	r3, [pc, #144]	; (8006914 <mainTask+0x1a40>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <mainTask+0x19cc>
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <mainTask+0x19e8>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <mainTask+0x19cc>
 8006890:	4b21      	ldr	r3, [pc, #132]	; (8006918 <mainTask+0x1a44>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <mainTask+0x19cc>
 8006898:	4b19      	ldr	r3, [pc, #100]	; (8006900 <mainTask+0x1a2c>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03f      	beq.n	8006920 <mainTask+0x1a4c>
				  		makineCalisiyor=0;
 80068a0:	4b1e      	ldr	r3, [pc, #120]	; (800691c <mainTask+0x1a48>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyorkapi=1;
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <mainTask+0x1a10>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyortabla=1;
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <mainTask+0x1a24>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e03c      	b.n	800692e <mainTask+0x1a5a>
 80068b4:	20000c9c 	.word	0x20000c9c
 80068b8:	20000ca2 	.word	0x20000ca2
 80068bc:	20000c83 	.word	0x20000c83
 80068c0:	20000cac 	.word	0x20000cac
 80068c4:	20000c4f 	.word	0x20000c4f
 80068c8:	20000c53 	.word	0x20000c53
 80068cc:	20000c9f 	.word	0x20000c9f
 80068d0:	40011000 	.word	0x40011000
 80068d4:	20000ca0 	.word	0x20000ca0
 80068d8:	20000ca9 	.word	0x20000ca9
 80068dc:	40010c00 	.word	0x40010c00
 80068e0:	20000c99 	.word	0x20000c99
 80068e4:	20000cad 	.word	0x20000cad
 80068e8:	40010800 	.word	0x40010800
 80068ec:	20000c54 	.word	0x20000c54
 80068f0:	20000caa 	.word	0x20000caa
 80068f4:	20000c8d 	.word	0x20000c8d
 80068f8:	20000cae 	.word	0x20000cae
 80068fc:	20000cab 	.word	0x20000cab
 8006900:	20000c82 	.word	0x20000c82
 8006904:	20000c2c 	.word	0x20000c2c
 8006908:	20000c40 	.word	0x20000c40
 800690c:	20000c64 	.word	0x20000c64
 8006910:	20000c9a 	.word	0x20000c9a
 8006914:	20000c80 	.word	0x20000c80
 8006918:	20000c81 	.word	0x20000c81
 800691c:	20000ca1 	.word	0x20000ca1
				  	}
				  	else
				  	{
				  		makineCalisiyor=1;
 8006920:	4b8e      	ldr	r3, [pc, #568]	; (8006b5c <mainTask+0x1c88>)
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
				  		timer4=millis;
 8006926:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <mainTask+0x1c8c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a8e      	ldr	r2, [pc, #568]	; (8006b64 <mainTask+0x1c90>)
 800692c:	6013      	str	r3, [r2, #0]
				  	}
		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				  if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800692e:	4b8e      	ldr	r3, [pc, #568]	; (8006b68 <mainTask+0x1c94>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02f      	beq.n	8006996 <mainTask+0x1ac2>
 8006936:	4b8d      	ldr	r3, [pc, #564]	; (8006b6c <mainTask+0x1c98>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d028      	beq.n	8006996 <mainTask+0x1ac2>
 8006944:	4b8a      	ldr	r3, [pc, #552]	; (8006b70 <mainTask+0x1c9c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f083 0301 	eor.w	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d021      	beq.n	8006996 <mainTask+0x1ac2>
 8006952:	4b88      	ldr	r3, [pc, #544]	; (8006b74 <mainTask+0x1ca0>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f083 0301 	eor.w	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <mainTask+0x1ac2>
						  && katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0){
 8006960:	4b85      	ldr	r3, [pc, #532]	; (8006b78 <mainTask+0x1ca4>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f083 0301 	eor.w	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d013      	beq.n	8006996 <mainTask+0x1ac2>
 800696e:	4b83      	ldr	r3, [pc, #524]	; (8006b7c <mainTask+0x1ca8>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f083 0301 	eor.w	r3, r3, #1
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <mainTask+0x1ac2>
 800697c:	4b80      	ldr	r3, [pc, #512]	; (8006b80 <mainTask+0x1cac>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f083 0301 	eor.w	r3, r3, #1
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <mainTask+0x1ac2>
					  hataVar=0;
 800698a:	4b77      	ldr	r3, [pc, #476]	; (8006b68 <mainTask+0x1c94>)
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
					  lcdUpdate(7);
 8006990:	2007      	movs	r0, #7
 8006992:	f7fd fd7d 	bl	8004490 <lcdUpdate>

				  // DEMO MOD BASLIYOR

				  // DEMO YUKARI CALISMA

				  if((demoMode==1)&&(stopVar)&&(menuGiris==0)){
 8006996:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <mainTask+0x1cb0>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b01      	cmp	r3, #1
 800699c:	f040 8268 	bne.w	8006e70 <mainTask+0x1f9c>
 80069a0:	4b79      	ldr	r3, [pc, #484]	; (8006b88 <mainTask+0x1cb4>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8263 	beq.w	8006e70 <mainTask+0x1f9c>
 80069aa:	4b78      	ldr	r3, [pc, #480]	; (8006b8c <mainTask+0x1cb8>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 825e 	bne.w	8006e70 <mainTask+0x1f9c>

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80069b4:	2102      	movs	r1, #2
 80069b6:	4876      	ldr	r0, [pc, #472]	; (8006b90 <mainTask+0x1cbc>)
 80069b8:	f001 fb54 	bl	8008064 <HAL_GPIO_ReadPin>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d11d      	bne.n	80069fe <mainTask+0x1b2a>
						      && (demoAsagiCalis==0)
 80069c2:	4b74      	ldr	r3, [pc, #464]	; (8006b94 <mainTask+0x1cc0>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f083 0301 	eor.w	r3, r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d016      	beq.n	80069fe <mainTask+0x1b2a>
							  && (demoDevYukari==0)
 80069d0:	4b71      	ldr	r3, [pc, #452]	; (8006b98 <mainTask+0x1cc4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f083 0301 	eor.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00f      	beq.n	80069fe <mainTask+0x1b2a>
							  && (demoDevAsagi==0)){
 80069de:	4b6f      	ldr	r3, [pc, #444]	; (8006b9c <mainTask+0x1cc8>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f083 0301 	eor.w	r3, r3, #1
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <mainTask+0x1b2a>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80069ec:	2201      	movs	r2, #1
 80069ee:	2104      	movs	r1, #4
 80069f0:	486b      	ldr	r0, [pc, #428]	; (8006ba0 <mainTask+0x1ccc>)
 80069f2:	f001 fb4e 	bl	8008092 <HAL_GPIO_WritePin>
						  demoYukariCalis=1;
 80069f6:	4b6b      	ldr	r3, [pc, #428]	; (8006ba4 <mainTask+0x1cd0>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e00e      	b.n	8006a1c <mainTask+0x1b48>
					  }
					  else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1){
 80069fe:	2102      	movs	r1, #2
 8006a00:	4863      	ldr	r0, [pc, #396]	; (8006b90 <mainTask+0x1cbc>)
 8006a02:	f001 fb2f 	bl	8008064 <HAL_GPIO_ReadPin>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <mainTask+0x1b48>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2104      	movs	r1, #4
 8006a10:	4863      	ldr	r0, [pc, #396]	; (8006ba0 <mainTask+0x1ccc>)
 8006a12:	f001 fb3e 	bl	8008092 <HAL_GPIO_WritePin>
						  demoYukariCalis=0;
 8006a16:	4b63      	ldr	r3, [pc, #396]	; (8006ba4 <mainTask+0x1cd0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO MOTOR CALISMASI

					  if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)){
 8006a1c:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <mainTask+0x1cd0>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <mainTask+0x1b68>
 8006a24:	4b5c      	ldr	r3, [pc, #368]	; (8006b98 <mainTask+0x1cc4>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <mainTask+0x1b68>
 8006a2c:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <mainTask+0x1cc8>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <mainTask+0x1b68>
 8006a34:	4b57      	ldr	r3, [pc, #348]	; (8006b94 <mainTask+0x1cc0>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00c      	beq.n	8006a56 <mainTask+0x1b82>

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a42:	4857      	ldr	r0, [pc, #348]	; (8006ba0 <mainTask+0x1ccc>)
 8006a44:	f001 fb25 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a4e:	4854      	ldr	r0, [pc, #336]	; (8006ba0 <mainTask+0x1ccc>)
 8006a50:	f001 fb1f 	bl	8008092 <HAL_GPIO_WritePin>
 8006a54:	e00b      	b.n	8006a6e <mainTask+0x1b9a>

					  }
					  else {

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a56:	2200      	movs	r2, #0
 8006a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a5c:	4850      	ldr	r0, [pc, #320]	; (8006ba0 <mainTask+0x1ccc>)
 8006a5e:	f001 fb18 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a62:	2200      	movs	r2, #0
 8006a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a68:	484d      	ldr	r0, [pc, #308]	; (8006ba0 <mainTask+0x1ccc>)
 8006a6a:	f001 fb12 	bl	8008092 <HAL_GPIO_WritePin>
					  }
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4847      	ldr	r0, [pc, #284]	; (8006b90 <mainTask+0x1cbc>)
 8006a72:	f001 faf7 	bl	8008064 <HAL_GPIO_ReadPin>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10d      	bne.n	8006a98 <mainTask+0x1bc4>
							  && (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a80:	4843      	ldr	r0, [pc, #268]	; (8006b90 <mainTask+0x1cbc>)
 8006a82:	f001 faef 	bl	8008064 <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <mainTask+0x1bc4>
							  && (demoYukariCalis==0)
 8006a8c:	4b45      	ldr	r3, [pc, #276]	; (8006ba4 <mainTask+0x1cd0>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f083 0301 	eor.w	r3, r3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0


					  }

					  //DEVİRME YUKARI CALIS
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a98:	2102      	movs	r1, #2
 8006a9a:	483d      	ldr	r0, [pc, #244]	; (8006b90 <mainTask+0x1cbc>)
 8006a9c:	f001 fae2 	bl	8008064 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d125      	bne.n	8006af2 <mainTask+0x1c1e>
							  &&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006aaa:	4839      	ldr	r0, [pc, #228]	; (8006b90 <mainTask+0x1cbc>)
 8006aac:	f001 fada 	bl	8008064 <HAL_GPIO_ReadPin>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11d      	bne.n	8006af2 <mainTask+0x1c1e>
							  &&(demoYukariCalis==0)
 8006ab6:	4b3b      	ldr	r3, [pc, #236]	; (8006ba4 <mainTask+0x1cd0>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f083 0301 	eor.w	r3, r3, #1
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d016      	beq.n	8006af2 <mainTask+0x1c1e>
							  &&(demoAsagiCalis==0)
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <mainTask+0x1cc0>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00f      	beq.n	8006af2 <mainTask+0x1c1e>
							  && (demoDevAsagi==0)){
 8006ad2:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <mainTask+0x1cc8>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f083 0301 	eor.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <mainTask+0x1c1e>
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	2120      	movs	r1, #32
 8006ae4:	482a      	ldr	r0, [pc, #168]	; (8006b90 <mainTask+0x1cbc>)
 8006ae6:	f001 fad4 	bl	8008092 <HAL_GPIO_WritePin>
						  demoDevYukari=1;
 8006aea:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <mainTask+0x1cc4>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e007      	b.n	8006b02 <mainTask+0x1c2e>
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006af2:	2200      	movs	r2, #0
 8006af4:	2120      	movs	r1, #32
 8006af6:	4826      	ldr	r0, [pc, #152]	; (8006b90 <mainTask+0x1cbc>)
 8006af8:	f001 facb 	bl	8008092 <HAL_GPIO_WritePin>
						  demoDevYukari=0;
 8006afc:	4b26      	ldr	r3, [pc, #152]	; (8006b98 <mainTask+0x1cc4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
					  }

					  // DEVIRME ASAGI CALIS

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b02:	2102      	movs	r1, #2
 8006b04:	4822      	ldr	r0, [pc, #136]	; (8006b90 <mainTask+0x1cbc>)
 8006b06:	f001 faad 	bl	8008064 <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d14b      	bne.n	8006ba8 <mainTask+0x1cd4>
							  &&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b14:	481e      	ldr	r0, [pc, #120]	; (8006b90 <mainTask+0x1cbc>)
 8006b16:	f001 faa5 	bl	8008064 <HAL_GPIO_ReadPin>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d143      	bne.n	8006ba8 <mainTask+0x1cd4>
							  &&(demoYukariCalis==0)
 8006b20:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <mainTask+0x1cd0>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f083 0301 	eor.w	r3, r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d03c      	beq.n	8006ba8 <mainTask+0x1cd4>
							  &&(demoDevYukari==0)
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <mainTask+0x1cc4>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d035      	beq.n	8006ba8 <mainTask+0x1cd4>
							  && (demoAsagiCalis==0)){
 8006b3c:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <mainTask+0x1cc0>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f083 0301 	eor.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d02e      	beq.n	8006ba8 <mainTask+0x1cd4>
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2110      	movs	r1, #16
 8006b4e:	4810      	ldr	r0, [pc, #64]	; (8006b90 <mainTask+0x1cbc>)
 8006b50:	f001 fa9f 	bl	8008092 <HAL_GPIO_WritePin>
						  demoDevAsagi=1;
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <mainTask+0x1cc8>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e02d      	b.n	8006bb8 <mainTask+0x1ce4>
 8006b5c:	20000ca1 	.word	0x20000ca1
 8006b60:	20000c2c 	.word	0x20000c2c
 8006b64:	20000c40 	.word	0x20000c40
 8006b68:	20000ca0 	.word	0x20000ca0
 8006b6c:	20000c9b 	.word	0x20000c9b
 8006b70:	20000c9c 	.word	0x20000c9c
 8006b74:	20000ca9 	.word	0x20000ca9
 8006b78:	20000caa 	.word	0x20000caa
 8006b7c:	20000cab 	.word	0x20000cab
 8006b80:	20000c9a 	.word	0x20000c9a
 8006b84:	20000c6a 	.word	0x20000c6a
 8006b88:	20000c9d 	.word	0x20000c9d
 8006b8c:	20000c69 	.word	0x20000c69
 8006b90:	40011000 	.word	0x40011000
 8006b94:	20000ca4 	.word	0x20000ca4
 8006b98:	20000ca5 	.word	0x20000ca5
 8006b9c:	20000ca6 	.word	0x20000ca6
 8006ba0:	40010c00 	.word	0x40010c00
 8006ba4:	20000ca3 	.word	0x20000ca3
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2110      	movs	r1, #16
 8006bac:	489a      	ldr	r0, [pc, #616]	; (8006e18 <mainTask+0x1f44>)
 8006bae:	f001 fa70 	bl	8008092 <HAL_GPIO_WritePin>
						  demoDevAsagi=0;
 8006bb2:	4b9a      	ldr	r3, [pc, #616]	; (8006e1c <mainTask+0x1f48>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO ASAGI CALISMA

					  if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006bb8:	2104      	movs	r1, #4
 8006bba:	4897      	ldr	r0, [pc, #604]	; (8006e18 <mainTask+0x1f44>)
 8006bbc:	f001 fa52 	bl	8008064 <HAL_GPIO_ReadPin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d125      	bne.n	8006c12 <mainTask+0x1d3e>
						      && (demoYukariCalis==0)
 8006bc6:	4b96      	ldr	r3, [pc, #600]	; (8006e20 <mainTask+0x1f4c>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f083 0301 	eor.w	r3, r3, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01e      	beq.n	8006c12 <mainTask+0x1d3e>
							  && (demoDevAsagi==0)
 8006bd4:	4b91      	ldr	r3, [pc, #580]	; (8006e1c <mainTask+0x1f48>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f083 0301 	eor.w	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d017      	beq.n	8006c12 <mainTask+0x1d3e>
							  && (demoDevYukari==0)){
 8006be2:	4b90      	ldr	r3, [pc, #576]	; (8006e24 <mainTask+0x1f50>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f083 0301 	eor.w	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d010      	beq.n	8006c12 <mainTask+0x1d3e>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	488c      	ldr	r0, [pc, #560]	; (8006e28 <mainTask+0x1f54>)
 8006bf6:	f001 fa4c 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	488a      	ldr	r0, [pc, #552]	; (8006e28 <mainTask+0x1f54>)
 8006c00:	f001 fa47 	bl	8008092 <HAL_GPIO_WritePin>
						  demoAsagiCalis=1;
 8006c04:	4b89      	ldr	r3, [pc, #548]	; (8006e2c <mainTask+0x1f58>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
						  demoCalismaSayisiYar=1;
 8006c0a:	4b89      	ldr	r3, [pc, #548]	; (8006e30 <mainTask+0x1f5c>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e013      	b.n	8006c3a <mainTask+0x1d66>
					  }
					  else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)){
 8006c12:	2104      	movs	r1, #4
 8006c14:	4880      	ldr	r0, [pc, #512]	; (8006e18 <mainTask+0x1f44>)
 8006c16:	f001 fa25 	bl	8008064 <HAL_GPIO_ReadPin>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10c      	bne.n	8006c3a <mainTask+0x1d66>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006c20:	2200      	movs	r2, #0
 8006c22:	2102      	movs	r1, #2
 8006c24:	4880      	ldr	r0, [pc, #512]	; (8006e28 <mainTask+0x1f54>)
 8006c26:	f001 fa34 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	487e      	ldr	r0, [pc, #504]	; (8006e28 <mainTask+0x1f54>)
 8006c30:	f001 fa2f 	bl	8008092 <HAL_GPIO_WritePin>
						  demoAsagiCalis=0;
 8006c34:	4b7d      	ldr	r3, [pc, #500]	; (8006e2c <mainTask+0x1f58>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
					  }

					  if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)
 8006c3a:	2104      	movs	r1, #4
 8006c3c:	4876      	ldr	r0, [pc, #472]	; (8006e18 <mainTask+0x1f44>)
 8006c3e:	f001 fa11 	bl	8008064 <HAL_GPIO_ReadPin>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10d      	bne.n	8006c64 <mainTask+0x1d90>
					  {

						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006c48:	2201      	movs	r2, #1
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	4879      	ldr	r0, [pc, #484]	; (8006e34 <mainTask+0x1f60>)
 8006c4e:	f001 fa20 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006c52:	2201      	movs	r2, #1
 8006c54:	2120      	movs	r1, #32
 8006c56:	4877      	ldr	r0, [pc, #476]	; (8006e34 <mainTask+0x1f60>)
 8006c58:	f001 fa1b 	bl	8008092 <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006c5c:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <mainTask+0x1f64>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a76      	ldr	r2, [pc, #472]	; (8006e3c <mainTask+0x1f68>)
 8006c62:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006c64:	4b74      	ldr	r3, [pc, #464]	; (8006e38 <mainTask+0x1f64>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b74      	ldr	r3, [pc, #464]	; (8006e3c <mainTask+0x1f68>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d909      	bls.n	8006c86 <mainTask+0x1db2>
					  {
						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	486f      	ldr	r0, [pc, #444]	; (8006e34 <mainTask+0x1f60>)
 8006c78:	f001 fa0b 	bl	8008092 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2120      	movs	r1, #32
 8006c80:	486c      	ldr	r0, [pc, #432]	; (8006e34 <mainTask+0x1f60>)
 8006c82:	f001 fa06 	bl	8008092 <HAL_GPIO_WritePin>
					  }

					  if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c86:	2102      	movs	r1, #2
 8006c88:	4863      	ldr	r0, [pc, #396]	; (8006e18 <mainTask+0x1f44>)
 8006c8a:	f001 f9eb 	bl	8008064 <HAL_GPIO_ReadPin>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d108      	bne.n	8006ca6 <mainTask+0x1dd2>
					  {

						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006c94:	2201      	movs	r2, #1
 8006c96:	2140      	movs	r1, #64	; 0x40
 8006c98:	4866      	ldr	r0, [pc, #408]	; (8006e34 <mainTask+0x1f60>)
 8006c9a:	f001 f9fa 	bl	8008092 <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006c9e:	4b66      	ldr	r3, [pc, #408]	; (8006e38 <mainTask+0x1f64>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a66      	ldr	r2, [pc, #408]	; (8006e3c <mainTask+0x1f68>)
 8006ca4:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006ca6:	4b64      	ldr	r3, [pc, #400]	; (8006e38 <mainTask+0x1f64>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b64      	ldr	r3, [pc, #400]	; (8006e3c <mainTask+0x1f68>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d904      	bls.n	8006cbe <mainTask+0x1dea>
					  {
						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2140      	movs	r1, #64	; 0x40
 8006cb8:	485e      	ldr	r0, [pc, #376]	; (8006e34 <mainTask+0x1f60>)
 8006cba:	f001 f9ea 	bl	8008092 <HAL_GPIO_WritePin>

					  }
					  if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)){
 8006cbe:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <mainTask+0x1f4c>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d058      	beq.n	8006d78 <mainTask+0x1ea4>
 8006cc6:	4b5a      	ldr	r3, [pc, #360]	; (8006e30 <mainTask+0x1f5c>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d054      	beq.n	8006d78 <mainTask+0x1ea4>
						  //mesajYazildi=0;
							calismaSayisi1=calismaSayisi1+1;
 8006cce:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <mainTask+0x1f6c>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4b5a      	ldr	r3, [pc, #360]	; (8006e40 <mainTask+0x1f6c>)
 8006cd8:	701a      	strb	r2, [r3, #0]
							if(calismaSayisi1>9){
 8006cda:	4b59      	ldr	r3, [pc, #356]	; (8006e40 <mainTask+0x1f6c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d908      	bls.n	8006cf4 <mainTask+0x1e20>
								calismaSayisi1=0;
 8006ce2:	4b57      	ldr	r3, [pc, #348]	; (8006e40 <mainTask+0x1f6c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
								calismaSayisi10=calismaSayisi10+1;
 8006ce8:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <mainTask+0x1f70>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	4b54      	ldr	r3, [pc, #336]	; (8006e44 <mainTask+0x1f70>)
 8006cf2:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi10>9){
 8006cf4:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <mainTask+0x1f70>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	d908      	bls.n	8006d0e <mainTask+0x1e3a>
								calismaSayisi10=0;
 8006cfc:	4b51      	ldr	r3, [pc, #324]	; (8006e44 <mainTask+0x1f70>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
								calismaSayisi100=calismaSayisi100+1;
 8006d02:	4b51      	ldr	r3, [pc, #324]	; (8006e48 <mainTask+0x1f74>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	3301      	adds	r3, #1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	4b4f      	ldr	r3, [pc, #316]	; (8006e48 <mainTask+0x1f74>)
 8006d0c:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi100>9){
 8006d0e:	4b4e      	ldr	r3, [pc, #312]	; (8006e48 <mainTask+0x1f74>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d908      	bls.n	8006d28 <mainTask+0x1e54>
								calismaSayisi100=0;
 8006d16:	4b4c      	ldr	r3, [pc, #304]	; (8006e48 <mainTask+0x1f74>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
								calismaSayisi1000=calismaSayisi1000+1;
 8006d1c:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <mainTask+0x1f78>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	4b49      	ldr	r3, [pc, #292]	; (8006e4c <mainTask+0x1f78>)
 8006d26:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi1000>9){
 8006d28:	4b48      	ldr	r3, [pc, #288]	; (8006e4c <mainTask+0x1f78>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d908      	bls.n	8006d42 <mainTask+0x1e6e>
								calismaSayisi1000=0;
 8006d30:	4b46      	ldr	r3, [pc, #280]	; (8006e4c <mainTask+0x1f78>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
								calismaSayisi10000=calismaSayisi10000+1;
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <mainTask+0x1f7c>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	4b44      	ldr	r3, [pc, #272]	; (8006e50 <mainTask+0x1f7c>)
 8006d40:	701a      	strb	r2, [r3, #0]
							}
							eepromData[32]=calismaSayisi10000;
 8006d42:	4b43      	ldr	r3, [pc, #268]	; (8006e50 <mainTask+0x1f7c>)
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <mainTask+0x1f80>)
 8006d48:	f883 2020 	strb.w	r2, [r3, #32]
							eepromData[31]=calismaSayisi1000;
 8006d4c:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <mainTask+0x1f78>)
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	4b40      	ldr	r3, [pc, #256]	; (8006e54 <mainTask+0x1f80>)
 8006d52:	77da      	strb	r2, [r3, #31]
							eepromData[30]=calismaSayisi100;
 8006d54:	4b3c      	ldr	r3, [pc, #240]	; (8006e48 <mainTask+0x1f74>)
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	4b3e      	ldr	r3, [pc, #248]	; (8006e54 <mainTask+0x1f80>)
 8006d5a:	779a      	strb	r2, [r3, #30]
							eepromData[29]=calismaSayisi10;
 8006d5c:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <mainTask+0x1f70>)
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <mainTask+0x1f80>)
 8006d62:	775a      	strb	r2, [r3, #29]
							eepromData[28]=calismaSayisi1;
 8006d64:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <mainTask+0x1f6c>)
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	4b3a      	ldr	r3, [pc, #232]	; (8006e54 <mainTask+0x1f80>)
 8006d6a:	771a      	strb	r2, [r3, #28]
							hafizaYaz=1;
 8006d6c:	4b3a      	ldr	r3, [pc, #232]	; (8006e58 <mainTask+0x1f84>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
		   				  //mesajYazildi=0;
						  demoCalismaSayisiYar=0;
 8006d72:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <mainTask+0x1f5c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
					  }
					  if (menuGiris==0){
 8006d78:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <mainTask+0x1f88>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 80b4 	bne.w	8006eea <mainTask+0x2016>
						  lcd_print(2,1,"Cycle      ");
 8006d82:	4a37      	ldr	r2, [pc, #220]	; (8006e60 <mainTask+0x1f8c>)
 8006d84:	2101      	movs	r1, #1
 8006d86:	2002      	movs	r0, #2
 8006d88:	f7f9 fb32 	bl	80003f0 <lcd_print>
						  lcd_print(1,1, "    DEMO MODE   ");
 8006d8c:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <mainTask+0x1f90>)
 8006d8e:	2101      	movs	r1, #1
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7f9 fb2d 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10000, snum, 10);
 8006d96:	4b2e      	ldr	r3, [pc, #184]	; (8006e50 <mainTask+0x1f7c>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	4932      	ldr	r1, [pc, #200]	; (8006e68 <mainTask+0x1f94>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f005 fb66 	bl	800c470 <itoa>
						    lcd_print(2,12,snum);
 8006da4:	4a30      	ldr	r2, [pc, #192]	; (8006e68 <mainTask+0x1f94>)
 8006da6:	210c      	movs	r1, #12
 8006da8:	2002      	movs	r0, #2
 8006daa:	f7f9 fb21 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1000, snum, 10);
 8006dae:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <mainTask+0x1f78>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	220a      	movs	r2, #10
 8006db4:	492c      	ldr	r1, [pc, #176]	; (8006e68 <mainTask+0x1f94>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f005 fb5a 	bl	800c470 <itoa>
						    lcd_print(2,13,snum);
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <mainTask+0x1f94>)
 8006dbe:	210d      	movs	r1, #13
 8006dc0:	2002      	movs	r0, #2
 8006dc2:	f7f9 fb15 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi100, snum, 10);
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <mainTask+0x1f74>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	220a      	movs	r2, #10
 8006dcc:	4926      	ldr	r1, [pc, #152]	; (8006e68 <mainTask+0x1f94>)
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f005 fb4e 	bl	800c470 <itoa>
						    lcd_print(2,14,snum);
 8006dd4:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <mainTask+0x1f94>)
 8006dd6:	210e      	movs	r1, #14
 8006dd8:	2002      	movs	r0, #2
 8006dda:	f7f9 fb09 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10, snum, 10);
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <mainTask+0x1f70>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	220a      	movs	r2, #10
 8006de4:	4920      	ldr	r1, [pc, #128]	; (8006e68 <mainTask+0x1f94>)
 8006de6:	4618      	mov	r0, r3
 8006de8:	f005 fb42 	bl	800c470 <itoa>
						    lcd_print(2,15,snum);
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <mainTask+0x1f94>)
 8006dee:	210f      	movs	r1, #15
 8006df0:	2002      	movs	r0, #2
 8006df2:	f7f9 fafd 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1, snum, 10);
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <mainTask+0x1f6c>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	491a      	ldr	r1, [pc, #104]	; (8006e68 <mainTask+0x1f94>)
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f005 fb36 	bl	800c470 <itoa>
						    lcd_print(2,16,snum);
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <mainTask+0x1f94>)
 8006e06:	2110      	movs	r1, #16
 8006e08:	2002      	movs	r0, #2
 8006e0a:	f7f9 faf1 	bl	80003f0 <lcd_print>
						  mesajYazildi=1;
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <mainTask+0x1f98>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	701a      	strb	r2, [r3, #0]
					  if (menuGiris==0){
 8006e14:	e069      	b.n	8006eea <mainTask+0x2016>
 8006e16:	bf00      	nop
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	20000ca6 	.word	0x20000ca6
 8006e20:	20000ca3 	.word	0x20000ca3
 8006e24:	20000ca5 	.word	0x20000ca5
 8006e28:	40010c00 	.word	0x40010c00
 8006e2c:	20000ca4 	.word	0x20000ca4
 8006e30:	20000c89 	.word	0x20000c89
 8006e34:	40010800 	.word	0x40010800
 8006e38:	20000c2c 	.word	0x20000c2c
 8006e3c:	20000c3c 	.word	0x20000c3c
 8006e40:	20000c49 	.word	0x20000c49
 8006e44:	20000c4a 	.word	0x20000c4a
 8006e48:	20000910 	.word	0x20000910
 8006e4c:	20000911 	.word	0x20000911
 8006e50:	20000c4b 	.word	0x20000c4b
 8006e54:	20000be4 	.word	0x20000be4
 8006e58:	20000c77 	.word	0x20000c77
 8006e5c:	20000c69 	.word	0x20000c69
 8006e60:	0800d4b4 	.word	0x0800d4b4
 8006e64:	0800d4c0 	.word	0x0800d4c0
 8006e68:	20000c24 	.word	0x20000c24
 8006e6c:	20000c7f 	.word	0x20000c7f
				  }
		    /* USER CODE END WHILE */

		    /* USER CODE BEGIN 3 */

				  else if(demoMode==1 || menuGiris==1)
 8006e70:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <mainTask+0x201c>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d004      	beq.n	8006e82 <mainTask+0x1fae>
 8006e78:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <mainTask+0x2020>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f47e a82d 	bne.w	8004edc <mainTask+0x8>
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e82:	2200      	movs	r2, #0
 8006e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e88:	481b      	ldr	r0, [pc, #108]	; (8006ef8 <mainTask+0x2024>)
 8006e8a:	f001 f902 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e94:	4818      	ldr	r0, [pc, #96]	; (8006ef8 <mainTask+0x2024>)
 8006e96:	f001 f8fc 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2104      	movs	r1, #4
 8006e9e:	4816      	ldr	r0, [pc, #88]	; (8006ef8 <mainTask+0x2024>)
 8006ea0:	f001 f8f7 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4813      	ldr	r0, [pc, #76]	; (8006ef8 <mainTask+0x2024>)
 8006eaa:	f001 f8f2 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	4811      	ldr	r0, [pc, #68]	; (8006ef8 <mainTask+0x2024>)
 8006eb4:	f001 f8ed 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2120      	movs	r1, #32
 8006ebc:	480f      	ldr	r0, [pc, #60]	; (8006efc <mainTask+0x2028>)
 8006ebe:	f001 f8e8 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2110      	movs	r1, #16
 8006ec6:	480d      	ldr	r0, [pc, #52]	; (8006efc <mainTask+0x2028>)
 8006ec8:	f001 f8e3 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2180      	movs	r1, #128	; 0x80
 8006ed0:	480b      	ldr	r0, [pc, #44]	; (8006f00 <mainTask+0x202c>)
 8006ed2:	f001 f8de 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	4809      	ldr	r0, [pc, #36]	; (8006f00 <mainTask+0x202c>)
 8006edc:	f001 f8d9 	bl	8008092 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2120      	movs	r1, #32
 8006ee4:	4806      	ldr	r0, [pc, #24]	; (8006f00 <mainTask+0x202c>)
 8006ee6:	f001 f8d4 	bl	8008092 <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8006eea:	f7fd bff7 	b.w	8004edc <mainTask+0x8>
 8006eee:	bf00      	nop
 8006ef0:	20000c6a 	.word	0x20000c6a
 8006ef4:	20000c69 	.word	0x20000c69
 8006ef8:	40010c00 	.word	0x40010c00
 8006efc:	40011000 	.word	0x40011000
 8006f00:	40010800 	.word	0x40010800

08006f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b090      	sub	sp, #64	; 0x40
 8006f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f0a:	f107 0318 	add.w	r3, r7, #24
 8006f0e:	2228      	movs	r2, #40	; 0x28
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f005 fba4 	bl	800c660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	609a      	str	r2, [r3, #8]
 8006f22:	60da      	str	r2, [r3, #12]
 8006f24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006f30:	2300      	movs	r3, #0
 8006f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f34:	2301      	movs	r3, #1
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006f42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f48:	f107 0318 	add.w	r3, r7, #24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f002 fa99 	bl	8009484 <HAL_RCC_OscConfig>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006f58:	f000 f9aa 	bl	80072b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f5c:	230f      	movs	r3, #15
 8006f5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f60:	2302      	movs	r3, #2
 8006f62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	2102      	movs	r1, #2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f002 fd06 	bl	8009988 <HAL_RCC_ClockConfig>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006f82:	f000 f995 	bl	80072b0 <Error_Handler>
  }
}
 8006f86:	bf00      	nop
 8006f88:	3740      	adds	r7, #64	; 0x40
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8006f94:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006f96:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <MX_CAN_Init+0x64>)
 8006f98:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006fa0:	4b13      	ldr	r3, [pc, #76]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006fdc:	4804      	ldr	r0, [pc, #16]	; (8006ff0 <MX_CAN_Init+0x60>)
 8006fde:	f000 fbd7 	bl	8007790 <HAL_CAN_Init>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8006fe8:	f000 f962 	bl	80072b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000de4 	.word	0x20000de4
 8006ff4:	40006400 	.word	0x40006400

08006ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ffc:	4b12      	ldr	r3, [pc, #72]	; (8007048 <MX_I2C1_Init+0x50>)
 8006ffe:	4a13      	ldr	r2, [pc, #76]	; (800704c <MX_I2C1_Init+0x54>)
 8007000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <MX_I2C1_Init+0x50>)
 8007004:	4a12      	ldr	r2, [pc, #72]	; (8007050 <MX_I2C1_Init+0x58>)
 8007006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <MX_I2C1_Init+0x50>)
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800700e:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <MX_I2C1_Init+0x50>)
 8007010:	2200      	movs	r2, #0
 8007012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <MX_I2C1_Init+0x50>)
 8007016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800701a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <MX_I2C1_Init+0x50>)
 800701e:	2200      	movs	r2, #0
 8007020:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <MX_I2C1_Init+0x50>)
 8007024:	2200      	movs	r2, #0
 8007026:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007028:	4b07      	ldr	r3, [pc, #28]	; (8007048 <MX_I2C1_Init+0x50>)
 800702a:	2200      	movs	r2, #0
 800702c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <MX_I2C1_Init+0x50>)
 8007030:	2200      	movs	r2, #0
 8007032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007034:	4804      	ldr	r0, [pc, #16]	; (8007048 <MX_I2C1_Init+0x50>)
 8007036:	f001 f85d 	bl	80080f4 <HAL_I2C_Init>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007040:	f000 f936 	bl	80072b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007044:	bf00      	nop
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000e0c 	.word	0x20000e0c
 800704c:	40005400 	.word	0x40005400
 8007050:	00061a80 	.word	0x00061a80

08007054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800705a:	f107 0308 	add.w	r3, r7, #8
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	609a      	str	r2, [r3, #8]
 8007066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007068:	463b      	mov	r3, r7
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007070:	4b1f      	ldr	r3, [pc, #124]	; (80070f0 <MX_TIM1_Init+0x9c>)
 8007072:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <MX_TIM1_Init+0xa0>)
 8007074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <MX_TIM1_Init+0x9c>)
 8007078:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800707c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800707e:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <MX_TIM1_Init+0x9c>)
 8007080:	2200      	movs	r2, #0
 8007082:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007084:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <MX_TIM1_Init+0x9c>)
 8007086:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800708a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800708c:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <MX_TIM1_Init+0x9c>)
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <MX_TIM1_Init+0x9c>)
 8007094:	2200      	movs	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <MX_TIM1_Init+0x9c>)
 800709a:	2200      	movs	r2, #0
 800709c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800709e:	4814      	ldr	r0, [pc, #80]	; (80070f0 <MX_TIM1_Init+0x9c>)
 80070a0:	f002 fe0a 	bl	8009cb8 <HAL_TIM_Base_Init>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80070aa:	f000 f901 	bl	80072b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80070b4:	f107 0308 	add.w	r3, r7, #8
 80070b8:	4619      	mov	r1, r3
 80070ba:	480d      	ldr	r0, [pc, #52]	; (80070f0 <MX_TIM1_Init+0x9c>)
 80070bc:	f002 ffb4 	bl	800a028 <HAL_TIM_ConfigClockSource>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80070c6:	f000 f8f3 	bl	80072b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80070d2:	463b      	mov	r3, r7
 80070d4:	4619      	mov	r1, r3
 80070d6:	4806      	ldr	r0, [pc, #24]	; (80070f0 <MX_TIM1_Init+0x9c>)
 80070d8:	f003 f99e 	bl	800a418 <HAL_TIMEx_MasterConfigSynchronization>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80070e2:	f000 f8e5 	bl	80072b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80070e6:	bf00      	nop
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000ea8 	.word	0x20000ea8
 80070f4:	40012c00 	.word	0x40012c00

080070f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 80070fe:	4a12      	ldr	r2, [pc, #72]	; (8007148 <MX_USART1_UART_Init+0x50>)
 8007100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 8007104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 800710c:	2200      	movs	r2, #0
 800710e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 8007112:	2200      	movs	r2, #0
 8007114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 8007118:	2200      	movs	r2, #0
 800711a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 800711e:	220c      	movs	r2, #12
 8007120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 8007124:	2200      	movs	r2, #0
 8007126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 800712a:	2200      	movs	r2, #0
 800712c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <MX_USART1_UART_Init+0x4c>)
 8007130:	f003 f9f0 	bl	800a514 <HAL_UART_Init>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800713a:	f000 f8b9 	bl	80072b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000e60 	.word	0x20000e60
 8007148:	40013800 	.word	0x40013800

0800714c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007152:	f107 0310 	add.w	r3, r7, #16
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	605a      	str	r2, [r3, #4]
 800715c:	609a      	str	r2, [r3, #8]
 800715e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007160:	4b4b      	ldr	r3, [pc, #300]	; (8007290 <MX_GPIO_Init+0x144>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	4a4a      	ldr	r2, [pc, #296]	; (8007290 <MX_GPIO_Init+0x144>)
 8007166:	f043 0310 	orr.w	r3, r3, #16
 800716a:	6193      	str	r3, [r2, #24]
 800716c:	4b48      	ldr	r3, [pc, #288]	; (8007290 <MX_GPIO_Init+0x144>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007178:	4b45      	ldr	r3, [pc, #276]	; (8007290 <MX_GPIO_Init+0x144>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	4a44      	ldr	r2, [pc, #272]	; (8007290 <MX_GPIO_Init+0x144>)
 800717e:	f043 0320 	orr.w	r3, r3, #32
 8007182:	6193      	str	r3, [r2, #24]
 8007184:	4b42      	ldr	r3, [pc, #264]	; (8007290 <MX_GPIO_Init+0x144>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007190:	4b3f      	ldr	r3, [pc, #252]	; (8007290 <MX_GPIO_Init+0x144>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	4a3e      	ldr	r2, [pc, #248]	; (8007290 <MX_GPIO_Init+0x144>)
 8007196:	f043 0304 	orr.w	r3, r3, #4
 800719a:	6193      	str	r3, [r2, #24]
 800719c:	4b3c      	ldr	r3, [pc, #240]	; (8007290 <MX_GPIO_Init+0x144>)
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80071a8:	4b39      	ldr	r3, [pc, #228]	; (8007290 <MX_GPIO_Init+0x144>)
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	4a38      	ldr	r2, [pc, #224]	; (8007290 <MX_GPIO_Init+0x144>)
 80071ae:	f043 0308 	orr.w	r3, r3, #8
 80071b2:	6193      	str	r3, [r2, #24]
 80071b4:	4b36      	ldr	r3, [pc, #216]	; (8007290 <MX_GPIO_Init+0x144>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80071c0:	2200      	movs	r2, #0
 80071c2:	21f0      	movs	r1, #240	; 0xf0
 80071c4:	4833      	ldr	r0, [pc, #204]	; (8007294 <MX_GPIO_Init+0x148>)
 80071c6:	f000 ff64 	bl	8008092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80071ca:	2200      	movs	r2, #0
 80071cc:	f241 0130 	movw	r1, #4144	; 0x1030
 80071d0:	4831      	ldr	r0, [pc, #196]	; (8007298 <MX_GPIO_Init+0x14c>)
 80071d2:	f000 ff5e 	bl	8008092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80071d6:	2200      	movs	r2, #0
 80071d8:	f640 4107 	movw	r1, #3079	; 0xc07
 80071dc:	482f      	ldr	r0, [pc, #188]	; (800729c <MX_GPIO_Init+0x150>)
 80071de:	f000 ff58 	bl	8008092 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80071e2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80071e6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f0:	f107 0310 	add.w	r3, r7, #16
 80071f4:	4619      	mov	r1, r3
 80071f6:	4828      	ldr	r0, [pc, #160]	; (8007298 <MX_GPIO_Init+0x14c>)
 80071f8:	f000 fcd4 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80071fc:	f248 130f 	movw	r3, #33039	; 0x810f
 8007200:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800720a:	f107 0310 	add.w	r3, r7, #16
 800720e:	4619      	mov	r1, r3
 8007210:	4820      	ldr	r0, [pc, #128]	; (8007294 <MX_GPIO_Init+0x148>)
 8007212:	f000 fcc7 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007216:	23f0      	movs	r3, #240	; 0xf0
 8007218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007222:	2302      	movs	r3, #2
 8007224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007226:	f107 0310 	add.w	r3, r7, #16
 800722a:	4619      	mov	r1, r3
 800722c:	4819      	ldr	r0, [pc, #100]	; (8007294 <MX_GPIO_Init+0x148>)
 800722e:	f000 fcb9 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007232:	f241 0330 	movw	r3, #4144	; 0x1030
 8007236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007240:	2302      	movs	r3, #2
 8007242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007244:	f107 0310 	add.w	r3, r7, #16
 8007248:	4619      	mov	r1, r3
 800724a:	4813      	ldr	r0, [pc, #76]	; (8007298 <MX_GPIO_Init+0x14c>)
 800724c:	f000 fcaa 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007250:	f640 4307 	movw	r3, #3079	; 0xc07
 8007254:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007256:	2301      	movs	r3, #1
 8007258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725e:	2302      	movs	r3, #2
 8007260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007262:	f107 0310 	add.w	r3, r7, #16
 8007266:	4619      	mov	r1, r3
 8007268:	480c      	ldr	r0, [pc, #48]	; (800729c <MX_GPIO_Init+0x150>)
 800726a:	f000 fc9b 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800726e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800727c:	f107 0310 	add.w	r3, r7, #16
 8007280:	4619      	mov	r1, r3
 8007282:	4806      	ldr	r0, [pc, #24]	; (800729c <MX_GPIO_Init+0x150>)
 8007284:	f000 fc8e 	bl	8007ba4 <HAL_GPIO_Init>

}
 8007288:	bf00      	nop
 800728a:	3720      	adds	r7, #32
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40021000 	.word	0x40021000
 8007294:	40010800 	.word	0x40010800
 8007298:	40011000 	.word	0x40011000
 800729c:	40010c00 	.word	0x40010c00

080072a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80072a8:	2001      	movs	r0, #1
 80072aa:	f003 fae1 	bl	800a870 <osDelay>
 80072ae:	e7fb      	b.n	80072a8 <StartDefaultTask+0x8>

080072b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80072c2:	4b18      	ldr	r3, [pc, #96]	; (8007324 <HAL_MspInit+0x68>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	4a17      	ldr	r2, [pc, #92]	; (8007324 <HAL_MspInit+0x68>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	6193      	str	r3, [r2, #24]
 80072ce:	4b15      	ldr	r3, [pc, #84]	; (8007324 <HAL_MspInit+0x68>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <HAL_MspInit+0x68>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4a11      	ldr	r2, [pc, #68]	; (8007324 <HAL_MspInit+0x68>)
 80072e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e4:	61d3      	str	r3, [r2, #28]
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <HAL_MspInit+0x68>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ee:	607b      	str	r3, [r7, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80072f2:	2200      	movs	r2, #0
 80072f4:	210f      	movs	r1, #15
 80072f6:	f06f 0001 	mvn.w	r0, #1
 80072fa:	f000 fc1c 	bl	8007b36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80072fe:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <HAL_MspInit+0x6c>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	4a04      	ldr	r2, [pc, #16]	; (8007328 <HAL_MspInit+0x6c>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40021000 	.word	0x40021000
 8007328:	40010000 	.word	0x40010000

0800732c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <HAL_CAN_MspInit+0x8c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d131      	bne.n	80073b0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800734c:	4b1b      	ldr	r3, [pc, #108]	; (80073bc <HAL_CAN_MspInit+0x90>)
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_CAN_MspInit+0x90>)
 8007352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007356:	61d3      	str	r3, [r2, #28]
 8007358:	4b18      	ldr	r3, [pc, #96]	; (80073bc <HAL_CAN_MspInit+0x90>)
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <HAL_CAN_MspInit+0x90>)
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	4a14      	ldr	r2, [pc, #80]	; (80073bc <HAL_CAN_MspInit+0x90>)
 800736a:	f043 0304 	orr.w	r3, r3, #4
 800736e:	6193      	str	r3, [r2, #24]
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_CAN_MspInit+0x90>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800737c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738a:	f107 0310 	add.w	r3, r7, #16
 800738e:	4619      	mov	r1, r3
 8007390:	480b      	ldr	r0, [pc, #44]	; (80073c0 <HAL_CAN_MspInit+0x94>)
 8007392:	f000 fc07 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800739a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073a0:	2303      	movs	r3, #3
 80073a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073a4:	f107 0310 	add.w	r3, r7, #16
 80073a8:	4619      	mov	r1, r3
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <HAL_CAN_MspInit+0x94>)
 80073ac:	f000 fbfa 	bl	8007ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80073b0:	bf00      	nop
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40006400 	.word	0x40006400
 80073bc:	40021000 	.word	0x40021000
 80073c0:	40010800 	.word	0x40010800

080073c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <HAL_I2C_MspInit+0x70>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d123      	bne.n	800742c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <HAL_I2C_MspInit+0x74>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <HAL_I2C_MspInit+0x74>)
 80073ea:	f043 0308 	orr.w	r3, r3, #8
 80073ee:	6193      	str	r3, [r2, #24]
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <HAL_I2C_MspInit+0x74>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073fc:	23c0      	movs	r3, #192	; 0xc0
 80073fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007400:	2312      	movs	r3, #18
 8007402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007404:	2303      	movs	r3, #3
 8007406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007408:	f107 0310 	add.w	r3, r7, #16
 800740c:	4619      	mov	r1, r3
 800740e:	480b      	ldr	r0, [pc, #44]	; (800743c <HAL_I2C_MspInit+0x78>)
 8007410:	f000 fbc8 	bl	8007ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <HAL_I2C_MspInit+0x74>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4a07      	ldr	r2, [pc, #28]	; (8007438 <HAL_I2C_MspInit+0x74>)
 800741a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800741e:	61d3      	str	r3, [r2, #28]
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_I2C_MspInit+0x74>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800742c:	bf00      	nop
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40005400 	.word	0x40005400
 8007438:	40021000 	.word	0x40021000
 800743c:	40010c00 	.word	0x40010c00

08007440 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <HAL_I2C_MspDeInit+0x38>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <HAL_I2C_MspDeInit+0x3c>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4a09      	ldr	r2, [pc, #36]	; (800747c <HAL_I2C_MspDeInit+0x3c>)
 8007458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800745c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800745e:	2140      	movs	r1, #64	; 0x40
 8007460:	4807      	ldr	r0, [pc, #28]	; (8007480 <HAL_I2C_MspDeInit+0x40>)
 8007462:	f000 fd33 	bl	8007ecc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	4805      	ldr	r0, [pc, #20]	; (8007480 <HAL_I2C_MspDeInit+0x40>)
 800746a:	f000 fd2f 	bl	8007ecc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40005400 	.word	0x40005400
 800747c:	40021000 	.word	0x40021000
 8007480:	40010c00 	.word	0x40010c00

08007484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_TIM_Base_MspInit+0x44>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d113      	bne.n	80074be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_TIM_Base_MspInit+0x48>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <HAL_TIM_Base_MspInit+0x48>)
 800749c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074a0:	6193      	str	r3, [r2, #24]
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_TIM_Base_MspInit+0x48>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80074ae:	2200      	movs	r2, #0
 80074b0:	2105      	movs	r1, #5
 80074b2:	2019      	movs	r0, #25
 80074b4:	f000 fb3f 	bl	8007b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80074b8:	2019      	movs	r0, #25
 80074ba:	f000 fb58 	bl	8007b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40021000 	.word	0x40021000

080074d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d8:	f107 0310 	add.w	r3, r7, #16
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	605a      	str	r2, [r3, #4]
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1c      	ldr	r2, [pc, #112]	; (800755c <HAL_UART_MspInit+0x8c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d131      	bne.n	8007554 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074f0:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_UART_MspInit+0x90>)
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_UART_MspInit+0x90>)
 80074f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074fa:	6193      	str	r3, [r2, #24]
 80074fc:	4b18      	ldr	r3, [pc, #96]	; (8007560 <HAL_UART_MspInit+0x90>)
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <HAL_UART_MspInit+0x90>)
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	4a14      	ldr	r2, [pc, #80]	; (8007560 <HAL_UART_MspInit+0x90>)
 800750e:	f043 0304 	orr.w	r3, r3, #4
 8007512:	6193      	str	r3, [r2, #24]
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <HAL_UART_MspInit+0x90>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007526:	2302      	movs	r3, #2
 8007528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800752a:	2303      	movs	r3, #3
 800752c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800752e:	f107 0310 	add.w	r3, r7, #16
 8007532:	4619      	mov	r1, r3
 8007534:	480b      	ldr	r0, [pc, #44]	; (8007564 <HAL_UART_MspInit+0x94>)
 8007536:	f000 fb35 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800753a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800753e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007544:	2300      	movs	r3, #0
 8007546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007548:	f107 0310 	add.w	r3, r7, #16
 800754c:	4619      	mov	r1, r3
 800754e:	4805      	ldr	r0, [pc, #20]	; (8007564 <HAL_UART_MspInit+0x94>)
 8007550:	f000 fb28 	bl	8007ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40013800 	.word	0x40013800
 8007560:	40021000 	.word	0x40021000
 8007564:	40010800 	.word	0x40010800

08007568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800756c:	e7fe      	b.n	800756c <NMI_Handler+0x4>

0800756e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800756e:	b480      	push	{r7}
 8007570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007572:	e7fe      	b.n	8007572 <HardFault_Handler+0x4>

08007574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007578:	e7fe      	b.n	8007578 <MemManage_Handler+0x4>

0800757a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800757a:	b480      	push	{r7}
 800757c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800757e:	e7fe      	b.n	800757e <BusFault_Handler+0x4>

08007580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007584:	e7fe      	b.n	8007584 <UsageFault_Handler+0x4>

08007586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007586:	b480      	push	{r7}
 8007588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800758a:	bf00      	nop
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007596:	f000 f8bb 	bl	8007710 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800759a:	f004 fabb 	bl	800bb14 <xTaskGetSchedulerState>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80075a4:	f004 fd30 	bl	800c008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075a8:	bf00      	nop
 80075aa:	bd80      	pop	{r7, pc}

080075ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80075b0:	4802      	ldr	r0, [pc, #8]	; (80075bc <TIM1_UP_IRQHandler+0x10>)
 80075b2:	f002 fc31 	bl	8009e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80075b6:	bf00      	nop
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000ea8 	.word	0x20000ea8

080075c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075c8:	4a14      	ldr	r2, [pc, #80]	; (800761c <_sbrk+0x5c>)
 80075ca:	4b15      	ldr	r3, [pc, #84]	; (8007620 <_sbrk+0x60>)
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075d4:	4b13      	ldr	r3, [pc, #76]	; (8007624 <_sbrk+0x64>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <_sbrk+0x64>)
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <_sbrk+0x68>)
 80075e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <_sbrk+0x64>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d207      	bcs.n	8007600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075f0:	f005 f84e 	bl	800c690 <__errno>
 80075f4:	4603      	mov	r3, r0
 80075f6:	220c      	movs	r2, #12
 80075f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075fa:	f04f 33ff 	mov.w	r3, #4294967295
 80075fe:	e009      	b.n	8007614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <_sbrk+0x64>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <_sbrk+0x64>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <_sbrk+0x64>)
 8007610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007612:	68fb      	ldr	r3, [r7, #12]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000c000 	.word	0x2000c000
 8007620:	00000400 	.word	0x00000400
 8007624:	20000ef4 	.word	0x20000ef4
 8007628:	20001d90 	.word	0x20001d90

0800762c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007630:	bf00      	nop
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007638:	480c      	ldr	r0, [pc, #48]	; (800766c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800763a:	490d      	ldr	r1, [pc, #52]	; (8007670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800763c:	4a0d      	ldr	r2, [pc, #52]	; (8007674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800763e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007640:	e002      	b.n	8007648 <LoopCopyDataInit>

08007642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007646:	3304      	adds	r3, #4

08007648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800764a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800764c:	d3f9      	bcc.n	8007642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800764e:	4a0a      	ldr	r2, [pc, #40]	; (8007678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007650:	4c0a      	ldr	r4, [pc, #40]	; (800767c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007654:	e001      	b.n	800765a <LoopFillZerobss>

08007656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007658:	3204      	adds	r2, #4

0800765a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800765a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800765c:	d3fb      	bcc.n	8007656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800765e:	f7ff ffe5 	bl	800762c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007662:	f005 f81b 	bl	800c69c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007666:	f7fd fab7 	bl	8004bd8 <main>
  bx lr
 800766a:	4770      	bx	lr
  ldr r0, =_sdata
 800766c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007670:	20000974 	.word	0x20000974
  ldr r2, =_sidata
 8007674:	0800d534 	.word	0x0800d534
  ldr r2, =_sbss
 8007678:	20000974 	.word	0x20000974
  ldr r4, =_ebss
 800767c:	20001d90 	.word	0x20001d90

08007680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007680:	e7fe      	b.n	8007680 <ADC1_2_IRQHandler>
	...

08007684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <HAL_Init+0x28>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a07      	ldr	r2, [pc, #28]	; (80076ac <HAL_Init+0x28>)
 800768e:	f043 0310 	orr.w	r3, r3, #16
 8007692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007694:	2003      	movs	r0, #3
 8007696:	f000 fa43 	bl	8007b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800769a:	200f      	movs	r0, #15
 800769c:	f000 f808 	bl	80076b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076a0:	f7ff fe0c 	bl	80072bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40022000 	.word	0x40022000

080076b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076b8:	4b12      	ldr	r3, [pc, #72]	; (8007704 <HAL_InitTick+0x54>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4b12      	ldr	r3, [pc, #72]	; (8007708 <HAL_InitTick+0x58>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	4619      	mov	r1, r3
 80076c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fa5b 	bl	8007b8a <HAL_SYSTICK_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e00e      	b.n	80076fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b0f      	cmp	r3, #15
 80076e2:	d80a      	bhi.n	80076fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076e4:	2200      	movs	r2, #0
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	f000 fa23 	bl	8007b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076f0:	4a06      	ldr	r2, [pc, #24]	; (800770c <HAL_InitTick+0x5c>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000914 	.word	0x20000914
 8007708:	2000091c 	.word	0x2000091c
 800770c:	20000918 	.word	0x20000918

08007710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_IncTick+0x1c>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_IncTick+0x20>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4413      	add	r3, r2
 8007720:	4a03      	ldr	r2, [pc, #12]	; (8007730 <HAL_IncTick+0x20>)
 8007722:	6013      	str	r3, [r2, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	2000091c 	.word	0x2000091c
 8007730:	20000ef8 	.word	0x20000ef8

08007734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  return uwTick;
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <HAL_GetTick+0x10>)
 800773a:	681b      	ldr	r3, [r3, #0]
}
 800773c:	4618      	mov	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr
 8007744:	20000ef8 	.word	0x20000ef8

08007748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007750:	f7ff fff0 	bl	8007734 <HAL_GetTick>
 8007754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d005      	beq.n	800776e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_Delay+0x44>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800776e:	bf00      	nop
 8007770:	f7ff ffe0 	bl	8007734 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d8f7      	bhi.n	8007770 <HAL_Delay+0x28>
  {
  }
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	2000091c 	.word	0x2000091c

08007790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0ed      	b.n	800797e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fdbc 	bl	800732c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c4:	f7ff ffb6 	bl	8007734 <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80077ca:	e012      	b.n	80077f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077cc:	f7ff ffb2 	bl	8007734 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b0a      	cmp	r3, #10
 80077d8:	d90b      	bls.n	80077f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2205      	movs	r2, #5
 80077ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0c5      	b.n	800797e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0e5      	beq.n	80077cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0202 	bic.w	r2, r2, #2
 800780e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007810:	f7ff ff90 	bl	8007734 <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007816:	e012      	b.n	800783e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007818:	f7ff ff8c 	bl	8007734 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b0a      	cmp	r3, #10
 8007824:	d90b      	bls.n	800783e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2205      	movs	r2, #5
 8007836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e09f      	b.n	800797e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7e1b      	ldrb	r3, [r3, #24]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d108      	bne.n	8007866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e007      	b.n	8007876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7e5b      	ldrb	r3, [r3, #25]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d108      	bne.n	8007890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e007      	b.n	80078a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7e9b      	ldrb	r3, [r3, #26]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d108      	bne.n	80078ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0220 	orr.w	r2, r2, #32
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e007      	b.n	80078ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0220 	bic.w	r2, r2, #32
 80078c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7edb      	ldrb	r3, [r3, #27]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d108      	bne.n	80078e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0210 	bic.w	r2, r2, #16
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e007      	b.n	80078f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0210 	orr.w	r2, r2, #16
 80078f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7f1b      	ldrb	r3, [r3, #28]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d108      	bne.n	800790e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0208 	orr.w	r2, r2, #8
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e007      	b.n	800791e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0208 	bic.w	r2, r2, #8
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7f5b      	ldrb	r3, [r3, #29]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d108      	bne.n	8007938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0204 	orr.w	r2, r2, #4
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e007      	b.n	8007948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0204 	bic.w	r2, r2, #4
 8007946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <__NVIC_SetPriorityGrouping>:
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <__NVIC_SetPriorityGrouping+0x44>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079a4:	4013      	ands	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079ba:	4a04      	ldr	r2, [pc, #16]	; (80079cc <__NVIC_SetPriorityGrouping+0x44>)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	60d3      	str	r3, [r2, #12]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <__NVIC_GetPriorityGrouping>:
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <__NVIC_GetPriorityGrouping+0x18>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	f003 0307 	and.w	r3, r3, #7
}
 80079de:	4618      	mov	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	e000ed00 	.word	0xe000ed00

080079ec <__NVIC_EnableIRQ>:
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	db0b      	blt.n	8007a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	f003 021f 	and.w	r2, r3, #31
 8007a04:	4906      	ldr	r1, [pc, #24]	; (8007a20 <__NVIC_EnableIRQ+0x34>)
 8007a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	e000e100 	.word	0xe000e100

08007a24 <__NVIC_SetPriority>:
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db0a      	blt.n	8007a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	490c      	ldr	r1, [pc, #48]	; (8007a70 <__NVIC_SetPriority+0x4c>)
 8007a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a42:	0112      	lsls	r2, r2, #4
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	440b      	add	r3, r1
 8007a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a4c:	e00a      	b.n	8007a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	4908      	ldr	r1, [pc, #32]	; (8007a74 <__NVIC_SetPriority+0x50>)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	3b04      	subs	r3, #4
 8007a5c:	0112      	lsls	r2, r2, #4
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	440b      	add	r3, r1
 8007a62:	761a      	strb	r2, [r3, #24]
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e100 	.word	0xe000e100
 8007a74:	e000ed00 	.word	0xe000ed00

08007a78 <NVIC_EncodePriority>:
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f1c3 0307 	rsb	r3, r3, #7
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	bf28      	it	cs
 8007a96:	2304      	movcs	r3, #4
 8007a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d902      	bls.n	8007aa8 <NVIC_EncodePriority+0x30>
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	3b03      	subs	r3, #3
 8007aa6:	e000      	b.n	8007aaa <NVIC_EncodePriority+0x32>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aac:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43da      	mvns	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	401a      	ands	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	43d9      	mvns	r1, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad0:	4313      	orrs	r3, r2
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3724      	adds	r7, #36	; 0x24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007aec:	d301      	bcc.n	8007af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007aee:	2301      	movs	r3, #1
 8007af0:	e00f      	b.n	8007b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007af2:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <SysTick_Config+0x40>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007afa:	210f      	movs	r1, #15
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	f7ff ff90 	bl	8007a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <SysTick_Config+0x40>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <SysTick_Config+0x40>)
 8007b0c:	2207      	movs	r2, #7
 8007b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	e000e010 	.word	0xe000e010

08007b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff ff2d 	bl	8007988 <__NVIC_SetPriorityGrouping>
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b48:	f7ff ff42 	bl	80079d0 <__NVIC_GetPriorityGrouping>
 8007b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	6978      	ldr	r0, [r7, #20]
 8007b54:	f7ff ff90 	bl	8007a78 <NVIC_EncodePriority>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ff5f 	bl	8007a24 <__NVIC_SetPriority>
}
 8007b66:	bf00      	nop
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	4603      	mov	r3, r0
 8007b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff35 	bl	80079ec <__NVIC_EnableIRQ>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff ffa2 	bl	8007adc <SysTick_Config>
 8007b98:	4603      	mov	r3, r0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b08b      	sub	sp, #44	; 0x2c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bb6:	e179      	b.n	8007eac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	f040 8168 	bne.w	8007ea6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	4a96      	ldr	r2, [pc, #600]	; (8007e34 <HAL_GPIO_Init+0x290>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d05e      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
 8007be0:	4a94      	ldr	r2, [pc, #592]	; (8007e34 <HAL_GPIO_Init+0x290>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d875      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007be6:	4a94      	ldr	r2, [pc, #592]	; (8007e38 <HAL_GPIO_Init+0x294>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d058      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
 8007bec:	4a92      	ldr	r2, [pc, #584]	; (8007e38 <HAL_GPIO_Init+0x294>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d86f      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007bf2:	4a92      	ldr	r2, [pc, #584]	; (8007e3c <HAL_GPIO_Init+0x298>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d052      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
 8007bf8:	4a90      	ldr	r2, [pc, #576]	; (8007e3c <HAL_GPIO_Init+0x298>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d869      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007bfe:	4a90      	ldr	r2, [pc, #576]	; (8007e40 <HAL_GPIO_Init+0x29c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d04c      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
 8007c04:	4a8e      	ldr	r2, [pc, #568]	; (8007e40 <HAL_GPIO_Init+0x29c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d863      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007c0a:	4a8e      	ldr	r2, [pc, #568]	; (8007e44 <HAL_GPIO_Init+0x2a0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d046      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
 8007c10:	4a8c      	ldr	r2, [pc, #560]	; (8007e44 <HAL_GPIO_Init+0x2a0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d85d      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007c16:	2b12      	cmp	r3, #18
 8007c18:	d82a      	bhi.n	8007c70 <HAL_GPIO_Init+0xcc>
 8007c1a:	2b12      	cmp	r3, #18
 8007c1c:	d859      	bhi.n	8007cd2 <HAL_GPIO_Init+0x12e>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <HAL_GPIO_Init+0x80>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c9f 	.word	0x08007c9f
 8007c28:	08007c79 	.word	0x08007c79
 8007c2c:	08007c8b 	.word	0x08007c8b
 8007c30:	08007ccd 	.word	0x08007ccd
 8007c34:	08007cd3 	.word	0x08007cd3
 8007c38:	08007cd3 	.word	0x08007cd3
 8007c3c:	08007cd3 	.word	0x08007cd3
 8007c40:	08007cd3 	.word	0x08007cd3
 8007c44:	08007cd3 	.word	0x08007cd3
 8007c48:	08007cd3 	.word	0x08007cd3
 8007c4c:	08007cd3 	.word	0x08007cd3
 8007c50:	08007cd3 	.word	0x08007cd3
 8007c54:	08007cd3 	.word	0x08007cd3
 8007c58:	08007cd3 	.word	0x08007cd3
 8007c5c:	08007cd3 	.word	0x08007cd3
 8007c60:	08007cd3 	.word	0x08007cd3
 8007c64:	08007cd3 	.word	0x08007cd3
 8007c68:	08007c81 	.word	0x08007c81
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	4a75      	ldr	r2, [pc, #468]	; (8007e48 <HAL_GPIO_Init+0x2a4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007c76:	e02c      	b.n	8007cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	623b      	str	r3, [r7, #32]
          break;
 8007c7e:	e029      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	623b      	str	r3, [r7, #32]
          break;
 8007c88:	e024      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	623b      	str	r3, [r7, #32]
          break;
 8007c92:	e01f      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	623b      	str	r3, [r7, #32]
          break;
 8007c9c:	e01a      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	623b      	str	r3, [r7, #32]
          break;
 8007caa:	e013      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d105      	bne.n	8007cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	611a      	str	r2, [r3, #16]
          break;
 8007cbe:	e009      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	615a      	str	r2, [r3, #20]
          break;
 8007cca:	e003      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	623b      	str	r3, [r7, #32]
          break;
 8007cd0:	e000      	b.n	8007cd4 <HAL_GPIO_Init+0x130>
          break;
 8007cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2bff      	cmp	r3, #255	; 0xff
 8007cd8:	d801      	bhi.n	8007cde <HAL_GPIO_Init+0x13a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	e001      	b.n	8007ce2 <HAL_GPIO_Init+0x13e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2bff      	cmp	r3, #255	; 0xff
 8007ce8:	d802      	bhi.n	8007cf0 <HAL_GPIO_Init+0x14c>
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	e002      	b.n	8007cf6 <HAL_GPIO_Init+0x152>
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	3b08      	subs	r3, #8
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	210f      	movs	r1, #15
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	401a      	ands	r2, r3
 8007d08:	6a39      	ldr	r1, [r7, #32]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d10:	431a      	orrs	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80c1 	beq.w	8007ea6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007d24:	4b49      	ldr	r3, [pc, #292]	; (8007e4c <HAL_GPIO_Init+0x2a8>)
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	4a48      	ldr	r2, [pc, #288]	; (8007e4c <HAL_GPIO_Init+0x2a8>)
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	6193      	str	r3, [r2, #24]
 8007d30:	4b46      	ldr	r3, [pc, #280]	; (8007e4c <HAL_GPIO_Init+0x2a8>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007d3c:	4a44      	ldr	r2, [pc, #272]	; (8007e50 <HAL_GPIO_Init+0x2ac>)
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	089b      	lsrs	r3, r3, #2
 8007d42:	3302      	adds	r3, #2
 8007d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	220f      	movs	r2, #15
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a3c      	ldr	r2, [pc, #240]	; (8007e54 <HAL_GPIO_Init+0x2b0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d01f      	beq.n	8007da8 <HAL_GPIO_Init+0x204>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a3b      	ldr	r2, [pc, #236]	; (8007e58 <HAL_GPIO_Init+0x2b4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d019      	beq.n	8007da4 <HAL_GPIO_Init+0x200>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a3a      	ldr	r2, [pc, #232]	; (8007e5c <HAL_GPIO_Init+0x2b8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_GPIO_Init+0x1fc>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a39      	ldr	r2, [pc, #228]	; (8007e60 <HAL_GPIO_Init+0x2bc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00d      	beq.n	8007d9c <HAL_GPIO_Init+0x1f8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a38      	ldr	r2, [pc, #224]	; (8007e64 <HAL_GPIO_Init+0x2c0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d007      	beq.n	8007d98 <HAL_GPIO_Init+0x1f4>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a37      	ldr	r2, [pc, #220]	; (8007e68 <HAL_GPIO_Init+0x2c4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d101      	bne.n	8007d94 <HAL_GPIO_Init+0x1f0>
 8007d90:	2305      	movs	r3, #5
 8007d92:	e00a      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007d94:	2306      	movs	r3, #6
 8007d96:	e008      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	e006      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e004      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e002      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <HAL_GPIO_Init+0x206>
 8007da8:	2300      	movs	r3, #0
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	f002 0203 	and.w	r2, r2, #3
 8007db0:	0092      	lsls	r2, r2, #2
 8007db2:	4093      	lsls	r3, r2
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007dba:	4925      	ldr	r1, [pc, #148]	; (8007e50 <HAL_GPIO_Init+0x2ac>)
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	089b      	lsrs	r3, r3, #2
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007dd4:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4924      	ldr	r1, [pc, #144]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]
 8007de0:	e006      	b.n	8007df0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007de2:	4b22      	ldr	r3, [pc, #136]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	4920      	ldr	r1, [pc, #128]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007dfc:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	491a      	ldr	r1, [pc, #104]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	e006      	b.n	8007e18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007e0a:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	4916      	ldr	r1, [pc, #88]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d025      	beq.n	8007e70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	4910      	ldr	r1, [pc, #64]	; (8007e6c <HAL_GPIO_Init+0x2c8>)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	608b      	str	r3, [r1, #8]
 8007e30:	e025      	b.n	8007e7e <HAL_GPIO_Init+0x2da>
 8007e32:	bf00      	nop
 8007e34:	10320000 	.word	0x10320000
 8007e38:	10310000 	.word	0x10310000
 8007e3c:	10220000 	.word	0x10220000
 8007e40:	10210000 	.word	0x10210000
 8007e44:	10120000 	.word	0x10120000
 8007e48:	10110000 	.word	0x10110000
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40010800 	.word	0x40010800
 8007e58:	40010c00 	.word	0x40010c00
 8007e5c:	40011000 	.word	0x40011000
 8007e60:	40011400 	.word	0x40011400
 8007e64:	40011800 	.word	0x40011800
 8007e68:	40011c00 	.word	0x40011c00
 8007e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	43db      	mvns	r3, r3
 8007e78:	4913      	ldr	r1, [pc, #76]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d006      	beq.n	8007e98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	490e      	ldr	r1, [pc, #56]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60cb      	str	r3, [r1, #12]
 8007e96:	e006      	b.n	8007ea6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	4909      	ldr	r1, [pc, #36]	; (8007ec8 <HAL_GPIO_Init+0x324>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f47f ae7e 	bne.w	8007bb8 <HAL_GPIO_Init+0x14>
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	372c      	adds	r7, #44	; 0x2c
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	40010400 	.word	0x40010400

08007ecc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b089      	sub	sp, #36	; 0x24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8007eda:	e0a6      	b.n	800802a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007edc:	2201      	movs	r2, #1
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8099 	beq.w	8008024 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8007ef2:	4a54      	ldr	r2, [pc, #336]	; (8008044 <HAL_GPIO_DeInit+0x178>)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	3302      	adds	r3, #2
 8007efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	220f      	movs	r2, #15
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4013      	ands	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a4c      	ldr	r2, [pc, #304]	; (8008048 <HAL_GPIO_DeInit+0x17c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d01f      	beq.n	8007f5c <HAL_GPIO_DeInit+0x90>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a4b      	ldr	r2, [pc, #300]	; (800804c <HAL_GPIO_DeInit+0x180>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d019      	beq.n	8007f58 <HAL_GPIO_DeInit+0x8c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <HAL_GPIO_DeInit+0x184>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <HAL_GPIO_DeInit+0x88>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a49      	ldr	r2, [pc, #292]	; (8008054 <HAL_GPIO_DeInit+0x188>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00d      	beq.n	8007f50 <HAL_GPIO_DeInit+0x84>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a48      	ldr	r2, [pc, #288]	; (8008058 <HAL_GPIO_DeInit+0x18c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <HAL_GPIO_DeInit+0x80>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a47      	ldr	r2, [pc, #284]	; (800805c <HAL_GPIO_DeInit+0x190>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d101      	bne.n	8007f48 <HAL_GPIO_DeInit+0x7c>
 8007f44:	2305      	movs	r3, #5
 8007f46:	e00a      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f48:	2306      	movs	r3, #6
 8007f4a:	e008      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	e006      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f50:	2303      	movs	r3, #3
 8007f52:	e004      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e002      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <HAL_GPIO_DeInit+0x92>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	f002 0203 	and.w	r2, r2, #3
 8007f64:	0092      	lsls	r2, r2, #2
 8007f66:	4093      	lsls	r3, r2
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d132      	bne.n	8007fd4 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	220f      	movs	r2, #15
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007f7e:	4a31      	ldr	r2, [pc, #196]	; (8008044 <HAL_GPIO_DeInit+0x178>)
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	089b      	lsrs	r3, r3, #2
 8007f84:	3302      	adds	r3, #2
 8007f86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	43da      	mvns	r2, r3
 8007f8e:	482d      	ldr	r0, [pc, #180]	; (8008044 <HAL_GPIO_DeInit+0x178>)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	400a      	ands	r2, r1
 8007f96:	3302      	adds	r3, #2
 8007f98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f9c:	4b30      	ldr	r3, [pc, #192]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	492e      	ldr	r1, [pc, #184]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007faa:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	492b      	ldr	r1, [pc, #172]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007fb8:	4b29      	ldr	r3, [pc, #164]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	43db      	mvns	r3, r3
 8007fc0:	4927      	ldr	r1, [pc, #156]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8007fc6:	4b26      	ldr	r3, [pc, #152]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	4924      	ldr	r1, [pc, #144]	; (8008060 <HAL_GPIO_DeInit+0x194>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2bff      	cmp	r3, #255	; 0xff
 8007fd8:	d801      	bhi.n	8007fde <HAL_GPIO_DeInit+0x112>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	e001      	b.n	8007fe2 <HAL_GPIO_DeInit+0x116>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2bff      	cmp	r3, #255	; 0xff
 8007fe8:	d802      	bhi.n	8007ff0 <HAL_GPIO_DeInit+0x124>
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	e002      	b.n	8007ff6 <HAL_GPIO_DeInit+0x12a>
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3b08      	subs	r3, #8
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	210f      	movs	r1, #15
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	fa01 f303 	lsl.w	r3, r1, r3
 8008004:	43db      	mvns	r3, r3
 8008006:	401a      	ands	r2, r3
 8008008:	2104      	movs	r1, #4
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	fa01 f303 	lsl.w	r3, r1, r3
 8008010:	431a      	orrs	r2, r3
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	43db      	mvns	r3, r3
 800801e:	401a      	ands	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	3301      	adds	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	fa22 f303 	lsr.w	r3, r2, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	f47f af52 	bne.w	8007edc <HAL_GPIO_DeInit+0x10>
  }
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	3724      	adds	r7, #36	; 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr
 8008044:	40010000 	.word	0x40010000
 8008048:	40010800 	.word	0x40010800
 800804c:	40010c00 	.word	0x40010c00
 8008050:	40011000 	.word	0x40011000
 8008054:	40011400 	.word	0x40011400
 8008058:	40011800 	.word	0x40011800
 800805c:	40011c00 	.word	0x40011c00
 8008060:	40010400 	.word	0x40010400

08008064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	887b      	ldrh	r3, [r7, #2]
 8008076:	4013      	ands	r3, r2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
 8008080:	e001      	b.n	8008086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	807b      	strh	r3, [r7, #2]
 800809e:	4613      	mov	r3, r2
 80080a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080a2:	787b      	ldrb	r3, [r7, #1]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080a8:	887a      	ldrh	r2, [r7, #2]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80080ae:	e003      	b.n	80080b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80080b0:	887b      	ldrh	r3, [r7, #2]
 80080b2:	041a      	lsls	r2, r3, #16
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	611a      	str	r2, [r3, #16]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr

080080c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080d4:	887a      	ldrh	r2, [r7, #2]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4013      	ands	r3, r2
 80080da:	041a      	lsls	r2, r3, #16
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	43d9      	mvns	r1, r3
 80080e0:	887b      	ldrh	r3, [r7, #2]
 80080e2:	400b      	ands	r3, r1
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	611a      	str	r2, [r3, #16]
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e12b      	b.n	800835e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f952 	bl	80073c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2224      	movs	r2, #36	; 0x24
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008158:	f001 fd68 	bl	8009c2c <HAL_RCC_GetPCLK1Freq>
 800815c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4a81      	ldr	r2, [pc, #516]	; (8008368 <HAL_I2C_Init+0x274>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d807      	bhi.n	8008178 <HAL_I2C_Init+0x84>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4a80      	ldr	r2, [pc, #512]	; (800836c <HAL_I2C_Init+0x278>)
 800816c:	4293      	cmp	r3, r2
 800816e:	bf94      	ite	ls
 8008170:	2301      	movls	r3, #1
 8008172:	2300      	movhi	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	e006      	b.n	8008186 <HAL_I2C_Init+0x92>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a7d      	ldr	r2, [pc, #500]	; (8008370 <HAL_I2C_Init+0x27c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	bf94      	ite	ls
 8008180:	2301      	movls	r3, #1
 8008182:	2300      	movhi	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e0e7      	b.n	800835e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4a78      	ldr	r2, [pc, #480]	; (8008374 <HAL_I2C_Init+0x280>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	0c9b      	lsrs	r3, r3, #18
 8008198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a6a      	ldr	r2, [pc, #424]	; (8008368 <HAL_I2C_Init+0x274>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d802      	bhi.n	80081c8 <HAL_I2C_Init+0xd4>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3301      	adds	r3, #1
 80081c6:	e009      	b.n	80081dc <HAL_I2C_Init+0xe8>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	4a69      	ldr	r2, [pc, #420]	; (8008378 <HAL_I2C_Init+0x284>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	099b      	lsrs	r3, r3, #6
 80081da:	3301      	adds	r3, #1
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	430b      	orrs	r3, r1
 80081e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	495c      	ldr	r1, [pc, #368]	; (8008368 <HAL_I2C_Init+0x274>)
 80081f8:	428b      	cmp	r3, r1
 80081fa:	d819      	bhi.n	8008230 <HAL_I2C_Init+0x13c>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	1e59      	subs	r1, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	fbb1 f3f3 	udiv	r3, r1, r3
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008210:	400b      	ands	r3, r1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HAL_I2C_Init+0x138>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1e59      	subs	r1, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	fbb1 f3f3 	udiv	r3, r1, r3
 8008224:	3301      	adds	r3, #1
 8008226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800822a:	e051      	b.n	80082d0 <HAL_I2C_Init+0x1dc>
 800822c:	2304      	movs	r3, #4
 800822e:	e04f      	b.n	80082d0 <HAL_I2C_Init+0x1dc>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d111      	bne.n	800825c <HAL_I2C_Init+0x168>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1e58      	subs	r0, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6859      	ldr	r1, [r3, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	440b      	add	r3, r1
 8008246:	fbb0 f3f3 	udiv	r3, r0, r3
 800824a:	3301      	adds	r3, #1
 800824c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008250:	2b00      	cmp	r3, #0
 8008252:	bf0c      	ite	eq
 8008254:	2301      	moveq	r3, #1
 8008256:	2300      	movne	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e012      	b.n	8008282 <HAL_I2C_Init+0x18e>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	1e58      	subs	r0, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6859      	ldr	r1, [r3, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	0099      	lsls	r1, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008272:	3301      	adds	r3, #1
 8008274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <HAL_I2C_Init+0x196>
 8008286:	2301      	movs	r3, #1
 8008288:	e022      	b.n	80082d0 <HAL_I2C_Init+0x1dc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10e      	bne.n	80082b0 <HAL_I2C_Init+0x1bc>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1e58      	subs	r0, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	440b      	add	r3, r1
 80082a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082a4:	3301      	adds	r3, #1
 80082a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ae:	e00f      	b.n	80082d0 <HAL_I2C_Init+0x1dc>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	1e58      	subs	r0, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6859      	ldr	r1, [r3, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	0099      	lsls	r1, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c6:	3301      	adds	r3, #1
 80082c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	6809      	ldr	r1, [r1, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69da      	ldr	r2, [r3, #28]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6911      	ldr	r1, [r2, #16]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68d2      	ldr	r2, [r2, #12]
 800830a:	4311      	orrs	r1, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	430b      	orrs	r3, r1
 8008312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695a      	ldr	r2, [r3, #20]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	000186a0 	.word	0x000186a0
 800836c:	001e847f 	.word	0x001e847f
 8008370:	003d08ff 	.word	0x003d08ff
 8008374:	431bde83 	.word	0x431bde83
 8008378:	10624dd3 	.word	0x10624dd3

0800837c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e021      	b.n	80083d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2224      	movs	r2, #36	; 0x24
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff f84a 	bl	8007440 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	461a      	mov	r2, r3
 80083e8:	460b      	mov	r3, r1
 80083ea:	817b      	strh	r3, [r7, #10]
 80083ec:	4613      	mov	r3, r2
 80083ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083f0:	f7ff f9a0 	bl	8007734 <HAL_GetTick>
 80083f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b20      	cmp	r3, #32
 8008400:	f040 80e0 	bne.w	80085c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2319      	movs	r3, #25
 800840a:	2201      	movs	r2, #1
 800840c:	4970      	ldr	r1, [pc, #448]	; (80085d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fe5c 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800841a:	2302      	movs	r3, #2
 800841c:	e0d3      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_I2C_Master_Transmit+0x50>
 8008428:	2302      	movs	r3, #2
 800842a:	e0cc      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d007      	beq.n	8008452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2210      	movs	r2, #16
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	893a      	ldrh	r2, [r7, #8]
 8008482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a50      	ldr	r2, [pc, #320]	; (80085d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008494:	8979      	ldrh	r1, [r7, #10]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fc16 	bl	8008ccc <I2C_MasterRequestWrite>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e08d      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80084c0:	e066      	b.n	8008590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	6a39      	ldr	r1, [r7, #32]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fed6 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00d      	beq.n	80084ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d107      	bne.n	80084ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e06b      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	781a      	ldrb	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008516:	3b01      	subs	r3, #1
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b04      	cmp	r3, #4
 800852a:	d11b      	bne.n	8008564 <HAL_I2C_Master_Transmit+0x188>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d017      	beq.n	8008564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	6a39      	ldr	r1, [r7, #32]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fec6 	bl	80092fa <I2C_WaitOnBTFFlagUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00d      	beq.n	8008590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	2b04      	cmp	r3, #4
 800857a:	d107      	bne.n	800858c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e01a      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d194      	bne.n	80084c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e000      	b.n	80085c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	00100002 	.word	0x00100002
 80085d4:	ffff0000 	.word	0xffff0000

080085d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	817b      	strh	r3, [r7, #10]
 80085ea:	460b      	mov	r3, r1
 80085ec:	813b      	strh	r3, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085f2:	f7ff f89f 	bl	8007734 <HAL_GetTick>
 80085f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b20      	cmp	r3, #32
 8008602:	f040 80d9 	bne.w	80087b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	2319      	movs	r3, #25
 800860c:	2201      	movs	r2, #1
 800860e:	496d      	ldr	r1, [pc, #436]	; (80087c4 <HAL_I2C_Mem_Write+0x1ec>)
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 fd5b 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
 800861e:	e0cc      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <HAL_I2C_Mem_Write+0x56>
 800862a:	2302      	movs	r3, #2
 800862c:	e0c5      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b01      	cmp	r3, #1
 8008642:	d007      	beq.n	8008654 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2221      	movs	r2, #33	; 0x21
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2240      	movs	r2, #64	; 0x40
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a3a      	ldr	r2, [r7, #32]
 800867e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a4d      	ldr	r2, [pc, #308]	; (80087c8 <HAL_I2C_Mem_Write+0x1f0>)
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008696:	88f8      	ldrh	r0, [r7, #6]
 8008698:	893a      	ldrh	r2, [r7, #8]
 800869a:	8979      	ldrh	r1, [r7, #10]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4603      	mov	r3, r0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fb92 	bl	8008dd0 <I2C_RequestMemoryWrite>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d052      	beq.n	8008758 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e081      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fddc 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d107      	bne.n	80086de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e06b      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b04      	cmp	r3, #4
 800871e:	d11b      	bne.n	8008758 <HAL_I2C_Mem_Write+0x180>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008724:	2b00      	cmp	r3, #0
 8008726:	d017      	beq.n	8008758 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	781a      	ldrb	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1aa      	bne.n	80086b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fdc8 	bl	80092fa <I2C_WaitOnBTFFlagUntilTimeout>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	2b04      	cmp	r3, #4
 8008776:	d107      	bne.n	8008788 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008786:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e016      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800879a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e000      	b.n	80087ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	00100002 	.word	0x00100002
 80087c8:	ffff0000 	.word	0xffff0000

080087cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	; 0x30
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	4603      	mov	r3, r0
 80087dc:	817b      	strh	r3, [r7, #10]
 80087de:	460b      	mov	r3, r1
 80087e0:	813b      	strh	r3, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087ea:	f7fe ffa3 	bl	8007734 <HAL_GetTick>
 80087ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	f040 8244 	bne.w	8008c86 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2319      	movs	r3, #25
 8008804:	2201      	movs	r2, #1
 8008806:	4982      	ldr	r1, [pc, #520]	; (8008a10 <HAL_I2C_Mem_Read+0x244>)
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fc5f 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008814:	2302      	movs	r3, #2
 8008816:	e237      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_I2C_Mem_Read+0x5a>
 8008822:	2302      	movs	r3, #2
 8008824:	e230      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	d007      	beq.n	800884c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2222      	movs	r2, #34	; 0x22
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2240      	movs	r2, #64	; 0x40
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800887c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a62      	ldr	r2, [pc, #392]	; (8008a14 <HAL_I2C_Mem_Read+0x248>)
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800888e:	88f8      	ldrh	r0, [r7, #6]
 8008890:	893a      	ldrh	r2, [r7, #8]
 8008892:	8979      	ldrh	r1, [r7, #10]
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4603      	mov	r3, r0
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 fb2c 	bl	8008efc <I2C_RequestMemoryRead>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e1ec      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d113      	bne.n	80088de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	61fb      	str	r3, [r7, #28]
 80088ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e1c0      	b.n	8008c60 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d11e      	bne.n	8008924 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80088f6:	b672      	cpsid	i
}
 80088f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088fa:	2300      	movs	r3, #0
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800891e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008920:	b662      	cpsie	i
}
 8008922:	e035      	b.n	8008990 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008928:	2b02      	cmp	r3, #2
 800892a:	d11e      	bne.n	800896a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800893a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800893c:	b672      	cpsid	i
}
 800893e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008966:	b662      	cpsie	i
}
 8008968:	e012      	b.n	8008990 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008978:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	613b      	str	r3, [r7, #16]
 800898e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008990:	e166      	b.n	8008c60 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008996:	2b03      	cmp	r3, #3
 8008998:	f200 811f 	bhi.w	8008bda <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d123      	bne.n	80089ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fce7 	bl	800937c <I2C_WaitOnRXNEFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e167      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089ea:	e139      	b.n	8008c60 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d152      	bne.n	8008a9a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	2200      	movs	r2, #0
 80089fc:	4906      	ldr	r1, [pc, #24]	; (8008a18 <HAL_I2C_Mem_Read+0x24c>)
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fb64 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d008      	beq.n	8008a1c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e13c      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
 8008a0e:	bf00      	nop
 8008a10:	00100002 	.word	0x00100002
 8008a14:	ffff0000 	.word	0xffff0000
 8008a18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008a1c:	b672      	cpsid	i
}
 8008a1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008a62:	b662      	cpsie	i
}
 8008a64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a98:	e0e2      	b.n	8008c60 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	497b      	ldr	r1, [pc, #492]	; (8008c90 <HAL_I2C_Mem_Read+0x4c4>)
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 fb11 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0e9      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ac4:	b672      	cpsid	i
}
 8008ac6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008afa:	4b66      	ldr	r3, [pc, #408]	; (8008c94 <HAL_I2C_Mem_Read+0x4c8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	08db      	lsrs	r3, r3, #3
 8008b00:	4a65      	ldr	r2, [pc, #404]	; (8008c98 <HAL_I2C_Mem_Read+0x4cc>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	0a1a      	lsrs	r2, r3, #8
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	00da      	lsls	r2, r3, #3
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d118      	bne.n	8008b52 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008b42:	b662      	cpsie	i
}
 8008b44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e09a      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d1d9      	bne.n	8008b14 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008ba2:	b662      	cpsie	i
}
 8008ba4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bd8:	e042      	b.n	8008c60 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fbcc 	bl	800937c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e04c      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d118      	bne.n	8008c60 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f47f ae94 	bne.w	8008992 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e000      	b.n	8008c88 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008c86:	2302      	movs	r3, #2
  }
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	; 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	00010004 	.word	0x00010004
 8008c94:	20000914 	.word	0x20000914
 8008c98:	14f8b589 	.word	0x14f8b589

08008c9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008caa:	b2db      	uxtb	r3, r3
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr

08008ccc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d006      	beq.n	8008cf6 <I2C_MasterRequestWrite+0x2a>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d003      	beq.n	8008cf6 <I2C_MasterRequestWrite+0x2a>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cf4:	d108      	bne.n	8008d08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e00b      	b.n	8008d20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	2b12      	cmp	r3, #18
 8008d0e:	d107      	bne.n	8008d20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f9cd 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00d      	beq.n	8008d54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d46:	d103      	bne.n	8008d50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e035      	b.n	8008dc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d5c:	d108      	bne.n	8008d70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d5e:	897b      	ldrh	r3, [r7, #10]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d6c:	611a      	str	r2, [r3, #16]
 8008d6e:	e01b      	b.n	8008da8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d70:	897b      	ldrh	r3, [r7, #10]
 8008d72:	11db      	asrs	r3, r3, #7
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 0306 	and.w	r3, r3, #6
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f063 030f 	orn	r3, r3, #15
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <I2C_MasterRequestWrite+0xfc>)
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f9f3 	bl	800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e010      	b.n	8008dc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d9e:	897b      	ldrh	r3, [r7, #10]
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4907      	ldr	r1, [pc, #28]	; (8008dcc <I2C_MasterRequestWrite+0x100>)
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f9e3 	bl	800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	00010008 	.word	0x00010008
 8008dcc:	00010002 	.word	0x00010002

08008dd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	817b      	strh	r3, [r7, #10]
 8008de2:	460b      	mov	r3, r1
 8008de4:	813b      	strh	r3, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f960 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e20:	d103      	bne.n	8008e2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e05f      	b.n	8008eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e2e:	897b      	ldrh	r3, [r7, #10]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	6a3a      	ldr	r2, [r7, #32]
 8008e42:	492d      	ldr	r1, [pc, #180]	; (8008ef8 <I2C_RequestMemoryWrite+0x128>)
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f998 	bl	800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e04c      	b.n	8008eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6c:	6a39      	ldr	r1, [r7, #32]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fa02 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00d      	beq.n	8008e96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d107      	bne.n	8008e92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e02b      	b.n	8008eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d105      	bne.n	8008ea8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e9c:	893b      	ldrh	r3, [r7, #8]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	611a      	str	r2, [r3, #16]
 8008ea6:	e021      	b.n	8008eec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ea8:	893b      	ldrh	r3, [r7, #8]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb8:	6a39      	ldr	r1, [r7, #32]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f9dc 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00d      	beq.n	8008ee2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d107      	bne.n	8008ede <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e005      	b.n	8008eee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ee2:	893b      	ldrh	r3, [r7, #8]
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	00010002 	.word	0x00010002

08008efc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	817b      	strh	r3, [r7, #10]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	813b      	strh	r3, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 f8c2 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5c:	d103      	bne.n	8008f66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e0aa      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f6a:	897b      	ldrh	r3, [r7, #10]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	6a3a      	ldr	r2, [r7, #32]
 8008f7e:	4952      	ldr	r1, [pc, #328]	; (80090c8 <I2C_RequestMemoryRead+0x1cc>)
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f8fa 	bl	800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e097      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	6a39      	ldr	r1, [r7, #32]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f964 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	2b04      	cmp	r3, #4
 8008fbc:	d107      	bne.n	8008fce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e076      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d105      	bne.n	8008fe4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fd8:	893b      	ldrh	r3, [r7, #8]
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	611a      	str	r2, [r3, #16]
 8008fe2:	e021      	b.n	8009028 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff4:	6a39      	ldr	r1, [r7, #32]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f93e 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b04      	cmp	r3, #4
 8009008:	d107      	bne.n	800901a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e050      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800901e:	893b      	ldrh	r3, [r7, #8]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	6a39      	ldr	r1, [r7, #32]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f923 	bl	8009278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00d      	beq.n	8009054 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	2b04      	cmp	r3, #4
 800903e:	d107      	bne.n	8009050 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e035      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009062:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	2200      	movs	r2, #0
 800906c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f82b 	bl	80090cc <I2C_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00d      	beq.n	8009098 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908a:	d103      	bne.n	8009094 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e013      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f043 0301 	orr.w	r3, r3, #1
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	6a3a      	ldr	r2, [r7, #32]
 80090ac:	4906      	ldr	r1, [pc, #24]	; (80090c8 <I2C_RequestMemoryRead+0x1cc>)
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 f863 	bl	800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	00010002 	.word	0x00010002

080090cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	4613      	mov	r3, r2
 80090da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090dc:	e025      	b.n	800912a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d021      	beq.n	800912a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090e6:	f7fe fb25 	bl	8007734 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d302      	bcc.n	80090fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d116      	bne.n	800912a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f043 0220 	orr.w	r2, r3, #32
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e023      	b.n	8009172 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	0c1b      	lsrs	r3, r3, #16
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	d10d      	bne.n	8009150 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	43da      	mvns	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4013      	ands	r3, r2
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf0c      	ite	eq
 8009146:	2301      	moveq	r3, #1
 8009148:	2300      	movne	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	e00c      	b.n	800916a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	43da      	mvns	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4013      	ands	r3, r2
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	bf0c      	ite	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	2300      	movne	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	429a      	cmp	r2, r3
 800916e:	d0b6      	beq.n	80090de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	60b9      	str	r1, [r7, #8]
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009188:	e051      	b.n	800922e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009198:	d123      	bne.n	80091e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	f043 0204 	orr.w	r2, r3, #4
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e046      	b.n	8009270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d021      	beq.n	800922e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ea:	f7fe faa3 	bl	8007734 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d302      	bcc.n	8009200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d116      	bne.n	800922e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f043 0220 	orr.w	r2, r3, #32
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e020      	b.n	8009270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	0c1b      	lsrs	r3, r3, #16
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d10c      	bne.n	8009252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	43da      	mvns	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	b29b      	uxth	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	bf14      	ite	ne
 800924a:	2301      	movne	r3, #1
 800924c:	2300      	moveq	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	e00b      	b.n	800926a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	43da      	mvns	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	4013      	ands	r3, r2
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf14      	ite	ne
 8009264:	2301      	movne	r3, #1
 8009266:	2300      	moveq	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d18d      	bne.n	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009284:	e02d      	b.n	80092e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f8ce 	bl	8009428 <I2C_IsAcknowledgeFailed>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e02d      	b.n	80092f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929c:	d021      	beq.n	80092e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929e:	f7fe fa49 	bl	8007734 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d116      	bne.n	80092e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2220      	movs	r2, #32
 80092be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	f043 0220 	orr.w	r2, r3, #32
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e007      	b.n	80092f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d1ca      	bne.n	8009286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009306:	e02d      	b.n	8009364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f88d 	bl	8009428 <I2C_IsAcknowledgeFailed>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e02d      	b.n	8009374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931e:	d021      	beq.n	8009364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009320:	f7fe fa08 	bl	8007734 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	429a      	cmp	r2, r3
 800932e:	d302      	bcc.n	8009336 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d116      	bne.n	8009364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	f043 0220 	orr.w	r2, r3, #32
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e007      	b.n	8009374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d1ca      	bne.n	8009308 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009388:	e042      	b.n	8009410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b10      	cmp	r3, #16
 8009396:	d119      	bne.n	80093cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0210 	mvn.w	r2, #16
 80093a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e029      	b.n	8009420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093cc:	f7fe f9b2 	bl	8007734 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d116      	bne.n	8009410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fc:	f043 0220 	orr.w	r2, r3, #32
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e007      	b.n	8009420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d1b5      	bne.n	800938a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800943a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800943e:	d11b      	bne.n	8009478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	f043 0204 	orr.w	r2, r3, #4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr

08009484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e272      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8087 	beq.w	80095b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094a4:	4b92      	ldr	r3, [pc, #584]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f003 030c 	and.w	r3, r3, #12
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d00c      	beq.n	80094ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80094b0:	4b8f      	ldr	r3, [pc, #572]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f003 030c 	and.w	r3, r3, #12
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d112      	bne.n	80094e2 <HAL_RCC_OscConfig+0x5e>
 80094bc:	4b8c      	ldr	r3, [pc, #560]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c8:	d10b      	bne.n	80094e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ca:	4b89      	ldr	r3, [pc, #548]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d06c      	beq.n	80095b0 <HAL_RCC_OscConfig+0x12c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d168      	bne.n	80095b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e24c      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ea:	d106      	bne.n	80094fa <HAL_RCC_OscConfig+0x76>
 80094ec:	4b80      	ldr	r3, [pc, #512]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a7f      	ldr	r2, [pc, #508]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80094f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	e02e      	b.n	8009558 <HAL_RCC_OscConfig+0xd4>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10c      	bne.n	800951c <HAL_RCC_OscConfig+0x98>
 8009502:	4b7b      	ldr	r3, [pc, #492]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a7a      	ldr	r2, [pc, #488]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	4b78      	ldr	r3, [pc, #480]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a77      	ldr	r2, [pc, #476]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	e01d      	b.n	8009558 <HAL_RCC_OscConfig+0xd4>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009524:	d10c      	bne.n	8009540 <HAL_RCC_OscConfig+0xbc>
 8009526:	4b72      	ldr	r3, [pc, #456]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a71      	ldr	r2, [pc, #452]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800952c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	4b6f      	ldr	r3, [pc, #444]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a6e      	ldr	r2, [pc, #440]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	e00b      	b.n	8009558 <HAL_RCC_OscConfig+0xd4>
 8009540:	4b6b      	ldr	r3, [pc, #428]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a6a      	ldr	r2, [pc, #424]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4b68      	ldr	r3, [pc, #416]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a67      	ldr	r2, [pc, #412]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009560:	f7fe f8e8 	bl	8007734 <HAL_GetTick>
 8009564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009566:	e008      	b.n	800957a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009568:	f7fe f8e4 	bl	8007734 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b64      	cmp	r3, #100	; 0x64
 8009574:	d901      	bls.n	800957a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e200      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800957a:	4b5d      	ldr	r3, [pc, #372]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f0      	beq.n	8009568 <HAL_RCC_OscConfig+0xe4>
 8009586:	e014      	b.n	80095b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009588:	f7fe f8d4 	bl	8007734 <HAL_GetTick>
 800958c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009590:	f7fe f8d0 	bl	8007734 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b64      	cmp	r3, #100	; 0x64
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e1ec      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095a2:	4b53      	ldr	r3, [pc, #332]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1f0      	bne.n	8009590 <HAL_RCC_OscConfig+0x10c>
 80095ae:	e000      	b.n	80095b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d063      	beq.n	8009686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095be:	4b4c      	ldr	r3, [pc, #304]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f003 030c 	and.w	r3, r3, #12
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80095ca:	4b49      	ldr	r3, [pc, #292]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f003 030c 	and.w	r3, r3, #12
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d11c      	bne.n	8009610 <HAL_RCC_OscConfig+0x18c>
 80095d6:	4b46      	ldr	r3, [pc, #280]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d116      	bne.n	8009610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095e2:	4b43      	ldr	r3, [pc, #268]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <HAL_RCC_OscConfig+0x176>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d001      	beq.n	80095fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e1c0      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095fa:	4b3d      	ldr	r3, [pc, #244]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4939      	ldr	r1, [pc, #228]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800960a:	4313      	orrs	r3, r2
 800960c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800960e:	e03a      	b.n	8009686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d020      	beq.n	800965a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009618:	4b36      	ldr	r3, [pc, #216]	; (80096f4 <HAL_RCC_OscConfig+0x270>)
 800961a:	2201      	movs	r2, #1
 800961c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800961e:	f7fe f889 	bl	8007734 <HAL_GetTick>
 8009622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009624:	e008      	b.n	8009638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009626:	f7fe f885 	bl	8007734 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e1a1      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009638:	4b2d      	ldr	r3, [pc, #180]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0f0      	beq.n	8009626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009644:	4b2a      	ldr	r3, [pc, #168]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4927      	ldr	r1, [pc, #156]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 8009654:	4313      	orrs	r3, r2
 8009656:	600b      	str	r3, [r1, #0]
 8009658:	e015      	b.n	8009686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800965a:	4b26      	ldr	r3, [pc, #152]	; (80096f4 <HAL_RCC_OscConfig+0x270>)
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009660:	f7fe f868 	bl	8007734 <HAL_GetTick>
 8009664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009666:	e008      	b.n	800967a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009668:	f7fe f864 	bl	8007734 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e180      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800967a:	4b1d      	ldr	r3, [pc, #116]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1f0      	bne.n	8009668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d03a      	beq.n	8009708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d019      	beq.n	80096ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800969a:	4b17      	ldr	r3, [pc, #92]	; (80096f8 <HAL_RCC_OscConfig+0x274>)
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096a0:	f7fe f848 	bl	8007734 <HAL_GetTick>
 80096a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096a8:	f7fe f844 	bl	8007734 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e160      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <HAL_RCC_OscConfig+0x26c>)
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0f0      	beq.n	80096a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80096c6:	2001      	movs	r0, #1
 80096c8:	f000 fad8 	bl	8009c7c <RCC_Delay>
 80096cc:	e01c      	b.n	8009708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096ce:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <HAL_RCC_OscConfig+0x274>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096d4:	f7fe f82e 	bl	8007734 <HAL_GetTick>
 80096d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096da:	e00f      	b.n	80096fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096dc:	f7fe f82a 	bl	8007734 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d908      	bls.n	80096fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e146      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
 80096ee:	bf00      	nop
 80096f0:	40021000 	.word	0x40021000
 80096f4:	42420000 	.word	0x42420000
 80096f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096fc:	4b92      	ldr	r3, [pc, #584]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e9      	bne.n	80096dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 80a6 	beq.w	8009862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800971a:	4b8b      	ldr	r3, [pc, #556]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10d      	bne.n	8009742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009726:	4b88      	ldr	r3, [pc, #544]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	4a87      	ldr	r2, [pc, #540]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800972c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009730:	61d3      	str	r3, [r2, #28]
 8009732:	4b85      	ldr	r3, [pc, #532]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800973e:	2301      	movs	r3, #1
 8009740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009742:	4b82      	ldr	r3, [pc, #520]	; (800994c <HAL_RCC_OscConfig+0x4c8>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d118      	bne.n	8009780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800974e:	4b7f      	ldr	r3, [pc, #508]	; (800994c <HAL_RCC_OscConfig+0x4c8>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a7e      	ldr	r2, [pc, #504]	; (800994c <HAL_RCC_OscConfig+0x4c8>)
 8009754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800975a:	f7fd ffeb 	bl	8007734 <HAL_GetTick>
 800975e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009760:	e008      	b.n	8009774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009762:	f7fd ffe7 	bl	8007734 <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b64      	cmp	r3, #100	; 0x64
 800976e:	d901      	bls.n	8009774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e103      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009774:	4b75      	ldr	r3, [pc, #468]	; (800994c <HAL_RCC_OscConfig+0x4c8>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0f0      	beq.n	8009762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d106      	bne.n	8009796 <HAL_RCC_OscConfig+0x312>
 8009788:	4b6f      	ldr	r3, [pc, #444]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	4a6e      	ldr	r2, [pc, #440]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	6213      	str	r3, [r2, #32]
 8009794:	e02d      	b.n	80097f2 <HAL_RCC_OscConfig+0x36e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10c      	bne.n	80097b8 <HAL_RCC_OscConfig+0x334>
 800979e:	4b6a      	ldr	r3, [pc, #424]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	4a69      	ldr	r2, [pc, #420]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	6213      	str	r3, [r2, #32]
 80097aa:	4b67      	ldr	r3, [pc, #412]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	4a66      	ldr	r2, [pc, #408]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097b0:	f023 0304 	bic.w	r3, r3, #4
 80097b4:	6213      	str	r3, [r2, #32]
 80097b6:	e01c      	b.n	80097f2 <HAL_RCC_OscConfig+0x36e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2b05      	cmp	r3, #5
 80097be:	d10c      	bne.n	80097da <HAL_RCC_OscConfig+0x356>
 80097c0:	4b61      	ldr	r3, [pc, #388]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	4a60      	ldr	r2, [pc, #384]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097c6:	f043 0304 	orr.w	r3, r3, #4
 80097ca:	6213      	str	r3, [r2, #32]
 80097cc:	4b5e      	ldr	r3, [pc, #376]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	4a5d      	ldr	r2, [pc, #372]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097d2:	f043 0301 	orr.w	r3, r3, #1
 80097d6:	6213      	str	r3, [r2, #32]
 80097d8:	e00b      	b.n	80097f2 <HAL_RCC_OscConfig+0x36e>
 80097da:	4b5b      	ldr	r3, [pc, #364]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	4a5a      	ldr	r2, [pc, #360]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097e0:	f023 0301 	bic.w	r3, r3, #1
 80097e4:	6213      	str	r3, [r2, #32]
 80097e6:	4b58      	ldr	r3, [pc, #352]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	4a57      	ldr	r2, [pc, #348]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80097ec:	f023 0304 	bic.w	r3, r3, #4
 80097f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d015      	beq.n	8009826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097fa:	f7fd ff9b 	bl	8007734 <HAL_GetTick>
 80097fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009800:	e00a      	b.n	8009818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009802:	f7fd ff97 	bl	8007734 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009810:	4293      	cmp	r3, r2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e0b1      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009818:	4b4b      	ldr	r3, [pc, #300]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0ee      	beq.n	8009802 <HAL_RCC_OscConfig+0x37e>
 8009824:	e014      	b.n	8009850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009826:	f7fd ff85 	bl	8007734 <HAL_GetTick>
 800982a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800982c:	e00a      	b.n	8009844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800982e:	f7fd ff81 	bl	8007734 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	f241 3288 	movw	r2, #5000	; 0x1388
 800983c:	4293      	cmp	r3, r2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e09b      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009844:	4b40      	ldr	r3, [pc, #256]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1ee      	bne.n	800982e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d105      	bne.n	8009862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009856:	4b3c      	ldr	r3, [pc, #240]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	4a3b      	ldr	r2, [pc, #236]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800985c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8087 	beq.w	800997a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800986c:	4b36      	ldr	r3, [pc, #216]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f003 030c 	and.w	r3, r3, #12
 8009874:	2b08      	cmp	r3, #8
 8009876:	d061      	beq.n	800993c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d146      	bne.n	800990e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009880:	4b33      	ldr	r3, [pc, #204]	; (8009950 <HAL_RCC_OscConfig+0x4cc>)
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009886:	f7fd ff55 	bl	8007734 <HAL_GetTick>
 800988a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800988c:	e008      	b.n	80098a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800988e:	f7fd ff51 	bl	8007734 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b02      	cmp	r3, #2
 800989a:	d901      	bls.n	80098a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e06d      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098a0:	4b29      	ldr	r3, [pc, #164]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1f0      	bne.n	800988e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b4:	d108      	bne.n	80098c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80098b6:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	4921      	ldr	r1, [pc, #132]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098c8:	4b1f      	ldr	r3, [pc, #124]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a19      	ldr	r1, [r3, #32]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	430b      	orrs	r3, r1
 80098da:	491b      	ldr	r1, [pc, #108]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <HAL_RCC_OscConfig+0x4cc>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e6:	f7fd ff25 	bl	8007734 <HAL_GetTick>
 80098ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80098ec:	e008      	b.n	8009900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ee:	f7fd ff21 	bl	8007734 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d901      	bls.n	8009900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e03d      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009900:	4b11      	ldr	r3, [pc, #68]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0f0      	beq.n	80098ee <HAL_RCC_OscConfig+0x46a>
 800990c:	e035      	b.n	800997a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800990e:	4b10      	ldr	r3, [pc, #64]	; (8009950 <HAL_RCC_OscConfig+0x4cc>)
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009914:	f7fd ff0e 	bl	8007734 <HAL_GetTick>
 8009918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800991a:	e008      	b.n	800992e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800991c:	f7fd ff0a 	bl	8007734 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d901      	bls.n	800992e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e026      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <HAL_RCC_OscConfig+0x4c4>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f0      	bne.n	800991c <HAL_RCC_OscConfig+0x498>
 800993a:	e01e      	b.n	800997a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d107      	bne.n	8009954 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e019      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
 8009948:	40021000 	.word	0x40021000
 800994c:	40007000 	.word	0x40007000
 8009950:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009954:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <HAL_RCC_OscConfig+0x500>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	429a      	cmp	r2, r3
 8009966:	d106      	bne.n	8009976 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009972:	429a      	cmp	r2, r3
 8009974:	d001      	beq.n	800997a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40021000 	.word	0x40021000

08009988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e0d0      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800999c:	4b6a      	ldr	r3, [pc, #424]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d910      	bls.n	80099cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099aa:	4b67      	ldr	r3, [pc, #412]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f023 0207 	bic.w	r2, r3, #7
 80099b2:	4965      	ldr	r1, [pc, #404]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ba:	4b63      	ldr	r3, [pc, #396]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0307 	and.w	r3, r3, #7
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d001      	beq.n	80099cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0b8      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d020      	beq.n	8009a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099e4:	4b59      	ldr	r3, [pc, #356]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4a58      	ldr	r2, [pc, #352]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 80099ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099fc:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a52      	ldr	r2, [pc, #328]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a08:	4b50      	ldr	r3, [pc, #320]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	494d      	ldr	r1, [pc, #308]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d040      	beq.n	8009aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d107      	bne.n	8009a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a2e:	4b47      	ldr	r3, [pc, #284]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d115      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e07f      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d107      	bne.n	8009a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a46:	4b41      	ldr	r3, [pc, #260]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e073      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a56:	4b3d      	ldr	r3, [pc, #244]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e06b      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a66:	4b39      	ldr	r3, [pc, #228]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f023 0203 	bic.w	r2, r3, #3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4936      	ldr	r1, [pc, #216]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a78:	f7fd fe5c 	bl	8007734 <HAL_GetTick>
 8009a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a7e:	e00a      	b.n	8009a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a80:	f7fd fe58 	bl	8007734 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e053      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a96:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f003 020c 	and.w	r2, r3, #12
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d1eb      	bne.n	8009a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009aa8:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d210      	bcs.n	8009ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ab6:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f023 0207 	bic.w	r2, r3, #7
 8009abe:	4922      	ldr	r1, [pc, #136]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac6:	4b20      	ldr	r3, [pc, #128]	; (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d001      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e032      	b.n	8009b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0304 	and.w	r3, r3, #4
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d008      	beq.n	8009af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ae4:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4916      	ldr	r1, [pc, #88]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	490e      	ldr	r1, [pc, #56]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b16:	f000 f821 	bl	8009b5c <HAL_RCC_GetSysClockFreq>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	091b      	lsrs	r3, r3, #4
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	490a      	ldr	r1, [pc, #40]	; (8009b50 <HAL_RCC_ClockConfig+0x1c8>)
 8009b28:	5ccb      	ldrb	r3, [r1, r3]
 8009b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2e:	4a09      	ldr	r2, [pc, #36]	; (8009b54 <HAL_RCC_ClockConfig+0x1cc>)
 8009b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <HAL_RCC_ClockConfig+0x1d0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fd fdba 	bl	80076b0 <HAL_InitTick>

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40022000 	.word	0x40022000
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	0800d4ec 	.word	0x0800d4ec
 8009b54:	20000914 	.word	0x20000914
 8009b58:	20000918 	.word	0x20000918

08009b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b5c:	b490      	push	{r4, r7}
 8009b5e:	b08a      	sub	sp, #40	; 0x28
 8009b60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009b62:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <HAL_RCC_GetSysClockFreq+0xac>)
 8009b64:	1d3c      	adds	r4, r7, #4
 8009b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009b6c:	f240 2301 	movw	r3, #513	; 0x201
 8009b70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009b86:	4b21      	ldr	r3, [pc, #132]	; (8009c0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	f003 030c 	and.w	r3, r3, #12
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d002      	beq.n	8009b9c <HAL_RCC_GetSysClockFreq+0x40>
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d003      	beq.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x46>
 8009b9a:	e02b      	b.n	8009bf4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009b9c:	4b1c      	ldr	r3, [pc, #112]	; (8009c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009b9e:	623b      	str	r3, [r7, #32]
      break;
 8009ba0:	e02b      	b.n	8009bfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	0c9b      	lsrs	r3, r3, #18
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	3328      	adds	r3, #40	; 0x28
 8009bac:	443b      	add	r3, r7
 8009bae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009bb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d012      	beq.n	8009be4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	0c5b      	lsrs	r3, r3, #17
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	3328      	adds	r3, #40	; 0x28
 8009bca:	443b      	add	r3, r7
 8009bcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009bd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	4a0e      	ldr	r2, [pc, #56]	; (8009c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009bd6:	fb03 f202 	mul.w	r2, r3, r2
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
 8009be2:	e004      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	4a0b      	ldr	r2, [pc, #44]	; (8009c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009be8:	fb02 f303 	mul.w	r3, r2, r3
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	623b      	str	r3, [r7, #32]
      break;
 8009bf2:	e002      	b.n	8009bfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009bf6:	623b      	str	r3, [r7, #32]
      break;
 8009bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3728      	adds	r7, #40	; 0x28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc90      	pop	{r4, r7}
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	0800d4d4 	.word	0x0800d4d4
 8009c0c:	40021000 	.word	0x40021000
 8009c10:	007a1200 	.word	0x007a1200
 8009c14:	003d0900 	.word	0x003d0900

08009c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bc80      	pop	{r7}
 8009c26:	4770      	bx	lr
 8009c28:	20000914 	.word	0x20000914

08009c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c30:	f7ff fff2 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c34:	4602      	mov	r2, r0
 8009c36:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	f003 0307 	and.w	r3, r3, #7
 8009c40:	4903      	ldr	r1, [pc, #12]	; (8009c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c42:	5ccb      	ldrb	r3, [r1, r3]
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	40021000 	.word	0x40021000
 8009c50:	0800d4fc 	.word	0x0800d4fc

08009c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c58:	f7ff ffde 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	0adb      	lsrs	r3, r3, #11
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	4903      	ldr	r1, [pc, #12]	; (8009c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c6a:	5ccb      	ldrb	r3, [r1, r3]
 8009c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	40021000 	.word	0x40021000
 8009c78:	0800d4fc 	.word	0x0800d4fc

08009c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009c84:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <RCC_Delay+0x34>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a0a      	ldr	r2, [pc, #40]	; (8009cb4 <RCC_Delay+0x38>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	0a5b      	lsrs	r3, r3, #9
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
 8009c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009c98:	bf00      	nop
  }
  while (Delay --);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1e5a      	subs	r2, r3, #1
 8009c9e:	60fa      	str	r2, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f9      	bne.n	8009c98 <RCC_Delay+0x1c>
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc80      	pop	{r7}
 8009cae:	4770      	bx	lr
 8009cb0:	20000914 	.word	0x20000914
 8009cb4:	10624dd3 	.word	0x10624dd3

08009cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e041      	b.n	8009d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fd fbd0 	bl	8007484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f000 fa7e 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d001      	beq.n	8009d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e044      	b.n	8009dfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	; (8009e04 <HAL_TIM_Base_Start_IT+0xac>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d018      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a1c      	ldr	r2, [pc, #112]	; (8009e08 <HAL_TIM_Base_Start_IT+0xb0>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d013      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da4:	d00e      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a18      	ldr	r2, [pc, #96]	; (8009e0c <HAL_TIM_Base_Start_IT+0xb4>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a16      	ldr	r2, [pc, #88]	; (8009e10 <HAL_TIM_Base_Start_IT+0xb8>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a15      	ldr	r2, [pc, #84]	; (8009e14 <HAL_TIM_Base_Start_IT+0xbc>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d111      	bne.n	8009de8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b06      	cmp	r3, #6
 8009dd4:	d010      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f042 0201 	orr.w	r2, r2, #1
 8009de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de6:	e007      	b.n	8009df8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0201 	orr.w	r2, r2, #1
 8009df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr
 8009e04:	40012c00 	.word	0x40012c00
 8009e08:	40013400 	.word	0x40013400
 8009e0c:	40000400 	.word	0x40000400
 8009e10:	40000800 	.word	0x40000800
 8009e14:	40000c00 	.word	0x40000c00

08009e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d122      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d11b      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f06f 0202 	mvn.w	r2, #2
 8009e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9b1 	bl	800a1c2 <HAL_TIM_IC_CaptureCallback>
 8009e60:	e005      	b.n	8009e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f9a4 	bl	800a1b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f9b3 	bl	800a1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d122      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d11b      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0204 	mvn.w	r2, #4
 8009e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f987 	bl	800a1c2 <HAL_TIM_IC_CaptureCallback>
 8009eb4:	e005      	b.n	8009ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f97a 	bl	800a1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f989 	bl	800a1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d122      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b08      	cmp	r3, #8
 8009ee2:	d11b      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f06f 0208 	mvn.w	r2, #8
 8009eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f95d 	bl	800a1c2 <HAL_TIM_IC_CaptureCallback>
 8009f08:	e005      	b.n	8009f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f950 	bl	800a1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f95f 	bl	800a1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	d122      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d11b      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f06f 0210 	mvn.w	r2, #16
 8009f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2208      	movs	r2, #8
 8009f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f933 	bl	800a1c2 <HAL_TIM_IC_CaptureCallback>
 8009f5c:	e005      	b.n	8009f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f926 	bl	800a1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f935 	bl	800a1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10e      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d107      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f06f 0201 	mvn.w	r2, #1
 8009f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa fe0e 	bl	8004bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa6:	2b80      	cmp	r3, #128	; 0x80
 8009fa8:	d10e      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb4:	2b80      	cmp	r3, #128	; 0x80
 8009fb6:	d107      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa9d 	bl	800a502 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d10e      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d107      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f8f9 	bl	800a1e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d10e      	bne.n	800a020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d107      	bne.n	800a020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0220 	mvn.w	r2, #32
 800a018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa68 	bl	800a4f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_TIM_ConfigClockSource+0x18>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e0b3      	b.n	800a1a8 <HAL_TIM_ConfigClockSource+0x180>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a05e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a078:	d03e      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0xd0>
 800a07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a07e:	f200 8087 	bhi.w	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a086:	f000 8085 	beq.w	800a194 <HAL_TIM_ConfigClockSource+0x16c>
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08e:	d87f      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a090:	2b70      	cmp	r3, #112	; 0x70
 800a092:	d01a      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0xa2>
 800a094:	2b70      	cmp	r3, #112	; 0x70
 800a096:	d87b      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a098:	2b60      	cmp	r3, #96	; 0x60
 800a09a:	d050      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x116>
 800a09c:	2b60      	cmp	r3, #96	; 0x60
 800a09e:	d877      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a0a0:	2b50      	cmp	r3, #80	; 0x50
 800a0a2:	d03c      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0xf6>
 800a0a4:	2b50      	cmp	r3, #80	; 0x50
 800a0a6:	d873      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a0a8:	2b40      	cmp	r3, #64	; 0x40
 800a0aa:	d058      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x136>
 800a0ac:	2b40      	cmp	r3, #64	; 0x40
 800a0ae:	d86f      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a0b0:	2b30      	cmp	r3, #48	; 0x30
 800a0b2:	d064      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x156>
 800a0b4:	2b30      	cmp	r3, #48	; 0x30
 800a0b6:	d86b      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	d060      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x156>
 800a0bc:	2b20      	cmp	r3, #32
 800a0be:	d867      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d05c      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x156>
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d05a      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a0c8:	e062      	b.n	800a190 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6899      	ldr	r1, [r3, #8]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f000 f97e 	bl	800a3da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	609a      	str	r2, [r3, #8]
      break;
 800a0f6:	e04e      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	6899      	ldr	r1, [r3, #8]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f000 f967 	bl	800a3da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a11a:	609a      	str	r2, [r3, #8]
      break;
 800a11c:	e03b      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6859      	ldr	r1, [r3, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f000 f8de 	bl	800a2ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2150      	movs	r1, #80	; 0x50
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f935 	bl	800a3a6 <TIM_ITRx_SetConfig>
      break;
 800a13c:	e02b      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6859      	ldr	r1, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f000 f8fc 	bl	800a348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2160      	movs	r1, #96	; 0x60
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f925 	bl	800a3a6 <TIM_ITRx_SetConfig>
      break;
 800a15c:	e01b      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	6859      	ldr	r1, [r3, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f000 f8be 	bl	800a2ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2140      	movs	r1, #64	; 0x40
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f915 	bl	800a3a6 <TIM_ITRx_SetConfig>
      break;
 800a17c:	e00b      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f000 f90c 	bl	800a3a6 <TIM_ITRx_SetConfig>
        break;
 800a18e:	e002      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bc80      	pop	{r7}
 800a1c0:	4770      	bx	lr

0800a1c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1ca:	bf00      	nop
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bc80      	pop	{r7}
 800a1f6:	4770      	bx	lr

0800a1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a33      	ldr	r2, [pc, #204]	; (800a2d8 <TIM_Base_SetConfig+0xe0>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d013      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a32      	ldr	r2, [pc, #200]	; (800a2dc <TIM_Base_SetConfig+0xe4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00f      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21e:	d00b      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a2f      	ldr	r2, [pc, #188]	; (800a2e0 <TIM_Base_SetConfig+0xe8>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a2e      	ldr	r2, [pc, #184]	; (800a2e4 <TIM_Base_SetConfig+0xec>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a2d      	ldr	r2, [pc, #180]	; (800a2e8 <TIM_Base_SetConfig+0xf0>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d108      	bne.n	800a24a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <TIM_Base_SetConfig+0xe0>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d013      	beq.n	800a27a <TIM_Base_SetConfig+0x82>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <TIM_Base_SetConfig+0xe4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d00f      	beq.n	800a27a <TIM_Base_SetConfig+0x82>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a260:	d00b      	beq.n	800a27a <TIM_Base_SetConfig+0x82>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a1e      	ldr	r2, [pc, #120]	; (800a2e0 <TIM_Base_SetConfig+0xe8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d007      	beq.n	800a27a <TIM_Base_SetConfig+0x82>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <TIM_Base_SetConfig+0xec>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d003      	beq.n	800a27a <TIM_Base_SetConfig+0x82>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a1c      	ldr	r2, [pc, #112]	; (800a2e8 <TIM_Base_SetConfig+0xf0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d108      	bne.n	800a28c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a09      	ldr	r2, [pc, #36]	; (800a2d8 <TIM_Base_SetConfig+0xe0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <TIM_Base_SetConfig+0xc8>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a08      	ldr	r2, [pc, #32]	; (800a2dc <TIM_Base_SetConfig+0xe4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d103      	bne.n	800a2c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	691a      	ldr	r2, [r3, #16]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	615a      	str	r2, [r3, #20]
}
 800a2ce:	bf00      	nop
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	40013400 	.word	0x40013400
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	40000800 	.word	0x40000800
 800a2e8:	40000c00 	.word	0x40000c00

0800a2ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f023 0201 	bic.w	r2, r3, #1
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f023 030a 	bic.w	r3, r3, #10
 800a328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bc80      	pop	{r7}
 800a346:	4770      	bx	lr

0800a348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	f023 0210 	bic.w	r2, r3, #16
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	031b      	lsls	r3, r3, #12
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	621a      	str	r2, [r3, #32]
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr

0800a3a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b085      	sub	sp, #20
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	f043 0307 	orr.w	r3, r3, #7
 800a3c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	609a      	str	r2, [r3, #8]
}
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr

0800a3da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b087      	sub	sp, #28
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
 800a3e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	021a      	lsls	r2, r3, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4313      	orrs	r3, r2
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	4313      	orrs	r3, r2
 800a406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	609a      	str	r2, [r3, #8]
}
 800a40e:	bf00      	nop
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	bc80      	pop	{r7}
 800a416:	4770      	bx	lr

0800a418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d101      	bne.n	800a430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a42c:	2302      	movs	r3, #2
 800a42e:	e050      	b.n	800a4d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1b      	ldr	r2, [pc, #108]	; (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a19      	ldr	r2, [pc, #100]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a486:	d00e      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a12      	ldr	r2, [pc, #72]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr
 800a4dc:	40012c00 	.word	0x40012c00
 800a4e0:	40013400 	.word	0x40013400
 800a4e4:	40000400 	.word	0x40000400
 800a4e8:	40000800 	.word	0x40000800
 800a4ec:	40000c00 	.word	0x40000c00

0800a4f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr

0800a502 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr

0800a514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e03f      	b.n	800a5a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7fc ffc8 	bl	80074d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2224      	movs	r2, #36	; 0x24
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f891 	bl	800a680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695a      	ldr	r2, [r3, #20]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a58c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	d11d      	bne.n	800a604 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_UART_Receive_IT+0x26>
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e016      	b.n	800a606 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_UART_Receive_IT+0x38>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e00f      	b.n	800a606 <HAL_UART_Receive_IT+0x58>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f807 	bl	800a60e <UART_Start_Receive_IT>
 800a600:	4603      	mov	r3, r0
 800a602:	e000      	b.n	800a606 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a604:	2302      	movs	r3, #2
  }
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	4613      	mov	r3, r2
 800a61a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	88fa      	ldrh	r2, [r7, #6]
 800a626:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	88fa      	ldrh	r2, [r7, #6]
 800a62c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2222      	movs	r2, #34	; 0x22
 800a638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a652:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	695a      	ldr	r2, [r3, #20]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0201 	orr.w	r2, r2, #1
 800a662:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0220 	orr.w	r2, r2, #32
 800a672:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a6ba:	f023 030c 	bic.w	r3, r3, #12
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a2c      	ldr	r2, [pc, #176]	; (800a794 <UART_SetConfig+0x114>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d103      	bne.n	800a6f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a6e8:	f7ff fab4 	bl	8009c54 <HAL_RCC_GetPCLK2Freq>
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	e002      	b.n	800a6f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a6f0:	f7ff fa9c 	bl	8009c2c <HAL_RCC_GetPCLK1Freq>
 800a6f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009a      	lsls	r2, r3, #2
 800a700:	441a      	add	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70c:	4a22      	ldr	r2, [pc, #136]	; (800a798 <UART_SetConfig+0x118>)
 800a70e:	fba2 2303 	umull	r2, r3, r2, r3
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	0119      	lsls	r1, r3, #4
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009a      	lsls	r2, r3, #2
 800a720:	441a      	add	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	fbb2 f2f3 	udiv	r2, r2, r3
 800a72c:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <UART_SetConfig+0x118>)
 800a72e:	fba3 0302 	umull	r0, r3, r3, r2
 800a732:	095b      	lsrs	r3, r3, #5
 800a734:	2064      	movs	r0, #100	; 0x64
 800a736:	fb00 f303 	mul.w	r3, r0, r3
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	3332      	adds	r3, #50	; 0x32
 800a740:	4a15      	ldr	r2, [pc, #84]	; (800a798 <UART_SetConfig+0x118>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a74c:	4419      	add	r1, r3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009a      	lsls	r2, r3, #2
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	fbb2 f2f3 	udiv	r2, r2, r3
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <UART_SetConfig+0x118>)
 800a766:	fba3 0302 	umull	r0, r3, r3, r2
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	2064      	movs	r0, #100	; 0x64
 800a76e:	fb00 f303 	mul.w	r3, r0, r3
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	3332      	adds	r3, #50	; 0x32
 800a778:	4a07      	ldr	r2, [pc, #28]	; (800a798 <UART_SetConfig+0x118>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	f003 020f 	and.w	r2, r3, #15
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	440a      	add	r2, r1
 800a78a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	40013800 	.word	0x40013800
 800a798:	51eb851f 	.word	0x51eb851f

0800a79c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a7aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7ae:	2b84      	cmp	r3, #132	; 0x84
 800a7b0:	d005      	beq.n	800a7be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a7b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3303      	adds	r3, #3
 800a7bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a7be:	68fb      	ldr	r3, [r7, #12]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr

0800a7ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7ce:	f000 fd9b 	bl	800b308 <vTaskStartScheduler>
  
  return osOK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7da:	b089      	sub	sp, #36	; 0x24
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d020      	beq.n	800a82c <osThreadCreate+0x54>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d01c      	beq.n	800a82c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685c      	ldr	r4, [r3, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691e      	ldr	r6, [r3, #16]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff ffc9 	bl	800a79c <makeFreeRtosPriority>
 800a80a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a814:	9202      	str	r2, [sp, #8]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	9100      	str	r1, [sp, #0]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	4632      	mov	r2, r6
 800a81e:	4629      	mov	r1, r5
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fbb3 	bl	800af8c <xTaskCreateStatic>
 800a826:	4603      	mov	r3, r0
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	e01c      	b.n	800a866 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685c      	ldr	r4, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a838:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff ffab 	bl	800a79c <makeFreeRtosPriority>
 800a846:	4602      	mov	r2, r0
 800a848:	f107 030c 	add.w	r3, r7, #12
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	9200      	str	r2, [sp, #0]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	4632      	mov	r2, r6
 800a854:	4629      	mov	r1, r5
 800a856:	4620      	mov	r0, r4
 800a858:	f000 fbf4 	bl	800b044 <xTaskCreate>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d001      	beq.n	800a866 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	e000      	b.n	800a868 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a866:	68fb      	ldr	r3, [r7, #12]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a870 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <osDelay+0x16>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	e000      	b.n	800a888 <osDelay+0x18>
 800a886:	2301      	movs	r3, #1
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fd09 	bl	800b2a0 <vTaskDelay>
  
  return osOK;
 800a88e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f103 0208 	add.w	r2, r3, #8
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f103 0208 	add.w	r2, r3, #8
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f103 0208 	add.w	r2, r3, #8
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr

0800a8d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr

0800a8ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	bf00      	nop
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr

0800a934 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94a:	d103      	bne.n	800a954 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	e00c      	b.n	800a96e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3308      	adds	r3, #8
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e002      	b.n	800a962 <vListInsert+0x2e>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	60fb      	str	r3, [r7, #12]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d2f6      	bcs.n	800a95c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bc80      	pop	{r7}
 800a9a2:	4770      	bx	lr

0800a9a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6892      	ldr	r2, [r2, #8]
 800a9ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6852      	ldr	r2, [r2, #4]
 800a9c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d103      	bne.n	800a9d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	1e5a      	subs	r2, r3, #1
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bc80      	pop	{r7}
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa22:	f001 fa73 	bl	800bf0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa32:	fb01 f303 	mul.w	r3, r1, r3
 800aa36:	441a      	add	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa52:	3b01      	subs	r3, #1
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa58:	fb01 f303 	mul.w	r3, r1, r3
 800aa5c:	441a      	add	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	22ff      	movs	r2, #255	; 0xff
 800aa66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	22ff      	movs	r2, #255	; 0xff
 800aa6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d114      	bne.n	800aaa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01a      	beq.n	800aab6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3310      	adds	r3, #16
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 fe85 	bl	800b794 <xTaskRemoveFromEventList>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d012      	beq.n	800aab6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa90:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <xQueueGenericReset+0xcc>)
 800aa92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	e009      	b.n	800aab6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fef6 	bl	800a898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3324      	adds	r3, #36	; 0x24
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff fef1 	bl	800a898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aab6:	f001 fa59 	bl	800bf6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aaba:	2301      	movs	r3, #1
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08a      	sub	sp, #40	; 0x28
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	613b      	str	r3, [r7, #16]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	e004      	b.n	800ab08 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
 800ab06:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	3348      	adds	r3, #72	; 0x48
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 fabf 	bl	800c090 <pvPortMalloc>
 800ab12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00f      	beq.n	800ab3a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	3348      	adds	r3, #72	; 0x48
 800ab1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab28:	79fa      	ldrb	r2, [r7, #7]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f805 	bl	800ab44 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
	}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e002      	b.n	800ab66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab72:	2101      	movs	r1, #1
 800ab74:	69b8      	ldr	r0, [r7, #24]
 800ab76:	f7ff ff3f 	bl	800a9f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00e      	beq.n	800abae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aba2:	2300      	movs	r3, #0
 800aba4:	2200      	movs	r2, #0
 800aba6:	2100      	movs	r1, #0
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f81d 	bl	800abe8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800abae:	bf00      	nop
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	4603      	mov	r3, r0
 800abbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abc0:	2301      	movs	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	2300      	movs	r3, #0
 800abc6:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	461a      	mov	r2, r3
 800abcc:	6939      	ldr	r1, [r7, #16]
 800abce:	6978      	ldr	r0, [r7, #20]
 800abd0:	f7ff ff7a 	bl	800aac8 <xQueueGenericCreate>
 800abd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff ffd3 	bl	800ab82 <prvInitialiseMutex>

		return pxNewQueue;
 800abdc:	68fb      	ldr	r3, [r7, #12]
	}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08e      	sub	sp, #56	; 0x38
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800abf6:	2300      	movs	r3, #0
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericSend+0x32>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <xQueueGenericSend+0x40>
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <xQueueGenericSend+0x44>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e000      	b.n	800ac2e <xQueueGenericSend+0x46>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <xQueueGenericSend+0x60>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d103      	bne.n	800ac56 <xQueueGenericSend+0x6e>
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <xQueueGenericSend+0x72>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <xQueueGenericSend+0x74>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xQueueGenericSend+0x8e>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	623b      	str	r3, [r7, #32]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac76:	f000 ff4d 	bl	800bb14 <xTaskGetSchedulerState>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <xQueueGenericSend+0x9e>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <xQueueGenericSend+0xa2>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <xQueueGenericSend+0xa4>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xQueueGenericSend+0xbe>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	61fb      	str	r3, [r7, #28]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aca6:	f001 f931 	bl	800bf0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d302      	bcc.n	800acbc <xQueueGenericSend+0xd4>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d129      	bne.n	800ad10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc2:	f000 f88f 	bl	800ade4 <prvCopyDataToQueue>
 800acc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	d010      	beq.n	800acf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	3324      	adds	r3, #36	; 0x24
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 fd5d 	bl	800b794 <xTaskRemoveFromEventList>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d013      	beq.n	800ad08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ace0:	4b3f      	ldr	r3, [pc, #252]	; (800ade0 <xQueueGenericSend+0x1f8>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	e00a      	b.n	800ad08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d007      	beq.n	800ad08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800acf8:	4b39      	ldr	r3, [pc, #228]	; (800ade0 <xQueueGenericSend+0x1f8>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad08:	f001 f930 	bl	800bf6c <vPortExitCritical>
				return pdPASS;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e063      	b.n	800add8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d103      	bne.n	800ad1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad16:	f001 f929 	bl	800bf6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e05c      	b.n	800add8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad24:	f107 0314 	add.w	r3, r7, #20
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 fd95 	bl	800b858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad32:	f001 f91b 	bl	800bf6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad36:	f000 fb47 	bl	800b3c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad3a:	f001 f8e7 	bl	800bf0c <vPortEnterCritical>
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad44:	b25b      	sxtb	r3, r3
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4a:	d103      	bne.n	800ad54 <xQueueGenericSend+0x16c>
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d103      	bne.n	800ad6a <xQueueGenericSend+0x182>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad6a:	f001 f8ff 	bl	800bf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad6e:	1d3a      	adds	r2, r7, #4
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	4611      	mov	r1, r2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fd84 	bl	800b884 <xTaskCheckForTimeOut>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d124      	bne.n	800adcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad84:	f000 f8ea 	bl	800af5c <prvIsQueueFull>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d018      	beq.n	800adc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	3310      	adds	r3, #16
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4611      	mov	r1, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fcd8 	bl	800b74c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad9e:	f000 f88b 	bl	800aeb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ada2:	f000 fb1f 	bl	800b3e4 <xTaskResumeAll>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f47f af7c 	bne.w	800aca6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <xQueueGenericSend+0x1f8>)
 800adb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	e772      	b.n	800aca6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800adc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adc2:	f000 f879 	bl	800aeb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adc6:	f000 fb0d 	bl	800b3e4 <xTaskResumeAll>
 800adca:	e76c      	b.n	800aca6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800adcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adce:	f000 f873 	bl	800aeb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800add2:	f000 fb07 	bl	800b3e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800add6:	2300      	movs	r3, #0
		}
	}
}
 800add8:	4618      	mov	r0, r3
 800adda:	3738      	adds	r7, #56	; 0x38
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	e000ed04 	.word	0xe000ed04

0800ade4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adf0:	2300      	movs	r3, #0
 800adf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10d      	bne.n	800ae1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d14d      	bne.n	800aea6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fe9e 	bl	800bb50 <xTaskPriorityDisinherit>
 800ae14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	605a      	str	r2, [r3, #4]
 800ae1c:	e043      	b.n	800aea6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d119      	bne.n	800ae58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6898      	ldr	r0, [r3, #8]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	f001 fc62 	bl	800c6f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689a      	ldr	r2, [r3, #8]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	441a      	add	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d32b      	bcc.n	800aea6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	609a      	str	r2, [r3, #8]
 800ae56:	e026      	b.n	800aea6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	68d8      	ldr	r0, [r3, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	461a      	mov	r2, r3
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	f001 fc48 	bl	800c6f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae70:	425b      	negs	r3, r3
 800ae72:	441a      	add	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d207      	bcs.n	800ae94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	425b      	negs	r3, r3
 800ae8e:	441a      	add	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d105      	bne.n	800aea6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aeae:	697b      	ldr	r3, [r7, #20]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aec0:	f001 f824 	bl	800bf0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aecc:	e011      	b.n	800aef2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d012      	beq.n	800aefc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3324      	adds	r3, #36	; 0x24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fc5a 	bl	800b794 <xTaskRemoveFromEventList>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aee6:	f000 fd2f 	bl	800b948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dce9      	bgt.n	800aece <prvUnlockQueue+0x16>
 800aefa:	e000      	b.n	800aefe <prvUnlockQueue+0x46>
					break;
 800aefc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	22ff      	movs	r2, #255	; 0xff
 800af02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af06:	f001 f831 	bl	800bf6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af0a:	f000 ffff 	bl	800bf0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af16:	e011      	b.n	800af3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d012      	beq.n	800af46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3310      	adds	r3, #16
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fc35 	bl	800b794 <xTaskRemoveFromEventList>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af30:	f000 fd0a 	bl	800b948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	3b01      	subs	r3, #1
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dce9      	bgt.n	800af18 <prvUnlockQueue+0x60>
 800af44:	e000      	b.n	800af48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	22ff      	movs	r2, #255	; 0xff
 800af4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af50:	f001 f80c 	bl	800bf6c <vPortExitCritical>
}
 800af54:	bf00      	nop
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af64:	f000 ffd2 	bl	800bf0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af70:	429a      	cmp	r2, r3
 800af72:	d102      	bne.n	800af7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	e001      	b.n	800af7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af7e:	f000 fff5 	bl	800bf6c <vPortExitCritical>

	return xReturn;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08e      	sub	sp, #56	; 0x38
 800af90:	af04      	add	r7, sp, #16
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	623b      	str	r3, [r7, #32]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xTaskCreateStatic+0x46>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	61fb      	str	r3, [r7, #28]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afd2:	2354      	movs	r3, #84	; 0x54
 800afd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b54      	cmp	r3, #84	; 0x54
 800afda:	d00a      	beq.n	800aff2 <xTaskCreateStatic+0x66>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	61bb      	str	r3, [r7, #24]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d01e      	beq.n	800b036 <xTaskCreateStatic+0xaa>
 800aff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affa:	2b00      	cmp	r3, #0
 800affc:	d01b      	beq.n	800b036 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b010:	2300      	movs	r3, #0
 800b012:	9303      	str	r3, [sp, #12]
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	f107 0314 	add.w	r3, r7, #20
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f850 	bl	800b0ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b030:	f000 f8cc 	bl	800b1cc <prvAddNewTaskToReadyList>
 800b034:	e001      	b.n	800b03a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b036:	2300      	movs	r3, #0
 800b038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b03a:	697b      	ldr	r3, [r7, #20]
	}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3728      	adds	r7, #40	; 0x28
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08c      	sub	sp, #48	; 0x30
 800b048:	af04      	add	r7, sp, #16
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	4613      	mov	r3, r2
 800b052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b054:	88fb      	ldrh	r3, [r7, #6]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 f819 	bl	800c090 <pvPortMalloc>
 800b05e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00e      	beq.n	800b084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b066:	2054      	movs	r0, #84	; 0x54
 800b068:	f001 f812 	bl	800c090 <pvPortMalloc>
 800b06c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	631a      	str	r2, [r3, #48]	; 0x30
 800b07a:	e005      	b.n	800b088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b07c:	6978      	ldr	r0, [r7, #20]
 800b07e:	f001 f8cb 	bl	800c218 <vPortFree>
 800b082:	e001      	b.n	800b088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b084:	2300      	movs	r3, #0
 800b086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d017      	beq.n	800b0be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b096:	88fa      	ldrh	r2, [r7, #6]
 800b098:	2300      	movs	r3, #0
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	9302      	str	r3, [sp, #8]
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 f80e 	bl	800b0ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0b2:	69f8      	ldr	r0, [r7, #28]
 800b0b4:	f000 f88a 	bl	800b1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	61bb      	str	r3, [r7, #24]
 800b0bc:	e002      	b.n	800b0c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0c4:	69bb      	ldr	r3, [r7, #24]
	}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	607a      	str	r2, [r7, #4]
 800b0da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	f023 0307 	bic.w	r3, r3, #7
 800b0f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	617b      	str	r3, [r7, #20]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
 800b11a:	e012      	b.n	800b142 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	4413      	add	r3, r2
 800b122:	7819      	ldrb	r1, [r3, #0]
 800b124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	3334      	adds	r3, #52	; 0x34
 800b12c:	460a      	mov	r2, r1
 800b12e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	4413      	add	r3, r2
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d006      	beq.n	800b14a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	3301      	adds	r3, #1
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2b0f      	cmp	r3, #15
 800b146:	d9e9      	bls.n	800b11c <prvInitialiseNewTask+0x4e>
 800b148:	e000      	b.n	800b14c <prvInitialiseNewTask+0x7e>
		{
			break;
 800b14a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	2b06      	cmp	r3, #6
 800b158:	d901      	bls.n	800b15e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b15a:	2306      	movs	r3, #6
 800b15c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b162:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b168:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	2200      	movs	r2, #0
 800b16e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	3304      	adds	r3, #4
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fbae 	bl	800a8d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	3318      	adds	r3, #24
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fba9 	bl	800a8d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b188:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	f1c3 0207 	rsb	r2, r3, #7
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b198:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	2200      	movs	r2, #0
 800b19e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	69b8      	ldr	r0, [r7, #24]
 800b1ae:	f000 fdbb 	bl	800bd28 <pxPortInitialiseStack>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c4:	bf00      	nop
 800b1c6:	3720      	adds	r7, #32
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1d4:	f000 fe9a 	bl	800bf0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1d8:	4b2a      	ldr	r3, [pc, #168]	; (800b284 <prvAddNewTaskToReadyList+0xb8>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	4a29      	ldr	r2, [pc, #164]	; (800b284 <prvAddNewTaskToReadyList+0xb8>)
 800b1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1e2:	4b29      	ldr	r3, [pc, #164]	; (800b288 <prvAddNewTaskToReadyList+0xbc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ea:	4a27      	ldr	r2, [pc, #156]	; (800b288 <prvAddNewTaskToReadyList+0xbc>)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1f0:	4b24      	ldr	r3, [pc, #144]	; (800b284 <prvAddNewTaskToReadyList+0xb8>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d110      	bne.n	800b21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1f8:	f000 fbca 	bl	800b990 <prvInitialiseTaskLists>
 800b1fc:	e00d      	b.n	800b21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1fe:	4b23      	ldr	r3, [pc, #140]	; (800b28c <prvAddNewTaskToReadyList+0xc0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b206:	4b20      	ldr	r3, [pc, #128]	; (800b288 <prvAddNewTaskToReadyList+0xbc>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	429a      	cmp	r2, r3
 800b212:	d802      	bhi.n	800b21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b214:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <prvAddNewTaskToReadyList+0xbc>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b21a:	4b1d      	ldr	r3, [pc, #116]	; (800b290 <prvAddNewTaskToReadyList+0xc4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	4a1b      	ldr	r2, [pc, #108]	; (800b290 <prvAddNewTaskToReadyList+0xc4>)
 800b222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	2201      	movs	r2, #1
 800b22a:	409a      	lsls	r2, r3
 800b22c:	4b19      	ldr	r3, [pc, #100]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4313      	orrs	r3, r2
 800b232:	4a18      	ldr	r2, [pc, #96]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4a15      	ldr	r2, [pc, #84]	; (800b298 <prvAddNewTaskToReadyList+0xcc>)
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3304      	adds	r3, #4
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f7ff fb4e 	bl	800a8ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b252:	f000 fe8b 	bl	800bf6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <prvAddNewTaskToReadyList+0xc0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00e      	beq.n	800b27c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b25e:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <prvAddNewTaskToReadyList+0xbc>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	429a      	cmp	r2, r3
 800b26a:	d207      	bcs.n	800b27c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b26c:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <prvAddNewTaskToReadyList+0xd0>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000ffc 	.word	0x20000ffc
 800b288:	20000efc 	.word	0x20000efc
 800b28c:	20001008 	.word	0x20001008
 800b290:	20001018 	.word	0x20001018
 800b294:	20001004 	.word	0x20001004
 800b298:	20000f00 	.word	0x20000f00
 800b29c:	e000ed04 	.word	0xe000ed04

0800b2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d017      	beq.n	800b2e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2b2:	4b13      	ldr	r3, [pc, #76]	; (800b300 <vTaskDelay+0x60>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <vTaskDelay+0x30>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	60bb      	str	r3, [r7, #8]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2d0:	f000 f87a 	bl	800b3c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fcc0 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2dc:	f000 f882 	bl	800b3e4 <xTaskResumeAll>
 800b2e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <vTaskDelay+0x64>)
 800b2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ee:	601a      	str	r2, [r3, #0]
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20001024 	.word	0x20001024
 800b304:	e000ed04 	.word	0xe000ed04

0800b308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08a      	sub	sp, #40	; 0x28
 800b30c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b316:	463a      	mov	r2, r7
 800b318:	1d39      	adds	r1, r7, #4
 800b31a:	f107 0308 	add.w	r3, r7, #8
 800b31e:	4618      	mov	r0, r3
 800b320:	f7f4 ff8e 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	9202      	str	r2, [sp, #8]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	2300      	movs	r3, #0
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	460a      	mov	r2, r1
 800b336:	491e      	ldr	r1, [pc, #120]	; (800b3b0 <vTaskStartScheduler+0xa8>)
 800b338:	481e      	ldr	r0, [pc, #120]	; (800b3b4 <vTaskStartScheduler+0xac>)
 800b33a:	f7ff fe27 	bl	800af8c <xTaskCreateStatic>
 800b33e:	4603      	mov	r3, r0
 800b340:	4a1d      	ldr	r2, [pc, #116]	; (800b3b8 <vTaskStartScheduler+0xb0>)
 800b342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b344:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <vTaskStartScheduler+0xb0>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b34c:	2301      	movs	r3, #1
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	e001      	b.n	800b356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d116      	bne.n	800b38a <vTaskStartScheduler+0x82>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	613b      	str	r3, [r7, #16]
}
 800b36e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b370:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <vTaskStartScheduler+0xb4>)
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b378:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <vTaskStartScheduler+0xb8>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b37e:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <vTaskStartScheduler+0xbc>)
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b384:	f000 fd50 	bl	800be28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b388:	e00e      	b.n	800b3a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d10a      	bne.n	800b3a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60fb      	str	r3, [r7, #12]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <vTaskStartScheduler+0x9e>
}
 800b3a8:	bf00      	nop
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	0800d4e4 	.word	0x0800d4e4
 800b3b4:	0800b961 	.word	0x0800b961
 800b3b8:	20001020 	.word	0x20001020
 800b3bc:	2000101c 	.word	0x2000101c
 800b3c0:	20001008 	.word	0x20001008
 800b3c4:	20001000 	.word	0x20001000

0800b3c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b3cc:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <vTaskSuspendAll+0x18>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	4a03      	ldr	r2, [pc, #12]	; (800b3e0 <vTaskSuspendAll+0x18>)
 800b3d4:	6013      	str	r3, [r2, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bc80      	pop	{r7}
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	20001024 	.word	0x20001024

0800b3e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3f2:	4b41      	ldr	r3, [pc, #260]	; (800b4f8 <xTaskResumeAll+0x114>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	603b      	str	r3, [r7, #0]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b410:	f000 fd7c 	bl	800bf0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b414:	4b38      	ldr	r3, [pc, #224]	; (800b4f8 <xTaskResumeAll+0x114>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	4a37      	ldr	r2, [pc, #220]	; (800b4f8 <xTaskResumeAll+0x114>)
 800b41c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41e:	4b36      	ldr	r3, [pc, #216]	; (800b4f8 <xTaskResumeAll+0x114>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d161      	bne.n	800b4ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b426:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <xTaskResumeAll+0x118>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d05d      	beq.n	800b4ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42e:	e02e      	b.n	800b48e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b430:	4b33      	ldr	r3, [pc, #204]	; (800b500 <xTaskResumeAll+0x11c>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3318      	adds	r3, #24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff fab1 	bl	800a9a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3304      	adds	r3, #4
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff faac 	bl	800a9a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	2201      	movs	r2, #1
 800b452:	409a      	lsls	r2, r3
 800b454:	4b2b      	ldr	r3, [pc, #172]	; (800b504 <xTaskResumeAll+0x120>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4313      	orrs	r3, r2
 800b45a:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <xTaskResumeAll+0x120>)
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4a27      	ldr	r2, [pc, #156]	; (800b508 <xTaskResumeAll+0x124>)
 800b46c:	441a      	add	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3304      	adds	r3, #4
 800b472:	4619      	mov	r1, r3
 800b474:	4610      	mov	r0, r2
 800b476:	f7ff fa3a 	bl	800a8ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47e:	4b23      	ldr	r3, [pc, #140]	; (800b50c <xTaskResumeAll+0x128>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b488:	4b21      	ldr	r3, [pc, #132]	; (800b510 <xTaskResumeAll+0x12c>)
 800b48a:	2201      	movs	r2, #1
 800b48c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b48e:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <xTaskResumeAll+0x11c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1cc      	bne.n	800b430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b49c:	f000 fb16 	bl	800bacc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b4a0:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <xTaskResumeAll+0x130>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d010      	beq.n	800b4ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4ac:	f000 f836 	bl	800b51c <xTaskIncrementTick>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b4b6:	4b16      	ldr	r3, [pc, #88]	; (800b510 <xTaskResumeAll+0x12c>)
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1f1      	bne.n	800b4ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b4c8:	4b12      	ldr	r3, [pc, #72]	; (800b514 <xTaskResumeAll+0x130>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4ce:	4b10      	ldr	r3, [pc, #64]	; (800b510 <xTaskResumeAll+0x12c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d009      	beq.n	800b4ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4da:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <xTaskResumeAll+0x134>)
 800b4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4ea:	f000 fd3f 	bl	800bf6c <vPortExitCritical>

	return xAlreadyYielded;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20001024 	.word	0x20001024
 800b4fc:	20000ffc 	.word	0x20000ffc
 800b500:	20000fbc 	.word	0x20000fbc
 800b504:	20001004 	.word	0x20001004
 800b508:	20000f00 	.word	0x20000f00
 800b50c:	20000efc 	.word	0x20000efc
 800b510:	20001010 	.word	0x20001010
 800b514:	2000100c 	.word	0x2000100c
 800b518:	e000ed04 	.word	0xe000ed04

0800b51c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b526:	4b51      	ldr	r3, [pc, #324]	; (800b66c <xTaskIncrementTick+0x150>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f040 808d 	bne.w	800b64a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b530:	4b4f      	ldr	r3, [pc, #316]	; (800b670 <xTaskIncrementTick+0x154>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3301      	adds	r3, #1
 800b536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b538:	4a4d      	ldr	r2, [pc, #308]	; (800b670 <xTaskIncrementTick+0x154>)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d120      	bne.n	800b586 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b544:	4b4b      	ldr	r3, [pc, #300]	; (800b674 <xTaskIncrementTick+0x158>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <xTaskIncrementTick+0x48>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	603b      	str	r3, [r7, #0]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <xTaskIncrementTick+0x46>
 800b564:	4b43      	ldr	r3, [pc, #268]	; (800b674 <xTaskIncrementTick+0x158>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	4b43      	ldr	r3, [pc, #268]	; (800b678 <xTaskIncrementTick+0x15c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a41      	ldr	r2, [pc, #260]	; (800b674 <xTaskIncrementTick+0x158>)
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	4a41      	ldr	r2, [pc, #260]	; (800b678 <xTaskIncrementTick+0x15c>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	4b40      	ldr	r3, [pc, #256]	; (800b67c <xTaskIncrementTick+0x160>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3301      	adds	r3, #1
 800b57e:	4a3f      	ldr	r2, [pc, #252]	; (800b67c <xTaskIncrementTick+0x160>)
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	f000 faa3 	bl	800bacc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b586:	4b3e      	ldr	r3, [pc, #248]	; (800b680 <xTaskIncrementTick+0x164>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d34d      	bcc.n	800b62c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b590:	4b38      	ldr	r3, [pc, #224]	; (800b674 <xTaskIncrementTick+0x158>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <xTaskIncrementTick+0x82>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e000      	b.n	800b5a0 <xTaskIncrementTick+0x84>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d004      	beq.n	800b5ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a4:	4b36      	ldr	r3, [pc, #216]	; (800b680 <xTaskIncrementTick+0x164>)
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	601a      	str	r2, [r3, #0]
					break;
 800b5ac:	e03e      	b.n	800b62c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b5ae:	4b31      	ldr	r3, [pc, #196]	; (800b674 <xTaskIncrementTick+0x158>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d203      	bcs.n	800b5ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5c6:	4a2e      	ldr	r2, [pc, #184]	; (800b680 <xTaskIncrementTick+0x164>)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6013      	str	r3, [r2, #0]
						break;
 800b5cc:	e02e      	b.n	800b62c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff f9e6 	bl	800a9a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3318      	adds	r3, #24
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff f9dd 	bl	800a9a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	409a      	lsls	r2, r3
 800b5f2:	4b24      	ldr	r3, [pc, #144]	; (800b684 <xTaskIncrementTick+0x168>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	4a22      	ldr	r2, [pc, #136]	; (800b684 <xTaskIncrementTick+0x168>)
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4a1f      	ldr	r2, [pc, #124]	; (800b688 <xTaskIncrementTick+0x16c>)
 800b60a:	441a      	add	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7ff f96b 	bl	800a8ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61c:	4b1b      	ldr	r3, [pc, #108]	; (800b68c <xTaskIncrementTick+0x170>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	429a      	cmp	r2, r3
 800b624:	d3b4      	bcc.n	800b590 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b626:	2301      	movs	r3, #1
 800b628:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b62a:	e7b1      	b.n	800b590 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b62c:	4b17      	ldr	r3, [pc, #92]	; (800b68c <xTaskIncrementTick+0x170>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4915      	ldr	r1, [pc, #84]	; (800b688 <xTaskIncrementTick+0x16c>)
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d907      	bls.n	800b654 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	e004      	b.n	800b654 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b64a:	4b11      	ldr	r3, [pc, #68]	; (800b690 <xTaskIncrementTick+0x174>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3301      	adds	r3, #1
 800b650:	4a0f      	ldr	r2, [pc, #60]	; (800b690 <xTaskIncrementTick+0x174>)
 800b652:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <xTaskIncrementTick+0x178>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20001024 	.word	0x20001024
 800b670:	20001000 	.word	0x20001000
 800b674:	20000fb4 	.word	0x20000fb4
 800b678:	20000fb8 	.word	0x20000fb8
 800b67c:	20001014 	.word	0x20001014
 800b680:	2000101c 	.word	0x2000101c
 800b684:	20001004 	.word	0x20001004
 800b688:	20000f00 	.word	0x20000f00
 800b68c:	20000efc 	.word	0x20000efc
 800b690:	2000100c 	.word	0x2000100c
 800b694:	20001010 	.word	0x20001010

0800b698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b69e:	4b26      	ldr	r3, [pc, #152]	; (800b738 <vTaskSwitchContext+0xa0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6a6:	4b25      	ldr	r3, [pc, #148]	; (800b73c <vTaskSwitchContext+0xa4>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6ac:	e03f      	b.n	800b72e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b6ae:	4b23      	ldr	r3, [pc, #140]	; (800b73c <vTaskSwitchContext+0xa4>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b6b4:	4b22      	ldr	r3, [pc, #136]	; (800b740 <vTaskSwitchContext+0xa8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	fab3 f383 	clz	r3, r3
 800b6c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	f1c3 031f 	rsb	r3, r3, #31
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	491e      	ldr	r1, [pc, #120]	; (800b744 <vTaskSwitchContext+0xac>)
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vTaskSwitchContext+0x5a>
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4a11      	ldr	r2, [pc, #68]	; (800b744 <vTaskSwitchContext+0xac>)
 800b700:	4413      	add	r3, r2
 800b702:	613b      	str	r3, [r7, #16]
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	605a      	str	r2, [r3, #4]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3308      	adds	r3, #8
 800b716:	429a      	cmp	r2, r3
 800b718:	d104      	bne.n	800b724 <vTaskSwitchContext+0x8c>
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	605a      	str	r2, [r3, #4]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	4a07      	ldr	r2, [pc, #28]	; (800b748 <vTaskSwitchContext+0xb0>)
 800b72c:	6013      	str	r3, [r2, #0]
}
 800b72e:	bf00      	nop
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	bc80      	pop	{r7}
 800b736:	4770      	bx	lr
 800b738:	20001024 	.word	0x20001024
 800b73c:	20001010 	.word	0x20001010
 800b740:	20001004 	.word	0x20001004
 800b744:	20000f00 	.word	0x20000f00
 800b748:	20000efc 	.word	0x20000efc

0800b74c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	60fb      	str	r3, [r7, #12]
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <vTaskPlaceOnEventList+0x44>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3318      	adds	r3, #24
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff f8da 	bl	800a934 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b780:	2101      	movs	r1, #1
 800b782:	6838      	ldr	r0, [r7, #0]
 800b784:	f000 fa6a 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20000efc 	.word	0x20000efc

0800b794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60fb      	str	r3, [r7, #12]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff f8ed 	bl	800a9a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <xTaskRemoveFromEventList+0xac>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d11c      	bne.n	800b80c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff f8e4 	bl	800a9a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	409a      	lsls	r2, r3
 800b7e4:	4b17      	ldr	r3, [pc, #92]	; (800b844 <xTaskRemoveFromEventList+0xb0>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	4a16      	ldr	r2, [pc, #88]	; (800b844 <xTaskRemoveFromEventList+0xb0>)
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4a13      	ldr	r2, [pc, #76]	; (800b848 <xTaskRemoveFromEventList+0xb4>)
 800b7fc:	441a      	add	r2, r3
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3304      	adds	r3, #4
 800b802:	4619      	mov	r1, r3
 800b804:	4610      	mov	r0, r2
 800b806:	f7ff f872 	bl	800a8ee <vListInsertEnd>
 800b80a:	e005      	b.n	800b818 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	3318      	adds	r3, #24
 800b810:	4619      	mov	r1, r3
 800b812:	480e      	ldr	r0, [pc, #56]	; (800b84c <xTaskRemoveFromEventList+0xb8>)
 800b814:	f7ff f86b 	bl	800a8ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <xTaskRemoveFromEventList+0xbc>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	429a      	cmp	r2, r3
 800b824:	d905      	bls.n	800b832 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b826:	2301      	movs	r3, #1
 800b828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <xTaskRemoveFromEventList+0xc0>)
 800b82c:	2201      	movs	r2, #1
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	e001      	b.n	800b836 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b836:	697b      	ldr	r3, [r7, #20]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20001024 	.word	0x20001024
 800b844:	20001004 	.word	0x20001004
 800b848:	20000f00 	.word	0x20000f00
 800b84c:	20000fbc 	.word	0x20000fbc
 800b850:	20000efc 	.word	0x20000efc
 800b854:	20001010 	.word	0x20001010

0800b858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <vTaskInternalSetTimeOutState+0x24>)
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <vTaskInternalSetTimeOutState+0x28>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	605a      	str	r2, [r3, #4]
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20001014 	.word	0x20001014
 800b880:	20001000 	.word	0x20001000

0800b884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	613b      	str	r3, [r7, #16]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60fb      	str	r3, [r7, #12]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8c6:	f000 fb21 	bl	800bf0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8ca:	4b1d      	ldr	r3, [pc, #116]	; (800b940 <xTaskCheckForTimeOut+0xbc>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e2:	d102      	bne.n	800b8ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	61fb      	str	r3, [r7, #28]
 800b8e8:	e023      	b.n	800b932 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <xTaskCheckForTimeOut+0xc0>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d007      	beq.n	800b906 <xTaskCheckForTimeOut+0x82>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d302      	bcc.n	800b906 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b900:	2301      	movs	r3, #1
 800b902:	61fb      	str	r3, [r7, #28]
 800b904:	e015      	b.n	800b932 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d20b      	bcs.n	800b928 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff ff9b 	bl	800b858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b922:	2300      	movs	r3, #0
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	e004      	b.n	800b932 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b92e:	2301      	movs	r3, #1
 800b930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b932:	f000 fb1b 	bl	800bf6c <vPortExitCritical>

	return xReturn;
 800b936:	69fb      	ldr	r3, [r7, #28]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20001000 	.word	0x20001000
 800b944:	20001014 	.word	0x20001014

0800b948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b948:	b480      	push	{r7}
 800b94a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b94c:	4b03      	ldr	r3, [pc, #12]	; (800b95c <vTaskMissedYield+0x14>)
 800b94e:	2201      	movs	r2, #1
 800b950:	601a      	str	r2, [r3, #0]
}
 800b952:	bf00      	nop
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	20001010 	.word	0x20001010

0800b960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b968:	f000 f852 	bl	800ba10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b96c:	4b06      	ldr	r3, [pc, #24]	; (800b988 <prvIdleTask+0x28>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d9f9      	bls.n	800b968 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b974:	4b05      	ldr	r3, [pc, #20]	; (800b98c <prvIdleTask+0x2c>)
 800b976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b984:	e7f0      	b.n	800b968 <prvIdleTask+0x8>
 800b986:	bf00      	nop
 800b988:	20000f00 	.word	0x20000f00
 800b98c:	e000ed04 	.word	0xe000ed04

0800b990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b996:	2300      	movs	r3, #0
 800b998:	607b      	str	r3, [r7, #4]
 800b99a:	e00c      	b.n	800b9b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a12      	ldr	r2, [pc, #72]	; (800b9f0 <prvInitialiseTaskLists+0x60>)
 800b9a8:	4413      	add	r3, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe ff74 	bl	800a898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b06      	cmp	r3, #6
 800b9ba:	d9ef      	bls.n	800b99c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9bc:	480d      	ldr	r0, [pc, #52]	; (800b9f4 <prvInitialiseTaskLists+0x64>)
 800b9be:	f7fe ff6b 	bl	800a898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9c2:	480d      	ldr	r0, [pc, #52]	; (800b9f8 <prvInitialiseTaskLists+0x68>)
 800b9c4:	f7fe ff68 	bl	800a898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9c8:	480c      	ldr	r0, [pc, #48]	; (800b9fc <prvInitialiseTaskLists+0x6c>)
 800b9ca:	f7fe ff65 	bl	800a898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ce:	480c      	ldr	r0, [pc, #48]	; (800ba00 <prvInitialiseTaskLists+0x70>)
 800b9d0:	f7fe ff62 	bl	800a898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9d4:	480b      	ldr	r0, [pc, #44]	; (800ba04 <prvInitialiseTaskLists+0x74>)
 800b9d6:	f7fe ff5f 	bl	800a898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9da:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <prvInitialiseTaskLists+0x78>)
 800b9dc:	4a05      	ldr	r2, [pc, #20]	; (800b9f4 <prvInitialiseTaskLists+0x64>)
 800b9de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <prvInitialiseTaskLists+0x7c>)
 800b9e2:	4a05      	ldr	r2, [pc, #20]	; (800b9f8 <prvInitialiseTaskLists+0x68>)
 800b9e4:	601a      	str	r2, [r3, #0]
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20000f00 	.word	0x20000f00
 800b9f4:	20000f8c 	.word	0x20000f8c
 800b9f8:	20000fa0 	.word	0x20000fa0
 800b9fc:	20000fbc 	.word	0x20000fbc
 800ba00:	20000fd0 	.word	0x20000fd0
 800ba04:	20000fe8 	.word	0x20000fe8
 800ba08:	20000fb4 	.word	0x20000fb4
 800ba0c:	20000fb8 	.word	0x20000fb8

0800ba10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba16:	e019      	b.n	800ba4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba18:	f000 fa78 	bl	800bf0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ba1c:	4b10      	ldr	r3, [pc, #64]	; (800ba60 <prvCheckTasksWaitingTermination+0x50>)
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe ffbb 	bl	800a9a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <prvCheckTasksWaitingTermination+0x54>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	4a0b      	ldr	r2, [pc, #44]	; (800ba64 <prvCheckTasksWaitingTermination+0x54>)
 800ba36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba38:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <prvCheckTasksWaitingTermination+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	4a0a      	ldr	r2, [pc, #40]	; (800ba68 <prvCheckTasksWaitingTermination+0x58>)
 800ba40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba42:	f000 fa93 	bl	800bf6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f810 	bl	800ba6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba4c:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <prvCheckTasksWaitingTermination+0x58>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e1      	bne.n	800ba18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20000fd0 	.word	0x20000fd0
 800ba64:	20000ffc 	.word	0x20000ffc
 800ba68:	20000fe4 	.word	0x20000fe4

0800ba6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d108      	bne.n	800ba90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 fbc8 	bl	800c218 <vPortFree>
				vPortFree( pxTCB );
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fbc5 	bl	800c218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba8e:	e018      	b.n	800bac2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d103      	bne.n	800baa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fbbc 	bl	800c218 <vPortFree>
	}
 800baa0:	e00f      	b.n	800bac2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d00a      	beq.n	800bac2 <prvDeleteTCB+0x56>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60fb      	str	r3, [r7, #12]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <prvDeleteTCB+0x54>
	}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bad2:	4b0e      	ldr	r3, [pc, #56]	; (800bb0c <prvResetNextTaskUnblockTime+0x40>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d101      	bne.n	800bae0 <prvResetNextTaskUnblockTime+0x14>
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <prvResetNextTaskUnblockTime+0x16>
 800bae0:	2300      	movs	r3, #0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d004      	beq.n	800baf0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bae6:	4b0a      	ldr	r3, [pc, #40]	; (800bb10 <prvResetNextTaskUnblockTime+0x44>)
 800bae8:	f04f 32ff 	mov.w	r2, #4294967295
 800baec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800baee:	e008      	b.n	800bb02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800baf0:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <prvResetNextTaskUnblockTime+0x40>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4a04      	ldr	r2, [pc, #16]	; (800bb10 <prvResetNextTaskUnblockTime+0x44>)
 800bb00:	6013      	str	r3, [r2, #0]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr
 800bb0c:	20000fb4 	.word	0x20000fb4
 800bb10:	2000101c 	.word	0x2000101c

0800bb14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <xTaskGetSchedulerState+0x34>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d102      	bne.n	800bb28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb22:	2301      	movs	r3, #1
 800bb24:	607b      	str	r3, [r7, #4]
 800bb26:	e008      	b.n	800bb3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb28:	4b08      	ldr	r3, [pc, #32]	; (800bb4c <xTaskGetSchedulerState+0x38>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb30:	2302      	movs	r3, #2
 800bb32:	607b      	str	r3, [r7, #4]
 800bb34:	e001      	b.n	800bb3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb36:	2300      	movs	r3, #0
 800bb38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb3a:	687b      	ldr	r3, [r7, #4]
	}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bc80      	pop	{r7}
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20001008 	.word	0x20001008
 800bb4c:	20001024 	.word	0x20001024

0800bb50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d06e      	beq.n	800bc44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb66:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <xTaskPriorityDisinherit+0x100>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d00a      	beq.n	800bb86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10a      	bne.n	800bba4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	60bb      	str	r3, [r7, #8]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba8:	1e5a      	subs	r2, r3, #1
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d044      	beq.n	800bc44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d140      	bne.n	800bc44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe feec 	bl	800a9a4 <uxListRemove>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d115      	bne.n	800bbfe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	491f      	ldr	r1, [pc, #124]	; (800bc54 <xTaskPriorityDisinherit+0x104>)
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <xTaskPriorityDisinherit+0xae>
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbec:	2201      	movs	r2, #1
 800bbee:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf2:	43da      	mvns	r2, r3
 800bbf4:	4b18      	ldr	r3, [pc, #96]	; (800bc58 <xTaskPriorityDisinherit+0x108>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <xTaskPriorityDisinherit+0x108>)
 800bbfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	f1c3 0207 	rsb	r2, r3, #7
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc16:	2201      	movs	r2, #1
 800bc18:	409a      	lsls	r2, r3
 800bc1a:	4b0f      	ldr	r3, [pc, #60]	; (800bc58 <xTaskPriorityDisinherit+0x108>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	4a0d      	ldr	r2, [pc, #52]	; (800bc58 <xTaskPriorityDisinherit+0x108>)
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4a08      	ldr	r2, [pc, #32]	; (800bc54 <xTaskPriorityDisinherit+0x104>)
 800bc32:	441a      	add	r2, r3
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f7fe fe57 	bl	800a8ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc44:	697b      	ldr	r3, [r7, #20]
	}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000efc 	.word	0x20000efc
 800bc54:	20000f00 	.word	0x20000f00
 800bc58:	20001004 	.word	0x20001004

0800bc5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc66:	4b29      	ldr	r3, [pc, #164]	; (800bd0c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc6c:	4b28      	ldr	r3, [pc, #160]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fe96 	bl	800a9a4 <uxListRemove>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10b      	bne.n	800bc96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bc7e:	4b24      	ldr	r3, [pc, #144]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc84:	2201      	movs	r2, #1
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	43da      	mvns	r2, r3
 800bc8c:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4013      	ands	r3, r2
 800bc92:	4a20      	ldr	r2, [pc, #128]	; (800bd14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9c:	d10a      	bne.n	800bcb4 <prvAddCurrentTaskToDelayedList+0x58>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d007      	beq.n	800bcb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bca4:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	481a      	ldr	r0, [pc, #104]	; (800bd18 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bcae:	f7fe fe1e 	bl	800a8ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcb2:	e026      	b.n	800bd02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4413      	add	r3, r2
 800bcba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcbc:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d209      	bcs.n	800bce0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bccc:	4b13      	ldr	r3, [pc, #76]	; (800bd1c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f7fe fe2b 	bl	800a934 <vListInsert>
}
 800bcde:	e010      	b.n	800bd02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce0:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f7fe fe21 	bl	800a934 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d202      	bcs.n	800bd02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bcfc:	4a09      	ldr	r2, [pc, #36]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	6013      	str	r3, [r2, #0]
}
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20001000 	.word	0x20001000
 800bd10:	20000efc 	.word	0x20000efc
 800bd14:	20001004 	.word	0x20001004
 800bd18:	20000fe8 	.word	0x20000fe8
 800bd1c:	20000fb8 	.word	0x20000fb8
 800bd20:	20000fb4 	.word	0x20000fb4
 800bd24:	2000101c 	.word	0x2000101c

0800bd28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3b04      	subs	r3, #4
 800bd38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3b04      	subs	r3, #4
 800bd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f023 0201 	bic.w	r2, r3, #1
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3b04      	subs	r3, #4
 800bd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd58:	4a08      	ldr	r2, [pc, #32]	; (800bd7c <pxPortInitialiseStack+0x54>)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3b14      	subs	r3, #20
 800bd62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3b20      	subs	r3, #32
 800bd6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd70:	68fb      	ldr	r3, [r7, #12]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bc80      	pop	{r7}
 800bd7a:	4770      	bx	lr
 800bd7c:	0800bd81 	.word	0x0800bd81

0800bd80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <prvTaskExitError+0x54>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd92:	d00a      	beq.n	800bdaa <prvTaskExitError+0x2a>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	60fb      	str	r3, [r7, #12]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <prvTaskExitError+0x28>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	60bb      	str	r3, [r7, #8]
}
 800bdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdbe:	bf00      	nop
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0fc      	beq.n	800bdc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdc6:	bf00      	nop
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bc80      	pop	{r7}
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20000920 	.word	0x20000920
	...

0800bde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bde0:	4b07      	ldr	r3, [pc, #28]	; (800be00 <pxCurrentTCBConst2>)
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	6808      	ldr	r0, [r1, #0]
 800bde6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bdea:	f380 8809 	msr	PSP, r0
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f04f 0000 	mov.w	r0, #0
 800bdf6:	f380 8811 	msr	BASEPRI, r0
 800bdfa:	f04e 0e0d 	orr.w	lr, lr, #13
 800bdfe:	4770      	bx	lr

0800be00 <pxCurrentTCBConst2>:
 800be00:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop

0800be08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800be08:	4806      	ldr	r0, [pc, #24]	; (800be24 <prvPortStartFirstTask+0x1c>)
 800be0a:	6800      	ldr	r0, [r0, #0]
 800be0c:	6800      	ldr	r0, [r0, #0]
 800be0e:	f380 8808 	msr	MSP, r0
 800be12:	b662      	cpsie	i
 800be14:	b661      	cpsie	f
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	df00      	svc	0
 800be20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be22:	bf00      	nop
 800be24:	e000ed08 	.word	0xe000ed08

0800be28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be2e:	4b32      	ldr	r3, [pc, #200]	; (800bef8 <xPortStartScheduler+0xd0>)
 800be30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	22ff      	movs	r2, #255	; 0xff
 800be3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be50:	b2da      	uxtb	r2, r3
 800be52:	4b2a      	ldr	r3, [pc, #168]	; (800befc <xPortStartScheduler+0xd4>)
 800be54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be56:	4b2a      	ldr	r3, [pc, #168]	; (800bf00 <xPortStartScheduler+0xd8>)
 800be58:	2207      	movs	r2, #7
 800be5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be5c:	e009      	b.n	800be72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800be5e:	4b28      	ldr	r3, [pc, #160]	; (800bf00 <xPortStartScheduler+0xd8>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3b01      	subs	r3, #1
 800be64:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <xPortStartScheduler+0xd8>)
 800be66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be68:	78fb      	ldrb	r3, [r7, #3]
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be72:	78fb      	ldrb	r3, [r7, #3]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be7a:	2b80      	cmp	r3, #128	; 0x80
 800be7c:	d0ef      	beq.n	800be5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be7e:	4b20      	ldr	r3, [pc, #128]	; (800bf00 <xPortStartScheduler+0xd8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f1c3 0307 	rsb	r3, r3, #7
 800be86:	2b04      	cmp	r3, #4
 800be88:	d00a      	beq.n	800bea0 <xPortStartScheduler+0x78>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60bb      	str	r3, [r7, #8]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bea0:	4b17      	ldr	r3, [pc, #92]	; (800bf00 <xPortStartScheduler+0xd8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	021b      	lsls	r3, r3, #8
 800bea6:	4a16      	ldr	r2, [pc, #88]	; (800bf00 <xPortStartScheduler+0xd8>)
 800bea8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800beaa:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <xPortStartScheduler+0xd8>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beb2:	4a13      	ldr	r2, [pc, #76]	; (800bf00 <xPortStartScheduler+0xd8>)
 800beb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bebe:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <xPortStartScheduler+0xdc>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a10      	ldr	r2, [pc, #64]	; (800bf04 <xPortStartScheduler+0xdc>)
 800bec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bec8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800beca:	4b0e      	ldr	r3, [pc, #56]	; (800bf04 <xPortStartScheduler+0xdc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <xPortStartScheduler+0xdc>)
 800bed0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bed4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bed6:	f000 f8b9 	bl	800c04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <xPortStartScheduler+0xe0>)
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bee0:	f7ff ff92 	bl	800be08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bee4:	f7ff fbd8 	bl	800b698 <vTaskSwitchContext>
	prvTaskExitError();
 800bee8:	f7ff ff4a 	bl	800bd80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	e000e400 	.word	0xe000e400
 800befc:	20001028 	.word	0x20001028
 800bf00:	2000102c 	.word	0x2000102c
 800bf04:	e000ed20 	.word	0xe000ed20
 800bf08:	20000920 	.word	0x20000920

0800bf0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	607b      	str	r3, [r7, #4]
}
 800bf24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <vPortEnterCritical+0x58>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	4a0d      	ldr	r2, [pc, #52]	; (800bf64 <vPortEnterCritical+0x58>)
 800bf2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf30:	4b0c      	ldr	r3, [pc, #48]	; (800bf64 <vPortEnterCritical+0x58>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d10f      	bne.n	800bf58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf38:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <vPortEnterCritical+0x5c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00a      	beq.n	800bf58 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	603b      	str	r3, [r7, #0]
}
 800bf54:	bf00      	nop
 800bf56:	e7fe      	b.n	800bf56 <vPortEnterCritical+0x4a>
	}
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bc80      	pop	{r7}
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000920 	.word	0x20000920
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf72:	4b11      	ldr	r3, [pc, #68]	; (800bfb8 <vPortExitCritical+0x4c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <vPortExitCritical+0x24>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	607b      	str	r3, [r7, #4]
}
 800bf8c:	bf00      	nop
 800bf8e:	e7fe      	b.n	800bf8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf90:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <vPortExitCritical+0x4c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	4a08      	ldr	r2, [pc, #32]	; (800bfb8 <vPortExitCritical+0x4c>)
 800bf98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf9a:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <vPortExitCritical+0x4c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d105      	bne.n	800bfae <vPortExitCritical+0x42>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bc80      	pop	{r7}
 800bfb6:	4770      	bx	lr
 800bfb8:	20000920 	.word	0x20000920
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfc0:	f3ef 8009 	mrs	r0, PSP
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <pxCurrentTCBConst>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bfd0:	6010      	str	r0, [r2, #0]
 800bfd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bfd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfda:	f380 8811 	msr	BASEPRI, r0
 800bfde:	f7ff fb5b 	bl	800b698 <vTaskSwitchContext>
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8811 	msr	BASEPRI, r0
 800bfea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bfee:	6819      	ldr	r1, [r3, #0]
 800bff0:	6808      	ldr	r0, [r1, #0]
 800bff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bff6:	f380 8809 	msr	PSP, r0
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	4770      	bx	lr

0800c000 <pxCurrentTCBConst>:
 800c000:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop

0800c008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
}
 800c020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c022:	f7ff fa7b 	bl	800b51c <xTaskIncrementTick>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c02c:	4b06      	ldr	r3, [pc, #24]	; (800c048 <xPortSysTickHandler+0x40>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	2300      	movs	r3, #0
 800c036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	f383 8811 	msr	BASEPRI, r3
}
 800c03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c050:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <vPortSetupTimerInterrupt+0x30>)
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c056:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <vPortSetupTimerInterrupt+0x34>)
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c05c:	4b09      	ldr	r3, [pc, #36]	; (800c084 <vPortSetupTimerInterrupt+0x38>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a09      	ldr	r2, [pc, #36]	; (800c088 <vPortSetupTimerInterrupt+0x3c>)
 800c062:	fba2 2303 	umull	r2, r3, r2, r3
 800c066:	099b      	lsrs	r3, r3, #6
 800c068:	4a08      	ldr	r2, [pc, #32]	; (800c08c <vPortSetupTimerInterrupt+0x40>)
 800c06a:	3b01      	subs	r3, #1
 800c06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c06e:	4b03      	ldr	r3, [pc, #12]	; (800c07c <vPortSetupTimerInterrupt+0x30>)
 800c070:	2207      	movs	r2, #7
 800c072:	601a      	str	r2, [r3, #0]
}
 800c074:	bf00      	nop
 800c076:	46bd      	mov	sp, r7
 800c078:	bc80      	pop	{r7}
 800c07a:	4770      	bx	lr
 800c07c:	e000e010 	.word	0xe000e010
 800c080:	e000e018 	.word	0xe000e018
 800c084:	20000914 	.word	0x20000914
 800c088:	10624dd3 	.word	0x10624dd3
 800c08c:	e000e014 	.word	0xe000e014

0800c090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c09c:	f7ff f994 	bl	800b3c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0a0:	4b58      	ldr	r3, [pc, #352]	; (800c204 <pvPortMalloc+0x174>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0a8:	f000 f910 	bl	800c2cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0ac:	4b56      	ldr	r3, [pc, #344]	; (800c208 <pvPortMalloc+0x178>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f040 808e 	bne.w	800c1d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01d      	beq.n	800c0fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f003 0307 	and.w	r3, r3, #7
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d014      	beq.n	800c0fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f023 0307 	bic.w	r3, r3, #7
 800c0d8:	3308      	adds	r3, #8
 800c0da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f003 0307 	and.w	r3, r3, #7
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00a      	beq.n	800c0fc <pvPortMalloc+0x6c>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	617b      	str	r3, [r7, #20]
}
 800c0f8:	bf00      	nop
 800c0fa:	e7fe      	b.n	800c0fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d069      	beq.n	800c1d6 <pvPortMalloc+0x146>
 800c102:	4b42      	ldr	r3, [pc, #264]	; (800c20c <pvPortMalloc+0x17c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d864      	bhi.n	800c1d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c10c:	4b40      	ldr	r3, [pc, #256]	; (800c210 <pvPortMalloc+0x180>)
 800c10e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c110:	4b3f      	ldr	r3, [pc, #252]	; (800c210 <pvPortMalloc+0x180>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c116:	e004      	b.n	800c122 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d903      	bls.n	800c134 <pvPortMalloc+0xa4>
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1f1      	bne.n	800c118 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c134:	4b33      	ldr	r3, [pc, #204]	; (800c204 <pvPortMalloc+0x174>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d04b      	beq.n	800c1d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2208      	movs	r2, #8
 800c144:	4413      	add	r3, r2
 800c146:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	2308      	movs	r3, #8
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d91f      	bls.n	800c1a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00a      	beq.n	800c188 <pvPortMalloc+0xf8>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	613b      	str	r3, [r7, #16]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c19a:	69b8      	ldr	r0, [r7, #24]
 800c19c:	f000 f8f8 	bl	800c390 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1a0:	4b1a      	ldr	r3, [pc, #104]	; (800c20c <pvPortMalloc+0x17c>)
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	4a18      	ldr	r2, [pc, #96]	; (800c20c <pvPortMalloc+0x17c>)
 800c1ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1ae:	4b17      	ldr	r3, [pc, #92]	; (800c20c <pvPortMalloc+0x17c>)
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b18      	ldr	r3, [pc, #96]	; (800c214 <pvPortMalloc+0x184>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d203      	bcs.n	800c1c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1ba:	4b14      	ldr	r3, [pc, #80]	; (800c20c <pvPortMalloc+0x17c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a15      	ldr	r2, [pc, #84]	; (800c214 <pvPortMalloc+0x184>)
 800c1c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <pvPortMalloc+0x178>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1d6:	f7ff f905 	bl	800b3e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <pvPortMalloc+0x16a>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	60fb      	str	r3, [r7, #12]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <pvPortMalloc+0x168>
	return pvReturn;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3728      	adds	r7, #40	; 0x28
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	20001c38 	.word	0x20001c38
 800c208:	20001c44 	.word	0x20001c44
 800c20c:	20001c3c 	.word	0x20001c3c
 800c210:	20001c30 	.word	0x20001c30
 800c214:	20001c40 	.word	0x20001c40

0800c218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d048      	beq.n	800c2bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c22a:	2308      	movs	r3, #8
 800c22c:	425b      	negs	r3, r3
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	4413      	add	r3, r2
 800c232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b21      	ldr	r3, [pc, #132]	; (800c2c4 <vPortFree+0xac>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4013      	ands	r3, r2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10a      	bne.n	800c25c <vPortFree+0x44>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60fb      	str	r3, [r7, #12]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <vPortFree+0x62>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	60bb      	str	r3, [r7, #8]
}
 800c276:	bf00      	nop
 800c278:	e7fe      	b.n	800c278 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	4b11      	ldr	r3, [pc, #68]	; (800c2c4 <vPortFree+0xac>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4013      	ands	r3, r2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d019      	beq.n	800c2bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d115      	bne.n	800c2bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <vPortFree+0xac>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	43db      	mvns	r3, r3
 800c29a:	401a      	ands	r2, r3
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2a0:	f7ff f892 	bl	800b3c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <vPortFree+0xb0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	4a06      	ldr	r2, [pc, #24]	; (800c2c8 <vPortFree+0xb0>)
 800c2b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2b2:	6938      	ldr	r0, [r7, #16]
 800c2b4:	f000 f86c 	bl	800c390 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2b8:	f7ff f894 	bl	800b3e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2bc:	bf00      	nop
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	20001c44 	.word	0x20001c44
 800c2c8:	20001c3c 	.word	0x20001c3c

0800c2cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c2d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2d8:	4b27      	ldr	r3, [pc, #156]	; (800c378 <prvHeapInit+0xac>)
 800c2da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00c      	beq.n	800c300 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3307      	adds	r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0307 	bic.w	r3, r3, #7
 800c2f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	4a1f      	ldr	r2, [pc, #124]	; (800c378 <prvHeapInit+0xac>)
 800c2fc:	4413      	add	r3, r2
 800c2fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c304:	4a1d      	ldr	r2, [pc, #116]	; (800c37c <prvHeapInit+0xb0>)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <prvHeapInit+0xb0>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	4413      	add	r3, r2
 800c316:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c318:	2208      	movs	r2, #8
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	1a9b      	subs	r3, r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0307 	bic.w	r3, r3, #7
 800c326:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4a15      	ldr	r2, [pc, #84]	; (800c380 <prvHeapInit+0xb4>)
 800c32c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c32e:	4b14      	ldr	r3, [pc, #80]	; (800c380 <prvHeapInit+0xb4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2200      	movs	r2, #0
 800c334:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c336:	4b12      	ldr	r3, [pc, #72]	; (800c380 <prvHeapInit+0xb4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c34c:	4b0c      	ldr	r3, [pc, #48]	; (800c380 <prvHeapInit+0xb4>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	4a0a      	ldr	r2, [pc, #40]	; (800c384 <prvHeapInit+0xb8>)
 800c35a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	4a09      	ldr	r2, [pc, #36]	; (800c388 <prvHeapInit+0xbc>)
 800c362:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c364:	4b09      	ldr	r3, [pc, #36]	; (800c38c <prvHeapInit+0xc0>)
 800c366:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c36a:	601a      	str	r2, [r3, #0]
}
 800c36c:	bf00      	nop
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	20001030 	.word	0x20001030
 800c37c:	20001c30 	.word	0x20001c30
 800c380:	20001c38 	.word	0x20001c38
 800c384:	20001c40 	.word	0x20001c40
 800c388:	20001c3c 	.word	0x20001c3c
 800c38c:	20001c44 	.word	0x20001c44

0800c390 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c398:	4b27      	ldr	r3, [pc, #156]	; (800c438 <prvInsertBlockIntoFreeList+0xa8>)
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	e002      	b.n	800c3a4 <prvInsertBlockIntoFreeList+0x14>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	60fb      	str	r3, [r7, #12]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d8f7      	bhi.n	800c39e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d108      	bne.n	800c3d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	441a      	add	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	441a      	add	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d118      	bne.n	800c418 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <prvInsertBlockIntoFreeList+0xac>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d00d      	beq.n	800c40e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	441a      	add	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	e008      	b.n	800c420 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c40e:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <prvInsertBlockIntoFreeList+0xac>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	e003      	b.n	800c420 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	429a      	cmp	r2, r3
 800c426:	d002      	beq.n	800c42e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c42e:	bf00      	nop
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	bc80      	pop	{r7}
 800c436:	4770      	bx	lr
 800c438:	20001c30 	.word	0x20001c30
 800c43c:	20001c38 	.word	0x20001c38

0800c440 <__itoa>:
 800c440:	1e93      	subs	r3, r2, #2
 800c442:	2b22      	cmp	r3, #34	; 0x22
 800c444:	b510      	push	{r4, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	d904      	bls.n	800c454 <__itoa+0x14>
 800c44a:	2300      	movs	r3, #0
 800c44c:	461c      	mov	r4, r3
 800c44e:	700b      	strb	r3, [r1, #0]
 800c450:	4620      	mov	r0, r4
 800c452:	bd10      	pop	{r4, pc}
 800c454:	2a0a      	cmp	r2, #10
 800c456:	d109      	bne.n	800c46c <__itoa+0x2c>
 800c458:	2800      	cmp	r0, #0
 800c45a:	da07      	bge.n	800c46c <__itoa+0x2c>
 800c45c:	232d      	movs	r3, #45	; 0x2d
 800c45e:	700b      	strb	r3, [r1, #0]
 800c460:	2101      	movs	r1, #1
 800c462:	4240      	negs	r0, r0
 800c464:	4421      	add	r1, r4
 800c466:	f000 f8b9 	bl	800c5dc <__utoa>
 800c46a:	e7f1      	b.n	800c450 <__itoa+0x10>
 800c46c:	2100      	movs	r1, #0
 800c46e:	e7f9      	b.n	800c464 <__itoa+0x24>

0800c470 <itoa>:
 800c470:	f7ff bfe6 	b.w	800c440 <__itoa>

0800c474 <malloc>:
 800c474:	4b02      	ldr	r3, [pc, #8]	; (800c480 <malloc+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	f000 b823 	b.w	800c4c4 <_malloc_r>
 800c47e:	bf00      	nop
 800c480:	20000970 	.word	0x20000970

0800c484 <sbrk_aligned>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4e0e      	ldr	r6, [pc, #56]	; (800c4c0 <sbrk_aligned+0x3c>)
 800c488:	460c      	mov	r4, r1
 800c48a:	6831      	ldr	r1, [r6, #0]
 800c48c:	4605      	mov	r5, r0
 800c48e:	b911      	cbnz	r1, 800c496 <sbrk_aligned+0x12>
 800c490:	f000 f8ee 	bl	800c670 <_sbrk_r>
 800c494:	6030      	str	r0, [r6, #0]
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f000 f8e9 	bl	800c670 <_sbrk_r>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d00a      	beq.n	800c4b8 <sbrk_aligned+0x34>
 800c4a2:	1cc4      	adds	r4, r0, #3
 800c4a4:	f024 0403 	bic.w	r4, r4, #3
 800c4a8:	42a0      	cmp	r0, r4
 800c4aa:	d007      	beq.n	800c4bc <sbrk_aligned+0x38>
 800c4ac:	1a21      	subs	r1, r4, r0
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 f8de 	bl	800c670 <_sbrk_r>
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	d101      	bne.n	800c4bc <sbrk_aligned+0x38>
 800c4b8:	f04f 34ff 	mov.w	r4, #4294967295
 800c4bc:	4620      	mov	r0, r4
 800c4be:	bd70      	pop	{r4, r5, r6, pc}
 800c4c0:	20001c4c 	.word	0x20001c4c

0800c4c4 <_malloc_r>:
 800c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c8:	1ccd      	adds	r5, r1, #3
 800c4ca:	f025 0503 	bic.w	r5, r5, #3
 800c4ce:	3508      	adds	r5, #8
 800c4d0:	2d0c      	cmp	r5, #12
 800c4d2:	bf38      	it	cc
 800c4d4:	250c      	movcc	r5, #12
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	4607      	mov	r7, r0
 800c4da:	db01      	blt.n	800c4e0 <_malloc_r+0x1c>
 800c4dc:	42a9      	cmp	r1, r5
 800c4de:	d905      	bls.n	800c4ec <_malloc_r+0x28>
 800c4e0:	230c      	movs	r3, #12
 800c4e2:	2600      	movs	r6, #0
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5c0 <_malloc_r+0xfc>
 800c4f0:	f000 f868 	bl	800c5c4 <__malloc_lock>
 800c4f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f8:	461c      	mov	r4, r3
 800c4fa:	bb5c      	cbnz	r4, 800c554 <_malloc_r+0x90>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4638      	mov	r0, r7
 800c500:	f7ff ffc0 	bl	800c484 <sbrk_aligned>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	4604      	mov	r4, r0
 800c508:	d155      	bne.n	800c5b6 <_malloc_r+0xf2>
 800c50a:	f8d8 4000 	ldr.w	r4, [r8]
 800c50e:	4626      	mov	r6, r4
 800c510:	2e00      	cmp	r6, #0
 800c512:	d145      	bne.n	800c5a0 <_malloc_r+0xdc>
 800c514:	2c00      	cmp	r4, #0
 800c516:	d048      	beq.n	800c5aa <_malloc_r+0xe6>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	4631      	mov	r1, r6
 800c51c:	4638      	mov	r0, r7
 800c51e:	eb04 0903 	add.w	r9, r4, r3
 800c522:	f000 f8a5 	bl	800c670 <_sbrk_r>
 800c526:	4581      	cmp	r9, r0
 800c528:	d13f      	bne.n	800c5aa <_malloc_r+0xe6>
 800c52a:	6821      	ldr	r1, [r4, #0]
 800c52c:	4638      	mov	r0, r7
 800c52e:	1a6d      	subs	r5, r5, r1
 800c530:	4629      	mov	r1, r5
 800c532:	f7ff ffa7 	bl	800c484 <sbrk_aligned>
 800c536:	3001      	adds	r0, #1
 800c538:	d037      	beq.n	800c5aa <_malloc_r+0xe6>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	442b      	add	r3, r5
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	f8d8 3000 	ldr.w	r3, [r8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d038      	beq.n	800c5ba <_malloc_r+0xf6>
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	42a2      	cmp	r2, r4
 800c54c:	d12b      	bne.n	800c5a6 <_malloc_r+0xe2>
 800c54e:	2200      	movs	r2, #0
 800c550:	605a      	str	r2, [r3, #4]
 800c552:	e00f      	b.n	800c574 <_malloc_r+0xb0>
 800c554:	6822      	ldr	r2, [r4, #0]
 800c556:	1b52      	subs	r2, r2, r5
 800c558:	d41f      	bmi.n	800c59a <_malloc_r+0xd6>
 800c55a:	2a0b      	cmp	r2, #11
 800c55c:	d917      	bls.n	800c58e <_malloc_r+0xca>
 800c55e:	1961      	adds	r1, r4, r5
 800c560:	42a3      	cmp	r3, r4
 800c562:	6025      	str	r5, [r4, #0]
 800c564:	bf18      	it	ne
 800c566:	6059      	strne	r1, [r3, #4]
 800c568:	6863      	ldr	r3, [r4, #4]
 800c56a:	bf08      	it	eq
 800c56c:	f8c8 1000 	streq.w	r1, [r8]
 800c570:	5162      	str	r2, [r4, r5]
 800c572:	604b      	str	r3, [r1, #4]
 800c574:	4638      	mov	r0, r7
 800c576:	f104 060b 	add.w	r6, r4, #11
 800c57a:	f000 f829 	bl	800c5d0 <__malloc_unlock>
 800c57e:	f026 0607 	bic.w	r6, r6, #7
 800c582:	1d23      	adds	r3, r4, #4
 800c584:	1af2      	subs	r2, r6, r3
 800c586:	d0ae      	beq.n	800c4e6 <_malloc_r+0x22>
 800c588:	1b9b      	subs	r3, r3, r6
 800c58a:	50a3      	str	r3, [r4, r2]
 800c58c:	e7ab      	b.n	800c4e6 <_malloc_r+0x22>
 800c58e:	42a3      	cmp	r3, r4
 800c590:	6862      	ldr	r2, [r4, #4]
 800c592:	d1dd      	bne.n	800c550 <_malloc_r+0x8c>
 800c594:	f8c8 2000 	str.w	r2, [r8]
 800c598:	e7ec      	b.n	800c574 <_malloc_r+0xb0>
 800c59a:	4623      	mov	r3, r4
 800c59c:	6864      	ldr	r4, [r4, #4]
 800c59e:	e7ac      	b.n	800c4fa <_malloc_r+0x36>
 800c5a0:	4634      	mov	r4, r6
 800c5a2:	6876      	ldr	r6, [r6, #4]
 800c5a4:	e7b4      	b.n	800c510 <_malloc_r+0x4c>
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	e7cc      	b.n	800c544 <_malloc_r+0x80>
 800c5aa:	230c      	movs	r3, #12
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	f000 f80e 	bl	800c5d0 <__malloc_unlock>
 800c5b4:	e797      	b.n	800c4e6 <_malloc_r+0x22>
 800c5b6:	6025      	str	r5, [r4, #0]
 800c5b8:	e7dc      	b.n	800c574 <_malloc_r+0xb0>
 800c5ba:	605b      	str	r3, [r3, #4]
 800c5bc:	deff      	udf	#255	; 0xff
 800c5be:	bf00      	nop
 800c5c0:	20001c48 	.word	0x20001c48

0800c5c4 <__malloc_lock>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__malloc_lock+0x8>)
 800c5c6:	f000 b88d 	b.w	800c6e4 <__retarget_lock_acquire_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20001d8c 	.word	0x20001d8c

0800c5d0 <__malloc_unlock>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	; (800c5d8 <__malloc_unlock+0x8>)
 800c5d2:	f000 b888 	b.w	800c6e6 <__retarget_lock_release_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	20001d8c 	.word	0x20001d8c

0800c5dc <__utoa>:
 800c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5de:	b08b      	sub	sp, #44	; 0x2c
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	466e      	mov	r6, sp
 800c5e6:	4c1d      	ldr	r4, [pc, #116]	; (800c65c <__utoa+0x80>)
 800c5e8:	f104 0c20 	add.w	ip, r4, #32
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	6820      	ldr	r0, [r4, #0]
 800c5f0:	6861      	ldr	r1, [r4, #4]
 800c5f2:	3408      	adds	r4, #8
 800c5f4:	c703      	stmia	r7!, {r0, r1}
 800c5f6:	4564      	cmp	r4, ip
 800c5f8:	463e      	mov	r6, r7
 800c5fa:	d1f7      	bne.n	800c5ec <__utoa+0x10>
 800c5fc:	7921      	ldrb	r1, [r4, #4]
 800c5fe:	6820      	ldr	r0, [r4, #0]
 800c600:	7139      	strb	r1, [r7, #4]
 800c602:	1e91      	subs	r1, r2, #2
 800c604:	2922      	cmp	r1, #34	; 0x22
 800c606:	6038      	str	r0, [r7, #0]
 800c608:	f04f 0100 	mov.w	r1, #0
 800c60c:	d904      	bls.n	800c618 <__utoa+0x3c>
 800c60e:	7019      	strb	r1, [r3, #0]
 800c610:	460b      	mov	r3, r1
 800c612:	4618      	mov	r0, r3
 800c614:	b00b      	add	sp, #44	; 0x2c
 800c616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c618:	1e58      	subs	r0, r3, #1
 800c61a:	4684      	mov	ip, r0
 800c61c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c620:	fb02 5617 	mls	r6, r2, r7, r5
 800c624:	3628      	adds	r6, #40	; 0x28
 800c626:	446e      	add	r6, sp
 800c628:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c62c:	460c      	mov	r4, r1
 800c62e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c632:	462e      	mov	r6, r5
 800c634:	42b2      	cmp	r2, r6
 800c636:	463d      	mov	r5, r7
 800c638:	f101 0101 	add.w	r1, r1, #1
 800c63c:	d9ee      	bls.n	800c61c <__utoa+0x40>
 800c63e:	2200      	movs	r2, #0
 800c640:	545a      	strb	r2, [r3, r1]
 800c642:	1919      	adds	r1, r3, r4
 800c644:	1aa5      	subs	r5, r4, r2
 800c646:	42aa      	cmp	r2, r5
 800c648:	dae3      	bge.n	800c612 <__utoa+0x36>
 800c64a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c64e:	780e      	ldrb	r6, [r1, #0]
 800c650:	3201      	adds	r2, #1
 800c652:	7006      	strb	r6, [r0, #0]
 800c654:	f801 5901 	strb.w	r5, [r1], #-1
 800c658:	e7f4      	b.n	800c644 <__utoa+0x68>
 800c65a:	bf00      	nop
 800c65c:	0800d504 	.word	0x0800d504

0800c660 <memset>:
 800c660:	4603      	mov	r3, r0
 800c662:	4402      	add	r2, r0
 800c664:	4293      	cmp	r3, r2
 800c666:	d100      	bne.n	800c66a <memset+0xa>
 800c668:	4770      	bx	lr
 800c66a:	f803 1b01 	strb.w	r1, [r3], #1
 800c66e:	e7f9      	b.n	800c664 <memset+0x4>

0800c670 <_sbrk_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	2300      	movs	r3, #0
 800c674:	4d05      	ldr	r5, [pc, #20]	; (800c68c <_sbrk_r+0x1c>)
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7fa ffa0 	bl	80075c0 <_sbrk>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_sbrk_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_sbrk_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	20001d88 	.word	0x20001d88

0800c690 <__errno>:
 800c690:	4b01      	ldr	r3, [pc, #4]	; (800c698 <__errno+0x8>)
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	20000970 	.word	0x20000970

0800c69c <__libc_init_array>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	2600      	movs	r6, #0
 800c6a0:	4d0c      	ldr	r5, [pc, #48]	; (800c6d4 <__libc_init_array+0x38>)
 800c6a2:	4c0d      	ldr	r4, [pc, #52]	; (800c6d8 <__libc_init_array+0x3c>)
 800c6a4:	1b64      	subs	r4, r4, r5
 800c6a6:	10a4      	asrs	r4, r4, #2
 800c6a8:	42a6      	cmp	r6, r4
 800c6aa:	d109      	bne.n	800c6c0 <__libc_init_array+0x24>
 800c6ac:	f000 f832 	bl	800c714 <_init>
 800c6b0:	2600      	movs	r6, #0
 800c6b2:	4d0a      	ldr	r5, [pc, #40]	; (800c6dc <__libc_init_array+0x40>)
 800c6b4:	4c0a      	ldr	r4, [pc, #40]	; (800c6e0 <__libc_init_array+0x44>)
 800c6b6:	1b64      	subs	r4, r4, r5
 800c6b8:	10a4      	asrs	r4, r4, #2
 800c6ba:	42a6      	cmp	r6, r4
 800c6bc:	d105      	bne.n	800c6ca <__libc_init_array+0x2e>
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6c4:	4798      	blx	r3
 800c6c6:	3601      	adds	r6, #1
 800c6c8:	e7ee      	b.n	800c6a8 <__libc_init_array+0xc>
 800c6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ce:	4798      	blx	r3
 800c6d0:	3601      	adds	r6, #1
 800c6d2:	e7f2      	b.n	800c6ba <__libc_init_array+0x1e>
 800c6d4:	0800d52c 	.word	0x0800d52c
 800c6d8:	0800d52c 	.word	0x0800d52c
 800c6dc:	0800d52c 	.word	0x0800d52c
 800c6e0:	0800d530 	.word	0x0800d530

0800c6e4 <__retarget_lock_acquire_recursive>:
 800c6e4:	4770      	bx	lr

0800c6e6 <__retarget_lock_release_recursive>:
 800c6e6:	4770      	bx	lr

0800c6e8 <strcpy>:
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ee:	f803 2b01 	strb.w	r2, [r3], #1
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	d1f9      	bne.n	800c6ea <strcpy+0x2>
 800c6f6:	4770      	bx	lr

0800c6f8 <memcpy>:
 800c6f8:	440a      	add	r2, r1
 800c6fa:	4291      	cmp	r1, r2
 800c6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c700:	d100      	bne.n	800c704 <memcpy+0xc>
 800c702:	4770      	bx	lr
 800c704:	b510      	push	{r4, lr}
 800c706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c70a:	4291      	cmp	r1, r2
 800c70c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c710:	d1f9      	bne.n	800c706 <memcpy+0xe>
 800c712:	bd10      	pop	{r4, pc}

0800c714 <_init>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	bf00      	nop
 800c718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71a:	bc08      	pop	{r3}
 800c71c:	469e      	mov	lr, r3
 800c71e:	4770      	bx	lr

0800c720 <_fini>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	bf00      	nop
 800c724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c726:	bc08      	pop	{r3}
 800c728:	469e      	mov	lr, r3
 800c72a:	4770      	bx	lr
